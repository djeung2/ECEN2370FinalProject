
Finalv2.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001ac  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0000760c  080001b0  080001b0  000011b0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00001260  080077bc  080077bc  000087bc  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08008a1c  08008a1c  0000a08c  2**0
                  CONTENTS
  4 .ARM          00000008  08008a1c  08008a1c  00009a1c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08008a24  08008a24  0000a08c  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08008a24  08008a24  00009a24  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  7 .fini_array   00000004  08008a28  08008a28  00009a28  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  8 .data         0000008c  20000000  08008a2c  0000a000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .ccmram       00000000  10000000  10000000  0000a08c  2**0
                  CONTENTS
 10 .bss          00025d90  2000008c  2000008c  0000a08c  2**2
                  ALLOC
 11 ._user_heap_stack 00000604  20025e1c  20025e1c  0000a08c  2**0
                  ALLOC
 12 .ARM.attributes 00000030  00000000  00000000  0000a08c  2**0
                  CONTENTS, READONLY
 13 .debug_info   000155f3  00000000  00000000  0000a0bc  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_abbrev 00003463  00000000  00000000  0001f6af  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_aranges 00001478  00000000  00000000  00022b18  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_rnglists 00000fcc  00000000  00000000  00023f90  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_macro  00027062  00000000  00000000  00024f5c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_line   0001913e  00000000  00000000  0004bfbe  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_str    000e2d53  00000000  00000000  000650fc  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .comment      00000043  00000000  00000000  00147e4f  2**0
                  CONTENTS, READONLY
 21 .debug_frame  00005d50  00000000  00000000  00147e94  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 22 .debug_line_str 00000063  00000000  00000000  0014dbe4  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001b0 <__do_global_dtors_aux>:
 80001b0:	b510      	push	{r4, lr}
 80001b2:	4c05      	ldr	r4, [pc, #20]	@ (80001c8 <__do_global_dtors_aux+0x18>)
 80001b4:	7823      	ldrb	r3, [r4, #0]
 80001b6:	b933      	cbnz	r3, 80001c6 <__do_global_dtors_aux+0x16>
 80001b8:	4b04      	ldr	r3, [pc, #16]	@ (80001cc <__do_global_dtors_aux+0x1c>)
 80001ba:	b113      	cbz	r3, 80001c2 <__do_global_dtors_aux+0x12>
 80001bc:	4804      	ldr	r0, [pc, #16]	@ (80001d0 <__do_global_dtors_aux+0x20>)
 80001be:	f3af 8000 	nop.w
 80001c2:	2301      	movs	r3, #1
 80001c4:	7023      	strb	r3, [r4, #0]
 80001c6:	bd10      	pop	{r4, pc}
 80001c8:	2000008c 	.word	0x2000008c
 80001cc:	00000000 	.word	0x00000000
 80001d0:	080077a4 	.word	0x080077a4

080001d4 <frame_dummy>:
 80001d4:	b508      	push	{r3, lr}
 80001d6:	4b03      	ldr	r3, [pc, #12]	@ (80001e4 <frame_dummy+0x10>)
 80001d8:	b11b      	cbz	r3, 80001e2 <frame_dummy+0xe>
 80001da:	4903      	ldr	r1, [pc, #12]	@ (80001e8 <frame_dummy+0x14>)
 80001dc:	4803      	ldr	r0, [pc, #12]	@ (80001ec <frame_dummy+0x18>)
 80001de:	f3af 8000 	nop.w
 80001e2:	bd08      	pop	{r3, pc}
 80001e4:	00000000 	.word	0x00000000
 80001e8:	20000090 	.word	0x20000090
 80001ec:	080077a4 	.word	0x080077a4

080001f0 <memchr>:
 80001f0:	f001 01ff 	and.w	r1, r1, #255	@ 0xff
 80001f4:	2a10      	cmp	r2, #16
 80001f6:	db2b      	blt.n	8000250 <memchr+0x60>
 80001f8:	f010 0f07 	tst.w	r0, #7
 80001fc:	d008      	beq.n	8000210 <memchr+0x20>
 80001fe:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000202:	3a01      	subs	r2, #1
 8000204:	428b      	cmp	r3, r1
 8000206:	d02d      	beq.n	8000264 <memchr+0x74>
 8000208:	f010 0f07 	tst.w	r0, #7
 800020c:	b342      	cbz	r2, 8000260 <memchr+0x70>
 800020e:	d1f6      	bne.n	80001fe <memchr+0xe>
 8000210:	b4f0      	push	{r4, r5, r6, r7}
 8000212:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000216:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800021a:	f022 0407 	bic.w	r4, r2, #7
 800021e:	f07f 0700 	mvns.w	r7, #0
 8000222:	2300      	movs	r3, #0
 8000224:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000228:	3c08      	subs	r4, #8
 800022a:	ea85 0501 	eor.w	r5, r5, r1
 800022e:	ea86 0601 	eor.w	r6, r6, r1
 8000232:	fa85 f547 	uadd8	r5, r5, r7
 8000236:	faa3 f587 	sel	r5, r3, r7
 800023a:	fa86 f647 	uadd8	r6, r6, r7
 800023e:	faa5 f687 	sel	r6, r5, r7
 8000242:	b98e      	cbnz	r6, 8000268 <memchr+0x78>
 8000244:	d1ee      	bne.n	8000224 <memchr+0x34>
 8000246:	bcf0      	pop	{r4, r5, r6, r7}
 8000248:	f001 01ff 	and.w	r1, r1, #255	@ 0xff
 800024c:	f002 0207 	and.w	r2, r2, #7
 8000250:	b132      	cbz	r2, 8000260 <memchr+0x70>
 8000252:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000256:	3a01      	subs	r2, #1
 8000258:	ea83 0301 	eor.w	r3, r3, r1
 800025c:	b113      	cbz	r3, 8000264 <memchr+0x74>
 800025e:	d1f8      	bne.n	8000252 <memchr+0x62>
 8000260:	2000      	movs	r0, #0
 8000262:	4770      	bx	lr
 8000264:	3801      	subs	r0, #1
 8000266:	4770      	bx	lr
 8000268:	2d00      	cmp	r5, #0
 800026a:	bf06      	itte	eq
 800026c:	4635      	moveq	r5, r6
 800026e:	3803      	subeq	r0, #3
 8000270:	3807      	subne	r0, #7
 8000272:	f015 0f01 	tst.w	r5, #1
 8000276:	d107      	bne.n	8000288 <memchr+0x98>
 8000278:	3001      	adds	r0, #1
 800027a:	f415 7f80 	tst.w	r5, #256	@ 0x100
 800027e:	bf02      	ittt	eq
 8000280:	3001      	addeq	r0, #1
 8000282:	f415 3fc0 	tsteq.w	r5, #98304	@ 0x18000
 8000286:	3001      	addeq	r0, #1
 8000288:	bcf0      	pop	{r4, r5, r6, r7}
 800028a:	3801      	subs	r0, #1
 800028c:	4770      	bx	lr
 800028e:	bf00      	nop

08000290 <__aeabi_uldivmod>:
 8000290:	b953      	cbnz	r3, 80002a8 <__aeabi_uldivmod+0x18>
 8000292:	b94a      	cbnz	r2, 80002a8 <__aeabi_uldivmod+0x18>
 8000294:	2900      	cmp	r1, #0
 8000296:	bf08      	it	eq
 8000298:	2800      	cmpeq	r0, #0
 800029a:	bf1c      	itt	ne
 800029c:	f04f 31ff 	movne.w	r1, #4294967295
 80002a0:	f04f 30ff 	movne.w	r0, #4294967295
 80002a4:	f000 b96a 	b.w	800057c <__aeabi_idiv0>
 80002a8:	f1ad 0c08 	sub.w	ip, sp, #8
 80002ac:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 80002b0:	f000 f806 	bl	80002c0 <__udivmoddi4>
 80002b4:	f8dd e004 	ldr.w	lr, [sp, #4]
 80002b8:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 80002bc:	b004      	add	sp, #16
 80002be:	4770      	bx	lr

080002c0 <__udivmoddi4>:
 80002c0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80002c4:	9d08      	ldr	r5, [sp, #32]
 80002c6:	460c      	mov	r4, r1
 80002c8:	2b00      	cmp	r3, #0
 80002ca:	d14e      	bne.n	800036a <__udivmoddi4+0xaa>
 80002cc:	4694      	mov	ip, r2
 80002ce:	458c      	cmp	ip, r1
 80002d0:	4686      	mov	lr, r0
 80002d2:	fab2 f282 	clz	r2, r2
 80002d6:	d962      	bls.n	800039e <__udivmoddi4+0xde>
 80002d8:	b14a      	cbz	r2, 80002ee <__udivmoddi4+0x2e>
 80002da:	f1c2 0320 	rsb	r3, r2, #32
 80002de:	4091      	lsls	r1, r2
 80002e0:	fa20 f303 	lsr.w	r3, r0, r3
 80002e4:	fa0c fc02 	lsl.w	ip, ip, r2
 80002e8:	4319      	orrs	r1, r3
 80002ea:	fa00 fe02 	lsl.w	lr, r0, r2
 80002ee:	ea4f 471c 	mov.w	r7, ip, lsr #16
 80002f2:	fa1f f68c 	uxth.w	r6, ip
 80002f6:	fbb1 f4f7 	udiv	r4, r1, r7
 80002fa:	ea4f 431e 	mov.w	r3, lr, lsr #16
 80002fe:	fb07 1114 	mls	r1, r7, r4, r1
 8000302:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000306:	fb04 f106 	mul.w	r1, r4, r6
 800030a:	4299      	cmp	r1, r3
 800030c:	d90a      	bls.n	8000324 <__udivmoddi4+0x64>
 800030e:	eb1c 0303 	adds.w	r3, ip, r3
 8000312:	f104 30ff 	add.w	r0, r4, #4294967295
 8000316:	f080 8112 	bcs.w	800053e <__udivmoddi4+0x27e>
 800031a:	4299      	cmp	r1, r3
 800031c:	f240 810f 	bls.w	800053e <__udivmoddi4+0x27e>
 8000320:	3c02      	subs	r4, #2
 8000322:	4463      	add	r3, ip
 8000324:	1a59      	subs	r1, r3, r1
 8000326:	fa1f f38e 	uxth.w	r3, lr
 800032a:	fbb1 f0f7 	udiv	r0, r1, r7
 800032e:	fb07 1110 	mls	r1, r7, r0, r1
 8000332:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000336:	fb00 f606 	mul.w	r6, r0, r6
 800033a:	429e      	cmp	r6, r3
 800033c:	d90a      	bls.n	8000354 <__udivmoddi4+0x94>
 800033e:	eb1c 0303 	adds.w	r3, ip, r3
 8000342:	f100 31ff 	add.w	r1, r0, #4294967295
 8000346:	f080 80fc 	bcs.w	8000542 <__udivmoddi4+0x282>
 800034a:	429e      	cmp	r6, r3
 800034c:	f240 80f9 	bls.w	8000542 <__udivmoddi4+0x282>
 8000350:	4463      	add	r3, ip
 8000352:	3802      	subs	r0, #2
 8000354:	1b9b      	subs	r3, r3, r6
 8000356:	ea40 4004 	orr.w	r0, r0, r4, lsl #16
 800035a:	2100      	movs	r1, #0
 800035c:	b11d      	cbz	r5, 8000366 <__udivmoddi4+0xa6>
 800035e:	40d3      	lsrs	r3, r2
 8000360:	2200      	movs	r2, #0
 8000362:	e9c5 3200 	strd	r3, r2, [r5]
 8000366:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800036a:	428b      	cmp	r3, r1
 800036c:	d905      	bls.n	800037a <__udivmoddi4+0xba>
 800036e:	b10d      	cbz	r5, 8000374 <__udivmoddi4+0xb4>
 8000370:	e9c5 0100 	strd	r0, r1, [r5]
 8000374:	2100      	movs	r1, #0
 8000376:	4608      	mov	r0, r1
 8000378:	e7f5      	b.n	8000366 <__udivmoddi4+0xa6>
 800037a:	fab3 f183 	clz	r1, r3
 800037e:	2900      	cmp	r1, #0
 8000380:	d146      	bne.n	8000410 <__udivmoddi4+0x150>
 8000382:	42a3      	cmp	r3, r4
 8000384:	d302      	bcc.n	800038c <__udivmoddi4+0xcc>
 8000386:	4290      	cmp	r0, r2
 8000388:	f0c0 80f0 	bcc.w	800056c <__udivmoddi4+0x2ac>
 800038c:	1a86      	subs	r6, r0, r2
 800038e:	eb64 0303 	sbc.w	r3, r4, r3
 8000392:	2001      	movs	r0, #1
 8000394:	2d00      	cmp	r5, #0
 8000396:	d0e6      	beq.n	8000366 <__udivmoddi4+0xa6>
 8000398:	e9c5 6300 	strd	r6, r3, [r5]
 800039c:	e7e3      	b.n	8000366 <__udivmoddi4+0xa6>
 800039e:	2a00      	cmp	r2, #0
 80003a0:	f040 8090 	bne.w	80004c4 <__udivmoddi4+0x204>
 80003a4:	eba1 040c 	sub.w	r4, r1, ip
 80003a8:	ea4f 481c 	mov.w	r8, ip, lsr #16
 80003ac:	fa1f f78c 	uxth.w	r7, ip
 80003b0:	2101      	movs	r1, #1
 80003b2:	fbb4 f6f8 	udiv	r6, r4, r8
 80003b6:	ea4f 431e 	mov.w	r3, lr, lsr #16
 80003ba:	fb08 4416 	mls	r4, r8, r6, r4
 80003be:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 80003c2:	fb07 f006 	mul.w	r0, r7, r6
 80003c6:	4298      	cmp	r0, r3
 80003c8:	d908      	bls.n	80003dc <__udivmoddi4+0x11c>
 80003ca:	eb1c 0303 	adds.w	r3, ip, r3
 80003ce:	f106 34ff 	add.w	r4, r6, #4294967295
 80003d2:	d202      	bcs.n	80003da <__udivmoddi4+0x11a>
 80003d4:	4298      	cmp	r0, r3
 80003d6:	f200 80cd 	bhi.w	8000574 <__udivmoddi4+0x2b4>
 80003da:	4626      	mov	r6, r4
 80003dc:	1a1c      	subs	r4, r3, r0
 80003de:	fa1f f38e 	uxth.w	r3, lr
 80003e2:	fbb4 f0f8 	udiv	r0, r4, r8
 80003e6:	fb08 4410 	mls	r4, r8, r0, r4
 80003ea:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 80003ee:	fb00 f707 	mul.w	r7, r0, r7
 80003f2:	429f      	cmp	r7, r3
 80003f4:	d908      	bls.n	8000408 <__udivmoddi4+0x148>
 80003f6:	eb1c 0303 	adds.w	r3, ip, r3
 80003fa:	f100 34ff 	add.w	r4, r0, #4294967295
 80003fe:	d202      	bcs.n	8000406 <__udivmoddi4+0x146>
 8000400:	429f      	cmp	r7, r3
 8000402:	f200 80b0 	bhi.w	8000566 <__udivmoddi4+0x2a6>
 8000406:	4620      	mov	r0, r4
 8000408:	1bdb      	subs	r3, r3, r7
 800040a:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 800040e:	e7a5      	b.n	800035c <__udivmoddi4+0x9c>
 8000410:	f1c1 0620 	rsb	r6, r1, #32
 8000414:	408b      	lsls	r3, r1
 8000416:	fa22 f706 	lsr.w	r7, r2, r6
 800041a:	431f      	orrs	r7, r3
 800041c:	fa20 fc06 	lsr.w	ip, r0, r6
 8000420:	fa04 f301 	lsl.w	r3, r4, r1
 8000424:	ea43 030c 	orr.w	r3, r3, ip
 8000428:	40f4      	lsrs	r4, r6
 800042a:	fa00 f801 	lsl.w	r8, r0, r1
 800042e:	0c38      	lsrs	r0, r7, #16
 8000430:	ea4f 4913 	mov.w	r9, r3, lsr #16
 8000434:	fbb4 fef0 	udiv	lr, r4, r0
 8000438:	fa1f fc87 	uxth.w	ip, r7
 800043c:	fb00 441e 	mls	r4, r0, lr, r4
 8000440:	ea49 4404 	orr.w	r4, r9, r4, lsl #16
 8000444:	fb0e f90c 	mul.w	r9, lr, ip
 8000448:	45a1      	cmp	r9, r4
 800044a:	fa02 f201 	lsl.w	r2, r2, r1
 800044e:	d90a      	bls.n	8000466 <__udivmoddi4+0x1a6>
 8000450:	193c      	adds	r4, r7, r4
 8000452:	f10e 3aff 	add.w	sl, lr, #4294967295
 8000456:	f080 8084 	bcs.w	8000562 <__udivmoddi4+0x2a2>
 800045a:	45a1      	cmp	r9, r4
 800045c:	f240 8081 	bls.w	8000562 <__udivmoddi4+0x2a2>
 8000460:	f1ae 0e02 	sub.w	lr, lr, #2
 8000464:	443c      	add	r4, r7
 8000466:	eba4 0409 	sub.w	r4, r4, r9
 800046a:	fa1f f983 	uxth.w	r9, r3
 800046e:	fbb4 f3f0 	udiv	r3, r4, r0
 8000472:	fb00 4413 	mls	r4, r0, r3, r4
 8000476:	ea49 4404 	orr.w	r4, r9, r4, lsl #16
 800047a:	fb03 fc0c 	mul.w	ip, r3, ip
 800047e:	45a4      	cmp	ip, r4
 8000480:	d907      	bls.n	8000492 <__udivmoddi4+0x1d2>
 8000482:	193c      	adds	r4, r7, r4
 8000484:	f103 30ff 	add.w	r0, r3, #4294967295
 8000488:	d267      	bcs.n	800055a <__udivmoddi4+0x29a>
 800048a:	45a4      	cmp	ip, r4
 800048c:	d965      	bls.n	800055a <__udivmoddi4+0x29a>
 800048e:	3b02      	subs	r3, #2
 8000490:	443c      	add	r4, r7
 8000492:	ea43 400e 	orr.w	r0, r3, lr, lsl #16
 8000496:	fba0 9302 	umull	r9, r3, r0, r2
 800049a:	eba4 040c 	sub.w	r4, r4, ip
 800049e:	429c      	cmp	r4, r3
 80004a0:	46ce      	mov	lr, r9
 80004a2:	469c      	mov	ip, r3
 80004a4:	d351      	bcc.n	800054a <__udivmoddi4+0x28a>
 80004a6:	d04e      	beq.n	8000546 <__udivmoddi4+0x286>
 80004a8:	b155      	cbz	r5, 80004c0 <__udivmoddi4+0x200>
 80004aa:	ebb8 030e 	subs.w	r3, r8, lr
 80004ae:	eb64 040c 	sbc.w	r4, r4, ip
 80004b2:	fa04 f606 	lsl.w	r6, r4, r6
 80004b6:	40cb      	lsrs	r3, r1
 80004b8:	431e      	orrs	r6, r3
 80004ba:	40cc      	lsrs	r4, r1
 80004bc:	e9c5 6400 	strd	r6, r4, [r5]
 80004c0:	2100      	movs	r1, #0
 80004c2:	e750      	b.n	8000366 <__udivmoddi4+0xa6>
 80004c4:	f1c2 0320 	rsb	r3, r2, #32
 80004c8:	fa20 f103 	lsr.w	r1, r0, r3
 80004cc:	fa0c fc02 	lsl.w	ip, ip, r2
 80004d0:	fa24 f303 	lsr.w	r3, r4, r3
 80004d4:	4094      	lsls	r4, r2
 80004d6:	430c      	orrs	r4, r1
 80004d8:	ea4f 481c 	mov.w	r8, ip, lsr #16
 80004dc:	fa00 fe02 	lsl.w	lr, r0, r2
 80004e0:	fa1f f78c 	uxth.w	r7, ip
 80004e4:	fbb3 f0f8 	udiv	r0, r3, r8
 80004e8:	fb08 3110 	mls	r1, r8, r0, r3
 80004ec:	0c23      	lsrs	r3, r4, #16
 80004ee:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 80004f2:	fb00 f107 	mul.w	r1, r0, r7
 80004f6:	4299      	cmp	r1, r3
 80004f8:	d908      	bls.n	800050c <__udivmoddi4+0x24c>
 80004fa:	eb1c 0303 	adds.w	r3, ip, r3
 80004fe:	f100 36ff 	add.w	r6, r0, #4294967295
 8000502:	d22c      	bcs.n	800055e <__udivmoddi4+0x29e>
 8000504:	4299      	cmp	r1, r3
 8000506:	d92a      	bls.n	800055e <__udivmoddi4+0x29e>
 8000508:	3802      	subs	r0, #2
 800050a:	4463      	add	r3, ip
 800050c:	1a5b      	subs	r3, r3, r1
 800050e:	b2a4      	uxth	r4, r4
 8000510:	fbb3 f1f8 	udiv	r1, r3, r8
 8000514:	fb08 3311 	mls	r3, r8, r1, r3
 8000518:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 800051c:	fb01 f307 	mul.w	r3, r1, r7
 8000520:	42a3      	cmp	r3, r4
 8000522:	d908      	bls.n	8000536 <__udivmoddi4+0x276>
 8000524:	eb1c 0404 	adds.w	r4, ip, r4
 8000528:	f101 36ff 	add.w	r6, r1, #4294967295
 800052c:	d213      	bcs.n	8000556 <__udivmoddi4+0x296>
 800052e:	42a3      	cmp	r3, r4
 8000530:	d911      	bls.n	8000556 <__udivmoddi4+0x296>
 8000532:	3902      	subs	r1, #2
 8000534:	4464      	add	r4, ip
 8000536:	1ae4      	subs	r4, r4, r3
 8000538:	ea41 4100 	orr.w	r1, r1, r0, lsl #16
 800053c:	e739      	b.n	80003b2 <__udivmoddi4+0xf2>
 800053e:	4604      	mov	r4, r0
 8000540:	e6f0      	b.n	8000324 <__udivmoddi4+0x64>
 8000542:	4608      	mov	r0, r1
 8000544:	e706      	b.n	8000354 <__udivmoddi4+0x94>
 8000546:	45c8      	cmp	r8, r9
 8000548:	d2ae      	bcs.n	80004a8 <__udivmoddi4+0x1e8>
 800054a:	ebb9 0e02 	subs.w	lr, r9, r2
 800054e:	eb63 0c07 	sbc.w	ip, r3, r7
 8000552:	3801      	subs	r0, #1
 8000554:	e7a8      	b.n	80004a8 <__udivmoddi4+0x1e8>
 8000556:	4631      	mov	r1, r6
 8000558:	e7ed      	b.n	8000536 <__udivmoddi4+0x276>
 800055a:	4603      	mov	r3, r0
 800055c:	e799      	b.n	8000492 <__udivmoddi4+0x1d2>
 800055e:	4630      	mov	r0, r6
 8000560:	e7d4      	b.n	800050c <__udivmoddi4+0x24c>
 8000562:	46d6      	mov	lr, sl
 8000564:	e77f      	b.n	8000466 <__udivmoddi4+0x1a6>
 8000566:	4463      	add	r3, ip
 8000568:	3802      	subs	r0, #2
 800056a:	e74d      	b.n	8000408 <__udivmoddi4+0x148>
 800056c:	4606      	mov	r6, r0
 800056e:	4623      	mov	r3, r4
 8000570:	4608      	mov	r0, r1
 8000572:	e70f      	b.n	8000394 <__udivmoddi4+0xd4>
 8000574:	3e02      	subs	r6, #2
 8000576:	4463      	add	r3, ip
 8000578:	e730      	b.n	80003dc <__udivmoddi4+0x11c>
 800057a:	bf00      	nop

0800057c <__aeabi_idiv0>:
 800057c:	4770      	bx	lr
 800057e:	bf00      	nop

08000580 <ApplicationInit>:
void LCDTouchScreenInterruptGPIOInit(void);
#endif // TOUCH_INTERRUPT_ENABLED
#endif // COMPILE_TOUCH_FUNCTIONS

void ApplicationInit(void)
{
 8000580:	b580      	push	{r7, lr}
 8000582:	af00      	add	r7, sp, #0
	initialise_monitor_handles(); // Allows printf functionality
 8000584:	f002 fd2a 	bl	8002fdc <initialise_monitor_handles>
    LTCD__Init();
 8000588:	f000 fe1a 	bl	80011c0 <LTCD__Init>
    LTCD_Layer_Init(0);
 800058c:	2000      	movs	r0, #0
 800058e:	f000 fd9b 	bl	80010c8 <LTCD_Layer_Init>
    LCD_Clear(0,LCD_COLOR_WHITE);
 8000592:	f64f 71ff 	movw	r1, #65535	@ 0xffff
 8000596:	2000      	movs	r0, #0
 8000598:	f000 fee2 	bl	8001360 <LCD_Clear>

    #if COMPILE_TOUCH_FUNCTIONS == 1
	InitializeLCDTouch();
 800059c:	f001 f80e 	bl	80015bc <InitializeLCDTouch>

	// This is the orientation for the board to be direclty up where the buttons are vertically above the screen
	// Top left would be low x value, high y value. Bottom right would be low x value, low y value.
	StaticTouchData.orientation = STMPE811_Orientation_Portrait_2;
 80005a0:	4b03      	ldr	r3, [pc, #12]	@ (80005b0 <ApplicationInit+0x30>)
 80005a2:	2201      	movs	r2, #1
 80005a4:	719a      	strb	r2, [r3, #6]

	#if TOUCH_INTERRUPT_ENABLED == 1
	LCDTouchScreenInterruptGPIOInit();
 80005a6:	f000 fb1f 	bl	8000be8 <LCDTouchScreenInterruptGPIOInit>
	#endif // TOUCH_INTERRUPT_ENABLED

	#endif // COMPILE_TOUCH_FUNCTIONS
}
 80005aa:	bf00      	nop
 80005ac:	bd80      	pop	{r7, pc}
 80005ae:	bf00      	nop
 80005b0:	2000012c 	.word	0x2000012c

080005b4 <check_grid_empty>:
		for (uint8_t col = 0; col<4; col++)
			gameGrid[row][col] = 0;
}

bool check_grid_empty()
{
 80005b4:	b480      	push	{r7}
 80005b6:	b083      	sub	sp, #12
 80005b8:	af00      	add	r7, sp, #0
	for (uint8_t row = 0; row < 4; row++)
 80005ba:	2300      	movs	r3, #0
 80005bc:	71fb      	strb	r3, [r7, #7]
 80005be:	e016      	b.n	80005ee <check_grid_empty+0x3a>
		for (uint8_t col = 0; col<3; col++)
 80005c0:	2300      	movs	r3, #0
 80005c2:	71bb      	strb	r3, [r7, #6]
 80005c4:	e00d      	b.n	80005e2 <check_grid_empty+0x2e>
			if (gameGrid[col][row] != 0)
 80005c6:	79ba      	ldrb	r2, [r7, #6]
 80005c8:	79fb      	ldrb	r3, [r7, #7]
 80005ca:	490f      	ldr	r1, [pc, #60]	@ (8000608 <check_grid_empty+0x54>)
 80005cc:	0092      	lsls	r2, r2, #2
 80005ce:	4413      	add	r3, r2
 80005d0:	f831 3013 	ldrh.w	r3, [r1, r3, lsl #1]
 80005d4:	2b00      	cmp	r3, #0
 80005d6:	d001      	beq.n	80005dc <check_grid_empty+0x28>
				return 0;
 80005d8:	2300      	movs	r3, #0
 80005da:	e00f      	b.n	80005fc <check_grid_empty+0x48>
		for (uint8_t col = 0; col<3; col++)
 80005dc:	79bb      	ldrb	r3, [r7, #6]
 80005de:	3301      	adds	r3, #1
 80005e0:	71bb      	strb	r3, [r7, #6]
 80005e2:	79bb      	ldrb	r3, [r7, #6]
 80005e4:	2b02      	cmp	r3, #2
 80005e6:	d9ee      	bls.n	80005c6 <check_grid_empty+0x12>
	for (uint8_t row = 0; row < 4; row++)
 80005e8:	79fb      	ldrb	r3, [r7, #7]
 80005ea:	3301      	adds	r3, #1
 80005ec:	71fb      	strb	r3, [r7, #7]
 80005ee:	79fb      	ldrb	r3, [r7, #7]
 80005f0:	2b03      	cmp	r3, #3
 80005f2:	d9e5      	bls.n	80005c0 <check_grid_empty+0xc>
	touchNum = 0;
 80005f4:	4b05      	ldr	r3, [pc, #20]	@ (800060c <check_grid_empty+0x58>)
 80005f6:	2200      	movs	r2, #0
 80005f8:	801a      	strh	r2, [r3, #0]
	return 1;
 80005fa:	2301      	movs	r3, #1
}
 80005fc:	4618      	mov	r0, r3
 80005fe:	370c      	adds	r7, #12
 8000600:	46bd      	mov	sp, r7
 8000602:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000606:	4770      	bx	lr
 8000608:	200000b0 	.word	0x200000b0
 800060c:	200000ac 	.word	0x200000ac

08000610 <homescreen>:

void homescreen()
{
 8000610:	b580      	push	{r7, lr}
 8000612:	af00      	add	r7, sp, #0
	LCD_Clear(0,LCD_COLOR_WHITE);
 8000614:	f64f 71ff 	movw	r1, #65535	@ 0xffff
 8000618:	2000      	movs	r0, #0
 800061a:	f000 fea1 	bl	8001360 <LCD_Clear>
	LCD_SetTextColor(LCD_COLOR_BLACK);
 800061e:	2000      	movs	r0, #0
 8000620:	f000 fec0 	bl	80013a4 <LCD_SetTextColor>
	LCD_SetFont(&Font16x24);
 8000624:	483f      	ldr	r0, [pc, #252]	@ (8000724 <homescreen+0x114>)
 8000626:	f000 fecd 	bl	80013c4 <LCD_SetFont>

	LCD_DrawMonkey(120, 160);
 800062a:	21a0      	movs	r1, #160	@ 0xa0
 800062c:	2078      	movs	r0, #120	@ 0x78
 800062e:	f000 ff47 	bl	80014c0 <LCD_DrawMonkey>

	LCD_DisplayChar(90, 50, 'C');
 8000632:	2243      	movs	r2, #67	@ 0x43
 8000634:	2132      	movs	r1, #50	@ 0x32
 8000636:	205a      	movs	r0, #90	@ 0x5a
 8000638:	f000 ff98 	bl	800156c <LCD_DisplayChar>
	LCD_DisplayChar(105, 50, 'H');
 800063c:	2248      	movs	r2, #72	@ 0x48
 800063e:	2132      	movs	r1, #50	@ 0x32
 8000640:	2069      	movs	r0, #105	@ 0x69
 8000642:	f000 ff93 	bl	800156c <LCD_DisplayChar>
	LCD_DisplayChar(120, 50, 'I');
 8000646:	2249      	movs	r2, #73	@ 0x49
 8000648:	2132      	movs	r1, #50	@ 0x32
 800064a:	2078      	movs	r0, #120	@ 0x78
 800064c:	f000 ff8e 	bl	800156c <LCD_DisplayChar>
	LCD_DisplayChar(135, 50, 'M');
 8000650:	224d      	movs	r2, #77	@ 0x4d
 8000652:	2132      	movs	r1, #50	@ 0x32
 8000654:	2087      	movs	r0, #135	@ 0x87
 8000656:	f000 ff89 	bl	800156c <LCD_DisplayChar>
	LCD_DisplayChar(150, 50, 'P');
 800065a:	2250      	movs	r2, #80	@ 0x50
 800065c:	2132      	movs	r1, #50	@ 0x32
 800065e:	2096      	movs	r0, #150	@ 0x96
 8000660:	f000 ff84 	bl	800156c <LCD_DisplayChar>

	LCD_DisplayChar(100, 70, 'T');
 8000664:	2254      	movs	r2, #84	@ 0x54
 8000666:	2146      	movs	r1, #70	@ 0x46
 8000668:	2064      	movs	r0, #100	@ 0x64
 800066a:	f000 ff7f 	bl	800156c <LCD_DisplayChar>
	LCD_DisplayChar(115, 70, 'E');
 800066e:	2245      	movs	r2, #69	@ 0x45
 8000670:	2146      	movs	r1, #70	@ 0x46
 8000672:	2073      	movs	r0, #115	@ 0x73
 8000674:	f000 ff7a 	bl	800156c <LCD_DisplayChar>
	LCD_DisplayChar(130, 70, 'S');
 8000678:	2253      	movs	r2, #83	@ 0x53
 800067a:	2146      	movs	r1, #70	@ 0x46
 800067c:	2082      	movs	r0, #130	@ 0x82
 800067e:	f000 ff75 	bl	800156c <LCD_DisplayChar>
	LCD_DisplayChar(145, 70, 'T');
 8000682:	2254      	movs	r2, #84	@ 0x54
 8000684:	2146      	movs	r1, #70	@ 0x46
 8000686:	2091      	movs	r0, #145	@ 0x91
 8000688:	f000 ff70 	bl	800156c <LCD_DisplayChar>

	LCD_DisplayChar(90, 200, 'P');
 800068c:	2250      	movs	r2, #80	@ 0x50
 800068e:	21c8      	movs	r1, #200	@ 0xc8
 8000690:	205a      	movs	r0, #90	@ 0x5a
 8000692:	f000 ff6b 	bl	800156c <LCD_DisplayChar>
	LCD_DisplayChar(105, 200, 'R');
 8000696:	2252      	movs	r2, #82	@ 0x52
 8000698:	21c8      	movs	r1, #200	@ 0xc8
 800069a:	2069      	movs	r0, #105	@ 0x69
 800069c:	f000 ff66 	bl	800156c <LCD_DisplayChar>
	LCD_DisplayChar(120, 200, 'E');
 80006a0:	2245      	movs	r2, #69	@ 0x45
 80006a2:	21c8      	movs	r1, #200	@ 0xc8
 80006a4:	2078      	movs	r0, #120	@ 0x78
 80006a6:	f000 ff61 	bl	800156c <LCD_DisplayChar>
	LCD_DisplayChar(135, 200, 'S');
 80006aa:	2253      	movs	r2, #83	@ 0x53
 80006ac:	21c8      	movs	r1, #200	@ 0xc8
 80006ae:	2087      	movs	r0, #135	@ 0x87
 80006b0:	f000 ff5c 	bl	800156c <LCD_DisplayChar>
	LCD_DisplayChar(150, 200, 'S');
 80006b4:	2253      	movs	r2, #83	@ 0x53
 80006b6:	21c8      	movs	r1, #200	@ 0xc8
 80006b8:	2096      	movs	r0, #150	@ 0x96
 80006ba:	f000 ff57 	bl	800156c <LCD_DisplayChar>

	LCD_DisplayChar(110, 220, 'T');
 80006be:	2254      	movs	r2, #84	@ 0x54
 80006c0:	21dc      	movs	r1, #220	@ 0xdc
 80006c2:	206e      	movs	r0, #110	@ 0x6e
 80006c4:	f000 ff52 	bl	800156c <LCD_DisplayChar>
	LCD_DisplayChar(125, 220, 'O');
 80006c8:	224f      	movs	r2, #79	@ 0x4f
 80006ca:	21dc      	movs	r1, #220	@ 0xdc
 80006cc:	207d      	movs	r0, #125	@ 0x7d
 80006ce:	f000 ff4d 	bl	800156c <LCD_DisplayChar>

	LCD_DisplayChar(90, 240, 'S');
 80006d2:	2253      	movs	r2, #83	@ 0x53
 80006d4:	21f0      	movs	r1, #240	@ 0xf0
 80006d6:	205a      	movs	r0, #90	@ 0x5a
 80006d8:	f000 ff48 	bl	800156c <LCD_DisplayChar>
	LCD_DisplayChar(105, 240, 'T');
 80006dc:	2254      	movs	r2, #84	@ 0x54
 80006de:	21f0      	movs	r1, #240	@ 0xf0
 80006e0:	2069      	movs	r0, #105	@ 0x69
 80006e2:	f000 ff43 	bl	800156c <LCD_DisplayChar>
	LCD_DisplayChar(120, 240, 'A');
 80006e6:	2241      	movs	r2, #65	@ 0x41
 80006e8:	21f0      	movs	r1, #240	@ 0xf0
 80006ea:	2078      	movs	r0, #120	@ 0x78
 80006ec:	f000 ff3e 	bl	800156c <LCD_DisplayChar>
	LCD_DisplayChar(135, 240, 'R');
 80006f0:	2252      	movs	r2, #82	@ 0x52
 80006f2:	21f0      	movs	r1, #240	@ 0xf0
 80006f4:	2087      	movs	r0, #135	@ 0x87
 80006f6:	f000 ff39 	bl	800156c <LCD_DisplayChar>
	LCD_DisplayChar(150, 240, 'T');
 80006fa:	2254      	movs	r2, #84	@ 0x54
 80006fc:	21f0      	movs	r1, #240	@ 0xf0
 80006fe:	2096      	movs	r0, #150	@ 0x96
 8000700:	f000 ff34 	bl	800156c <LCD_DisplayChar>

	while (startGame_flag == 0);
 8000704:	bf00      	nop
 8000706:	4b08      	ldr	r3, [pc, #32]	@ (8000728 <homescreen+0x118>)
 8000708:	781b      	ldrb	r3, [r3, #0]
 800070a:	f083 0301 	eor.w	r3, r3, #1
 800070e:	b2db      	uxtb	r3, r3
 8000710:	2b00      	cmp	r3, #0
 8000712:	d1f8      	bne.n	8000706 <homescreen+0xf6>
	LCD_Clear(0,LCD_COLOR_WHITE);
 8000714:	f64f 71ff 	movw	r1, #65535	@ 0xffff
 8000718:	2000      	movs	r0, #0
 800071a:	f000 fe21 	bl	8001360 <LCD_Clear>
}
 800071e:	bf00      	nop
 8000720:	bd80      	pop	{r7, pc}
 8000722:	bf00      	nop
 8000724:	20000014 	.word	0x20000014
 8000728:	20000128 	.word	0x20000128

0800072c <endscreen>:

void endscreen()
{
 800072c:	b580      	push	{r7, lr}
 800072e:	af00      	add	r7, sp, #0
	LCD_Clear(0,LCD_COLOR_WHITE);
 8000730:	f64f 71ff 	movw	r1, #65535	@ 0xffff
 8000734:	2000      	movs	r0, #0
 8000736:	f000 fe13 	bl	8001360 <LCD_Clear>
	LCD_DrawMonkey(120, 120);
 800073a:	2178      	movs	r1, #120	@ 0x78
 800073c:	2078      	movs	r0, #120	@ 0x78
 800073e:	f000 febf 	bl	80014c0 <LCD_DrawMonkey>

	LCD_DisplayChar(80,50,'U');
 8000742:	2255      	movs	r2, #85	@ 0x55
 8000744:	2132      	movs	r1, #50	@ 0x32
 8000746:	2050      	movs	r0, #80	@ 0x50
 8000748:	f000 ff10 	bl	800156c <LCD_DisplayChar>
	LCD_DisplayChar(95,50,'H');
 800074c:	2248      	movs	r2, #72	@ 0x48
 800074e:	2132      	movs	r1, #50	@ 0x32
 8000750:	205f      	movs	r0, #95	@ 0x5f
 8000752:	f000 ff0b 	bl	800156c <LCD_DisplayChar>

	LCD_DisplayChar(125,50,'O');
 8000756:	224f      	movs	r2, #79	@ 0x4f
 8000758:	2132      	movs	r1, #50	@ 0x32
 800075a:	207d      	movs	r0, #125	@ 0x7d
 800075c:	f000 ff06 	bl	800156c <LCD_DisplayChar>
	LCD_DisplayChar(140,50,'H');
 8000760:	2248      	movs	r2, #72	@ 0x48
 8000762:	2132      	movs	r1, #50	@ 0x32
 8000764:	208c      	movs	r0, #140	@ 0x8c
 8000766:	f000 ff01 	bl	800156c <LCD_DisplayChar>

	LCD_DisplayChar(60,180,'Y');
 800076a:	2259      	movs	r2, #89	@ 0x59
 800076c:	21b4      	movs	r1, #180	@ 0xb4
 800076e:	203c      	movs	r0, #60	@ 0x3c
 8000770:	f000 fefc 	bl	800156c <LCD_DisplayChar>
	LCD_DisplayChar(75,180,'O');
 8000774:	224f      	movs	r2, #79	@ 0x4f
 8000776:	21b4      	movs	r1, #180	@ 0xb4
 8000778:	204b      	movs	r0, #75	@ 0x4b
 800077a:	f000 fef7 	bl	800156c <LCD_DisplayChar>
	LCD_DisplayChar(90,180,'U');
 800077e:	2255      	movs	r2, #85	@ 0x55
 8000780:	21b4      	movs	r1, #180	@ 0xb4
 8000782:	205a      	movs	r0, #90	@ 0x5a
 8000784:	f000 fef2 	bl	800156c <LCD_DisplayChar>

	LCD_DisplayChar(120,180,'L');
 8000788:	224c      	movs	r2, #76	@ 0x4c
 800078a:	21b4      	movs	r1, #180	@ 0xb4
 800078c:	2078      	movs	r0, #120	@ 0x78
 800078e:	f000 feed 	bl	800156c <LCD_DisplayChar>
	LCD_DisplayChar(135,180,'O');
 8000792:	224f      	movs	r2, #79	@ 0x4f
 8000794:	21b4      	movs	r1, #180	@ 0xb4
 8000796:	2087      	movs	r0, #135	@ 0x87
 8000798:	f000 fee8 	bl	800156c <LCD_DisplayChar>
	LCD_DisplayChar(150,180,'S');
 800079c:	2253      	movs	r2, #83	@ 0x53
 800079e:	21b4      	movs	r1, #180	@ 0xb4
 80007a0:	2096      	movs	r0, #150	@ 0x96
 80007a2:	f000 fee3 	bl	800156c <LCD_DisplayChar>
	LCD_DisplayChar(165,180,'T');
 80007a6:	2254      	movs	r2, #84	@ 0x54
 80007a8:	21b4      	movs	r1, #180	@ 0xb4
 80007aa:	20a5      	movs	r0, #165	@ 0xa5
 80007ac:	f000 fede 	bl	800156c <LCD_DisplayChar>

	LCD_DisplayChar(50,210,'L');
 80007b0:	224c      	movs	r2, #76	@ 0x4c
 80007b2:	21d2      	movs	r1, #210	@ 0xd2
 80007b4:	2032      	movs	r0, #50	@ 0x32
 80007b6:	f000 fed9 	bl	800156c <LCD_DisplayChar>
	LCD_DisplayChar(65,210,'E');
 80007ba:	2245      	movs	r2, #69	@ 0x45
 80007bc:	21d2      	movs	r1, #210	@ 0xd2
 80007be:	2041      	movs	r0, #65	@ 0x41
 80007c0:	f000 fed4 	bl	800156c <LCD_DisplayChar>
	LCD_DisplayChar(80,210,'V');
 80007c4:	2256      	movs	r2, #86	@ 0x56
 80007c6:	21d2      	movs	r1, #210	@ 0xd2
 80007c8:	2050      	movs	r0, #80	@ 0x50
 80007ca:	f000 fecf 	bl	800156c <LCD_DisplayChar>
	LCD_DisplayChar(95,210,'E');
 80007ce:	2245      	movs	r2, #69	@ 0x45
 80007d0:	21d2      	movs	r1, #210	@ 0xd2
 80007d2:	205f      	movs	r0, #95	@ 0x5f
 80007d4:	f000 feca 	bl	800156c <LCD_DisplayChar>
	LCD_DisplayChar(110,210,'L');
 80007d8:	224c      	movs	r2, #76	@ 0x4c
 80007da:	21d2      	movs	r1, #210	@ 0xd2
 80007dc:	206e      	movs	r0, #110	@ 0x6e
 80007de:	f000 fec5 	bl	800156c <LCD_DisplayChar>
	LCD_DisplayChar(120,210,':');
 80007e2:	223a      	movs	r2, #58	@ 0x3a
 80007e4:	21d2      	movs	r1, #210	@ 0xd2
 80007e6:	2078      	movs	r0, #120	@ 0x78
 80007e8:	f000 fec0 	bl	800156c <LCD_DisplayChar>
	LCD_DisplayChar(135, 210, blockNums[level_current]);
 80007ec:	4b27      	ldr	r3, [pc, #156]	@ (800088c <endscreen+0x160>)
 80007ee:	881b      	ldrh	r3, [r3, #0]
 80007f0:	461a      	mov	r2, r3
 80007f2:	4b27      	ldr	r3, [pc, #156]	@ (8000890 <endscreen+0x164>)
 80007f4:	5c9b      	ldrb	r3, [r3, r2]
 80007f6:	461a      	mov	r2, r3
 80007f8:	21d2      	movs	r1, #210	@ 0xd2
 80007fa:	2087      	movs	r0, #135	@ 0x87
 80007fc:	f000 feb6 	bl	800156c <LCD_DisplayChar>

	LCD_DisplayChar(20,240,'S');
 8000800:	2253      	movs	r2, #83	@ 0x53
 8000802:	21f0      	movs	r1, #240	@ 0xf0
 8000804:	2014      	movs	r0, #20
 8000806:	f000 feb1 	bl	800156c <LCD_DisplayChar>
	LCD_DisplayChar(35,240,'E');
 800080a:	2245      	movs	r2, #69	@ 0x45
 800080c:	21f0      	movs	r1, #240	@ 0xf0
 800080e:	2023      	movs	r0, #35	@ 0x23
 8000810:	f000 feac 	bl	800156c <LCD_DisplayChar>
	LCD_DisplayChar(50,240,'C');
 8000814:	2243      	movs	r2, #67	@ 0x43
 8000816:	21f0      	movs	r1, #240	@ 0xf0
 8000818:	2032      	movs	r0, #50	@ 0x32
 800081a:	f000 fea7 	bl	800156c <LCD_DisplayChar>
	LCD_DisplayChar(65,240,'O');
 800081e:	224f      	movs	r2, #79	@ 0x4f
 8000820:	21f0      	movs	r1, #240	@ 0xf0
 8000822:	2041      	movs	r0, #65	@ 0x41
 8000824:	f000 fea2 	bl	800156c <LCD_DisplayChar>
	LCD_DisplayChar(80,240,'N');
 8000828:	224e      	movs	r2, #78	@ 0x4e
 800082a:	21f0      	movs	r1, #240	@ 0xf0
 800082c:	2050      	movs	r0, #80	@ 0x50
 800082e:	f000 fe9d 	bl	800156c <LCD_DisplayChar>
	LCD_DisplayChar(95,240,'D');
 8000832:	2244      	movs	r2, #68	@ 0x44
 8000834:	21f0      	movs	r1, #240	@ 0xf0
 8000836:	205f      	movs	r0, #95	@ 0x5f
 8000838:	f000 fe98 	bl	800156c <LCD_DisplayChar>
	LCD_DisplayChar(110,240,'S');
 800083c:	2253      	movs	r2, #83	@ 0x53
 800083e:	21f0      	movs	r1, #240	@ 0xf0
 8000840:	206e      	movs	r0, #110	@ 0x6e
 8000842:	f000 fe93 	bl	800156c <LCD_DisplayChar>

	LCD_DisplayChar(140,240,'P');
 8000846:	2250      	movs	r2, #80	@ 0x50
 8000848:	21f0      	movs	r1, #240	@ 0xf0
 800084a:	208c      	movs	r0, #140	@ 0x8c
 800084c:	f000 fe8e 	bl	800156c <LCD_DisplayChar>
	LCD_DisplayChar(155,240,'L');
 8000850:	224c      	movs	r2, #76	@ 0x4c
 8000852:	21f0      	movs	r1, #240	@ 0xf0
 8000854:	209b      	movs	r0, #155	@ 0x9b
 8000856:	f000 fe89 	bl	800156c <LCD_DisplayChar>
	LCD_DisplayChar(170,240,'A');
 800085a:	2241      	movs	r2, #65	@ 0x41
 800085c:	21f0      	movs	r1, #240	@ 0xf0
 800085e:	20aa      	movs	r0, #170	@ 0xaa
 8000860:	f000 fe84 	bl	800156c <LCD_DisplayChar>
	LCD_DisplayChar(185,240,'Y');
 8000864:	2259      	movs	r2, #89	@ 0x59
 8000866:	21f0      	movs	r1, #240	@ 0xf0
 8000868:	20b9      	movs	r0, #185	@ 0xb9
 800086a:	f000 fe7f 	bl	800156c <LCD_DisplayChar>
	LCD_DisplayChar(200,240,'E');
 800086e:	2245      	movs	r2, #69	@ 0x45
 8000870:	21f0      	movs	r1, #240	@ 0xf0
 8000872:	20c8      	movs	r0, #200	@ 0xc8
 8000874:	f000 fe7a 	bl	800156c <LCD_DisplayChar>
	LCD_DisplayChar(215,240,'D');
 8000878:	2244      	movs	r2, #68	@ 0x44
 800087a:	21f0      	movs	r1, #240	@ 0xf0
 800087c:	20d7      	movs	r0, #215	@ 0xd7
 800087e:	f000 fe75 	bl	800156c <LCD_DisplayChar>
	printTime();
 8000882:	f000 f96f 	bl	8000b64 <printTime>


}
 8000886:	bf00      	nop
 8000888:	bd80      	pop	{r7, pc}
 800088a:	bf00      	nop
 800088c:	2000000a 	.word	0x2000000a
 8000890:	20000000 	.word	0x20000000

08000894 <random_block>:

void random_block(uint16_t num, RNG_HandleTypeDef hrng)
{
 8000894:	b084      	sub	sp, #16
 8000896:	b590      	push	{r4, r7, lr}
 8000898:	b083      	sub	sp, #12
 800089a:	af00      	add	r7, sp, #0
 800089c:	4604      	mov	r4, r0
 800089e:	f107 001c 	add.w	r0, r7, #28
 80008a2:	e880 000e 	stmia.w	r0, {r1, r2, r3}
 80008a6:	4623      	mov	r3, r4
 80008a8:	80fb      	strh	r3, [r7, #6]

	hrng.Instance = RNG;
 80008aa:	4b32      	ldr	r3, [pc, #200]	@ (8000974 <random_block+0xe0>)
 80008ac:	61fb      	str	r3, [r7, #28]
	if (HAL_RNG_Init(&hrng) != HAL_OK)
 80008ae:	f107 031c 	add.w	r3, r7, #28
 80008b2:	4618      	mov	r0, r3
 80008b4:	f005 faf2 	bl	8005e9c <HAL_RNG_Init>
 80008b8:	4603      	mov	r3, r0
 80008ba:	2b00      	cmp	r3, #0
 80008bc:	d001      	beq.n	80008c2 <random_block+0x2e>
	{
		LCD_Error_Handler();
 80008be:	f000 fe77 	bl	80015b0 <LCD_Error_Handler>
	}

	num--;
 80008c2:	88fb      	ldrh	r3, [r7, #6]
 80008c4:	3b01      	subs	r3, #1
 80008c6:	80fb      	strh	r3, [r7, #6]

	do
	{
		randomNumbery[num] = HAL_RNG_GetRandomNumber(&hrng)%4;
 80008c8:	f107 031c 	add.w	r3, r7, #28
 80008cc:	4618      	mov	r0, r3
 80008ce:	f005 fb65 	bl	8005f9c <HAL_RNG_GetRandomNumber>
 80008d2:	4602      	mov	r2, r0
 80008d4:	88fb      	ldrh	r3, [r7, #6]
 80008d6:	f002 0203 	and.w	r2, r2, #3
 80008da:	4927      	ldr	r1, [pc, #156]	@ (8000978 <random_block+0xe4>)
 80008dc:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
		randomNumberx[num] = HAL_RNG_GetRandomNumber(&hrng)%3;
 80008e0:	f107 031c 	add.w	r3, r7, #28
 80008e4:	4618      	mov	r0, r3
 80008e6:	f005 fb59 	bl	8005f9c <HAL_RNG_GetRandomNumber>
 80008ea:	4601      	mov	r1, r0
 80008ec:	88f8      	ldrh	r0, [r7, #6]
 80008ee:	4b23      	ldr	r3, [pc, #140]	@ (800097c <random_block+0xe8>)
 80008f0:	fba3 2301 	umull	r2, r3, r3, r1
 80008f4:	085a      	lsrs	r2, r3, #1
 80008f6:	4613      	mov	r3, r2
 80008f8:	005b      	lsls	r3, r3, #1
 80008fa:	4413      	add	r3, r2
 80008fc:	1aca      	subs	r2, r1, r3
 80008fe:	4b20      	ldr	r3, [pc, #128]	@ (8000980 <random_block+0xec>)
 8000900:	f843 2020 	str.w	r2, [r3, r0, lsl #2]
	} while (gameGrid[randomNumberx[num]][randomNumbery[num]] != 0);
 8000904:	88fb      	ldrh	r3, [r7, #6]
 8000906:	4a1e      	ldr	r2, [pc, #120]	@ (8000980 <random_block+0xec>)
 8000908:	f852 2023 	ldr.w	r2, [r2, r3, lsl #2]
 800090c:	88fb      	ldrh	r3, [r7, #6]
 800090e:	491a      	ldr	r1, [pc, #104]	@ (8000978 <random_block+0xe4>)
 8000910:	f851 3023 	ldr.w	r3, [r1, r3, lsl #2]
 8000914:	491b      	ldr	r1, [pc, #108]	@ (8000984 <random_block+0xf0>)
 8000916:	0092      	lsls	r2, r2, #2
 8000918:	4413      	add	r3, r2
 800091a:	f831 3013 	ldrh.w	r3, [r1, r3, lsl #1]
 800091e:	2b00      	cmp	r3, #0
 8000920:	d1d2      	bne.n	80008c8 <random_block+0x34>

	gameGrid[randomNumberx[num]][randomNumbery[num]] = num + 1;
 8000922:	88fb      	ldrh	r3, [r7, #6]
 8000924:	4a16      	ldr	r2, [pc, #88]	@ (8000980 <random_block+0xec>)
 8000926:	f852 2023 	ldr.w	r2, [r2, r3, lsl #2]
 800092a:	88fb      	ldrh	r3, [r7, #6]
 800092c:	4912      	ldr	r1, [pc, #72]	@ (8000978 <random_block+0xe4>)
 800092e:	f851 3023 	ldr.w	r3, [r1, r3, lsl #2]
 8000932:	88f9      	ldrh	r1, [r7, #6]
 8000934:	3101      	adds	r1, #1
 8000936:	b288      	uxth	r0, r1
 8000938:	4912      	ldr	r1, [pc, #72]	@ (8000984 <random_block+0xf0>)
 800093a:	0092      	lsls	r2, r2, #2
 800093c:	4413      	add	r3, r2
 800093e:	4602      	mov	r2, r0
 8000940:	f821 2013 	strh.w	r2, [r1, r3, lsl #1]

	generate_block(randomNumberx[num], randomNumbery[num], num + 1);
 8000944:	88fb      	ldrh	r3, [r7, #6]
 8000946:	4a0e      	ldr	r2, [pc, #56]	@ (8000980 <random_block+0xec>)
 8000948:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800094c:	b298      	uxth	r0, r3
 800094e:	88fb      	ldrh	r3, [r7, #6]
 8000950:	4a09      	ldr	r2, [pc, #36]	@ (8000978 <random_block+0xe4>)
 8000952:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8000956:	b299      	uxth	r1, r3
 8000958:	88fb      	ldrh	r3, [r7, #6]
 800095a:	3301      	adds	r3, #1
 800095c:	b29b      	uxth	r3, r3
 800095e:	461a      	mov	r2, r3
 8000960:	f000 f84c 	bl	80009fc <generate_block>



}
 8000964:	bf00      	nop
 8000966:	370c      	adds	r7, #12
 8000968:	46bd      	mov	sp, r7
 800096a:	e8bd 4090 	ldmia.w	sp!, {r4, r7, lr}
 800096e:	b004      	add	sp, #16
 8000970:	4770      	bx	lr
 8000972:	bf00      	nop
 8000974:	50060800 	.word	0x50060800
 8000978:	200000f8 	.word	0x200000f8
 800097c:	aaaaaaab 	.word	0xaaaaaaab
 8000980:	200000c8 	.word	0x200000c8
 8000984:	200000b0 	.word	0x200000b0

08000988 <hide_numbers>:

void hide_numbers()
{
 8000988:	b580      	push	{r7, lr}
 800098a:	b082      	sub	sp, #8
 800098c:	af00      	add	r7, sp, #0
	for (uint16_t x = 0; x<3; x++)
 800098e:	2300      	movs	r3, #0
 8000990:	80fb      	strh	r3, [r7, #6]
 8000992:	e028      	b.n	80009e6 <hide_numbers+0x5e>
		for (uint16_t y = 0; y<4; y++)
 8000994:	2300      	movs	r3, #0
 8000996:	80bb      	strh	r3, [r7, #4]
 8000998:	e01f      	b.n	80009da <hide_numbers+0x52>
			if (gameGrid[x][y] != 0)
 800099a:	88fa      	ldrh	r2, [r7, #6]
 800099c:	88bb      	ldrh	r3, [r7, #4]
 800099e:	4916      	ldr	r1, [pc, #88]	@ (80009f8 <hide_numbers+0x70>)
 80009a0:	0092      	lsls	r2, r2, #2
 80009a2:	4413      	add	r3, r2
 80009a4:	f831 3013 	ldrh.w	r3, [r1, r3, lsl #1]
 80009a8:	2b00      	cmp	r3, #0
 80009aa:	d013      	beq.n	80009d4 <hide_numbers+0x4c>
				LCD_Draw_Square_Fill(((x * 80)+ 2), ((y * 80) + 2), 76, LCD_COLOR_BLUE);
 80009ac:	88fb      	ldrh	r3, [r7, #6]
 80009ae:	461a      	mov	r2, r3
 80009b0:	0092      	lsls	r2, r2, #2
 80009b2:	4413      	add	r3, r2
 80009b4:	011b      	lsls	r3, r3, #4
 80009b6:	b29b      	uxth	r3, r3
 80009b8:	3302      	adds	r3, #2
 80009ba:	b298      	uxth	r0, r3
 80009bc:	88bb      	ldrh	r3, [r7, #4]
 80009be:	461a      	mov	r2, r3
 80009c0:	0092      	lsls	r2, r2, #2
 80009c2:	4413      	add	r3, r2
 80009c4:	011b      	lsls	r3, r3, #4
 80009c6:	b29b      	uxth	r3, r3
 80009c8:	3302      	adds	r3, #2
 80009ca:	b299      	uxth	r1, r3
 80009cc:	231f      	movs	r3, #31
 80009ce:	224c      	movs	r2, #76	@ 0x4c
 80009d0:	f000 fbba 	bl	8001148 <LCD_Draw_Square_Fill>
		for (uint16_t y = 0; y<4; y++)
 80009d4:	88bb      	ldrh	r3, [r7, #4]
 80009d6:	3301      	adds	r3, #1
 80009d8:	80bb      	strh	r3, [r7, #4]
 80009da:	88bb      	ldrh	r3, [r7, #4]
 80009dc:	2b03      	cmp	r3, #3
 80009de:	d9dc      	bls.n	800099a <hide_numbers+0x12>
	for (uint16_t x = 0; x<3; x++)
 80009e0:	88fb      	ldrh	r3, [r7, #6]
 80009e2:	3301      	adds	r3, #1
 80009e4:	80fb      	strh	r3, [r7, #6]
 80009e6:	88fb      	ldrh	r3, [r7, #6]
 80009e8:	2b02      	cmp	r3, #2
 80009ea:	d9d3      	bls.n	8000994 <hide_numbers+0xc>
}
 80009ec:	bf00      	nop
 80009ee:	bf00      	nop
 80009f0:	3708      	adds	r7, #8
 80009f2:	46bd      	mov	sp, r7
 80009f4:	bd80      	pop	{r7, pc}
 80009f6:	bf00      	nop
 80009f8:	200000b0 	.word	0x200000b0

080009fc <generate_block>:
void generate_block	(uint16_t x, uint16_t y, uint16_t num)
{
 80009fc:	b590      	push	{r4, r7, lr}
 80009fe:	b083      	sub	sp, #12
 8000a00:	af00      	add	r7, sp, #0
 8000a02:	4603      	mov	r3, r0
 8000a04:	80fb      	strh	r3, [r7, #6]
 8000a06:	460b      	mov	r3, r1
 8000a08:	80bb      	strh	r3, [r7, #4]
 8000a0a:	4613      	mov	r3, r2
 8000a0c:	807b      	strh	r3, [r7, #2]
	LCD_Draw_Square_Fill((x * 80), (y * 80), 80, LCD_COLOR_BLACK);
 8000a0e:	88fb      	ldrh	r3, [r7, #6]
 8000a10:	461a      	mov	r2, r3
 8000a12:	0092      	lsls	r2, r2, #2
 8000a14:	4413      	add	r3, r2
 8000a16:	011b      	lsls	r3, r3, #4
 8000a18:	b298      	uxth	r0, r3
 8000a1a:	88bb      	ldrh	r3, [r7, #4]
 8000a1c:	461a      	mov	r2, r3
 8000a1e:	0092      	lsls	r2, r2, #2
 8000a20:	4413      	add	r3, r2
 8000a22:	011b      	lsls	r3, r3, #4
 8000a24:	b299      	uxth	r1, r3
 8000a26:	2300      	movs	r3, #0
 8000a28:	2250      	movs	r2, #80	@ 0x50
 8000a2a:	f000 fb8d 	bl	8001148 <LCD_Draw_Square_Fill>
	LCD_Draw_Square_Fill(((x * 80)+ 2), ((y * 80) + 2), 76, LCD_COLOR_BLUE);
 8000a2e:	88fb      	ldrh	r3, [r7, #6]
 8000a30:	461a      	mov	r2, r3
 8000a32:	0092      	lsls	r2, r2, #2
 8000a34:	4413      	add	r3, r2
 8000a36:	011b      	lsls	r3, r3, #4
 8000a38:	b29b      	uxth	r3, r3
 8000a3a:	3302      	adds	r3, #2
 8000a3c:	b298      	uxth	r0, r3
 8000a3e:	88bb      	ldrh	r3, [r7, #4]
 8000a40:	461a      	mov	r2, r3
 8000a42:	0092      	lsls	r2, r2, #2
 8000a44:	4413      	add	r3, r2
 8000a46:	011b      	lsls	r3, r3, #4
 8000a48:	b29b      	uxth	r3, r3
 8000a4a:	3302      	adds	r3, #2
 8000a4c:	b299      	uxth	r1, r3
 8000a4e:	231f      	movs	r3, #31
 8000a50:	224c      	movs	r2, #76	@ 0x4c
 8000a52:	f000 fb79 	bl	8001148 <LCD_Draw_Square_Fill>
	LCD_SetTextColor(LCD_COLOR_BLACK);
 8000a56:	2000      	movs	r0, #0
 8000a58:	f000 fca4 	bl	80013a4 <LCD_SetTextColor>
	LCD_SetFont(&Font16x24);
 8000a5c:	482f      	ldr	r0, [pc, #188]	@ (8000b1c <generate_block+0x120>)
 8000a5e:	f000 fcb1 	bl	80013c4 <LCD_SetFont>
	if (num > 9)
 8000a62:	887b      	ldrh	r3, [r7, #2]
 8000a64:	2b09      	cmp	r3, #9
 8000a66:	d93e      	bls.n	8000ae6 <generate_block+0xea>
	{

		LCD_DisplayChar((x * 80) + 25, (y * 80) + 30, blockNums[num / 10] );
 8000a68:	88fb      	ldrh	r3, [r7, #6]
 8000a6a:	461a      	mov	r2, r3
 8000a6c:	0092      	lsls	r2, r2, #2
 8000a6e:	4413      	add	r3, r2
 8000a70:	011b      	lsls	r3, r3, #4
 8000a72:	b29b      	uxth	r3, r3
 8000a74:	3319      	adds	r3, #25
 8000a76:	b298      	uxth	r0, r3
 8000a78:	88bb      	ldrh	r3, [r7, #4]
 8000a7a:	461a      	mov	r2, r3
 8000a7c:	0092      	lsls	r2, r2, #2
 8000a7e:	4413      	add	r3, r2
 8000a80:	011b      	lsls	r3, r3, #4
 8000a82:	b29b      	uxth	r3, r3
 8000a84:	331e      	adds	r3, #30
 8000a86:	b299      	uxth	r1, r3
 8000a88:	887b      	ldrh	r3, [r7, #2]
 8000a8a:	4a25      	ldr	r2, [pc, #148]	@ (8000b20 <generate_block+0x124>)
 8000a8c:	fba2 2303 	umull	r2, r3, r2, r3
 8000a90:	08db      	lsrs	r3, r3, #3
 8000a92:	b29b      	uxth	r3, r3
 8000a94:	461a      	mov	r2, r3
 8000a96:	4b23      	ldr	r3, [pc, #140]	@ (8000b24 <generate_block+0x128>)
 8000a98:	5c9b      	ldrb	r3, [r3, r2]
 8000a9a:	461a      	mov	r2, r3
 8000a9c:	f000 fd66 	bl	800156c <LCD_DisplayChar>
		LCD_DisplayChar((x * 80) + 35, (y * 80) + 30, blockNums[num % 10] );
 8000aa0:	88fb      	ldrh	r3, [r7, #6]
 8000aa2:	461a      	mov	r2, r3
 8000aa4:	0092      	lsls	r2, r2, #2
 8000aa6:	4413      	add	r3, r2
 8000aa8:	011b      	lsls	r3, r3, #4
 8000aaa:	b29b      	uxth	r3, r3
 8000aac:	3323      	adds	r3, #35	@ 0x23
 8000aae:	b298      	uxth	r0, r3
 8000ab0:	88bb      	ldrh	r3, [r7, #4]
 8000ab2:	461a      	mov	r2, r3
 8000ab4:	0092      	lsls	r2, r2, #2
 8000ab6:	4413      	add	r3, r2
 8000ab8:	011b      	lsls	r3, r3, #4
 8000aba:	b29b      	uxth	r3, r3
 8000abc:	331e      	adds	r3, #30
 8000abe:	b29c      	uxth	r4, r3
 8000ac0:	887a      	ldrh	r2, [r7, #2]
 8000ac2:	4b17      	ldr	r3, [pc, #92]	@ (8000b20 <generate_block+0x124>)
 8000ac4:	fba3 1302 	umull	r1, r3, r3, r2
 8000ac8:	08d9      	lsrs	r1, r3, #3
 8000aca:	460b      	mov	r3, r1
 8000acc:	009b      	lsls	r3, r3, #2
 8000ace:	440b      	add	r3, r1
 8000ad0:	005b      	lsls	r3, r3, #1
 8000ad2:	1ad3      	subs	r3, r2, r3
 8000ad4:	b29b      	uxth	r3, r3
 8000ad6:	461a      	mov	r2, r3
 8000ad8:	4b12      	ldr	r3, [pc, #72]	@ (8000b24 <generate_block+0x128>)
 8000ada:	5c9b      	ldrb	r3, [r3, r2]
 8000adc:	461a      	mov	r2, r3
 8000ade:	4621      	mov	r1, r4
 8000ae0:	f000 fd44 	bl	800156c <LCD_DisplayChar>
	}
	else
	{
		LCD_DisplayChar((x * 80) + 30, (y * 80) + 30, blockNums[num] );
	}
}
 8000ae4:	e015      	b.n	8000b12 <generate_block+0x116>
		LCD_DisplayChar((x * 80) + 30, (y * 80) + 30, blockNums[num] );
 8000ae6:	88fb      	ldrh	r3, [r7, #6]
 8000ae8:	461a      	mov	r2, r3
 8000aea:	0092      	lsls	r2, r2, #2
 8000aec:	4413      	add	r3, r2
 8000aee:	011b      	lsls	r3, r3, #4
 8000af0:	b29b      	uxth	r3, r3
 8000af2:	331e      	adds	r3, #30
 8000af4:	b298      	uxth	r0, r3
 8000af6:	88bb      	ldrh	r3, [r7, #4]
 8000af8:	461a      	mov	r2, r3
 8000afa:	0092      	lsls	r2, r2, #2
 8000afc:	4413      	add	r3, r2
 8000afe:	011b      	lsls	r3, r3, #4
 8000b00:	b29b      	uxth	r3, r3
 8000b02:	331e      	adds	r3, #30
 8000b04:	b299      	uxth	r1, r3
 8000b06:	887b      	ldrh	r3, [r7, #2]
 8000b08:	4a06      	ldr	r2, [pc, #24]	@ (8000b24 <generate_block+0x128>)
 8000b0a:	5cd3      	ldrb	r3, [r2, r3]
 8000b0c:	461a      	mov	r2, r3
 8000b0e:	f000 fd2d 	bl	800156c <LCD_DisplayChar>
}
 8000b12:	bf00      	nop
 8000b14:	370c      	adds	r7, #12
 8000b16:	46bd      	mov	sp, r7
 8000b18:	bd90      	pop	{r4, r7, pc}
 8000b1a:	bf00      	nop
 8000b1c:	20000014 	.word	0x20000014
 8000b20:	cccccccd 	.word	0xcccccccd
 8000b24:	20000000 	.word	0x20000000

08000b28 <remove_block>:


void remove_block	(uint16_t x, uint16_t y)
{
 8000b28:	b580      	push	{r7, lr}
 8000b2a:	b082      	sub	sp, #8
 8000b2c:	af00      	add	r7, sp, #0
 8000b2e:	4603      	mov	r3, r0
 8000b30:	460a      	mov	r2, r1
 8000b32:	80fb      	strh	r3, [r7, #6]
 8000b34:	4613      	mov	r3, r2
 8000b36:	80bb      	strh	r3, [r7, #4]
	LCD_Draw_Square_Fill((x * 80), (y * 80), 80, LCD_COLOR_WHITE);
 8000b38:	88fb      	ldrh	r3, [r7, #6]
 8000b3a:	461a      	mov	r2, r3
 8000b3c:	0092      	lsls	r2, r2, #2
 8000b3e:	4413      	add	r3, r2
 8000b40:	011b      	lsls	r3, r3, #4
 8000b42:	b298      	uxth	r0, r3
 8000b44:	88bb      	ldrh	r3, [r7, #4]
 8000b46:	461a      	mov	r2, r3
 8000b48:	0092      	lsls	r2, r2, #2
 8000b4a:	4413      	add	r3, r2
 8000b4c:	011b      	lsls	r3, r3, #4
 8000b4e:	b299      	uxth	r1, r3
 8000b50:	f64f 73ff 	movw	r3, #65535	@ 0xffff
 8000b54:	2250      	movs	r2, #80	@ 0x50
 8000b56:	f000 faf7 	bl	8001148 <LCD_Draw_Square_Fill>
}
 8000b5a:	bf00      	nop
 8000b5c:	3708      	adds	r7, #8
 8000b5e:	46bd      	mov	sp, r7
 8000b60:	bd80      	pop	{r7, pc}
	...

08000b64 <printTime>:
		}
	}
}

void printTime()
{
 8000b64:	b580      	push	{r7, lr}
 8000b66:	b084      	sub	sp, #16
 8000b68:	af00      	add	r7, sp, #0
	uint32_t gameDuration =  timePlayed;
 8000b6a:	4b1c      	ldr	r3, [pc, #112]	@ (8000bdc <printTime+0x78>)
 8000b6c:	681b      	ldr	r3, [r3, #0]
 8000b6e:	60fb      	str	r3, [r7, #12]
	uint32_t printnum = 0;
 8000b70:	2300      	movs	r3, #0
 8000b72:	607b      	str	r3, [r7, #4]
	for (uint8_t i = 0; i < 5; i++)
 8000b74:	2300      	movs	r3, #0
 8000b76:	72fb      	strb	r3, [r7, #11]
 8000b78:	e027      	b.n	8000bca <printTime+0x66>
	{
		printnum = gameDuration % 10;
 8000b7a:	68fa      	ldr	r2, [r7, #12]
 8000b7c:	4b18      	ldr	r3, [pc, #96]	@ (8000be0 <printTime+0x7c>)
 8000b7e:	fba3 1302 	umull	r1, r3, r3, r2
 8000b82:	08d9      	lsrs	r1, r3, #3
 8000b84:	460b      	mov	r3, r1
 8000b86:	009b      	lsls	r3, r3, #2
 8000b88:	440b      	add	r3, r1
 8000b8a:	005b      	lsls	r3, r3, #1
 8000b8c:	1ad3      	subs	r3, r2, r3
 8000b8e:	607b      	str	r3, [r7, #4]
		LCD_DisplayChar(150 - (20 * i), 280, blockNums[printnum] );
 8000b90:	7afb      	ldrb	r3, [r7, #11]
 8000b92:	b29b      	uxth	r3, r3
 8000b94:	461a      	mov	r2, r3
 8000b96:	0312      	lsls	r2, r2, #12
 8000b98:	1ad2      	subs	r2, r2, r3
 8000b9a:	0092      	lsls	r2, r2, #2
 8000b9c:	1ad3      	subs	r3, r2, r3
 8000b9e:	009b      	lsls	r3, r3, #2
 8000ba0:	b29b      	uxth	r3, r3
 8000ba2:	3396      	adds	r3, #150	@ 0x96
 8000ba4:	b298      	uxth	r0, r3
 8000ba6:	4a0f      	ldr	r2, [pc, #60]	@ (8000be4 <printTime+0x80>)
 8000ba8:	687b      	ldr	r3, [r7, #4]
 8000baa:	4413      	add	r3, r2
 8000bac:	781b      	ldrb	r3, [r3, #0]
 8000bae:	461a      	mov	r2, r3
 8000bb0:	f44f 718c 	mov.w	r1, #280	@ 0x118
 8000bb4:	f000 fcda 	bl	800156c <LCD_DisplayChar>
		gameDuration = gameDuration / 10;
 8000bb8:	68fb      	ldr	r3, [r7, #12]
 8000bba:	4a09      	ldr	r2, [pc, #36]	@ (8000be0 <printTime+0x7c>)
 8000bbc:	fba2 2303 	umull	r2, r3, r2, r3
 8000bc0:	08db      	lsrs	r3, r3, #3
 8000bc2:	60fb      	str	r3, [r7, #12]
	for (uint8_t i = 0; i < 5; i++)
 8000bc4:	7afb      	ldrb	r3, [r7, #11]
 8000bc6:	3301      	adds	r3, #1
 8000bc8:	72fb      	strb	r3, [r7, #11]
 8000bca:	7afb      	ldrb	r3, [r7, #11]
 8000bcc:	2b04      	cmp	r3, #4
 8000bce:	d9d4      	bls.n	8000b7a <printTime+0x16>
	}
}
 8000bd0:	bf00      	nop
 8000bd2:	bf00      	nop
 8000bd4:	3710      	adds	r7, #16
 8000bd6:	46bd      	mov	sp, r7
 8000bd8:	bd80      	pop	{r7, pc}
 8000bda:	bf00      	nop
 8000bdc:	2000000c 	.word	0x2000000c
 8000be0:	cccccccd 	.word	0xcccccccd
 8000be4:	20000000 	.word	0x20000000

08000be8 <LCDTouchScreenInterruptGPIOInit>:

// TouchScreen Interrupt
#if TOUCH_INTERRUPT_ENABLED == 1

void LCDTouchScreenInterruptGPIOInit(void)
{
 8000be8:	b580      	push	{r7, lr}
 8000bea:	b086      	sub	sp, #24
 8000bec:	af00      	add	r7, sp, #0
	GPIO_InitTypeDef LCDConfig = {0};
 8000bee:	1d3b      	adds	r3, r7, #4
 8000bf0:	2200      	movs	r2, #0
 8000bf2:	601a      	str	r2, [r3, #0]
 8000bf4:	605a      	str	r2, [r3, #4]
 8000bf6:	609a      	str	r2, [r3, #8]
 8000bf8:	60da      	str	r2, [r3, #12]
 8000bfa:	611a      	str	r2, [r3, #16]
    LCDConfig.Pin = GPIO_PIN_15;
 8000bfc:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 8000c00:	607b      	str	r3, [r7, #4]
    LCDConfig.Mode = GPIO_MODE_IT_RISING_FALLING;
 8000c02:	f44f 1344 	mov.w	r3, #3211264	@ 0x310000
 8000c06:	60bb      	str	r3, [r7, #8]
    LCDConfig.Pull = GPIO_NOPULL;
 8000c08:	2300      	movs	r3, #0
 8000c0a:	60fb      	str	r3, [r7, #12]
    LCDConfig.Speed = GPIO_SPEED_FREQ_HIGH;
 8000c0c:	2302      	movs	r3, #2
 8000c0e:	613b      	str	r3, [r7, #16]
    
    // Clock enable
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000c10:	2300      	movs	r3, #0
 8000c12:	603b      	str	r3, [r7, #0]
 8000c14:	4b0d      	ldr	r3, [pc, #52]	@ (8000c4c <LCDTouchScreenInterruptGPIOInit+0x64>)
 8000c16:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000c18:	4a0c      	ldr	r2, [pc, #48]	@ (8000c4c <LCDTouchScreenInterruptGPIOInit+0x64>)
 8000c1a:	f043 0301 	orr.w	r3, r3, #1
 8000c1e:	6313      	str	r3, [r2, #48]	@ 0x30
 8000c20:	4b0a      	ldr	r3, [pc, #40]	@ (8000c4c <LCDTouchScreenInterruptGPIOInit+0x64>)
 8000c22:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000c24:	f003 0301 	and.w	r3, r3, #1
 8000c28:	603b      	str	r3, [r7, #0]
 8000c2a:	683b      	ldr	r3, [r7, #0]

    // GPIO Init      
    HAL_GPIO_Init(GPIOA, &LCDConfig);
 8000c2c:	1d3b      	adds	r3, r7, #4
 8000c2e:	4619      	mov	r1, r3
 8000c30:	4807      	ldr	r0, [pc, #28]	@ (8000c50 <LCDTouchScreenInterruptGPIOInit+0x68>)
 8000c32:	f002 fcd7 	bl	80035e4 <HAL_GPIO_Init>

    // Interrupt Configuration
    HAL_NVIC_EnableIRQ(EXTI15_10_IRQn);
 8000c36:	2028      	movs	r0, #40	@ 0x28
 8000c38:	f002 fc85 	bl	8003546 <HAL_NVIC_EnableIRQ>

	LCDTouchIRQ.Line = EXTI_LINE_15;
 8000c3c:	4b05      	ldr	r3, [pc, #20]	@ (8000c54 <LCDTouchScreenInterruptGPIOInit+0x6c>)
 8000c3e:	4a06      	ldr	r2, [pc, #24]	@ (8000c58 <LCDTouchScreenInterruptGPIOInit+0x70>)
 8000c40:	601a      	str	r2, [r3, #0]

}
 8000c42:	bf00      	nop
 8000c44:	3718      	adds	r7, #24
 8000c46:	46bd      	mov	sp, r7
 8000c48:	bd80      	pop	{r7, pc}
 8000c4a:	bf00      	nop
 8000c4c:	40023800 	.word	0x40023800
 8000c50:	40020000 	.word	0x40020000
 8000c54:	20000134 	.word	0x20000134
 8000c58:	0600000f 	.word	0x0600000f

08000c5c <makeLevel>:

void makeLevel(uint16_t current, RNG_HandleTypeDef hrng)
{
 8000c5c:	b084      	sub	sp, #16
 8000c5e:	b590      	push	{r4, r7, lr}
 8000c60:	b087      	sub	sp, #28
 8000c62:	af02      	add	r7, sp, #8
 8000c64:	4604      	mov	r4, r0
 8000c66:	f107 0024 	add.w	r0, r7, #36	@ 0x24
 8000c6a:	e880 000e 	stmia.w	r0, {r1, r2, r3}
 8000c6e:	4623      	mov	r3, r4
 8000c70:	80fb      	strh	r3, [r7, #6]
	//gameGrid_reset();


	for (uint8_t i = current; i>0; i--)
 8000c72:	88fb      	ldrh	r3, [r7, #6]
 8000c74:	73fb      	strb	r3, [r7, #15]
 8000c76:	e00b      	b.n	8000c90 <makeLevel+0x34>
		random_block((i), hrng);
 8000c78:	7bfb      	ldrb	r3, [r7, #15]
 8000c7a:	b298      	uxth	r0, r3
 8000c7c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8000c7e:	9300      	str	r3, [sp, #0]
 8000c80:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8000c84:	cb0e      	ldmia	r3, {r1, r2, r3}
 8000c86:	f7ff fe05 	bl	8000894 <random_block>
	for (uint8_t i = current; i>0; i--)
 8000c8a:	7bfb      	ldrb	r3, [r7, #15]
 8000c8c:	3b01      	subs	r3, #1
 8000c8e:	73fb      	strb	r3, [r7, #15]
 8000c90:	7bfb      	ldrb	r3, [r7, #15]
 8000c92:	2b00      	cmp	r3, #0
 8000c94:	d1f0      	bne.n	8000c78 <makeLevel+0x1c>

	HAL_Delay(1000);
 8000c96:	f44f 707a 	mov.w	r0, #1000	@ 0x3e8
 8000c9a:	f002 faf7 	bl	800328c <HAL_Delay>
	hide_numbers();
 8000c9e:	f7ff fe73 	bl	8000988 <hide_numbers>

	numbersCovered_flag = 1;
 8000ca2:	4b10      	ldr	r3, [pc, #64]	@ (8000ce4 <makeLevel+0x88>)
 8000ca4:	2201      	movs	r2, #1
 8000ca6:	701a      	strb	r2, [r3, #0]
	while(check_grid_empty() == 0);
 8000ca8:	bf00      	nop
 8000caa:	f7ff fc83 	bl	80005b4 <check_grid_empty>
 8000cae:	4603      	mov	r3, r0
 8000cb0:	f083 0301 	eor.w	r3, r3, #1
 8000cb4:	b2db      	uxtb	r3, r3
 8000cb6:	2b00      	cmp	r3, #0
 8000cb8:	d1f7      	bne.n	8000caa <makeLevel+0x4e>
	numbersCovered_flag = 0;
 8000cba:	4b0a      	ldr	r3, [pc, #40]	@ (8000ce4 <makeLevel+0x88>)
 8000cbc:	2200      	movs	r2, #0
 8000cbe:	701a      	strb	r2, [r3, #0]
	level_current = level_current + 1;
 8000cc0:	4b09      	ldr	r3, [pc, #36]	@ (8000ce8 <makeLevel+0x8c>)
 8000cc2:	881b      	ldrh	r3, [r3, #0]
 8000cc4:	3301      	adds	r3, #1
 8000cc6:	b29a      	uxth	r2, r3
 8000cc8:	4b07      	ldr	r3, [pc, #28]	@ (8000ce8 <makeLevel+0x8c>)
 8000cca:	801a      	strh	r2, [r3, #0]
	HAL_Delay(1000);
 8000ccc:	f44f 707a 	mov.w	r0, #1000	@ 0x3e8
 8000cd0:	f002 fadc 	bl	800328c <HAL_Delay>
}
 8000cd4:	bf00      	nop
 8000cd6:	3714      	adds	r7, #20
 8000cd8:	46bd      	mov	sp, r7
 8000cda:	e8bd 4090 	ldmia.w	sp!, {r4, r7, lr}
 8000cde:	b004      	add	sp, #16
 8000ce0:	4770      	bx	lr
 8000ce2:	bf00      	nop
 8000ce4:	20000129 	.word	0x20000129
 8000ce8:	2000000a 	.word	0x2000000a

08000cec <EXTI15_10_IRQHandler>:
#define TOUCH_DETECTED_IRQ_STATUS_BIT   (1 << 0)  // Touchscreen detected bitmask

static uint8_t statusFlag;

void EXTI15_10_IRQHandler()
{
 8000cec:	b580      	push	{r7, lr}
 8000cee:	b082      	sub	sp, #8
 8000cf0:	af00      	add	r7, sp, #0
	HAL_NVIC_DisableIRQ(EXTI15_10_IRQn); // May consider making this a universial interrupt guard
 8000cf2:	2028      	movs	r0, #40	@ 0x28
 8000cf4:	f002 fc35 	bl	8003562 <HAL_NVIC_DisableIRQ>
	bool isTouchDetected = false;
 8000cf8:	2300      	movs	r3, #0
 8000cfa:	71fb      	strb	r3, [r7, #7]

	static uint32_t count;
	count = 0;
 8000cfc:	4b76      	ldr	r3, [pc, #472]	@ (8000ed8 <EXTI15_10_IRQHandler+0x1ec>)
 8000cfe:	2200      	movs	r2, #0
 8000d00:	601a      	str	r2, [r3, #0]
	while(count == 0){
 8000d02:	e006      	b.n	8000d12 <EXTI15_10_IRQHandler+0x26>
		count = STMPE811_Read(STMPE811_FIFO_SIZE);
 8000d04:	204c      	movs	r0, #76	@ 0x4c
 8000d06:	f001 fed8 	bl	8002aba <STMPE811_Read>
 8000d0a:	4603      	mov	r3, r0
 8000d0c:	461a      	mov	r2, r3
 8000d0e:	4b72      	ldr	r3, [pc, #456]	@ (8000ed8 <EXTI15_10_IRQHandler+0x1ec>)
 8000d10:	601a      	str	r2, [r3, #0]
	while(count == 0){
 8000d12:	4b71      	ldr	r3, [pc, #452]	@ (8000ed8 <EXTI15_10_IRQHandler+0x1ec>)
 8000d14:	681b      	ldr	r3, [r3, #0]
 8000d16:	2b00      	cmp	r3, #0
 8000d18:	d0f4      	beq.n	8000d04 <EXTI15_10_IRQHandler+0x18>
	}

	// Disable touch interrupt bit on the STMPE811
	uint8_t currentIRQEnables = ReadRegisterFromTouchModule(STMPE811_INT_EN);
 8000d1a:	200a      	movs	r0, #10
 8000d1c:	f000 fc64 	bl	80015e8 <ReadRegisterFromTouchModule>
 8000d20:	4603      	mov	r3, r0
 8000d22:	71bb      	strb	r3, [r7, #6]
	WriteDataToTouchModule(STMPE811_INT_EN, 0x00);
 8000d24:	2100      	movs	r1, #0
 8000d26:	200a      	movs	r0, #10
 8000d28:	f000 fc6c 	bl	8001604 <WriteDataToTouchModule>

	// Clear the interrupt bit in the STMPE811
	statusFlag = ReadRegisterFromTouchModule(STMPE811_INT_STA);
 8000d2c:	200b      	movs	r0, #11
 8000d2e:	f000 fc5b 	bl	80015e8 <ReadRegisterFromTouchModule>
 8000d32:	4603      	mov	r3, r0
 8000d34:	461a      	mov	r2, r3
 8000d36:	4b69      	ldr	r3, [pc, #420]	@ (8000edc <EXTI15_10_IRQHandler+0x1f0>)
 8000d38:	701a      	strb	r2, [r3, #0]
	uint8_t clearIRQData = (statusFlag | TOUCH_DETECTED_IRQ_STATUS_BIT); // Write one to clear bit
 8000d3a:	4b68      	ldr	r3, [pc, #416]	@ (8000edc <EXTI15_10_IRQHandler+0x1f0>)
 8000d3c:	781b      	ldrb	r3, [r3, #0]
 8000d3e:	f043 0301 	orr.w	r3, r3, #1
 8000d42:	717b      	strb	r3, [r7, #5]
	WriteDataToTouchModule(STMPE811_INT_STA, clearIRQData);
 8000d44:	797b      	ldrb	r3, [r7, #5]
 8000d46:	4619      	mov	r1, r3
 8000d48:	200b      	movs	r0, #11
 8000d4a:	f000 fc5b 	bl	8001604 <WriteDataToTouchModule>
	
	uint8_t ctrlReg = ReadRegisterFromTouchModule(STMPE811_TSC_CTRL);
 8000d4e:	2040      	movs	r0, #64	@ 0x40
 8000d50:	f000 fc4a 	bl	80015e8 <ReadRegisterFromTouchModule>
 8000d54:	4603      	mov	r3, r0
 8000d56:	713b      	strb	r3, [r7, #4]
	if (ctrlReg & 0x80)
 8000d58:	f997 3004 	ldrsb.w	r3, [r7, #4]
 8000d5c:	2b00      	cmp	r3, #0
 8000d5e:	da01      	bge.n	8000d64 <EXTI15_10_IRQHandler+0x78>
	{
		isTouchDetected = true;
 8000d60:	2301      	movs	r3, #1
 8000d62:	71fb      	strb	r3, [r7, #7]
	}

	// Determine if it is pressed or unpressed
	if(isTouchDetected) // Touch has been detected
 8000d64:	79fb      	ldrb	r3, [r7, #7]
 8000d66:	2b00      	cmp	r3, #0
 8000d68:	d00f      	beq.n	8000d8a <EXTI15_10_IRQHandler+0x9e>
	{
		printf("\nPressed");
 8000d6a:	485d      	ldr	r0, [pc, #372]	@ (8000ee0 <EXTI15_10_IRQHandler+0x1f4>)
 8000d6c:	f005 feac 	bl	8006ac8 <iprintf>
		// May need to do numerous retries? 
		DetermineTouchPosition(&StaticTouchData);
 8000d70:	485c      	ldr	r0, [pc, #368]	@ (8000ee4 <EXTI15_10_IRQHandler+0x1f8>)
 8000d72:	f000 fc2e 	bl	80015d2 <DetermineTouchPosition>
		/* Touch valid */
		printf("\nX: %03d\nY: %03d \n", StaticTouchData.x, StaticTouchData.y);
 8000d76:	4b5b      	ldr	r3, [pc, #364]	@ (8000ee4 <EXTI15_10_IRQHandler+0x1f8>)
 8000d78:	881b      	ldrh	r3, [r3, #0]
 8000d7a:	4619      	mov	r1, r3
 8000d7c:	4b59      	ldr	r3, [pc, #356]	@ (8000ee4 <EXTI15_10_IRQHandler+0x1f8>)
 8000d7e:	885b      	ldrh	r3, [r3, #2]
 8000d80:	461a      	mov	r2, r3
 8000d82:	4859      	ldr	r0, [pc, #356]	@ (8000ee8 <EXTI15_10_IRQHandler+0x1fc>)
 8000d84:	f005 fea0 	bl	8006ac8 <iprintf>
 8000d88:	e085      	b.n	8000e96 <EXTI15_10_IRQHandler+0x1aa>
		//LCD_Clear(0, LCD_COLOR_RED);

	}else{


		if (startGame_flag)
 8000d8a:	4b58      	ldr	r3, [pc, #352]	@ (8000eec <EXTI15_10_IRQHandler+0x200>)
 8000d8c:	781b      	ldrb	r3, [r3, #0]
 8000d8e:	2b00      	cmp	r3, #0
 8000d90:	d07e      	beq.n	8000e90 <EXTI15_10_IRQHandler+0x1a4>
		{
			//case: numbers are still showing
			if (numbersCovered_flag == 0)
 8000d92:	4b57      	ldr	r3, [pc, #348]	@ (8000ef0 <EXTI15_10_IRQHandler+0x204>)
 8000d94:	781b      	ldrb	r3, [r3, #0]
 8000d96:	f083 0301 	eor.w	r3, r3, #1
 8000d9a:	b2db      	uxtb	r3, r3
 8000d9c:	2b00      	cmp	r3, #0
 8000d9e:	d17a      	bne.n	8000e96 <EXTI15_10_IRQHandler+0x1aa>
			{

			}
			else{
				correctCenterx = randomNumberx[touchNum] * 80 + 40;
 8000da0:	4b54      	ldr	r3, [pc, #336]	@ (8000ef4 <EXTI15_10_IRQHandler+0x208>)
 8000da2:	881b      	ldrh	r3, [r3, #0]
 8000da4:	461a      	mov	r2, r3
 8000da6:	4b54      	ldr	r3, [pc, #336]	@ (8000ef8 <EXTI15_10_IRQHandler+0x20c>)
 8000da8:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8000dac:	b29b      	uxth	r3, r3
 8000dae:	461a      	mov	r2, r3
 8000db0:	0092      	lsls	r2, r2, #2
 8000db2:	4413      	add	r3, r2
 8000db4:	011b      	lsls	r3, r3, #4
 8000db6:	b29b      	uxth	r3, r3
 8000db8:	3328      	adds	r3, #40	@ 0x28
 8000dba:	b29a      	uxth	r2, r3
 8000dbc:	4b4f      	ldr	r3, [pc, #316]	@ (8000efc <EXTI15_10_IRQHandler+0x210>)
 8000dbe:	801a      	strh	r2, [r3, #0]
				correctCentery = randomNumbery[touchNum] * 80 + 40;
 8000dc0:	4b4c      	ldr	r3, [pc, #304]	@ (8000ef4 <EXTI15_10_IRQHandler+0x208>)
 8000dc2:	881b      	ldrh	r3, [r3, #0]
 8000dc4:	461a      	mov	r2, r3
 8000dc6:	4b4e      	ldr	r3, [pc, #312]	@ (8000f00 <EXTI15_10_IRQHandler+0x214>)
 8000dc8:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8000dcc:	b29b      	uxth	r3, r3
 8000dce:	461a      	mov	r2, r3
 8000dd0:	0092      	lsls	r2, r2, #2
 8000dd2:	4413      	add	r3, r2
 8000dd4:	011b      	lsls	r3, r3, #4
 8000dd6:	b29b      	uxth	r3, r3
 8000dd8:	3328      	adds	r3, #40	@ 0x28
 8000dda:	b29a      	uxth	r2, r3
 8000ddc:	4b49      	ldr	r3, [pc, #292]	@ (8000f04 <EXTI15_10_IRQHandler+0x218>)
 8000dde:	801a      	strh	r2, [r3, #0]
				DetermineTouchPosition(&StaticTouchData);
 8000de0:	4840      	ldr	r0, [pc, #256]	@ (8000ee4 <EXTI15_10_IRQHandler+0x1f8>)
 8000de2:	f000 fbf6 	bl	80015d2 <DetermineTouchPosition>
				if (((StaticTouchData.x - correctCenterx) > -50) && ((StaticTouchData.x - correctCenterx) < 50) && (((320 - StaticTouchData.y) - correctCentery) > -50) && (((320 - StaticTouchData.y) - correctCentery) < 50))
 8000de6:	4b3f      	ldr	r3, [pc, #252]	@ (8000ee4 <EXTI15_10_IRQHandler+0x1f8>)
 8000de8:	881b      	ldrh	r3, [r3, #0]
 8000dea:	461a      	mov	r2, r3
 8000dec:	4b43      	ldr	r3, [pc, #268]	@ (8000efc <EXTI15_10_IRQHandler+0x210>)
 8000dee:	881b      	ldrh	r3, [r3, #0]
 8000df0:	1ad3      	subs	r3, r2, r3
 8000df2:	f113 0f31 	cmn.w	r3, #49	@ 0x31
 8000df6:	db45      	blt.n	8000e84 <EXTI15_10_IRQHandler+0x198>
 8000df8:	4b3a      	ldr	r3, [pc, #232]	@ (8000ee4 <EXTI15_10_IRQHandler+0x1f8>)
 8000dfa:	881b      	ldrh	r3, [r3, #0]
 8000dfc:	461a      	mov	r2, r3
 8000dfe:	4b3f      	ldr	r3, [pc, #252]	@ (8000efc <EXTI15_10_IRQHandler+0x210>)
 8000e00:	881b      	ldrh	r3, [r3, #0]
 8000e02:	1ad3      	subs	r3, r2, r3
 8000e04:	2b31      	cmp	r3, #49	@ 0x31
 8000e06:	dc3d      	bgt.n	8000e84 <EXTI15_10_IRQHandler+0x198>
 8000e08:	4b36      	ldr	r3, [pc, #216]	@ (8000ee4 <EXTI15_10_IRQHandler+0x1f8>)
 8000e0a:	885b      	ldrh	r3, [r3, #2]
 8000e0c:	f5c3 73a0 	rsb	r3, r3, #320	@ 0x140
 8000e10:	4a3c      	ldr	r2, [pc, #240]	@ (8000f04 <EXTI15_10_IRQHandler+0x218>)
 8000e12:	8812      	ldrh	r2, [r2, #0]
 8000e14:	1a9b      	subs	r3, r3, r2
 8000e16:	f113 0f31 	cmn.w	r3, #49	@ 0x31
 8000e1a:	db33      	blt.n	8000e84 <EXTI15_10_IRQHandler+0x198>
 8000e1c:	4b31      	ldr	r3, [pc, #196]	@ (8000ee4 <EXTI15_10_IRQHandler+0x1f8>)
 8000e1e:	885b      	ldrh	r3, [r3, #2]
 8000e20:	f5c3 73a0 	rsb	r3, r3, #320	@ 0x140
 8000e24:	4a37      	ldr	r2, [pc, #220]	@ (8000f04 <EXTI15_10_IRQHandler+0x218>)
 8000e26:	8812      	ldrh	r2, [r2, #0]
 8000e28:	1a9b      	subs	r3, r3, r2
 8000e2a:	2b31      	cmp	r3, #49	@ 0x31
 8000e2c:	dc2a      	bgt.n	8000e84 <EXTI15_10_IRQHandler+0x198>
				{
					remove_block(randomNumberx[touchNum], randomNumbery[touchNum]);
 8000e2e:	4b31      	ldr	r3, [pc, #196]	@ (8000ef4 <EXTI15_10_IRQHandler+0x208>)
 8000e30:	881b      	ldrh	r3, [r3, #0]
 8000e32:	461a      	mov	r2, r3
 8000e34:	4b30      	ldr	r3, [pc, #192]	@ (8000ef8 <EXTI15_10_IRQHandler+0x20c>)
 8000e36:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8000e3a:	b29b      	uxth	r3, r3
 8000e3c:	4a2d      	ldr	r2, [pc, #180]	@ (8000ef4 <EXTI15_10_IRQHandler+0x208>)
 8000e3e:	8812      	ldrh	r2, [r2, #0]
 8000e40:	4611      	mov	r1, r2
 8000e42:	4a2f      	ldr	r2, [pc, #188]	@ (8000f00 <EXTI15_10_IRQHandler+0x214>)
 8000e44:	f852 2021 	ldr.w	r2, [r2, r1, lsl #2]
 8000e48:	b292      	uxth	r2, r2
 8000e4a:	4611      	mov	r1, r2
 8000e4c:	4618      	mov	r0, r3
 8000e4e:	f7ff fe6b 	bl	8000b28 <remove_block>
					gameGrid[randomNumberx[touchNum]][randomNumbery[touchNum]] = 0;
 8000e52:	4b28      	ldr	r3, [pc, #160]	@ (8000ef4 <EXTI15_10_IRQHandler+0x208>)
 8000e54:	881b      	ldrh	r3, [r3, #0]
 8000e56:	461a      	mov	r2, r3
 8000e58:	4b27      	ldr	r3, [pc, #156]	@ (8000ef8 <EXTI15_10_IRQHandler+0x20c>)
 8000e5a:	f853 2022 	ldr.w	r2, [r3, r2, lsl #2]
 8000e5e:	4b25      	ldr	r3, [pc, #148]	@ (8000ef4 <EXTI15_10_IRQHandler+0x208>)
 8000e60:	881b      	ldrh	r3, [r3, #0]
 8000e62:	4619      	mov	r1, r3
 8000e64:	4b26      	ldr	r3, [pc, #152]	@ (8000f00 <EXTI15_10_IRQHandler+0x214>)
 8000e66:	f853 3021 	ldr.w	r3, [r3, r1, lsl #2]
 8000e6a:	4927      	ldr	r1, [pc, #156]	@ (8000f08 <EXTI15_10_IRQHandler+0x21c>)
 8000e6c:	0092      	lsls	r2, r2, #2
 8000e6e:	4413      	add	r3, r2
 8000e70:	2200      	movs	r2, #0
 8000e72:	f821 2013 	strh.w	r2, [r1, r3, lsl #1]
					touchNum++;
 8000e76:	4b1f      	ldr	r3, [pc, #124]	@ (8000ef4 <EXTI15_10_IRQHandler+0x208>)
 8000e78:	881b      	ldrh	r3, [r3, #0]
 8000e7a:	3301      	adds	r3, #1
 8000e7c:	b29a      	uxth	r2, r3
 8000e7e:	4b1d      	ldr	r3, [pc, #116]	@ (8000ef4 <EXTI15_10_IRQHandler+0x208>)
 8000e80:	801a      	strh	r2, [r3, #0]
 8000e82:	e008      	b.n	8000e96 <EXTI15_10_IRQHandler+0x1aa>
				{

					//alive_flag = 0;
					HAL_StatusTypeDef HAL_TIM_Base_Stop(TIM_HandleTypeDef *htim7);

					endscreen();
 8000e84:	f7ff fc52 	bl	800072c <endscreen>
					startGame_flag = 0;
 8000e88:	4b18      	ldr	r3, [pc, #96]	@ (8000eec <EXTI15_10_IRQHandler+0x200>)
 8000e8a:	2200      	movs	r2, #0
 8000e8c:	701a      	strb	r2, [r3, #0]
 8000e8e:	e002      	b.n	8000e96 <EXTI15_10_IRQHandler+0x1aa>
				}
			}

		}else
		{
			startGame_flag = 1;
 8000e90:	4b16      	ldr	r3, [pc, #88]	@ (8000eec <EXTI15_10_IRQHandler+0x200>)
 8000e92:	2201      	movs	r2, #1
 8000e94:	701a      	strb	r2, [r3, #0]
			//remove_block(1, 1);
		//LCD_Clear(0, LCD_COLOR_GREEN);
	}


	STMPE811_Write(STMPE811_FIFO_STA, 0x01);
 8000e96:	2101      	movs	r1, #1
 8000e98:	204b      	movs	r0, #75	@ 0x4b
 8000e9a:	f001 fe1f 	bl	8002adc <STMPE811_Write>
	STMPE811_Write(STMPE811_FIFO_STA, 0x00);
 8000e9e:	2100      	movs	r1, #0
 8000ea0:	204b      	movs	r0, #75	@ 0x4b
 8000ea2:	f001 fe1b 	bl	8002adc <STMPE811_Write>

	// Re-enable IRQs
    WriteDataToTouchModule(STMPE811_INT_EN, currentIRQEnables);
 8000ea6:	79bb      	ldrb	r3, [r7, #6]
 8000ea8:	4619      	mov	r1, r3
 8000eaa:	200a      	movs	r0, #10
 8000eac:	f000 fbaa 	bl	8001604 <WriteDataToTouchModule>
	HAL_EXTI_ClearPending(&LCDTouchIRQ, EXTI_TRIGGER_RISING_FALLING);
 8000eb0:	2103      	movs	r1, #3
 8000eb2:	4816      	ldr	r0, [pc, #88]	@ (8000f0c <EXTI15_10_IRQHandler+0x220>)
 8000eb4:	f002 fb7e 	bl	80035b4 <HAL_EXTI_ClearPending>

	HAL_NVIC_ClearPendingIRQ(EXTI15_10_IRQn);
 8000eb8:	2028      	movs	r0, #40	@ 0x28
 8000eba:	f002 fb6c 	bl	8003596 <HAL_NVIC_ClearPendingIRQ>
	HAL_NVIC_EnableIRQ(EXTI15_10_IRQn);
 8000ebe:	2028      	movs	r0, #40	@ 0x28
 8000ec0:	f002 fb41 	bl	8003546 <HAL_NVIC_EnableIRQ>

	//Potential ERRATA? Clearing IRQ bit again due to an IRQ being triggered DURING the handling of this IRQ..
	WriteDataToTouchModule(STMPE811_INT_STA, clearIRQData);
 8000ec4:	797b      	ldrb	r3, [r7, #5]
 8000ec6:	4619      	mov	r1, r3
 8000ec8:	200b      	movs	r0, #11
 8000eca:	f000 fb9b 	bl	8001604 <WriteDataToTouchModule>

}
 8000ece:	bf00      	nop
 8000ed0:	3708      	adds	r7, #8
 8000ed2:	46bd      	mov	sp, r7
 8000ed4:	bd80      	pop	{r7, pc}
 8000ed6:	bf00      	nop
 8000ed8:	20000140 	.word	0x20000140
 8000edc:	2000013c 	.word	0x2000013c
 8000ee0:	080077e0 	.word	0x080077e0
 8000ee4:	2000012c 	.word	0x2000012c
 8000ee8:	080077ec 	.word	0x080077ec
 8000eec:	20000128 	.word	0x20000128
 8000ef0:	20000129 	.word	0x20000129
 8000ef4:	200000ac 	.word	0x200000ac
 8000ef8:	200000c8 	.word	0x200000c8
 8000efc:	200000a8 	.word	0x200000a8
 8000f00:	200000f8 	.word	0x200000f8
 8000f04:	200000aa 	.word	0x200000aa
 8000f08:	200000b0 	.word	0x200000b0
 8000f0c:	20000134 	.word	0x20000134

08000f10 <TIM7_IRQHandler>:

void TIM7_IRQHandler()
{
 8000f10:	b480      	push	{r7}
 8000f12:	af00      	add	r7, sp, #0
	TIM7 -> SR = 0;
 8000f14:	4b06      	ldr	r3, [pc, #24]	@ (8000f30 <TIM7_IRQHandler+0x20>)
 8000f16:	2200      	movs	r2, #0
 8000f18:	611a      	str	r2, [r3, #16]
	timePlayed++;
 8000f1a:	4b06      	ldr	r3, [pc, #24]	@ (8000f34 <TIM7_IRQHandler+0x24>)
 8000f1c:	681b      	ldr	r3, [r3, #0]
 8000f1e:	3301      	adds	r3, #1
 8000f20:	4a04      	ldr	r2, [pc, #16]	@ (8000f34 <TIM7_IRQHandler+0x24>)
 8000f22:	6013      	str	r3, [r2, #0]
}
 8000f24:	bf00      	nop
 8000f26:	46bd      	mov	sp, r7
 8000f28:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000f2c:	4770      	bx	lr
 8000f2e:	bf00      	nop
 8000f30:	40001400 	.word	0x40001400
 8000f34:	2000000c 	.word	0x2000000c

08000f38 <LCD_GPIO_Init>:
//Someone from STM said it was "often accessed" a 1-dim array, and not a 2d array. However you still access it like a 2dim array,  using fb[y*W+x] instead of fb[y][x].
uint16_t frameBuffer[LCD_PIXEL_WIDTH*LCD_PIXEL_HEIGHT] = {0};			//16bpp pixel format.


void LCD_GPIO_Init(void)
{
 8000f38:	b580      	push	{r7, lr}
 8000f3a:	b08c      	sub	sp, #48	@ 0x30
 8000f3c:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStructure;

  /* Enable the LTDC clock */
  __HAL_RCC_LTDC_CLK_ENABLE();
 8000f3e:	2300      	movs	r3, #0
 8000f40:	61bb      	str	r3, [r7, #24]
 8000f42:	4b5a      	ldr	r3, [pc, #360]	@ (80010ac <LCD_GPIO_Init+0x174>)
 8000f44:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8000f46:	4a59      	ldr	r2, [pc, #356]	@ (80010ac <LCD_GPIO_Init+0x174>)
 8000f48:	f043 6380 	orr.w	r3, r3, #67108864	@ 0x4000000
 8000f4c:	6453      	str	r3, [r2, #68]	@ 0x44
 8000f4e:	4b57      	ldr	r3, [pc, #348]	@ (80010ac <LCD_GPIO_Init+0x174>)
 8000f50:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8000f52:	f003 6380 	and.w	r3, r3, #67108864	@ 0x4000000
 8000f56:	61bb      	str	r3, [r7, #24]
 8000f58:	69bb      	ldr	r3, [r7, #24]

  /* Enable GPIO clock */
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8000f5a:	2300      	movs	r3, #0
 8000f5c:	617b      	str	r3, [r7, #20]
 8000f5e:	4b53      	ldr	r3, [pc, #332]	@ (80010ac <LCD_GPIO_Init+0x174>)
 8000f60:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000f62:	4a52      	ldr	r2, [pc, #328]	@ (80010ac <LCD_GPIO_Init+0x174>)
 8000f64:	f043 0301 	orr.w	r3, r3, #1
 8000f68:	6313      	str	r3, [r2, #48]	@ 0x30
 8000f6a:	4b50      	ldr	r3, [pc, #320]	@ (80010ac <LCD_GPIO_Init+0x174>)
 8000f6c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000f6e:	f003 0301 	and.w	r3, r3, #1
 8000f72:	617b      	str	r3, [r7, #20]
 8000f74:	697b      	ldr	r3, [r7, #20]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8000f76:	2300      	movs	r3, #0
 8000f78:	613b      	str	r3, [r7, #16]
 8000f7a:	4b4c      	ldr	r3, [pc, #304]	@ (80010ac <LCD_GPIO_Init+0x174>)
 8000f7c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000f7e:	4a4b      	ldr	r2, [pc, #300]	@ (80010ac <LCD_GPIO_Init+0x174>)
 8000f80:	f043 0302 	orr.w	r3, r3, #2
 8000f84:	6313      	str	r3, [r2, #48]	@ 0x30
 8000f86:	4b49      	ldr	r3, [pc, #292]	@ (80010ac <LCD_GPIO_Init+0x174>)
 8000f88:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000f8a:	f003 0302 	and.w	r3, r3, #2
 8000f8e:	613b      	str	r3, [r7, #16]
 8000f90:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8000f92:	2300      	movs	r3, #0
 8000f94:	60fb      	str	r3, [r7, #12]
 8000f96:	4b45      	ldr	r3, [pc, #276]	@ (80010ac <LCD_GPIO_Init+0x174>)
 8000f98:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000f9a:	4a44      	ldr	r2, [pc, #272]	@ (80010ac <LCD_GPIO_Init+0x174>)
 8000f9c:	f043 0304 	orr.w	r3, r3, #4
 8000fa0:	6313      	str	r3, [r2, #48]	@ 0x30
 8000fa2:	4b42      	ldr	r3, [pc, #264]	@ (80010ac <LCD_GPIO_Init+0x174>)
 8000fa4:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000fa6:	f003 0304 	and.w	r3, r3, #4
 8000faa:	60fb      	str	r3, [r7, #12]
 8000fac:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 8000fae:	2300      	movs	r3, #0
 8000fb0:	60bb      	str	r3, [r7, #8]
 8000fb2:	4b3e      	ldr	r3, [pc, #248]	@ (80010ac <LCD_GPIO_Init+0x174>)
 8000fb4:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000fb6:	4a3d      	ldr	r2, [pc, #244]	@ (80010ac <LCD_GPIO_Init+0x174>)
 8000fb8:	f043 0308 	orr.w	r3, r3, #8
 8000fbc:	6313      	str	r3, [r2, #48]	@ 0x30
 8000fbe:	4b3b      	ldr	r3, [pc, #236]	@ (80010ac <LCD_GPIO_Init+0x174>)
 8000fc0:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000fc2:	f003 0308 	and.w	r3, r3, #8
 8000fc6:	60bb      	str	r3, [r7, #8]
 8000fc8:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOF_CLK_ENABLE();
 8000fca:	2300      	movs	r3, #0
 8000fcc:	607b      	str	r3, [r7, #4]
 8000fce:	4b37      	ldr	r3, [pc, #220]	@ (80010ac <LCD_GPIO_Init+0x174>)
 8000fd0:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000fd2:	4a36      	ldr	r2, [pc, #216]	@ (80010ac <LCD_GPIO_Init+0x174>)
 8000fd4:	f043 0320 	orr.w	r3, r3, #32
 8000fd8:	6313      	str	r3, [r2, #48]	@ 0x30
 8000fda:	4b34      	ldr	r3, [pc, #208]	@ (80010ac <LCD_GPIO_Init+0x174>)
 8000fdc:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000fde:	f003 0320 	and.w	r3, r3, #32
 8000fe2:	607b      	str	r3, [r7, #4]
 8000fe4:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOG_CLK_ENABLE();
 8000fe6:	2300      	movs	r3, #0
 8000fe8:	603b      	str	r3, [r7, #0]
 8000fea:	4b30      	ldr	r3, [pc, #192]	@ (80010ac <LCD_GPIO_Init+0x174>)
 8000fec:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000fee:	4a2f      	ldr	r2, [pc, #188]	@ (80010ac <LCD_GPIO_Init+0x174>)
 8000ff0:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8000ff4:	6313      	str	r3, [r2, #48]	@ 0x30
 8000ff6:	4b2d      	ldr	r3, [pc, #180]	@ (80010ac <LCD_GPIO_Init+0x174>)
 8000ff8:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000ffa:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8000ffe:	603b      	str	r3, [r7, #0]
 8001000:	683b      	ldr	r3, [r7, #0]
   LCD_TFT CLK   <-> PG.07
   LCD_TFT DE   <->  PF.10
  */

  /* GPIOA configuration */
  GPIO_InitStructure.Pin = GPIO_PIN_3 | GPIO_PIN_4 | GPIO_PIN_6 |
 8001002:	f641 0358 	movw	r3, #6232	@ 0x1858
 8001006:	61fb      	str	r3, [r7, #28]
                           GPIO_PIN_11 | GPIO_PIN_12;
  GPIO_InitStructure.Mode = GPIO_MODE_AF_PP;
 8001008:	2302      	movs	r3, #2
 800100a:	623b      	str	r3, [r7, #32]
  GPIO_InitStructure.Pull = GPIO_NOPULL;
 800100c:	2300      	movs	r3, #0
 800100e:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStructure.Speed = GPIO_SPEED_FAST;
 8001010:	2302      	movs	r3, #2
 8001012:	62bb      	str	r3, [r7, #40]	@ 0x28
  GPIO_InitStructure.Alternate= GPIO_AF14_LTDC;
 8001014:	230e      	movs	r3, #14
 8001016:	62fb      	str	r3, [r7, #44]	@ 0x2c
  HAL_GPIO_Init(GPIOA, &GPIO_InitStructure);
 8001018:	f107 031c 	add.w	r3, r7, #28
 800101c:	4619      	mov	r1, r3
 800101e:	4824      	ldr	r0, [pc, #144]	@ (80010b0 <LCD_GPIO_Init+0x178>)
 8001020:	f002 fae0 	bl	80035e4 <HAL_GPIO_Init>

 /* GPIOB configuration */
  GPIO_InitStructure.Pin = GPIO_PIN_8 | \
 8001024:	f44f 6370 	mov.w	r3, #3840	@ 0xf00
 8001028:	61fb      	str	r3, [r7, #28]
                           GPIO_PIN_9 | GPIO_PIN_10 | GPIO_PIN_11;
  HAL_GPIO_Init(GPIOB, &GPIO_InitStructure);
 800102a:	f107 031c 	add.w	r3, r7, #28
 800102e:	4619      	mov	r1, r3
 8001030:	4820      	ldr	r0, [pc, #128]	@ (80010b4 <LCD_GPIO_Init+0x17c>)
 8001032:	f002 fad7 	bl	80035e4 <HAL_GPIO_Init>

 /* GPIOC configuration */
  GPIO_InitStructure.Pin = GPIO_PIN_6 | GPIO_PIN_7 | GPIO_PIN_10;
 8001036:	f44f 6398 	mov.w	r3, #1216	@ 0x4c0
 800103a:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOC, &GPIO_InitStructure);
 800103c:	f107 031c 	add.w	r3, r7, #28
 8001040:	4619      	mov	r1, r3
 8001042:	481d      	ldr	r0, [pc, #116]	@ (80010b8 <LCD_GPIO_Init+0x180>)
 8001044:	f002 face 	bl	80035e4 <HAL_GPIO_Init>

 /* GPIOD configuration */
  GPIO_InitStructure.Pin = GPIO_PIN_3 | GPIO_PIN_6;
 8001048:	2348      	movs	r3, #72	@ 0x48
 800104a:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOD, &GPIO_InitStructure);
 800104c:	f107 031c 	add.w	r3, r7, #28
 8001050:	4619      	mov	r1, r3
 8001052:	481a      	ldr	r0, [pc, #104]	@ (80010bc <LCD_GPIO_Init+0x184>)
 8001054:	f002 fac6 	bl	80035e4 <HAL_GPIO_Init>

 /* GPIOF configuration */
  GPIO_InitStructure.Pin = GPIO_PIN_10;
 8001058:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 800105c:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOF, &GPIO_InitStructure);
 800105e:	f107 031c 	add.w	r3, r7, #28
 8001062:	4619      	mov	r1, r3
 8001064:	4816      	ldr	r0, [pc, #88]	@ (80010c0 <LCD_GPIO_Init+0x188>)
 8001066:	f002 fabd 	bl	80035e4 <HAL_GPIO_Init>

 /* GPIOG configuration */
  GPIO_InitStructure.Pin = GPIO_PIN_6 | GPIO_PIN_7 | \
 800106a:	f44f 630c 	mov.w	r3, #2240	@ 0x8c0
 800106e:	61fb      	str	r3, [r7, #28]
                           GPIO_PIN_11;
  HAL_GPIO_Init(GPIOG, &GPIO_InitStructure);
 8001070:	f107 031c 	add.w	r3, r7, #28
 8001074:	4619      	mov	r1, r3
 8001076:	4813      	ldr	r0, [pc, #76]	@ (80010c4 <LCD_GPIO_Init+0x18c>)
 8001078:	f002 fab4 	bl	80035e4 <HAL_GPIO_Init>

  /* GPIOB configuration */
  GPIO_InitStructure.Pin = GPIO_PIN_0 | GPIO_PIN_1;
 800107c:	2303      	movs	r3, #3
 800107e:	61fb      	str	r3, [r7, #28]
  GPIO_InitStructure.Alternate= GPIO_AF9_LTDC;
 8001080:	2309      	movs	r3, #9
 8001082:	62fb      	str	r3, [r7, #44]	@ 0x2c
  HAL_GPIO_Init(GPIOB, &GPIO_InitStructure);
 8001084:	f107 031c 	add.w	r3, r7, #28
 8001088:	4619      	mov	r1, r3
 800108a:	480a      	ldr	r0, [pc, #40]	@ (80010b4 <LCD_GPIO_Init+0x17c>)
 800108c:	f002 faaa 	bl	80035e4 <HAL_GPIO_Init>

  /* GPIOG configuration */
  GPIO_InitStructure.Pin = GPIO_PIN_10 | GPIO_PIN_12;
 8001090:	f44f 53a0 	mov.w	r3, #5120	@ 0x1400
 8001094:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOG, &GPIO_InitStructure);
 8001096:	f107 031c 	add.w	r3, r7, #28
 800109a:	4619      	mov	r1, r3
 800109c:	4809      	ldr	r0, [pc, #36]	@ (80010c4 <LCD_GPIO_Init+0x18c>)
 800109e:	f002 faa1 	bl	80035e4 <HAL_GPIO_Init>
}
 80010a2:	bf00      	nop
 80010a4:	3730      	adds	r7, #48	@ 0x30
 80010a6:	46bd      	mov	sp, r7
 80010a8:	bd80      	pop	{r7, pc}
 80010aa:	bf00      	nop
 80010ac:	40023800 	.word	0x40023800
 80010b0:	40020000 	.word	0x40020000
 80010b4:	40020400 	.word	0x40020400
 80010b8:	40020800 	.word	0x40020800
 80010bc:	40020c00 	.word	0x40020c00
 80010c0:	40021400 	.word	0x40021400
 80010c4:	40021800 	.word	0x40021800

080010c8 <LTCD_Layer_Init>:

void LTCD_Layer_Init(uint8_t LayerIndex)
{
 80010c8:	b580      	push	{r7, lr}
 80010ca:	b090      	sub	sp, #64	@ 0x40
 80010cc:	af00      	add	r7, sp, #0
 80010ce:	4603      	mov	r3, r0
 80010d0:	71fb      	strb	r3, [r7, #7]
	LTDC_LayerCfgTypeDef  pLayerCfg;

	pLayerCfg.WindowX0 = 0;	//Configures the Window HORZ START Position.
 80010d2:	2300      	movs	r3, #0
 80010d4:	60fb      	str	r3, [r7, #12]
	pLayerCfg.WindowX1 = LCD_PIXEL_WIDTH;	//Configures the Window HORZ Stop Position.
 80010d6:	23f0      	movs	r3, #240	@ 0xf0
 80010d8:	613b      	str	r3, [r7, #16]
	pLayerCfg.WindowY0 = 0;	//Configures the Window vertical START Position.
 80010da:	2300      	movs	r3, #0
 80010dc:	617b      	str	r3, [r7, #20]
	pLayerCfg.WindowY1 = LCD_PIXEL_HEIGHT;	//Configures the Window vertical Stop Position.
 80010de:	f44f 73a0 	mov.w	r3, #320	@ 0x140
 80010e2:	61bb      	str	r3, [r7, #24]
	pLayerCfg.PixelFormat = LCD_PIXEL_FORMAT_1;  //INCORRECT PIXEL FORMAT WILL GIVE WEIRD RESULTS!! IT MAY STILL WORK FOR 1/2 THE DISPLAY!!! //This is our buffers pixel format. 2 bytes for each pixel
 80010e4:	2302      	movs	r3, #2
 80010e6:	61fb      	str	r3, [r7, #28]
	pLayerCfg.Alpha = 255;
 80010e8:	23ff      	movs	r3, #255	@ 0xff
 80010ea:	623b      	str	r3, [r7, #32]
	pLayerCfg.Alpha0 = 0;
 80010ec:	2300      	movs	r3, #0
 80010ee:	627b      	str	r3, [r7, #36]	@ 0x24
	pLayerCfg.BlendingFactor1 = LTDC_BLENDING_FACTOR1_CA;
 80010f0:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 80010f4:	62bb      	str	r3, [r7, #40]	@ 0x28
	pLayerCfg.BlendingFactor2 = LTDC_BLENDING_FACTOR2_CA;
 80010f6:	2305      	movs	r3, #5
 80010f8:	62fb      	str	r3, [r7, #44]	@ 0x2c
	if (LayerIndex == 0){
 80010fa:	79fb      	ldrb	r3, [r7, #7]
 80010fc:	2b00      	cmp	r3, #0
 80010fe:	d101      	bne.n	8001104 <LTCD_Layer_Init+0x3c>
		pLayerCfg.FBStartAdress = (uintptr_t)frameBuffer;
 8001100:	4b0f      	ldr	r3, [pc, #60]	@ (8001140 <LTCD_Layer_Init+0x78>)
 8001102:	633b      	str	r3, [r7, #48]	@ 0x30
	}
	pLayerCfg.ImageWidth = LCD_PIXEL_WIDTH;
 8001104:	23f0      	movs	r3, #240	@ 0xf0
 8001106:	637b      	str	r3, [r7, #52]	@ 0x34
	pLayerCfg.ImageHeight = LCD_PIXEL_HEIGHT;
 8001108:	f44f 73a0 	mov.w	r3, #320	@ 0x140
 800110c:	63bb      	str	r3, [r7, #56]	@ 0x38
	pLayerCfg.Backcolor.Blue = 0;
 800110e:	2300      	movs	r3, #0
 8001110:	f887 303c 	strb.w	r3, [r7, #60]	@ 0x3c
	pLayerCfg.Backcolor.Green = 0;
 8001114:	2300      	movs	r3, #0
 8001116:	f887 303d 	strb.w	r3, [r7, #61]	@ 0x3d
	pLayerCfg.Backcolor.Red = 0;
 800111a:	2300      	movs	r3, #0
 800111c:	f887 303e 	strb.w	r3, [r7, #62]	@ 0x3e
	if (HAL_LTDC_ConfigLayer(&hltdc, &pLayerCfg, LayerIndex) != HAL_OK)
 8001120:	79fa      	ldrb	r2, [r7, #7]
 8001122:	f107 030c 	add.w	r3, r7, #12
 8001126:	4619      	mov	r1, r3
 8001128:	4806      	ldr	r0, [pc, #24]	@ (8001144 <LTCD_Layer_Init+0x7c>)
 800112a:	f003 fe9d 	bl	8004e68 <HAL_LTDC_ConfigLayer>
 800112e:	4603      	mov	r3, r0
 8001130:	2b00      	cmp	r3, #0
 8001132:	d001      	beq.n	8001138 <LTCD_Layer_Init+0x70>
	{
		LCD_Error_Handler();
 8001134:	f000 fa3c 	bl	80015b0 <LCD_Error_Handler>
	}
}
 8001138:	bf00      	nop
 800113a:	3740      	adds	r7, #64	@ 0x40
 800113c:	46bd      	mov	sp, r7
 800113e:	bd80      	pop	{r7, pc}
 8001140:	20000220 	.word	0x20000220
 8001144:	20000144 	.word	0x20000144

08001148 <LCD_Draw_Square_Fill>:
{
  LCD_Clear(0,LCD_COLOR_WHITE);
}

void LCD_Draw_Square_Fill(uint16_t Xpos, uint16_t Ypos, uint16_t length, uint16_t color)
{
 8001148:	b590      	push	{r4, r7, lr}
 800114a:	b085      	sub	sp, #20
 800114c:	af00      	add	r7, sp, #0
 800114e:	4604      	mov	r4, r0
 8001150:	4608      	mov	r0, r1
 8001152:	4611      	mov	r1, r2
 8001154:	461a      	mov	r2, r3
 8001156:	4623      	mov	r3, r4
 8001158:	80fb      	strh	r3, [r7, #6]
 800115a:	4603      	mov	r3, r0
 800115c:	80bb      	strh	r3, [r7, #4]
 800115e:	460b      	mov	r3, r1
 8001160:	807b      	strh	r3, [r7, #2]
 8001162:	4613      	mov	r3, r2
 8001164:	803b      	strh	r3, [r7, #0]
	for (int16_t y = Ypos ; y <= (Ypos+length); y++)
 8001166:	88bb      	ldrh	r3, [r7, #4]
 8001168:	81fb      	strh	r3, [r7, #14]
 800116a:	e01d      	b.n	80011a8 <LCD_Draw_Square_Fill+0x60>
	{
		for (int16_t x = Xpos; x<= (Xpos+length); x++)
 800116c:	88fb      	ldrh	r3, [r7, #6]
 800116e:	81bb      	strh	r3, [r7, #12]
 8001170:	e00d      	b.n	800118e <LCD_Draw_Square_Fill+0x46>
		{
			LCD_Draw_Pixel(x, y, color);
 8001172:	f9b7 300c 	ldrsh.w	r3, [r7, #12]
 8001176:	f9b7 100e 	ldrsh.w	r1, [r7, #14]
 800117a:	883a      	ldrh	r2, [r7, #0]
 800117c:	4618      	mov	r0, r3
 800117e:	f000 f87d 	bl	800127c <LCD_Draw_Pixel>
		for (int16_t x = Xpos; x<= (Xpos+length); x++)
 8001182:	f9b7 300c 	ldrsh.w	r3, [r7, #12]
 8001186:	b29b      	uxth	r3, r3
 8001188:	3301      	adds	r3, #1
 800118a:	b29b      	uxth	r3, r3
 800118c:	81bb      	strh	r3, [r7, #12]
 800118e:	f9b7 200c 	ldrsh.w	r2, [r7, #12]
 8001192:	88f9      	ldrh	r1, [r7, #6]
 8001194:	887b      	ldrh	r3, [r7, #2]
 8001196:	440b      	add	r3, r1
 8001198:	429a      	cmp	r2, r3
 800119a:	ddea      	ble.n	8001172 <LCD_Draw_Square_Fill+0x2a>
	for (int16_t y = Ypos ; y <= (Ypos+length); y++)
 800119c:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
 80011a0:	b29b      	uxth	r3, r3
 80011a2:	3301      	adds	r3, #1
 80011a4:	b29b      	uxth	r3, r3
 80011a6:	81fb      	strh	r3, [r7, #14]
 80011a8:	f9b7 200e 	ldrsh.w	r2, [r7, #14]
 80011ac:	88b9      	ldrh	r1, [r7, #4]
 80011ae:	887b      	ldrh	r3, [r7, #2]
 80011b0:	440b      	add	r3, r1
 80011b2:	429a      	cmp	r2, r3
 80011b4:	ddda      	ble.n	800116c <LCD_Draw_Square_Fill+0x24>
		}
	}
}
 80011b6:	bf00      	nop
 80011b8:	bf00      	nop
 80011ba:	3714      	adds	r7, #20
 80011bc:	46bd      	mov	sp, r7
 80011be:	bd90      	pop	{r4, r7, pc}

080011c0 <LTCD__Init>:

void LTCD__Init(void)
{
 80011c0:	b580      	push	{r7, lr}
 80011c2:	af00      	add	r7, sp, #0
	hltdc.Instance = LTDC;
 80011c4:	4b2a      	ldr	r3, [pc, #168]	@ (8001270 <LTCD__Init+0xb0>)
 80011c6:	4a2b      	ldr	r2, [pc, #172]	@ (8001274 <LTCD__Init+0xb4>)
 80011c8:	601a      	str	r2, [r3, #0]
	/* Configure horizontal synchronization width */
	hltdc.Init.HorizontalSync = ILI9341_HSYNC;
 80011ca:	4b29      	ldr	r3, [pc, #164]	@ (8001270 <LTCD__Init+0xb0>)
 80011cc:	2209      	movs	r2, #9
 80011ce:	615a      	str	r2, [r3, #20]
	/* Configure vertical synchronization height */
	hltdc.Init.VerticalSync = ILI9341_VSYNC;
 80011d0:	4b27      	ldr	r3, [pc, #156]	@ (8001270 <LTCD__Init+0xb0>)
 80011d2:	2201      	movs	r2, #1
 80011d4:	619a      	str	r2, [r3, #24]
	/* Configure accumulated horizontal back porch */
	hltdc.Init.AccumulatedHBP = ILI9341_HBP;
 80011d6:	4b26      	ldr	r3, [pc, #152]	@ (8001270 <LTCD__Init+0xb0>)
 80011d8:	221d      	movs	r2, #29
 80011da:	61da      	str	r2, [r3, #28]
	/* Configure accumulated vertical back porch */
	hltdc.Init.AccumulatedVBP = ILI9341_VBP;
 80011dc:	4b24      	ldr	r3, [pc, #144]	@ (8001270 <LTCD__Init+0xb0>)
 80011de:	2203      	movs	r2, #3
 80011e0:	621a      	str	r2, [r3, #32]
	/* Configure accumulated active width */
	hltdc.Init.AccumulatedActiveW = 269;
 80011e2:	4b23      	ldr	r3, [pc, #140]	@ (8001270 <LTCD__Init+0xb0>)
 80011e4:	f240 120d 	movw	r2, #269	@ 0x10d
 80011e8:	625a      	str	r2, [r3, #36]	@ 0x24
	/* Configure accumulated active height */
	hltdc.Init.AccumulatedActiveH = 323;
 80011ea:	4b21      	ldr	r3, [pc, #132]	@ (8001270 <LTCD__Init+0xb0>)
 80011ec:	f240 1243 	movw	r2, #323	@ 0x143
 80011f0:	629a      	str	r2, [r3, #40]	@ 0x28
	/* Configure total width */
	hltdc.Init.TotalWidth = 279;
 80011f2:	4b1f      	ldr	r3, [pc, #124]	@ (8001270 <LTCD__Init+0xb0>)
 80011f4:	f240 1217 	movw	r2, #279	@ 0x117
 80011f8:	62da      	str	r2, [r3, #44]	@ 0x2c
	/* Configure total height */
	hltdc.Init.TotalHeigh = 327;
 80011fa:	4b1d      	ldr	r3, [pc, #116]	@ (8001270 <LTCD__Init+0xb0>)
 80011fc:	f240 1247 	movw	r2, #327	@ 0x147
 8001200:	631a      	str	r2, [r3, #48]	@ 0x30
	/* Configure R,G,B component values for LCD background color */
	hltdc.Init.Backcolor.Red = 0;
 8001202:	4b1b      	ldr	r3, [pc, #108]	@ (8001270 <LTCD__Init+0xb0>)
 8001204:	2200      	movs	r2, #0
 8001206:	f883 2036 	strb.w	r2, [r3, #54]	@ 0x36
	hltdc.Init.Backcolor.Blue = 0;
 800120a:	4b19      	ldr	r3, [pc, #100]	@ (8001270 <LTCD__Init+0xb0>)
 800120c:	2200      	movs	r2, #0
 800120e:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
	hltdc.Init.Backcolor.Green = 0;
 8001212:	4b17      	ldr	r3, [pc, #92]	@ (8001270 <LTCD__Init+0xb0>)
 8001214:	2200      	movs	r2, #0
 8001216:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35
	/* PLLSAI_VCO Input = HSE_VALUE/PLL_M = 1 Mhz */
	/* PLLSAI_VCO Output = PLLSAI_VCO Input * PLLSAIN = 192 Mhz */
	/* PLLLCDCLK = PLLSAI_VCO Output/PLLSAIR = 192/4 = 48 Mhz */
	/* LTDC clock frequency = PLLLCDCLK / LTDC_PLLSAI_DIVR_8 = 48/4 = 6Mhz */

	PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_LTDC;
 800121a:	4b17      	ldr	r3, [pc, #92]	@ (8001278 <LTCD__Init+0xb8>)
 800121c:	2208      	movs	r2, #8
 800121e:	601a      	str	r2, [r3, #0]
	PeriphClkInitStruct.PLLSAI.PLLSAIN = 192;
 8001220:	4b15      	ldr	r3, [pc, #84]	@ (8001278 <LTCD__Init+0xb8>)
 8001222:	22c0      	movs	r2, #192	@ 0xc0
 8001224:	611a      	str	r2, [r3, #16]
	PeriphClkInitStruct.PLLSAI.PLLSAIR = 4;
 8001226:	4b14      	ldr	r3, [pc, #80]	@ (8001278 <LTCD__Init+0xb8>)
 8001228:	2204      	movs	r2, #4
 800122a:	619a      	str	r2, [r3, #24]
	PeriphClkInitStruct.PLLSAIDivR = RCC_PLLSAIDIVR_8;
 800122c:	4b12      	ldr	r3, [pc, #72]	@ (8001278 <LTCD__Init+0xb8>)
 800122e:	f44f 3200 	mov.w	r2, #131072	@ 0x20000
 8001232:	625a      	str	r2, [r3, #36]	@ 0x24
	HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct);
 8001234:	4810      	ldr	r0, [pc, #64]	@ (8001278 <LTCD__Init+0xb8>)
 8001236:	f004 fc71 	bl	8005b1c <HAL_RCCEx_PeriphCLKConfig>
	/* Polarity */
	hltdc.Init.HSPolarity = LTDC_HSPOLARITY_AL;
 800123a:	4b0d      	ldr	r3, [pc, #52]	@ (8001270 <LTCD__Init+0xb0>)
 800123c:	2200      	movs	r2, #0
 800123e:	605a      	str	r2, [r3, #4]
	hltdc.Init.VSPolarity = LTDC_VSPOLARITY_AL;
 8001240:	4b0b      	ldr	r3, [pc, #44]	@ (8001270 <LTCD__Init+0xb0>)
 8001242:	2200      	movs	r2, #0
 8001244:	609a      	str	r2, [r3, #8]
	hltdc.Init.DEPolarity = LTDC_DEPOLARITY_AL;
 8001246:	4b0a      	ldr	r3, [pc, #40]	@ (8001270 <LTCD__Init+0xb0>)
 8001248:	2200      	movs	r2, #0
 800124a:	60da      	str	r2, [r3, #12]
	hltdc.Init.PCPolarity = LTDC_PCPOLARITY_IPC;
 800124c:	4b08      	ldr	r3, [pc, #32]	@ (8001270 <LTCD__Init+0xb0>)
 800124e:	2200      	movs	r2, #0
 8001250:	611a      	str	r2, [r3, #16]

	LCD_GPIO_Init();
 8001252:	f7ff fe71 	bl	8000f38 <LCD_GPIO_Init>

	if (HAL_LTDC_Init(&hltdc) != HAL_OK)
 8001256:	4806      	ldr	r0, [pc, #24]	@ (8001270 <LTCD__Init+0xb0>)
 8001258:	f003 fd36 	bl	8004cc8 <HAL_LTDC_Init>
 800125c:	4603      	mov	r3, r0
 800125e:	2b00      	cmp	r3, #0
 8001260:	d001      	beq.n	8001266 <LTCD__Init+0xa6>
	 {
	   LCD_Error_Handler();
 8001262:	f000 f9a5 	bl	80015b0 <LCD_Error_Handler>
	 }

	ili9341_Init();
 8001266:	f000 f9df 	bl	8001628 <ili9341_Init>
}
 800126a:	bf00      	nop
 800126c:	bd80      	pop	{r7, pc}
 800126e:	bf00      	nop
 8001270:	20000144 	.word	0x20000144
 8001274:	40016800 	.word	0x40016800
 8001278:	200001ec 	.word	0x200001ec

0800127c <LCD_Draw_Pixel>:
 * This is really the only function needed.
 * All drawing consists of is manipulating the array.
 * Adding input sanitation should probably be done.
 */
void LCD_Draw_Pixel(uint16_t x, uint16_t y, uint16_t color)
{
 800127c:	b480      	push	{r7}
 800127e:	b083      	sub	sp, #12
 8001280:	af00      	add	r7, sp, #0
 8001282:	4603      	mov	r3, r0
 8001284:	80fb      	strh	r3, [r7, #6]
 8001286:	460b      	mov	r3, r1
 8001288:	80bb      	strh	r3, [r7, #4]
 800128a:	4613      	mov	r3, r2
 800128c:	807b      	strh	r3, [r7, #2]
	frameBuffer[y*LCD_PIXEL_WIDTH+x] = color;  //You cannot do x*y to set the pixel.
 800128e:	88ba      	ldrh	r2, [r7, #4]
 8001290:	4613      	mov	r3, r2
 8001292:	011b      	lsls	r3, r3, #4
 8001294:	1a9b      	subs	r3, r3, r2
 8001296:	011b      	lsls	r3, r3, #4
 8001298:	461a      	mov	r2, r3
 800129a:	88fb      	ldrh	r3, [r7, #6]
 800129c:	4413      	add	r3, r2
 800129e:	4905      	ldr	r1, [pc, #20]	@ (80012b4 <LCD_Draw_Pixel+0x38>)
 80012a0:	887a      	ldrh	r2, [r7, #2]
 80012a2:	f821 2013 	strh.w	r2, [r1, r3, lsl #1]
}
 80012a6:	bf00      	nop
 80012a8:	370c      	adds	r7, #12
 80012aa:	46bd      	mov	sp, r7
 80012ac:	f85d 7b04 	ldr.w	r7, [sp], #4
 80012b0:	4770      	bx	lr
 80012b2:	bf00      	nop
 80012b4:	20000220 	.word	0x20000220

080012b8 <LCD_Draw_Circle_Fill>:
 * These functions are simple examples. Most computer graphics like OpenGl and stm's graphics library use a state machine. Where you first call some function like SetColor(color), SetPosition(x,y), then DrawSqure(size)
 * Instead all of these are explicit where color, size, and position are passed in.
 * There is tons of ways to handle drawing. I dont think it matters too much.
 */
void LCD_Draw_Circle_Fill(uint16_t Xpos, uint16_t Ypos, uint16_t radius, uint16_t color)
{
 80012b8:	b590      	push	{r4, r7, lr}
 80012ba:	b085      	sub	sp, #20
 80012bc:	af00      	add	r7, sp, #0
 80012be:	4604      	mov	r4, r0
 80012c0:	4608      	mov	r0, r1
 80012c2:	4611      	mov	r1, r2
 80012c4:	461a      	mov	r2, r3
 80012c6:	4623      	mov	r3, r4
 80012c8:	80fb      	strh	r3, [r7, #6]
 80012ca:	4603      	mov	r3, r0
 80012cc:	80bb      	strh	r3, [r7, #4]
 80012ce:	460b      	mov	r3, r1
 80012d0:	807b      	strh	r3, [r7, #2]
 80012d2:	4613      	mov	r3, r2
 80012d4:	803b      	strh	r3, [r7, #0]
    for(int16_t y=-radius; y<=radius; y++)
 80012d6:	887b      	ldrh	r3, [r7, #2]
 80012d8:	425b      	negs	r3, r3
 80012da:	b29b      	uxth	r3, r3
 80012dc:	81fb      	strh	r3, [r7, #14]
 80012de:	e034      	b.n	800134a <LCD_Draw_Circle_Fill+0x92>
    {
        for(int16_t x=-radius; x<=radius; x++)
 80012e0:	887b      	ldrh	r3, [r7, #2]
 80012e2:	425b      	negs	r3, r3
 80012e4:	b29b      	uxth	r3, r3
 80012e6:	81bb      	strh	r3, [r7, #12]
 80012e8:	e024      	b.n	8001334 <LCD_Draw_Circle_Fill+0x7c>
        {
            if(x*x+y*y <= radius*radius)
 80012ea:	f9b7 300c 	ldrsh.w	r3, [r7, #12]
 80012ee:	f9b7 200c 	ldrsh.w	r2, [r7, #12]
 80012f2:	fb03 f202 	mul.w	r2, r3, r2
 80012f6:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
 80012fa:	f9b7 100e 	ldrsh.w	r1, [r7, #14]
 80012fe:	fb01 f303 	mul.w	r3, r1, r3
 8001302:	441a      	add	r2, r3
 8001304:	887b      	ldrh	r3, [r7, #2]
 8001306:	8879      	ldrh	r1, [r7, #2]
 8001308:	fb01 f303 	mul.w	r3, r1, r3
 800130c:	429a      	cmp	r2, r3
 800130e:	dc0b      	bgt.n	8001328 <LCD_Draw_Circle_Fill+0x70>
            {
            	LCD_Draw_Pixel(x+Xpos, y+Ypos, color);
 8001310:	89ba      	ldrh	r2, [r7, #12]
 8001312:	88fb      	ldrh	r3, [r7, #6]
 8001314:	4413      	add	r3, r2
 8001316:	b298      	uxth	r0, r3
 8001318:	89fa      	ldrh	r2, [r7, #14]
 800131a:	88bb      	ldrh	r3, [r7, #4]
 800131c:	4413      	add	r3, r2
 800131e:	b29b      	uxth	r3, r3
 8001320:	883a      	ldrh	r2, [r7, #0]
 8001322:	4619      	mov	r1, r3
 8001324:	f7ff ffaa 	bl	800127c <LCD_Draw_Pixel>
        for(int16_t x=-radius; x<=radius; x++)
 8001328:	f9b7 300c 	ldrsh.w	r3, [r7, #12]
 800132c:	b29b      	uxth	r3, r3
 800132e:	3301      	adds	r3, #1
 8001330:	b29b      	uxth	r3, r3
 8001332:	81bb      	strh	r3, [r7, #12]
 8001334:	f9b7 200c 	ldrsh.w	r2, [r7, #12]
 8001338:	887b      	ldrh	r3, [r7, #2]
 800133a:	429a      	cmp	r2, r3
 800133c:	ddd5      	ble.n	80012ea <LCD_Draw_Circle_Fill+0x32>
    for(int16_t y=-radius; y<=radius; y++)
 800133e:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
 8001342:	b29b      	uxth	r3, r3
 8001344:	3301      	adds	r3, #1
 8001346:	b29b      	uxth	r3, r3
 8001348:	81fb      	strh	r3, [r7, #14]
 800134a:	f9b7 200e 	ldrsh.w	r2, [r7, #14]
 800134e:	887b      	ldrh	r3, [r7, #2]
 8001350:	429a      	cmp	r2, r3
 8001352:	ddc5      	ble.n	80012e0 <LCD_Draw_Circle_Fill+0x28>
            }
        }
    }
}
 8001354:	bf00      	nop
 8001356:	bf00      	nop
 8001358:	3714      	adds	r7, #20
 800135a:	46bd      	mov	sp, r7
 800135c:	bd90      	pop	{r4, r7, pc}
	...

08001360 <LCD_Clear>:
	  LCD_Draw_Pixel(x, i+y, color);
  }
}

void LCD_Clear(uint8_t LayerIndex, uint16_t Color)
{
 8001360:	b480      	push	{r7}
 8001362:	b085      	sub	sp, #20
 8001364:	af00      	add	r7, sp, #0
 8001366:	4603      	mov	r3, r0
 8001368:	460a      	mov	r2, r1
 800136a:	71fb      	strb	r3, [r7, #7]
 800136c:	4613      	mov	r3, r2
 800136e:	80bb      	strh	r3, [r7, #4]
	if (LayerIndex == 0){
 8001370:	79fb      	ldrb	r3, [r7, #7]
 8001372:	2b00      	cmp	r3, #0
 8001374:	d10e      	bne.n	8001394 <LCD_Clear+0x34>
		for (uint32_t i = 0; i < LCD_PIXEL_WIDTH * LCD_PIXEL_HEIGHT; i++){
 8001376:	2300      	movs	r3, #0
 8001378:	60fb      	str	r3, [r7, #12]
 800137a:	e007      	b.n	800138c <LCD_Clear+0x2c>
			frameBuffer[i] = Color;
 800137c:	4908      	ldr	r1, [pc, #32]	@ (80013a0 <LCD_Clear+0x40>)
 800137e:	68fb      	ldr	r3, [r7, #12]
 8001380:	88ba      	ldrh	r2, [r7, #4]
 8001382:	f821 2013 	strh.w	r2, [r1, r3, lsl #1]
		for (uint32_t i = 0; i < LCD_PIXEL_WIDTH * LCD_PIXEL_HEIGHT; i++){
 8001386:	68fb      	ldr	r3, [r7, #12]
 8001388:	3301      	adds	r3, #1
 800138a:	60fb      	str	r3, [r7, #12]
 800138c:	68fb      	ldr	r3, [r7, #12]
 800138e:	f5b3 3f96 	cmp.w	r3, #76800	@ 0x12c00
 8001392:	d3f3      	bcc.n	800137c <LCD_Clear+0x1c>
		}
	}
  // TODO: Add more Layers if needed
}
 8001394:	bf00      	nop
 8001396:	3714      	adds	r7, #20
 8001398:	46bd      	mov	sp, r7
 800139a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800139e:	4770      	bx	lr
 80013a0:	20000220 	.word	0x20000220

080013a4 <LCD_SetTextColor>:

//This was taken and adapted from stm32's mcu code
void LCD_SetTextColor(uint16_t Color)
{
 80013a4:	b480      	push	{r7}
 80013a6:	b083      	sub	sp, #12
 80013a8:	af00      	add	r7, sp, #0
 80013aa:	4603      	mov	r3, r0
 80013ac:	80fb      	strh	r3, [r7, #6]
  CurrentTextColor = Color;
 80013ae:	4a04      	ldr	r2, [pc, #16]	@ (80013c0 <LCD_SetTextColor+0x1c>)
 80013b0:	88fb      	ldrh	r3, [r7, #6]
 80013b2:	8013      	strh	r3, [r2, #0]
}
 80013b4:	bf00      	nop
 80013b6:	370c      	adds	r7, #12
 80013b8:	46bd      	mov	sp, r7
 80013ba:	f85d 7b04 	ldr.w	r7, [sp], #4
 80013be:	4770      	bx	lr
 80013c0:	20000010 	.word	0x20000010

080013c4 <LCD_SetFont>:

//This was taken and adapted from stm32's mcu code
void LCD_SetFont(FONT_t *fonts)
{
 80013c4:	b480      	push	{r7}
 80013c6:	b083      	sub	sp, #12
 80013c8:	af00      	add	r7, sp, #0
 80013ca:	6078      	str	r0, [r7, #4]
  LCD_Currentfonts = fonts;
 80013cc:	4a04      	ldr	r2, [pc, #16]	@ (80013e0 <LCD_SetFont+0x1c>)
 80013ce:	687b      	ldr	r3, [r7, #4]
 80013d0:	6013      	str	r3, [r2, #0]
}
 80013d2:	bf00      	nop
 80013d4:	370c      	adds	r7, #12
 80013d6:	46bd      	mov	sp, r7
 80013d8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80013dc:	4770      	bx	lr
 80013de:	bf00      	nop
 80013e0:	2000021c 	.word	0x2000021c

080013e4 <LCD_Draw_Char>:

//This was taken and adapted from stm32's mcu code
void LCD_Draw_Char(uint16_t Xpos, uint16_t Ypos, const uint16_t *c)
{
 80013e4:	b580      	push	{r7, lr}
 80013e6:	b084      	sub	sp, #16
 80013e8:	af00      	add	r7, sp, #0
 80013ea:	4603      	mov	r3, r0
 80013ec:	603a      	str	r2, [r7, #0]
 80013ee:	80fb      	strh	r3, [r7, #6]
 80013f0:	460b      	mov	r3, r1
 80013f2:	80bb      	strh	r3, [r7, #4]
  uint32_t index = 0, counter = 0;
 80013f4:	2300      	movs	r3, #0
 80013f6:	60fb      	str	r3, [r7, #12]
 80013f8:	2300      	movs	r3, #0
 80013fa:	60bb      	str	r3, [r7, #8]
  for(index = 0; index < LCD_Currentfonts->Height; index++)
 80013fc:	2300      	movs	r3, #0
 80013fe:	60fb      	str	r3, [r7, #12]
 8001400:	e04c      	b.n	800149c <LCD_Draw_Char+0xb8>
  {
    for(counter = 0; counter < LCD_Currentfonts->Width; counter++)
 8001402:	2300      	movs	r3, #0
 8001404:	60bb      	str	r3, [r7, #8]
 8001406:	e03f      	b.n	8001488 <LCD_Draw_Char+0xa4>
    {
      if((((c[index] & ((0x80 << ((LCD_Currentfonts->Width / 12 ) * 8 ) ) >> counter)) == 0x00) && (LCD_Currentfonts->Width <= 12)) || (((c[index] & (0x1 << counter)) == 0x00)&&(LCD_Currentfonts->Width > 12 )))
 8001408:	68fb      	ldr	r3, [r7, #12]
 800140a:	005b      	lsls	r3, r3, #1
 800140c:	683a      	ldr	r2, [r7, #0]
 800140e:	4413      	add	r3, r2
 8001410:	881b      	ldrh	r3, [r3, #0]
 8001412:	4619      	mov	r1, r3
 8001414:	4b27      	ldr	r3, [pc, #156]	@ (80014b4 <LCD_Draw_Char+0xd0>)
 8001416:	681b      	ldr	r3, [r3, #0]
 8001418:	889b      	ldrh	r3, [r3, #4]
 800141a:	4a27      	ldr	r2, [pc, #156]	@ (80014b8 <LCD_Draw_Char+0xd4>)
 800141c:	fba2 2303 	umull	r2, r3, r2, r3
 8001420:	08db      	lsrs	r3, r3, #3
 8001422:	b29b      	uxth	r3, r3
 8001424:	00db      	lsls	r3, r3, #3
 8001426:	2280      	movs	r2, #128	@ 0x80
 8001428:	409a      	lsls	r2, r3
 800142a:	68bb      	ldr	r3, [r7, #8]
 800142c:	fa42 f303 	asr.w	r3, r2, r3
 8001430:	400b      	ands	r3, r1
 8001432:	2b00      	cmp	r3, #0
 8001434:	d104      	bne.n	8001440 <LCD_Draw_Char+0x5c>
 8001436:	4b1f      	ldr	r3, [pc, #124]	@ (80014b4 <LCD_Draw_Char+0xd0>)
 8001438:	681b      	ldr	r3, [r3, #0]
 800143a:	889b      	ldrh	r3, [r3, #4]
 800143c:	2b0c      	cmp	r3, #12
 800143e:	d920      	bls.n	8001482 <LCD_Draw_Char+0x9e>
 8001440:	68fb      	ldr	r3, [r7, #12]
 8001442:	005b      	lsls	r3, r3, #1
 8001444:	683a      	ldr	r2, [r7, #0]
 8001446:	4413      	add	r3, r2
 8001448:	881b      	ldrh	r3, [r3, #0]
 800144a:	461a      	mov	r2, r3
 800144c:	68bb      	ldr	r3, [r7, #8]
 800144e:	fa42 f303 	asr.w	r3, r2, r3
 8001452:	f003 0301 	and.w	r3, r3, #1
 8001456:	2b00      	cmp	r3, #0
 8001458:	d104      	bne.n	8001464 <LCD_Draw_Char+0x80>
 800145a:	4b16      	ldr	r3, [pc, #88]	@ (80014b4 <LCD_Draw_Char+0xd0>)
 800145c:	681b      	ldr	r3, [r3, #0]
 800145e:	889b      	ldrh	r3, [r3, #4]
 8001460:	2b0c      	cmp	r3, #12
 8001462:	d80e      	bhi.n	8001482 <LCD_Draw_Char+0x9e>
      {
         //Background If want to overrite text under then add a set color here
      }
      else
      {
    	  LCD_Draw_Pixel(counter + Xpos,index + Ypos,CurrentTextColor);
 8001464:	68bb      	ldr	r3, [r7, #8]
 8001466:	b29a      	uxth	r2, r3
 8001468:	88fb      	ldrh	r3, [r7, #6]
 800146a:	4413      	add	r3, r2
 800146c:	b298      	uxth	r0, r3
 800146e:	68fb      	ldr	r3, [r7, #12]
 8001470:	b29a      	uxth	r2, r3
 8001472:	88bb      	ldrh	r3, [r7, #4]
 8001474:	4413      	add	r3, r2
 8001476:	b29b      	uxth	r3, r3
 8001478:	4a10      	ldr	r2, [pc, #64]	@ (80014bc <LCD_Draw_Char+0xd8>)
 800147a:	8812      	ldrh	r2, [r2, #0]
 800147c:	4619      	mov	r1, r3
 800147e:	f7ff fefd 	bl	800127c <LCD_Draw_Pixel>
    for(counter = 0; counter < LCD_Currentfonts->Width; counter++)
 8001482:	68bb      	ldr	r3, [r7, #8]
 8001484:	3301      	adds	r3, #1
 8001486:	60bb      	str	r3, [r7, #8]
 8001488:	4b0a      	ldr	r3, [pc, #40]	@ (80014b4 <LCD_Draw_Char+0xd0>)
 800148a:	681b      	ldr	r3, [r3, #0]
 800148c:	889b      	ldrh	r3, [r3, #4]
 800148e:	461a      	mov	r2, r3
 8001490:	68bb      	ldr	r3, [r7, #8]
 8001492:	4293      	cmp	r3, r2
 8001494:	d3b8      	bcc.n	8001408 <LCD_Draw_Char+0x24>
  for(index = 0; index < LCD_Currentfonts->Height; index++)
 8001496:	68fb      	ldr	r3, [r7, #12]
 8001498:	3301      	adds	r3, #1
 800149a:	60fb      	str	r3, [r7, #12]
 800149c:	4b05      	ldr	r3, [pc, #20]	@ (80014b4 <LCD_Draw_Char+0xd0>)
 800149e:	681b      	ldr	r3, [r3, #0]
 80014a0:	88db      	ldrh	r3, [r3, #6]
 80014a2:	461a      	mov	r2, r3
 80014a4:	68fb      	ldr	r3, [r7, #12]
 80014a6:	4293      	cmp	r3, r2
 80014a8:	d3ab      	bcc.n	8001402 <LCD_Draw_Char+0x1e>
      }
    }
  }
}
 80014aa:	bf00      	nop
 80014ac:	bf00      	nop
 80014ae:	3710      	adds	r7, #16
 80014b0:	46bd      	mov	sp, r7
 80014b2:	bd80      	pop	{r7, pc}
 80014b4:	2000021c 	.word	0x2000021c
 80014b8:	aaaaaaab 	.word	0xaaaaaaab
 80014bc:	20000010 	.word	0x20000010

080014c0 <LCD_DrawMonkey>:

void LCD_DrawMonkey(uint16_t x, uint16_t y)
{
 80014c0:	b580      	push	{r7, lr}
 80014c2:	b084      	sub	sp, #16
 80014c4:	af00      	add	r7, sp, #0
 80014c6:	4603      	mov	r3, r0
 80014c8:	460a      	mov	r2, r1
 80014ca:	80fb      	strh	r3, [r7, #6]
 80014cc:	4613      	mov	r3, r2
 80014ce:	80bb      	strh	r3, [r7, #4]

	    // Head
	    LCD_Draw_Circle_Fill(x, y, 30, LCD_COLOR_BROWN);
 80014d0:	88b9      	ldrh	r1, [r7, #4]
 80014d2:	88f8      	ldrh	r0, [r7, #6]
 80014d4:	f649 3387 	movw	r3, #39815	@ 0x9b87
 80014d8:	221e      	movs	r2, #30
 80014da:	f7ff feed 	bl	80012b8 <LCD_Draw_Circle_Fill>

	    // Ears
	    LCD_Draw_Circle_Fill(x - 30, y, 10, LCD_COLOR_BROWN); // Left ear
 80014de:	88fb      	ldrh	r3, [r7, #6]
 80014e0:	3b1e      	subs	r3, #30
 80014e2:	b298      	uxth	r0, r3
 80014e4:	88b9      	ldrh	r1, [r7, #4]
 80014e6:	f649 3387 	movw	r3, #39815	@ 0x9b87
 80014ea:	220a      	movs	r2, #10
 80014ec:	f7ff fee4 	bl	80012b8 <LCD_Draw_Circle_Fill>
	    LCD_Draw_Circle_Fill(x + 30, y, 10, LCD_COLOR_BROWN); // Right ear
 80014f0:	88fb      	ldrh	r3, [r7, #6]
 80014f2:	331e      	adds	r3, #30
 80014f4:	b298      	uxth	r0, r3
 80014f6:	88b9      	ldrh	r1, [r7, #4]
 80014f8:	f649 3387 	movw	r3, #39815	@ 0x9b87
 80014fc:	220a      	movs	r2, #10
 80014fe:	f7ff fedb 	bl	80012b8 <LCD_Draw_Circle_Fill>

	    // Eyes
	    LCD_Draw_Circle_Fill(x - 10, y - 10, 2, LCD_COLOR_BLACK); // Left eye (black)
 8001502:	88fb      	ldrh	r3, [r7, #6]
 8001504:	3b0a      	subs	r3, #10
 8001506:	b298      	uxth	r0, r3
 8001508:	88bb      	ldrh	r3, [r7, #4]
 800150a:	3b0a      	subs	r3, #10
 800150c:	b299      	uxth	r1, r3
 800150e:	2300      	movs	r3, #0
 8001510:	2202      	movs	r2, #2
 8001512:	f7ff fed1 	bl	80012b8 <LCD_Draw_Circle_Fill>
	    LCD_Draw_Circle_Fill(x + 10, y - 10, 2, LCD_COLOR_BLACK); // Right eye (black)
 8001516:	88fb      	ldrh	r3, [r7, #6]
 8001518:	330a      	adds	r3, #10
 800151a:	b298      	uxth	r0, r3
 800151c:	88bb      	ldrh	r3, [r7, #4]
 800151e:	3b0a      	subs	r3, #10
 8001520:	b299      	uxth	r1, r3
 8001522:	2300      	movs	r3, #0
 8001524:	2202      	movs	r2, #2
 8001526:	f7ff fec7 	bl	80012b8 <LCD_Draw_Circle_Fill>

	    // Nose
	    LCD_Draw_Circle_Fill(x, y, 2, LCD_COLOR_BLACK); // Nose (black)
 800152a:	88b9      	ldrh	r1, [r7, #4]
 800152c:	88f8      	ldrh	r0, [r7, #6]
 800152e:	2300      	movs	r3, #0
 8001530:	2202      	movs	r2, #2
 8001532:	f7ff fec1 	bl	80012b8 <LCD_Draw_Circle_Fill>

	    // Mouth
	    for (int xx = x - 5; xx <= x + 5; xx++) {
 8001536:	88fb      	ldrh	r3, [r7, #6]
 8001538:	3b05      	subs	r3, #5
 800153a:	60fb      	str	r3, [r7, #12]
 800153c:	e00b      	b.n	8001556 <LCD_DrawMonkey+0x96>
	    	LCD_Draw_Pixel(xx, y + 10, LCD_COLOR_BLACK); // Mouth (black)
 800153e:	68fb      	ldr	r3, [r7, #12]
 8001540:	b298      	uxth	r0, r3
 8001542:	88bb      	ldrh	r3, [r7, #4]
 8001544:	330a      	adds	r3, #10
 8001546:	b29b      	uxth	r3, r3
 8001548:	2200      	movs	r2, #0
 800154a:	4619      	mov	r1, r3
 800154c:	f7ff fe96 	bl	800127c <LCD_Draw_Pixel>
	    for (int xx = x - 5; xx <= x + 5; xx++) {
 8001550:	68fb      	ldr	r3, [r7, #12]
 8001552:	3301      	adds	r3, #1
 8001554:	60fb      	str	r3, [r7, #12]
 8001556:	88fb      	ldrh	r3, [r7, #6]
 8001558:	3305      	adds	r3, #5
 800155a:	68fa      	ldr	r2, [r7, #12]
 800155c:	429a      	cmp	r2, r3
 800155e:	ddee      	ble.n	800153e <LCD_DrawMonkey+0x7e>
	    }
}
 8001560:	bf00      	nop
 8001562:	bf00      	nop
 8001564:	3710      	adds	r7, #16
 8001566:	46bd      	mov	sp, r7
 8001568:	bd80      	pop	{r7, pc}
	...

0800156c <LCD_DisplayChar>:


//This was taken and adapted from stm32's mcu code
void LCD_DisplayChar(uint16_t Xpos, uint16_t Ypos, uint8_t Ascii)
{
 800156c:	b580      	push	{r7, lr}
 800156e:	b082      	sub	sp, #8
 8001570:	af00      	add	r7, sp, #0
 8001572:	4603      	mov	r3, r0
 8001574:	80fb      	strh	r3, [r7, #6]
 8001576:	460b      	mov	r3, r1
 8001578:	80bb      	strh	r3, [r7, #4]
 800157a:	4613      	mov	r3, r2
 800157c:	70fb      	strb	r3, [r7, #3]
  Ascii -= 32;
 800157e:	78fb      	ldrb	r3, [r7, #3]
 8001580:	3b20      	subs	r3, #32
 8001582:	70fb      	strb	r3, [r7, #3]
  LCD_Draw_Char(Xpos, Ypos, &LCD_Currentfonts->table[Ascii * LCD_Currentfonts->Height]);
 8001584:	4b09      	ldr	r3, [pc, #36]	@ (80015ac <LCD_DisplayChar+0x40>)
 8001586:	681b      	ldr	r3, [r3, #0]
 8001588:	681a      	ldr	r2, [r3, #0]
 800158a:	78fb      	ldrb	r3, [r7, #3]
 800158c:	4907      	ldr	r1, [pc, #28]	@ (80015ac <LCD_DisplayChar+0x40>)
 800158e:	6809      	ldr	r1, [r1, #0]
 8001590:	88c9      	ldrh	r1, [r1, #6]
 8001592:	fb01 f303 	mul.w	r3, r1, r3
 8001596:	005b      	lsls	r3, r3, #1
 8001598:	441a      	add	r2, r3
 800159a:	88b9      	ldrh	r1, [r7, #4]
 800159c:	88fb      	ldrh	r3, [r7, #6]
 800159e:	4618      	mov	r0, r3
 80015a0:	f7ff ff20 	bl	80013e4 <LCD_Draw_Char>
}
 80015a4:	bf00      	nop
 80015a6:	3708      	adds	r7, #8
 80015a8:	46bd      	mov	sp, r7
 80015aa:	bd80      	pop	{r7, pc}
 80015ac:	2000021c 	.word	0x2000021c

080015b0 <LCD_Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void LCD_Error_Handler(void)
{
 80015b0:	b480      	push	{r7}
 80015b2:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting special-purpose register PRIMASK.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 80015b4:	b672      	cpsid	i
}
 80015b6:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 80015b8:	bf00      	nop
 80015ba:	e7fd      	b.n	80015b8 <LCD_Error_Handler+0x8>

080015bc <InitializeLCDTouch>:
// Touch Functionality   //

#if COMPILE_TOUCH_FUNCTIONS == 1

void InitializeLCDTouch(void)
{
 80015bc:	b580      	push	{r7, lr}
 80015be:	af00      	add	r7, sp, #0
  if(STMPE811_Init() != STMPE811_State_Ok)
 80015c0:	f001 f9b4 	bl	800292c <STMPE811_Init>
 80015c4:	4603      	mov	r3, r0
 80015c6:	2b02      	cmp	r3, #2
 80015c8:	d001      	beq.n	80015ce <InitializeLCDTouch+0x12>
  {
	 for(;;); // Hang code due to error in initialzation
 80015ca:	bf00      	nop
 80015cc:	e7fd      	b.n	80015ca <InitializeLCDTouch+0xe>
  }
}
 80015ce:	bf00      	nop
 80015d0:	bd80      	pop	{r7, pc}

080015d2 <DetermineTouchPosition>:
{
	return STMPE811_ReadTouch(touchStruct);
}

void DetermineTouchPosition(STMPE811_TouchData * touchStruct)
{
 80015d2:	b580      	push	{r7, lr}
 80015d4:	b082      	sub	sp, #8
 80015d6:	af00      	add	r7, sp, #0
 80015d8:	6078      	str	r0, [r7, #4]
	STMPE811_DetermineTouchPosition(touchStruct);
 80015da:	6878      	ldr	r0, [r7, #4]
 80015dc:	f001 fa90 	bl	8002b00 <STMPE811_DetermineTouchPosition>
}
 80015e0:	bf00      	nop
 80015e2:	3708      	adds	r7, #8
 80015e4:	46bd      	mov	sp, r7
 80015e6:	bd80      	pop	{r7, pc}

080015e8 <ReadRegisterFromTouchModule>:

uint8_t ReadRegisterFromTouchModule(uint8_t RegToRead)
{
 80015e8:	b580      	push	{r7, lr}
 80015ea:	b082      	sub	sp, #8
 80015ec:	af00      	add	r7, sp, #0
 80015ee:	4603      	mov	r3, r0
 80015f0:	71fb      	strb	r3, [r7, #7]
	return STMPE811_Read(RegToRead);
 80015f2:	79fb      	ldrb	r3, [r7, #7]
 80015f4:	4618      	mov	r0, r3
 80015f6:	f001 fa60 	bl	8002aba <STMPE811_Read>
 80015fa:	4603      	mov	r3, r0
}
 80015fc:	4618      	mov	r0, r3
 80015fe:	3708      	adds	r7, #8
 8001600:	46bd      	mov	sp, r7
 8001602:	bd80      	pop	{r7, pc}

08001604 <WriteDataToTouchModule>:

void WriteDataToTouchModule(uint8_t RegToWrite, uint8_t writeData)
{
 8001604:	b580      	push	{r7, lr}
 8001606:	b082      	sub	sp, #8
 8001608:	af00      	add	r7, sp, #0
 800160a:	4603      	mov	r3, r0
 800160c:	460a      	mov	r2, r1
 800160e:	71fb      	strb	r3, [r7, #7]
 8001610:	4613      	mov	r3, r2
 8001612:	71bb      	strb	r3, [r7, #6]
	STMPE811_Write(RegToWrite, writeData);
 8001614:	79ba      	ldrb	r2, [r7, #6]
 8001616:	79fb      	ldrb	r3, [r7, #7]
 8001618:	4611      	mov	r1, r2
 800161a:	4618      	mov	r0, r3
 800161c:	f001 fa5e 	bl	8002adc <STMPE811_Write>
}
 8001620:	bf00      	nop
 8001622:	3708      	adds	r7, #8
 8001624:	46bd      	mov	sp, r7
 8001626:	bd80      	pop	{r7, pc}

08001628 <ili9341_Init>:
  * @brief  Power on the LCD.
  * @param  None
  * @retval None
  */
void ili9341_Init(void)
{
 8001628:	b580      	push	{r7, lr}
 800162a:	af00      	add	r7, sp, #0
  /* Initialize ILI9341 low level bus layer ----------------------------------*/
  LCD_IO_Init();
 800162c:	f000 f9fe 	bl	8001a2c <LCD_IO_Init>

  /* Configure LCD */
  ili9341_Write_Reg(0xCA);
 8001630:	20ca      	movs	r0, #202	@ 0xca
 8001632:	f000 f943 	bl	80018bc <ili9341_Write_Reg>
  ili9341_Send_Data(0xC3);				//param 1
 8001636:	20c3      	movs	r0, #195	@ 0xc3
 8001638:	f000 f94d 	bl	80018d6 <ili9341_Send_Data>
  ili9341_Send_Data(0x08);				//param 2
 800163c:	2008      	movs	r0, #8
 800163e:	f000 f94a 	bl	80018d6 <ili9341_Send_Data>
  ili9341_Send_Data(0x50);				//param 3
 8001642:	2050      	movs	r0, #80	@ 0x50
 8001644:	f000 f947 	bl	80018d6 <ili9341_Send_Data>
  ili9341_Write_Reg(LCD_POWERB); //CF
 8001648:	20cf      	movs	r0, #207	@ 0xcf
 800164a:	f000 f937 	bl	80018bc <ili9341_Write_Reg>
  ili9341_Send_Data(0x00);				//param 1
 800164e:	2000      	movs	r0, #0
 8001650:	f000 f941 	bl	80018d6 <ili9341_Send_Data>
  ili9341_Send_Data(0xC1);				//param 2
 8001654:	20c1      	movs	r0, #193	@ 0xc1
 8001656:	f000 f93e 	bl	80018d6 <ili9341_Send_Data>
  ili9341_Send_Data(0x30);				//param 3
 800165a:	2030      	movs	r0, #48	@ 0x30
 800165c:	f000 f93b 	bl	80018d6 <ili9341_Send_Data>
  ili9341_Write_Reg(LCD_POWER_SEQ); //ED
 8001660:	20ed      	movs	r0, #237	@ 0xed
 8001662:	f000 f92b 	bl	80018bc <ili9341_Write_Reg>
  ili9341_Send_Data(0x64);
 8001666:	2064      	movs	r0, #100	@ 0x64
 8001668:	f000 f935 	bl	80018d6 <ili9341_Send_Data>
  ili9341_Send_Data(0x03);
 800166c:	2003      	movs	r0, #3
 800166e:	f000 f932 	bl	80018d6 <ili9341_Send_Data>
  ili9341_Send_Data(0x12);
 8001672:	2012      	movs	r0, #18
 8001674:	f000 f92f 	bl	80018d6 <ili9341_Send_Data>
  ili9341_Send_Data(0x81);
 8001678:	2081      	movs	r0, #129	@ 0x81
 800167a:	f000 f92c 	bl	80018d6 <ili9341_Send_Data>
  ili9341_Write_Reg(LCD_DTCA);
 800167e:	20e8      	movs	r0, #232	@ 0xe8
 8001680:	f000 f91c 	bl	80018bc <ili9341_Write_Reg>
  ili9341_Send_Data(0x85);
 8001684:	2085      	movs	r0, #133	@ 0x85
 8001686:	f000 f926 	bl	80018d6 <ili9341_Send_Data>
  ili9341_Send_Data(0x00);
 800168a:	2000      	movs	r0, #0
 800168c:	f000 f923 	bl	80018d6 <ili9341_Send_Data>
  ili9341_Send_Data(0x78);
 8001690:	2078      	movs	r0, #120	@ 0x78
 8001692:	f000 f920 	bl	80018d6 <ili9341_Send_Data>
  ili9341_Write_Reg(LCD_POWERA);
 8001696:	20cb      	movs	r0, #203	@ 0xcb
 8001698:	f000 f910 	bl	80018bc <ili9341_Write_Reg>
  ili9341_Send_Data(0x39);
 800169c:	2039      	movs	r0, #57	@ 0x39
 800169e:	f000 f91a 	bl	80018d6 <ili9341_Send_Data>
  ili9341_Send_Data(0x2C);
 80016a2:	202c      	movs	r0, #44	@ 0x2c
 80016a4:	f000 f917 	bl	80018d6 <ili9341_Send_Data>
  ili9341_Send_Data(0x00);
 80016a8:	2000      	movs	r0, #0
 80016aa:	f000 f914 	bl	80018d6 <ili9341_Send_Data>
  ili9341_Send_Data(0x34);
 80016ae:	2034      	movs	r0, #52	@ 0x34
 80016b0:	f000 f911 	bl	80018d6 <ili9341_Send_Data>
  ili9341_Send_Data(0x02);
 80016b4:	2002      	movs	r0, #2
 80016b6:	f000 f90e 	bl	80018d6 <ili9341_Send_Data>
  ili9341_Write_Reg(LCD_PRC);
 80016ba:	20f7      	movs	r0, #247	@ 0xf7
 80016bc:	f000 f8fe 	bl	80018bc <ili9341_Write_Reg>
  ili9341_Send_Data(0x20);
 80016c0:	2020      	movs	r0, #32
 80016c2:	f000 f908 	bl	80018d6 <ili9341_Send_Data>
  ili9341_Write_Reg(LCD_DTCB);
 80016c6:	20ea      	movs	r0, #234	@ 0xea
 80016c8:	f000 f8f8 	bl	80018bc <ili9341_Write_Reg>
  ili9341_Send_Data(0x00);
 80016cc:	2000      	movs	r0, #0
 80016ce:	f000 f902 	bl	80018d6 <ili9341_Send_Data>
  ili9341_Send_Data(0x00);
 80016d2:	2000      	movs	r0, #0
 80016d4:	f000 f8ff 	bl	80018d6 <ili9341_Send_Data>
  ili9341_Write_Reg(LCD_FRMCTR1);
 80016d8:	20b1      	movs	r0, #177	@ 0xb1
 80016da:	f000 f8ef 	bl	80018bc <ili9341_Write_Reg>
  ili9341_Send_Data(0x00);
 80016de:	2000      	movs	r0, #0
 80016e0:	f000 f8f9 	bl	80018d6 <ili9341_Send_Data>
  ili9341_Send_Data(0x1B);
 80016e4:	201b      	movs	r0, #27
 80016e6:	f000 f8f6 	bl	80018d6 <ili9341_Send_Data>
  ili9341_Write_Reg(LCD_DFC);
 80016ea:	20b6      	movs	r0, #182	@ 0xb6
 80016ec:	f000 f8e6 	bl	80018bc <ili9341_Write_Reg>
  ili9341_Send_Data(0x0A);
 80016f0:	200a      	movs	r0, #10
 80016f2:	f000 f8f0 	bl	80018d6 <ili9341_Send_Data>
  ili9341_Send_Data(0xA2);
 80016f6:	20a2      	movs	r0, #162	@ 0xa2
 80016f8:	f000 f8ed 	bl	80018d6 <ili9341_Send_Data>
  ili9341_Write_Reg(LCD_POWER1);
 80016fc:	20c0      	movs	r0, #192	@ 0xc0
 80016fe:	f000 f8dd 	bl	80018bc <ili9341_Write_Reg>
  ili9341_Send_Data(0x10);
 8001702:	2010      	movs	r0, #16
 8001704:	f000 f8e7 	bl	80018d6 <ili9341_Send_Data>
  ili9341_Write_Reg(LCD_POWER2);
 8001708:	20c1      	movs	r0, #193	@ 0xc1
 800170a:	f000 f8d7 	bl	80018bc <ili9341_Write_Reg>
  ili9341_Send_Data(0x10);
 800170e:	2010      	movs	r0, #16
 8001710:	f000 f8e1 	bl	80018d6 <ili9341_Send_Data>
  ili9341_Write_Reg(LCD_VCOM1);
 8001714:	20c5      	movs	r0, #197	@ 0xc5
 8001716:	f000 f8d1 	bl	80018bc <ili9341_Write_Reg>
  ili9341_Send_Data(0x45);
 800171a:	2045      	movs	r0, #69	@ 0x45
 800171c:	f000 f8db 	bl	80018d6 <ili9341_Send_Data>
  ili9341_Send_Data(0x15);
 8001720:	2015      	movs	r0, #21
 8001722:	f000 f8d8 	bl	80018d6 <ili9341_Send_Data>
  ili9341_Write_Reg(LCD_VCOM2);
 8001726:	20c7      	movs	r0, #199	@ 0xc7
 8001728:	f000 f8c8 	bl	80018bc <ili9341_Write_Reg>
  ili9341_Send_Data(0x90);
 800172c:	2090      	movs	r0, #144	@ 0x90
 800172e:	f000 f8d2 	bl	80018d6 <ili9341_Send_Data>
  ili9341_Write_Reg(LCD_MAC);
 8001732:	2036      	movs	r0, #54	@ 0x36
 8001734:	f000 f8c2 	bl	80018bc <ili9341_Write_Reg>
  ili9341_Send_Data(0xC8);
 8001738:	20c8      	movs	r0, #200	@ 0xc8
 800173a:	f000 f8cc 	bl	80018d6 <ili9341_Send_Data>
  ili9341_Write_Reg(LCD_3GAMMA_EN);
 800173e:	20f2      	movs	r0, #242	@ 0xf2
 8001740:	f000 f8bc 	bl	80018bc <ili9341_Write_Reg>
  ili9341_Send_Data(0x00);
 8001744:	2000      	movs	r0, #0
 8001746:	f000 f8c6 	bl	80018d6 <ili9341_Send_Data>
  ili9341_Write_Reg(LCD_RGB_INTERFACE);
 800174a:	20b0      	movs	r0, #176	@ 0xb0
 800174c:	f000 f8b6 	bl	80018bc <ili9341_Write_Reg>
  ili9341_Send_Data(0xC2);
 8001750:	20c2      	movs	r0, #194	@ 0xc2
 8001752:	f000 f8c0 	bl	80018d6 <ili9341_Send_Data>
  ili9341_Write_Reg(LCD_DFC);
 8001756:	20b6      	movs	r0, #182	@ 0xb6
 8001758:	f000 f8b0 	bl	80018bc <ili9341_Write_Reg>
  ili9341_Send_Data(0x0A);
 800175c:	200a      	movs	r0, #10
 800175e:	f000 f8ba 	bl	80018d6 <ili9341_Send_Data>
  ili9341_Send_Data(0xA7);
 8001762:	20a7      	movs	r0, #167	@ 0xa7
 8001764:	f000 f8b7 	bl	80018d6 <ili9341_Send_Data>
  ili9341_Send_Data(0x27);
 8001768:	2027      	movs	r0, #39	@ 0x27
 800176a:	f000 f8b4 	bl	80018d6 <ili9341_Send_Data>
  ili9341_Send_Data(0x04);
 800176e:	2004      	movs	r0, #4
 8001770:	f000 f8b1 	bl	80018d6 <ili9341_Send_Data>

  /* Colomn address set */
  ili9341_Write_Reg(LCD_COLUMN_ADDR);
 8001774:	202a      	movs	r0, #42	@ 0x2a
 8001776:	f000 f8a1 	bl	80018bc <ili9341_Write_Reg>
  ili9341_Send_Data(0x00);
 800177a:	2000      	movs	r0, #0
 800177c:	f000 f8ab 	bl	80018d6 <ili9341_Send_Data>
  ili9341_Send_Data(0x00);
 8001780:	2000      	movs	r0, #0
 8001782:	f000 f8a8 	bl	80018d6 <ili9341_Send_Data>
  ili9341_Send_Data(0x00);
 8001786:	2000      	movs	r0, #0
 8001788:	f000 f8a5 	bl	80018d6 <ili9341_Send_Data>
  ili9341_Send_Data(0xEF);
 800178c:	20ef      	movs	r0, #239	@ 0xef
 800178e:	f000 f8a2 	bl	80018d6 <ili9341_Send_Data>

  /* Page address set */
  ili9341_Write_Reg(LCD_PAGE_ADDR);
 8001792:	202b      	movs	r0, #43	@ 0x2b
 8001794:	f000 f892 	bl	80018bc <ili9341_Write_Reg>
  ili9341_Send_Data(0x00);
 8001798:	2000      	movs	r0, #0
 800179a:	f000 f89c 	bl	80018d6 <ili9341_Send_Data>
  ili9341_Send_Data(0x00);
 800179e:	2000      	movs	r0, #0
 80017a0:	f000 f899 	bl	80018d6 <ili9341_Send_Data>
  ili9341_Send_Data(0x01);
 80017a4:	2001      	movs	r0, #1
 80017a6:	f000 f896 	bl	80018d6 <ili9341_Send_Data>
  ili9341_Send_Data(0x3F);
 80017aa:	203f      	movs	r0, #63	@ 0x3f
 80017ac:	f000 f893 	bl	80018d6 <ili9341_Send_Data>
  ili9341_Write_Reg(LCD_INTERFACE);
 80017b0:	20f6      	movs	r0, #246	@ 0xf6
 80017b2:	f000 f883 	bl	80018bc <ili9341_Write_Reg>
  ili9341_Send_Data(0x01);
 80017b6:	2001      	movs	r0, #1
 80017b8:	f000 f88d 	bl	80018d6 <ili9341_Send_Data>
  ili9341_Send_Data(0x00);
 80017bc:	2000      	movs	r0, #0
 80017be:	f000 f88a 	bl	80018d6 <ili9341_Send_Data>
  ili9341_Send_Data(0x06);
 80017c2:	2006      	movs	r0, #6
 80017c4:	f000 f887 	bl	80018d6 <ili9341_Send_Data>

  ili9341_Write_Reg(LCD_GRAM);
 80017c8:	202c      	movs	r0, #44	@ 0x2c
 80017ca:	f000 f877 	bl	80018bc <ili9341_Write_Reg>
  LCD_Delay(200);
 80017ce:	20c8      	movs	r0, #200	@ 0xc8
 80017d0:	f000 f9e8 	bl	8001ba4 <LCD_Delay>

  ili9341_Write_Reg(LCD_GAMMA);
 80017d4:	2026      	movs	r0, #38	@ 0x26
 80017d6:	f000 f871 	bl	80018bc <ili9341_Write_Reg>
  ili9341_Send_Data(0x01);
 80017da:	2001      	movs	r0, #1
 80017dc:	f000 f87b 	bl	80018d6 <ili9341_Send_Data>

  ili9341_Write_Reg(LCD_PGAMMA);
 80017e0:	20e0      	movs	r0, #224	@ 0xe0
 80017e2:	f000 f86b 	bl	80018bc <ili9341_Write_Reg>
  ili9341_Send_Data(0x0F);
 80017e6:	200f      	movs	r0, #15
 80017e8:	f000 f875 	bl	80018d6 <ili9341_Send_Data>
  ili9341_Send_Data(0x29);
 80017ec:	2029      	movs	r0, #41	@ 0x29
 80017ee:	f000 f872 	bl	80018d6 <ili9341_Send_Data>
  ili9341_Send_Data(0x24);
 80017f2:	2024      	movs	r0, #36	@ 0x24
 80017f4:	f000 f86f 	bl	80018d6 <ili9341_Send_Data>
  ili9341_Send_Data(0x0C);
 80017f8:	200c      	movs	r0, #12
 80017fa:	f000 f86c 	bl	80018d6 <ili9341_Send_Data>
  ili9341_Send_Data(0x0E);
 80017fe:	200e      	movs	r0, #14
 8001800:	f000 f869 	bl	80018d6 <ili9341_Send_Data>
  ili9341_Send_Data(0x09);
 8001804:	2009      	movs	r0, #9
 8001806:	f000 f866 	bl	80018d6 <ili9341_Send_Data>
  ili9341_Send_Data(0x4E);
 800180a:	204e      	movs	r0, #78	@ 0x4e
 800180c:	f000 f863 	bl	80018d6 <ili9341_Send_Data>
  ili9341_Send_Data(0x78);
 8001810:	2078      	movs	r0, #120	@ 0x78
 8001812:	f000 f860 	bl	80018d6 <ili9341_Send_Data>
  ili9341_Send_Data(0x3C);
 8001816:	203c      	movs	r0, #60	@ 0x3c
 8001818:	f000 f85d 	bl	80018d6 <ili9341_Send_Data>
  ili9341_Send_Data(0x09);
 800181c:	2009      	movs	r0, #9
 800181e:	f000 f85a 	bl	80018d6 <ili9341_Send_Data>
  ili9341_Send_Data(0x13);
 8001822:	2013      	movs	r0, #19
 8001824:	f000 f857 	bl	80018d6 <ili9341_Send_Data>
  ili9341_Send_Data(0x05);
 8001828:	2005      	movs	r0, #5
 800182a:	f000 f854 	bl	80018d6 <ili9341_Send_Data>
  ili9341_Send_Data(0x17);
 800182e:	2017      	movs	r0, #23
 8001830:	f000 f851 	bl	80018d6 <ili9341_Send_Data>
  ili9341_Send_Data(0x11);
 8001834:	2011      	movs	r0, #17
 8001836:	f000 f84e 	bl	80018d6 <ili9341_Send_Data>
  ili9341_Send_Data(0x00);
 800183a:	2000      	movs	r0, #0
 800183c:	f000 f84b 	bl	80018d6 <ili9341_Send_Data>
  ili9341_Write_Reg(LCD_NGAMMA);
 8001840:	20e1      	movs	r0, #225	@ 0xe1
 8001842:	f000 f83b 	bl	80018bc <ili9341_Write_Reg>
  ili9341_Send_Data(0x00);
 8001846:	2000      	movs	r0, #0
 8001848:	f000 f845 	bl	80018d6 <ili9341_Send_Data>
  ili9341_Send_Data(0x16);
 800184c:	2016      	movs	r0, #22
 800184e:	f000 f842 	bl	80018d6 <ili9341_Send_Data>
  ili9341_Send_Data(0x1B);
 8001852:	201b      	movs	r0, #27
 8001854:	f000 f83f 	bl	80018d6 <ili9341_Send_Data>
  ili9341_Send_Data(0x04);
 8001858:	2004      	movs	r0, #4
 800185a:	f000 f83c 	bl	80018d6 <ili9341_Send_Data>
  ili9341_Send_Data(0x11);
 800185e:	2011      	movs	r0, #17
 8001860:	f000 f839 	bl	80018d6 <ili9341_Send_Data>
  ili9341_Send_Data(0x07);
 8001864:	2007      	movs	r0, #7
 8001866:	f000 f836 	bl	80018d6 <ili9341_Send_Data>
  ili9341_Send_Data(0x31);
 800186a:	2031      	movs	r0, #49	@ 0x31
 800186c:	f000 f833 	bl	80018d6 <ili9341_Send_Data>
  ili9341_Send_Data(0x33);
 8001870:	2033      	movs	r0, #51	@ 0x33
 8001872:	f000 f830 	bl	80018d6 <ili9341_Send_Data>
  ili9341_Send_Data(0x42);
 8001876:	2042      	movs	r0, #66	@ 0x42
 8001878:	f000 f82d 	bl	80018d6 <ili9341_Send_Data>
  ili9341_Send_Data(0x05);
 800187c:	2005      	movs	r0, #5
 800187e:	f000 f82a 	bl	80018d6 <ili9341_Send_Data>
  ili9341_Send_Data(0x0C);
 8001882:	200c      	movs	r0, #12
 8001884:	f000 f827 	bl	80018d6 <ili9341_Send_Data>
  ili9341_Send_Data(0x0A);
 8001888:	200a      	movs	r0, #10
 800188a:	f000 f824 	bl	80018d6 <ili9341_Send_Data>
  ili9341_Send_Data(0x28);
 800188e:	2028      	movs	r0, #40	@ 0x28
 8001890:	f000 f821 	bl	80018d6 <ili9341_Send_Data>
  ili9341_Send_Data(0x2F);
 8001894:	202f      	movs	r0, #47	@ 0x2f
 8001896:	f000 f81e 	bl	80018d6 <ili9341_Send_Data>
  ili9341_Send_Data(0x0F);
 800189a:	200f      	movs	r0, #15
 800189c:	f000 f81b 	bl	80018d6 <ili9341_Send_Data>

  ili9341_Write_Reg(LCD_SLEEP_OUT);
 80018a0:	2011      	movs	r0, #17
 80018a2:	f000 f80b 	bl	80018bc <ili9341_Write_Reg>
  LCD_Delay(200);
 80018a6:	20c8      	movs	r0, #200	@ 0xc8
 80018a8:	f000 f97c 	bl	8001ba4 <LCD_Delay>
  ili9341_Write_Reg(LCD_DISPLAY_ON);
 80018ac:	2029      	movs	r0, #41	@ 0x29
 80018ae:	f000 f805 	bl	80018bc <ili9341_Write_Reg>
  /* GRAM start writing */
  ili9341_Write_Reg(LCD_GRAM);
 80018b2:	202c      	movs	r0, #44	@ 0x2c
 80018b4:	f000 f802 	bl	80018bc <ili9341_Write_Reg>
}
 80018b8:	bf00      	nop
 80018ba:	bd80      	pop	{r7, pc}

080018bc <ili9341_Write_Reg>:
  * @brief  Writes  to the selected LCD register.
  * @param  LCD_Reg: address of the selected register.
  * @retval None
  */
void ili9341_Write_Reg(uint8_t LCD_Reg)
{
 80018bc:	b580      	push	{r7, lr}
 80018be:	b082      	sub	sp, #8
 80018c0:	af00      	add	r7, sp, #0
 80018c2:	4603      	mov	r3, r0
 80018c4:	71fb      	strb	r3, [r7, #7]
  LCD_IO_WriteReg(LCD_Reg);
 80018c6:	79fb      	ldrb	r3, [r7, #7]
 80018c8:	4618      	mov	r0, r3
 80018ca:	f000 f949 	bl	8001b60 <LCD_IO_WriteReg>
}
 80018ce:	bf00      	nop
 80018d0:	3708      	adds	r7, #8
 80018d2:	46bd      	mov	sp, r7
 80018d4:	bd80      	pop	{r7, pc}

080018d6 <ili9341_Send_Data>:
  * @brief  Writes data to the selected LCD register.
  * @param  LCD_Reg: address of the selected register.
  * @retval None
  */
void ili9341_Send_Data(uint16_t RegValue)
{
 80018d6:	b580      	push	{r7, lr}
 80018d8:	b082      	sub	sp, #8
 80018da:	af00      	add	r7, sp, #0
 80018dc:	4603      	mov	r3, r0
 80018de:	80fb      	strh	r3, [r7, #6]
  LCD_IO_WriteData(RegValue);
 80018e0:	88fb      	ldrh	r3, [r7, #6]
 80018e2:	4618      	mov	r0, r3
 80018e4:	f000 f91a 	bl	8001b1c <LCD_IO_WriteData>
}
 80018e8:	bf00      	nop
 80018ea:	3708      	adds	r7, #8
 80018ec:	46bd      	mov	sp, r7
 80018ee:	bd80      	pop	{r7, pc}

080018f0 <SPI_Init>:

/**
  * @brief  SPI Bus initialization
  */
static void SPI_Init(void)
{
 80018f0:	b580      	push	{r7, lr}
 80018f2:	af00      	add	r7, sp, #0
  if(HAL_SPI_GetState(&SpiHandle) == HAL_SPI_STATE_RESET)
 80018f4:	4819      	ldr	r0, [pc, #100]	@ (800195c <SPI_Init+0x6c>)
 80018f6:	f004 fd5b 	bl	80063b0 <HAL_SPI_GetState>
 80018fa:	4603      	mov	r3, r0
 80018fc:	2b00      	cmp	r3, #0
 80018fe:	d12b      	bne.n	8001958 <SPI_Init+0x68>
  {
    /* SPI configuration -----------------------------------------------------*/
    SpiHandle.Instance = DISCOVERY_SPI;
 8001900:	4b16      	ldr	r3, [pc, #88]	@ (800195c <SPI_Init+0x6c>)
 8001902:	4a17      	ldr	r2, [pc, #92]	@ (8001960 <SPI_Init+0x70>)
 8001904:	601a      	str	r2, [r3, #0]
       to verify these constraints:
       - ILI9341 LCD SPI interface max baudrate is 10MHz for write and 6.66MHz for read
       - l3gd20 SPI interface max baudrate is 10MHz for write/read
       - PCLK2 frequency is set to 90 MHz
    */
    SpiHandle.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_16;
 8001906:	4b15      	ldr	r3, [pc, #84]	@ (800195c <SPI_Init+0x6c>)
 8001908:	2218      	movs	r2, #24
 800190a:	61da      	str	r2, [r3, #28]

    /* On STM32F429I-Discovery, LCD ID cannot be read then keep a common configuration */
    /* for LCD and GYRO (SPI_DIRECTION_2LINES) */
    /* Note: To read a register a LCD, SPI_DIRECTION_1LINE should be set */
    SpiHandle.Init.Direction      = SPI_DIRECTION_2LINES;
 800190c:	4b13      	ldr	r3, [pc, #76]	@ (800195c <SPI_Init+0x6c>)
 800190e:	2200      	movs	r2, #0
 8001910:	609a      	str	r2, [r3, #8]
    SpiHandle.Init.CLKPhase       = SPI_PHASE_1EDGE;
 8001912:	4b12      	ldr	r3, [pc, #72]	@ (800195c <SPI_Init+0x6c>)
 8001914:	2200      	movs	r2, #0
 8001916:	615a      	str	r2, [r3, #20]
    SpiHandle.Init.CLKPolarity    = SPI_POLARITY_LOW;
 8001918:	4b10      	ldr	r3, [pc, #64]	@ (800195c <SPI_Init+0x6c>)
 800191a:	2200      	movs	r2, #0
 800191c:	611a      	str	r2, [r3, #16]
    SpiHandle.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLED;
 800191e:	4b0f      	ldr	r3, [pc, #60]	@ (800195c <SPI_Init+0x6c>)
 8001920:	2200      	movs	r2, #0
 8001922:	629a      	str	r2, [r3, #40]	@ 0x28
    SpiHandle.Init.CRCPolynomial  = 7;
 8001924:	4b0d      	ldr	r3, [pc, #52]	@ (800195c <SPI_Init+0x6c>)
 8001926:	2207      	movs	r2, #7
 8001928:	62da      	str	r2, [r3, #44]	@ 0x2c
    SpiHandle.Init.DataSize       = SPI_DATASIZE_8BIT;
 800192a:	4b0c      	ldr	r3, [pc, #48]	@ (800195c <SPI_Init+0x6c>)
 800192c:	2200      	movs	r2, #0
 800192e:	60da      	str	r2, [r3, #12]
    SpiHandle.Init.FirstBit       = SPI_FIRSTBIT_MSB;
 8001930:	4b0a      	ldr	r3, [pc, #40]	@ (800195c <SPI_Init+0x6c>)
 8001932:	2200      	movs	r2, #0
 8001934:	621a      	str	r2, [r3, #32]
    SpiHandle.Init.NSS            = SPI_NSS_SOFT;
 8001936:	4b09      	ldr	r3, [pc, #36]	@ (800195c <SPI_Init+0x6c>)
 8001938:	f44f 7200 	mov.w	r2, #512	@ 0x200
 800193c:	619a      	str	r2, [r3, #24]
    SpiHandle.Init.TIMode         = SPI_TIMODE_DISABLED;
 800193e:	4b07      	ldr	r3, [pc, #28]	@ (800195c <SPI_Init+0x6c>)
 8001940:	2200      	movs	r2, #0
 8001942:	625a      	str	r2, [r3, #36]	@ 0x24
    SpiHandle.Init.Mode           = SPI_MODE_MASTER;
 8001944:	4b05      	ldr	r3, [pc, #20]	@ (800195c <SPI_Init+0x6c>)
 8001946:	f44f 7282 	mov.w	r2, #260	@ 0x104
 800194a:	605a      	str	r2, [r3, #4]

    SPI_MspInit(&SpiHandle);
 800194c:	4803      	ldr	r0, [pc, #12]	@ (800195c <SPI_Init+0x6c>)
 800194e:	f000 f833 	bl	80019b8 <SPI_MspInit>
    HAL_SPI_Init(&SpiHandle);
 8001952:	4802      	ldr	r0, [pc, #8]	@ (800195c <SPI_Init+0x6c>)
 8001954:	f004 fb37 	bl	8005fc6 <HAL_SPI_Init>
  }
}
 8001958:	bf00      	nop
 800195a:	bd80      	pop	{r7, pc}
 800195c:	20025a20 	.word	0x20025a20
 8001960:	40015000 	.word	0x40015000

08001964 <SPI_Write>:
/**
  * @brief  Writes a byte to device.
  * @param  Value: value to be written
  */
static void SPI_Write(uint16_t Value)
{
 8001964:	b580      	push	{r7, lr}
 8001966:	b084      	sub	sp, #16
 8001968:	af00      	add	r7, sp, #0
 800196a:	4603      	mov	r3, r0
 800196c:	80fb      	strh	r3, [r7, #6]
  HAL_StatusTypeDef status = HAL_OK;
 800196e:	2300      	movs	r3, #0
 8001970:	73fb      	strb	r3, [r7, #15]

  status = HAL_SPI_Transmit(&SpiHandle, (uint8_t*) &Value, 1, SpiTimeout);
 8001972:	4b09      	ldr	r3, [pc, #36]	@ (8001998 <SPI_Write+0x34>)
 8001974:	681b      	ldr	r3, [r3, #0]
 8001976:	1db9      	adds	r1, r7, #6
 8001978:	2201      	movs	r2, #1
 800197a:	4808      	ldr	r0, [pc, #32]	@ (800199c <SPI_Write+0x38>)
 800197c:	f004 fbd4 	bl	8006128 <HAL_SPI_Transmit>
 8001980:	4603      	mov	r3, r0
 8001982:	73fb      	strb	r3, [r7, #15]

  /* Check the communication status */
  if(status != HAL_OK)
 8001984:	7bfb      	ldrb	r3, [r7, #15]
 8001986:	2b00      	cmp	r3, #0
 8001988:	d001      	beq.n	800198e <SPI_Write+0x2a>
  {
    /* Re-Initialize the BUS */
    SPI_Error();
 800198a:	f000 f809 	bl	80019a0 <SPI_Error>
  }
}
 800198e:	bf00      	nop
 8001990:	3710      	adds	r7, #16
 8001992:	46bd      	mov	sp, r7
 8001994:	bd80      	pop	{r7, pc}
 8001996:	bf00      	nop
 8001998:	2000001c 	.word	0x2000001c
 800199c:	20025a20 	.word	0x20025a20

080019a0 <SPI_Error>:

/**
  * @brief  SPI error treatment function.
  */
static void SPI_Error(void)
{
 80019a0:	b580      	push	{r7, lr}
 80019a2:	af00      	add	r7, sp, #0
  /* De-initialize the SPI communication BUS */
  HAL_SPI_DeInit(&SpiHandle);
 80019a4:	4803      	ldr	r0, [pc, #12]	@ (80019b4 <SPI_Error+0x14>)
 80019a6:	f004 fb97 	bl	80060d8 <HAL_SPI_DeInit>

  /* Re- Initialize the SPI communication BUS */
  SPI_Init();
 80019aa:	f7ff ffa1 	bl	80018f0 <SPI_Init>
}
 80019ae:	bf00      	nop
 80019b0:	bd80      	pop	{r7, pc}
 80019b2:	bf00      	nop
 80019b4:	20025a20 	.word	0x20025a20

080019b8 <SPI_MspInit>:
/**
  * @brief  SPI MSP Init.
  * @param  hspi: SPI handle
  */
static void SPI_MspInit(SPI_HandleTypeDef *hspi)
{
 80019b8:	b580      	push	{r7, lr}
 80019ba:	b08a      	sub	sp, #40	@ 0x28
 80019bc:	af00      	add	r7, sp, #0
 80019be:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef   GPIO_InitStructure;

  /* Enable SPI clock */
  DISCOVERY_SPI_CLK_ENABLE();
 80019c0:	2300      	movs	r3, #0
 80019c2:	613b      	str	r3, [r7, #16]
 80019c4:	4b17      	ldr	r3, [pc, #92]	@ (8001a24 <SPI_MspInit+0x6c>)
 80019c6:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80019c8:	4a16      	ldr	r2, [pc, #88]	@ (8001a24 <SPI_MspInit+0x6c>)
 80019ca:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 80019ce:	6453      	str	r3, [r2, #68]	@ 0x44
 80019d0:	4b14      	ldr	r3, [pc, #80]	@ (8001a24 <SPI_MspInit+0x6c>)
 80019d2:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80019d4:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 80019d8:	613b      	str	r3, [r7, #16]
 80019da:	693b      	ldr	r3, [r7, #16]

  /* Enable DISCOVERY_SPI GPIO clock */
  DISCOVERY_SPI_GPIO_CLK_ENABLE();
 80019dc:	2300      	movs	r3, #0
 80019de:	60fb      	str	r3, [r7, #12]
 80019e0:	4b10      	ldr	r3, [pc, #64]	@ (8001a24 <SPI_MspInit+0x6c>)
 80019e2:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80019e4:	4a0f      	ldr	r2, [pc, #60]	@ (8001a24 <SPI_MspInit+0x6c>)
 80019e6:	f043 0320 	orr.w	r3, r3, #32
 80019ea:	6313      	str	r3, [r2, #48]	@ 0x30
 80019ec:	4b0d      	ldr	r3, [pc, #52]	@ (8001a24 <SPI_MspInit+0x6c>)
 80019ee:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80019f0:	f003 0320 	and.w	r3, r3, #32
 80019f4:	60fb      	str	r3, [r7, #12]
 80019f6:	68fb      	ldr	r3, [r7, #12]

  /* configure SPI SCK, MOSI and MISO */
  GPIO_InitStructure.Pin    = (DISCOVERY_SPI_SCK_PIN | DISCOVERY_SPI_MOSI_PIN | DISCOVERY_SPI_MISO_PIN);
 80019f8:	f44f 7360 	mov.w	r3, #896	@ 0x380
 80019fc:	617b      	str	r3, [r7, #20]
  GPIO_InitStructure.Mode   = GPIO_MODE_AF_PP;
 80019fe:	2302      	movs	r3, #2
 8001a00:	61bb      	str	r3, [r7, #24]
  GPIO_InitStructure.Pull   = GPIO_PULLDOWN;
 8001a02:	2302      	movs	r3, #2
 8001a04:	61fb      	str	r3, [r7, #28]
  GPIO_InitStructure.Speed  = GPIO_SPEED_MEDIUM;
 8001a06:	2301      	movs	r3, #1
 8001a08:	623b      	str	r3, [r7, #32]
  GPIO_InitStructure.Alternate = DISCOVERY_SPI_AF;
 8001a0a:	2305      	movs	r3, #5
 8001a0c:	627b      	str	r3, [r7, #36]	@ 0x24
  HAL_GPIO_Init(DISCOVERY_SPI_GPIO_PORT, &GPIO_InitStructure);
 8001a0e:	f107 0314 	add.w	r3, r7, #20
 8001a12:	4619      	mov	r1, r3
 8001a14:	4804      	ldr	r0, [pc, #16]	@ (8001a28 <SPI_MspInit+0x70>)
 8001a16:	f001 fde5 	bl	80035e4 <HAL_GPIO_Init>
}
 8001a1a:	bf00      	nop
 8001a1c:	3728      	adds	r7, #40	@ 0x28
 8001a1e:	46bd      	mov	sp, r7
 8001a20:	bd80      	pop	{r7, pc}
 8001a22:	bf00      	nop
 8001a24:	40023800 	.word	0x40023800
 8001a28:	40021400 	.word	0x40021400

08001a2c <LCD_IO_Init>:

/**
  * @brief  Configures the LCD_SPI interface.
  */
void LCD_IO_Init(void)
{
 8001a2c:	b580      	push	{r7, lr}
 8001a2e:	b088      	sub	sp, #32
 8001a30:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStructure;

  if(Is_LCD_IO_Initialized == 0)
 8001a32:	4b36      	ldr	r3, [pc, #216]	@ (8001b0c <LCD_IO_Init+0xe0>)
 8001a34:	781b      	ldrb	r3, [r3, #0]
 8001a36:	2b00      	cmp	r3, #0
 8001a38:	d164      	bne.n	8001b04 <LCD_IO_Init+0xd8>
  {
    Is_LCD_IO_Initialized = 1;
 8001a3a:	4b34      	ldr	r3, [pc, #208]	@ (8001b0c <LCD_IO_Init+0xe0>)
 8001a3c:	2201      	movs	r2, #1
 8001a3e:	701a      	strb	r2, [r3, #0]

    /* Configure in Output Push-Pull mode */
    LCD_WRX_GPIO_CLK_ENABLE();
 8001a40:	2300      	movs	r3, #0
 8001a42:	60bb      	str	r3, [r7, #8]
 8001a44:	4b32      	ldr	r3, [pc, #200]	@ (8001b10 <LCD_IO_Init+0xe4>)
 8001a46:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001a48:	4a31      	ldr	r2, [pc, #196]	@ (8001b10 <LCD_IO_Init+0xe4>)
 8001a4a:	f043 0308 	orr.w	r3, r3, #8
 8001a4e:	6313      	str	r3, [r2, #48]	@ 0x30
 8001a50:	4b2f      	ldr	r3, [pc, #188]	@ (8001b10 <LCD_IO_Init+0xe4>)
 8001a52:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001a54:	f003 0308 	and.w	r3, r3, #8
 8001a58:	60bb      	str	r3, [r7, #8]
 8001a5a:	68bb      	ldr	r3, [r7, #8]
    GPIO_InitStructure.Pin     = LCD_WRX_PIN;
 8001a5c:	f44f 5300 	mov.w	r3, #8192	@ 0x2000
 8001a60:	60fb      	str	r3, [r7, #12]
    GPIO_InitStructure.Mode    = GPIO_MODE_OUTPUT_PP;
 8001a62:	2301      	movs	r3, #1
 8001a64:	613b      	str	r3, [r7, #16]
    GPIO_InitStructure.Pull    = GPIO_NOPULL;
 8001a66:	2300      	movs	r3, #0
 8001a68:	617b      	str	r3, [r7, #20]
    GPIO_InitStructure.Speed   = GPIO_SPEED_FAST;
 8001a6a:	2302      	movs	r3, #2
 8001a6c:	61bb      	str	r3, [r7, #24]
    HAL_GPIO_Init(LCD_WRX_GPIO_PORT, &GPIO_InitStructure);
 8001a6e:	f107 030c 	add.w	r3, r7, #12
 8001a72:	4619      	mov	r1, r3
 8001a74:	4827      	ldr	r0, [pc, #156]	@ (8001b14 <LCD_IO_Init+0xe8>)
 8001a76:	f001 fdb5 	bl	80035e4 <HAL_GPIO_Init>

    LCD_RDX_GPIO_CLK_ENABLE();
 8001a7a:	2300      	movs	r3, #0
 8001a7c:	607b      	str	r3, [r7, #4]
 8001a7e:	4b24      	ldr	r3, [pc, #144]	@ (8001b10 <LCD_IO_Init+0xe4>)
 8001a80:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001a82:	4a23      	ldr	r2, [pc, #140]	@ (8001b10 <LCD_IO_Init+0xe4>)
 8001a84:	f043 0308 	orr.w	r3, r3, #8
 8001a88:	6313      	str	r3, [r2, #48]	@ 0x30
 8001a8a:	4b21      	ldr	r3, [pc, #132]	@ (8001b10 <LCD_IO_Init+0xe4>)
 8001a8c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001a8e:	f003 0308 	and.w	r3, r3, #8
 8001a92:	607b      	str	r3, [r7, #4]
 8001a94:	687b      	ldr	r3, [r7, #4]
    GPIO_InitStructure.Pin     = LCD_RDX_PIN;
 8001a96:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 8001a9a:	60fb      	str	r3, [r7, #12]
    GPIO_InitStructure.Mode    = GPIO_MODE_OUTPUT_PP;
 8001a9c:	2301      	movs	r3, #1
 8001a9e:	613b      	str	r3, [r7, #16]
    GPIO_InitStructure.Pull    = GPIO_NOPULL;
 8001aa0:	2300      	movs	r3, #0
 8001aa2:	617b      	str	r3, [r7, #20]
    GPIO_InitStructure.Speed   = GPIO_SPEED_FAST;
 8001aa4:	2302      	movs	r3, #2
 8001aa6:	61bb      	str	r3, [r7, #24]
    HAL_GPIO_Init(LCD_RDX_GPIO_PORT, &GPIO_InitStructure);
 8001aa8:	f107 030c 	add.w	r3, r7, #12
 8001aac:	4619      	mov	r1, r3
 8001aae:	4819      	ldr	r0, [pc, #100]	@ (8001b14 <LCD_IO_Init+0xe8>)
 8001ab0:	f001 fd98 	bl	80035e4 <HAL_GPIO_Init>

    /* Configure the LCD Control pins ----------------------------------------*/
    LCD_NCS_GPIO_CLK_ENABLE();
 8001ab4:	2300      	movs	r3, #0
 8001ab6:	603b      	str	r3, [r7, #0]
 8001ab8:	4b15      	ldr	r3, [pc, #84]	@ (8001b10 <LCD_IO_Init+0xe4>)
 8001aba:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001abc:	4a14      	ldr	r2, [pc, #80]	@ (8001b10 <LCD_IO_Init+0xe4>)
 8001abe:	f043 0304 	orr.w	r3, r3, #4
 8001ac2:	6313      	str	r3, [r2, #48]	@ 0x30
 8001ac4:	4b12      	ldr	r3, [pc, #72]	@ (8001b10 <LCD_IO_Init+0xe4>)
 8001ac6:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001ac8:	f003 0304 	and.w	r3, r3, #4
 8001acc:	603b      	str	r3, [r7, #0]
 8001ace:	683b      	ldr	r3, [r7, #0]

    /* Configure NCS in Output Push-Pull mode */
    GPIO_InitStructure.Pin     = LCD_NCS_PIN;
 8001ad0:	2304      	movs	r3, #4
 8001ad2:	60fb      	str	r3, [r7, #12]
    GPIO_InitStructure.Mode    = GPIO_MODE_OUTPUT_PP;
 8001ad4:	2301      	movs	r3, #1
 8001ad6:	613b      	str	r3, [r7, #16]
    GPIO_InitStructure.Pull    = GPIO_NOPULL;
 8001ad8:	2300      	movs	r3, #0
 8001ada:	617b      	str	r3, [r7, #20]
    GPIO_InitStructure.Speed   = GPIO_SPEED_FAST;
 8001adc:	2302      	movs	r3, #2
 8001ade:	61bb      	str	r3, [r7, #24]
    HAL_GPIO_Init(LCD_NCS_GPIO_PORT, &GPIO_InitStructure);
 8001ae0:	f107 030c 	add.w	r3, r7, #12
 8001ae4:	4619      	mov	r1, r3
 8001ae6:	480c      	ldr	r0, [pc, #48]	@ (8001b18 <LCD_IO_Init+0xec>)
 8001ae8:	f001 fd7c 	bl	80035e4 <HAL_GPIO_Init>

    /* Set or Reset the control line */
    LCD_CS_LOW();
 8001aec:	2200      	movs	r2, #0
 8001aee:	2104      	movs	r1, #4
 8001af0:	4809      	ldr	r0, [pc, #36]	@ (8001b18 <LCD_IO_Init+0xec>)
 8001af2:	f002 f82f 	bl	8003b54 <HAL_GPIO_WritePin>
    LCD_CS_HIGH();
 8001af6:	2201      	movs	r2, #1
 8001af8:	2104      	movs	r1, #4
 8001afa:	4807      	ldr	r0, [pc, #28]	@ (8001b18 <LCD_IO_Init+0xec>)
 8001afc:	f002 f82a 	bl	8003b54 <HAL_GPIO_WritePin>

    SPI_Init();
 8001b00:	f7ff fef6 	bl	80018f0 <SPI_Init>
  }
}
 8001b04:	bf00      	nop
 8001b06:	3720      	adds	r7, #32
 8001b08:	46bd      	mov	sp, r7
 8001b0a:	bd80      	pop	{r7, pc}
 8001b0c:	20025a78 	.word	0x20025a78
 8001b10:	40023800 	.word	0x40023800
 8001b14:	40020c00 	.word	0x40020c00
 8001b18:	40020800 	.word	0x40020800

08001b1c <LCD_IO_WriteData>:

/**
  * @brief  Writes register value.
  */
void LCD_IO_WriteData(uint16_t RegValue)
{
 8001b1c:	b580      	push	{r7, lr}
 8001b1e:	b082      	sub	sp, #8
 8001b20:	af00      	add	r7, sp, #0
 8001b22:	4603      	mov	r3, r0
 8001b24:	80fb      	strh	r3, [r7, #6]
  /* Set WRX to send data */
  LCD_WRX_HIGH();
 8001b26:	2201      	movs	r2, #1
 8001b28:	f44f 5100 	mov.w	r1, #8192	@ 0x2000
 8001b2c:	480a      	ldr	r0, [pc, #40]	@ (8001b58 <LCD_IO_WriteData+0x3c>)
 8001b2e:	f002 f811 	bl	8003b54 <HAL_GPIO_WritePin>

  /* Reset LCD control line(/CS) and Send data */
  LCD_CS_LOW();
 8001b32:	2200      	movs	r2, #0
 8001b34:	2104      	movs	r1, #4
 8001b36:	4809      	ldr	r0, [pc, #36]	@ (8001b5c <LCD_IO_WriteData+0x40>)
 8001b38:	f002 f80c 	bl	8003b54 <HAL_GPIO_WritePin>
  SPI_Write(RegValue);
 8001b3c:	88fb      	ldrh	r3, [r7, #6]
 8001b3e:	4618      	mov	r0, r3
 8001b40:	f7ff ff10 	bl	8001964 <SPI_Write>

  /* Deselect: Chip Select high */
  LCD_CS_HIGH();
 8001b44:	2201      	movs	r2, #1
 8001b46:	2104      	movs	r1, #4
 8001b48:	4804      	ldr	r0, [pc, #16]	@ (8001b5c <LCD_IO_WriteData+0x40>)
 8001b4a:	f002 f803 	bl	8003b54 <HAL_GPIO_WritePin>
}
 8001b4e:	bf00      	nop
 8001b50:	3708      	adds	r7, #8
 8001b52:	46bd      	mov	sp, r7
 8001b54:	bd80      	pop	{r7, pc}
 8001b56:	bf00      	nop
 8001b58:	40020c00 	.word	0x40020c00
 8001b5c:	40020800 	.word	0x40020800

08001b60 <LCD_IO_WriteReg>:

/**
  * @brief  Writes register address.
  */
void LCD_IO_WriteReg(uint8_t Reg)
{
 8001b60:	b580      	push	{r7, lr}
 8001b62:	b082      	sub	sp, #8
 8001b64:	af00      	add	r7, sp, #0
 8001b66:	4603      	mov	r3, r0
 8001b68:	71fb      	strb	r3, [r7, #7]
  /* Reset WRX to send command */
  LCD_WRX_LOW();
 8001b6a:	2200      	movs	r2, #0
 8001b6c:	f44f 5100 	mov.w	r1, #8192	@ 0x2000
 8001b70:	480a      	ldr	r0, [pc, #40]	@ (8001b9c <LCD_IO_WriteReg+0x3c>)
 8001b72:	f001 ffef 	bl	8003b54 <HAL_GPIO_WritePin>

  /* Reset LCD control line(/CS) and Send command */
  LCD_CS_LOW();
 8001b76:	2200      	movs	r2, #0
 8001b78:	2104      	movs	r1, #4
 8001b7a:	4809      	ldr	r0, [pc, #36]	@ (8001ba0 <LCD_IO_WriteReg+0x40>)
 8001b7c:	f001 ffea 	bl	8003b54 <HAL_GPIO_WritePin>
  SPI_Write(Reg);
 8001b80:	79fb      	ldrb	r3, [r7, #7]
 8001b82:	b29b      	uxth	r3, r3
 8001b84:	4618      	mov	r0, r3
 8001b86:	f7ff feed 	bl	8001964 <SPI_Write>

  /* Deselect: Chip Select high */
  LCD_CS_HIGH();
 8001b8a:	2201      	movs	r2, #1
 8001b8c:	2104      	movs	r1, #4
 8001b8e:	4804      	ldr	r0, [pc, #16]	@ (8001ba0 <LCD_IO_WriteReg+0x40>)
 8001b90:	f001 ffe0 	bl	8003b54 <HAL_GPIO_WritePin>
}
 8001b94:	bf00      	nop
 8001b96:	3708      	adds	r7, #8
 8001b98:	46bd      	mov	sp, r7
 8001b9a:	bd80      	pop	{r7, pc}
 8001b9c:	40020c00 	.word	0x40020c00
 8001ba0:	40020800 	.word	0x40020800

08001ba4 <LCD_Delay>:
/**
  * @brief  Wait for loop in ms.
  * @param  Delay in ms.
  */
void LCD_Delay(uint32_t Delay)
{
 8001ba4:	b580      	push	{r7, lr}
 8001ba6:	b082      	sub	sp, #8
 8001ba8:	af00      	add	r7, sp, #0
 8001baa:	6078      	str	r0, [r7, #4]
  HAL_Delay(Delay);
 8001bac:	6878      	ldr	r0, [r7, #4]
 8001bae:	f001 fb6d 	bl	800328c <HAL_Delay>
}
 8001bb2:	bf00      	nop
 8001bb4:	3708      	adds	r7, #8
 8001bb6:	46bd      	mov	sp, r7
 8001bb8:	bd80      	pop	{r7, pc}
	...

08001bbc <main>:
static void MX_SPI5_Init(void);
static void MX_TIM6_Init(void);
static void MX_TIM7_Init(void);

int main(void)
{
 8001bbc:	b580      	push	{r7, lr}
 8001bbe:	b082      	sub	sp, #8
 8001bc0:	af02      	add	r7, sp, #8
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8001bc2:	f001 faf1 	bl	80031a8 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClockOverride();
 8001bc6:	f000 f975 	bl	8001eb4 <SystemClockOverride>


  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8001bca:	f000 fa33 	bl	8002034 <MX_GPIO_Init>
  MX_I2C3_Init();
 8001bce:	f000 f835 	bl	8001c3c <MX_I2C3_Init>
  MX_LTDC_Init();
 8001bd2:	f000 f873 	bl	8001cbc <MX_LTDC_Init>
  MX_RNG_Init();
 8001bd6:	f000 f923 	bl	8001e20 <MX_RNG_Init>
  MX_SPI5_Init();
 8001bda:	f000 f935 	bl	8001e48 <MX_SPI5_Init>
  MX_TIM6_Init();
 8001bde:	f000 f9a9 	bl	8001f34 <MX_TIM6_Init>
  MX_TIM7_Init();
 8001be2:	f000 f9dd 	bl	8001fa0 <MX_TIM7_Init>
  ApplicationInit();
 8001be6:	f7fe fccb 	bl	8000580 <ApplicationInit>
/*
	for (int i = 2; i>0; i--)
		random_block((i), hrng);
*/

  homescreen();
 8001bea:	f7fe fd11 	bl	8000610 <homescreen>




	HAL_StatusTypeDef HAL_TIM_Base_Start(TIM_HandleTypeDef *htim7);
	if (HAL_TIM_Base_Start(&htim7) != HAL_OK)
 8001bee:	4810      	ldr	r0, [pc, #64]	@ (8001c30 <main+0x74>)
 8001bf0:	f004 fd18 	bl	8006624 <HAL_TIM_Base_Start>
 8001bf4:	4603      	mov	r3, r0
 8001bf6:	2b00      	cmp	r3, #0
 8001bf8:	d001      	beq.n	8001bfe <main+0x42>
	{
		Error_Handler();
 8001bfa:	f000 fbc9 	bl	8002390 <Error_Handler>
	}


  for (level = 1; level <= 12; level++)
 8001bfe:	4b0d      	ldr	r3, [pc, #52]	@ (8001c34 <main+0x78>)
 8001c00:	2201      	movs	r2, #1
 8001c02:	801a      	strh	r2, [r3, #0]
 8001c04:	e00d      	b.n	8001c22 <main+0x66>
  {
	makeLevel(level, hrng);
 8001c06:	4b0b      	ldr	r3, [pc, #44]	@ (8001c34 <main+0x78>)
 8001c08:	8818      	ldrh	r0, [r3, #0]
 8001c0a:	4b0b      	ldr	r3, [pc, #44]	@ (8001c38 <main+0x7c>)
 8001c0c:	68da      	ldr	r2, [r3, #12]
 8001c0e:	9200      	str	r2, [sp, #0]
 8001c10:	cb0e      	ldmia	r3, {r1, r2, r3}
 8001c12:	f7ff f823 	bl	8000c5c <makeLevel>
  for (level = 1; level <= 12; level++)
 8001c16:	4b07      	ldr	r3, [pc, #28]	@ (8001c34 <main+0x78>)
 8001c18:	881b      	ldrh	r3, [r3, #0]
 8001c1a:	3301      	adds	r3, #1
 8001c1c:	b29a      	uxth	r2, r3
 8001c1e:	4b05      	ldr	r3, [pc, #20]	@ (8001c34 <main+0x78>)
 8001c20:	801a      	strh	r2, [r3, #0]
 8001c22:	4b04      	ldr	r3, [pc, #16]	@ (8001c34 <main+0x78>)
 8001c24:	881b      	ldrh	r3, [r3, #0]
 8001c26:	2b0c      	cmp	r3, #12
 8001c28:	d9ed      	bls.n	8001c06 <main+0x4a>



  //success_screen();
  /* USER CODE BEGIN WHILE */
  while (1);
 8001c2a:	bf00      	nop
 8001c2c:	e7fd      	b.n	8001c2a <main+0x6e>
 8001c2e:	bf00      	nop
 8001c30:	20025a7c 	.word	0x20025a7c
 8001c34:	20000020 	.word	0x20000020
 8001c38:	20025bc0 	.word	0x20025bc0

08001c3c <MX_I2C3_Init>:
  * @brief I2C3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_I2C3_Init(void)
{
 8001c3c:	b580      	push	{r7, lr}
 8001c3e:	af00      	add	r7, sp, #0
  /* USER CODE END I2C3_Init 0 */

  /* USER CODE BEGIN I2C3_Init 1 */

  /* USER CODE END I2C3_Init 1 */
  hi2c3.Instance = I2C3;
 8001c40:	4b1b      	ldr	r3, [pc, #108]	@ (8001cb0 <MX_I2C3_Init+0x74>)
 8001c42:	4a1c      	ldr	r2, [pc, #112]	@ (8001cb4 <MX_I2C3_Init+0x78>)
 8001c44:	601a      	str	r2, [r3, #0]
  hi2c3.Init.ClockSpeed = 100000;
 8001c46:	4b1a      	ldr	r3, [pc, #104]	@ (8001cb0 <MX_I2C3_Init+0x74>)
 8001c48:	4a1b      	ldr	r2, [pc, #108]	@ (8001cb8 <MX_I2C3_Init+0x7c>)
 8001c4a:	605a      	str	r2, [r3, #4]
  hi2c3.Init.DutyCycle = I2C_DUTYCYCLE_2;
 8001c4c:	4b18      	ldr	r3, [pc, #96]	@ (8001cb0 <MX_I2C3_Init+0x74>)
 8001c4e:	2200      	movs	r2, #0
 8001c50:	609a      	str	r2, [r3, #8]
  hi2c3.Init.OwnAddress1 = 0;
 8001c52:	4b17      	ldr	r3, [pc, #92]	@ (8001cb0 <MX_I2C3_Init+0x74>)
 8001c54:	2200      	movs	r2, #0
 8001c56:	60da      	str	r2, [r3, #12]
  hi2c3.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 8001c58:	4b15      	ldr	r3, [pc, #84]	@ (8001cb0 <MX_I2C3_Init+0x74>)
 8001c5a:	f44f 4280 	mov.w	r2, #16384	@ 0x4000
 8001c5e:	611a      	str	r2, [r3, #16]
  hi2c3.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 8001c60:	4b13      	ldr	r3, [pc, #76]	@ (8001cb0 <MX_I2C3_Init+0x74>)
 8001c62:	2200      	movs	r2, #0
 8001c64:	615a      	str	r2, [r3, #20]
  hi2c3.Init.OwnAddress2 = 0;
 8001c66:	4b12      	ldr	r3, [pc, #72]	@ (8001cb0 <MX_I2C3_Init+0x74>)
 8001c68:	2200      	movs	r2, #0
 8001c6a:	619a      	str	r2, [r3, #24]
  hi2c3.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 8001c6c:	4b10      	ldr	r3, [pc, #64]	@ (8001cb0 <MX_I2C3_Init+0x74>)
 8001c6e:	2200      	movs	r2, #0
 8001c70:	61da      	str	r2, [r3, #28]
  hi2c3.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 8001c72:	4b0f      	ldr	r3, [pc, #60]	@ (8001cb0 <MX_I2C3_Init+0x74>)
 8001c74:	2200      	movs	r2, #0
 8001c76:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c3) != HAL_OK)
 8001c78:	480d      	ldr	r0, [pc, #52]	@ (8001cb0 <MX_I2C3_Init+0x74>)
 8001c7a:	f001 ff85 	bl	8003b88 <HAL_I2C_Init>
 8001c7e:	4603      	mov	r3, r0
 8001c80:	2b00      	cmp	r3, #0
 8001c82:	d001      	beq.n	8001c88 <MX_I2C3_Init+0x4c>
  {
    Error_Handler();
 8001c84:	f000 fb84 	bl	8002390 <Error_Handler>
  }

  /** Configure Analogue filter
  */
  if (HAL_I2CEx_ConfigAnalogFilter(&hi2c3, I2C_ANALOGFILTER_ENABLE) != HAL_OK)
 8001c88:	2100      	movs	r1, #0
 8001c8a:	4809      	ldr	r0, [pc, #36]	@ (8001cb0 <MX_I2C3_Init+0x74>)
 8001c8c:	f002 ffa0 	bl	8004bd0 <HAL_I2CEx_ConfigAnalogFilter>
 8001c90:	4603      	mov	r3, r0
 8001c92:	2b00      	cmp	r3, #0
 8001c94:	d001      	beq.n	8001c9a <MX_I2C3_Init+0x5e>
  {
    Error_Handler();
 8001c96:	f000 fb7b 	bl	8002390 <Error_Handler>
  }

  /** Configure Digital filter
  */
  if (HAL_I2CEx_ConfigDigitalFilter(&hi2c3, 0) != HAL_OK)
 8001c9a:	2100      	movs	r1, #0
 8001c9c:	4804      	ldr	r0, [pc, #16]	@ (8001cb0 <MX_I2C3_Init+0x74>)
 8001c9e:	f002 ffd3 	bl	8004c48 <HAL_I2CEx_ConfigDigitalFilter>
 8001ca2:	4603      	mov	r3, r0
 8001ca4:	2b00      	cmp	r3, #0
 8001ca6:	d001      	beq.n	8001cac <MX_I2C3_Init+0x70>
  {
    Error_Handler();
 8001ca8:	f000 fb72 	bl	8002390 <Error_Handler>
  }
  /* USER CODE BEGIN I2C3_Init 2 */

  /* USER CODE END I2C3_Init 2 */

}
 8001cac:	bf00      	nop
 8001cae:	bd80      	pop	{r7, pc}
 8001cb0:	20025ac4 	.word	0x20025ac4
 8001cb4:	40005c00 	.word	0x40005c00
 8001cb8:	000186a0 	.word	0x000186a0

08001cbc <MX_LTDC_Init>:
  * @brief LTDC Initialization Function
  * @param None
  * @retval None
  */
static void MX_LTDC_Init(void)
{
 8001cbc:	b580      	push	{r7, lr}
 8001cbe:	b09a      	sub	sp, #104	@ 0x68
 8001cc0:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN LTDC_Init 0 */

  /* USER CODE END LTDC_Init 0 */

  LTDC_LayerCfgTypeDef pLayerCfg = {0};
 8001cc2:	f107 0334 	add.w	r3, r7, #52	@ 0x34
 8001cc6:	2234      	movs	r2, #52	@ 0x34
 8001cc8:	2100      	movs	r1, #0
 8001cca:	4618      	mov	r0, r3
 8001ccc:	f004 ffe6 	bl	8006c9c <memset>
  LTDC_LayerCfgTypeDef pLayerCfg1 = {0};
 8001cd0:	463b      	mov	r3, r7
 8001cd2:	2234      	movs	r2, #52	@ 0x34
 8001cd4:	2100      	movs	r1, #0
 8001cd6:	4618      	mov	r0, r3
 8001cd8:	f004 ffe0 	bl	8006c9c <memset>

  /* USER CODE BEGIN LTDC_Init 1 */

  /* USER CODE END LTDC_Init 1 */
  hltdc.Instance = LTDC;
 8001cdc:	4b4e      	ldr	r3, [pc, #312]	@ (8001e18 <MX_LTDC_Init+0x15c>)
 8001cde:	4a4f      	ldr	r2, [pc, #316]	@ (8001e1c <MX_LTDC_Init+0x160>)
 8001ce0:	601a      	str	r2, [r3, #0]
  hltdc.Init.HSPolarity = LTDC_HSPOLARITY_AL;
 8001ce2:	4b4d      	ldr	r3, [pc, #308]	@ (8001e18 <MX_LTDC_Init+0x15c>)
 8001ce4:	2200      	movs	r2, #0
 8001ce6:	605a      	str	r2, [r3, #4]
  hltdc.Init.VSPolarity = LTDC_VSPOLARITY_AL;
 8001ce8:	4b4b      	ldr	r3, [pc, #300]	@ (8001e18 <MX_LTDC_Init+0x15c>)
 8001cea:	2200      	movs	r2, #0
 8001cec:	609a      	str	r2, [r3, #8]
  hltdc.Init.DEPolarity = LTDC_DEPOLARITY_AL;
 8001cee:	4b4a      	ldr	r3, [pc, #296]	@ (8001e18 <MX_LTDC_Init+0x15c>)
 8001cf0:	2200      	movs	r2, #0
 8001cf2:	60da      	str	r2, [r3, #12]
  hltdc.Init.PCPolarity = LTDC_PCPOLARITY_IPC;
 8001cf4:	4b48      	ldr	r3, [pc, #288]	@ (8001e18 <MX_LTDC_Init+0x15c>)
 8001cf6:	2200      	movs	r2, #0
 8001cf8:	611a      	str	r2, [r3, #16]
  hltdc.Init.HorizontalSync = 7;
 8001cfa:	4b47      	ldr	r3, [pc, #284]	@ (8001e18 <MX_LTDC_Init+0x15c>)
 8001cfc:	2207      	movs	r2, #7
 8001cfe:	615a      	str	r2, [r3, #20]
  hltdc.Init.VerticalSync = 3;
 8001d00:	4b45      	ldr	r3, [pc, #276]	@ (8001e18 <MX_LTDC_Init+0x15c>)
 8001d02:	2203      	movs	r2, #3
 8001d04:	619a      	str	r2, [r3, #24]
  hltdc.Init.AccumulatedHBP = 14;
 8001d06:	4b44      	ldr	r3, [pc, #272]	@ (8001e18 <MX_LTDC_Init+0x15c>)
 8001d08:	220e      	movs	r2, #14
 8001d0a:	61da      	str	r2, [r3, #28]
  hltdc.Init.AccumulatedVBP = 5;
 8001d0c:	4b42      	ldr	r3, [pc, #264]	@ (8001e18 <MX_LTDC_Init+0x15c>)
 8001d0e:	2205      	movs	r2, #5
 8001d10:	621a      	str	r2, [r3, #32]
  hltdc.Init.AccumulatedActiveW = 654;
 8001d12:	4b41      	ldr	r3, [pc, #260]	@ (8001e18 <MX_LTDC_Init+0x15c>)
 8001d14:	f240 228e 	movw	r2, #654	@ 0x28e
 8001d18:	625a      	str	r2, [r3, #36]	@ 0x24
  hltdc.Init.AccumulatedActiveH = 485;
 8001d1a:	4b3f      	ldr	r3, [pc, #252]	@ (8001e18 <MX_LTDC_Init+0x15c>)
 8001d1c:	f240 12e5 	movw	r2, #485	@ 0x1e5
 8001d20:	629a      	str	r2, [r3, #40]	@ 0x28
  hltdc.Init.TotalWidth = 660;
 8001d22:	4b3d      	ldr	r3, [pc, #244]	@ (8001e18 <MX_LTDC_Init+0x15c>)
 8001d24:	f44f 7225 	mov.w	r2, #660	@ 0x294
 8001d28:	62da      	str	r2, [r3, #44]	@ 0x2c
  hltdc.Init.TotalHeigh = 487;
 8001d2a:	4b3b      	ldr	r3, [pc, #236]	@ (8001e18 <MX_LTDC_Init+0x15c>)
 8001d2c:	f240 12e7 	movw	r2, #487	@ 0x1e7
 8001d30:	631a      	str	r2, [r3, #48]	@ 0x30
  hltdc.Init.Backcolor.Blue = 0;
 8001d32:	4b39      	ldr	r3, [pc, #228]	@ (8001e18 <MX_LTDC_Init+0x15c>)
 8001d34:	2200      	movs	r2, #0
 8001d36:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
  hltdc.Init.Backcolor.Green = 0;
 8001d3a:	4b37      	ldr	r3, [pc, #220]	@ (8001e18 <MX_LTDC_Init+0x15c>)
 8001d3c:	2200      	movs	r2, #0
 8001d3e:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35
  hltdc.Init.Backcolor.Red = 0;
 8001d42:	4b35      	ldr	r3, [pc, #212]	@ (8001e18 <MX_LTDC_Init+0x15c>)
 8001d44:	2200      	movs	r2, #0
 8001d46:	f883 2036 	strb.w	r2, [r3, #54]	@ 0x36
  if (HAL_LTDC_Init(&hltdc) != HAL_OK)
 8001d4a:	4833      	ldr	r0, [pc, #204]	@ (8001e18 <MX_LTDC_Init+0x15c>)
 8001d4c:	f002 ffbc 	bl	8004cc8 <HAL_LTDC_Init>
 8001d50:	4603      	mov	r3, r0
 8001d52:	2b00      	cmp	r3, #0
 8001d54:	d001      	beq.n	8001d5a <MX_LTDC_Init+0x9e>
  {
    Error_Handler();
 8001d56:	f000 fb1b 	bl	8002390 <Error_Handler>
  }
  pLayerCfg.WindowX0 = 0;
 8001d5a:	2300      	movs	r3, #0
 8001d5c:	637b      	str	r3, [r7, #52]	@ 0x34
  pLayerCfg.WindowX1 = 0;
 8001d5e:	2300      	movs	r3, #0
 8001d60:	63bb      	str	r3, [r7, #56]	@ 0x38
  pLayerCfg.WindowY0 = 0;
 8001d62:	2300      	movs	r3, #0
 8001d64:	63fb      	str	r3, [r7, #60]	@ 0x3c
  pLayerCfg.WindowY1 = 0;
 8001d66:	2300      	movs	r3, #0
 8001d68:	643b      	str	r3, [r7, #64]	@ 0x40
  pLayerCfg.PixelFormat = LTDC_PIXEL_FORMAT_ARGB8888;
 8001d6a:	2300      	movs	r3, #0
 8001d6c:	647b      	str	r3, [r7, #68]	@ 0x44
  pLayerCfg.Alpha = 0;
 8001d6e:	2300      	movs	r3, #0
 8001d70:	64bb      	str	r3, [r7, #72]	@ 0x48
  pLayerCfg.Alpha0 = 0;
 8001d72:	2300      	movs	r3, #0
 8001d74:	64fb      	str	r3, [r7, #76]	@ 0x4c
  pLayerCfg.BlendingFactor1 = LTDC_BLENDING_FACTOR1_CA;
 8001d76:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 8001d7a:	653b      	str	r3, [r7, #80]	@ 0x50
  pLayerCfg.BlendingFactor2 = LTDC_BLENDING_FACTOR2_CA;
 8001d7c:	2305      	movs	r3, #5
 8001d7e:	657b      	str	r3, [r7, #84]	@ 0x54
  pLayerCfg.FBStartAdress = 0;
 8001d80:	2300      	movs	r3, #0
 8001d82:	65bb      	str	r3, [r7, #88]	@ 0x58
  pLayerCfg.ImageWidth = 0;
 8001d84:	2300      	movs	r3, #0
 8001d86:	65fb      	str	r3, [r7, #92]	@ 0x5c
  pLayerCfg.ImageHeight = 0;
 8001d88:	2300      	movs	r3, #0
 8001d8a:	663b      	str	r3, [r7, #96]	@ 0x60
  pLayerCfg.Backcolor.Blue = 0;
 8001d8c:	2300      	movs	r3, #0
 8001d8e:	f887 3064 	strb.w	r3, [r7, #100]	@ 0x64
  pLayerCfg.Backcolor.Green = 0;
 8001d92:	2300      	movs	r3, #0
 8001d94:	f887 3065 	strb.w	r3, [r7, #101]	@ 0x65
  pLayerCfg.Backcolor.Red = 0;
 8001d98:	2300      	movs	r3, #0
 8001d9a:	f887 3066 	strb.w	r3, [r7, #102]	@ 0x66
  if (HAL_LTDC_ConfigLayer(&hltdc, &pLayerCfg, 0) != HAL_OK)
 8001d9e:	f107 0334 	add.w	r3, r7, #52	@ 0x34
 8001da2:	2200      	movs	r2, #0
 8001da4:	4619      	mov	r1, r3
 8001da6:	481c      	ldr	r0, [pc, #112]	@ (8001e18 <MX_LTDC_Init+0x15c>)
 8001da8:	f003 f85e 	bl	8004e68 <HAL_LTDC_ConfigLayer>
 8001dac:	4603      	mov	r3, r0
 8001dae:	2b00      	cmp	r3, #0
 8001db0:	d001      	beq.n	8001db6 <MX_LTDC_Init+0xfa>
  {
    Error_Handler();
 8001db2:	f000 faed 	bl	8002390 <Error_Handler>
  }
  pLayerCfg1.WindowX0 = 0;
 8001db6:	2300      	movs	r3, #0
 8001db8:	603b      	str	r3, [r7, #0]
  pLayerCfg1.WindowX1 = 0;
 8001dba:	2300      	movs	r3, #0
 8001dbc:	607b      	str	r3, [r7, #4]
  pLayerCfg1.WindowY0 = 0;
 8001dbe:	2300      	movs	r3, #0
 8001dc0:	60bb      	str	r3, [r7, #8]
  pLayerCfg1.WindowY1 = 0;
 8001dc2:	2300      	movs	r3, #0
 8001dc4:	60fb      	str	r3, [r7, #12]
  pLayerCfg1.PixelFormat = LTDC_PIXEL_FORMAT_ARGB8888;
 8001dc6:	2300      	movs	r3, #0
 8001dc8:	613b      	str	r3, [r7, #16]
  pLayerCfg1.Alpha = 0;
 8001dca:	2300      	movs	r3, #0
 8001dcc:	617b      	str	r3, [r7, #20]
  pLayerCfg1.Alpha0 = 0;
 8001dce:	2300      	movs	r3, #0
 8001dd0:	61bb      	str	r3, [r7, #24]
  pLayerCfg1.BlendingFactor1 = LTDC_BLENDING_FACTOR1_CA;
 8001dd2:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 8001dd6:	61fb      	str	r3, [r7, #28]
  pLayerCfg1.BlendingFactor2 = LTDC_BLENDING_FACTOR2_CA;
 8001dd8:	2305      	movs	r3, #5
 8001dda:	623b      	str	r3, [r7, #32]
  pLayerCfg1.FBStartAdress = 0;
 8001ddc:	2300      	movs	r3, #0
 8001dde:	627b      	str	r3, [r7, #36]	@ 0x24
  pLayerCfg1.ImageWidth = 0;
 8001de0:	2300      	movs	r3, #0
 8001de2:	62bb      	str	r3, [r7, #40]	@ 0x28
  pLayerCfg1.ImageHeight = 0;
 8001de4:	2300      	movs	r3, #0
 8001de6:	62fb      	str	r3, [r7, #44]	@ 0x2c
  pLayerCfg1.Backcolor.Blue = 0;
 8001de8:	2300      	movs	r3, #0
 8001dea:	f887 3030 	strb.w	r3, [r7, #48]	@ 0x30
  pLayerCfg1.Backcolor.Green = 0;
 8001dee:	2300      	movs	r3, #0
 8001df0:	f887 3031 	strb.w	r3, [r7, #49]	@ 0x31
  pLayerCfg1.Backcolor.Red = 0;
 8001df4:	2300      	movs	r3, #0
 8001df6:	f887 3032 	strb.w	r3, [r7, #50]	@ 0x32
  if (HAL_LTDC_ConfigLayer(&hltdc, &pLayerCfg1, 1) != HAL_OK)
 8001dfa:	463b      	mov	r3, r7
 8001dfc:	2201      	movs	r2, #1
 8001dfe:	4619      	mov	r1, r3
 8001e00:	4805      	ldr	r0, [pc, #20]	@ (8001e18 <MX_LTDC_Init+0x15c>)
 8001e02:	f003 f831 	bl	8004e68 <HAL_LTDC_ConfigLayer>
 8001e06:	4603      	mov	r3, r0
 8001e08:	2b00      	cmp	r3, #0
 8001e0a:	d001      	beq.n	8001e10 <MX_LTDC_Init+0x154>
  {
    Error_Handler();
 8001e0c:	f000 fac0 	bl	8002390 <Error_Handler>
  }
  /* USER CODE BEGIN LTDC_Init 2 */

  /* USER CODE END LTDC_Init 2 */

}
 8001e10:	bf00      	nop
 8001e12:	3768      	adds	r7, #104	@ 0x68
 8001e14:	46bd      	mov	sp, r7
 8001e16:	bd80      	pop	{r7, pc}
 8001e18:	20025b18 	.word	0x20025b18
 8001e1c:	40016800 	.word	0x40016800

08001e20 <MX_RNG_Init>:
  * @brief RNG Initialization Function
  * @param None
  * @retval None
  */
static void MX_RNG_Init(void)
{
 8001e20:	b580      	push	{r7, lr}
 8001e22:	af00      	add	r7, sp, #0
  /* USER CODE END RNG_Init 0 */

  /* USER CODE BEGIN RNG_Init 1 */

  /* USER CODE END RNG_Init 1 */
  hrng.Instance = RNG;
 8001e24:	4b06      	ldr	r3, [pc, #24]	@ (8001e40 <MX_RNG_Init+0x20>)
 8001e26:	4a07      	ldr	r2, [pc, #28]	@ (8001e44 <MX_RNG_Init+0x24>)
 8001e28:	601a      	str	r2, [r3, #0]
  if (HAL_RNG_Init(&hrng) != HAL_OK)
 8001e2a:	4805      	ldr	r0, [pc, #20]	@ (8001e40 <MX_RNG_Init+0x20>)
 8001e2c:	f004 f836 	bl	8005e9c <HAL_RNG_Init>
 8001e30:	4603      	mov	r3, r0
 8001e32:	2b00      	cmp	r3, #0
 8001e34:	d001      	beq.n	8001e3a <MX_RNG_Init+0x1a>
  {
    Error_Handler();
 8001e36:	f000 faab 	bl	8002390 <Error_Handler>
  }
  /* USER CODE BEGIN RNG_Init 2 */

  /* USER CODE END RNG_Init 2 */

}
 8001e3a:	bf00      	nop
 8001e3c:	bd80      	pop	{r7, pc}
 8001e3e:	bf00      	nop
 8001e40:	20025bc0 	.word	0x20025bc0
 8001e44:	50060800 	.word	0x50060800

08001e48 <MX_SPI5_Init>:
  * @brief SPI5 Initialization Function
  * @param None
  * @retval None
  */
static void MX_SPI5_Init(void)
{
 8001e48:	b580      	push	{r7, lr}
 8001e4a:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN SPI5_Init 1 */

  /* USER CODE END SPI5_Init 1 */
  /* SPI5 parameter configuration*/
  hspi5.Instance = SPI5;
 8001e4c:	4b17      	ldr	r3, [pc, #92]	@ (8001eac <MX_SPI5_Init+0x64>)
 8001e4e:	4a18      	ldr	r2, [pc, #96]	@ (8001eb0 <MX_SPI5_Init+0x68>)
 8001e50:	601a      	str	r2, [r3, #0]
  hspi5.Init.Mode = SPI_MODE_MASTER;
 8001e52:	4b16      	ldr	r3, [pc, #88]	@ (8001eac <MX_SPI5_Init+0x64>)
 8001e54:	f44f 7282 	mov.w	r2, #260	@ 0x104
 8001e58:	605a      	str	r2, [r3, #4]
  hspi5.Init.Direction = SPI_DIRECTION_2LINES;
 8001e5a:	4b14      	ldr	r3, [pc, #80]	@ (8001eac <MX_SPI5_Init+0x64>)
 8001e5c:	2200      	movs	r2, #0
 8001e5e:	609a      	str	r2, [r3, #8]
  hspi5.Init.DataSize = SPI_DATASIZE_8BIT;
 8001e60:	4b12      	ldr	r3, [pc, #72]	@ (8001eac <MX_SPI5_Init+0x64>)
 8001e62:	2200      	movs	r2, #0
 8001e64:	60da      	str	r2, [r3, #12]
  hspi5.Init.CLKPolarity = SPI_POLARITY_LOW;
 8001e66:	4b11      	ldr	r3, [pc, #68]	@ (8001eac <MX_SPI5_Init+0x64>)
 8001e68:	2200      	movs	r2, #0
 8001e6a:	611a      	str	r2, [r3, #16]
  hspi5.Init.CLKPhase = SPI_PHASE_1EDGE;
 8001e6c:	4b0f      	ldr	r3, [pc, #60]	@ (8001eac <MX_SPI5_Init+0x64>)
 8001e6e:	2200      	movs	r2, #0
 8001e70:	615a      	str	r2, [r3, #20]
  hspi5.Init.NSS = SPI_NSS_SOFT;
 8001e72:	4b0e      	ldr	r3, [pc, #56]	@ (8001eac <MX_SPI5_Init+0x64>)
 8001e74:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8001e78:	619a      	str	r2, [r3, #24]
  hspi5.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 8001e7a:	4b0c      	ldr	r3, [pc, #48]	@ (8001eac <MX_SPI5_Init+0x64>)
 8001e7c:	2200      	movs	r2, #0
 8001e7e:	61da      	str	r2, [r3, #28]
  hspi5.Init.FirstBit = SPI_FIRSTBIT_MSB;
 8001e80:	4b0a      	ldr	r3, [pc, #40]	@ (8001eac <MX_SPI5_Init+0x64>)
 8001e82:	2200      	movs	r2, #0
 8001e84:	621a      	str	r2, [r3, #32]
  hspi5.Init.TIMode = SPI_TIMODE_DISABLE;
 8001e86:	4b09      	ldr	r3, [pc, #36]	@ (8001eac <MX_SPI5_Init+0x64>)
 8001e88:	2200      	movs	r2, #0
 8001e8a:	625a      	str	r2, [r3, #36]	@ 0x24
  hspi5.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8001e8c:	4b07      	ldr	r3, [pc, #28]	@ (8001eac <MX_SPI5_Init+0x64>)
 8001e8e:	2200      	movs	r2, #0
 8001e90:	629a      	str	r2, [r3, #40]	@ 0x28
  hspi5.Init.CRCPolynomial = 10;
 8001e92:	4b06      	ldr	r3, [pc, #24]	@ (8001eac <MX_SPI5_Init+0x64>)
 8001e94:	220a      	movs	r2, #10
 8001e96:	62da      	str	r2, [r3, #44]	@ 0x2c
  if (HAL_SPI_Init(&hspi5) != HAL_OK)
 8001e98:	4804      	ldr	r0, [pc, #16]	@ (8001eac <MX_SPI5_Init+0x64>)
 8001e9a:	f004 f894 	bl	8005fc6 <HAL_SPI_Init>
 8001e9e:	4603      	mov	r3, r0
 8001ea0:	2b00      	cmp	r3, #0
 8001ea2:	d001      	beq.n	8001ea8 <MX_SPI5_Init+0x60>
  {
    Error_Handler();
 8001ea4:	f000 fa74 	bl	8002390 <Error_Handler>
  }
  /* USER CODE BEGIN SPI5_Init 2 */

  /* USER CODE END SPI5_Init 2 */

}
 8001ea8:	bf00      	nop
 8001eaa:	bd80      	pop	{r7, pc}
 8001eac:	20025bd0 	.word	0x20025bd0
 8001eb0:	40015000 	.word	0x40015000

08001eb4 <SystemClockOverride>:

void SystemClockOverride(void)
{
 8001eb4:	b580      	push	{r7, lr}
 8001eb6:	b092      	sub	sp, #72	@ 0x48
 8001eb8:	af00      	add	r7, sp, #0
  RCC_ClkInitTypeDef RCC_ClkInitStruct;
  RCC_OscInitTypeDef RCC_OscInitStruct;

  __HAL_RCC_PWR_CLK_ENABLE();
 8001eba:	2300      	movs	r3, #0
 8001ebc:	603b      	str	r3, [r7, #0]
 8001ebe:	4b1c      	ldr	r3, [pc, #112]	@ (8001f30 <SystemClockOverride+0x7c>)
 8001ec0:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001ec2:	4a1b      	ldr	r2, [pc, #108]	@ (8001f30 <SystemClockOverride+0x7c>)
 8001ec4:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8001ec8:	6413      	str	r3, [r2, #64]	@ 0x40
 8001eca:	4b19      	ldr	r3, [pc, #100]	@ (8001f30 <SystemClockOverride+0x7c>)
 8001ecc:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001ece:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8001ed2:	603b      	str	r3, [r7, #0]
 8001ed4:	683b      	ldr	r3, [r7, #0]

  // __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1); // not needed, power scaling consumption for when not running at max freq.

  /* Enable HSE Osc and activate PLL with HSE source */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 8001ed6:	2301      	movs	r3, #1
 8001ed8:	607b      	str	r3, [r7, #4]
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 8001eda:	f44f 3380 	mov.w	r3, #65536	@ 0x10000
 8001ede:	60bb      	str	r3, [r7, #8]
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8001ee0:	2302      	movs	r3, #2
 8001ee2:	61fb      	str	r3, [r7, #28]
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 8001ee4:	f44f 0380 	mov.w	r3, #4194304	@ 0x400000
 8001ee8:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.PLL.PLLM = 8;
 8001eea:	2308      	movs	r3, #8
 8001eec:	627b      	str	r3, [r7, #36]	@ 0x24
  RCC_OscInitStruct.PLL.PLLN = 336;
 8001eee:	f44f 73a8 	mov.w	r3, #336	@ 0x150
 8001ef2:	62bb      	str	r3, [r7, #40]	@ 0x28
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 8001ef4:	2302      	movs	r3, #2
 8001ef6:	62fb      	str	r3, [r7, #44]	@ 0x2c
  RCC_OscInitStruct.PLL.PLLQ = 7;
 8001ef8:	2307      	movs	r3, #7
 8001efa:	633b      	str	r3, [r7, #48]	@ 0x30
  HAL_RCC_OscConfig(&RCC_OscInitStruct);
 8001efc:	1d3b      	adds	r3, r7, #4
 8001efe:	4618      	mov	r0, r3
 8001f00:	f003 f988 	bl	8005214 <HAL_RCC_OscConfig>

  /* Select PLL as system clock source and configure the HCLK, PCLK1 and PCLK2 clocks dividers */
  RCC_ClkInitStruct.ClockType = (RCC_CLOCKTYPE_SYSCLK | RCC_CLOCKTYPE_HCLK | RCC_CLOCKTYPE_PCLK1 | RCC_CLOCKTYPE_PCLK2);
 8001f04:	230f      	movs	r3, #15
 8001f06:	637b      	str	r3, [r7, #52]	@ 0x34
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8001f08:	2302      	movs	r3, #2
 8001f0a:	63bb      	str	r3, [r7, #56]	@ 0x38
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8001f0c:	2300      	movs	r3, #0
 8001f0e:	63fb      	str	r3, [r7, #60]	@ 0x3c
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV4;
 8001f10:	f44f 53a0 	mov.w	r3, #5120	@ 0x1400
 8001f14:	643b      	str	r3, [r7, #64]	@ 0x40
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV2;
 8001f16:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 8001f1a:	647b      	str	r3, [r7, #68]	@ 0x44
  HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_5);
 8001f1c:	f107 0334 	add.w	r3, r7, #52	@ 0x34
 8001f20:	2105      	movs	r1, #5
 8001f22:	4618      	mov	r0, r3
 8001f24:	f003 fbee 	bl	8005704 <HAL_RCC_ClockConfig>
}
 8001f28:	bf00      	nop
 8001f2a:	3748      	adds	r7, #72	@ 0x48
 8001f2c:	46bd      	mov	sp, r7
 8001f2e:	bd80      	pop	{r7, pc}
 8001f30:	40023800 	.word	0x40023800

08001f34 <MX_TIM6_Init>:
  * @param None
  * @retval None
  */

static void MX_TIM6_Init(void)
{
 8001f34:	b580      	push	{r7, lr}
 8001f36:	b082      	sub	sp, #8
 8001f38:	af00      	add	r7, sp, #0
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8001f3a:	463b      	mov	r3, r7
 8001f3c:	2200      	movs	r2, #0
 8001f3e:	601a      	str	r2, [r3, #0]
 8001f40:	605a      	str	r2, [r3, #4]

  /* USER CODE BEGIN TIM6_Init 1 */

  /* USER CODE END TIM6_Init 1 */
  htim6.Instance = TIM6;
 8001f42:	4b15      	ldr	r3, [pc, #84]	@ (8001f98 <MX_TIM6_Init+0x64>)
 8001f44:	4a15      	ldr	r2, [pc, #84]	@ (8001f9c <MX_TIM6_Init+0x68>)
 8001f46:	601a      	str	r2, [r3, #0]
  htim6.Init.Prescaler = 0;
 8001f48:	4b13      	ldr	r3, [pc, #76]	@ (8001f98 <MX_TIM6_Init+0x64>)
 8001f4a:	2200      	movs	r2, #0
 8001f4c:	605a      	str	r2, [r3, #4]
  htim6.Init.CounterMode = TIM_COUNTERMODE_UP;
 8001f4e:	4b12      	ldr	r3, [pc, #72]	@ (8001f98 <MX_TIM6_Init+0x64>)
 8001f50:	2200      	movs	r2, #0
 8001f52:	609a      	str	r2, [r3, #8]
  htim6.Init.Period = 65535;
 8001f54:	4b10      	ldr	r3, [pc, #64]	@ (8001f98 <MX_TIM6_Init+0x64>)
 8001f56:	f64f 72ff 	movw	r2, #65535	@ 0xffff
 8001f5a:	60da      	str	r2, [r3, #12]
  htim6.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8001f5c:	4b0e      	ldr	r3, [pc, #56]	@ (8001f98 <MX_TIM6_Init+0x64>)
 8001f5e:	2200      	movs	r2, #0
 8001f60:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim6) != HAL_OK)
 8001f62:	480d      	ldr	r0, [pc, #52]	@ (8001f98 <MX_TIM6_Init+0x64>)
 8001f64:	f004 fb0e 	bl	8006584 <HAL_TIM_Base_Init>
 8001f68:	4603      	mov	r3, r0
 8001f6a:	2b00      	cmp	r3, #0
 8001f6c:	d001      	beq.n	8001f72 <MX_TIM6_Init+0x3e>
  {
    Error_Handler();
 8001f6e:	f000 fa0f 	bl	8002390 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8001f72:	2300      	movs	r3, #0
 8001f74:	603b      	str	r3, [r7, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8001f76:	2300      	movs	r3, #0
 8001f78:	607b      	str	r3, [r7, #4]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim6, &sMasterConfig) != HAL_OK)
 8001f7a:	463b      	mov	r3, r7
 8001f7c:	4619      	mov	r1, r3
 8001f7e:	4806      	ldr	r0, [pc, #24]	@ (8001f98 <MX_TIM6_Init+0x64>)
 8001f80:	f004 fc64 	bl	800684c <HAL_TIMEx_MasterConfigSynchronization>
 8001f84:	4603      	mov	r3, r0
 8001f86:	2b00      	cmp	r3, #0
 8001f88:	d001      	beq.n	8001f8e <MX_TIM6_Init+0x5a>
  {
    Error_Handler();
 8001f8a:	f000 fa01 	bl	8002390 <Error_Handler>
  }
  /* USER CODE BEGIN TIM6_Init 2 */

  /* USER CODE END TIM6_Init 2 */

}
 8001f8e:	bf00      	nop
 8001f90:	3708      	adds	r7, #8
 8001f92:	46bd      	mov	sp, r7
 8001f94:	bd80      	pop	{r7, pc}
 8001f96:	bf00      	nop
 8001f98:	20025c28 	.word	0x20025c28
 8001f9c:	40001000 	.word	0x40001000

08001fa0 <MX_TIM7_Init>:
  * @brief TIM7 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM7_Init(void)
{
 8001fa0:	b580      	push	{r7, lr}
 8001fa2:	b082      	sub	sp, #8
 8001fa4:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM7_Init 0 */

  /* USER CODE END TIM7_Init 0 */

  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8001fa6:	463b      	mov	r3, r7
 8001fa8:	2200      	movs	r2, #0
 8001faa:	601a      	str	r2, [r3, #0]
 8001fac:	605a      	str	r2, [r3, #4]

  /* USER CODE BEGIN TIM7_Init 1 */

  /* USER CODE END TIM7_Init 1 */

  htim7.Instance = TIM7;
 8001fae:	4b1e      	ldr	r3, [pc, #120]	@ (8002028 <MX_TIM7_Init+0x88>)
 8001fb0:	4a1e      	ldr	r2, [pc, #120]	@ (800202c <MX_TIM7_Init+0x8c>)
 8001fb2:	601a      	str	r2, [r3, #0]
  htim7.Instance->DIER = 1;
 8001fb4:	4b1c      	ldr	r3, [pc, #112]	@ (8002028 <MX_TIM7_Init+0x88>)
 8001fb6:	681b      	ldr	r3, [r3, #0]
 8001fb8:	2201      	movs	r2, #1
 8001fba:	60da      	str	r2, [r3, #12]
  htim7.Init.Prescaler = 1250;
 8001fbc:	4b1a      	ldr	r3, [pc, #104]	@ (8002028 <MX_TIM7_Init+0x88>)
 8001fbe:	f240 42e2 	movw	r2, #1250	@ 0x4e2
 8001fc2:	605a      	str	r2, [r3, #4]
  htim7.Init.CounterMode = TIM_COUNTERMODE_UP;
 8001fc4:	4b18      	ldr	r3, [pc, #96]	@ (8002028 <MX_TIM7_Init+0x88>)
 8001fc6:	2200      	movs	r2, #0
 8001fc8:	609a      	str	r2, [r3, #8]
  htim7.Init.Period = 65535;
 8001fca:	4b17      	ldr	r3, [pc, #92]	@ (8002028 <MX_TIM7_Init+0x88>)
 8001fcc:	f64f 72ff 	movw	r2, #65535	@ 0xffff
 8001fd0:	60da      	str	r2, [r3, #12]
  htim7.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8001fd2:	4b15      	ldr	r3, [pc, #84]	@ (8002028 <MX_TIM7_Init+0x88>)
 8001fd4:	2200      	movs	r2, #0
 8001fd6:	619a      	str	r2, [r3, #24]
  htim7.Instance->PSC = 6249999;
 8001fd8:	4b13      	ldr	r3, [pc, #76]	@ (8002028 <MX_TIM7_Init+0x88>)
 8001fda:	681b      	ldr	r3, [r3, #0]
 8001fdc:	4a14      	ldr	r2, [pc, #80]	@ (8002030 <MX_TIM7_Init+0x90>)
 8001fde:	629a      	str	r2, [r3, #40]	@ 0x28
  if (HAL_TIM_Base_Init(&htim7) != HAL_OK)
 8001fe0:	4811      	ldr	r0, [pc, #68]	@ (8002028 <MX_TIM7_Init+0x88>)
 8001fe2:	f004 facf 	bl	8006584 <HAL_TIM_Base_Init>
 8001fe6:	4603      	mov	r3, r0
 8001fe8:	2b00      	cmp	r3, #0
 8001fea:	d001      	beq.n	8001ff0 <MX_TIM7_Init+0x50>
  {
    Error_Handler();
 8001fec:	f000 f9d0 	bl	8002390 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8001ff0:	2300      	movs	r3, #0
 8001ff2:	603b      	str	r3, [r7, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8001ff4:	2300      	movs	r3, #0
 8001ff6:	607b      	str	r3, [r7, #4]
  HAL_NVIC_EnableIRQ(TIM7_IRQn);
 8001ff8:	2037      	movs	r0, #55	@ 0x37
 8001ffa:	f001 faa4 	bl	8003546 <HAL_NVIC_EnableIRQ>
  if (HAL_TIMEx_MasterConfigSynchronization(&htim7, &sMasterConfig) != HAL_OK)
 8001ffe:	463b      	mov	r3, r7
 8002000:	4619      	mov	r1, r3
 8002002:	4809      	ldr	r0, [pc, #36]	@ (8002028 <MX_TIM7_Init+0x88>)
 8002004:	f004 fc22 	bl	800684c <HAL_TIMEx_MasterConfigSynchronization>
 8002008:	4603      	mov	r3, r0
 800200a:	2b00      	cmp	r3, #0
 800200c:	d001      	beq.n	8002012 <MX_TIM7_Init+0x72>
  {
    Error_Handler();
 800200e:	f000 f9bf 	bl	8002390 <Error_Handler>
  }
  /* USER CODE BEGIN TIM7_Init 2 */
  TIM7 -> DIER |= 0x1;
 8002012:	4b06      	ldr	r3, [pc, #24]	@ (800202c <MX_TIM7_Init+0x8c>)
 8002014:	68db      	ldr	r3, [r3, #12]
 8002016:	4a05      	ldr	r2, [pc, #20]	@ (800202c <MX_TIM7_Init+0x8c>)
 8002018:	f043 0301 	orr.w	r3, r3, #1
 800201c:	60d3      	str	r3, [r2, #12]


  /* USER CODE END TIM7_Init 2 */

}
 800201e:	bf00      	nop
 8002020:	3708      	adds	r7, #8
 8002022:	46bd      	mov	sp, r7
 8002024:	bd80      	pop	{r7, pc}
 8002026:	bf00      	nop
 8002028:	20025a7c 	.word	0x20025a7c
 800202c:	40001400 	.word	0x40001400
 8002030:	005f5e0f 	.word	0x005f5e0f

08002034 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8002034:	b580      	push	{r7, lr}
 8002036:	b08e      	sub	sp, #56	@ 0x38
 8002038:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800203a:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 800203e:	2200      	movs	r2, #0
 8002040:	601a      	str	r2, [r3, #0]
 8002042:	605a      	str	r2, [r3, #4]
 8002044:	609a      	str	r2, [r3, #8]
 8002046:	60da      	str	r2, [r3, #12]
 8002048:	611a      	str	r2, [r3, #16]
/* USER CODE BEGIN MX_GPIO_Init_1 */
/* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 800204a:	2300      	movs	r3, #0
 800204c:	623b      	str	r3, [r7, #32]
 800204e:	4bb2      	ldr	r3, [pc, #712]	@ (8002318 <MX_GPIO_Init+0x2e4>)
 8002050:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002052:	4ab1      	ldr	r2, [pc, #708]	@ (8002318 <MX_GPIO_Init+0x2e4>)
 8002054:	f043 0304 	orr.w	r3, r3, #4
 8002058:	6313      	str	r3, [r2, #48]	@ 0x30
 800205a:	4baf      	ldr	r3, [pc, #700]	@ (8002318 <MX_GPIO_Init+0x2e4>)
 800205c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800205e:	f003 0304 	and.w	r3, r3, #4
 8002062:	623b      	str	r3, [r7, #32]
 8002064:	6a3b      	ldr	r3, [r7, #32]
  __HAL_RCC_GPIOF_CLK_ENABLE();
 8002066:	2300      	movs	r3, #0
 8002068:	61fb      	str	r3, [r7, #28]
 800206a:	4bab      	ldr	r3, [pc, #684]	@ (8002318 <MX_GPIO_Init+0x2e4>)
 800206c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800206e:	4aaa      	ldr	r2, [pc, #680]	@ (8002318 <MX_GPIO_Init+0x2e4>)
 8002070:	f043 0320 	orr.w	r3, r3, #32
 8002074:	6313      	str	r3, [r2, #48]	@ 0x30
 8002076:	4ba8      	ldr	r3, [pc, #672]	@ (8002318 <MX_GPIO_Init+0x2e4>)
 8002078:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800207a:	f003 0320 	and.w	r3, r3, #32
 800207e:	61fb      	str	r3, [r7, #28]
 8002080:	69fb      	ldr	r3, [r7, #28]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 8002082:	2300      	movs	r3, #0
 8002084:	61bb      	str	r3, [r7, #24]
 8002086:	4ba4      	ldr	r3, [pc, #656]	@ (8002318 <MX_GPIO_Init+0x2e4>)
 8002088:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800208a:	4aa3      	ldr	r2, [pc, #652]	@ (8002318 <MX_GPIO_Init+0x2e4>)
 800208c:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8002090:	6313      	str	r3, [r2, #48]	@ 0x30
 8002092:	4ba1      	ldr	r3, [pc, #644]	@ (8002318 <MX_GPIO_Init+0x2e4>)
 8002094:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002096:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800209a:	61bb      	str	r3, [r7, #24]
 800209c:	69bb      	ldr	r3, [r7, #24]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 800209e:	2300      	movs	r3, #0
 80020a0:	617b      	str	r3, [r7, #20]
 80020a2:	4b9d      	ldr	r3, [pc, #628]	@ (8002318 <MX_GPIO_Init+0x2e4>)
 80020a4:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80020a6:	4a9c      	ldr	r2, [pc, #624]	@ (8002318 <MX_GPIO_Init+0x2e4>)
 80020a8:	f043 0301 	orr.w	r3, r3, #1
 80020ac:	6313      	str	r3, [r2, #48]	@ 0x30
 80020ae:	4b9a      	ldr	r3, [pc, #616]	@ (8002318 <MX_GPIO_Init+0x2e4>)
 80020b0:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80020b2:	f003 0301 	and.w	r3, r3, #1
 80020b6:	617b      	str	r3, [r7, #20]
 80020b8:	697b      	ldr	r3, [r7, #20]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 80020ba:	2300      	movs	r3, #0
 80020bc:	613b      	str	r3, [r7, #16]
 80020be:	4b96      	ldr	r3, [pc, #600]	@ (8002318 <MX_GPIO_Init+0x2e4>)
 80020c0:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80020c2:	4a95      	ldr	r2, [pc, #596]	@ (8002318 <MX_GPIO_Init+0x2e4>)
 80020c4:	f043 0302 	orr.w	r3, r3, #2
 80020c8:	6313      	str	r3, [r2, #48]	@ 0x30
 80020ca:	4b93      	ldr	r3, [pc, #588]	@ (8002318 <MX_GPIO_Init+0x2e4>)
 80020cc:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80020ce:	f003 0302 	and.w	r3, r3, #2
 80020d2:	613b      	str	r3, [r7, #16]
 80020d4:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOG_CLK_ENABLE();
 80020d6:	2300      	movs	r3, #0
 80020d8:	60fb      	str	r3, [r7, #12]
 80020da:	4b8f      	ldr	r3, [pc, #572]	@ (8002318 <MX_GPIO_Init+0x2e4>)
 80020dc:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80020de:	4a8e      	ldr	r2, [pc, #568]	@ (8002318 <MX_GPIO_Init+0x2e4>)
 80020e0:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 80020e4:	6313      	str	r3, [r2, #48]	@ 0x30
 80020e6:	4b8c      	ldr	r3, [pc, #560]	@ (8002318 <MX_GPIO_Init+0x2e4>)
 80020e8:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80020ea:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80020ee:	60fb      	str	r3, [r7, #12]
 80020f0:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOE_CLK_ENABLE();
 80020f2:	2300      	movs	r3, #0
 80020f4:	60bb      	str	r3, [r7, #8]
 80020f6:	4b88      	ldr	r3, [pc, #544]	@ (8002318 <MX_GPIO_Init+0x2e4>)
 80020f8:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80020fa:	4a87      	ldr	r2, [pc, #540]	@ (8002318 <MX_GPIO_Init+0x2e4>)
 80020fc:	f043 0310 	orr.w	r3, r3, #16
 8002100:	6313      	str	r3, [r2, #48]	@ 0x30
 8002102:	4b85      	ldr	r3, [pc, #532]	@ (8002318 <MX_GPIO_Init+0x2e4>)
 8002104:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002106:	f003 0310 	and.w	r3, r3, #16
 800210a:	60bb      	str	r3, [r7, #8]
 800210c:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 800210e:	2300      	movs	r3, #0
 8002110:	607b      	str	r3, [r7, #4]
 8002112:	4b81      	ldr	r3, [pc, #516]	@ (8002318 <MX_GPIO_Init+0x2e4>)
 8002114:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002116:	4a80      	ldr	r2, [pc, #512]	@ (8002318 <MX_GPIO_Init+0x2e4>)
 8002118:	f043 0308 	orr.w	r3, r3, #8
 800211c:	6313      	str	r3, [r2, #48]	@ 0x30
 800211e:	4b7e      	ldr	r3, [pc, #504]	@ (8002318 <MX_GPIO_Init+0x2e4>)
 8002120:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002122:	f003 0308 	and.w	r3, r3, #8
 8002126:	607b      	str	r3, [r7, #4]
 8002128:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOC, NCS_MEMS_SPI_Pin|CSX_Pin|OTG_FS_PSO_Pin, GPIO_PIN_RESET);
 800212a:	2200      	movs	r2, #0
 800212c:	2116      	movs	r1, #22
 800212e:	487b      	ldr	r0, [pc, #492]	@ (800231c <MX_GPIO_Init+0x2e8>)
 8002130:	f001 fd10 	bl	8003b54 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(ACP_RST_GPIO_Port, ACP_RST_Pin, GPIO_PIN_RESET);
 8002134:	2200      	movs	r2, #0
 8002136:	2180      	movs	r1, #128	@ 0x80
 8002138:	4879      	ldr	r0, [pc, #484]	@ (8002320 <MX_GPIO_Init+0x2ec>)
 800213a:	f001 fd0b 	bl	8003b54 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOD, RDX_Pin|WRX_DCX_Pin, GPIO_PIN_RESET);
 800213e:	2200      	movs	r2, #0
 8002140:	f44f 5140 	mov.w	r1, #12288	@ 0x3000
 8002144:	4877      	ldr	r0, [pc, #476]	@ (8002324 <MX_GPIO_Init+0x2f0>)
 8002146:	f001 fd05 	bl	8003b54 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOG, LD3_Pin|LD4_Pin, GPIO_PIN_RESET);
 800214a:	2200      	movs	r2, #0
 800214c:	f44f 41c0 	mov.w	r1, #24576	@ 0x6000
 8002150:	4875      	ldr	r0, [pc, #468]	@ (8002328 <MX_GPIO_Init+0x2f4>)
 8002152:	f001 fcff 	bl	8003b54 <HAL_GPIO_WritePin>

  /*Configure GPIO pins : A0_Pin A1_Pin A2_Pin A3_Pin
                           A4_Pin A5_Pin SDNRAS_Pin A6_Pin
                           A7_Pin A8_Pin A9_Pin */
  GPIO_InitStruct.Pin = A0_Pin|A1_Pin|A2_Pin|A3_Pin
 8002156:	f64f 033f 	movw	r3, #63551	@ 0xf83f
 800215a:	627b      	str	r3, [r7, #36]	@ 0x24
                          |A4_Pin|A5_Pin|SDNRAS_Pin|A6_Pin
                          |A7_Pin|A8_Pin|A9_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800215c:	2302      	movs	r3, #2
 800215e:	62bb      	str	r3, [r7, #40]	@ 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002160:	2300      	movs	r3, #0
 8002162:	62fb      	str	r3, [r7, #44]	@ 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8002164:	2303      	movs	r3, #3
 8002166:	633b      	str	r3, [r7, #48]	@ 0x30
  GPIO_InitStruct.Alternate = GPIO_AF12_FMC;
 8002168:	230c      	movs	r3, #12
 800216a:	637b      	str	r3, [r7, #52]	@ 0x34
  HAL_GPIO_Init(GPIOF, &GPIO_InitStruct);
 800216c:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8002170:	4619      	mov	r1, r3
 8002172:	486e      	ldr	r0, [pc, #440]	@ (800232c <MX_GPIO_Init+0x2f8>)
 8002174:	f001 fa36 	bl	80035e4 <HAL_GPIO_Init>

  /*Configure GPIO pin : SDNWE_Pin */
  GPIO_InitStruct.Pin = SDNWE_Pin;
 8002178:	2301      	movs	r3, #1
 800217a:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800217c:	2302      	movs	r3, #2
 800217e:	62bb      	str	r3, [r7, #40]	@ 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002180:	2300      	movs	r3, #0
 8002182:	62fb      	str	r3, [r7, #44]	@ 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8002184:	2303      	movs	r3, #3
 8002186:	633b      	str	r3, [r7, #48]	@ 0x30
  GPIO_InitStruct.Alternate = GPIO_AF12_FMC;
 8002188:	230c      	movs	r3, #12
 800218a:	637b      	str	r3, [r7, #52]	@ 0x34
  HAL_GPIO_Init(SDNWE_GPIO_Port, &GPIO_InitStruct);
 800218c:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8002190:	4619      	mov	r1, r3
 8002192:	4862      	ldr	r0, [pc, #392]	@ (800231c <MX_GPIO_Init+0x2e8>)
 8002194:	f001 fa26 	bl	80035e4 <HAL_GPIO_Init>

  /*Configure GPIO pins : NCS_MEMS_SPI_Pin CSX_Pin OTG_FS_PSO_Pin */
  GPIO_InitStruct.Pin = NCS_MEMS_SPI_Pin|CSX_Pin|OTG_FS_PSO_Pin;
 8002198:	2316      	movs	r3, #22
 800219a:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800219c:	2301      	movs	r3, #1
 800219e:	62bb      	str	r3, [r7, #40]	@ 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80021a0:	2300      	movs	r3, #0
 80021a2:	62fb      	str	r3, [r7, #44]	@ 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80021a4:	2300      	movs	r3, #0
 80021a6:	633b      	str	r3, [r7, #48]	@ 0x30
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 80021a8:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 80021ac:	4619      	mov	r1, r3
 80021ae:	485b      	ldr	r0, [pc, #364]	@ (800231c <MX_GPIO_Init+0x2e8>)
 80021b0:	f001 fa18 	bl	80035e4 <HAL_GPIO_Init>

  /*Configure GPIO pins : B1_Pin MEMS_INT1_Pin MEMS_INT2_Pin TP_INT1_Pin */
  GPIO_InitStruct.Pin = B1_Pin|MEMS_INT1_Pin|MEMS_INT2_Pin|TP_INT1_Pin;
 80021b4:	f248 0307 	movw	r3, #32775	@ 0x8007
 80021b8:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_EVT_RISING;
 80021ba:	f44f 1390 	mov.w	r3, #1179648	@ 0x120000
 80021be:	62bb      	str	r3, [r7, #40]	@ 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80021c0:	2300      	movs	r3, #0
 80021c2:	62fb      	str	r3, [r7, #44]	@ 0x2c
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80021c4:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 80021c8:	4619      	mov	r1, r3
 80021ca:	4855      	ldr	r0, [pc, #340]	@ (8002320 <MX_GPIO_Init+0x2ec>)
 80021cc:	f001 fa0a 	bl	80035e4 <HAL_GPIO_Init>

  /*Configure GPIO pin : ACP_RST_Pin */
  GPIO_InitStruct.Pin = ACP_RST_Pin;
 80021d0:	2380      	movs	r3, #128	@ 0x80
 80021d2:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80021d4:	2301      	movs	r3, #1
 80021d6:	62bb      	str	r3, [r7, #40]	@ 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80021d8:	2300      	movs	r3, #0
 80021da:	62fb      	str	r3, [r7, #44]	@ 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80021dc:	2300      	movs	r3, #0
 80021de:	633b      	str	r3, [r7, #48]	@ 0x30
  HAL_GPIO_Init(ACP_RST_GPIO_Port, &GPIO_InitStruct);
 80021e0:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 80021e4:	4619      	mov	r1, r3
 80021e6:	484e      	ldr	r0, [pc, #312]	@ (8002320 <MX_GPIO_Init+0x2ec>)
 80021e8:	f001 f9fc 	bl	80035e4 <HAL_GPIO_Init>

  /*Configure GPIO pin : OTG_FS_OC_Pin */
  GPIO_InitStruct.Pin = OTG_FS_OC_Pin;
 80021ec:	2320      	movs	r3, #32
 80021ee:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_EVT_RISING;
 80021f0:	f44f 1390 	mov.w	r3, #1179648	@ 0x120000
 80021f4:	62bb      	str	r3, [r7, #40]	@ 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80021f6:	2300      	movs	r3, #0
 80021f8:	62fb      	str	r3, [r7, #44]	@ 0x2c
  HAL_GPIO_Init(OTG_FS_OC_GPIO_Port, &GPIO_InitStruct);
 80021fa:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 80021fe:	4619      	mov	r1, r3
 8002200:	4846      	ldr	r0, [pc, #280]	@ (800231c <MX_GPIO_Init+0x2e8>)
 8002202:	f001 f9ef 	bl	80035e4 <HAL_GPIO_Init>

  /*Configure GPIO pin : BOOT1_Pin */
  GPIO_InitStruct.Pin = BOOT1_Pin;
 8002206:	2304      	movs	r3, #4
 8002208:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 800220a:	2300      	movs	r3, #0
 800220c:	62bb      	str	r3, [r7, #40]	@ 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800220e:	2300      	movs	r3, #0
 8002210:	62fb      	str	r3, [r7, #44]	@ 0x2c
  HAL_GPIO_Init(BOOT1_GPIO_Port, &GPIO_InitStruct);
 8002212:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8002216:	4619      	mov	r1, r3
 8002218:	4845      	ldr	r0, [pc, #276]	@ (8002330 <MX_GPIO_Init+0x2fc>)
 800221a:	f001 f9e3 	bl	80035e4 <HAL_GPIO_Init>

  /*Configure GPIO pins : A10_Pin A11_Pin BA0_Pin BA1_Pin
                           SDCLK_Pin SDNCAS_Pin */
  GPIO_InitStruct.Pin = A10_Pin|A11_Pin|BA0_Pin|BA1_Pin
 800221e:	f248 1333 	movw	r3, #33075	@ 0x8133
 8002222:	627b      	str	r3, [r7, #36]	@ 0x24
                          |SDCLK_Pin|SDNCAS_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002224:	2302      	movs	r3, #2
 8002226:	62bb      	str	r3, [r7, #40]	@ 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002228:	2300      	movs	r3, #0
 800222a:	62fb      	str	r3, [r7, #44]	@ 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800222c:	2303      	movs	r3, #3
 800222e:	633b      	str	r3, [r7, #48]	@ 0x30
  GPIO_InitStruct.Alternate = GPIO_AF12_FMC;
 8002230:	230c      	movs	r3, #12
 8002232:	637b      	str	r3, [r7, #52]	@ 0x34
  HAL_GPIO_Init(GPIOG, &GPIO_InitStruct);
 8002234:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8002238:	4619      	mov	r1, r3
 800223a:	483b      	ldr	r0, [pc, #236]	@ (8002328 <MX_GPIO_Init+0x2f4>)
 800223c:	f001 f9d2 	bl	80035e4 <HAL_GPIO_Init>

  /*Configure GPIO pins : D4_Pin D5_Pin D6_Pin D7_Pin
                           D8_Pin D9_Pin D10_Pin D11_Pin
                           D12_Pin NBL0_Pin NBL1_Pin */
  GPIO_InitStruct.Pin = D4_Pin|D5_Pin|D6_Pin|D7_Pin
 8002240:	f64f 7383 	movw	r3, #65411	@ 0xff83
 8002244:	627b      	str	r3, [r7, #36]	@ 0x24
                          |D8_Pin|D9_Pin|D10_Pin|D11_Pin
                          |D12_Pin|NBL0_Pin|NBL1_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002246:	2302      	movs	r3, #2
 8002248:	62bb      	str	r3, [r7, #40]	@ 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800224a:	2300      	movs	r3, #0
 800224c:	62fb      	str	r3, [r7, #44]	@ 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800224e:	2303      	movs	r3, #3
 8002250:	633b      	str	r3, [r7, #48]	@ 0x30
  GPIO_InitStruct.Alternate = GPIO_AF12_FMC;
 8002252:	230c      	movs	r3, #12
 8002254:	637b      	str	r3, [r7, #52]	@ 0x34
  HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 8002256:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 800225a:	4619      	mov	r1, r3
 800225c:	4835      	ldr	r0, [pc, #212]	@ (8002334 <MX_GPIO_Init+0x300>)
 800225e:	f001 f9c1 	bl	80035e4 <HAL_GPIO_Init>

  /*Configure GPIO pins : OTG_HS_ID_Pin OTG_HS_DM_Pin OTG_HS_DP_Pin */
  GPIO_InitStruct.Pin = OTG_HS_ID_Pin|OTG_HS_DM_Pin|OTG_HS_DP_Pin;
 8002262:	f44f 4350 	mov.w	r3, #53248	@ 0xd000
 8002266:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002268:	2302      	movs	r3, #2
 800226a:	62bb      	str	r3, [r7, #40]	@ 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800226c:	2300      	movs	r3, #0
 800226e:	62fb      	str	r3, [r7, #44]	@ 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002270:	2300      	movs	r3, #0
 8002272:	633b      	str	r3, [r7, #48]	@ 0x30
  GPIO_InitStruct.Alternate = GPIO_AF12_OTG_HS_FS;
 8002274:	230c      	movs	r3, #12
 8002276:	637b      	str	r3, [r7, #52]	@ 0x34
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8002278:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 800227c:	4619      	mov	r1, r3
 800227e:	482c      	ldr	r0, [pc, #176]	@ (8002330 <MX_GPIO_Init+0x2fc>)
 8002280:	f001 f9b0 	bl	80035e4 <HAL_GPIO_Init>

  /*Configure GPIO pin : VBUS_HS_Pin */
  GPIO_InitStruct.Pin = VBUS_HS_Pin;
 8002284:	f44f 5300 	mov.w	r3, #8192	@ 0x2000
 8002288:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 800228a:	2300      	movs	r3, #0
 800228c:	62bb      	str	r3, [r7, #40]	@ 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800228e:	2300      	movs	r3, #0
 8002290:	62fb      	str	r3, [r7, #44]	@ 0x2c
  HAL_GPIO_Init(VBUS_HS_GPIO_Port, &GPIO_InitStruct);
 8002292:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8002296:	4619      	mov	r1, r3
 8002298:	4825      	ldr	r0, [pc, #148]	@ (8002330 <MX_GPIO_Init+0x2fc>)
 800229a:	f001 f9a3 	bl	80035e4 <HAL_GPIO_Init>

  /*Configure GPIO pins : D13_Pin D14_Pin D15_Pin D0_Pin
                           D1_Pin D2_Pin D3_Pin */
  GPIO_InitStruct.Pin = D13_Pin|D14_Pin|D15_Pin|D0_Pin
 800229e:	f24c 7303 	movw	r3, #50947	@ 0xc703
 80022a2:	627b      	str	r3, [r7, #36]	@ 0x24
                          |D1_Pin|D2_Pin|D3_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80022a4:	2302      	movs	r3, #2
 80022a6:	62bb      	str	r3, [r7, #40]	@ 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80022a8:	2300      	movs	r3, #0
 80022aa:	62fb      	str	r3, [r7, #44]	@ 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80022ac:	2303      	movs	r3, #3
 80022ae:	633b      	str	r3, [r7, #48]	@ 0x30
  GPIO_InitStruct.Alternate = GPIO_AF12_FMC;
 80022b0:	230c      	movs	r3, #12
 80022b2:	637b      	str	r3, [r7, #52]	@ 0x34
  HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 80022b4:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 80022b8:	4619      	mov	r1, r3
 80022ba:	481a      	ldr	r0, [pc, #104]	@ (8002324 <MX_GPIO_Init+0x2f0>)
 80022bc:	f001 f992 	bl	80035e4 <HAL_GPIO_Init>

  /*Configure GPIO pin : TE_Pin */
  GPIO_InitStruct.Pin = TE_Pin;
 80022c0:	f44f 6300 	mov.w	r3, #2048	@ 0x800
 80022c4:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 80022c6:	2300      	movs	r3, #0
 80022c8:	62bb      	str	r3, [r7, #40]	@ 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80022ca:	2300      	movs	r3, #0
 80022cc:	62fb      	str	r3, [r7, #44]	@ 0x2c
  HAL_GPIO_Init(TE_GPIO_Port, &GPIO_InitStruct);
 80022ce:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 80022d2:	4619      	mov	r1, r3
 80022d4:	4813      	ldr	r0, [pc, #76]	@ (8002324 <MX_GPIO_Init+0x2f0>)
 80022d6:	f001 f985 	bl	80035e4 <HAL_GPIO_Init>

  /*Configure GPIO pins : RDX_Pin WRX_DCX_Pin */
  GPIO_InitStruct.Pin = RDX_Pin|WRX_DCX_Pin;
 80022da:	f44f 5340 	mov.w	r3, #12288	@ 0x3000
 80022de:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80022e0:	2301      	movs	r3, #1
 80022e2:	62bb      	str	r3, [r7, #40]	@ 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80022e4:	2300      	movs	r3, #0
 80022e6:	62fb      	str	r3, [r7, #44]	@ 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80022e8:	2300      	movs	r3, #0
 80022ea:	633b      	str	r3, [r7, #48]	@ 0x30
  HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 80022ec:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 80022f0:	4619      	mov	r1, r3
 80022f2:	480c      	ldr	r0, [pc, #48]	@ (8002324 <MX_GPIO_Init+0x2f0>)
 80022f4:	f001 f976 	bl	80035e4 <HAL_GPIO_Init>

  /*Configure GPIO pins : STLINK_RX_Pin STLINK_TX_Pin */
  GPIO_InitStruct.Pin = STLINK_RX_Pin|STLINK_TX_Pin;
 80022f8:	f44f 63c0 	mov.w	r3, #1536	@ 0x600
 80022fc:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80022fe:	2302      	movs	r3, #2
 8002300:	62bb      	str	r3, [r7, #40]	@ 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002302:	2300      	movs	r3, #0
 8002304:	62fb      	str	r3, [r7, #44]	@ 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8002306:	2303      	movs	r3, #3
 8002308:	633b      	str	r3, [r7, #48]	@ 0x30
  GPIO_InitStruct.Alternate = GPIO_AF7_USART1;
 800230a:	2307      	movs	r3, #7
 800230c:	637b      	str	r3, [r7, #52]	@ 0x34
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800230e:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8002312:	4619      	mov	r1, r3
 8002314:	e010      	b.n	8002338 <MX_GPIO_Init+0x304>
 8002316:	bf00      	nop
 8002318:	40023800 	.word	0x40023800
 800231c:	40020800 	.word	0x40020800
 8002320:	40020000 	.word	0x40020000
 8002324:	40020c00 	.word	0x40020c00
 8002328:	40021800 	.word	0x40021800
 800232c:	40021400 	.word	0x40021400
 8002330:	40020400 	.word	0x40020400
 8002334:	40021000 	.word	0x40021000
 8002338:	4812      	ldr	r0, [pc, #72]	@ (8002384 <MX_GPIO_Init+0x350>)
 800233a:	f001 f953 	bl	80035e4 <HAL_GPIO_Init>

  /*Configure GPIO pins : LD3_Pin LD4_Pin */
  GPIO_InitStruct.Pin = LD3_Pin|LD4_Pin;
 800233e:	f44f 43c0 	mov.w	r3, #24576	@ 0x6000
 8002342:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8002344:	2301      	movs	r3, #1
 8002346:	62bb      	str	r3, [r7, #40]	@ 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002348:	2300      	movs	r3, #0
 800234a:	62fb      	str	r3, [r7, #44]	@ 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800234c:	2300      	movs	r3, #0
 800234e:	633b      	str	r3, [r7, #48]	@ 0x30
  HAL_GPIO_Init(GPIOG, &GPIO_InitStruct);
 8002350:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8002354:	4619      	mov	r1, r3
 8002356:	480c      	ldr	r0, [pc, #48]	@ (8002388 <MX_GPIO_Init+0x354>)
 8002358:	f001 f944 	bl	80035e4 <HAL_GPIO_Init>

  /*Configure GPIO pins : SDCKE1_Pin SDNE1_Pin */
  GPIO_InitStruct.Pin = SDCKE1_Pin|SDNE1_Pin;
 800235c:	2360      	movs	r3, #96	@ 0x60
 800235e:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002360:	2302      	movs	r3, #2
 8002362:	62bb      	str	r3, [r7, #40]	@ 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002364:	2300      	movs	r3, #0
 8002366:	62fb      	str	r3, [r7, #44]	@ 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8002368:	2303      	movs	r3, #3
 800236a:	633b      	str	r3, [r7, #48]	@ 0x30
  GPIO_InitStruct.Alternate = GPIO_AF12_FMC;
 800236c:	230c      	movs	r3, #12
 800236e:	637b      	str	r3, [r7, #52]	@ 0x34
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8002370:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8002374:	4619      	mov	r1, r3
 8002376:	4805      	ldr	r0, [pc, #20]	@ (800238c <MX_GPIO_Init+0x358>)
 8002378:	f001 f934 	bl	80035e4 <HAL_GPIO_Init>

/* USER CODE BEGIN MX_GPIO_Init_2 */
/* USER CODE END MX_GPIO_Init_2 */
}
 800237c:	bf00      	nop
 800237e:	3738      	adds	r7, #56	@ 0x38
 8002380:	46bd      	mov	sp, r7
 8002382:	bd80      	pop	{r7, pc}
 8002384:	40020000 	.word	0x40020000
 8002388:	40021800 	.word	0x40021800
 800238c:	40020400 	.word	0x40020400

08002390 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8002390:	b480      	push	{r7}
 8002392:	af00      	add	r7, sp, #0
  __ASM volatile ("cpsid i" : : : "memory");
 8002394:	b672      	cpsid	i
}
 8002396:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8002398:	bf00      	nop
 800239a:	e7fd      	b.n	8002398 <Error_Handler+0x8>

0800239c <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 800239c:	b580      	push	{r7, lr}
 800239e:	b082      	sub	sp, #8
 80023a0:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 80023a2:	2300      	movs	r3, #0
 80023a4:	607b      	str	r3, [r7, #4]
 80023a6:	4b10      	ldr	r3, [pc, #64]	@ (80023e8 <HAL_MspInit+0x4c>)
 80023a8:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80023aa:	4a0f      	ldr	r2, [pc, #60]	@ (80023e8 <HAL_MspInit+0x4c>)
 80023ac:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 80023b0:	6453      	str	r3, [r2, #68]	@ 0x44
 80023b2:	4b0d      	ldr	r3, [pc, #52]	@ (80023e8 <HAL_MspInit+0x4c>)
 80023b4:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80023b6:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 80023ba:	607b      	str	r3, [r7, #4]
 80023bc:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 80023be:	2300      	movs	r3, #0
 80023c0:	603b      	str	r3, [r7, #0]
 80023c2:	4b09      	ldr	r3, [pc, #36]	@ (80023e8 <HAL_MspInit+0x4c>)
 80023c4:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80023c6:	4a08      	ldr	r2, [pc, #32]	@ (80023e8 <HAL_MspInit+0x4c>)
 80023c8:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 80023cc:	6413      	str	r3, [r2, #64]	@ 0x40
 80023ce:	4b06      	ldr	r3, [pc, #24]	@ (80023e8 <HAL_MspInit+0x4c>)
 80023d0:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80023d2:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 80023d6:	603b      	str	r3, [r7, #0]
 80023d8:	683b      	ldr	r3, [r7, #0]

  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_0);
 80023da:	2007      	movs	r0, #7
 80023dc:	f001 f88c 	bl	80034f8 <HAL_NVIC_SetPriorityGrouping>
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 80023e0:	bf00      	nop
 80023e2:	3708      	adds	r7, #8
 80023e4:	46bd      	mov	sp, r7
 80023e6:	bd80      	pop	{r7, pc}
 80023e8:	40023800 	.word	0x40023800

080023ec <HAL_I2C_MspInit>:
* This function configures the hardware resources used in this example
* @param hi2c: I2C handle pointer
* @retval None
*/
void HAL_I2C_MspInit(I2C_HandleTypeDef* hi2c)
{
 80023ec:	b580      	push	{r7, lr}
 80023ee:	b08a      	sub	sp, #40	@ 0x28
 80023f0:	af00      	add	r7, sp, #0
 80023f2:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80023f4:	f107 0314 	add.w	r3, r7, #20
 80023f8:	2200      	movs	r2, #0
 80023fa:	601a      	str	r2, [r3, #0]
 80023fc:	605a      	str	r2, [r3, #4]
 80023fe:	609a      	str	r2, [r3, #8]
 8002400:	60da      	str	r2, [r3, #12]
 8002402:	611a      	str	r2, [r3, #16]
  if(hi2c->Instance==I2C3)
 8002404:	687b      	ldr	r3, [r7, #4]
 8002406:	681b      	ldr	r3, [r3, #0]
 8002408:	4a29      	ldr	r2, [pc, #164]	@ (80024b0 <HAL_I2C_MspInit+0xc4>)
 800240a:	4293      	cmp	r3, r2
 800240c:	d14b      	bne.n	80024a6 <HAL_I2C_MspInit+0xba>
  {
  /* USER CODE BEGIN I2C3_MspInit 0 */

  /* USER CODE END I2C3_MspInit 0 */

    __HAL_RCC_GPIOC_CLK_ENABLE();
 800240e:	2300      	movs	r3, #0
 8002410:	613b      	str	r3, [r7, #16]
 8002412:	4b28      	ldr	r3, [pc, #160]	@ (80024b4 <HAL_I2C_MspInit+0xc8>)
 8002414:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002416:	4a27      	ldr	r2, [pc, #156]	@ (80024b4 <HAL_I2C_MspInit+0xc8>)
 8002418:	f043 0304 	orr.w	r3, r3, #4
 800241c:	6313      	str	r3, [r2, #48]	@ 0x30
 800241e:	4b25      	ldr	r3, [pc, #148]	@ (80024b4 <HAL_I2C_MspInit+0xc8>)
 8002420:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002422:	f003 0304 	and.w	r3, r3, #4
 8002426:	613b      	str	r3, [r7, #16]
 8002428:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 800242a:	2300      	movs	r3, #0
 800242c:	60fb      	str	r3, [r7, #12]
 800242e:	4b21      	ldr	r3, [pc, #132]	@ (80024b4 <HAL_I2C_MspInit+0xc8>)
 8002430:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002432:	4a20      	ldr	r2, [pc, #128]	@ (80024b4 <HAL_I2C_MspInit+0xc8>)
 8002434:	f043 0301 	orr.w	r3, r3, #1
 8002438:	6313      	str	r3, [r2, #48]	@ 0x30
 800243a:	4b1e      	ldr	r3, [pc, #120]	@ (80024b4 <HAL_I2C_MspInit+0xc8>)
 800243c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800243e:	f003 0301 	and.w	r3, r3, #1
 8002442:	60fb      	str	r3, [r7, #12]
 8002444:	68fb      	ldr	r3, [r7, #12]
    /**I2C3 GPIO Configuration
    PC9     ------> I2C3_SDA
    PA8     ------> I2C3_SCL
    */
    GPIO_InitStruct.Pin = I2C3_SDA_Pin;
 8002446:	f44f 7300 	mov.w	r3, #512	@ 0x200
 800244a:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 800244c:	2312      	movs	r3, #18
 800244e:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002450:	2300      	movs	r3, #0
 8002452:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002454:	2300      	movs	r3, #0
 8002456:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C3;
 8002458:	2304      	movs	r3, #4
 800245a:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(I2C3_SDA_GPIO_Port, &GPIO_InitStruct);
 800245c:	f107 0314 	add.w	r3, r7, #20
 8002460:	4619      	mov	r1, r3
 8002462:	4815      	ldr	r0, [pc, #84]	@ (80024b8 <HAL_I2C_MspInit+0xcc>)
 8002464:	f001 f8be 	bl	80035e4 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = I2C3_SCL_Pin;
 8002468:	f44f 7380 	mov.w	r3, #256	@ 0x100
 800246c:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 800246e:	2312      	movs	r3, #18
 8002470:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002472:	2300      	movs	r3, #0
 8002474:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002476:	2300      	movs	r3, #0
 8002478:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C3;
 800247a:	2304      	movs	r3, #4
 800247c:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(I2C3_SCL_GPIO_Port, &GPIO_InitStruct);
 800247e:	f107 0314 	add.w	r3, r7, #20
 8002482:	4619      	mov	r1, r3
 8002484:	480d      	ldr	r0, [pc, #52]	@ (80024bc <HAL_I2C_MspInit+0xd0>)
 8002486:	f001 f8ad 	bl	80035e4 <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_I2C3_CLK_ENABLE();
 800248a:	2300      	movs	r3, #0
 800248c:	60bb      	str	r3, [r7, #8]
 800248e:	4b09      	ldr	r3, [pc, #36]	@ (80024b4 <HAL_I2C_MspInit+0xc8>)
 8002490:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002492:	4a08      	ldr	r2, [pc, #32]	@ (80024b4 <HAL_I2C_MspInit+0xc8>)
 8002494:	f443 0300 	orr.w	r3, r3, #8388608	@ 0x800000
 8002498:	6413      	str	r3, [r2, #64]	@ 0x40
 800249a:	4b06      	ldr	r3, [pc, #24]	@ (80024b4 <HAL_I2C_MspInit+0xc8>)
 800249c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800249e:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 80024a2:	60bb      	str	r3, [r7, #8]
 80024a4:	68bb      	ldr	r3, [r7, #8]

  /* USER CODE END I2C3_MspInit 1 */

  }

}
 80024a6:	bf00      	nop
 80024a8:	3728      	adds	r7, #40	@ 0x28
 80024aa:	46bd      	mov	sp, r7
 80024ac:	bd80      	pop	{r7, pc}
 80024ae:	bf00      	nop
 80024b0:	40005c00 	.word	0x40005c00
 80024b4:	40023800 	.word	0x40023800
 80024b8:	40020800 	.word	0x40020800
 80024bc:	40020000 	.word	0x40020000

080024c0 <HAL_LTDC_MspInit>:
* This function configures the hardware resources used in this example
* @param hltdc: LTDC handle pointer
* @retval None
*/
void HAL_LTDC_MspInit(LTDC_HandleTypeDef* hltdc)
{
 80024c0:	b580      	push	{r7, lr}
 80024c2:	b09a      	sub	sp, #104	@ 0x68
 80024c4:	af00      	add	r7, sp, #0
 80024c6:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80024c8:	f107 0354 	add.w	r3, r7, #84	@ 0x54
 80024cc:	2200      	movs	r2, #0
 80024ce:	601a      	str	r2, [r3, #0]
 80024d0:	605a      	str	r2, [r3, #4]
 80024d2:	609a      	str	r2, [r3, #8]
 80024d4:	60da      	str	r2, [r3, #12]
 80024d6:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 80024d8:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 80024dc:	2230      	movs	r2, #48	@ 0x30
 80024de:	2100      	movs	r1, #0
 80024e0:	4618      	mov	r0, r3
 80024e2:	f004 fbdb 	bl	8006c9c <memset>
  if(hltdc->Instance==LTDC)
 80024e6:	687b      	ldr	r3, [r7, #4]
 80024e8:	681b      	ldr	r3, [r3, #0]
 80024ea:	4a81      	ldr	r2, [pc, #516]	@ (80026f0 <HAL_LTDC_MspInit+0x230>)
 80024ec:	4293      	cmp	r3, r2
 80024ee:	f040 80fa 	bne.w	80026e6 <HAL_LTDC_MspInit+0x226>

  /* USER CODE END LTDC_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_LTDC;
 80024f2:	2308      	movs	r3, #8
 80024f4:	627b      	str	r3, [r7, #36]	@ 0x24
    PeriphClkInitStruct.PLLSAI.PLLSAIN = 50;
 80024f6:	2332      	movs	r3, #50	@ 0x32
 80024f8:	637b      	str	r3, [r7, #52]	@ 0x34
    PeriphClkInitStruct.PLLSAI.PLLSAIR = 2;
 80024fa:	2302      	movs	r3, #2
 80024fc:	63fb      	str	r3, [r7, #60]	@ 0x3c
    PeriphClkInitStruct.PLLSAIDivR = RCC_PLLSAIDIVR_2;
 80024fe:	2300      	movs	r3, #0
 8002500:	64bb      	str	r3, [r7, #72]	@ 0x48
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8002502:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8002506:	4618      	mov	r0, r3
 8002508:	f003 fb08 	bl	8005b1c <HAL_RCCEx_PeriphCLKConfig>
 800250c:	4603      	mov	r3, r0
 800250e:	2b00      	cmp	r3, #0
 8002510:	d001      	beq.n	8002516 <HAL_LTDC_MspInit+0x56>
    {
      Error_Handler();
 8002512:	f7ff ff3d 	bl	8002390 <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_LTDC_CLK_ENABLE();
 8002516:	2300      	movs	r3, #0
 8002518:	623b      	str	r3, [r7, #32]
 800251a:	4b76      	ldr	r3, [pc, #472]	@ (80026f4 <HAL_LTDC_MspInit+0x234>)
 800251c:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800251e:	4a75      	ldr	r2, [pc, #468]	@ (80026f4 <HAL_LTDC_MspInit+0x234>)
 8002520:	f043 6380 	orr.w	r3, r3, #67108864	@ 0x4000000
 8002524:	6453      	str	r3, [r2, #68]	@ 0x44
 8002526:	4b73      	ldr	r3, [pc, #460]	@ (80026f4 <HAL_LTDC_MspInit+0x234>)
 8002528:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800252a:	f003 6380 	and.w	r3, r3, #67108864	@ 0x4000000
 800252e:	623b      	str	r3, [r7, #32]
 8002530:	6a3b      	ldr	r3, [r7, #32]

    __HAL_RCC_GPIOF_CLK_ENABLE();
 8002532:	2300      	movs	r3, #0
 8002534:	61fb      	str	r3, [r7, #28]
 8002536:	4b6f      	ldr	r3, [pc, #444]	@ (80026f4 <HAL_LTDC_MspInit+0x234>)
 8002538:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800253a:	4a6e      	ldr	r2, [pc, #440]	@ (80026f4 <HAL_LTDC_MspInit+0x234>)
 800253c:	f043 0320 	orr.w	r3, r3, #32
 8002540:	6313      	str	r3, [r2, #48]	@ 0x30
 8002542:	4b6c      	ldr	r3, [pc, #432]	@ (80026f4 <HAL_LTDC_MspInit+0x234>)
 8002544:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002546:	f003 0320 	and.w	r3, r3, #32
 800254a:	61fb      	str	r3, [r7, #28]
 800254c:	69fb      	ldr	r3, [r7, #28]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 800254e:	2300      	movs	r3, #0
 8002550:	61bb      	str	r3, [r7, #24]
 8002552:	4b68      	ldr	r3, [pc, #416]	@ (80026f4 <HAL_LTDC_MspInit+0x234>)
 8002554:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002556:	4a67      	ldr	r2, [pc, #412]	@ (80026f4 <HAL_LTDC_MspInit+0x234>)
 8002558:	f043 0301 	orr.w	r3, r3, #1
 800255c:	6313      	str	r3, [r2, #48]	@ 0x30
 800255e:	4b65      	ldr	r3, [pc, #404]	@ (80026f4 <HAL_LTDC_MspInit+0x234>)
 8002560:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002562:	f003 0301 	and.w	r3, r3, #1
 8002566:	61bb      	str	r3, [r7, #24]
 8002568:	69bb      	ldr	r3, [r7, #24]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 800256a:	2300      	movs	r3, #0
 800256c:	617b      	str	r3, [r7, #20]
 800256e:	4b61      	ldr	r3, [pc, #388]	@ (80026f4 <HAL_LTDC_MspInit+0x234>)
 8002570:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002572:	4a60      	ldr	r2, [pc, #384]	@ (80026f4 <HAL_LTDC_MspInit+0x234>)
 8002574:	f043 0302 	orr.w	r3, r3, #2
 8002578:	6313      	str	r3, [r2, #48]	@ 0x30
 800257a:	4b5e      	ldr	r3, [pc, #376]	@ (80026f4 <HAL_LTDC_MspInit+0x234>)
 800257c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800257e:	f003 0302 	and.w	r3, r3, #2
 8002582:	617b      	str	r3, [r7, #20]
 8002584:	697b      	ldr	r3, [r7, #20]
    __HAL_RCC_GPIOG_CLK_ENABLE();
 8002586:	2300      	movs	r3, #0
 8002588:	613b      	str	r3, [r7, #16]
 800258a:	4b5a      	ldr	r3, [pc, #360]	@ (80026f4 <HAL_LTDC_MspInit+0x234>)
 800258c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800258e:	4a59      	ldr	r2, [pc, #356]	@ (80026f4 <HAL_LTDC_MspInit+0x234>)
 8002590:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8002594:	6313      	str	r3, [r2, #48]	@ 0x30
 8002596:	4b57      	ldr	r3, [pc, #348]	@ (80026f4 <HAL_LTDC_MspInit+0x234>)
 8002598:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800259a:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800259e:	613b      	str	r3, [r7, #16]
 80025a0:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOC_CLK_ENABLE();
 80025a2:	2300      	movs	r3, #0
 80025a4:	60fb      	str	r3, [r7, #12]
 80025a6:	4b53      	ldr	r3, [pc, #332]	@ (80026f4 <HAL_LTDC_MspInit+0x234>)
 80025a8:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80025aa:	4a52      	ldr	r2, [pc, #328]	@ (80026f4 <HAL_LTDC_MspInit+0x234>)
 80025ac:	f043 0304 	orr.w	r3, r3, #4
 80025b0:	6313      	str	r3, [r2, #48]	@ 0x30
 80025b2:	4b50      	ldr	r3, [pc, #320]	@ (80026f4 <HAL_LTDC_MspInit+0x234>)
 80025b4:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80025b6:	f003 0304 	and.w	r3, r3, #4
 80025ba:	60fb      	str	r3, [r7, #12]
 80025bc:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOD_CLK_ENABLE();
 80025be:	2300      	movs	r3, #0
 80025c0:	60bb      	str	r3, [r7, #8]
 80025c2:	4b4c      	ldr	r3, [pc, #304]	@ (80026f4 <HAL_LTDC_MspInit+0x234>)
 80025c4:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80025c6:	4a4b      	ldr	r2, [pc, #300]	@ (80026f4 <HAL_LTDC_MspInit+0x234>)
 80025c8:	f043 0308 	orr.w	r3, r3, #8
 80025cc:	6313      	str	r3, [r2, #48]	@ 0x30
 80025ce:	4b49      	ldr	r3, [pc, #292]	@ (80026f4 <HAL_LTDC_MspInit+0x234>)
 80025d0:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80025d2:	f003 0308 	and.w	r3, r3, #8
 80025d6:	60bb      	str	r3, [r7, #8]
 80025d8:	68bb      	ldr	r3, [r7, #8]
    PG11     ------> LTDC_B3
    PG12     ------> LTDC_B4
    PB8     ------> LTDC_B6
    PB9     ------> LTDC_B7
    */
    GPIO_InitStruct.Pin = ENABLE_Pin;
 80025da:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 80025de:	657b      	str	r3, [r7, #84]	@ 0x54
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80025e0:	2302      	movs	r3, #2
 80025e2:	65bb      	str	r3, [r7, #88]	@ 0x58
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80025e4:	2300      	movs	r3, #0
 80025e6:	65fb      	str	r3, [r7, #92]	@ 0x5c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80025e8:	2300      	movs	r3, #0
 80025ea:	663b      	str	r3, [r7, #96]	@ 0x60
    GPIO_InitStruct.Alternate = GPIO_AF14_LTDC;
 80025ec:	230e      	movs	r3, #14
 80025ee:	667b      	str	r3, [r7, #100]	@ 0x64
    HAL_GPIO_Init(ENABLE_GPIO_Port, &GPIO_InitStruct);
 80025f0:	f107 0354 	add.w	r3, r7, #84	@ 0x54
 80025f4:	4619      	mov	r1, r3
 80025f6:	4840      	ldr	r0, [pc, #256]	@ (80026f8 <HAL_LTDC_MspInit+0x238>)
 80025f8:	f000 fff4 	bl	80035e4 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = B5_Pin|VSYNC_Pin|G2_Pin|R4_Pin
 80025fc:	f641 0358 	movw	r3, #6232	@ 0x1858
 8002600:	657b      	str	r3, [r7, #84]	@ 0x54
                          |R5_Pin;
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002602:	2302      	movs	r3, #2
 8002604:	65bb      	str	r3, [r7, #88]	@ 0x58
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002606:	2300      	movs	r3, #0
 8002608:	65fb      	str	r3, [r7, #92]	@ 0x5c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800260a:	2300      	movs	r3, #0
 800260c:	663b      	str	r3, [r7, #96]	@ 0x60
    GPIO_InitStruct.Alternate = GPIO_AF14_LTDC;
 800260e:	230e      	movs	r3, #14
 8002610:	667b      	str	r3, [r7, #100]	@ 0x64
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8002612:	f107 0354 	add.w	r3, r7, #84	@ 0x54
 8002616:	4619      	mov	r1, r3
 8002618:	4838      	ldr	r0, [pc, #224]	@ (80026fc <HAL_LTDC_MspInit+0x23c>)
 800261a:	f000 ffe3 	bl	80035e4 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = R3_Pin|R6_Pin;
 800261e:	2303      	movs	r3, #3
 8002620:	657b      	str	r3, [r7, #84]	@ 0x54
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002622:	2302      	movs	r3, #2
 8002624:	65bb      	str	r3, [r7, #88]	@ 0x58
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002626:	2300      	movs	r3, #0
 8002628:	65fb      	str	r3, [r7, #92]	@ 0x5c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800262a:	2300      	movs	r3, #0
 800262c:	663b      	str	r3, [r7, #96]	@ 0x60
    GPIO_InitStruct.Alternate = GPIO_AF9_LTDC;
 800262e:	2309      	movs	r3, #9
 8002630:	667b      	str	r3, [r7, #100]	@ 0x64
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8002632:	f107 0354 	add.w	r3, r7, #84	@ 0x54
 8002636:	4619      	mov	r1, r3
 8002638:	4831      	ldr	r0, [pc, #196]	@ (8002700 <HAL_LTDC_MspInit+0x240>)
 800263a:	f000 ffd3 	bl	80035e4 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = G4_Pin|G5_Pin|B6_Pin|B7_Pin;
 800263e:	f44f 6370 	mov.w	r3, #3840	@ 0xf00
 8002642:	657b      	str	r3, [r7, #84]	@ 0x54
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002644:	2302      	movs	r3, #2
 8002646:	65bb      	str	r3, [r7, #88]	@ 0x58
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002648:	2300      	movs	r3, #0
 800264a:	65fb      	str	r3, [r7, #92]	@ 0x5c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800264c:	2300      	movs	r3, #0
 800264e:	663b      	str	r3, [r7, #96]	@ 0x60
    GPIO_InitStruct.Alternate = GPIO_AF14_LTDC;
 8002650:	230e      	movs	r3, #14
 8002652:	667b      	str	r3, [r7, #100]	@ 0x64
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8002654:	f107 0354 	add.w	r3, r7, #84	@ 0x54
 8002658:	4619      	mov	r1, r3
 800265a:	4829      	ldr	r0, [pc, #164]	@ (8002700 <HAL_LTDC_MspInit+0x240>)
 800265c:	f000 ffc2 	bl	80035e4 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = R7_Pin|DOTCLK_Pin|B3_Pin;
 8002660:	f44f 630c 	mov.w	r3, #2240	@ 0x8c0
 8002664:	657b      	str	r3, [r7, #84]	@ 0x54
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002666:	2302      	movs	r3, #2
 8002668:	65bb      	str	r3, [r7, #88]	@ 0x58
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800266a:	2300      	movs	r3, #0
 800266c:	65fb      	str	r3, [r7, #92]	@ 0x5c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800266e:	2300      	movs	r3, #0
 8002670:	663b      	str	r3, [r7, #96]	@ 0x60
    GPIO_InitStruct.Alternate = GPIO_AF14_LTDC;
 8002672:	230e      	movs	r3, #14
 8002674:	667b      	str	r3, [r7, #100]	@ 0x64
    HAL_GPIO_Init(GPIOG, &GPIO_InitStruct);
 8002676:	f107 0354 	add.w	r3, r7, #84	@ 0x54
 800267a:	4619      	mov	r1, r3
 800267c:	4821      	ldr	r0, [pc, #132]	@ (8002704 <HAL_LTDC_MspInit+0x244>)
 800267e:	f000 ffb1 	bl	80035e4 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = HSYNC_Pin|G6_Pin|R2_Pin;
 8002682:	f44f 6398 	mov.w	r3, #1216	@ 0x4c0
 8002686:	657b      	str	r3, [r7, #84]	@ 0x54
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002688:	2302      	movs	r3, #2
 800268a:	65bb      	str	r3, [r7, #88]	@ 0x58
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800268c:	2300      	movs	r3, #0
 800268e:	65fb      	str	r3, [r7, #92]	@ 0x5c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002690:	2300      	movs	r3, #0
 8002692:	663b      	str	r3, [r7, #96]	@ 0x60
    GPIO_InitStruct.Alternate = GPIO_AF14_LTDC;
 8002694:	230e      	movs	r3, #14
 8002696:	667b      	str	r3, [r7, #100]	@ 0x64
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8002698:	f107 0354 	add.w	r3, r7, #84	@ 0x54
 800269c:	4619      	mov	r1, r3
 800269e:	481a      	ldr	r0, [pc, #104]	@ (8002708 <HAL_LTDC_MspInit+0x248>)
 80026a0:	f000 ffa0 	bl	80035e4 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = G7_Pin|B2_Pin;
 80026a4:	2348      	movs	r3, #72	@ 0x48
 80026a6:	657b      	str	r3, [r7, #84]	@ 0x54
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80026a8:	2302      	movs	r3, #2
 80026aa:	65bb      	str	r3, [r7, #88]	@ 0x58
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80026ac:	2300      	movs	r3, #0
 80026ae:	65fb      	str	r3, [r7, #92]	@ 0x5c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80026b0:	2300      	movs	r3, #0
 80026b2:	663b      	str	r3, [r7, #96]	@ 0x60
    GPIO_InitStruct.Alternate = GPIO_AF14_LTDC;
 80026b4:	230e      	movs	r3, #14
 80026b6:	667b      	str	r3, [r7, #100]	@ 0x64
    HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 80026b8:	f107 0354 	add.w	r3, r7, #84	@ 0x54
 80026bc:	4619      	mov	r1, r3
 80026be:	4813      	ldr	r0, [pc, #76]	@ (800270c <HAL_LTDC_MspInit+0x24c>)
 80026c0:	f000 ff90 	bl	80035e4 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = G3_Pin|B4_Pin;
 80026c4:	f44f 53a0 	mov.w	r3, #5120	@ 0x1400
 80026c8:	657b      	str	r3, [r7, #84]	@ 0x54
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80026ca:	2302      	movs	r3, #2
 80026cc:	65bb      	str	r3, [r7, #88]	@ 0x58
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80026ce:	2300      	movs	r3, #0
 80026d0:	65fb      	str	r3, [r7, #92]	@ 0x5c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80026d2:	2300      	movs	r3, #0
 80026d4:	663b      	str	r3, [r7, #96]	@ 0x60
    GPIO_InitStruct.Alternate = GPIO_AF9_LTDC;
 80026d6:	2309      	movs	r3, #9
 80026d8:	667b      	str	r3, [r7, #100]	@ 0x64
    HAL_GPIO_Init(GPIOG, &GPIO_InitStruct);
 80026da:	f107 0354 	add.w	r3, r7, #84	@ 0x54
 80026de:	4619      	mov	r1, r3
 80026e0:	4808      	ldr	r0, [pc, #32]	@ (8002704 <HAL_LTDC_MspInit+0x244>)
 80026e2:	f000 ff7f 	bl	80035e4 <HAL_GPIO_Init>

  /* USER CODE END LTDC_MspInit 1 */

  }

}
 80026e6:	bf00      	nop
 80026e8:	3768      	adds	r7, #104	@ 0x68
 80026ea:	46bd      	mov	sp, r7
 80026ec:	bd80      	pop	{r7, pc}
 80026ee:	bf00      	nop
 80026f0:	40016800 	.word	0x40016800
 80026f4:	40023800 	.word	0x40023800
 80026f8:	40021400 	.word	0x40021400
 80026fc:	40020000 	.word	0x40020000
 8002700:	40020400 	.word	0x40020400
 8002704:	40021800 	.word	0x40021800
 8002708:	40020800 	.word	0x40020800
 800270c:	40020c00 	.word	0x40020c00

08002710 <HAL_RNG_MspInit>:
* This function configures the hardware resources used in this example
* @param hrng: RNG handle pointer
* @retval None
*/
void HAL_RNG_MspInit(RNG_HandleTypeDef* hrng)
{
 8002710:	b480      	push	{r7}
 8002712:	b085      	sub	sp, #20
 8002714:	af00      	add	r7, sp, #0
 8002716:	6078      	str	r0, [r7, #4]
  if(hrng->Instance==RNG)
 8002718:	687b      	ldr	r3, [r7, #4]
 800271a:	681b      	ldr	r3, [r3, #0]
 800271c:	4a0b      	ldr	r2, [pc, #44]	@ (800274c <HAL_RNG_MspInit+0x3c>)
 800271e:	4293      	cmp	r3, r2
 8002720:	d10d      	bne.n	800273e <HAL_RNG_MspInit+0x2e>
  {
  /* USER CODE BEGIN RNG_MspInit 0 */

  /* USER CODE END RNG_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_RNG_CLK_ENABLE();
 8002722:	2300      	movs	r3, #0
 8002724:	60fb      	str	r3, [r7, #12]
 8002726:	4b0a      	ldr	r3, [pc, #40]	@ (8002750 <HAL_RNG_MspInit+0x40>)
 8002728:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800272a:	4a09      	ldr	r2, [pc, #36]	@ (8002750 <HAL_RNG_MspInit+0x40>)
 800272c:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8002730:	6353      	str	r3, [r2, #52]	@ 0x34
 8002732:	4b07      	ldr	r3, [pc, #28]	@ (8002750 <HAL_RNG_MspInit+0x40>)
 8002734:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8002736:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800273a:	60fb      	str	r3, [r7, #12]
 800273c:	68fb      	ldr	r3, [r7, #12]

  /* USER CODE END RNG_MspInit 1 */

  }

}
 800273e:	bf00      	nop
 8002740:	3714      	adds	r7, #20
 8002742:	46bd      	mov	sp, r7
 8002744:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002748:	4770      	bx	lr
 800274a:	bf00      	nop
 800274c:	50060800 	.word	0x50060800
 8002750:	40023800 	.word	0x40023800

08002754 <HAL_SPI_MspInit>:
* This function configures the hardware resources used in this example
* @param hspi: SPI handle pointer
* @retval None
*/
void HAL_SPI_MspInit(SPI_HandleTypeDef* hspi)
{
 8002754:	b580      	push	{r7, lr}
 8002756:	b08a      	sub	sp, #40	@ 0x28
 8002758:	af00      	add	r7, sp, #0
 800275a:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800275c:	f107 0314 	add.w	r3, r7, #20
 8002760:	2200      	movs	r2, #0
 8002762:	601a      	str	r2, [r3, #0]
 8002764:	605a      	str	r2, [r3, #4]
 8002766:	609a      	str	r2, [r3, #8]
 8002768:	60da      	str	r2, [r3, #12]
 800276a:	611a      	str	r2, [r3, #16]
  if(hspi->Instance==SPI5)
 800276c:	687b      	ldr	r3, [r7, #4]
 800276e:	681b      	ldr	r3, [r3, #0]
 8002770:	4a19      	ldr	r2, [pc, #100]	@ (80027d8 <HAL_SPI_MspInit+0x84>)
 8002772:	4293      	cmp	r3, r2
 8002774:	d12c      	bne.n	80027d0 <HAL_SPI_MspInit+0x7c>
  {
  /* USER CODE BEGIN SPI5_MspInit 0 */

  /* USER CODE END SPI5_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_SPI5_CLK_ENABLE();
 8002776:	2300      	movs	r3, #0
 8002778:	613b      	str	r3, [r7, #16]
 800277a:	4b18      	ldr	r3, [pc, #96]	@ (80027dc <HAL_SPI_MspInit+0x88>)
 800277c:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800277e:	4a17      	ldr	r2, [pc, #92]	@ (80027dc <HAL_SPI_MspInit+0x88>)
 8002780:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 8002784:	6453      	str	r3, [r2, #68]	@ 0x44
 8002786:	4b15      	ldr	r3, [pc, #84]	@ (80027dc <HAL_SPI_MspInit+0x88>)
 8002788:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800278a:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 800278e:	613b      	str	r3, [r7, #16]
 8002790:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOF_CLK_ENABLE();
 8002792:	2300      	movs	r3, #0
 8002794:	60fb      	str	r3, [r7, #12]
 8002796:	4b11      	ldr	r3, [pc, #68]	@ (80027dc <HAL_SPI_MspInit+0x88>)
 8002798:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800279a:	4a10      	ldr	r2, [pc, #64]	@ (80027dc <HAL_SPI_MspInit+0x88>)
 800279c:	f043 0320 	orr.w	r3, r3, #32
 80027a0:	6313      	str	r3, [r2, #48]	@ 0x30
 80027a2:	4b0e      	ldr	r3, [pc, #56]	@ (80027dc <HAL_SPI_MspInit+0x88>)
 80027a4:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80027a6:	f003 0320 	and.w	r3, r3, #32
 80027aa:	60fb      	str	r3, [r7, #12]
 80027ac:	68fb      	ldr	r3, [r7, #12]
    /**SPI5 GPIO Configuration
    PF7     ------> SPI5_SCK
    PF8     ------> SPI5_MISO
    PF9     ------> SPI5_MOSI
    */
    GPIO_InitStruct.Pin = SPI5_SCK_Pin|SPI5_MISO_Pin|SPI5_MOSI_Pin;
 80027ae:	f44f 7360 	mov.w	r3, #896	@ 0x380
 80027b2:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80027b4:	2302      	movs	r3, #2
 80027b6:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80027b8:	2300      	movs	r3, #0
 80027ba:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80027bc:	2300      	movs	r3, #0
 80027be:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI5;
 80027c0:	2305      	movs	r3, #5
 80027c2:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(GPIOF, &GPIO_InitStruct);
 80027c4:	f107 0314 	add.w	r3, r7, #20
 80027c8:	4619      	mov	r1, r3
 80027ca:	4805      	ldr	r0, [pc, #20]	@ (80027e0 <HAL_SPI_MspInit+0x8c>)
 80027cc:	f000 ff0a 	bl	80035e4 <HAL_GPIO_Init>

  /* USER CODE END SPI5_MspInit 1 */

  }

}
 80027d0:	bf00      	nop
 80027d2:	3728      	adds	r7, #40	@ 0x28
 80027d4:	46bd      	mov	sp, r7
 80027d6:	bd80      	pop	{r7, pc}
 80027d8:	40015000 	.word	0x40015000
 80027dc:	40023800 	.word	0x40023800
 80027e0:	40021400 	.word	0x40021400

080027e4 <HAL_SPI_MspDeInit>:
* This function freeze the hardware resources used in this example
* @param hspi: SPI handle pointer
* @retval None
*/
void HAL_SPI_MspDeInit(SPI_HandleTypeDef* hspi)
{
 80027e4:	b580      	push	{r7, lr}
 80027e6:	b082      	sub	sp, #8
 80027e8:	af00      	add	r7, sp, #0
 80027ea:	6078      	str	r0, [r7, #4]
  if(hspi->Instance==SPI5)
 80027ec:	687b      	ldr	r3, [r7, #4]
 80027ee:	681b      	ldr	r3, [r3, #0]
 80027f0:	4a08      	ldr	r2, [pc, #32]	@ (8002814 <HAL_SPI_MspDeInit+0x30>)
 80027f2:	4293      	cmp	r3, r2
 80027f4:	d10a      	bne.n	800280c <HAL_SPI_MspDeInit+0x28>
  {
  /* USER CODE BEGIN SPI5_MspDeInit 0 */

  /* USER CODE END SPI5_MspDeInit 0 */
    /* Peripheral clock disable */
    __HAL_RCC_SPI5_CLK_DISABLE();
 80027f6:	4b08      	ldr	r3, [pc, #32]	@ (8002818 <HAL_SPI_MspDeInit+0x34>)
 80027f8:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80027fa:	4a07      	ldr	r2, [pc, #28]	@ (8002818 <HAL_SPI_MspDeInit+0x34>)
 80027fc:	f423 1380 	bic.w	r3, r3, #1048576	@ 0x100000
 8002800:	6453      	str	r3, [r2, #68]	@ 0x44
    /**SPI5 GPIO Configuration
    PF7     ------> SPI5_SCK
    PF8     ------> SPI5_MISO
    PF9     ------> SPI5_MOSI
    */
    HAL_GPIO_DeInit(GPIOF, SPI5_SCK_Pin|SPI5_MISO_Pin|SPI5_MOSI_Pin);
 8002802:	f44f 7160 	mov.w	r1, #896	@ 0x380
 8002806:	4805      	ldr	r0, [pc, #20]	@ (800281c <HAL_SPI_MspDeInit+0x38>)
 8002808:	f001 f898 	bl	800393c <HAL_GPIO_DeInit>
  /* USER CODE BEGIN SPI5_MspDeInit 1 */

  /* USER CODE END SPI5_MspDeInit 1 */
  }

}
 800280c:	bf00      	nop
 800280e:	3708      	adds	r7, #8
 8002810:	46bd      	mov	sp, r7
 8002812:	bd80      	pop	{r7, pc}
 8002814:	40015000 	.word	0x40015000
 8002818:	40023800 	.word	0x40023800
 800281c:	40021400 	.word	0x40021400

08002820 <HAL_TIM_Base_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 8002820:	b480      	push	{r7}
 8002822:	b085      	sub	sp, #20
 8002824:	af00      	add	r7, sp, #0
 8002826:	6078      	str	r0, [r7, #4]
  if(htim_base->Instance==TIM6)
 8002828:	687b      	ldr	r3, [r7, #4]
 800282a:	681b      	ldr	r3, [r3, #0]
 800282c:	4a15      	ldr	r2, [pc, #84]	@ (8002884 <HAL_TIM_Base_MspInit+0x64>)
 800282e:	4293      	cmp	r3, r2
 8002830:	d10e      	bne.n	8002850 <HAL_TIM_Base_MspInit+0x30>
  {
  /* USER CODE BEGIN TIM6_MspInit 0 */

  /* USER CODE END TIM6_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM6_CLK_ENABLE();
 8002832:	2300      	movs	r3, #0
 8002834:	60fb      	str	r3, [r7, #12]
 8002836:	4b14      	ldr	r3, [pc, #80]	@ (8002888 <HAL_TIM_Base_MspInit+0x68>)
 8002838:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800283a:	4a13      	ldr	r2, [pc, #76]	@ (8002888 <HAL_TIM_Base_MspInit+0x68>)
 800283c:	f043 0310 	orr.w	r3, r3, #16
 8002840:	6413      	str	r3, [r2, #64]	@ 0x40
 8002842:	4b11      	ldr	r3, [pc, #68]	@ (8002888 <HAL_TIM_Base_MspInit+0x68>)
 8002844:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002846:	f003 0310 	and.w	r3, r3, #16
 800284a:	60fb      	str	r3, [r7, #12]
 800284c:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN TIM7_MspInit 1 */

  /* USER CODE END TIM7_MspInit 1 */
  }

}
 800284e:	e012      	b.n	8002876 <HAL_TIM_Base_MspInit+0x56>
  else if(htim_base->Instance==TIM7)
 8002850:	687b      	ldr	r3, [r7, #4]
 8002852:	681b      	ldr	r3, [r3, #0]
 8002854:	4a0d      	ldr	r2, [pc, #52]	@ (800288c <HAL_TIM_Base_MspInit+0x6c>)
 8002856:	4293      	cmp	r3, r2
 8002858:	d10d      	bne.n	8002876 <HAL_TIM_Base_MspInit+0x56>
    __HAL_RCC_TIM7_CLK_ENABLE();
 800285a:	2300      	movs	r3, #0
 800285c:	60bb      	str	r3, [r7, #8]
 800285e:	4b0a      	ldr	r3, [pc, #40]	@ (8002888 <HAL_TIM_Base_MspInit+0x68>)
 8002860:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002862:	4a09      	ldr	r2, [pc, #36]	@ (8002888 <HAL_TIM_Base_MspInit+0x68>)
 8002864:	f043 0320 	orr.w	r3, r3, #32
 8002868:	6413      	str	r3, [r2, #64]	@ 0x40
 800286a:	4b07      	ldr	r3, [pc, #28]	@ (8002888 <HAL_TIM_Base_MspInit+0x68>)
 800286c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800286e:	f003 0320 	and.w	r3, r3, #32
 8002872:	60bb      	str	r3, [r7, #8]
 8002874:	68bb      	ldr	r3, [r7, #8]
}
 8002876:	bf00      	nop
 8002878:	3714      	adds	r7, #20
 800287a:	46bd      	mov	sp, r7
 800287c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002880:	4770      	bx	lr
 8002882:	bf00      	nop
 8002884:	40001000 	.word	0x40001000
 8002888:	40023800 	.word	0x40023800
 800288c:	40001400 	.word	0x40001400

08002890 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8002890:	b480      	push	{r7}
 8002892:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 8002894:	bf00      	nop
 8002896:	e7fd      	b.n	8002894 <NMI_Handler+0x4>

08002898 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8002898:	b480      	push	{r7}
 800289a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 800289c:	bf00      	nop
 800289e:	e7fd      	b.n	800289c <HardFault_Handler+0x4>

080028a0 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 80028a0:	b480      	push	{r7}
 80028a2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 80028a4:	bf00      	nop
 80028a6:	e7fd      	b.n	80028a4 <MemManage_Handler+0x4>

080028a8 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 80028a8:	b480      	push	{r7}
 80028aa:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 80028ac:	bf00      	nop
 80028ae:	e7fd      	b.n	80028ac <BusFault_Handler+0x4>

080028b0 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 80028b0:	b480      	push	{r7}
 80028b2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 80028b4:	bf00      	nop
 80028b6:	e7fd      	b.n	80028b4 <UsageFault_Handler+0x4>

080028b8 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 80028b8:	b480      	push	{r7}
 80028ba:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 80028bc:	bf00      	nop
 80028be:	46bd      	mov	sp, r7
 80028c0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80028c4:	4770      	bx	lr

080028c6 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 80028c6:	b480      	push	{r7}
 80028c8:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 80028ca:	bf00      	nop
 80028cc:	46bd      	mov	sp, r7
 80028ce:	f85d 7b04 	ldr.w	r7, [sp], #4
 80028d2:	4770      	bx	lr

080028d4 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 80028d4:	b480      	push	{r7}
 80028d6:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 80028d8:	bf00      	nop
 80028da:	46bd      	mov	sp, r7
 80028dc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80028e0:	4770      	bx	lr

080028e2 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 80028e2:	b580      	push	{r7, lr}
 80028e4:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 80028e6:	f000 fcb1 	bl	800324c <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 80028ea:	bf00      	nop
 80028ec:	bd80      	pop	{r7, pc}
	...

080028f0 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80028f0:	b480      	push	{r7}
 80028f2:	b083      	sub	sp, #12
 80028f4:	af00      	add	r7, sp, #0
 80028f6:	4603      	mov	r3, r0
 80028f8:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80028fa:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80028fe:	2b00      	cmp	r3, #0
 8002900:	db0b      	blt.n	800291a <__NVIC_EnableIRQ+0x2a>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8002902:	79fb      	ldrb	r3, [r7, #7]
 8002904:	f003 021f 	and.w	r2, r3, #31
 8002908:	4907      	ldr	r1, [pc, #28]	@ (8002928 <__NVIC_EnableIRQ+0x38>)
 800290a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800290e:	095b      	lsrs	r3, r3, #5
 8002910:	2001      	movs	r0, #1
 8002912:	fa00 f202 	lsl.w	r2, r0, r2
 8002916:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    __COMPILER_BARRIER();
  }
}
 800291a:	bf00      	nop
 800291c:	370c      	adds	r7, #12
 800291e:	46bd      	mov	sp, r7
 8002920:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002924:	4770      	bx	lr
 8002926:	bf00      	nop
 8002928:	e000e100 	.word	0xe000e100

0800292c <STMPE811_Init>:

#define DEFAULT_TESTING_TIMEOUT 250000

/* The below function was created by Tilen MAJERLE but modified by Xavion */
STMPE811_State_t STMPE811_Init(void)
{
 800292c:	b580      	push	{r7, lr}
 800292e:	b082      	sub	sp, #8
 8002930:	af00      	add	r7, sp, #0

    // Initalize any other GPIO neeeded
    //stmpe811_MspInit(); // Currently we will be just using the HAL GPIO Init fuction to initialize GPIOs..

    // Initialze I2C3 ports 
    I2C3_MspInit();
 8002932:	f000 f9dd 	bl	8002cf0 <I2C3_MspInit>
    /* Initialize I2C */
    I2C3_Init();
 8002936:	f000 f99d 	bl	8002c74 <I2C3_Init>

    /* Reset */
    I2C3_Write(STMPE811_ADDRESS, STMPE811_SYS_CTRL1, 0x02);
 800293a:	2202      	movs	r2, #2
 800293c:	2103      	movs	r1, #3
 800293e:	2082      	movs	r0, #130	@ 0x82
 8002940:	f000 fa2a 	bl	8002d98 <I2C3_Write>
    HAL_Delay(5);
 8002944:	2005      	movs	r0, #5
 8002946:	f000 fca1 	bl	800328c <HAL_Delay>
    I2C3_Write(STMPE811_ADDRESS, STMPE811_SYS_CTRL1, 0x00);
 800294a:	2200      	movs	r2, #0
 800294c:	2103      	movs	r1, #3
 800294e:	2082      	movs	r0, #130	@ 0x82
 8002950:	f000 fa22 	bl	8002d98 <I2C3_Write>
    HAL_Delay(2);
 8002954:	2002      	movs	r0, #2
 8002956:	f000 fc99 	bl	800328c <HAL_Delay>

    /* Check for STMPE811 Connected */
    uint16_t dataRecieved;
    I2C3_MulitByteRead(STMPE811_ADDRESS, STMPE811_CHIP_ID, (uint8_t * )&dataRecieved, TWOBYTE); // Need to change
 800295a:	1cba      	adds	r2, r7, #2
 800295c:	2302      	movs	r3, #2
 800295e:	2100      	movs	r1, #0
 8002960:	2082      	movs	r0, #130	@ 0x82
 8002962:	f000 fa69 	bl	8002e38 <I2C3_MulitByteRead>
    // Flip bytes
    uint16_t chipID = (dataRecieved << 8);
 8002966:	887b      	ldrh	r3, [r7, #2]
 8002968:	021b      	lsls	r3, r3, #8
 800296a:	80fb      	strh	r3, [r7, #6]
    chipID |= ((dataRecieved & 0xFF00) >> 8);
 800296c:	887b      	ldrh	r3, [r7, #2]
 800296e:	0a1b      	lsrs	r3, r3, #8
 8002970:	b29a      	uxth	r2, r3
 8002972:	88fb      	ldrh	r3, [r7, #6]
 8002974:	4313      	orrs	r3, r2
 8002976:	80fb      	strh	r3, [r7, #6]

    if (chipID != STMPE811_CHIP_ID_VALUE) {
 8002978:	88fb      	ldrh	r3, [r7, #6]
 800297a:	f640 0211 	movw	r2, #2065	@ 0x811
 800297e:	4293      	cmp	r3, r2
 8002980:	d001      	beq.n	8002986 <STMPE811_Init+0x5a>
    	return STMPE811_State_Error;
 8002982:	2303      	movs	r3, #3
 8002984:	e095      	b.n	8002ab2 <STMPE811_Init+0x186>
    }

    /* Reset */
    I2C3_Write(STMPE811_ADDRESS, STMPE811_SYS_CTRL1, 0x02);
 8002986:	2202      	movs	r2, #2
 8002988:	2103      	movs	r1, #3
 800298a:	2082      	movs	r0, #130	@ 0x82
 800298c:	f000 fa04 	bl	8002d98 <I2C3_Write>
    HAL_Delay(5);
 8002990:	2005      	movs	r0, #5
 8002992:	f000 fc7b 	bl	800328c <HAL_Delay>
    I2C3_Write(STMPE811_ADDRESS, STMPE811_SYS_CTRL1, 0x00);
 8002996:	2200      	movs	r2, #0
 8002998:	2103      	movs	r1, #3
 800299a:	2082      	movs	r0, #130	@ 0x82
 800299c:	f000 f9fc 	bl	8002d98 <I2C3_Write>
    HAL_Delay(2);
 80029a0:	2002      	movs	r0, #2
 80029a2:	f000 fc73 	bl	800328c <HAL_Delay>

    /* Get the current register value */
    mode = STMPE811_Read(STMPE811_SYS_CTRL2);
 80029a6:	2004      	movs	r0, #4
 80029a8:	f000 f887 	bl	8002aba <STMPE811_Read>
 80029ac:	4603      	mov	r3, r0
 80029ae:	717b      	strb	r3, [r7, #5]
    mode &= ~(0x01);
 80029b0:	797b      	ldrb	r3, [r7, #5]
 80029b2:	f023 0301 	bic.w	r3, r3, #1
 80029b6:	717b      	strb	r3, [r7, #5]
    I2C3_Write(STMPE811_ADDRESS, STMPE811_SYS_CTRL2, mode);
 80029b8:	797b      	ldrb	r3, [r7, #5]
 80029ba:	461a      	mov	r2, r3
 80029bc:	2104      	movs	r1, #4
 80029be:	2082      	movs	r0, #130	@ 0x82
 80029c0:	f000 f9ea 	bl	8002d98 <I2C3_Write>
    mode = STMPE811_Read(STMPE811_SYS_CTRL2);
 80029c4:	2004      	movs	r0, #4
 80029c6:	f000 f878 	bl	8002aba <STMPE811_Read>
 80029ca:	4603      	mov	r3, r0
 80029cc:	717b      	strb	r3, [r7, #5]
    mode &= ~(0x02);
 80029ce:	797b      	ldrb	r3, [r7, #5]
 80029d0:	f023 0302 	bic.w	r3, r3, #2
 80029d4:	717b      	strb	r3, [r7, #5]
    I2C3_Write(STMPE811_ADDRESS, STMPE811_SYS_CTRL2, mode);
 80029d6:	797b      	ldrb	r3, [r7, #5]
 80029d8:	461a      	mov	r2, r3
 80029da:	2104      	movs	r1, #4
 80029dc:	2082      	movs	r0, #130	@ 0x82
 80029de:	f000 f9db 	bl	8002d98 <I2C3_Write>

    /* Select Sample Time, bit number and ADC Reference */
    I2C3_Write(STMPE811_ADDRESS, STMPE811_ADC_CTRL1, 0x49);
 80029e2:	2249      	movs	r2, #73	@ 0x49
 80029e4:	2120      	movs	r1, #32
 80029e6:	2082      	movs	r0, #130	@ 0x82
 80029e8:	f000 f9d6 	bl	8002d98 <I2C3_Write>

    /* Wait for 2 ms */
    HAL_Delay(2);
 80029ec:	2002      	movs	r0, #2
 80029ee:	f000 fc4d 	bl	800328c <HAL_Delay>

    /* Select the ADC clock speed: 3.25 MHz */
    I2C3_Write(STMPE811_ADDRESS, STMPE811_ADC_CTRL2, 0x01);
 80029f2:	2201      	movs	r2, #1
 80029f4:	2121      	movs	r1, #33	@ 0x21
 80029f6:	2082      	movs	r0, #130	@ 0x82
 80029f8:	f000 f9ce 	bl	8002d98 <I2C3_Write>

    /* Select TSC pins in non default mode */
    mode = STMPE811_Read(STMPE811_GPIO_AF);
 80029fc:	2017      	movs	r0, #23
 80029fe:	f000 f85c 	bl	8002aba <STMPE811_Read>
 8002a02:	4603      	mov	r3, r0
 8002a04:	717b      	strb	r3, [r7, #5]
    mode |= 0x1E;
 8002a06:	797b      	ldrb	r3, [r7, #5]
 8002a08:	f043 031e 	orr.w	r3, r3, #30
 8002a0c:	717b      	strb	r3, [r7, #5]
    I2C3_Write(STMPE811_ADDRESS, STMPE811_GPIO_AF, mode);
 8002a0e:	797b      	ldrb	r3, [r7, #5]
 8002a10:	461a      	mov	r2, r3
 8002a12:	2117      	movs	r1, #23
 8002a14:	2082      	movs	r0, #130	@ 0x82
 8002a16:	f000 f9bf 	bl	8002d98 <I2C3_Write>
    /* Configuration:
    - Touch average control    : 4 samples
    - Touch delay time         : 500 uS
    - Panel driver setting time: 500 uS
    */
    I2C3_Write(STMPE811_ADDRESS, STMPE811_TSC_CFG, 0x9A);
 8002a1a:	229a      	movs	r2, #154	@ 0x9a
 8002a1c:	2141      	movs	r1, #65	@ 0x41
 8002a1e:	2082      	movs	r0, #130	@ 0x82
 8002a20:	f000 f9ba 	bl	8002d98 <I2C3_Write>

    /* Configure the Touch FIFO threshold: single point reading */
    I2C3_Write(STMPE811_ADDRESS, STMPE811_FIFO_TH, 0x01);
 8002a24:	2201      	movs	r2, #1
 8002a26:	214a      	movs	r1, #74	@ 0x4a
 8002a28:	2082      	movs	r0, #130	@ 0x82
 8002a2a:	f000 f9b5 	bl	8002d98 <I2C3_Write>

    /* Clear the FIFO memory content. */
    I2C3_Write(STMPE811_ADDRESS, STMPE811_FIFO_STA, 0x01);
 8002a2e:	2201      	movs	r2, #1
 8002a30:	214b      	movs	r1, #75	@ 0x4b
 8002a32:	2082      	movs	r0, #130	@ 0x82
 8002a34:	f000 f9b0 	bl	8002d98 <I2C3_Write>

    /* Put the FIFO back into operation mode  */
    I2C3_Write( STMPE811_ADDRESS, STMPE811_FIFO_STA, 0x00);
 8002a38:	2200      	movs	r2, #0
 8002a3a:	214b      	movs	r1, #75	@ 0x4b
 8002a3c:	2082      	movs	r0, #130	@ 0x82
 8002a3e:	f000 f9ab 	bl	8002d98 <I2C3_Write>

    /* Set the range and accuracy pf the pressure measurement (Z) :
    - Fractional part :7
    - Whole part      :1
    */
    I2C3_Write( STMPE811_ADDRESS, STMPE811_TSC_FRACTION_Z, 0x01);
 8002a42:	2201      	movs	r2, #1
 8002a44:	2156      	movs	r1, #86	@ 0x56
 8002a46:	2082      	movs	r0, #130	@ 0x82
 8002a48:	f000 f9a6 	bl	8002d98 <I2C3_Write>

    /* Set the driving capability (limit) of the device for TSC pins: 50mA */
    I2C3_Write(STMPE811_ADDRESS, STMPE811_TSC_I_DRIVE, 0x01);
 8002a4c:	2201      	movs	r2, #1
 8002a4e:	2158      	movs	r1, #88	@ 0x58
 8002a50:	2082      	movs	r0, #130	@ 0x82
 8002a52:	f000 f9a1 	bl	8002d98 <I2C3_Write>

    /* Touch screen control configuration (enable TSC):
    - No window tracking index
    - XYZ acquisition mode
    */
    I2C3_Write(STMPE811_ADDRESS, STMPE811_TSC_CTRL, 0x03);
 8002a56:	2203      	movs	r2, #3
 8002a58:	2140      	movs	r1, #64	@ 0x40
 8002a5a:	2082      	movs	r0, #130	@ 0x82
 8002a5c:	f000 f99c 	bl	8002d98 <I2C3_Write>

    /* Clear all the status pending bits if any */
    I2C3_Write(STMPE811_ADDRESS, STMPE811_INT_STA, 0xFF);
 8002a60:	22ff      	movs	r2, #255	@ 0xff
 8002a62:	210b      	movs	r1, #11
 8002a64:	2082      	movs	r0, #130	@ 0x82
 8002a66:	f000 f997 	bl	8002d98 <I2C3_Write>

    /* Enable global interrupts */
    #if COMPILE_TOUCH_INTERRUPT_SUPPORT == 1

    enableInterruptSupportForTouch();
 8002a6a:	f000 f8c1 	bl	8002bf0 <enableInterruptSupportForTouch>

    mode = STMPE811_Read(STMPE811_INT_CTRL);
 8002a6e:	2009      	movs	r0, #9
 8002a70:	f000 f823 	bl	8002aba <STMPE811_Read>
 8002a74:	4603      	mov	r3, r0
 8002a76:	717b      	strb	r3, [r7, #5]
    mode |= 0x01;
 8002a78:	797b      	ldrb	r3, [r7, #5]
 8002a7a:	f043 0301 	orr.w	r3, r3, #1
 8002a7e:	717b      	strb	r3, [r7, #5]
    I2C3_Write(STMPE811_ADDRESS, STMPE811_INT_CTRL, mode);
 8002a80:	797b      	ldrb	r3, [r7, #5]
 8002a82:	461a      	mov	r2, r3
 8002a84:	2109      	movs	r1, #9
 8002a86:	2082      	movs	r0, #130	@ 0x82
 8002a88:	f000 f986 	bl	8002d98 <I2C3_Write>
    
    /* Enable touch interrupt */
    mode = STMPE811_Read(STMPE811_INT_EN);
 8002a8c:	200a      	movs	r0, #10
 8002a8e:	f000 f814 	bl	8002aba <STMPE811_Read>
 8002a92:	4603      	mov	r3, r0
 8002a94:	717b      	strb	r3, [r7, #5]
    mode |= 0x01;
 8002a96:	797b      	ldrb	r3, [r7, #5]
 8002a98:	f043 0301 	orr.w	r3, r3, #1
 8002a9c:	717b      	strb	r3, [r7, #5]
    I2C3_Write(STMPE811_ADDRESS, STMPE811_INT_EN, mode);
 8002a9e:	797b      	ldrb	r3, [r7, #5]
 8002aa0:	461a      	mov	r2, r3
 8002aa2:	210a      	movs	r1, #10
 8002aa4:	2082      	movs	r0, #130	@ 0x82
 8002aa6:	f000 f977 	bl	8002d98 <I2C3_Write>
    
    #endif // COMPILE_TOUCH_INTERRUPT_SUPPORT
    
    /* Wait for 2 ms delay */
    HAL_Delay(200);
 8002aaa:	20c8      	movs	r0, #200	@ 0xc8
 8002aac:	f000 fbee 	bl	800328c <HAL_Delay>

    return STMPE811_State_Ok;
 8002ab0:	2302      	movs	r3, #2

}
 8002ab2:	4618      	mov	r0, r3
 8002ab4:	3708      	adds	r7, #8
 8002ab6:	46bd      	mov	sp, r7
 8002ab8:	bd80      	pop	{r7, pc}

08002aba <STMPE811_Read>:

uint8_t STMPE811_Read(uint8_t reg)
{
 8002aba:	b580      	push	{r7, lr}
 8002abc:	b084      	sub	sp, #16
 8002abe:	af00      	add	r7, sp, #0
 8002ac0:	4603      	mov	r3, r0
 8002ac2:	71fb      	strb	r3, [r7, #7]
    // I2C Read
    uint8_t readData;
    I2C3_Read(STMPE811_ADDRESS, reg, &readData);
 8002ac4:	f107 020f 	add.w	r2, r7, #15
 8002ac8:	79fb      	ldrb	r3, [r7, #7]
 8002aca:	4619      	mov	r1, r3
 8002acc:	2082      	movs	r0, #130	@ 0x82
 8002ace:	f000 f98d 	bl	8002dec <I2C3_Read>

    return readData;
 8002ad2:	7bfb      	ldrb	r3, [r7, #15]
}
 8002ad4:	4618      	mov	r0, r3
 8002ad6:	3710      	adds	r7, #16
 8002ad8:	46bd      	mov	sp, r7
 8002ada:	bd80      	pop	{r7, pc}

08002adc <STMPE811_Write>:

void STMPE811_Write(uint8_t reg, uint8_t dataToWrite)
{
 8002adc:	b580      	push	{r7, lr}
 8002ade:	b082      	sub	sp, #8
 8002ae0:	af00      	add	r7, sp, #0
 8002ae2:	4603      	mov	r3, r0
 8002ae4:	460a      	mov	r2, r1
 8002ae6:	71fb      	strb	r3, [r7, #7]
 8002ae8:	4613      	mov	r3, r2
 8002aea:	71bb      	strb	r3, [r7, #6]
    I2C3_Write(STMPE811_ADDRESS, reg, dataToWrite);
 8002aec:	79ba      	ldrb	r2, [r7, #6]
 8002aee:	79fb      	ldrb	r3, [r7, #7]
 8002af0:	4619      	mov	r1, r3
 8002af2:	2082      	movs	r0, #130	@ 0x82
 8002af4:	f000 f950 	bl	8002d98 <I2C3_Write>
}
 8002af8:	bf00      	nop
 8002afa:	3708      	adds	r7, #8
 8002afc:	46bd      	mov	sp, r7
 8002afe:	bd80      	pop	{r7, pc}

08002b00 <STMPE811_DetermineTouchPosition>:

    return STMPE811_State_Released;
}

void STMPE811_DetermineTouchPosition(STMPE811_TouchData * data)
{
 8002b00:	b580      	push	{r7, lr}
 8002b02:	b082      	sub	sp, #8
 8002b04:	af00      	add	r7, sp, #0
 8002b06:	6078      	str	r0, [r7, #4]
    //Pressed
    if (data->orientation == STMPE811_Orientation_Portrait_1) {
 8002b08:	687b      	ldr	r3, [r7, #4]
 8002b0a:	799b      	ldrb	r3, [r3, #6]
 8002b0c:	2b00      	cmp	r3, #0
 8002b0e:	d117      	bne.n	8002b40 <STMPE811_DetermineTouchPosition+0x40>
        data->x = 239 - TM_STMPE811_ReadX(data->x);
 8002b10:	687b      	ldr	r3, [r7, #4]
 8002b12:	881b      	ldrh	r3, [r3, #0]
 8002b14:	4618      	mov	r0, r3
 8002b16:	f000 f9b1 	bl	8002e7c <TM_STMPE811_ReadX>
 8002b1a:	4603      	mov	r3, r0
 8002b1c:	f1c3 03ef 	rsb	r3, r3, #239	@ 0xef
 8002b20:	b29a      	uxth	r2, r3
 8002b22:	687b      	ldr	r3, [r7, #4]
 8002b24:	801a      	strh	r2, [r3, #0]
        data->y = 319 - TM_STMPE811_ReadY(data->y);
 8002b26:	687b      	ldr	r3, [r7, #4]
 8002b28:	885b      	ldrh	r3, [r3, #2]
 8002b2a:	4618      	mov	r0, r3
 8002b2c:	f000 fa04 	bl	8002f38 <TM_STMPE811_ReadY>
 8002b30:	4603      	mov	r3, r0
 8002b32:	f5c3 739f 	rsb	r3, r3, #318	@ 0x13e
 8002b36:	3301      	adds	r3, #1
 8002b38:	b29a      	uxth	r2, r3
 8002b3a:	687b      	ldr	r3, [r7, #4]
 8002b3c:	805a      	strh	r2, [r3, #2]
 8002b3e:	e048      	b.n	8002bd2 <STMPE811_DetermineTouchPosition+0xd2>
    } else if (data->orientation == STMPE811_Orientation_Portrait_2) {
 8002b40:	687b      	ldr	r3, [r7, #4]
 8002b42:	799b      	ldrb	r3, [r3, #6]
 8002b44:	2b01      	cmp	r3, #1
 8002b46:	d112      	bne.n	8002b6e <STMPE811_DetermineTouchPosition+0x6e>
        data->x = TM_STMPE811_ReadX(data->x);
 8002b48:	687b      	ldr	r3, [r7, #4]
 8002b4a:	881b      	ldrh	r3, [r3, #0]
 8002b4c:	4618      	mov	r0, r3
 8002b4e:	f000 f995 	bl	8002e7c <TM_STMPE811_ReadX>
 8002b52:	4603      	mov	r3, r0
 8002b54:	461a      	mov	r2, r3
 8002b56:	687b      	ldr	r3, [r7, #4]
 8002b58:	801a      	strh	r2, [r3, #0]
        data->y = TM_STMPE811_ReadY(data->y);
 8002b5a:	687b      	ldr	r3, [r7, #4]
 8002b5c:	885b      	ldrh	r3, [r3, #2]
 8002b5e:	4618      	mov	r0, r3
 8002b60:	f000 f9ea 	bl	8002f38 <TM_STMPE811_ReadY>
 8002b64:	4603      	mov	r3, r0
 8002b66:	461a      	mov	r2, r3
 8002b68:	687b      	ldr	r3, [r7, #4]
 8002b6a:	805a      	strh	r2, [r3, #2]
 8002b6c:	e031      	b.n	8002bd2 <STMPE811_DetermineTouchPosition+0xd2>
    } else if (data->orientation == STMPE811_Orientation_Landscape_1) {
 8002b6e:	687b      	ldr	r3, [r7, #4]
 8002b70:	799b      	ldrb	r3, [r3, #6]
 8002b72:	2b02      	cmp	r3, #2
 8002b74:	d115      	bne.n	8002ba2 <STMPE811_DetermineTouchPosition+0xa2>
        data->y = TM_STMPE811_ReadX(data->y);
 8002b76:	687b      	ldr	r3, [r7, #4]
 8002b78:	885b      	ldrh	r3, [r3, #2]
 8002b7a:	4618      	mov	r0, r3
 8002b7c:	f000 f97e 	bl	8002e7c <TM_STMPE811_ReadX>
 8002b80:	4603      	mov	r3, r0
 8002b82:	461a      	mov	r2, r3
 8002b84:	687b      	ldr	r3, [r7, #4]
 8002b86:	805a      	strh	r2, [r3, #2]
        data->x = 319 - TM_STMPE811_ReadY(data->x);
 8002b88:	687b      	ldr	r3, [r7, #4]
 8002b8a:	881b      	ldrh	r3, [r3, #0]
 8002b8c:	4618      	mov	r0, r3
 8002b8e:	f000 f9d3 	bl	8002f38 <TM_STMPE811_ReadY>
 8002b92:	4603      	mov	r3, r0
 8002b94:	f5c3 739f 	rsb	r3, r3, #318	@ 0x13e
 8002b98:	3301      	adds	r3, #1
 8002b9a:	b29a      	uxth	r2, r3
 8002b9c:	687b      	ldr	r3, [r7, #4]
 8002b9e:	801a      	strh	r2, [r3, #0]
 8002ba0:	e017      	b.n	8002bd2 <STMPE811_DetermineTouchPosition+0xd2>
    } else if (data->orientation == STMPE811_Orientation_Landscape_2) {
 8002ba2:	687b      	ldr	r3, [r7, #4]
 8002ba4:	799b      	ldrb	r3, [r3, #6]
 8002ba6:	2b03      	cmp	r3, #3
 8002ba8:	d113      	bne.n	8002bd2 <STMPE811_DetermineTouchPosition+0xd2>
        data->y = 239 - TM_STMPE811_ReadX(data->x);
 8002baa:	687b      	ldr	r3, [r7, #4]
 8002bac:	881b      	ldrh	r3, [r3, #0]
 8002bae:	4618      	mov	r0, r3
 8002bb0:	f000 f964 	bl	8002e7c <TM_STMPE811_ReadX>
 8002bb4:	4603      	mov	r3, r0
 8002bb6:	f1c3 03ef 	rsb	r3, r3, #239	@ 0xef
 8002bba:	b29a      	uxth	r2, r3
 8002bbc:	687b      	ldr	r3, [r7, #4]
 8002bbe:	805a      	strh	r2, [r3, #2]
        data->x = TM_STMPE811_ReadY(data->x);
 8002bc0:	687b      	ldr	r3, [r7, #4]
 8002bc2:	881b      	ldrh	r3, [r3, #0]
 8002bc4:	4618      	mov	r0, r3
 8002bc6:	f000 f9b7 	bl	8002f38 <TM_STMPE811_ReadY>
 8002bca:	4603      	mov	r3, r0
 8002bcc:	461a      	mov	r2, r3
 8002bce:	687b      	ldr	r3, [r7, #4]
 8002bd0:	801a      	strh	r2, [r3, #0]
    }

    //Reset Fifo
    I2C3_Write(STMPE811_ADDRESS, STMPE811_FIFO_STA, 0x01);
 8002bd2:	2201      	movs	r2, #1
 8002bd4:	214b      	movs	r1, #75	@ 0x4b
 8002bd6:	2082      	movs	r0, #130	@ 0x82
 8002bd8:	f000 f8de 	bl	8002d98 <I2C3_Write>
    I2C3_Write(STMPE811_ADDRESS, STMPE811_FIFO_STA, 0x00);
 8002bdc:	2200      	movs	r2, #0
 8002bde:	214b      	movs	r1, #75	@ 0x4b
 8002be0:	2082      	movs	r0, #130	@ 0x82
 8002be2:	f000 f8d9 	bl	8002d98 <I2C3_Write>
}
 8002be6:	bf00      	nop
 8002be8:	3708      	adds	r7, #8
 8002bea:	46bd      	mov	sp, r7
 8002bec:	bd80      	pop	{r7, pc}
	...

08002bf0 <enableInterruptSupportForTouch>:
}

#if COMPILE_TOUCH_INTERRUPT_SUPPORT == 1

void enableInterruptSupportForTouch(void)
{
 8002bf0:	b580      	push	{r7, lr}
 8002bf2:	b086      	sub	sp, #24
 8002bf4:	af00      	add	r7, sp, #0
    // Initialze the GPIO and enable the interrupt
    // Interrupt is on interrupt Line PA15
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8002bf6:	2300      	movs	r3, #0
 8002bf8:	603b      	str	r3, [r7, #0]
 8002bfa:	4b14      	ldr	r3, [pc, #80]	@ (8002c4c <enableInterruptSupportForTouch+0x5c>)
 8002bfc:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002bfe:	4a13      	ldr	r2, [pc, #76]	@ (8002c4c <enableInterruptSupportForTouch+0x5c>)
 8002c00:	f043 0301 	orr.w	r3, r3, #1
 8002c04:	6313      	str	r3, [r2, #48]	@ 0x30
 8002c06:	4b11      	ldr	r3, [pc, #68]	@ (8002c4c <enableInterruptSupportForTouch+0x5c>)
 8002c08:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002c0a:	f003 0301 	and.w	r3, r3, #1
 8002c0e:	603b      	str	r3, [r7, #0]
 8002c10:	683b      	ldr	r3, [r7, #0]

    GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002c12:	1d3b      	adds	r3, r7, #4
 8002c14:	2200      	movs	r2, #0
 8002c16:	601a      	str	r2, [r3, #0]
 8002c18:	605a      	str	r2, [r3, #4]
 8002c1a:	609a      	str	r2, [r3, #8]
 8002c1c:	60da      	str	r2, [r3, #12]
 8002c1e:	611a      	str	r2, [r3, #16]

    GPIO_InitStruct.Pin = GPIO_PIN_15;
 8002c20:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 8002c24:	607b      	str	r3, [r7, #4]
    GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING_FALLING;
 8002c26:	f44f 1344 	mov.w	r3, #3211264	@ 0x310000
 8002c2a:	60bb      	str	r3, [r7, #8]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002c2c:	2300      	movs	r3, #0
 8002c2e:	60fb      	str	r3, [r7, #12]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8002c30:	2302      	movs	r3, #2
 8002c32:	613b      	str	r3, [r7, #16]

    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8002c34:	1d3b      	adds	r3, r7, #4
 8002c36:	4619      	mov	r1, r3
 8002c38:	4805      	ldr	r0, [pc, #20]	@ (8002c50 <enableInterruptSupportForTouch+0x60>)
 8002c3a:	f000 fcd3 	bl	80035e4 <HAL_GPIO_Init>

    NVIC_EnableIRQ(EXTI15_10_IRQn);
 8002c3e:	2028      	movs	r0, #40	@ 0x28
 8002c40:	f7ff fe56 	bl	80028f0 <__NVIC_EnableIRQ>

}
 8002c44:	bf00      	nop
 8002c46:	3718      	adds	r7, #24
 8002c48:	46bd      	mov	sp, r7
 8002c4a:	bd80      	pop	{r7, pc}
 8002c4c:	40023800 	.word	0x40023800
 8002c50:	40020000 	.word	0x40020000

08002c54 <verifyHAL_I2C_IS_OKAY>:

#endif 


//  ******************************** I2C Functions ********************************//
void verifyHAL_I2C_IS_OKAY(){
 8002c54:	b480      	push	{r7}
 8002c56:	af00      	add	r7, sp, #0
    if (HAL_status != HAL_OK)
 8002c58:	4b05      	ldr	r3, [pc, #20]	@ (8002c70 <verifyHAL_I2C_IS_OKAY+0x1c>)
 8002c5a:	781b      	ldrb	r3, [r3, #0]
 8002c5c:	2b00      	cmp	r3, #0
 8002c5e:	d001      	beq.n	8002c64 <verifyHAL_I2C_IS_OKAY+0x10>
    {
        while(1);
 8002c60:	bf00      	nop
 8002c62:	e7fd      	b.n	8002c60 <verifyHAL_I2C_IS_OKAY+0xc>
    }
}
 8002c64:	bf00      	nop
 8002c66:	46bd      	mov	sp, r7
 8002c68:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002c6c:	4770      	bx	lr
 8002c6e:	bf00      	nop
 8002c70:	20025cc4 	.word	0x20025cc4

08002c74 <I2C3_Init>:

static void I2C3_Init()
{
 8002c74:	b580      	push	{r7, lr}
 8002c76:	b082      	sub	sp, #8
 8002c78:	af00      	add	r7, sp, #0

	__HAL_RCC_I2C3_CLK_ENABLE();
 8002c7a:	2300      	movs	r3, #0
 8002c7c:	603b      	str	r3, [r7, #0]
 8002c7e:	4b18      	ldr	r3, [pc, #96]	@ (8002ce0 <I2C3_Init+0x6c>)
 8002c80:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002c82:	4a17      	ldr	r2, [pc, #92]	@ (8002ce0 <I2C3_Init+0x6c>)
 8002c84:	f443 0300 	orr.w	r3, r3, #8388608	@ 0x800000
 8002c88:	6413      	str	r3, [r2, #64]	@ 0x40
 8002c8a:	4b15      	ldr	r3, [pc, #84]	@ (8002ce0 <I2C3_Init+0x6c>)
 8002c8c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002c8e:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 8002c92:	603b      	str	r3, [r7, #0]
 8002c94:	683b      	ldr	r3, [r7, #0]
    // Configure I2C3
    hI2C3.Instance = STMPE811_I2C;
 8002c96:	4b13      	ldr	r3, [pc, #76]	@ (8002ce4 <I2C3_Init+0x70>)
 8002c98:	4a13      	ldr	r2, [pc, #76]	@ (8002ce8 <I2C3_Init+0x74>)
 8002c9a:	601a      	str	r2, [r3, #0]
    hI2C3.Init.ClockSpeed = STMPE811_I2C_CLOCK;
 8002c9c:	4b11      	ldr	r3, [pc, #68]	@ (8002ce4 <I2C3_Init+0x70>)
 8002c9e:	4a13      	ldr	r2, [pc, #76]	@ (8002cec <I2C3_Init+0x78>)
 8002ca0:	605a      	str	r2, [r3, #4]
    hI2C3.Init.DutyCycle = I2C_DUTYCYCLE_2;
 8002ca2:	4b10      	ldr	r3, [pc, #64]	@ (8002ce4 <I2C3_Init+0x70>)
 8002ca4:	2200      	movs	r2, #0
 8002ca6:	609a      	str	r2, [r3, #8]
    hI2C3.Init.OwnAddress1 = 0x00; // May be wrong
 8002ca8:	4b0e      	ldr	r3, [pc, #56]	@ (8002ce4 <I2C3_Init+0x70>)
 8002caa:	2200      	movs	r2, #0
 8002cac:	60da      	str	r2, [r3, #12]
    hI2C3.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 8002cae:	4b0d      	ldr	r3, [pc, #52]	@ (8002ce4 <I2C3_Init+0x70>)
 8002cb0:	f44f 4280 	mov.w	r2, #16384	@ 0x4000
 8002cb4:	611a      	str	r2, [r3, #16]
    hI2C3.Init.GeneralCallMode = I2C_NOSTRETCH_DISABLE;
 8002cb6:	4b0b      	ldr	r3, [pc, #44]	@ (8002ce4 <I2C3_Init+0x70>)
 8002cb8:	2200      	movs	r2, #0
 8002cba:	61da      	str	r2, [r3, #28]
    hI2C3.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 8002cbc:	4b09      	ldr	r3, [pc, #36]	@ (8002ce4 <I2C3_Init+0x70>)
 8002cbe:	2200      	movs	r2, #0
 8002cc0:	621a      	str	r2, [r3, #32]
    // Do we need to configutre I2C Mode? 

    // Initialize I2C3 interface
    HAL_StatusTypeDef status;
    status = HAL_I2C_Init(&hI2C3);
 8002cc2:	4808      	ldr	r0, [pc, #32]	@ (8002ce4 <I2C3_Init+0x70>)
 8002cc4:	f000 ff60 	bl	8003b88 <HAL_I2C_Init>
 8002cc8:	4603      	mov	r3, r0
 8002cca:	71fb      	strb	r3, [r7, #7]
    if (status != HAL_OK)
 8002ccc:	79fb      	ldrb	r3, [r7, #7]
 8002cce:	2b00      	cmp	r3, #0
 8002cd0:	d001      	beq.n	8002cd6 <I2C3_Init+0x62>
    {
        for(;;); // Catch error
 8002cd2:	bf00      	nop
 8002cd4:	e7fd      	b.n	8002cd2 <I2C3_Init+0x5e>
    }
    return;
 8002cd6:	bf00      	nop
}
 8002cd8:	3708      	adds	r7, #8
 8002cda:	46bd      	mov	sp, r7
 8002cdc:	bd80      	pop	{r7, pc}
 8002cde:	bf00      	nop
 8002ce0:	40023800 	.word	0x40023800
 8002ce4:	20025c70 	.word	0x20025c70
 8002ce8:	40005c00 	.word	0x40005c00
 8002cec:	000186a0 	.word	0x000186a0

08002cf0 <I2C3_MspInit>:

// GPIO Initializations 
static void I2C3_MspInit(void)
{
 8002cf0:	b580      	push	{r7, lr}
 8002cf2:	b088      	sub	sp, #32
 8002cf4:	af00      	add	r7, sp, #0
	GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002cf6:	f107 030c 	add.w	r3, r7, #12
 8002cfa:	2200      	movs	r2, #0
 8002cfc:	601a      	str	r2, [r3, #0]
 8002cfe:	605a      	str	r2, [r3, #4]
 8002d00:	609a      	str	r2, [r3, #8]
 8002d02:	60da      	str	r2, [r3, #12]
 8002d04:	611a      	str	r2, [r3, #16]
    // Enable Clocks
    // GPIOC
    __HAL_RCC_GPIOC_CLK_ENABLE();
 8002d06:	2300      	movs	r3, #0
 8002d08:	60bb      	str	r3, [r7, #8]
 8002d0a:	4b20      	ldr	r3, [pc, #128]	@ (8002d8c <I2C3_MspInit+0x9c>)
 8002d0c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002d0e:	4a1f      	ldr	r2, [pc, #124]	@ (8002d8c <I2C3_MspInit+0x9c>)
 8002d10:	f043 0304 	orr.w	r3, r3, #4
 8002d14:	6313      	str	r3, [r2, #48]	@ 0x30
 8002d16:	4b1d      	ldr	r3, [pc, #116]	@ (8002d8c <I2C3_MspInit+0x9c>)
 8002d18:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002d1a:	f003 0304 	and.w	r3, r3, #4
 8002d1e:	60bb      	str	r3, [r7, #8]
 8002d20:	68bb      	ldr	r3, [r7, #8]

    // GPIOA 
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8002d22:	2300      	movs	r3, #0
 8002d24:	607b      	str	r3, [r7, #4]
 8002d26:	4b19      	ldr	r3, [pc, #100]	@ (8002d8c <I2C3_MspInit+0x9c>)
 8002d28:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002d2a:	4a18      	ldr	r2, [pc, #96]	@ (8002d8c <I2C3_MspInit+0x9c>)
 8002d2c:	f043 0301 	orr.w	r3, r3, #1
 8002d30:	6313      	str	r3, [r2, #48]	@ 0x30
 8002d32:	4b16      	ldr	r3, [pc, #88]	@ (8002d8c <I2C3_MspInit+0x9c>)
 8002d34:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002d36:	f003 0301 	and.w	r3, r3, #1
 8002d3a:	607b      	str	r3, [r7, #4]
 8002d3c:	687b      	ldr	r3, [r7, #4]

    /*Configure GPIO pin : I2C3_SDA_Pin */
    GPIO_InitStruct.Pin = I2C3_SDA_Pin;
 8002d3e:	f44f 7300 	mov.w	r3, #512	@ 0x200
 8002d42:	60fb      	str	r3, [r7, #12]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8002d44:	2312      	movs	r3, #18
 8002d46:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002d48:	2300      	movs	r3, #0
 8002d4a:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002d4c:	2300      	movs	r3, #0
 8002d4e:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C3;
 8002d50:	2304      	movs	r3, #4
 8002d52:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(I2C3_SDA_GPIO_Port, &GPIO_InitStruct);
 8002d54:	f107 030c 	add.w	r3, r7, #12
 8002d58:	4619      	mov	r1, r3
 8002d5a:	480d      	ldr	r0, [pc, #52]	@ (8002d90 <I2C3_MspInit+0xa0>)
 8002d5c:	f000 fc42 	bl	80035e4 <HAL_GPIO_Init>

    /*Configure GPIO pin : I2C3_SCL_Pin */
    GPIO_InitStruct.Pin = I2C3_SCL_Pin;
 8002d60:	f44f 7380 	mov.w	r3, #256	@ 0x100
 8002d64:	60fb      	str	r3, [r7, #12]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8002d66:	2312      	movs	r3, #18
 8002d68:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002d6a:	2300      	movs	r3, #0
 8002d6c:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002d6e:	2300      	movs	r3, #0
 8002d70:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C3;
 8002d72:	2304      	movs	r3, #4
 8002d74:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(I2C3_SCL_GPIO_Port, &GPIO_InitStruct);
 8002d76:	f107 030c 	add.w	r3, r7, #12
 8002d7a:	4619      	mov	r1, r3
 8002d7c:	4805      	ldr	r0, [pc, #20]	@ (8002d94 <I2C3_MspInit+0xa4>)
 8002d7e:	f000 fc31 	bl	80035e4 <HAL_GPIO_Init>
    
}
 8002d82:	bf00      	nop
 8002d84:	3720      	adds	r7, #32
 8002d86:	46bd      	mov	sp, r7
 8002d88:	bd80      	pop	{r7, pc}
 8002d8a:	bf00      	nop
 8002d8c:	40023800 	.word	0x40023800
 8002d90:	40020800 	.word	0x40020800
 8002d94:	40020000 	.word	0x40020000

08002d98 <I2C3_Write>:

// This function should only be used for single BYTE transfers 
void I2C3_Write(uint16_t devAddr, uint8_t reg, uint8_t data)
{
 8002d98:	b580      	push	{r7, lr}
 8002d9a:	b088      	sub	sp, #32
 8002d9c:	af04      	add	r7, sp, #16
 8002d9e:	4603      	mov	r3, r0
 8002da0:	80fb      	strh	r3, [r7, #6]
 8002da2:	460b      	mov	r3, r1
 8002da4:	717b      	strb	r3, [r7, #5]
 8002da6:	4613      	mov	r3, r2
 8002da8:	713b      	strb	r3, [r7, #4]
    uint8_t dataConversion = data; // data will be a raw hex value this is mainly for debugging...
 8002daa:	793b      	ldrb	r3, [r7, #4]
 8002dac:	73fb      	strb	r3, [r7, #15]
    // Learning topic - Is this needed? Or can I just use &data in the function call? 
    HAL_status = HAL_I2C_Mem_Write(&hI2C3, devAddr, reg, I2C_MEMADD_SIZE_8BIT, &dataConversion, ONEBYTE, DEFAULT_TESTING_TIMEOUT);
 8002dae:	797b      	ldrb	r3, [r7, #5]
 8002db0:	b29a      	uxth	r2, r3
 8002db2:	88f9      	ldrh	r1, [r7, #6]
 8002db4:	4b0a      	ldr	r3, [pc, #40]	@ (8002de0 <I2C3_Write+0x48>)
 8002db6:	9302      	str	r3, [sp, #8]
 8002db8:	2301      	movs	r3, #1
 8002dba:	9301      	str	r3, [sp, #4]
 8002dbc:	f107 030f 	add.w	r3, r7, #15
 8002dc0:	9300      	str	r3, [sp, #0]
 8002dc2:	2301      	movs	r3, #1
 8002dc4:	4807      	ldr	r0, [pc, #28]	@ (8002de4 <I2C3_Write+0x4c>)
 8002dc6:	f001 f823 	bl	8003e10 <HAL_I2C_Mem_Write>
 8002dca:	4603      	mov	r3, r0
 8002dcc:	461a      	mov	r2, r3
 8002dce:	4b06      	ldr	r3, [pc, #24]	@ (8002de8 <I2C3_Write+0x50>)
 8002dd0:	701a      	strb	r2, [r3, #0]
    verifyHAL_I2C_IS_OKAY();
 8002dd2:	f7ff ff3f 	bl	8002c54 <verifyHAL_I2C_IS_OKAY>
}
 8002dd6:	bf00      	nop
 8002dd8:	3710      	adds	r7, #16
 8002dda:	46bd      	mov	sp, r7
 8002ddc:	bd80      	pop	{r7, pc}
 8002dde:	bf00      	nop
 8002de0:	0003d090 	.word	0x0003d090
 8002de4:	20025c70 	.word	0x20025c70
 8002de8:	20025cc4 	.word	0x20025cc4

08002dec <I2C3_Read>:

// This function should only be used for single BYTE transfers 
void I2C3_Read(uint8_t address, uint8_t reg, uint8_t * rxData)
{
 8002dec:	b580      	push	{r7, lr}
 8002dee:	b086      	sub	sp, #24
 8002df0:	af04      	add	r7, sp, #16
 8002df2:	4603      	mov	r3, r0
 8002df4:	603a      	str	r2, [r7, #0]
 8002df6:	71fb      	strb	r3, [r7, #7]
 8002df8:	460b      	mov	r3, r1
 8002dfa:	71bb      	strb	r3, [r7, #6]
    // Need to use MEM functions
    HAL_status = HAL_I2C_Mem_Read(&hI2C3, address, reg, I2C_MEMADD_SIZE_8BIT, rxData, ONEBYTE, DEFAULT_TESTING_TIMEOUT);
 8002dfc:	79fb      	ldrb	r3, [r7, #7]
 8002dfe:	b299      	uxth	r1, r3
 8002e00:	79bb      	ldrb	r3, [r7, #6]
 8002e02:	b29a      	uxth	r2, r3
 8002e04:	4b09      	ldr	r3, [pc, #36]	@ (8002e2c <I2C3_Read+0x40>)
 8002e06:	9302      	str	r3, [sp, #8]
 8002e08:	2301      	movs	r3, #1
 8002e0a:	9301      	str	r3, [sp, #4]
 8002e0c:	683b      	ldr	r3, [r7, #0]
 8002e0e:	9300      	str	r3, [sp, #0]
 8002e10:	2301      	movs	r3, #1
 8002e12:	4807      	ldr	r0, [pc, #28]	@ (8002e30 <I2C3_Read+0x44>)
 8002e14:	f001 f8f6 	bl	8004004 <HAL_I2C_Mem_Read>
 8002e18:	4603      	mov	r3, r0
 8002e1a:	461a      	mov	r2, r3
 8002e1c:	4b05      	ldr	r3, [pc, #20]	@ (8002e34 <I2C3_Read+0x48>)
 8002e1e:	701a      	strb	r2, [r3, #0]
    verifyHAL_I2C_IS_OKAY();
 8002e20:	f7ff ff18 	bl	8002c54 <verifyHAL_I2C_IS_OKAY>
}
 8002e24:	bf00      	nop
 8002e26:	3708      	adds	r7, #8
 8002e28:	46bd      	mov	sp, r7
 8002e2a:	bd80      	pop	{r7, pc}
 8002e2c:	0003d090 	.word	0x0003d090
 8002e30:	20025c70 	.word	0x20025c70
 8002e34:	20025cc4 	.word	0x20025cc4

08002e38 <I2C3_MulitByteRead>:

// This function should be used for multiple byte reads from a reg
void I2C3_MulitByteRead(uint8_t address, uint8_t reg, uint8_t * rxData, uint16_t numOfBytes)
{
 8002e38:	b580      	push	{r7, lr}
 8002e3a:	b086      	sub	sp, #24
 8002e3c:	af04      	add	r7, sp, #16
 8002e3e:	603a      	str	r2, [r7, #0]
 8002e40:	461a      	mov	r2, r3
 8002e42:	4603      	mov	r3, r0
 8002e44:	71fb      	strb	r3, [r7, #7]
 8002e46:	460b      	mov	r3, r1
 8002e48:	71bb      	strb	r3, [r7, #6]
 8002e4a:	4613      	mov	r3, r2
 8002e4c:	80bb      	strh	r3, [r7, #4]
    HAL_I2C_Mem_Read(&hI2C3, address, reg, I2C_MEMADD_SIZE_8BIT, rxData, numOfBytes, DEFAULT_TESTING_TIMEOUT);
 8002e4e:	79fb      	ldrb	r3, [r7, #7]
 8002e50:	b299      	uxth	r1, r3
 8002e52:	79bb      	ldrb	r3, [r7, #6]
 8002e54:	b29a      	uxth	r2, r3
 8002e56:	4b07      	ldr	r3, [pc, #28]	@ (8002e74 <I2C3_MulitByteRead+0x3c>)
 8002e58:	9302      	str	r3, [sp, #8]
 8002e5a:	88bb      	ldrh	r3, [r7, #4]
 8002e5c:	9301      	str	r3, [sp, #4]
 8002e5e:	683b      	ldr	r3, [r7, #0]
 8002e60:	9300      	str	r3, [sp, #0]
 8002e62:	2301      	movs	r3, #1
 8002e64:	4804      	ldr	r0, [pc, #16]	@ (8002e78 <I2C3_MulitByteRead+0x40>)
 8002e66:	f001 f8cd 	bl	8004004 <HAL_I2C_Mem_Read>
}
 8002e6a:	bf00      	nop
 8002e6c:	3708      	adds	r7, #8
 8002e6e:	46bd      	mov	sp, r7
 8002e70:	bd80      	pop	{r7, pc}
 8002e72:	bf00      	nop
 8002e74:	0003d090 	.word	0x0003d090
 8002e78:	20025c70 	.word	0x20025c70

08002e7c <TM_STMPE811_ReadX>:

/* The below function was created by Tilen MAJERLE but modified by Xavion */
uint16_t TM_STMPE811_ReadX(uint16_t x) { // TM FUNCTION 
 8002e7c:	b580      	push	{r7, lr}
 8002e7e:	b084      	sub	sp, #16
 8002e80:	af00      	add	r7, sp, #0
 8002e82:	4603      	mov	r3, r0
 8002e84:	80fb      	strh	r3, [r7, #6]
    uint8_t data[2];
    int16_t val, dx;
    data[1] = STMPE811_Read(STMPE811_TSC_DATA_X);
 8002e86:	204d      	movs	r0, #77	@ 0x4d
 8002e88:	f7ff fe17 	bl	8002aba <STMPE811_Read>
 8002e8c:	4603      	mov	r3, r0
 8002e8e:	727b      	strb	r3, [r7, #9]
    data[0] = STMPE811_Read(STMPE811_TSC_DATA_X + 1);
 8002e90:	204e      	movs	r0, #78	@ 0x4e
 8002e92:	f7ff fe12 	bl	8002aba <STMPE811_Read>
 8002e96:	4603      	mov	r3, r0
 8002e98:	723b      	strb	r3, [r7, #8]
    val = (data[1] << 8 | (data[0] & 0xFF));
 8002e9a:	7a7b      	ldrb	r3, [r7, #9]
 8002e9c:	021b      	lsls	r3, r3, #8
 8002e9e:	b21a      	sxth	r2, r3
 8002ea0:	7a3b      	ldrb	r3, [r7, #8]
 8002ea2:	b21b      	sxth	r3, r3
 8002ea4:	4313      	orrs	r3, r2
 8002ea6:	81fb      	strh	r3, [r7, #14]

    if (val <= 3000) {
 8002ea8:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
 8002eac:	f640 32b8 	movw	r2, #3000	@ 0xbb8
 8002eb0:	4293      	cmp	r3, r2
 8002eb2:	dc06      	bgt.n	8002ec2 <TM_STMPE811_ReadX+0x46>
        val = 3900 - val;
 8002eb4:	89fb      	ldrh	r3, [r7, #14]
 8002eb6:	f5c3 6373 	rsb	r3, r3, #3888	@ 0xf30
 8002eba:	330c      	adds	r3, #12
 8002ebc:	b29b      	uxth	r3, r3
 8002ebe:	81fb      	strh	r3, [r7, #14]
 8002ec0:	e005      	b.n	8002ece <TM_STMPE811_ReadX+0x52>
    } else {
        val = 3800 - val;
 8002ec2:	89fb      	ldrh	r3, [r7, #14]
 8002ec4:	f5c3 636d 	rsb	r3, r3, #3792	@ 0xed0
 8002ec8:	3308      	adds	r3, #8
 8002eca:	b29b      	uxth	r3, r3
 8002ecc:	81fb      	strh	r3, [r7, #14]
    }

    val /= 15;
 8002ece:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
 8002ed2:	4a18      	ldr	r2, [pc, #96]	@ (8002f34 <TM_STMPE811_ReadX+0xb8>)
 8002ed4:	fb82 1203 	smull	r1, r2, r2, r3
 8002ed8:	441a      	add	r2, r3
 8002eda:	10d2      	asrs	r2, r2, #3
 8002edc:	17db      	asrs	r3, r3, #31
 8002ede:	1ad3      	subs	r3, r2, r3
 8002ee0:	81fb      	strh	r3, [r7, #14]

    if (val > 239) {
 8002ee2:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
 8002ee6:	2bef      	cmp	r3, #239	@ 0xef
 8002ee8:	dd02      	ble.n	8002ef0 <TM_STMPE811_ReadX+0x74>
        val = 239;
 8002eea:	23ef      	movs	r3, #239	@ 0xef
 8002eec:	81fb      	strh	r3, [r7, #14]
 8002eee:	e005      	b.n	8002efc <TM_STMPE811_ReadX+0x80>
    } else if (val < 0) {
 8002ef0:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
 8002ef4:	2b00      	cmp	r3, #0
 8002ef6:	da01      	bge.n	8002efc <TM_STMPE811_ReadX+0x80>
        val = 0;
 8002ef8:	2300      	movs	r3, #0
 8002efa:	81fb      	strh	r3, [r7, #14]
    }

    dx = (val > x) ? (val - x) : (x - val);
 8002efc:	f9b7 200e 	ldrsh.w	r2, [r7, #14]
 8002f00:	88fb      	ldrh	r3, [r7, #6]
 8002f02:	429a      	cmp	r2, r3
 8002f04:	dd05      	ble.n	8002f12 <TM_STMPE811_ReadX+0x96>
 8002f06:	89fa      	ldrh	r2, [r7, #14]
 8002f08:	88fb      	ldrh	r3, [r7, #6]
 8002f0a:	1ad3      	subs	r3, r2, r3
 8002f0c:	b29b      	uxth	r3, r3
 8002f0e:	b21b      	sxth	r3, r3
 8002f10:	e004      	b.n	8002f1c <TM_STMPE811_ReadX+0xa0>
 8002f12:	89fb      	ldrh	r3, [r7, #14]
 8002f14:	88fa      	ldrh	r2, [r7, #6]
 8002f16:	1ad3      	subs	r3, r2, r3
 8002f18:	b29b      	uxth	r3, r3
 8002f1a:	b21b      	sxth	r3, r3
 8002f1c:	81bb      	strh	r3, [r7, #12]
    if (dx > 4) {
 8002f1e:	f9b7 300c 	ldrsh.w	r3, [r7, #12]
 8002f22:	2b04      	cmp	r3, #4
 8002f24:	dd01      	ble.n	8002f2a <TM_STMPE811_ReadX+0xae>
        return val;
 8002f26:	89fb      	ldrh	r3, [r7, #14]
 8002f28:	e000      	b.n	8002f2c <TM_STMPE811_ReadX+0xb0>
    }
    return x;
 8002f2a:	88fb      	ldrh	r3, [r7, #6]
}
 8002f2c:	4618      	mov	r0, r3
 8002f2e:	3710      	adds	r7, #16
 8002f30:	46bd      	mov	sp, r7
 8002f32:	bd80      	pop	{r7, pc}
 8002f34:	88888889 	.word	0x88888889

08002f38 <TM_STMPE811_ReadY>:

/* The below function was created by Tilen MAJERLE but modified by Xavion */
uint16_t TM_STMPE811_ReadY(uint16_t y) { // TM FUNCTION 
 8002f38:	b580      	push	{r7, lr}
 8002f3a:	b084      	sub	sp, #16
 8002f3c:	af00      	add	r7, sp, #0
 8002f3e:	4603      	mov	r3, r0
 8002f40:	80fb      	strh	r3, [r7, #6]
    uint8_t data[2];
    int16_t val, dy;
    data[1] = STMPE811_Read(STMPE811_TSC_DATA_Y);
 8002f42:	204f      	movs	r0, #79	@ 0x4f
 8002f44:	f7ff fdb9 	bl	8002aba <STMPE811_Read>
 8002f48:	4603      	mov	r3, r0
 8002f4a:	727b      	strb	r3, [r7, #9]
    data[0] = STMPE811_Read(STMPE811_TSC_DATA_Y + 1);
 8002f4c:	2050      	movs	r0, #80	@ 0x50
 8002f4e:	f7ff fdb4 	bl	8002aba <STMPE811_Read>
 8002f52:	4603      	mov	r3, r0
 8002f54:	723b      	strb	r3, [r7, #8]
    val = (data[1] << 8 | (data[0] & 0xFF));
 8002f56:	7a7b      	ldrb	r3, [r7, #9]
 8002f58:	021b      	lsls	r3, r3, #8
 8002f5a:	b21a      	sxth	r2, r3
 8002f5c:	7a3b      	ldrb	r3, [r7, #8]
 8002f5e:	b21b      	sxth	r3, r3
 8002f60:	4313      	orrs	r3, r2
 8002f62:	81fb      	strh	r3, [r7, #14]

    val -= 360;
 8002f64:	89fb      	ldrh	r3, [r7, #14]
 8002f66:	f5a3 73b4 	sub.w	r3, r3, #360	@ 0x168
 8002f6a:	b29b      	uxth	r3, r3
 8002f6c:	81fb      	strh	r3, [r7, #14]
    val = val / 11;
 8002f6e:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
 8002f72:	4a19      	ldr	r2, [pc, #100]	@ (8002fd8 <TM_STMPE811_ReadY+0xa0>)
 8002f74:	fb82 1203 	smull	r1, r2, r2, r3
 8002f78:	1052      	asrs	r2, r2, #1
 8002f7a:	17db      	asrs	r3, r3, #31
 8002f7c:	1ad3      	subs	r3, r2, r3
 8002f7e:	81fb      	strh	r3, [r7, #14]

    if (val <= 0) {
 8002f80:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
 8002f84:	2b00      	cmp	r3, #0
 8002f86:	dc02      	bgt.n	8002f8e <TM_STMPE811_ReadY+0x56>
        val = 0;
 8002f88:	2300      	movs	r3, #0
 8002f8a:	81fb      	strh	r3, [r7, #14]
 8002f8c:	e007      	b.n	8002f9e <TM_STMPE811_ReadY+0x66>
    } else if (val >= 320) {
 8002f8e:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
 8002f92:	f5b3 7fa0 	cmp.w	r3, #320	@ 0x140
 8002f96:	db02      	blt.n	8002f9e <TM_STMPE811_ReadY+0x66>
        val = 319;
 8002f98:	f240 133f 	movw	r3, #319	@ 0x13f
 8002f9c:	81fb      	strh	r3, [r7, #14]
    }

    dy = (val > y) ? (val - y) : (y - val);
 8002f9e:	f9b7 200e 	ldrsh.w	r2, [r7, #14]
 8002fa2:	88fb      	ldrh	r3, [r7, #6]
 8002fa4:	429a      	cmp	r2, r3
 8002fa6:	dd05      	ble.n	8002fb4 <TM_STMPE811_ReadY+0x7c>
 8002fa8:	89fa      	ldrh	r2, [r7, #14]
 8002faa:	88fb      	ldrh	r3, [r7, #6]
 8002fac:	1ad3      	subs	r3, r2, r3
 8002fae:	b29b      	uxth	r3, r3
 8002fb0:	b21b      	sxth	r3, r3
 8002fb2:	e004      	b.n	8002fbe <TM_STMPE811_ReadY+0x86>
 8002fb4:	89fb      	ldrh	r3, [r7, #14]
 8002fb6:	88fa      	ldrh	r2, [r7, #6]
 8002fb8:	1ad3      	subs	r3, r2, r3
 8002fba:	b29b      	uxth	r3, r3
 8002fbc:	b21b      	sxth	r3, r3
 8002fbe:	81bb      	strh	r3, [r7, #12]
    if (dy > 4) {
 8002fc0:	f9b7 300c 	ldrsh.w	r3, [r7, #12]
 8002fc4:	2b04      	cmp	r3, #4
 8002fc6:	dd01      	ble.n	8002fcc <TM_STMPE811_ReadY+0x94>
        return val;
 8002fc8:	89fb      	ldrh	r3, [r7, #14]
 8002fca:	e000      	b.n	8002fce <TM_STMPE811_ReadY+0x96>
    }
    return y;
 8002fcc:	88fb      	ldrh	r3, [r7, #6]
}
 8002fce:	4618      	mov	r0, r3
 8002fd0:	3710      	adds	r7, #16
 8002fd2:	46bd      	mov	sp, r7
 8002fd4:	bd80      	pop	{r7, pc}
 8002fd6:	bf00      	nop
 8002fd8:	2e8ba2e9 	.word	0x2e8ba2e9

08002fdc <initialise_monitor_handles>:
char **environ = __env;


/* Functions */
void initialise_monitor_handles()
{
 8002fdc:	b480      	push	{r7}
 8002fde:	af00      	add	r7, sp, #0
}
 8002fe0:	bf00      	nop
 8002fe2:	46bd      	mov	sp, r7
 8002fe4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002fe8:	4770      	bx	lr

08002fea <_read>:
  _kill(status, -1);
  while (1) {}    /* Make sure we hang here */
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 8002fea:	b580      	push	{r7, lr}
 8002fec:	b086      	sub	sp, #24
 8002fee:	af00      	add	r7, sp, #0
 8002ff0:	60f8      	str	r0, [r7, #12]
 8002ff2:	60b9      	str	r1, [r7, #8]
 8002ff4:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8002ff6:	2300      	movs	r3, #0
 8002ff8:	617b      	str	r3, [r7, #20]
 8002ffa:	e00a      	b.n	8003012 <_read+0x28>
  {
    *ptr++ = __io_getchar();
 8002ffc:	f3af 8000 	nop.w
 8003000:	4601      	mov	r1, r0
 8003002:	68bb      	ldr	r3, [r7, #8]
 8003004:	1c5a      	adds	r2, r3, #1
 8003006:	60ba      	str	r2, [r7, #8]
 8003008:	b2ca      	uxtb	r2, r1
 800300a:	701a      	strb	r2, [r3, #0]
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 800300c:	697b      	ldr	r3, [r7, #20]
 800300e:	3301      	adds	r3, #1
 8003010:	617b      	str	r3, [r7, #20]
 8003012:	697a      	ldr	r2, [r7, #20]
 8003014:	687b      	ldr	r3, [r7, #4]
 8003016:	429a      	cmp	r2, r3
 8003018:	dbf0      	blt.n	8002ffc <_read+0x12>
  }

  return len;
 800301a:	687b      	ldr	r3, [r7, #4]
}
 800301c:	4618      	mov	r0, r3
 800301e:	3718      	adds	r7, #24
 8003020:	46bd      	mov	sp, r7
 8003022:	bd80      	pop	{r7, pc}

08003024 <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 8003024:	b580      	push	{r7, lr}
 8003026:	b086      	sub	sp, #24
 8003028:	af00      	add	r7, sp, #0
 800302a:	60f8      	str	r0, [r7, #12]
 800302c:	60b9      	str	r1, [r7, #8]
 800302e:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8003030:	2300      	movs	r3, #0
 8003032:	617b      	str	r3, [r7, #20]
 8003034:	e009      	b.n	800304a <_write+0x26>
  {
    __io_putchar(*ptr++);
 8003036:	68bb      	ldr	r3, [r7, #8]
 8003038:	1c5a      	adds	r2, r3, #1
 800303a:	60ba      	str	r2, [r7, #8]
 800303c:	781b      	ldrb	r3, [r3, #0]
 800303e:	4618      	mov	r0, r3
 8003040:	f3af 8000 	nop.w
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8003044:	697b      	ldr	r3, [r7, #20]
 8003046:	3301      	adds	r3, #1
 8003048:	617b      	str	r3, [r7, #20]
 800304a:	697a      	ldr	r2, [r7, #20]
 800304c:	687b      	ldr	r3, [r7, #4]
 800304e:	429a      	cmp	r2, r3
 8003050:	dbf1      	blt.n	8003036 <_write+0x12>
  }
  return len;
 8003052:	687b      	ldr	r3, [r7, #4]
}
 8003054:	4618      	mov	r0, r3
 8003056:	3718      	adds	r7, #24
 8003058:	46bd      	mov	sp, r7
 800305a:	bd80      	pop	{r7, pc}

0800305c <_close>:

int _close(int file)
{
 800305c:	b480      	push	{r7}
 800305e:	b083      	sub	sp, #12
 8003060:	af00      	add	r7, sp, #0
 8003062:	6078      	str	r0, [r7, #4]
  (void)file;
  return -1;
 8003064:	f04f 33ff 	mov.w	r3, #4294967295
}
 8003068:	4618      	mov	r0, r3
 800306a:	370c      	adds	r7, #12
 800306c:	46bd      	mov	sp, r7
 800306e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003072:	4770      	bx	lr

08003074 <_fstat>:


int _fstat(int file, struct stat *st)
{
 8003074:	b480      	push	{r7}
 8003076:	b083      	sub	sp, #12
 8003078:	af00      	add	r7, sp, #0
 800307a:	6078      	str	r0, [r7, #4]
 800307c:	6039      	str	r1, [r7, #0]
  (void)file;
  st->st_mode = S_IFCHR;
 800307e:	683b      	ldr	r3, [r7, #0]
 8003080:	f44f 5200 	mov.w	r2, #8192	@ 0x2000
 8003084:	605a      	str	r2, [r3, #4]
  return 0;
 8003086:	2300      	movs	r3, #0
}
 8003088:	4618      	mov	r0, r3
 800308a:	370c      	adds	r7, #12
 800308c:	46bd      	mov	sp, r7
 800308e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003092:	4770      	bx	lr

08003094 <_isatty>:

int _isatty(int file)
{
 8003094:	b480      	push	{r7}
 8003096:	b083      	sub	sp, #12
 8003098:	af00      	add	r7, sp, #0
 800309a:	6078      	str	r0, [r7, #4]
  (void)file;
  return 1;
 800309c:	2301      	movs	r3, #1
}
 800309e:	4618      	mov	r0, r3
 80030a0:	370c      	adds	r7, #12
 80030a2:	46bd      	mov	sp, r7
 80030a4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80030a8:	4770      	bx	lr

080030aa <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 80030aa:	b480      	push	{r7}
 80030ac:	b085      	sub	sp, #20
 80030ae:	af00      	add	r7, sp, #0
 80030b0:	60f8      	str	r0, [r7, #12]
 80030b2:	60b9      	str	r1, [r7, #8]
 80030b4:	607a      	str	r2, [r7, #4]
  (void)file;
  (void)ptr;
  (void)dir;
  return 0;
 80030b6:	2300      	movs	r3, #0
}
 80030b8:	4618      	mov	r0, r3
 80030ba:	3714      	adds	r7, #20
 80030bc:	46bd      	mov	sp, r7
 80030be:	f85d 7b04 	ldr.w	r7, [sp], #4
 80030c2:	4770      	bx	lr

080030c4 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 80030c4:	b580      	push	{r7, lr}
 80030c6:	b086      	sub	sp, #24
 80030c8:	af00      	add	r7, sp, #0
 80030ca:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 80030cc:	4a14      	ldr	r2, [pc, #80]	@ (8003120 <_sbrk+0x5c>)
 80030ce:	4b15      	ldr	r3, [pc, #84]	@ (8003124 <_sbrk+0x60>)
 80030d0:	1ad3      	subs	r3, r2, r3
 80030d2:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 80030d4:	697b      	ldr	r3, [r7, #20]
 80030d6:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 80030d8:	4b13      	ldr	r3, [pc, #76]	@ (8003128 <_sbrk+0x64>)
 80030da:	681b      	ldr	r3, [r3, #0]
 80030dc:	2b00      	cmp	r3, #0
 80030de:	d102      	bne.n	80030e6 <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 80030e0:	4b11      	ldr	r3, [pc, #68]	@ (8003128 <_sbrk+0x64>)
 80030e2:	4a12      	ldr	r2, [pc, #72]	@ (800312c <_sbrk+0x68>)
 80030e4:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 80030e6:	4b10      	ldr	r3, [pc, #64]	@ (8003128 <_sbrk+0x64>)
 80030e8:	681a      	ldr	r2, [r3, #0]
 80030ea:	687b      	ldr	r3, [r7, #4]
 80030ec:	4413      	add	r3, r2
 80030ee:	693a      	ldr	r2, [r7, #16]
 80030f0:	429a      	cmp	r2, r3
 80030f2:	d207      	bcs.n	8003104 <_sbrk+0x40>
  {
    errno = ENOMEM;
 80030f4:	f003 fe20 	bl	8006d38 <__errno>
 80030f8:	4603      	mov	r3, r0
 80030fa:	220c      	movs	r2, #12
 80030fc:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 80030fe:	f04f 33ff 	mov.w	r3, #4294967295
 8003102:	e009      	b.n	8003118 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8003104:	4b08      	ldr	r3, [pc, #32]	@ (8003128 <_sbrk+0x64>)
 8003106:	681b      	ldr	r3, [r3, #0]
 8003108:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 800310a:	4b07      	ldr	r3, [pc, #28]	@ (8003128 <_sbrk+0x64>)
 800310c:	681a      	ldr	r2, [r3, #0]
 800310e:	687b      	ldr	r3, [r7, #4]
 8003110:	4413      	add	r3, r2
 8003112:	4a05      	ldr	r2, [pc, #20]	@ (8003128 <_sbrk+0x64>)
 8003114:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8003116:	68fb      	ldr	r3, [r7, #12]
}
 8003118:	4618      	mov	r0, r3
 800311a:	3718      	adds	r7, #24
 800311c:	46bd      	mov	sp, r7
 800311e:	bd80      	pop	{r7, pc}
 8003120:	20030000 	.word	0x20030000
 8003124:	00000400 	.word	0x00000400
 8003128:	20025cc8 	.word	0x20025cc8
 800312c:	20025e20 	.word	0x20025e20

08003130 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8003130:	b480      	push	{r7}
 8003132:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8003134:	4b06      	ldr	r3, [pc, #24]	@ (8003150 <SystemInit+0x20>)
 8003136:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800313a:	4a05      	ldr	r2, [pc, #20]	@ (8003150 <SystemInit+0x20>)
 800313c:	f443 0370 	orr.w	r3, r3, #15728640	@ 0xf00000
 8003140:	f8c2 3088 	str.w	r3, [r2, #136]	@ 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8003144:	bf00      	nop
 8003146:	46bd      	mov	sp, r7
 8003148:	f85d 7b04 	ldr.w	r7, [sp], #4
 800314c:	4770      	bx	lr
 800314e:	bf00      	nop
 8003150:	e000ed00 	.word	0xe000ed00

08003154 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler: 
  ldr   sp, =_estack       /* set stack pointer */
 8003154:	f8df d034 	ldr.w	sp, [pc, #52]	@ 800318c <LoopFillZerobss+0xe>

/* Call the clock system initialization function.*/
  bl  SystemInit   
 8003158:	f7ff ffea 	bl	8003130 <SystemInit>
 
/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 800315c:	480c      	ldr	r0, [pc, #48]	@ (8003190 <LoopFillZerobss+0x12>)
  ldr r1, =_edata
 800315e:	490d      	ldr	r1, [pc, #52]	@ (8003194 <LoopFillZerobss+0x16>)
  ldr r2, =_sidata
 8003160:	4a0d      	ldr	r2, [pc, #52]	@ (8003198 <LoopFillZerobss+0x1a>)
  movs r3, #0
 8003162:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8003164:	e002      	b.n	800316c <LoopCopyDataInit>

08003166 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8003166:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8003168:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 800316a:	3304      	adds	r3, #4

0800316c <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 800316c:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 800316e:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8003170:	d3f9      	bcc.n	8003166 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8003172:	4a0a      	ldr	r2, [pc, #40]	@ (800319c <LoopFillZerobss+0x1e>)
  ldr r4, =_ebss
 8003174:	4c0a      	ldr	r4, [pc, #40]	@ (80031a0 <LoopFillZerobss+0x22>)
  movs r3, #0
 8003176:	2300      	movs	r3, #0
  b LoopFillZerobss
 8003178:	e001      	b.n	800317e <LoopFillZerobss>

0800317a <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 800317a:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 800317c:	3204      	adds	r2, #4

0800317e <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 800317e:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8003180:	d3fb      	bcc.n	800317a <FillZerobss>
  
/* Call static constructors */
    bl __libc_init_array
 8003182:	f003 fddf 	bl	8006d44 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8003186:	f7fe fd19 	bl	8001bbc <main>
  bx  lr    
 800318a:	4770      	bx	lr
  ldr   sp, =_estack       /* set stack pointer */
 800318c:	20030000 	.word	0x20030000
  ldr r0, =_sdata
 8003190:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8003194:	2000008c 	.word	0x2000008c
  ldr r2, =_sidata
 8003198:	08008a2c 	.word	0x08008a2c
  ldr r2, =_sbss
 800319c:	2000008c 	.word	0x2000008c
  ldr r4, =_ebss
 80031a0:	20025e1c 	.word	0x20025e1c

080031a4 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 80031a4:	e7fe      	b.n	80031a4 <ADC_IRQHandler>
	...

080031a8 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 80031a8:	b580      	push	{r7, lr}
 80031aa:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 80031ac:	4b0e      	ldr	r3, [pc, #56]	@ (80031e8 <HAL_Init+0x40>)
 80031ae:	681b      	ldr	r3, [r3, #0]
 80031b0:	4a0d      	ldr	r2, [pc, #52]	@ (80031e8 <HAL_Init+0x40>)
 80031b2:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 80031b6:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 80031b8:	4b0b      	ldr	r3, [pc, #44]	@ (80031e8 <HAL_Init+0x40>)
 80031ba:	681b      	ldr	r3, [r3, #0]
 80031bc:	4a0a      	ldr	r2, [pc, #40]	@ (80031e8 <HAL_Init+0x40>)
 80031be:	f443 6380 	orr.w	r3, r3, #1024	@ 0x400
 80031c2:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 80031c4:	4b08      	ldr	r3, [pc, #32]	@ (80031e8 <HAL_Init+0x40>)
 80031c6:	681b      	ldr	r3, [r3, #0]
 80031c8:	4a07      	ldr	r2, [pc, #28]	@ (80031e8 <HAL_Init+0x40>)
 80031ca:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 80031ce:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 80031d0:	2003      	movs	r0, #3
 80031d2:	f000 f991 	bl	80034f8 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 80031d6:	2000      	movs	r0, #0
 80031d8:	f000 f808 	bl	80031ec <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 80031dc:	f7ff f8de 	bl	800239c <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 80031e0:	2300      	movs	r3, #0
}
 80031e2:	4618      	mov	r0, r3
 80031e4:	bd80      	pop	{r7, pc}
 80031e6:	bf00      	nop
 80031e8:	40023c00 	.word	0x40023c00

080031ec <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 80031ec:	b580      	push	{r7, lr}
 80031ee:	b082      	sub	sp, #8
 80031f0:	af00      	add	r7, sp, #0
 80031f2:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 80031f4:	4b12      	ldr	r3, [pc, #72]	@ (8003240 <HAL_InitTick+0x54>)
 80031f6:	681a      	ldr	r2, [r3, #0]
 80031f8:	4b12      	ldr	r3, [pc, #72]	@ (8003244 <HAL_InitTick+0x58>)
 80031fa:	781b      	ldrb	r3, [r3, #0]
 80031fc:	4619      	mov	r1, r3
 80031fe:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 8003202:	fbb3 f3f1 	udiv	r3, r3, r1
 8003206:	fbb2 f3f3 	udiv	r3, r2, r3
 800320a:	4618      	mov	r0, r3
 800320c:	f000 f9b7 	bl	800357e <HAL_SYSTICK_Config>
 8003210:	4603      	mov	r3, r0
 8003212:	2b00      	cmp	r3, #0
 8003214:	d001      	beq.n	800321a <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 8003216:	2301      	movs	r3, #1
 8003218:	e00e      	b.n	8003238 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 800321a:	687b      	ldr	r3, [r7, #4]
 800321c:	2b0f      	cmp	r3, #15
 800321e:	d80a      	bhi.n	8003236 <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8003220:	2200      	movs	r2, #0
 8003222:	6879      	ldr	r1, [r7, #4]
 8003224:	f04f 30ff 	mov.w	r0, #4294967295
 8003228:	f000 f971 	bl	800350e <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 800322c:	4a06      	ldr	r2, [pc, #24]	@ (8003248 <HAL_InitTick+0x5c>)
 800322e:	687b      	ldr	r3, [r7, #4]
 8003230:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 8003232:	2300      	movs	r3, #0
 8003234:	e000      	b.n	8003238 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 8003236:	2301      	movs	r3, #1
}
 8003238:	4618      	mov	r0, r3
 800323a:	3708      	adds	r7, #8
 800323c:	46bd      	mov	sp, r7
 800323e:	bd80      	pop	{r7, pc}
 8003240:	20000024 	.word	0x20000024
 8003244:	2000002c 	.word	0x2000002c
 8003248:	20000028 	.word	0x20000028

0800324c <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 800324c:	b480      	push	{r7}
 800324e:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8003250:	4b06      	ldr	r3, [pc, #24]	@ (800326c <HAL_IncTick+0x20>)
 8003252:	781b      	ldrb	r3, [r3, #0]
 8003254:	461a      	mov	r2, r3
 8003256:	4b06      	ldr	r3, [pc, #24]	@ (8003270 <HAL_IncTick+0x24>)
 8003258:	681b      	ldr	r3, [r3, #0]
 800325a:	4413      	add	r3, r2
 800325c:	4a04      	ldr	r2, [pc, #16]	@ (8003270 <HAL_IncTick+0x24>)
 800325e:	6013      	str	r3, [r2, #0]
}
 8003260:	bf00      	nop
 8003262:	46bd      	mov	sp, r7
 8003264:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003268:	4770      	bx	lr
 800326a:	bf00      	nop
 800326c:	2000002c 	.word	0x2000002c
 8003270:	20025ccc 	.word	0x20025ccc

08003274 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8003274:	b480      	push	{r7}
 8003276:	af00      	add	r7, sp, #0
  return uwTick;
 8003278:	4b03      	ldr	r3, [pc, #12]	@ (8003288 <HAL_GetTick+0x14>)
 800327a:	681b      	ldr	r3, [r3, #0]
}
 800327c:	4618      	mov	r0, r3
 800327e:	46bd      	mov	sp, r7
 8003280:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003284:	4770      	bx	lr
 8003286:	bf00      	nop
 8003288:	20025ccc 	.word	0x20025ccc

0800328c <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 800328c:	b580      	push	{r7, lr}
 800328e:	b084      	sub	sp, #16
 8003290:	af00      	add	r7, sp, #0
 8003292:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8003294:	f7ff ffee 	bl	8003274 <HAL_GetTick>
 8003298:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 800329a:	687b      	ldr	r3, [r7, #4]
 800329c:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 800329e:	68fb      	ldr	r3, [r7, #12]
 80032a0:	f1b3 3fff 	cmp.w	r3, #4294967295
 80032a4:	d005      	beq.n	80032b2 <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 80032a6:	4b0a      	ldr	r3, [pc, #40]	@ (80032d0 <HAL_Delay+0x44>)
 80032a8:	781b      	ldrb	r3, [r3, #0]
 80032aa:	461a      	mov	r2, r3
 80032ac:	68fb      	ldr	r3, [r7, #12]
 80032ae:	4413      	add	r3, r2
 80032b0:	60fb      	str	r3, [r7, #12]
  }

  while((HAL_GetTick() - tickstart) < wait)
 80032b2:	bf00      	nop
 80032b4:	f7ff ffde 	bl	8003274 <HAL_GetTick>
 80032b8:	4602      	mov	r2, r0
 80032ba:	68bb      	ldr	r3, [r7, #8]
 80032bc:	1ad3      	subs	r3, r2, r3
 80032be:	68fa      	ldr	r2, [r7, #12]
 80032c0:	429a      	cmp	r2, r3
 80032c2:	d8f7      	bhi.n	80032b4 <HAL_Delay+0x28>
  {
  }
}
 80032c4:	bf00      	nop
 80032c6:	bf00      	nop
 80032c8:	3710      	adds	r7, #16
 80032ca:	46bd      	mov	sp, r7
 80032cc:	bd80      	pop	{r7, pc}
 80032ce:	bf00      	nop
 80032d0:	2000002c 	.word	0x2000002c

080032d4 <__NVIC_SetPriorityGrouping>:
{
 80032d4:	b480      	push	{r7}
 80032d6:	b085      	sub	sp, #20
 80032d8:	af00      	add	r7, sp, #0
 80032da:	6078      	str	r0, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 80032dc:	687b      	ldr	r3, [r7, #4]
 80032de:	f003 0307 	and.w	r3, r3, #7
 80032e2:	60fb      	str	r3, [r7, #12]
  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 80032e4:	4b0c      	ldr	r3, [pc, #48]	@ (8003318 <__NVIC_SetPriorityGrouping+0x44>)
 80032e6:	68db      	ldr	r3, [r3, #12]
 80032e8:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 80032ea:	68ba      	ldr	r2, [r7, #8]
 80032ec:	f64f 03ff 	movw	r3, #63743	@ 0xf8ff
 80032f0:	4013      	ands	r3, r2
 80032f2:	60bb      	str	r3, [r7, #8]
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 80032f4:	68fb      	ldr	r3, [r7, #12]
 80032f6:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 80032f8:	68bb      	ldr	r3, [r7, #8]
 80032fa:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 80032fc:	f043 63bf 	orr.w	r3, r3, #100139008	@ 0x5f80000
 8003300:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8003304:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8003306:	4a04      	ldr	r2, [pc, #16]	@ (8003318 <__NVIC_SetPriorityGrouping+0x44>)
 8003308:	68bb      	ldr	r3, [r7, #8]
 800330a:	60d3      	str	r3, [r2, #12]
}
 800330c:	bf00      	nop
 800330e:	3714      	adds	r7, #20
 8003310:	46bd      	mov	sp, r7
 8003312:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003316:	4770      	bx	lr
 8003318:	e000ed00 	.word	0xe000ed00

0800331c <__NVIC_GetPriorityGrouping>:
{
 800331c:	b480      	push	{r7}
 800331e:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8003320:	4b04      	ldr	r3, [pc, #16]	@ (8003334 <__NVIC_GetPriorityGrouping+0x18>)
 8003322:	68db      	ldr	r3, [r3, #12]
 8003324:	0a1b      	lsrs	r3, r3, #8
 8003326:	f003 0307 	and.w	r3, r3, #7
}
 800332a:	4618      	mov	r0, r3
 800332c:	46bd      	mov	sp, r7
 800332e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003332:	4770      	bx	lr
 8003334:	e000ed00 	.word	0xe000ed00

08003338 <__NVIC_EnableIRQ>:
{
 8003338:	b480      	push	{r7}
 800333a:	b083      	sub	sp, #12
 800333c:	af00      	add	r7, sp, #0
 800333e:	4603      	mov	r3, r0
 8003340:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8003342:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8003346:	2b00      	cmp	r3, #0
 8003348:	db0b      	blt.n	8003362 <__NVIC_EnableIRQ+0x2a>
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 800334a:	79fb      	ldrb	r3, [r7, #7]
 800334c:	f003 021f 	and.w	r2, r3, #31
 8003350:	4907      	ldr	r1, [pc, #28]	@ (8003370 <__NVIC_EnableIRQ+0x38>)
 8003352:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8003356:	095b      	lsrs	r3, r3, #5
 8003358:	2001      	movs	r0, #1
 800335a:	fa00 f202 	lsl.w	r2, r0, r2
 800335e:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
}
 8003362:	bf00      	nop
 8003364:	370c      	adds	r7, #12
 8003366:	46bd      	mov	sp, r7
 8003368:	f85d 7b04 	ldr.w	r7, [sp], #4
 800336c:	4770      	bx	lr
 800336e:	bf00      	nop
 8003370:	e000e100 	.word	0xe000e100

08003374 <__NVIC_DisableIRQ>:
  \details Disables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_DisableIRQ(IRQn_Type IRQn)
{
 8003374:	b480      	push	{r7}
 8003376:	b083      	sub	sp, #12
 8003378:	af00      	add	r7, sp, #0
 800337a:	4603      	mov	r3, r0
 800337c:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 800337e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8003382:	2b00      	cmp	r3, #0
 8003384:	db12      	blt.n	80033ac <__NVIC_DisableIRQ+0x38>
  {
    NVIC->ICER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8003386:	79fb      	ldrb	r3, [r7, #7]
 8003388:	f003 021f 	and.w	r2, r3, #31
 800338c:	490a      	ldr	r1, [pc, #40]	@ (80033b8 <__NVIC_DisableIRQ+0x44>)
 800338e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8003392:	095b      	lsrs	r3, r3, #5
 8003394:	2001      	movs	r0, #1
 8003396:	fa00 f202 	lsl.w	r2, r0, r2
 800339a:	3320      	adds	r3, #32
 800339c:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  __ASM volatile ("dsb 0xF":::"memory");
 80033a0:	f3bf 8f4f 	dsb	sy
}
 80033a4:	bf00      	nop
  __ASM volatile ("isb 0xF":::"memory");
 80033a6:	f3bf 8f6f 	isb	sy
}
 80033aa:	bf00      	nop
    __DSB();
    __ISB();
  }
}
 80033ac:	bf00      	nop
 80033ae:	370c      	adds	r7, #12
 80033b0:	46bd      	mov	sp, r7
 80033b2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80033b6:	4770      	bx	lr
 80033b8:	e000e100 	.word	0xe000e100

080033bc <__NVIC_ClearPendingIRQ>:
  \details Clears the pending bit of a device specific interrupt in the NVIC pending register.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_ClearPendingIRQ(IRQn_Type IRQn)
{
 80033bc:	b480      	push	{r7}
 80033be:	b083      	sub	sp, #12
 80033c0:	af00      	add	r7, sp, #0
 80033c2:	4603      	mov	r3, r0
 80033c4:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80033c6:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80033ca:	2b00      	cmp	r3, #0
 80033cc:	db0c      	blt.n	80033e8 <__NVIC_ClearPendingIRQ+0x2c>
  {
    NVIC->ICPR[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 80033ce:	79fb      	ldrb	r3, [r7, #7]
 80033d0:	f003 021f 	and.w	r2, r3, #31
 80033d4:	4907      	ldr	r1, [pc, #28]	@ (80033f4 <__NVIC_ClearPendingIRQ+0x38>)
 80033d6:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80033da:	095b      	lsrs	r3, r3, #5
 80033dc:	2001      	movs	r0, #1
 80033de:	fa00 f202 	lsl.w	r2, r0, r2
 80033e2:	3360      	adds	r3, #96	@ 0x60
 80033e4:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 80033e8:	bf00      	nop
 80033ea:	370c      	adds	r7, #12
 80033ec:	46bd      	mov	sp, r7
 80033ee:	f85d 7b04 	ldr.w	r7, [sp], #4
 80033f2:	4770      	bx	lr
 80033f4:	e000e100 	.word	0xe000e100

080033f8 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 80033f8:	b480      	push	{r7}
 80033fa:	b083      	sub	sp, #12
 80033fc:	af00      	add	r7, sp, #0
 80033fe:	4603      	mov	r3, r0
 8003400:	6039      	str	r1, [r7, #0]
 8003402:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8003404:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8003408:	2b00      	cmp	r3, #0
 800340a:	db0a      	blt.n	8003422 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800340c:	683b      	ldr	r3, [r7, #0]
 800340e:	b2da      	uxtb	r2, r3
 8003410:	490c      	ldr	r1, [pc, #48]	@ (8003444 <__NVIC_SetPriority+0x4c>)
 8003412:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8003416:	0112      	lsls	r2, r2, #4
 8003418:	b2d2      	uxtb	r2, r2
 800341a:	440b      	add	r3, r1
 800341c:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8003420:	e00a      	b.n	8003438 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8003422:	683b      	ldr	r3, [r7, #0]
 8003424:	b2da      	uxtb	r2, r3
 8003426:	4908      	ldr	r1, [pc, #32]	@ (8003448 <__NVIC_SetPriority+0x50>)
 8003428:	79fb      	ldrb	r3, [r7, #7]
 800342a:	f003 030f 	and.w	r3, r3, #15
 800342e:	3b04      	subs	r3, #4
 8003430:	0112      	lsls	r2, r2, #4
 8003432:	b2d2      	uxtb	r2, r2
 8003434:	440b      	add	r3, r1
 8003436:	761a      	strb	r2, [r3, #24]
}
 8003438:	bf00      	nop
 800343a:	370c      	adds	r7, #12
 800343c:	46bd      	mov	sp, r7
 800343e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003442:	4770      	bx	lr
 8003444:	e000e100 	.word	0xe000e100
 8003448:	e000ed00 	.word	0xe000ed00

0800344c <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 800344c:	b480      	push	{r7}
 800344e:	b089      	sub	sp, #36	@ 0x24
 8003450:	af00      	add	r7, sp, #0
 8003452:	60f8      	str	r0, [r7, #12]
 8003454:	60b9      	str	r1, [r7, #8]
 8003456:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8003458:	68fb      	ldr	r3, [r7, #12]
 800345a:	f003 0307 	and.w	r3, r3, #7
 800345e:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8003460:	69fb      	ldr	r3, [r7, #28]
 8003462:	f1c3 0307 	rsb	r3, r3, #7
 8003466:	2b04      	cmp	r3, #4
 8003468:	bf28      	it	cs
 800346a:	2304      	movcs	r3, #4
 800346c:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 800346e:	69fb      	ldr	r3, [r7, #28]
 8003470:	3304      	adds	r3, #4
 8003472:	2b06      	cmp	r3, #6
 8003474:	d902      	bls.n	800347c <NVIC_EncodePriority+0x30>
 8003476:	69fb      	ldr	r3, [r7, #28]
 8003478:	3b03      	subs	r3, #3
 800347a:	e000      	b.n	800347e <NVIC_EncodePriority+0x32>
 800347c:	2300      	movs	r3, #0
 800347e:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8003480:	f04f 32ff 	mov.w	r2, #4294967295
 8003484:	69bb      	ldr	r3, [r7, #24]
 8003486:	fa02 f303 	lsl.w	r3, r2, r3
 800348a:	43da      	mvns	r2, r3
 800348c:	68bb      	ldr	r3, [r7, #8]
 800348e:	401a      	ands	r2, r3
 8003490:	697b      	ldr	r3, [r7, #20]
 8003492:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8003494:	f04f 31ff 	mov.w	r1, #4294967295
 8003498:	697b      	ldr	r3, [r7, #20]
 800349a:	fa01 f303 	lsl.w	r3, r1, r3
 800349e:	43d9      	mvns	r1, r3
 80034a0:	687b      	ldr	r3, [r7, #4]
 80034a2:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80034a4:	4313      	orrs	r3, r2
         );
}
 80034a6:	4618      	mov	r0, r3
 80034a8:	3724      	adds	r7, #36	@ 0x24
 80034aa:	46bd      	mov	sp, r7
 80034ac:	f85d 7b04 	ldr.w	r7, [sp], #4
 80034b0:	4770      	bx	lr
	...

080034b4 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 80034b4:	b580      	push	{r7, lr}
 80034b6:	b082      	sub	sp, #8
 80034b8:	af00      	add	r7, sp, #0
 80034ba:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 80034bc:	687b      	ldr	r3, [r7, #4]
 80034be:	3b01      	subs	r3, #1
 80034c0:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 80034c4:	d301      	bcc.n	80034ca <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 80034c6:	2301      	movs	r3, #1
 80034c8:	e00f      	b.n	80034ea <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 80034ca:	4a0a      	ldr	r2, [pc, #40]	@ (80034f4 <SysTick_Config+0x40>)
 80034cc:	687b      	ldr	r3, [r7, #4]
 80034ce:	3b01      	subs	r3, #1
 80034d0:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 80034d2:	210f      	movs	r1, #15
 80034d4:	f04f 30ff 	mov.w	r0, #4294967295
 80034d8:	f7ff ff8e 	bl	80033f8 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 80034dc:	4b05      	ldr	r3, [pc, #20]	@ (80034f4 <SysTick_Config+0x40>)
 80034de:	2200      	movs	r2, #0
 80034e0:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 80034e2:	4b04      	ldr	r3, [pc, #16]	@ (80034f4 <SysTick_Config+0x40>)
 80034e4:	2207      	movs	r2, #7
 80034e6:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 80034e8:	2300      	movs	r3, #0
}
 80034ea:	4618      	mov	r0, r3
 80034ec:	3708      	adds	r7, #8
 80034ee:	46bd      	mov	sp, r7
 80034f0:	bd80      	pop	{r7, pc}
 80034f2:	bf00      	nop
 80034f4:	e000e010 	.word	0xe000e010

080034f8 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80034f8:	b580      	push	{r7, lr}
 80034fa:	b082      	sub	sp, #8
 80034fc:	af00      	add	r7, sp, #0
 80034fe:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8003500:	6878      	ldr	r0, [r7, #4]
 8003502:	f7ff fee7 	bl	80032d4 <__NVIC_SetPriorityGrouping>
}
 8003506:	bf00      	nop
 8003508:	3708      	adds	r7, #8
 800350a:	46bd      	mov	sp, r7
 800350c:	bd80      	pop	{r7, pc}

0800350e <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 800350e:	b580      	push	{r7, lr}
 8003510:	b086      	sub	sp, #24
 8003512:	af00      	add	r7, sp, #0
 8003514:	4603      	mov	r3, r0
 8003516:	60b9      	str	r1, [r7, #8]
 8003518:	607a      	str	r2, [r7, #4]
 800351a:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 800351c:	2300      	movs	r3, #0
 800351e:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8003520:	f7ff fefc 	bl	800331c <__NVIC_GetPriorityGrouping>
 8003524:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8003526:	687a      	ldr	r2, [r7, #4]
 8003528:	68b9      	ldr	r1, [r7, #8]
 800352a:	6978      	ldr	r0, [r7, #20]
 800352c:	f7ff ff8e 	bl	800344c <NVIC_EncodePriority>
 8003530:	4602      	mov	r2, r0
 8003532:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8003536:	4611      	mov	r1, r2
 8003538:	4618      	mov	r0, r3
 800353a:	f7ff ff5d 	bl	80033f8 <__NVIC_SetPriority>
}
 800353e:	bf00      	nop
 8003540:	3718      	adds	r7, #24
 8003542:	46bd      	mov	sp, r7
 8003544:	bd80      	pop	{r7, pc}

08003546 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8003546:	b580      	push	{r7, lr}
 8003548:	b082      	sub	sp, #8
 800354a:	af00      	add	r7, sp, #0
 800354c:	4603      	mov	r3, r0
 800354e:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8003550:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8003554:	4618      	mov	r0, r3
 8003556:	f7ff feef 	bl	8003338 <__NVIC_EnableIRQ>
}
 800355a:	bf00      	nop
 800355c:	3708      	adds	r7, #8
 800355e:	46bd      	mov	sp, r7
 8003560:	bd80      	pop	{r7, pc}

08003562 <HAL_NVIC_DisableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_DisableIRQ(IRQn_Type IRQn)
{
 8003562:	b580      	push	{r7, lr}
 8003564:	b082      	sub	sp, #8
 8003566:	af00      	add	r7, sp, #0
 8003568:	4603      	mov	r3, r0
 800356a:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Disable interrupt */
  NVIC_DisableIRQ(IRQn);
 800356c:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8003570:	4618      	mov	r0, r3
 8003572:	f7ff feff 	bl	8003374 <__NVIC_DisableIRQ>
}
 8003576:	bf00      	nop
 8003578:	3708      	adds	r7, #8
 800357a:	46bd      	mov	sp, r7
 800357c:	bd80      	pop	{r7, pc}

0800357e <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 800357e:	b580      	push	{r7, lr}
 8003580:	b082      	sub	sp, #8
 8003582:	af00      	add	r7, sp, #0
 8003584:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8003586:	6878      	ldr	r0, [r7, #4]
 8003588:	f7ff ff94 	bl	80034b4 <SysTick_Config>
 800358c:	4603      	mov	r3, r0
}
 800358e:	4618      	mov	r0, r3
 8003590:	3708      	adds	r7, #8
 8003592:	46bd      	mov	sp, r7
 8003594:	bd80      	pop	{r7, pc}

08003596 <HAL_NVIC_ClearPendingIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_ClearPendingIRQ(IRQn_Type IRQn)
{
 8003596:	b580      	push	{r7, lr}
 8003598:	b082      	sub	sp, #8
 800359a:	af00      	add	r7, sp, #0
 800359c:	4603      	mov	r3, r0
 800359e:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Clear pending interrupt */
  NVIC_ClearPendingIRQ(IRQn);
 80035a0:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80035a4:	4618      	mov	r0, r3
 80035a6:	f7ff ff09 	bl	80033bc <__NVIC_ClearPendingIRQ>
}
 80035aa:	bf00      	nop
 80035ac:	3708      	adds	r7, #8
 80035ae:	46bd      	mov	sp, r7
 80035b0:	bd80      	pop	{r7, pc}
	...

080035b4 <HAL_EXTI_ClearPending>:
  *           @arg @ref EXTI_TRIGGER_RISING_FALLING
  *         This parameter is kept for compatibility with other series.
  * @retval None.
  */
void HAL_EXTI_ClearPending(EXTI_HandleTypeDef *hexti, uint32_t Edge)
{
 80035b4:	b480      	push	{r7}
 80035b6:	b085      	sub	sp, #20
 80035b8:	af00      	add	r7, sp, #0
 80035ba:	6078      	str	r0, [r7, #4]
 80035bc:	6039      	str	r1, [r7, #0]
  assert_param(IS_EXTI_LINE(hexti->Line));
  assert_param(IS_EXTI_CONFIG_LINE(hexti->Line));
  assert_param(IS_EXTI_PENDING_EDGE(Edge));

  /* Compute line mask */
  maskline = (1uL << (hexti->Line & EXTI_PIN_MASK));
 80035be:	687b      	ldr	r3, [r7, #4]
 80035c0:	681b      	ldr	r3, [r3, #0]
 80035c2:	f003 031f 	and.w	r3, r3, #31
 80035c6:	2201      	movs	r2, #1
 80035c8:	fa02 f303 	lsl.w	r3, r2, r3
 80035cc:	60fb      	str	r3, [r7, #12]

  /* Clear Pending bit */
  EXTI->PR =  maskline;
 80035ce:	4a04      	ldr	r2, [pc, #16]	@ (80035e0 <HAL_EXTI_ClearPending+0x2c>)
 80035d0:	68fb      	ldr	r3, [r7, #12]
 80035d2:	6153      	str	r3, [r2, #20]
}
 80035d4:	bf00      	nop
 80035d6:	3714      	adds	r7, #20
 80035d8:	46bd      	mov	sp, r7
 80035da:	f85d 7b04 	ldr.w	r7, [sp], #4
 80035de:	4770      	bx	lr
 80035e0:	40013c00 	.word	0x40013c00

080035e4 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 80035e4:	b480      	push	{r7}
 80035e6:	b089      	sub	sp, #36	@ 0x24
 80035e8:	af00      	add	r7, sp, #0
 80035ea:	6078      	str	r0, [r7, #4]
 80035ec:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 80035ee:	2300      	movs	r3, #0
 80035f0:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 80035f2:	2300      	movs	r3, #0
 80035f4:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 80035f6:	2300      	movs	r3, #0
 80035f8:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 80035fa:	2300      	movs	r3, #0
 80035fc:	61fb      	str	r3, [r7, #28]
 80035fe:	e177      	b.n	80038f0 <HAL_GPIO_Init+0x30c>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 8003600:	2201      	movs	r2, #1
 8003602:	69fb      	ldr	r3, [r7, #28]
 8003604:	fa02 f303 	lsl.w	r3, r2, r3
 8003608:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 800360a:	683b      	ldr	r3, [r7, #0]
 800360c:	681b      	ldr	r3, [r3, #0]
 800360e:	697a      	ldr	r2, [r7, #20]
 8003610:	4013      	ands	r3, r2
 8003612:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 8003614:	693a      	ldr	r2, [r7, #16]
 8003616:	697b      	ldr	r3, [r7, #20]
 8003618:	429a      	cmp	r2, r3
 800361a:	f040 8166 	bne.w	80038ea <HAL_GPIO_Init+0x306>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 800361e:	683b      	ldr	r3, [r7, #0]
 8003620:	685b      	ldr	r3, [r3, #4]
 8003622:	f003 0303 	and.w	r3, r3, #3
 8003626:	2b01      	cmp	r3, #1
 8003628:	d005      	beq.n	8003636 <HAL_GPIO_Init+0x52>
          (GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 800362a:	683b      	ldr	r3, [r7, #0]
 800362c:	685b      	ldr	r3, [r3, #4]
 800362e:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8003632:	2b02      	cmp	r3, #2
 8003634:	d130      	bne.n	8003698 <HAL_GPIO_Init+0xb4>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 8003636:	687b      	ldr	r3, [r7, #4]
 8003638:	689b      	ldr	r3, [r3, #8]
 800363a:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 800363c:	69fb      	ldr	r3, [r7, #28]
 800363e:	005b      	lsls	r3, r3, #1
 8003640:	2203      	movs	r2, #3
 8003642:	fa02 f303 	lsl.w	r3, r2, r3
 8003646:	43db      	mvns	r3, r3
 8003648:	69ba      	ldr	r2, [r7, #24]
 800364a:	4013      	ands	r3, r2
 800364c:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 800364e:	683b      	ldr	r3, [r7, #0]
 8003650:	68da      	ldr	r2, [r3, #12]
 8003652:	69fb      	ldr	r3, [r7, #28]
 8003654:	005b      	lsls	r3, r3, #1
 8003656:	fa02 f303 	lsl.w	r3, r2, r3
 800365a:	69ba      	ldr	r2, [r7, #24]
 800365c:	4313      	orrs	r3, r2
 800365e:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 8003660:	687b      	ldr	r3, [r7, #4]
 8003662:	69ba      	ldr	r2, [r7, #24]
 8003664:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8003666:	687b      	ldr	r3, [r7, #4]
 8003668:	685b      	ldr	r3, [r3, #4]
 800366a:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 800366c:	2201      	movs	r2, #1
 800366e:	69fb      	ldr	r3, [r7, #28]
 8003670:	fa02 f303 	lsl.w	r3, r2, r3
 8003674:	43db      	mvns	r3, r3
 8003676:	69ba      	ldr	r2, [r7, #24]
 8003678:	4013      	ands	r3, r2
 800367a:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 800367c:	683b      	ldr	r3, [r7, #0]
 800367e:	685b      	ldr	r3, [r3, #4]
 8003680:	091b      	lsrs	r3, r3, #4
 8003682:	f003 0201 	and.w	r2, r3, #1
 8003686:	69fb      	ldr	r3, [r7, #28]
 8003688:	fa02 f303 	lsl.w	r3, r2, r3
 800368c:	69ba      	ldr	r2, [r7, #24]
 800368e:	4313      	orrs	r3, r2
 8003690:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 8003692:	687b      	ldr	r3, [r7, #4]
 8003694:	69ba      	ldr	r2, [r7, #24]
 8003696:	605a      	str	r2, [r3, #4]
       }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8003698:	683b      	ldr	r3, [r7, #0]
 800369a:	685b      	ldr	r3, [r3, #4]
 800369c:	f003 0303 	and.w	r3, r3, #3
 80036a0:	2b03      	cmp	r3, #3
 80036a2:	d017      	beq.n	80036d4 <HAL_GPIO_Init+0xf0>
      {
        /* Check the parameters */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));
        
        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 80036a4:	687b      	ldr	r3, [r7, #4]
 80036a6:	68db      	ldr	r3, [r3, #12]
 80036a8:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 80036aa:	69fb      	ldr	r3, [r7, #28]
 80036ac:	005b      	lsls	r3, r3, #1
 80036ae:	2203      	movs	r2, #3
 80036b0:	fa02 f303 	lsl.w	r3, r2, r3
 80036b4:	43db      	mvns	r3, r3
 80036b6:	69ba      	ldr	r2, [r7, #24]
 80036b8:	4013      	ands	r3, r2
 80036ba:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 80036bc:	683b      	ldr	r3, [r7, #0]
 80036be:	689a      	ldr	r2, [r3, #8]
 80036c0:	69fb      	ldr	r3, [r7, #28]
 80036c2:	005b      	lsls	r3, r3, #1
 80036c4:	fa02 f303 	lsl.w	r3, r2, r3
 80036c8:	69ba      	ldr	r2, [r7, #24]
 80036ca:	4313      	orrs	r3, r2
 80036cc:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 80036ce:	687b      	ldr	r3, [r7, #4]
 80036d0:	69ba      	ldr	r2, [r7, #24]
 80036d2:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 80036d4:	683b      	ldr	r3, [r7, #0]
 80036d6:	685b      	ldr	r3, [r3, #4]
 80036d8:	f003 0303 	and.w	r3, r3, #3
 80036dc:	2b02      	cmp	r3, #2
 80036de:	d123      	bne.n	8003728 <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 80036e0:	69fb      	ldr	r3, [r7, #28]
 80036e2:	08da      	lsrs	r2, r3, #3
 80036e4:	687b      	ldr	r3, [r7, #4]
 80036e6:	3208      	adds	r2, #8
 80036e8:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80036ec:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 80036ee:	69fb      	ldr	r3, [r7, #28]
 80036f0:	f003 0307 	and.w	r3, r3, #7
 80036f4:	009b      	lsls	r3, r3, #2
 80036f6:	220f      	movs	r2, #15
 80036f8:	fa02 f303 	lsl.w	r3, r2, r3
 80036fc:	43db      	mvns	r3, r3
 80036fe:	69ba      	ldr	r2, [r7, #24]
 8003700:	4013      	ands	r3, r2
 8003702:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 8003704:	683b      	ldr	r3, [r7, #0]
 8003706:	691a      	ldr	r2, [r3, #16]
 8003708:	69fb      	ldr	r3, [r7, #28]
 800370a:	f003 0307 	and.w	r3, r3, #7
 800370e:	009b      	lsls	r3, r3, #2
 8003710:	fa02 f303 	lsl.w	r3, r2, r3
 8003714:	69ba      	ldr	r2, [r7, #24]
 8003716:	4313      	orrs	r3, r2
 8003718:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 800371a:	69fb      	ldr	r3, [r7, #28]
 800371c:	08da      	lsrs	r2, r3, #3
 800371e:	687b      	ldr	r3, [r7, #4]
 8003720:	3208      	adds	r2, #8
 8003722:	69b9      	ldr	r1, [r7, #24]
 8003724:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8003728:	687b      	ldr	r3, [r7, #4]
 800372a:	681b      	ldr	r3, [r3, #0]
 800372c:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 800372e:	69fb      	ldr	r3, [r7, #28]
 8003730:	005b      	lsls	r3, r3, #1
 8003732:	2203      	movs	r2, #3
 8003734:	fa02 f303 	lsl.w	r3, r2, r3
 8003738:	43db      	mvns	r3, r3
 800373a:	69ba      	ldr	r2, [r7, #24]
 800373c:	4013      	ands	r3, r2
 800373e:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8003740:	683b      	ldr	r3, [r7, #0]
 8003742:	685b      	ldr	r3, [r3, #4]
 8003744:	f003 0203 	and.w	r2, r3, #3
 8003748:	69fb      	ldr	r3, [r7, #28]
 800374a:	005b      	lsls	r3, r3, #1
 800374c:	fa02 f303 	lsl.w	r3, r2, r3
 8003750:	69ba      	ldr	r2, [r7, #24]
 8003752:	4313      	orrs	r3, r2
 8003754:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 8003756:	687b      	ldr	r3, [r7, #4]
 8003758:	69ba      	ldr	r2, [r7, #24]
 800375a:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 800375c:	683b      	ldr	r3, [r7, #0]
 800375e:	685b      	ldr	r3, [r3, #4]
 8003760:	f403 3340 	and.w	r3, r3, #196608	@ 0x30000
 8003764:	2b00      	cmp	r3, #0
 8003766:	f000 80c0 	beq.w	80038ea <HAL_GPIO_Init+0x306>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 800376a:	2300      	movs	r3, #0
 800376c:	60fb      	str	r3, [r7, #12]
 800376e:	4b66      	ldr	r3, [pc, #408]	@ (8003908 <HAL_GPIO_Init+0x324>)
 8003770:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8003772:	4a65      	ldr	r2, [pc, #404]	@ (8003908 <HAL_GPIO_Init+0x324>)
 8003774:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 8003778:	6453      	str	r3, [r2, #68]	@ 0x44
 800377a:	4b63      	ldr	r3, [pc, #396]	@ (8003908 <HAL_GPIO_Init+0x324>)
 800377c:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800377e:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8003782:	60fb      	str	r3, [r7, #12]
 8003784:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 8003786:	4a61      	ldr	r2, [pc, #388]	@ (800390c <HAL_GPIO_Init+0x328>)
 8003788:	69fb      	ldr	r3, [r7, #28]
 800378a:	089b      	lsrs	r3, r3, #2
 800378c:	3302      	adds	r3, #2
 800378e:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8003792:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 8003794:	69fb      	ldr	r3, [r7, #28]
 8003796:	f003 0303 	and.w	r3, r3, #3
 800379a:	009b      	lsls	r3, r3, #2
 800379c:	220f      	movs	r2, #15
 800379e:	fa02 f303 	lsl.w	r3, r2, r3
 80037a2:	43db      	mvns	r3, r3
 80037a4:	69ba      	ldr	r2, [r7, #24]
 80037a6:	4013      	ands	r3, r2
 80037a8:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 80037aa:	687b      	ldr	r3, [r7, #4]
 80037ac:	4a58      	ldr	r2, [pc, #352]	@ (8003910 <HAL_GPIO_Init+0x32c>)
 80037ae:	4293      	cmp	r3, r2
 80037b0:	d037      	beq.n	8003822 <HAL_GPIO_Init+0x23e>
 80037b2:	687b      	ldr	r3, [r7, #4]
 80037b4:	4a57      	ldr	r2, [pc, #348]	@ (8003914 <HAL_GPIO_Init+0x330>)
 80037b6:	4293      	cmp	r3, r2
 80037b8:	d031      	beq.n	800381e <HAL_GPIO_Init+0x23a>
 80037ba:	687b      	ldr	r3, [r7, #4]
 80037bc:	4a56      	ldr	r2, [pc, #344]	@ (8003918 <HAL_GPIO_Init+0x334>)
 80037be:	4293      	cmp	r3, r2
 80037c0:	d02b      	beq.n	800381a <HAL_GPIO_Init+0x236>
 80037c2:	687b      	ldr	r3, [r7, #4]
 80037c4:	4a55      	ldr	r2, [pc, #340]	@ (800391c <HAL_GPIO_Init+0x338>)
 80037c6:	4293      	cmp	r3, r2
 80037c8:	d025      	beq.n	8003816 <HAL_GPIO_Init+0x232>
 80037ca:	687b      	ldr	r3, [r7, #4]
 80037cc:	4a54      	ldr	r2, [pc, #336]	@ (8003920 <HAL_GPIO_Init+0x33c>)
 80037ce:	4293      	cmp	r3, r2
 80037d0:	d01f      	beq.n	8003812 <HAL_GPIO_Init+0x22e>
 80037d2:	687b      	ldr	r3, [r7, #4]
 80037d4:	4a53      	ldr	r2, [pc, #332]	@ (8003924 <HAL_GPIO_Init+0x340>)
 80037d6:	4293      	cmp	r3, r2
 80037d8:	d019      	beq.n	800380e <HAL_GPIO_Init+0x22a>
 80037da:	687b      	ldr	r3, [r7, #4]
 80037dc:	4a52      	ldr	r2, [pc, #328]	@ (8003928 <HAL_GPIO_Init+0x344>)
 80037de:	4293      	cmp	r3, r2
 80037e0:	d013      	beq.n	800380a <HAL_GPIO_Init+0x226>
 80037e2:	687b      	ldr	r3, [r7, #4]
 80037e4:	4a51      	ldr	r2, [pc, #324]	@ (800392c <HAL_GPIO_Init+0x348>)
 80037e6:	4293      	cmp	r3, r2
 80037e8:	d00d      	beq.n	8003806 <HAL_GPIO_Init+0x222>
 80037ea:	687b      	ldr	r3, [r7, #4]
 80037ec:	4a50      	ldr	r2, [pc, #320]	@ (8003930 <HAL_GPIO_Init+0x34c>)
 80037ee:	4293      	cmp	r3, r2
 80037f0:	d007      	beq.n	8003802 <HAL_GPIO_Init+0x21e>
 80037f2:	687b      	ldr	r3, [r7, #4]
 80037f4:	4a4f      	ldr	r2, [pc, #316]	@ (8003934 <HAL_GPIO_Init+0x350>)
 80037f6:	4293      	cmp	r3, r2
 80037f8:	d101      	bne.n	80037fe <HAL_GPIO_Init+0x21a>
 80037fa:	2309      	movs	r3, #9
 80037fc:	e012      	b.n	8003824 <HAL_GPIO_Init+0x240>
 80037fe:	230a      	movs	r3, #10
 8003800:	e010      	b.n	8003824 <HAL_GPIO_Init+0x240>
 8003802:	2308      	movs	r3, #8
 8003804:	e00e      	b.n	8003824 <HAL_GPIO_Init+0x240>
 8003806:	2307      	movs	r3, #7
 8003808:	e00c      	b.n	8003824 <HAL_GPIO_Init+0x240>
 800380a:	2306      	movs	r3, #6
 800380c:	e00a      	b.n	8003824 <HAL_GPIO_Init+0x240>
 800380e:	2305      	movs	r3, #5
 8003810:	e008      	b.n	8003824 <HAL_GPIO_Init+0x240>
 8003812:	2304      	movs	r3, #4
 8003814:	e006      	b.n	8003824 <HAL_GPIO_Init+0x240>
 8003816:	2303      	movs	r3, #3
 8003818:	e004      	b.n	8003824 <HAL_GPIO_Init+0x240>
 800381a:	2302      	movs	r3, #2
 800381c:	e002      	b.n	8003824 <HAL_GPIO_Init+0x240>
 800381e:	2301      	movs	r3, #1
 8003820:	e000      	b.n	8003824 <HAL_GPIO_Init+0x240>
 8003822:	2300      	movs	r3, #0
 8003824:	69fa      	ldr	r2, [r7, #28]
 8003826:	f002 0203 	and.w	r2, r2, #3
 800382a:	0092      	lsls	r2, r2, #2
 800382c:	4093      	lsls	r3, r2
 800382e:	69ba      	ldr	r2, [r7, #24]
 8003830:	4313      	orrs	r3, r2
 8003832:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 8003834:	4935      	ldr	r1, [pc, #212]	@ (800390c <HAL_GPIO_Init+0x328>)
 8003836:	69fb      	ldr	r3, [r7, #28]
 8003838:	089b      	lsrs	r3, r3, #2
 800383a:	3302      	adds	r3, #2
 800383c:	69ba      	ldr	r2, [r7, #24]
 800383e:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 8003842:	4b3d      	ldr	r3, [pc, #244]	@ (8003938 <HAL_GPIO_Init+0x354>)
 8003844:	689b      	ldr	r3, [r3, #8]
 8003846:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8003848:	693b      	ldr	r3, [r7, #16]
 800384a:	43db      	mvns	r3, r3
 800384c:	69ba      	ldr	r2, [r7, #24]
 800384e:	4013      	ands	r3, r2
 8003850:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 8003852:	683b      	ldr	r3, [r7, #0]
 8003854:	685b      	ldr	r3, [r3, #4]
 8003856:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 800385a:	2b00      	cmp	r3, #0
 800385c:	d003      	beq.n	8003866 <HAL_GPIO_Init+0x282>
        {
          temp |= iocurrent;
 800385e:	69ba      	ldr	r2, [r7, #24]
 8003860:	693b      	ldr	r3, [r7, #16]
 8003862:	4313      	orrs	r3, r2
 8003864:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 8003866:	4a34      	ldr	r2, [pc, #208]	@ (8003938 <HAL_GPIO_Init+0x354>)
 8003868:	69bb      	ldr	r3, [r7, #24]
 800386a:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 800386c:	4b32      	ldr	r3, [pc, #200]	@ (8003938 <HAL_GPIO_Init+0x354>)
 800386e:	68db      	ldr	r3, [r3, #12]
 8003870:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8003872:	693b      	ldr	r3, [r7, #16]
 8003874:	43db      	mvns	r3, r3
 8003876:	69ba      	ldr	r2, [r7, #24]
 8003878:	4013      	ands	r3, r2
 800387a:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 800387c:	683b      	ldr	r3, [r7, #0]
 800387e:	685b      	ldr	r3, [r3, #4]
 8003880:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 8003884:	2b00      	cmp	r3, #0
 8003886:	d003      	beq.n	8003890 <HAL_GPIO_Init+0x2ac>
        {
          temp |= iocurrent;
 8003888:	69ba      	ldr	r2, [r7, #24]
 800388a:	693b      	ldr	r3, [r7, #16]
 800388c:	4313      	orrs	r3, r2
 800388e:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 8003890:	4a29      	ldr	r2, [pc, #164]	@ (8003938 <HAL_GPIO_Init+0x354>)
 8003892:	69bb      	ldr	r3, [r7, #24]
 8003894:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR;
 8003896:	4b28      	ldr	r3, [pc, #160]	@ (8003938 <HAL_GPIO_Init+0x354>)
 8003898:	685b      	ldr	r3, [r3, #4]
 800389a:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 800389c:	693b      	ldr	r3, [r7, #16]
 800389e:	43db      	mvns	r3, r3
 80038a0:	69ba      	ldr	r2, [r7, #24]
 80038a2:	4013      	ands	r3, r2
 80038a4:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 80038a6:	683b      	ldr	r3, [r7, #0]
 80038a8:	685b      	ldr	r3, [r3, #4]
 80038aa:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80038ae:	2b00      	cmp	r3, #0
 80038b0:	d003      	beq.n	80038ba <HAL_GPIO_Init+0x2d6>
        {
          temp |= iocurrent;
 80038b2:	69ba      	ldr	r2, [r7, #24]
 80038b4:	693b      	ldr	r3, [r7, #16]
 80038b6:	4313      	orrs	r3, r2
 80038b8:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 80038ba:	4a1f      	ldr	r2, [pc, #124]	@ (8003938 <HAL_GPIO_Init+0x354>)
 80038bc:	69bb      	ldr	r3, [r7, #24]
 80038be:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 80038c0:	4b1d      	ldr	r3, [pc, #116]	@ (8003938 <HAL_GPIO_Init+0x354>)
 80038c2:	681b      	ldr	r3, [r3, #0]
 80038c4:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80038c6:	693b      	ldr	r3, [r7, #16]
 80038c8:	43db      	mvns	r3, r3
 80038ca:	69ba      	ldr	r2, [r7, #24]
 80038cc:	4013      	ands	r3, r2
 80038ce:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 80038d0:	683b      	ldr	r3, [r7, #0]
 80038d2:	685b      	ldr	r3, [r3, #4]
 80038d4:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 80038d8:	2b00      	cmp	r3, #0
 80038da:	d003      	beq.n	80038e4 <HAL_GPIO_Init+0x300>
        {
          temp |= iocurrent;
 80038dc:	69ba      	ldr	r2, [r7, #24]
 80038de:	693b      	ldr	r3, [r7, #16]
 80038e0:	4313      	orrs	r3, r2
 80038e2:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 80038e4:	4a14      	ldr	r2, [pc, #80]	@ (8003938 <HAL_GPIO_Init+0x354>)
 80038e6:	69bb      	ldr	r3, [r7, #24]
 80038e8:	6013      	str	r3, [r2, #0]
  for(position = 0U; position < GPIO_NUMBER; position++)
 80038ea:	69fb      	ldr	r3, [r7, #28]
 80038ec:	3301      	adds	r3, #1
 80038ee:	61fb      	str	r3, [r7, #28]
 80038f0:	69fb      	ldr	r3, [r7, #28]
 80038f2:	2b0f      	cmp	r3, #15
 80038f4:	f67f ae84 	bls.w	8003600 <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 80038f8:	bf00      	nop
 80038fa:	bf00      	nop
 80038fc:	3724      	adds	r7, #36	@ 0x24
 80038fe:	46bd      	mov	sp, r7
 8003900:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003904:	4770      	bx	lr
 8003906:	bf00      	nop
 8003908:	40023800 	.word	0x40023800
 800390c:	40013800 	.word	0x40013800
 8003910:	40020000 	.word	0x40020000
 8003914:	40020400 	.word	0x40020400
 8003918:	40020800 	.word	0x40020800
 800391c:	40020c00 	.word	0x40020c00
 8003920:	40021000 	.word	0x40021000
 8003924:	40021400 	.word	0x40021400
 8003928:	40021800 	.word	0x40021800
 800392c:	40021c00 	.word	0x40021c00
 8003930:	40022000 	.word	0x40022000
 8003934:	40022400 	.word	0x40022400
 8003938:	40013c00 	.word	0x40013c00

0800393c <HAL_GPIO_DeInit>:
  * @param  GPIO_Pin specifies the port bit to be written.
  *          This parameter can be one of GPIO_PIN_x where x can be (0..15).
  * @retval None
  */
void HAL_GPIO_DeInit(GPIO_TypeDef  *GPIOx, uint32_t GPIO_Pin)
{
 800393c:	b480      	push	{r7}
 800393e:	b087      	sub	sp, #28
 8003940:	af00      	add	r7, sp, #0
 8003942:	6078      	str	r0, [r7, #4]
 8003944:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 8003946:	2300      	movs	r3, #0
 8003948:	613b      	str	r3, [r7, #16]
  uint32_t iocurrent = 0x00U;
 800394a:	2300      	movs	r3, #0
 800394c:	60fb      	str	r3, [r7, #12]
  uint32_t tmp = 0x00U;
 800394e:	2300      	movs	r3, #0
 8003950:	60bb      	str	r3, [r7, #8]

  /* Check the parameters */
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  
  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 8003952:	2300      	movs	r3, #0
 8003954:	617b      	str	r3, [r7, #20]
 8003956:	e0d9      	b.n	8003b0c <HAL_GPIO_DeInit+0x1d0>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 8003958:	2201      	movs	r2, #1
 800395a:	697b      	ldr	r3, [r7, #20]
 800395c:	fa02 f303 	lsl.w	r3, r2, r3
 8003960:	613b      	str	r3, [r7, #16]
    /* Get the current IO position */
    iocurrent = (GPIO_Pin) & ioposition;
 8003962:	683a      	ldr	r2, [r7, #0]
 8003964:	693b      	ldr	r3, [r7, #16]
 8003966:	4013      	ands	r3, r2
 8003968:	60fb      	str	r3, [r7, #12]

    if(iocurrent == ioposition)
 800396a:	68fa      	ldr	r2, [r7, #12]
 800396c:	693b      	ldr	r3, [r7, #16]
 800396e:	429a      	cmp	r2, r3
 8003970:	f040 80c9 	bne.w	8003b06 <HAL_GPIO_DeInit+0x1ca>
    {
      /*------------------------- EXTI Mode Configuration --------------------*/
      tmp = SYSCFG->EXTICR[position >> 2U];
 8003974:	4a6b      	ldr	r2, [pc, #428]	@ (8003b24 <HAL_GPIO_DeInit+0x1e8>)
 8003976:	697b      	ldr	r3, [r7, #20]
 8003978:	089b      	lsrs	r3, r3, #2
 800397a:	3302      	adds	r3, #2
 800397c:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8003980:	60bb      	str	r3, [r7, #8]
      tmp &= (0x0FU << (4U * (position & 0x03U)));
 8003982:	697b      	ldr	r3, [r7, #20]
 8003984:	f003 0303 	and.w	r3, r3, #3
 8003988:	009b      	lsls	r3, r3, #2
 800398a:	220f      	movs	r2, #15
 800398c:	fa02 f303 	lsl.w	r3, r2, r3
 8003990:	68ba      	ldr	r2, [r7, #8]
 8003992:	4013      	ands	r3, r2
 8003994:	60bb      	str	r3, [r7, #8]
      if(tmp == ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U))))
 8003996:	687b      	ldr	r3, [r7, #4]
 8003998:	4a63      	ldr	r2, [pc, #396]	@ (8003b28 <HAL_GPIO_DeInit+0x1ec>)
 800399a:	4293      	cmp	r3, r2
 800399c:	d037      	beq.n	8003a0e <HAL_GPIO_DeInit+0xd2>
 800399e:	687b      	ldr	r3, [r7, #4]
 80039a0:	4a62      	ldr	r2, [pc, #392]	@ (8003b2c <HAL_GPIO_DeInit+0x1f0>)
 80039a2:	4293      	cmp	r3, r2
 80039a4:	d031      	beq.n	8003a0a <HAL_GPIO_DeInit+0xce>
 80039a6:	687b      	ldr	r3, [r7, #4]
 80039a8:	4a61      	ldr	r2, [pc, #388]	@ (8003b30 <HAL_GPIO_DeInit+0x1f4>)
 80039aa:	4293      	cmp	r3, r2
 80039ac:	d02b      	beq.n	8003a06 <HAL_GPIO_DeInit+0xca>
 80039ae:	687b      	ldr	r3, [r7, #4]
 80039b0:	4a60      	ldr	r2, [pc, #384]	@ (8003b34 <HAL_GPIO_DeInit+0x1f8>)
 80039b2:	4293      	cmp	r3, r2
 80039b4:	d025      	beq.n	8003a02 <HAL_GPIO_DeInit+0xc6>
 80039b6:	687b      	ldr	r3, [r7, #4]
 80039b8:	4a5f      	ldr	r2, [pc, #380]	@ (8003b38 <HAL_GPIO_DeInit+0x1fc>)
 80039ba:	4293      	cmp	r3, r2
 80039bc:	d01f      	beq.n	80039fe <HAL_GPIO_DeInit+0xc2>
 80039be:	687b      	ldr	r3, [r7, #4]
 80039c0:	4a5e      	ldr	r2, [pc, #376]	@ (8003b3c <HAL_GPIO_DeInit+0x200>)
 80039c2:	4293      	cmp	r3, r2
 80039c4:	d019      	beq.n	80039fa <HAL_GPIO_DeInit+0xbe>
 80039c6:	687b      	ldr	r3, [r7, #4]
 80039c8:	4a5d      	ldr	r2, [pc, #372]	@ (8003b40 <HAL_GPIO_DeInit+0x204>)
 80039ca:	4293      	cmp	r3, r2
 80039cc:	d013      	beq.n	80039f6 <HAL_GPIO_DeInit+0xba>
 80039ce:	687b      	ldr	r3, [r7, #4]
 80039d0:	4a5c      	ldr	r2, [pc, #368]	@ (8003b44 <HAL_GPIO_DeInit+0x208>)
 80039d2:	4293      	cmp	r3, r2
 80039d4:	d00d      	beq.n	80039f2 <HAL_GPIO_DeInit+0xb6>
 80039d6:	687b      	ldr	r3, [r7, #4]
 80039d8:	4a5b      	ldr	r2, [pc, #364]	@ (8003b48 <HAL_GPIO_DeInit+0x20c>)
 80039da:	4293      	cmp	r3, r2
 80039dc:	d007      	beq.n	80039ee <HAL_GPIO_DeInit+0xb2>
 80039de:	687b      	ldr	r3, [r7, #4]
 80039e0:	4a5a      	ldr	r2, [pc, #360]	@ (8003b4c <HAL_GPIO_DeInit+0x210>)
 80039e2:	4293      	cmp	r3, r2
 80039e4:	d101      	bne.n	80039ea <HAL_GPIO_DeInit+0xae>
 80039e6:	2309      	movs	r3, #9
 80039e8:	e012      	b.n	8003a10 <HAL_GPIO_DeInit+0xd4>
 80039ea:	230a      	movs	r3, #10
 80039ec:	e010      	b.n	8003a10 <HAL_GPIO_DeInit+0xd4>
 80039ee:	2308      	movs	r3, #8
 80039f0:	e00e      	b.n	8003a10 <HAL_GPIO_DeInit+0xd4>
 80039f2:	2307      	movs	r3, #7
 80039f4:	e00c      	b.n	8003a10 <HAL_GPIO_DeInit+0xd4>
 80039f6:	2306      	movs	r3, #6
 80039f8:	e00a      	b.n	8003a10 <HAL_GPIO_DeInit+0xd4>
 80039fa:	2305      	movs	r3, #5
 80039fc:	e008      	b.n	8003a10 <HAL_GPIO_DeInit+0xd4>
 80039fe:	2304      	movs	r3, #4
 8003a00:	e006      	b.n	8003a10 <HAL_GPIO_DeInit+0xd4>
 8003a02:	2303      	movs	r3, #3
 8003a04:	e004      	b.n	8003a10 <HAL_GPIO_DeInit+0xd4>
 8003a06:	2302      	movs	r3, #2
 8003a08:	e002      	b.n	8003a10 <HAL_GPIO_DeInit+0xd4>
 8003a0a:	2301      	movs	r3, #1
 8003a0c:	e000      	b.n	8003a10 <HAL_GPIO_DeInit+0xd4>
 8003a0e:	2300      	movs	r3, #0
 8003a10:	697a      	ldr	r2, [r7, #20]
 8003a12:	f002 0203 	and.w	r2, r2, #3
 8003a16:	0092      	lsls	r2, r2, #2
 8003a18:	4093      	lsls	r3, r2
 8003a1a:	68ba      	ldr	r2, [r7, #8]
 8003a1c:	429a      	cmp	r2, r3
 8003a1e:	d132      	bne.n	8003a86 <HAL_GPIO_DeInit+0x14a>
      {
        /* Clear EXTI line configuration */
        EXTI->IMR &= ~((uint32_t)iocurrent);
 8003a20:	4b4b      	ldr	r3, [pc, #300]	@ (8003b50 <HAL_GPIO_DeInit+0x214>)
 8003a22:	681a      	ldr	r2, [r3, #0]
 8003a24:	68fb      	ldr	r3, [r7, #12]
 8003a26:	43db      	mvns	r3, r3
 8003a28:	4949      	ldr	r1, [pc, #292]	@ (8003b50 <HAL_GPIO_DeInit+0x214>)
 8003a2a:	4013      	ands	r3, r2
 8003a2c:	600b      	str	r3, [r1, #0]
        EXTI->EMR &= ~((uint32_t)iocurrent);
 8003a2e:	4b48      	ldr	r3, [pc, #288]	@ (8003b50 <HAL_GPIO_DeInit+0x214>)
 8003a30:	685a      	ldr	r2, [r3, #4]
 8003a32:	68fb      	ldr	r3, [r7, #12]
 8003a34:	43db      	mvns	r3, r3
 8003a36:	4946      	ldr	r1, [pc, #280]	@ (8003b50 <HAL_GPIO_DeInit+0x214>)
 8003a38:	4013      	ands	r3, r2
 8003a3a:	604b      	str	r3, [r1, #4]
        
        /* Clear Rising Falling edge configuration */
        EXTI->FTSR &= ~((uint32_t)iocurrent);
 8003a3c:	4b44      	ldr	r3, [pc, #272]	@ (8003b50 <HAL_GPIO_DeInit+0x214>)
 8003a3e:	68da      	ldr	r2, [r3, #12]
 8003a40:	68fb      	ldr	r3, [r7, #12]
 8003a42:	43db      	mvns	r3, r3
 8003a44:	4942      	ldr	r1, [pc, #264]	@ (8003b50 <HAL_GPIO_DeInit+0x214>)
 8003a46:	4013      	ands	r3, r2
 8003a48:	60cb      	str	r3, [r1, #12]
        EXTI->RTSR &= ~((uint32_t)iocurrent);
 8003a4a:	4b41      	ldr	r3, [pc, #260]	@ (8003b50 <HAL_GPIO_DeInit+0x214>)
 8003a4c:	689a      	ldr	r2, [r3, #8]
 8003a4e:	68fb      	ldr	r3, [r7, #12]
 8003a50:	43db      	mvns	r3, r3
 8003a52:	493f      	ldr	r1, [pc, #252]	@ (8003b50 <HAL_GPIO_DeInit+0x214>)
 8003a54:	4013      	ands	r3, r2
 8003a56:	608b      	str	r3, [r1, #8]

        /* Configure the External Interrupt or event for the current IO */
        tmp = 0x0FU << (4U * (position & 0x03U));
 8003a58:	697b      	ldr	r3, [r7, #20]
 8003a5a:	f003 0303 	and.w	r3, r3, #3
 8003a5e:	009b      	lsls	r3, r3, #2
 8003a60:	220f      	movs	r2, #15
 8003a62:	fa02 f303 	lsl.w	r3, r2, r3
 8003a66:	60bb      	str	r3, [r7, #8]
        SYSCFG->EXTICR[position >> 2U] &= ~tmp;
 8003a68:	4a2e      	ldr	r2, [pc, #184]	@ (8003b24 <HAL_GPIO_DeInit+0x1e8>)
 8003a6a:	697b      	ldr	r3, [r7, #20]
 8003a6c:	089b      	lsrs	r3, r3, #2
 8003a6e:	3302      	adds	r3, #2
 8003a70:	f852 1023 	ldr.w	r1, [r2, r3, lsl #2]
 8003a74:	68bb      	ldr	r3, [r7, #8]
 8003a76:	43da      	mvns	r2, r3
 8003a78:	482a      	ldr	r0, [pc, #168]	@ (8003b24 <HAL_GPIO_DeInit+0x1e8>)
 8003a7a:	697b      	ldr	r3, [r7, #20]
 8003a7c:	089b      	lsrs	r3, r3, #2
 8003a7e:	400a      	ands	r2, r1
 8003a80:	3302      	adds	r3, #2
 8003a82:	f840 2023 	str.w	r2, [r0, r3, lsl #2]
      }

      /*------------------------- GPIO Mode Configuration --------------------*/
      /* Configure IO Direction in Input Floating Mode */
      GPIOx->MODER &= ~(GPIO_MODER_MODER0 << (position * 2U));
 8003a86:	687b      	ldr	r3, [r7, #4]
 8003a88:	681a      	ldr	r2, [r3, #0]
 8003a8a:	697b      	ldr	r3, [r7, #20]
 8003a8c:	005b      	lsls	r3, r3, #1
 8003a8e:	2103      	movs	r1, #3
 8003a90:	fa01 f303 	lsl.w	r3, r1, r3
 8003a94:	43db      	mvns	r3, r3
 8003a96:	401a      	ands	r2, r3
 8003a98:	687b      	ldr	r3, [r7, #4]
 8003a9a:	601a      	str	r2, [r3, #0]

      /* Configure the default Alternate Function in current IO */
      GPIOx->AFR[position >> 3U] &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 8003a9c:	697b      	ldr	r3, [r7, #20]
 8003a9e:	08da      	lsrs	r2, r3, #3
 8003aa0:	687b      	ldr	r3, [r7, #4]
 8003aa2:	3208      	adds	r2, #8
 8003aa4:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 8003aa8:	697b      	ldr	r3, [r7, #20]
 8003aaa:	f003 0307 	and.w	r3, r3, #7
 8003aae:	009b      	lsls	r3, r3, #2
 8003ab0:	220f      	movs	r2, #15
 8003ab2:	fa02 f303 	lsl.w	r3, r2, r3
 8003ab6:	43db      	mvns	r3, r3
 8003ab8:	697a      	ldr	r2, [r7, #20]
 8003aba:	08d2      	lsrs	r2, r2, #3
 8003abc:	4019      	ands	r1, r3
 8003abe:	687b      	ldr	r3, [r7, #4]
 8003ac0:	3208      	adds	r2, #8
 8003ac2:	f843 1022 	str.w	r1, [r3, r2, lsl #2]

      /* Deactivate the Pull-up and Pull-down resistor for the current IO */
      GPIOx->PUPDR &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 8003ac6:	687b      	ldr	r3, [r7, #4]
 8003ac8:	68da      	ldr	r2, [r3, #12]
 8003aca:	697b      	ldr	r3, [r7, #20]
 8003acc:	005b      	lsls	r3, r3, #1
 8003ace:	2103      	movs	r1, #3
 8003ad0:	fa01 f303 	lsl.w	r3, r1, r3
 8003ad4:	43db      	mvns	r3, r3
 8003ad6:	401a      	ands	r2, r3
 8003ad8:	687b      	ldr	r3, [r7, #4]
 8003ada:	60da      	str	r2, [r3, #12]

      /* Configure the default value IO Output Type */
      GPIOx->OTYPER  &= ~(GPIO_OTYPER_OT_0 << position) ;
 8003adc:	687b      	ldr	r3, [r7, #4]
 8003ade:	685a      	ldr	r2, [r3, #4]
 8003ae0:	2101      	movs	r1, #1
 8003ae2:	697b      	ldr	r3, [r7, #20]
 8003ae4:	fa01 f303 	lsl.w	r3, r1, r3
 8003ae8:	43db      	mvns	r3, r3
 8003aea:	401a      	ands	r2, r3
 8003aec:	687b      	ldr	r3, [r7, #4]
 8003aee:	605a      	str	r2, [r3, #4]

      /* Configure the default value for IO Speed */
      GPIOx->OSPEEDR &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 8003af0:	687b      	ldr	r3, [r7, #4]
 8003af2:	689a      	ldr	r2, [r3, #8]
 8003af4:	697b      	ldr	r3, [r7, #20]
 8003af6:	005b      	lsls	r3, r3, #1
 8003af8:	2103      	movs	r1, #3
 8003afa:	fa01 f303 	lsl.w	r3, r1, r3
 8003afe:	43db      	mvns	r3, r3
 8003b00:	401a      	ands	r2, r3
 8003b02:	687b      	ldr	r3, [r7, #4]
 8003b04:	609a      	str	r2, [r3, #8]
  for(position = 0U; position < GPIO_NUMBER; position++)
 8003b06:	697b      	ldr	r3, [r7, #20]
 8003b08:	3301      	adds	r3, #1
 8003b0a:	617b      	str	r3, [r7, #20]
 8003b0c:	697b      	ldr	r3, [r7, #20]
 8003b0e:	2b0f      	cmp	r3, #15
 8003b10:	f67f af22 	bls.w	8003958 <HAL_GPIO_DeInit+0x1c>
    }
  }
}
 8003b14:	bf00      	nop
 8003b16:	bf00      	nop
 8003b18:	371c      	adds	r7, #28
 8003b1a:	46bd      	mov	sp, r7
 8003b1c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003b20:	4770      	bx	lr
 8003b22:	bf00      	nop
 8003b24:	40013800 	.word	0x40013800
 8003b28:	40020000 	.word	0x40020000
 8003b2c:	40020400 	.word	0x40020400
 8003b30:	40020800 	.word	0x40020800
 8003b34:	40020c00 	.word	0x40020c00
 8003b38:	40021000 	.word	0x40021000
 8003b3c:	40021400 	.word	0x40021400
 8003b40:	40021800 	.word	0x40021800
 8003b44:	40021c00 	.word	0x40021c00
 8003b48:	40022000 	.word	0x40022000
 8003b4c:	40022400 	.word	0x40022400
 8003b50:	40013c00 	.word	0x40013c00

08003b54 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8003b54:	b480      	push	{r7}
 8003b56:	b083      	sub	sp, #12
 8003b58:	af00      	add	r7, sp, #0
 8003b5a:	6078      	str	r0, [r7, #4]
 8003b5c:	460b      	mov	r3, r1
 8003b5e:	807b      	strh	r3, [r7, #2]
 8003b60:	4613      	mov	r3, r2
 8003b62:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8003b64:	787b      	ldrb	r3, [r7, #1]
 8003b66:	2b00      	cmp	r3, #0
 8003b68:	d003      	beq.n	8003b72 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8003b6a:	887a      	ldrh	r2, [r7, #2]
 8003b6c:	687b      	ldr	r3, [r7, #4]
 8003b6e:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
  }
}
 8003b70:	e003      	b.n	8003b7a <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 8003b72:	887b      	ldrh	r3, [r7, #2]
 8003b74:	041a      	lsls	r2, r3, #16
 8003b76:	687b      	ldr	r3, [r7, #4]
 8003b78:	619a      	str	r2, [r3, #24]
}
 8003b7a:	bf00      	nop
 8003b7c:	370c      	adds	r7, #12
 8003b7e:	46bd      	mov	sp, r7
 8003b80:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003b84:	4770      	bx	lr
	...

08003b88 <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 8003b88:	b580      	push	{r7, lr}
 8003b8a:	b084      	sub	sp, #16
 8003b8c:	af00      	add	r7, sp, #0
 8003b8e:	6078      	str	r0, [r7, #4]
  uint32_t freqrange;
  uint32_t pclk1;

  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 8003b90:	687b      	ldr	r3, [r7, #4]
 8003b92:	2b00      	cmp	r3, #0
 8003b94:	d101      	bne.n	8003b9a <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 8003b96:	2301      	movs	r3, #1
 8003b98:	e12b      	b.n	8003df2 <HAL_I2C_Init+0x26a>
  assert_param(IS_I2C_DUAL_ADDRESS(hi2c->Init.DualAddressMode));
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 8003b9a:	687b      	ldr	r3, [r7, #4]
 8003b9c:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8003ba0:	b2db      	uxtb	r3, r3
 8003ba2:	2b00      	cmp	r3, #0
 8003ba4:	d106      	bne.n	8003bb4 <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 8003ba6:	687b      	ldr	r3, [r7, #4]
 8003ba8:	2200      	movs	r2, #0
 8003baa:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_I2C_MspInit(hi2c);
 8003bae:	6878      	ldr	r0, [r7, #4]
 8003bb0:	f7fe fc1c 	bl	80023ec <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 8003bb4:	687b      	ldr	r3, [r7, #4]
 8003bb6:	2224      	movs	r2, #36	@ 0x24
 8003bb8:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 8003bbc:	687b      	ldr	r3, [r7, #4]
 8003bbe:	681b      	ldr	r3, [r3, #0]
 8003bc0:	681a      	ldr	r2, [r3, #0]
 8003bc2:	687b      	ldr	r3, [r7, #4]
 8003bc4:	681b      	ldr	r3, [r3, #0]
 8003bc6:	f022 0201 	bic.w	r2, r2, #1
 8003bca:	601a      	str	r2, [r3, #0]

  /*Reset I2C*/
  hi2c->Instance->CR1 |= I2C_CR1_SWRST;
 8003bcc:	687b      	ldr	r3, [r7, #4]
 8003bce:	681b      	ldr	r3, [r3, #0]
 8003bd0:	681a      	ldr	r2, [r3, #0]
 8003bd2:	687b      	ldr	r3, [r7, #4]
 8003bd4:	681b      	ldr	r3, [r3, #0]
 8003bd6:	f442 4200 	orr.w	r2, r2, #32768	@ 0x8000
 8003bda:	601a      	str	r2, [r3, #0]
  hi2c->Instance->CR1 &= ~I2C_CR1_SWRST;
 8003bdc:	687b      	ldr	r3, [r7, #4]
 8003bde:	681b      	ldr	r3, [r3, #0]
 8003be0:	681a      	ldr	r2, [r3, #0]
 8003be2:	687b      	ldr	r3, [r7, #4]
 8003be4:	681b      	ldr	r3, [r3, #0]
 8003be6:	f422 4200 	bic.w	r2, r2, #32768	@ 0x8000
 8003bea:	601a      	str	r2, [r3, #0]

  /* Get PCLK1 frequency */
  pclk1 = HAL_RCC_GetPCLK1Freq();
 8003bec:	f001 ff82 	bl	8005af4 <HAL_RCC_GetPCLK1Freq>
 8003bf0:	60f8      	str	r0, [r7, #12]

  /* Check the minimum allowed PCLK1 frequency */
  if (I2C_MIN_PCLK_FREQ(pclk1, hi2c->Init.ClockSpeed) == 1U)
 8003bf2:	687b      	ldr	r3, [r7, #4]
 8003bf4:	685b      	ldr	r3, [r3, #4]
 8003bf6:	4a81      	ldr	r2, [pc, #516]	@ (8003dfc <HAL_I2C_Init+0x274>)
 8003bf8:	4293      	cmp	r3, r2
 8003bfa:	d807      	bhi.n	8003c0c <HAL_I2C_Init+0x84>
 8003bfc:	68fb      	ldr	r3, [r7, #12]
 8003bfe:	4a80      	ldr	r2, [pc, #512]	@ (8003e00 <HAL_I2C_Init+0x278>)
 8003c00:	4293      	cmp	r3, r2
 8003c02:	bf94      	ite	ls
 8003c04:	2301      	movls	r3, #1
 8003c06:	2300      	movhi	r3, #0
 8003c08:	b2db      	uxtb	r3, r3
 8003c0a:	e006      	b.n	8003c1a <HAL_I2C_Init+0x92>
 8003c0c:	68fb      	ldr	r3, [r7, #12]
 8003c0e:	4a7d      	ldr	r2, [pc, #500]	@ (8003e04 <HAL_I2C_Init+0x27c>)
 8003c10:	4293      	cmp	r3, r2
 8003c12:	bf94      	ite	ls
 8003c14:	2301      	movls	r3, #1
 8003c16:	2300      	movhi	r3, #0
 8003c18:	b2db      	uxtb	r3, r3
 8003c1a:	2b00      	cmp	r3, #0
 8003c1c:	d001      	beq.n	8003c22 <HAL_I2C_Init+0x9a>
  {
    return HAL_ERROR;
 8003c1e:	2301      	movs	r3, #1
 8003c20:	e0e7      	b.n	8003df2 <HAL_I2C_Init+0x26a>
  }

  /* Calculate frequency range */
  freqrange = I2C_FREQRANGE(pclk1);
 8003c22:	68fb      	ldr	r3, [r7, #12]
 8003c24:	4a78      	ldr	r2, [pc, #480]	@ (8003e08 <HAL_I2C_Init+0x280>)
 8003c26:	fba2 2303 	umull	r2, r3, r2, r3
 8003c2a:	0c9b      	lsrs	r3, r3, #18
 8003c2c:	60bb      	str	r3, [r7, #8]

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Frequency range */
  MODIFY_REG(hi2c->Instance->CR2, I2C_CR2_FREQ, freqrange);
 8003c2e:	687b      	ldr	r3, [r7, #4]
 8003c30:	681b      	ldr	r3, [r3, #0]
 8003c32:	685b      	ldr	r3, [r3, #4]
 8003c34:	f023 013f 	bic.w	r1, r3, #63	@ 0x3f
 8003c38:	687b      	ldr	r3, [r7, #4]
 8003c3a:	681b      	ldr	r3, [r3, #0]
 8003c3c:	68ba      	ldr	r2, [r7, #8]
 8003c3e:	430a      	orrs	r2, r1
 8003c40:	605a      	str	r2, [r3, #4]

  /*---------------------------- I2Cx TRISE Configuration --------------------*/
  /* Configure I2Cx: Rise Time */
  MODIFY_REG(hi2c->Instance->TRISE, I2C_TRISE_TRISE, I2C_RISE_TIME(freqrange, hi2c->Init.ClockSpeed));
 8003c42:	687b      	ldr	r3, [r7, #4]
 8003c44:	681b      	ldr	r3, [r3, #0]
 8003c46:	6a1b      	ldr	r3, [r3, #32]
 8003c48:	f023 013f 	bic.w	r1, r3, #63	@ 0x3f
 8003c4c:	687b      	ldr	r3, [r7, #4]
 8003c4e:	685b      	ldr	r3, [r3, #4]
 8003c50:	4a6a      	ldr	r2, [pc, #424]	@ (8003dfc <HAL_I2C_Init+0x274>)
 8003c52:	4293      	cmp	r3, r2
 8003c54:	d802      	bhi.n	8003c5c <HAL_I2C_Init+0xd4>
 8003c56:	68bb      	ldr	r3, [r7, #8]
 8003c58:	3301      	adds	r3, #1
 8003c5a:	e009      	b.n	8003c70 <HAL_I2C_Init+0xe8>
 8003c5c:	68bb      	ldr	r3, [r7, #8]
 8003c5e:	f44f 7296 	mov.w	r2, #300	@ 0x12c
 8003c62:	fb02 f303 	mul.w	r3, r2, r3
 8003c66:	4a69      	ldr	r2, [pc, #420]	@ (8003e0c <HAL_I2C_Init+0x284>)
 8003c68:	fba2 2303 	umull	r2, r3, r2, r3
 8003c6c:	099b      	lsrs	r3, r3, #6
 8003c6e:	3301      	adds	r3, #1
 8003c70:	687a      	ldr	r2, [r7, #4]
 8003c72:	6812      	ldr	r2, [r2, #0]
 8003c74:	430b      	orrs	r3, r1
 8003c76:	6213      	str	r3, [r2, #32]

  /*---------------------------- I2Cx CCR Configuration ----------------------*/
  /* Configure I2Cx: Speed */
  MODIFY_REG(hi2c->Instance->CCR, (I2C_CCR_FS | I2C_CCR_DUTY | I2C_CCR_CCR), I2C_SPEED(pclk1, hi2c->Init.ClockSpeed, hi2c->Init.DutyCycle));
 8003c78:	687b      	ldr	r3, [r7, #4]
 8003c7a:	681b      	ldr	r3, [r3, #0]
 8003c7c:	69db      	ldr	r3, [r3, #28]
 8003c7e:	f423 424f 	bic.w	r2, r3, #52992	@ 0xcf00
 8003c82:	f022 02ff 	bic.w	r2, r2, #255	@ 0xff
 8003c86:	687b      	ldr	r3, [r7, #4]
 8003c88:	685b      	ldr	r3, [r3, #4]
 8003c8a:	495c      	ldr	r1, [pc, #368]	@ (8003dfc <HAL_I2C_Init+0x274>)
 8003c8c:	428b      	cmp	r3, r1
 8003c8e:	d819      	bhi.n	8003cc4 <HAL_I2C_Init+0x13c>
 8003c90:	68fb      	ldr	r3, [r7, #12]
 8003c92:	1e59      	subs	r1, r3, #1
 8003c94:	687b      	ldr	r3, [r7, #4]
 8003c96:	685b      	ldr	r3, [r3, #4]
 8003c98:	005b      	lsls	r3, r3, #1
 8003c9a:	fbb1 f3f3 	udiv	r3, r1, r3
 8003c9e:	1c59      	adds	r1, r3, #1
 8003ca0:	f640 73fc 	movw	r3, #4092	@ 0xffc
 8003ca4:	400b      	ands	r3, r1
 8003ca6:	2b00      	cmp	r3, #0
 8003ca8:	d00a      	beq.n	8003cc0 <HAL_I2C_Init+0x138>
 8003caa:	68fb      	ldr	r3, [r7, #12]
 8003cac:	1e59      	subs	r1, r3, #1
 8003cae:	687b      	ldr	r3, [r7, #4]
 8003cb0:	685b      	ldr	r3, [r3, #4]
 8003cb2:	005b      	lsls	r3, r3, #1
 8003cb4:	fbb1 f3f3 	udiv	r3, r1, r3
 8003cb8:	3301      	adds	r3, #1
 8003cba:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8003cbe:	e051      	b.n	8003d64 <HAL_I2C_Init+0x1dc>
 8003cc0:	2304      	movs	r3, #4
 8003cc2:	e04f      	b.n	8003d64 <HAL_I2C_Init+0x1dc>
 8003cc4:	687b      	ldr	r3, [r7, #4]
 8003cc6:	689b      	ldr	r3, [r3, #8]
 8003cc8:	2b00      	cmp	r3, #0
 8003cca:	d111      	bne.n	8003cf0 <HAL_I2C_Init+0x168>
 8003ccc:	68fb      	ldr	r3, [r7, #12]
 8003cce:	1e58      	subs	r0, r3, #1
 8003cd0:	687b      	ldr	r3, [r7, #4]
 8003cd2:	6859      	ldr	r1, [r3, #4]
 8003cd4:	460b      	mov	r3, r1
 8003cd6:	005b      	lsls	r3, r3, #1
 8003cd8:	440b      	add	r3, r1
 8003cda:	fbb0 f3f3 	udiv	r3, r0, r3
 8003cde:	3301      	adds	r3, #1
 8003ce0:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8003ce4:	2b00      	cmp	r3, #0
 8003ce6:	bf0c      	ite	eq
 8003ce8:	2301      	moveq	r3, #1
 8003cea:	2300      	movne	r3, #0
 8003cec:	b2db      	uxtb	r3, r3
 8003cee:	e012      	b.n	8003d16 <HAL_I2C_Init+0x18e>
 8003cf0:	68fb      	ldr	r3, [r7, #12]
 8003cf2:	1e58      	subs	r0, r3, #1
 8003cf4:	687b      	ldr	r3, [r7, #4]
 8003cf6:	6859      	ldr	r1, [r3, #4]
 8003cf8:	460b      	mov	r3, r1
 8003cfa:	009b      	lsls	r3, r3, #2
 8003cfc:	440b      	add	r3, r1
 8003cfe:	0099      	lsls	r1, r3, #2
 8003d00:	440b      	add	r3, r1
 8003d02:	fbb0 f3f3 	udiv	r3, r0, r3
 8003d06:	3301      	adds	r3, #1
 8003d08:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8003d0c:	2b00      	cmp	r3, #0
 8003d0e:	bf0c      	ite	eq
 8003d10:	2301      	moveq	r3, #1
 8003d12:	2300      	movne	r3, #0
 8003d14:	b2db      	uxtb	r3, r3
 8003d16:	2b00      	cmp	r3, #0
 8003d18:	d001      	beq.n	8003d1e <HAL_I2C_Init+0x196>
 8003d1a:	2301      	movs	r3, #1
 8003d1c:	e022      	b.n	8003d64 <HAL_I2C_Init+0x1dc>
 8003d1e:	687b      	ldr	r3, [r7, #4]
 8003d20:	689b      	ldr	r3, [r3, #8]
 8003d22:	2b00      	cmp	r3, #0
 8003d24:	d10e      	bne.n	8003d44 <HAL_I2C_Init+0x1bc>
 8003d26:	68fb      	ldr	r3, [r7, #12]
 8003d28:	1e58      	subs	r0, r3, #1
 8003d2a:	687b      	ldr	r3, [r7, #4]
 8003d2c:	6859      	ldr	r1, [r3, #4]
 8003d2e:	460b      	mov	r3, r1
 8003d30:	005b      	lsls	r3, r3, #1
 8003d32:	440b      	add	r3, r1
 8003d34:	fbb0 f3f3 	udiv	r3, r0, r3
 8003d38:	3301      	adds	r3, #1
 8003d3a:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8003d3e:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8003d42:	e00f      	b.n	8003d64 <HAL_I2C_Init+0x1dc>
 8003d44:	68fb      	ldr	r3, [r7, #12]
 8003d46:	1e58      	subs	r0, r3, #1
 8003d48:	687b      	ldr	r3, [r7, #4]
 8003d4a:	6859      	ldr	r1, [r3, #4]
 8003d4c:	460b      	mov	r3, r1
 8003d4e:	009b      	lsls	r3, r3, #2
 8003d50:	440b      	add	r3, r1
 8003d52:	0099      	lsls	r1, r3, #2
 8003d54:	440b      	add	r3, r1
 8003d56:	fbb0 f3f3 	udiv	r3, r0, r3
 8003d5a:	3301      	adds	r3, #1
 8003d5c:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8003d60:	f443 4340 	orr.w	r3, r3, #49152	@ 0xc000
 8003d64:	6879      	ldr	r1, [r7, #4]
 8003d66:	6809      	ldr	r1, [r1, #0]
 8003d68:	4313      	orrs	r3, r2
 8003d6a:	61cb      	str	r3, [r1, #28]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  MODIFY_REG(hi2c->Instance->CR1, (I2C_CR1_ENGC | I2C_CR1_NOSTRETCH), (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode));
 8003d6c:	687b      	ldr	r3, [r7, #4]
 8003d6e:	681b      	ldr	r3, [r3, #0]
 8003d70:	681b      	ldr	r3, [r3, #0]
 8003d72:	f023 01c0 	bic.w	r1, r3, #192	@ 0xc0
 8003d76:	687b      	ldr	r3, [r7, #4]
 8003d78:	69da      	ldr	r2, [r3, #28]
 8003d7a:	687b      	ldr	r3, [r7, #4]
 8003d7c:	6a1b      	ldr	r3, [r3, #32]
 8003d7e:	431a      	orrs	r2, r3
 8003d80:	687b      	ldr	r3, [r7, #4]
 8003d82:	681b      	ldr	r3, [r3, #0]
 8003d84:	430a      	orrs	r2, r1
 8003d86:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Configure I2Cx: Own Address1 and addressing mode */
  MODIFY_REG(hi2c->Instance->OAR1, (I2C_OAR1_ADDMODE | I2C_OAR1_ADD8_9 | I2C_OAR1_ADD1_7 | I2C_OAR1_ADD0), (hi2c->Init.AddressingMode | hi2c->Init.OwnAddress1));
 8003d88:	687b      	ldr	r3, [r7, #4]
 8003d8a:	681b      	ldr	r3, [r3, #0]
 8003d8c:	689b      	ldr	r3, [r3, #8]
 8003d8e:	f423 4303 	bic.w	r3, r3, #33536	@ 0x8300
 8003d92:	f023 03ff 	bic.w	r3, r3, #255	@ 0xff
 8003d96:	687a      	ldr	r2, [r7, #4]
 8003d98:	6911      	ldr	r1, [r2, #16]
 8003d9a:	687a      	ldr	r2, [r7, #4]
 8003d9c:	68d2      	ldr	r2, [r2, #12]
 8003d9e:	4311      	orrs	r1, r2
 8003da0:	687a      	ldr	r2, [r7, #4]
 8003da2:	6812      	ldr	r2, [r2, #0]
 8003da4:	430b      	orrs	r3, r1
 8003da6:	6093      	str	r3, [r2, #8]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Configure I2Cx: Dual mode and Own Address2 */
  MODIFY_REG(hi2c->Instance->OAR2, (I2C_OAR2_ENDUAL | I2C_OAR2_ADD2), (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2));
 8003da8:	687b      	ldr	r3, [r7, #4]
 8003daa:	681b      	ldr	r3, [r3, #0]
 8003dac:	68db      	ldr	r3, [r3, #12]
 8003dae:	f023 01ff 	bic.w	r1, r3, #255	@ 0xff
 8003db2:	687b      	ldr	r3, [r7, #4]
 8003db4:	695a      	ldr	r2, [r3, #20]
 8003db6:	687b      	ldr	r3, [r7, #4]
 8003db8:	699b      	ldr	r3, [r3, #24]
 8003dba:	431a      	orrs	r2, r3
 8003dbc:	687b      	ldr	r3, [r7, #4]
 8003dbe:	681b      	ldr	r3, [r3, #0]
 8003dc0:	430a      	orrs	r2, r1
 8003dc2:	60da      	str	r2, [r3, #12]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 8003dc4:	687b      	ldr	r3, [r7, #4]
 8003dc6:	681b      	ldr	r3, [r3, #0]
 8003dc8:	681a      	ldr	r2, [r3, #0]
 8003dca:	687b      	ldr	r3, [r7, #4]
 8003dcc:	681b      	ldr	r3, [r3, #0]
 8003dce:	f042 0201 	orr.w	r2, r2, #1
 8003dd2:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8003dd4:	687b      	ldr	r3, [r7, #4]
 8003dd6:	2200      	movs	r2, #0
 8003dd8:	641a      	str	r2, [r3, #64]	@ 0x40
  hi2c->State = HAL_I2C_STATE_READY;
 8003dda:	687b      	ldr	r3, [r7, #4]
 8003ddc:	2220      	movs	r2, #32
 8003dde:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
  hi2c->PreviousState = I2C_STATE_NONE;
 8003de2:	687b      	ldr	r3, [r7, #4]
 8003de4:	2200      	movs	r2, #0
 8003de6:	631a      	str	r2, [r3, #48]	@ 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 8003de8:	687b      	ldr	r3, [r7, #4]
 8003dea:	2200      	movs	r2, #0
 8003dec:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e

  return HAL_OK;
 8003df0:	2300      	movs	r3, #0
}
 8003df2:	4618      	mov	r0, r3
 8003df4:	3710      	adds	r7, #16
 8003df6:	46bd      	mov	sp, r7
 8003df8:	bd80      	pop	{r7, pc}
 8003dfa:	bf00      	nop
 8003dfc:	000186a0 	.word	0x000186a0
 8003e00:	001e847f 	.word	0x001e847f
 8003e04:	003d08ff 	.word	0x003d08ff
 8003e08:	431bde83 	.word	0x431bde83
 8003e0c:	10624dd3 	.word	0x10624dd3

08003e10 <HAL_I2C_Mem_Write>:
  * @param  Size Amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Mem_Write(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8003e10:	b580      	push	{r7, lr}
 8003e12:	b088      	sub	sp, #32
 8003e14:	af02      	add	r7, sp, #8
 8003e16:	60f8      	str	r0, [r7, #12]
 8003e18:	4608      	mov	r0, r1
 8003e1a:	4611      	mov	r1, r2
 8003e1c:	461a      	mov	r2, r3
 8003e1e:	4603      	mov	r3, r0
 8003e20:	817b      	strh	r3, [r7, #10]
 8003e22:	460b      	mov	r3, r1
 8003e24:	813b      	strh	r3, [r7, #8]
 8003e26:	4613      	mov	r3, r2
 8003e28:	80fb      	strh	r3, [r7, #6]
  /* Init tickstart for timeout management*/
  uint32_t tickstart = HAL_GetTick();
 8003e2a:	f7ff fa23 	bl	8003274 <HAL_GetTick>
 8003e2e:	6178      	str	r0, [r7, #20]

  /* Check the parameters */
  assert_param(IS_I2C_MEMADD_SIZE(MemAddSize));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8003e30:	68fb      	ldr	r3, [r7, #12]
 8003e32:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8003e36:	b2db      	uxtb	r3, r3
 8003e38:	2b20      	cmp	r3, #32
 8003e3a:	f040 80d9 	bne.w	8003ff0 <HAL_I2C_Mem_Write+0x1e0>
  {
    /* Wait until BUSY flag is reset */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 8003e3e:	697b      	ldr	r3, [r7, #20]
 8003e40:	9300      	str	r3, [sp, #0]
 8003e42:	2319      	movs	r3, #25
 8003e44:	2201      	movs	r2, #1
 8003e46:	496d      	ldr	r1, [pc, #436]	@ (8003ffc <HAL_I2C_Mem_Write+0x1ec>)
 8003e48:	68f8      	ldr	r0, [r7, #12]
 8003e4a:	f000 fc8b 	bl	8004764 <I2C_WaitOnFlagUntilTimeout>
 8003e4e:	4603      	mov	r3, r0
 8003e50:	2b00      	cmp	r3, #0
 8003e52:	d001      	beq.n	8003e58 <HAL_I2C_Mem_Write+0x48>
    {
      return HAL_BUSY;
 8003e54:	2302      	movs	r3, #2
 8003e56:	e0cc      	b.n	8003ff2 <HAL_I2C_Mem_Write+0x1e2>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 8003e58:	68fb      	ldr	r3, [r7, #12]
 8003e5a:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8003e5e:	2b01      	cmp	r3, #1
 8003e60:	d101      	bne.n	8003e66 <HAL_I2C_Mem_Write+0x56>
 8003e62:	2302      	movs	r3, #2
 8003e64:	e0c5      	b.n	8003ff2 <HAL_I2C_Mem_Write+0x1e2>
 8003e66:	68fb      	ldr	r3, [r7, #12]
 8003e68:	2201      	movs	r2, #1
 8003e6a:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 8003e6e:	68fb      	ldr	r3, [r7, #12]
 8003e70:	681b      	ldr	r3, [r3, #0]
 8003e72:	681b      	ldr	r3, [r3, #0]
 8003e74:	f003 0301 	and.w	r3, r3, #1
 8003e78:	2b01      	cmp	r3, #1
 8003e7a:	d007      	beq.n	8003e8c <HAL_I2C_Mem_Write+0x7c>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 8003e7c:	68fb      	ldr	r3, [r7, #12]
 8003e7e:	681b      	ldr	r3, [r3, #0]
 8003e80:	681a      	ldr	r2, [r3, #0]
 8003e82:	68fb      	ldr	r3, [r7, #12]
 8003e84:	681b      	ldr	r3, [r3, #0]
 8003e86:	f042 0201 	orr.w	r2, r2, #1
 8003e8a:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 8003e8c:	68fb      	ldr	r3, [r7, #12]
 8003e8e:	681b      	ldr	r3, [r3, #0]
 8003e90:	681a      	ldr	r2, [r3, #0]
 8003e92:	68fb      	ldr	r3, [r7, #12]
 8003e94:	681b      	ldr	r3, [r3, #0]
 8003e96:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 8003e9a:	601a      	str	r2, [r3, #0]

    hi2c->State     = HAL_I2C_STATE_BUSY_TX;
 8003e9c:	68fb      	ldr	r3, [r7, #12]
 8003e9e:	2221      	movs	r2, #33	@ 0x21
 8003ea0:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
    hi2c->Mode      = HAL_I2C_MODE_MEM;
 8003ea4:	68fb      	ldr	r3, [r7, #12]
 8003ea6:	2240      	movs	r2, #64	@ 0x40
 8003ea8:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8003eac:	68fb      	ldr	r3, [r7, #12]
 8003eae:	2200      	movs	r2, #0
 8003eb0:	641a      	str	r2, [r3, #64]	@ 0x40

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 8003eb2:	68fb      	ldr	r3, [r7, #12]
 8003eb4:	6a3a      	ldr	r2, [r7, #32]
 8003eb6:	625a      	str	r2, [r3, #36]	@ 0x24
    hi2c->XferCount   = Size;
 8003eb8:	68fb      	ldr	r3, [r7, #12]
 8003eba:	8cba      	ldrh	r2, [r7, #36]	@ 0x24
 8003ebc:	855a      	strh	r2, [r3, #42]	@ 0x2a
    hi2c->XferSize    = hi2c->XferCount;
 8003ebe:	68fb      	ldr	r3, [r7, #12]
 8003ec0:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8003ec2:	b29a      	uxth	r2, r3
 8003ec4:	68fb      	ldr	r3, [r7, #12]
 8003ec6:	851a      	strh	r2, [r3, #40]	@ 0x28
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 8003ec8:	68fb      	ldr	r3, [r7, #12]
 8003eca:	4a4d      	ldr	r2, [pc, #308]	@ (8004000 <HAL_I2C_Mem_Write+0x1f0>)
 8003ecc:	62da      	str	r2, [r3, #44]	@ 0x2c

    /* Send Slave Address and Memory Address */
    if (I2C_RequestMemoryWrite(hi2c, DevAddress, MemAddress, MemAddSize, Timeout, tickstart) != HAL_OK)
 8003ece:	88f8      	ldrh	r0, [r7, #6]
 8003ed0:	893a      	ldrh	r2, [r7, #8]
 8003ed2:	8979      	ldrh	r1, [r7, #10]
 8003ed4:	697b      	ldr	r3, [r7, #20]
 8003ed6:	9301      	str	r3, [sp, #4]
 8003ed8:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8003eda:	9300      	str	r3, [sp, #0]
 8003edc:	4603      	mov	r3, r0
 8003ede:	68f8      	ldr	r0, [r7, #12]
 8003ee0:	f000 fac2 	bl	8004468 <I2C_RequestMemoryWrite>
 8003ee4:	4603      	mov	r3, r0
 8003ee6:	2b00      	cmp	r3, #0
 8003ee8:	d052      	beq.n	8003f90 <HAL_I2C_Mem_Write+0x180>
    {
      return HAL_ERROR;
 8003eea:	2301      	movs	r3, #1
 8003eec:	e081      	b.n	8003ff2 <HAL_I2C_Mem_Write+0x1e2>
    }

    while (hi2c->XferSize > 0U)
    {
      /* Wait until TXE flag is set */
      if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8003eee:	697a      	ldr	r2, [r7, #20]
 8003ef0:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 8003ef2:	68f8      	ldr	r0, [r7, #12]
 8003ef4:	f000 fd50 	bl	8004998 <I2C_WaitOnTXEFlagUntilTimeout>
 8003ef8:	4603      	mov	r3, r0
 8003efa:	2b00      	cmp	r3, #0
 8003efc:	d00d      	beq.n	8003f1a <HAL_I2C_Mem_Write+0x10a>
      {
        if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8003efe:	68fb      	ldr	r3, [r7, #12]
 8003f00:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003f02:	2b04      	cmp	r3, #4
 8003f04:	d107      	bne.n	8003f16 <HAL_I2C_Mem_Write+0x106>
        {
          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8003f06:	68fb      	ldr	r3, [r7, #12]
 8003f08:	681b      	ldr	r3, [r3, #0]
 8003f0a:	681a      	ldr	r2, [r3, #0]
 8003f0c:	68fb      	ldr	r3, [r7, #12]
 8003f0e:	681b      	ldr	r3, [r3, #0]
 8003f10:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8003f14:	601a      	str	r2, [r3, #0]
        }
        return HAL_ERROR;
 8003f16:	2301      	movs	r3, #1
 8003f18:	e06b      	b.n	8003ff2 <HAL_I2C_Mem_Write+0x1e2>
      }

      /* Write data to DR */
      hi2c->Instance->DR = *hi2c->pBuffPtr;
 8003f1a:	68fb      	ldr	r3, [r7, #12]
 8003f1c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003f1e:	781a      	ldrb	r2, [r3, #0]
 8003f20:	68fb      	ldr	r3, [r7, #12]
 8003f22:	681b      	ldr	r3, [r3, #0]
 8003f24:	611a      	str	r2, [r3, #16]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8003f26:	68fb      	ldr	r3, [r7, #12]
 8003f28:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003f2a:	1c5a      	adds	r2, r3, #1
 8003f2c:	68fb      	ldr	r3, [r7, #12]
 8003f2e:	625a      	str	r2, [r3, #36]	@ 0x24

      /* Update counter */
      hi2c->XferSize--;
 8003f30:	68fb      	ldr	r3, [r7, #12]
 8003f32:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8003f34:	3b01      	subs	r3, #1
 8003f36:	b29a      	uxth	r2, r3
 8003f38:	68fb      	ldr	r3, [r7, #12]
 8003f3a:	851a      	strh	r2, [r3, #40]	@ 0x28
      hi2c->XferCount--;
 8003f3c:	68fb      	ldr	r3, [r7, #12]
 8003f3e:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8003f40:	b29b      	uxth	r3, r3
 8003f42:	3b01      	subs	r3, #1
 8003f44:	b29a      	uxth	r2, r3
 8003f46:	68fb      	ldr	r3, [r7, #12]
 8003f48:	855a      	strh	r2, [r3, #42]	@ 0x2a

      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET) && (hi2c->XferSize != 0U))
 8003f4a:	68fb      	ldr	r3, [r7, #12]
 8003f4c:	681b      	ldr	r3, [r3, #0]
 8003f4e:	695b      	ldr	r3, [r3, #20]
 8003f50:	f003 0304 	and.w	r3, r3, #4
 8003f54:	2b04      	cmp	r3, #4
 8003f56:	d11b      	bne.n	8003f90 <HAL_I2C_Mem_Write+0x180>
 8003f58:	68fb      	ldr	r3, [r7, #12]
 8003f5a:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8003f5c:	2b00      	cmp	r3, #0
 8003f5e:	d017      	beq.n	8003f90 <HAL_I2C_Mem_Write+0x180>
      {
        /* Write data to DR */
        hi2c->Instance->DR = *hi2c->pBuffPtr;
 8003f60:	68fb      	ldr	r3, [r7, #12]
 8003f62:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003f64:	781a      	ldrb	r2, [r3, #0]
 8003f66:	68fb      	ldr	r3, [r7, #12]
 8003f68:	681b      	ldr	r3, [r3, #0]
 8003f6a:	611a      	str	r2, [r3, #16]

        /* Increment Buffer pointer */
        hi2c->pBuffPtr++;
 8003f6c:	68fb      	ldr	r3, [r7, #12]
 8003f6e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003f70:	1c5a      	adds	r2, r3, #1
 8003f72:	68fb      	ldr	r3, [r7, #12]
 8003f74:	625a      	str	r2, [r3, #36]	@ 0x24

        /* Update counter */
        hi2c->XferSize--;
 8003f76:	68fb      	ldr	r3, [r7, #12]
 8003f78:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8003f7a:	3b01      	subs	r3, #1
 8003f7c:	b29a      	uxth	r2, r3
 8003f7e:	68fb      	ldr	r3, [r7, #12]
 8003f80:	851a      	strh	r2, [r3, #40]	@ 0x28
        hi2c->XferCount--;
 8003f82:	68fb      	ldr	r3, [r7, #12]
 8003f84:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8003f86:	b29b      	uxth	r3, r3
 8003f88:	3b01      	subs	r3, #1
 8003f8a:	b29a      	uxth	r2, r3
 8003f8c:	68fb      	ldr	r3, [r7, #12]
 8003f8e:	855a      	strh	r2, [r3, #42]	@ 0x2a
    while (hi2c->XferSize > 0U)
 8003f90:	68fb      	ldr	r3, [r7, #12]
 8003f92:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8003f94:	2b00      	cmp	r3, #0
 8003f96:	d1aa      	bne.n	8003eee <HAL_I2C_Mem_Write+0xde>
      }
    }

    /* Wait until BTF flag is set */
    if (I2C_WaitOnBTFFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8003f98:	697a      	ldr	r2, [r7, #20]
 8003f9a:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 8003f9c:	68f8      	ldr	r0, [r7, #12]
 8003f9e:	f000 fd43 	bl	8004a28 <I2C_WaitOnBTFFlagUntilTimeout>
 8003fa2:	4603      	mov	r3, r0
 8003fa4:	2b00      	cmp	r3, #0
 8003fa6:	d00d      	beq.n	8003fc4 <HAL_I2C_Mem_Write+0x1b4>
    {
      if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8003fa8:	68fb      	ldr	r3, [r7, #12]
 8003faa:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003fac:	2b04      	cmp	r3, #4
 8003fae:	d107      	bne.n	8003fc0 <HAL_I2C_Mem_Write+0x1b0>
      {
        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8003fb0:	68fb      	ldr	r3, [r7, #12]
 8003fb2:	681b      	ldr	r3, [r3, #0]
 8003fb4:	681a      	ldr	r2, [r3, #0]
 8003fb6:	68fb      	ldr	r3, [r7, #12]
 8003fb8:	681b      	ldr	r3, [r3, #0]
 8003fba:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8003fbe:	601a      	str	r2, [r3, #0]
      }
      return HAL_ERROR;
 8003fc0:	2301      	movs	r3, #1
 8003fc2:	e016      	b.n	8003ff2 <HAL_I2C_Mem_Write+0x1e2>
    }

    /* Generate Stop */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8003fc4:	68fb      	ldr	r3, [r7, #12]
 8003fc6:	681b      	ldr	r3, [r3, #0]
 8003fc8:	681a      	ldr	r2, [r3, #0]
 8003fca:	68fb      	ldr	r3, [r7, #12]
 8003fcc:	681b      	ldr	r3, [r3, #0]
 8003fce:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8003fd2:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8003fd4:	68fb      	ldr	r3, [r7, #12]
 8003fd6:	2220      	movs	r2, #32
 8003fd8:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
    hi2c->Mode = HAL_I2C_MODE_NONE;
 8003fdc:	68fb      	ldr	r3, [r7, #12]
 8003fde:	2200      	movs	r2, #0
 8003fe0:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8003fe4:	68fb      	ldr	r3, [r7, #12]
 8003fe6:	2200      	movs	r2, #0
 8003fe8:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    return HAL_OK;
 8003fec:	2300      	movs	r3, #0
 8003fee:	e000      	b.n	8003ff2 <HAL_I2C_Mem_Write+0x1e2>
  }
  else
  {
    return HAL_BUSY;
 8003ff0:	2302      	movs	r3, #2
  }
}
 8003ff2:	4618      	mov	r0, r3
 8003ff4:	3718      	adds	r7, #24
 8003ff6:	46bd      	mov	sp, r7
 8003ff8:	bd80      	pop	{r7, pc}
 8003ffa:	bf00      	nop
 8003ffc:	00100002 	.word	0x00100002
 8004000:	ffff0000 	.word	0xffff0000

08004004 <HAL_I2C_Mem_Read>:
  * @param  Size Amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Mem_Read(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8004004:	b580      	push	{r7, lr}
 8004006:	b08c      	sub	sp, #48	@ 0x30
 8004008:	af02      	add	r7, sp, #8
 800400a:	60f8      	str	r0, [r7, #12]
 800400c:	4608      	mov	r0, r1
 800400e:	4611      	mov	r1, r2
 8004010:	461a      	mov	r2, r3
 8004012:	4603      	mov	r3, r0
 8004014:	817b      	strh	r3, [r7, #10]
 8004016:	460b      	mov	r3, r1
 8004018:	813b      	strh	r3, [r7, #8]
 800401a:	4613      	mov	r3, r2
 800401c:	80fb      	strh	r3, [r7, #6]
  /* Init tickstart for timeout management*/
  uint32_t tickstart = HAL_GetTick();
 800401e:	f7ff f929 	bl	8003274 <HAL_GetTick>
 8004022:	6278      	str	r0, [r7, #36]	@ 0x24

  /* Check the parameters */
  assert_param(IS_I2C_MEMADD_SIZE(MemAddSize));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8004024:	68fb      	ldr	r3, [r7, #12]
 8004026:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 800402a:	b2db      	uxtb	r3, r3
 800402c:	2b20      	cmp	r3, #32
 800402e:	f040 8214 	bne.w	800445a <HAL_I2C_Mem_Read+0x456>
  {
    /* Wait until BUSY flag is reset */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 8004032:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004034:	9300      	str	r3, [sp, #0]
 8004036:	2319      	movs	r3, #25
 8004038:	2201      	movs	r2, #1
 800403a:	497b      	ldr	r1, [pc, #492]	@ (8004228 <HAL_I2C_Mem_Read+0x224>)
 800403c:	68f8      	ldr	r0, [r7, #12]
 800403e:	f000 fb91 	bl	8004764 <I2C_WaitOnFlagUntilTimeout>
 8004042:	4603      	mov	r3, r0
 8004044:	2b00      	cmp	r3, #0
 8004046:	d001      	beq.n	800404c <HAL_I2C_Mem_Read+0x48>
    {
      return HAL_BUSY;
 8004048:	2302      	movs	r3, #2
 800404a:	e207      	b.n	800445c <HAL_I2C_Mem_Read+0x458>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 800404c:	68fb      	ldr	r3, [r7, #12]
 800404e:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8004052:	2b01      	cmp	r3, #1
 8004054:	d101      	bne.n	800405a <HAL_I2C_Mem_Read+0x56>
 8004056:	2302      	movs	r3, #2
 8004058:	e200      	b.n	800445c <HAL_I2C_Mem_Read+0x458>
 800405a:	68fb      	ldr	r3, [r7, #12]
 800405c:	2201      	movs	r2, #1
 800405e:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 8004062:	68fb      	ldr	r3, [r7, #12]
 8004064:	681b      	ldr	r3, [r3, #0]
 8004066:	681b      	ldr	r3, [r3, #0]
 8004068:	f003 0301 	and.w	r3, r3, #1
 800406c:	2b01      	cmp	r3, #1
 800406e:	d007      	beq.n	8004080 <HAL_I2C_Mem_Read+0x7c>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 8004070:	68fb      	ldr	r3, [r7, #12]
 8004072:	681b      	ldr	r3, [r3, #0]
 8004074:	681a      	ldr	r2, [r3, #0]
 8004076:	68fb      	ldr	r3, [r7, #12]
 8004078:	681b      	ldr	r3, [r3, #0]
 800407a:	f042 0201 	orr.w	r2, r2, #1
 800407e:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 8004080:	68fb      	ldr	r3, [r7, #12]
 8004082:	681b      	ldr	r3, [r3, #0]
 8004084:	681a      	ldr	r2, [r3, #0]
 8004086:	68fb      	ldr	r3, [r7, #12]
 8004088:	681b      	ldr	r3, [r3, #0]
 800408a:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 800408e:	601a      	str	r2, [r3, #0]

    hi2c->State     = HAL_I2C_STATE_BUSY_RX;
 8004090:	68fb      	ldr	r3, [r7, #12]
 8004092:	2222      	movs	r2, #34	@ 0x22
 8004094:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
    hi2c->Mode      = HAL_I2C_MODE_MEM;
 8004098:	68fb      	ldr	r3, [r7, #12]
 800409a:	2240      	movs	r2, #64	@ 0x40
 800409c:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 80040a0:	68fb      	ldr	r3, [r7, #12]
 80040a2:	2200      	movs	r2, #0
 80040a4:	641a      	str	r2, [r3, #64]	@ 0x40

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 80040a6:	68fb      	ldr	r3, [r7, #12]
 80040a8:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 80040aa:	625a      	str	r2, [r3, #36]	@ 0x24
    hi2c->XferCount   = Size;
 80040ac:	68fb      	ldr	r3, [r7, #12]
 80040ae:	8eba      	ldrh	r2, [r7, #52]	@ 0x34
 80040b0:	855a      	strh	r2, [r3, #42]	@ 0x2a
    hi2c->XferSize    = hi2c->XferCount;
 80040b2:	68fb      	ldr	r3, [r7, #12]
 80040b4:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80040b6:	b29a      	uxth	r2, r3
 80040b8:	68fb      	ldr	r3, [r7, #12]
 80040ba:	851a      	strh	r2, [r3, #40]	@ 0x28
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 80040bc:	68fb      	ldr	r3, [r7, #12]
 80040be:	4a5b      	ldr	r2, [pc, #364]	@ (800422c <HAL_I2C_Mem_Read+0x228>)
 80040c0:	62da      	str	r2, [r3, #44]	@ 0x2c

    /* Send Slave Address and Memory Address */
    if (I2C_RequestMemoryRead(hi2c, DevAddress, MemAddress, MemAddSize, Timeout, tickstart) != HAL_OK)
 80040c2:	88f8      	ldrh	r0, [r7, #6]
 80040c4:	893a      	ldrh	r2, [r7, #8]
 80040c6:	8979      	ldrh	r1, [r7, #10]
 80040c8:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80040ca:	9301      	str	r3, [sp, #4]
 80040cc:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80040ce:	9300      	str	r3, [sp, #0]
 80040d0:	4603      	mov	r3, r0
 80040d2:	68f8      	ldr	r0, [r7, #12]
 80040d4:	f000 fa5e 	bl	8004594 <I2C_RequestMemoryRead>
 80040d8:	4603      	mov	r3, r0
 80040da:	2b00      	cmp	r3, #0
 80040dc:	d001      	beq.n	80040e2 <HAL_I2C_Mem_Read+0xde>
    {
      return HAL_ERROR;
 80040de:	2301      	movs	r3, #1
 80040e0:	e1bc      	b.n	800445c <HAL_I2C_Mem_Read+0x458>
    }

    if (hi2c->XferSize == 0U)
 80040e2:	68fb      	ldr	r3, [r7, #12]
 80040e4:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 80040e6:	2b00      	cmp	r3, #0
 80040e8:	d113      	bne.n	8004112 <HAL_I2C_Mem_Read+0x10e>
    {
      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 80040ea:	2300      	movs	r3, #0
 80040ec:	623b      	str	r3, [r7, #32]
 80040ee:	68fb      	ldr	r3, [r7, #12]
 80040f0:	681b      	ldr	r3, [r3, #0]
 80040f2:	695b      	ldr	r3, [r3, #20]
 80040f4:	623b      	str	r3, [r7, #32]
 80040f6:	68fb      	ldr	r3, [r7, #12]
 80040f8:	681b      	ldr	r3, [r3, #0]
 80040fa:	699b      	ldr	r3, [r3, #24]
 80040fc:	623b      	str	r3, [r7, #32]
 80040fe:	6a3b      	ldr	r3, [r7, #32]

      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8004100:	68fb      	ldr	r3, [r7, #12]
 8004102:	681b      	ldr	r3, [r3, #0]
 8004104:	681a      	ldr	r2, [r3, #0]
 8004106:	68fb      	ldr	r3, [r7, #12]
 8004108:	681b      	ldr	r3, [r3, #0]
 800410a:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 800410e:	601a      	str	r2, [r3, #0]
 8004110:	e190      	b.n	8004434 <HAL_I2C_Mem_Read+0x430>
    }
    else if (hi2c->XferSize == 1U)
 8004112:	68fb      	ldr	r3, [r7, #12]
 8004114:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8004116:	2b01      	cmp	r3, #1
 8004118:	d11b      	bne.n	8004152 <HAL_I2C_Mem_Read+0x14e>
    {
      /* Disable Acknowledge */
      CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 800411a:	68fb      	ldr	r3, [r7, #12]
 800411c:	681b      	ldr	r3, [r3, #0]
 800411e:	681a      	ldr	r2, [r3, #0]
 8004120:	68fb      	ldr	r3, [r7, #12]
 8004122:	681b      	ldr	r3, [r3, #0]
 8004124:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8004128:	601a      	str	r2, [r3, #0]

      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 800412a:	2300      	movs	r3, #0
 800412c:	61fb      	str	r3, [r7, #28]
 800412e:	68fb      	ldr	r3, [r7, #12]
 8004130:	681b      	ldr	r3, [r3, #0]
 8004132:	695b      	ldr	r3, [r3, #20]
 8004134:	61fb      	str	r3, [r7, #28]
 8004136:	68fb      	ldr	r3, [r7, #12]
 8004138:	681b      	ldr	r3, [r3, #0]
 800413a:	699b      	ldr	r3, [r3, #24]
 800413c:	61fb      	str	r3, [r7, #28]
 800413e:	69fb      	ldr	r3, [r7, #28]

      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8004140:	68fb      	ldr	r3, [r7, #12]
 8004142:	681b      	ldr	r3, [r3, #0]
 8004144:	681a      	ldr	r2, [r3, #0]
 8004146:	68fb      	ldr	r3, [r7, #12]
 8004148:	681b      	ldr	r3, [r3, #0]
 800414a:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 800414e:	601a      	str	r2, [r3, #0]
 8004150:	e170      	b.n	8004434 <HAL_I2C_Mem_Read+0x430>
    }
    else if (hi2c->XferSize == 2U)
 8004152:	68fb      	ldr	r3, [r7, #12]
 8004154:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8004156:	2b02      	cmp	r3, #2
 8004158:	d11b      	bne.n	8004192 <HAL_I2C_Mem_Read+0x18e>
    {
      /* Disable Acknowledge */
      CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 800415a:	68fb      	ldr	r3, [r7, #12]
 800415c:	681b      	ldr	r3, [r3, #0]
 800415e:	681a      	ldr	r2, [r3, #0]
 8004160:	68fb      	ldr	r3, [r7, #12]
 8004162:	681b      	ldr	r3, [r3, #0]
 8004164:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8004168:	601a      	str	r2, [r3, #0]

      /* Enable Pos */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 800416a:	68fb      	ldr	r3, [r7, #12]
 800416c:	681b      	ldr	r3, [r3, #0]
 800416e:	681a      	ldr	r2, [r3, #0]
 8004170:	68fb      	ldr	r3, [r7, #12]
 8004172:	681b      	ldr	r3, [r3, #0]
 8004174:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 8004178:	601a      	str	r2, [r3, #0]

      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 800417a:	2300      	movs	r3, #0
 800417c:	61bb      	str	r3, [r7, #24]
 800417e:	68fb      	ldr	r3, [r7, #12]
 8004180:	681b      	ldr	r3, [r3, #0]
 8004182:	695b      	ldr	r3, [r3, #20]
 8004184:	61bb      	str	r3, [r7, #24]
 8004186:	68fb      	ldr	r3, [r7, #12]
 8004188:	681b      	ldr	r3, [r3, #0]
 800418a:	699b      	ldr	r3, [r3, #24]
 800418c:	61bb      	str	r3, [r7, #24]
 800418e:	69bb      	ldr	r3, [r7, #24]
 8004190:	e150      	b.n	8004434 <HAL_I2C_Mem_Read+0x430>
    }
    else
    {
      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8004192:	2300      	movs	r3, #0
 8004194:	617b      	str	r3, [r7, #20]
 8004196:	68fb      	ldr	r3, [r7, #12]
 8004198:	681b      	ldr	r3, [r3, #0]
 800419a:	695b      	ldr	r3, [r3, #20]
 800419c:	617b      	str	r3, [r7, #20]
 800419e:	68fb      	ldr	r3, [r7, #12]
 80041a0:	681b      	ldr	r3, [r3, #0]
 80041a2:	699b      	ldr	r3, [r3, #24]
 80041a4:	617b      	str	r3, [r7, #20]
 80041a6:	697b      	ldr	r3, [r7, #20]
    }

    while (hi2c->XferSize > 0U)
 80041a8:	e144      	b.n	8004434 <HAL_I2C_Mem_Read+0x430>
    {
      if (hi2c->XferSize <= 3U)
 80041aa:	68fb      	ldr	r3, [r7, #12]
 80041ac:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 80041ae:	2b03      	cmp	r3, #3
 80041b0:	f200 80f1 	bhi.w	8004396 <HAL_I2C_Mem_Read+0x392>
      {
        /* One byte */
        if (hi2c->XferSize == 1U)
 80041b4:	68fb      	ldr	r3, [r7, #12]
 80041b6:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 80041b8:	2b01      	cmp	r3, #1
 80041ba:	d123      	bne.n	8004204 <HAL_I2C_Mem_Read+0x200>
        {
          /* Wait until RXNE flag is set */
          if (I2C_WaitOnRXNEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 80041bc:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 80041be:	6bb9      	ldr	r1, [r7, #56]	@ 0x38
 80041c0:	68f8      	ldr	r0, [r7, #12]
 80041c2:	f000 fc79 	bl	8004ab8 <I2C_WaitOnRXNEFlagUntilTimeout>
 80041c6:	4603      	mov	r3, r0
 80041c8:	2b00      	cmp	r3, #0
 80041ca:	d001      	beq.n	80041d0 <HAL_I2C_Mem_Read+0x1cc>
          {
            return HAL_ERROR;
 80041cc:	2301      	movs	r3, #1
 80041ce:	e145      	b.n	800445c <HAL_I2C_Mem_Read+0x458>
          }

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 80041d0:	68fb      	ldr	r3, [r7, #12]
 80041d2:	681b      	ldr	r3, [r3, #0]
 80041d4:	691a      	ldr	r2, [r3, #16]
 80041d6:	68fb      	ldr	r3, [r7, #12]
 80041d8:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80041da:	b2d2      	uxtb	r2, r2
 80041dc:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 80041de:	68fb      	ldr	r3, [r7, #12]
 80041e0:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80041e2:	1c5a      	adds	r2, r3, #1
 80041e4:	68fb      	ldr	r3, [r7, #12]
 80041e6:	625a      	str	r2, [r3, #36]	@ 0x24

          /* Update counter */
          hi2c->XferSize--;
 80041e8:	68fb      	ldr	r3, [r7, #12]
 80041ea:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 80041ec:	3b01      	subs	r3, #1
 80041ee:	b29a      	uxth	r2, r3
 80041f0:	68fb      	ldr	r3, [r7, #12]
 80041f2:	851a      	strh	r2, [r3, #40]	@ 0x28
          hi2c->XferCount--;
 80041f4:	68fb      	ldr	r3, [r7, #12]
 80041f6:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80041f8:	b29b      	uxth	r3, r3
 80041fa:	3b01      	subs	r3, #1
 80041fc:	b29a      	uxth	r2, r3
 80041fe:	68fb      	ldr	r3, [r7, #12]
 8004200:	855a      	strh	r2, [r3, #42]	@ 0x2a
 8004202:	e117      	b.n	8004434 <HAL_I2C_Mem_Read+0x430>
        }
        /* Two bytes */
        else if (hi2c->XferSize == 2U)
 8004204:	68fb      	ldr	r3, [r7, #12]
 8004206:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8004208:	2b02      	cmp	r3, #2
 800420a:	d14e      	bne.n	80042aa <HAL_I2C_Mem_Read+0x2a6>
        {
          /* Wait until BTF flag is set */
          if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 800420c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800420e:	9300      	str	r3, [sp, #0]
 8004210:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8004212:	2200      	movs	r2, #0
 8004214:	4906      	ldr	r1, [pc, #24]	@ (8004230 <HAL_I2C_Mem_Read+0x22c>)
 8004216:	68f8      	ldr	r0, [r7, #12]
 8004218:	f000 faa4 	bl	8004764 <I2C_WaitOnFlagUntilTimeout>
 800421c:	4603      	mov	r3, r0
 800421e:	2b00      	cmp	r3, #0
 8004220:	d008      	beq.n	8004234 <HAL_I2C_Mem_Read+0x230>
          {
            return HAL_ERROR;
 8004222:	2301      	movs	r3, #1
 8004224:	e11a      	b.n	800445c <HAL_I2C_Mem_Read+0x458>
 8004226:	bf00      	nop
 8004228:	00100002 	.word	0x00100002
 800422c:	ffff0000 	.word	0xffff0000
 8004230:	00010004 	.word	0x00010004
          }

          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8004234:	68fb      	ldr	r3, [r7, #12]
 8004236:	681b      	ldr	r3, [r3, #0]
 8004238:	681a      	ldr	r2, [r3, #0]
 800423a:	68fb      	ldr	r3, [r7, #12]
 800423c:	681b      	ldr	r3, [r3, #0]
 800423e:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8004242:	601a      	str	r2, [r3, #0]

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8004244:	68fb      	ldr	r3, [r7, #12]
 8004246:	681b      	ldr	r3, [r3, #0]
 8004248:	691a      	ldr	r2, [r3, #16]
 800424a:	68fb      	ldr	r3, [r7, #12]
 800424c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800424e:	b2d2      	uxtb	r2, r2
 8004250:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8004252:	68fb      	ldr	r3, [r7, #12]
 8004254:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004256:	1c5a      	adds	r2, r3, #1
 8004258:	68fb      	ldr	r3, [r7, #12]
 800425a:	625a      	str	r2, [r3, #36]	@ 0x24

          /* Update counter */
          hi2c->XferSize--;
 800425c:	68fb      	ldr	r3, [r7, #12]
 800425e:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8004260:	3b01      	subs	r3, #1
 8004262:	b29a      	uxth	r2, r3
 8004264:	68fb      	ldr	r3, [r7, #12]
 8004266:	851a      	strh	r2, [r3, #40]	@ 0x28
          hi2c->XferCount--;
 8004268:	68fb      	ldr	r3, [r7, #12]
 800426a:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 800426c:	b29b      	uxth	r3, r3
 800426e:	3b01      	subs	r3, #1
 8004270:	b29a      	uxth	r2, r3
 8004272:	68fb      	ldr	r3, [r7, #12]
 8004274:	855a      	strh	r2, [r3, #42]	@ 0x2a

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8004276:	68fb      	ldr	r3, [r7, #12]
 8004278:	681b      	ldr	r3, [r3, #0]
 800427a:	691a      	ldr	r2, [r3, #16]
 800427c:	68fb      	ldr	r3, [r7, #12]
 800427e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004280:	b2d2      	uxtb	r2, r2
 8004282:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8004284:	68fb      	ldr	r3, [r7, #12]
 8004286:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004288:	1c5a      	adds	r2, r3, #1
 800428a:	68fb      	ldr	r3, [r7, #12]
 800428c:	625a      	str	r2, [r3, #36]	@ 0x24

          /* Update counter */
          hi2c->XferSize--;
 800428e:	68fb      	ldr	r3, [r7, #12]
 8004290:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8004292:	3b01      	subs	r3, #1
 8004294:	b29a      	uxth	r2, r3
 8004296:	68fb      	ldr	r3, [r7, #12]
 8004298:	851a      	strh	r2, [r3, #40]	@ 0x28
          hi2c->XferCount--;
 800429a:	68fb      	ldr	r3, [r7, #12]
 800429c:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 800429e:	b29b      	uxth	r3, r3
 80042a0:	3b01      	subs	r3, #1
 80042a2:	b29a      	uxth	r2, r3
 80042a4:	68fb      	ldr	r3, [r7, #12]
 80042a6:	855a      	strh	r2, [r3, #42]	@ 0x2a
 80042a8:	e0c4      	b.n	8004434 <HAL_I2C_Mem_Read+0x430>
        }
        /* 3 Last bytes */
        else
        {
          /* Wait until BTF flag is set */
          if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 80042aa:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80042ac:	9300      	str	r3, [sp, #0]
 80042ae:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80042b0:	2200      	movs	r2, #0
 80042b2:	496c      	ldr	r1, [pc, #432]	@ (8004464 <HAL_I2C_Mem_Read+0x460>)
 80042b4:	68f8      	ldr	r0, [r7, #12]
 80042b6:	f000 fa55 	bl	8004764 <I2C_WaitOnFlagUntilTimeout>
 80042ba:	4603      	mov	r3, r0
 80042bc:	2b00      	cmp	r3, #0
 80042be:	d001      	beq.n	80042c4 <HAL_I2C_Mem_Read+0x2c0>
          {
            return HAL_ERROR;
 80042c0:	2301      	movs	r3, #1
 80042c2:	e0cb      	b.n	800445c <HAL_I2C_Mem_Read+0x458>
          }

          /* Disable Acknowledge */
          CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 80042c4:	68fb      	ldr	r3, [r7, #12]
 80042c6:	681b      	ldr	r3, [r3, #0]
 80042c8:	681a      	ldr	r2, [r3, #0]
 80042ca:	68fb      	ldr	r3, [r7, #12]
 80042cc:	681b      	ldr	r3, [r3, #0]
 80042ce:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 80042d2:	601a      	str	r2, [r3, #0]

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 80042d4:	68fb      	ldr	r3, [r7, #12]
 80042d6:	681b      	ldr	r3, [r3, #0]
 80042d8:	691a      	ldr	r2, [r3, #16]
 80042da:	68fb      	ldr	r3, [r7, #12]
 80042dc:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80042de:	b2d2      	uxtb	r2, r2
 80042e0:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 80042e2:	68fb      	ldr	r3, [r7, #12]
 80042e4:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80042e6:	1c5a      	adds	r2, r3, #1
 80042e8:	68fb      	ldr	r3, [r7, #12]
 80042ea:	625a      	str	r2, [r3, #36]	@ 0x24

          /* Update counter */
          hi2c->XferSize--;
 80042ec:	68fb      	ldr	r3, [r7, #12]
 80042ee:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 80042f0:	3b01      	subs	r3, #1
 80042f2:	b29a      	uxth	r2, r3
 80042f4:	68fb      	ldr	r3, [r7, #12]
 80042f6:	851a      	strh	r2, [r3, #40]	@ 0x28
          hi2c->XferCount--;
 80042f8:	68fb      	ldr	r3, [r7, #12]
 80042fa:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80042fc:	b29b      	uxth	r3, r3
 80042fe:	3b01      	subs	r3, #1
 8004300:	b29a      	uxth	r2, r3
 8004302:	68fb      	ldr	r3, [r7, #12]
 8004304:	855a      	strh	r2, [r3, #42]	@ 0x2a

          /* Wait until BTF flag is set */
          if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 8004306:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004308:	9300      	str	r3, [sp, #0]
 800430a:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800430c:	2200      	movs	r2, #0
 800430e:	4955      	ldr	r1, [pc, #340]	@ (8004464 <HAL_I2C_Mem_Read+0x460>)
 8004310:	68f8      	ldr	r0, [r7, #12]
 8004312:	f000 fa27 	bl	8004764 <I2C_WaitOnFlagUntilTimeout>
 8004316:	4603      	mov	r3, r0
 8004318:	2b00      	cmp	r3, #0
 800431a:	d001      	beq.n	8004320 <HAL_I2C_Mem_Read+0x31c>
          {
            return HAL_ERROR;
 800431c:	2301      	movs	r3, #1
 800431e:	e09d      	b.n	800445c <HAL_I2C_Mem_Read+0x458>
          }

          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8004320:	68fb      	ldr	r3, [r7, #12]
 8004322:	681b      	ldr	r3, [r3, #0]
 8004324:	681a      	ldr	r2, [r3, #0]
 8004326:	68fb      	ldr	r3, [r7, #12]
 8004328:	681b      	ldr	r3, [r3, #0]
 800432a:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 800432e:	601a      	str	r2, [r3, #0]

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8004330:	68fb      	ldr	r3, [r7, #12]
 8004332:	681b      	ldr	r3, [r3, #0]
 8004334:	691a      	ldr	r2, [r3, #16]
 8004336:	68fb      	ldr	r3, [r7, #12]
 8004338:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800433a:	b2d2      	uxtb	r2, r2
 800433c:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 800433e:	68fb      	ldr	r3, [r7, #12]
 8004340:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004342:	1c5a      	adds	r2, r3, #1
 8004344:	68fb      	ldr	r3, [r7, #12]
 8004346:	625a      	str	r2, [r3, #36]	@ 0x24

          /* Update counter */
          hi2c->XferSize--;
 8004348:	68fb      	ldr	r3, [r7, #12]
 800434a:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 800434c:	3b01      	subs	r3, #1
 800434e:	b29a      	uxth	r2, r3
 8004350:	68fb      	ldr	r3, [r7, #12]
 8004352:	851a      	strh	r2, [r3, #40]	@ 0x28
          hi2c->XferCount--;
 8004354:	68fb      	ldr	r3, [r7, #12]
 8004356:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8004358:	b29b      	uxth	r3, r3
 800435a:	3b01      	subs	r3, #1
 800435c:	b29a      	uxth	r2, r3
 800435e:	68fb      	ldr	r3, [r7, #12]
 8004360:	855a      	strh	r2, [r3, #42]	@ 0x2a

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8004362:	68fb      	ldr	r3, [r7, #12]
 8004364:	681b      	ldr	r3, [r3, #0]
 8004366:	691a      	ldr	r2, [r3, #16]
 8004368:	68fb      	ldr	r3, [r7, #12]
 800436a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800436c:	b2d2      	uxtb	r2, r2
 800436e:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8004370:	68fb      	ldr	r3, [r7, #12]
 8004372:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004374:	1c5a      	adds	r2, r3, #1
 8004376:	68fb      	ldr	r3, [r7, #12]
 8004378:	625a      	str	r2, [r3, #36]	@ 0x24

          /* Update counter */
          hi2c->XferSize--;
 800437a:	68fb      	ldr	r3, [r7, #12]
 800437c:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 800437e:	3b01      	subs	r3, #1
 8004380:	b29a      	uxth	r2, r3
 8004382:	68fb      	ldr	r3, [r7, #12]
 8004384:	851a      	strh	r2, [r3, #40]	@ 0x28
          hi2c->XferCount--;
 8004386:	68fb      	ldr	r3, [r7, #12]
 8004388:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 800438a:	b29b      	uxth	r3, r3
 800438c:	3b01      	subs	r3, #1
 800438e:	b29a      	uxth	r2, r3
 8004390:	68fb      	ldr	r3, [r7, #12]
 8004392:	855a      	strh	r2, [r3, #42]	@ 0x2a
 8004394:	e04e      	b.n	8004434 <HAL_I2C_Mem_Read+0x430>
        }
      }
      else
      {
        /* Wait until RXNE flag is set */
        if (I2C_WaitOnRXNEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8004396:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8004398:	6bb9      	ldr	r1, [r7, #56]	@ 0x38
 800439a:	68f8      	ldr	r0, [r7, #12]
 800439c:	f000 fb8c 	bl	8004ab8 <I2C_WaitOnRXNEFlagUntilTimeout>
 80043a0:	4603      	mov	r3, r0
 80043a2:	2b00      	cmp	r3, #0
 80043a4:	d001      	beq.n	80043aa <HAL_I2C_Mem_Read+0x3a6>
        {
          return HAL_ERROR;
 80043a6:	2301      	movs	r3, #1
 80043a8:	e058      	b.n	800445c <HAL_I2C_Mem_Read+0x458>
        }

        /* Read data from DR */
        *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 80043aa:	68fb      	ldr	r3, [r7, #12]
 80043ac:	681b      	ldr	r3, [r3, #0]
 80043ae:	691a      	ldr	r2, [r3, #16]
 80043b0:	68fb      	ldr	r3, [r7, #12]
 80043b2:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80043b4:	b2d2      	uxtb	r2, r2
 80043b6:	701a      	strb	r2, [r3, #0]

        /* Increment Buffer pointer */
        hi2c->pBuffPtr++;
 80043b8:	68fb      	ldr	r3, [r7, #12]
 80043ba:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80043bc:	1c5a      	adds	r2, r3, #1
 80043be:	68fb      	ldr	r3, [r7, #12]
 80043c0:	625a      	str	r2, [r3, #36]	@ 0x24

        /* Update counter */
        hi2c->XferSize--;
 80043c2:	68fb      	ldr	r3, [r7, #12]
 80043c4:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 80043c6:	3b01      	subs	r3, #1
 80043c8:	b29a      	uxth	r2, r3
 80043ca:	68fb      	ldr	r3, [r7, #12]
 80043cc:	851a      	strh	r2, [r3, #40]	@ 0x28
        hi2c->XferCount--;
 80043ce:	68fb      	ldr	r3, [r7, #12]
 80043d0:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80043d2:	b29b      	uxth	r3, r3
 80043d4:	3b01      	subs	r3, #1
 80043d6:	b29a      	uxth	r2, r3
 80043d8:	68fb      	ldr	r3, [r7, #12]
 80043da:	855a      	strh	r2, [r3, #42]	@ 0x2a

        if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET)
 80043dc:	68fb      	ldr	r3, [r7, #12]
 80043de:	681b      	ldr	r3, [r3, #0]
 80043e0:	695b      	ldr	r3, [r3, #20]
 80043e2:	f003 0304 	and.w	r3, r3, #4
 80043e6:	2b04      	cmp	r3, #4
 80043e8:	d124      	bne.n	8004434 <HAL_I2C_Mem_Read+0x430>
        {
          if (hi2c->XferSize == 3U)
 80043ea:	68fb      	ldr	r3, [r7, #12]
 80043ec:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 80043ee:	2b03      	cmp	r3, #3
 80043f0:	d107      	bne.n	8004402 <HAL_I2C_Mem_Read+0x3fe>
          {
            /* Disable Acknowledge */
            CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 80043f2:	68fb      	ldr	r3, [r7, #12]
 80043f4:	681b      	ldr	r3, [r3, #0]
 80043f6:	681a      	ldr	r2, [r3, #0]
 80043f8:	68fb      	ldr	r3, [r7, #12]
 80043fa:	681b      	ldr	r3, [r3, #0]
 80043fc:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8004400:	601a      	str	r2, [r3, #0]
          }
          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8004402:	68fb      	ldr	r3, [r7, #12]
 8004404:	681b      	ldr	r3, [r3, #0]
 8004406:	691a      	ldr	r2, [r3, #16]
 8004408:	68fb      	ldr	r3, [r7, #12]
 800440a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800440c:	b2d2      	uxtb	r2, r2
 800440e:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8004410:	68fb      	ldr	r3, [r7, #12]
 8004412:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004414:	1c5a      	adds	r2, r3, #1
 8004416:	68fb      	ldr	r3, [r7, #12]
 8004418:	625a      	str	r2, [r3, #36]	@ 0x24

          /* Update counter */
          hi2c->XferSize--;
 800441a:	68fb      	ldr	r3, [r7, #12]
 800441c:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 800441e:	3b01      	subs	r3, #1
 8004420:	b29a      	uxth	r2, r3
 8004422:	68fb      	ldr	r3, [r7, #12]
 8004424:	851a      	strh	r2, [r3, #40]	@ 0x28
          hi2c->XferCount--;
 8004426:	68fb      	ldr	r3, [r7, #12]
 8004428:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 800442a:	b29b      	uxth	r3, r3
 800442c:	3b01      	subs	r3, #1
 800442e:	b29a      	uxth	r2, r3
 8004430:	68fb      	ldr	r3, [r7, #12]
 8004432:	855a      	strh	r2, [r3, #42]	@ 0x2a
    while (hi2c->XferSize > 0U)
 8004434:	68fb      	ldr	r3, [r7, #12]
 8004436:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8004438:	2b00      	cmp	r3, #0
 800443a:	f47f aeb6 	bne.w	80041aa <HAL_I2C_Mem_Read+0x1a6>
        }
      }
    }

    hi2c->State = HAL_I2C_STATE_READY;
 800443e:	68fb      	ldr	r3, [r7, #12]
 8004440:	2220      	movs	r2, #32
 8004442:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
    hi2c->Mode = HAL_I2C_MODE_NONE;
 8004446:	68fb      	ldr	r3, [r7, #12]
 8004448:	2200      	movs	r2, #0
 800444a:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 800444e:	68fb      	ldr	r3, [r7, #12]
 8004450:	2200      	movs	r2, #0
 8004452:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    return HAL_OK;
 8004456:	2300      	movs	r3, #0
 8004458:	e000      	b.n	800445c <HAL_I2C_Mem_Read+0x458>
  }
  else
  {
    return HAL_BUSY;
 800445a:	2302      	movs	r3, #2
  }
}
 800445c:	4618      	mov	r0, r3
 800445e:	3728      	adds	r7, #40	@ 0x28
 8004460:	46bd      	mov	sp, r7
 8004462:	bd80      	pop	{r7, pc}
 8004464:	00010004 	.word	0x00010004

08004468 <I2C_RequestMemoryWrite>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_RequestMemoryWrite(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint32_t Timeout, uint32_t Tickstart)
{
 8004468:	b580      	push	{r7, lr}
 800446a:	b088      	sub	sp, #32
 800446c:	af02      	add	r7, sp, #8
 800446e:	60f8      	str	r0, [r7, #12]
 8004470:	4608      	mov	r0, r1
 8004472:	4611      	mov	r1, r2
 8004474:	461a      	mov	r2, r3
 8004476:	4603      	mov	r3, r0
 8004478:	817b      	strh	r3, [r7, #10]
 800447a:	460b      	mov	r3, r1
 800447c:	813b      	strh	r3, [r7, #8]
 800447e:	4613      	mov	r3, r2
 8004480:	80fb      	strh	r3, [r7, #6]
  /* Generate Start */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8004482:	68fb      	ldr	r3, [r7, #12]
 8004484:	681b      	ldr	r3, [r3, #0]
 8004486:	681a      	ldr	r2, [r3, #0]
 8004488:	68fb      	ldr	r3, [r7, #12]
 800448a:	681b      	ldr	r3, [r3, #0]
 800448c:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 8004490:	601a      	str	r2, [r3, #0]

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 8004492:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004494:	9300      	str	r3, [sp, #0]
 8004496:	6a3b      	ldr	r3, [r7, #32]
 8004498:	2200      	movs	r2, #0
 800449a:	f04f 1101 	mov.w	r1, #65537	@ 0x10001
 800449e:	68f8      	ldr	r0, [r7, #12]
 80044a0:	f000 f960 	bl	8004764 <I2C_WaitOnFlagUntilTimeout>
 80044a4:	4603      	mov	r3, r0
 80044a6:	2b00      	cmp	r3, #0
 80044a8:	d00d      	beq.n	80044c6 <I2C_RequestMemoryWrite+0x5e>
  {
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 80044aa:	68fb      	ldr	r3, [r7, #12]
 80044ac:	681b      	ldr	r3, [r3, #0]
 80044ae:	681b      	ldr	r3, [r3, #0]
 80044b0:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80044b4:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 80044b8:	d103      	bne.n	80044c2 <I2C_RequestMemoryWrite+0x5a>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 80044ba:	68fb      	ldr	r3, [r7, #12]
 80044bc:	f44f 7200 	mov.w	r2, #512	@ 0x200
 80044c0:	641a      	str	r2, [r3, #64]	@ 0x40
    }
    return HAL_TIMEOUT;
 80044c2:	2303      	movs	r3, #3
 80044c4:	e05f      	b.n	8004586 <I2C_RequestMemoryWrite+0x11e>
  }

  /* Send slave address */
  hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(DevAddress);
 80044c6:	897b      	ldrh	r3, [r7, #10]
 80044c8:	b2db      	uxtb	r3, r3
 80044ca:	461a      	mov	r2, r3
 80044cc:	68fb      	ldr	r3, [r7, #12]
 80044ce:	681b      	ldr	r3, [r3, #0]
 80044d0:	f002 02fe 	and.w	r2, r2, #254	@ 0xfe
 80044d4:	611a      	str	r2, [r3, #16]

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 80044d6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80044d8:	6a3a      	ldr	r2, [r7, #32]
 80044da:	492d      	ldr	r1, [pc, #180]	@ (8004590 <I2C_RequestMemoryWrite+0x128>)
 80044dc:	68f8      	ldr	r0, [r7, #12]
 80044de:	f000 f9bb 	bl	8004858 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 80044e2:	4603      	mov	r3, r0
 80044e4:	2b00      	cmp	r3, #0
 80044e6:	d001      	beq.n	80044ec <I2C_RequestMemoryWrite+0x84>
  {
    return HAL_ERROR;
 80044e8:	2301      	movs	r3, #1
 80044ea:	e04c      	b.n	8004586 <I2C_RequestMemoryWrite+0x11e>
  }

  /* Clear ADDR flag */
  __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 80044ec:	2300      	movs	r3, #0
 80044ee:	617b      	str	r3, [r7, #20]
 80044f0:	68fb      	ldr	r3, [r7, #12]
 80044f2:	681b      	ldr	r3, [r3, #0]
 80044f4:	695b      	ldr	r3, [r3, #20]
 80044f6:	617b      	str	r3, [r7, #20]
 80044f8:	68fb      	ldr	r3, [r7, #12]
 80044fa:	681b      	ldr	r3, [r3, #0]
 80044fc:	699b      	ldr	r3, [r3, #24]
 80044fe:	617b      	str	r3, [r7, #20]
 8004500:	697b      	ldr	r3, [r7, #20]

  /* Wait until TXE flag is set */
  if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8004502:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8004504:	6a39      	ldr	r1, [r7, #32]
 8004506:	68f8      	ldr	r0, [r7, #12]
 8004508:	f000 fa46 	bl	8004998 <I2C_WaitOnTXEFlagUntilTimeout>
 800450c:	4603      	mov	r3, r0
 800450e:	2b00      	cmp	r3, #0
 8004510:	d00d      	beq.n	800452e <I2C_RequestMemoryWrite+0xc6>
  {
    if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8004512:	68fb      	ldr	r3, [r7, #12]
 8004514:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004516:	2b04      	cmp	r3, #4
 8004518:	d107      	bne.n	800452a <I2C_RequestMemoryWrite+0xc2>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800451a:	68fb      	ldr	r3, [r7, #12]
 800451c:	681b      	ldr	r3, [r3, #0]
 800451e:	681a      	ldr	r2, [r3, #0]
 8004520:	68fb      	ldr	r3, [r7, #12]
 8004522:	681b      	ldr	r3, [r3, #0]
 8004524:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8004528:	601a      	str	r2, [r3, #0]
    }
    return HAL_ERROR;
 800452a:	2301      	movs	r3, #1
 800452c:	e02b      	b.n	8004586 <I2C_RequestMemoryWrite+0x11e>
  }

  /* If Memory address size is 8Bit */
  if (MemAddSize == I2C_MEMADD_SIZE_8BIT)
 800452e:	88fb      	ldrh	r3, [r7, #6]
 8004530:	2b01      	cmp	r3, #1
 8004532:	d105      	bne.n	8004540 <I2C_RequestMemoryWrite+0xd8>
  {
    /* Send Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(MemAddress);
 8004534:	893b      	ldrh	r3, [r7, #8]
 8004536:	b2da      	uxtb	r2, r3
 8004538:	68fb      	ldr	r3, [r7, #12]
 800453a:	681b      	ldr	r3, [r3, #0]
 800453c:	611a      	str	r2, [r3, #16]
 800453e:	e021      	b.n	8004584 <I2C_RequestMemoryWrite+0x11c>
  }
  /* If Memory address size is 16Bit */
  else
  {
    /* Send MSB of Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_MSB(MemAddress);
 8004540:	893b      	ldrh	r3, [r7, #8]
 8004542:	0a1b      	lsrs	r3, r3, #8
 8004544:	b29b      	uxth	r3, r3
 8004546:	b2da      	uxtb	r2, r3
 8004548:	68fb      	ldr	r3, [r7, #12]
 800454a:	681b      	ldr	r3, [r3, #0]
 800454c:	611a      	str	r2, [r3, #16]

    /* Wait until TXE flag is set */
    if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 800454e:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8004550:	6a39      	ldr	r1, [r7, #32]
 8004552:	68f8      	ldr	r0, [r7, #12]
 8004554:	f000 fa20 	bl	8004998 <I2C_WaitOnTXEFlagUntilTimeout>
 8004558:	4603      	mov	r3, r0
 800455a:	2b00      	cmp	r3, #0
 800455c:	d00d      	beq.n	800457a <I2C_RequestMemoryWrite+0x112>
    {
      if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 800455e:	68fb      	ldr	r3, [r7, #12]
 8004560:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004562:	2b04      	cmp	r3, #4
 8004564:	d107      	bne.n	8004576 <I2C_RequestMemoryWrite+0x10e>
      {
        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8004566:	68fb      	ldr	r3, [r7, #12]
 8004568:	681b      	ldr	r3, [r3, #0]
 800456a:	681a      	ldr	r2, [r3, #0]
 800456c:	68fb      	ldr	r3, [r7, #12]
 800456e:	681b      	ldr	r3, [r3, #0]
 8004570:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8004574:	601a      	str	r2, [r3, #0]
      }
      return HAL_ERROR;
 8004576:	2301      	movs	r3, #1
 8004578:	e005      	b.n	8004586 <I2C_RequestMemoryWrite+0x11e>
    }

    /* Send LSB of Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(MemAddress);
 800457a:	893b      	ldrh	r3, [r7, #8]
 800457c:	b2da      	uxtb	r2, r3
 800457e:	68fb      	ldr	r3, [r7, #12]
 8004580:	681b      	ldr	r3, [r3, #0]
 8004582:	611a      	str	r2, [r3, #16]
  }

  return HAL_OK;
 8004584:	2300      	movs	r3, #0
}
 8004586:	4618      	mov	r0, r3
 8004588:	3718      	adds	r7, #24
 800458a:	46bd      	mov	sp, r7
 800458c:	bd80      	pop	{r7, pc}
 800458e:	bf00      	nop
 8004590:	00010002 	.word	0x00010002

08004594 <I2C_RequestMemoryRead>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_RequestMemoryRead(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint32_t Timeout, uint32_t Tickstart)
{
 8004594:	b580      	push	{r7, lr}
 8004596:	b088      	sub	sp, #32
 8004598:	af02      	add	r7, sp, #8
 800459a:	60f8      	str	r0, [r7, #12]
 800459c:	4608      	mov	r0, r1
 800459e:	4611      	mov	r1, r2
 80045a0:	461a      	mov	r2, r3
 80045a2:	4603      	mov	r3, r0
 80045a4:	817b      	strh	r3, [r7, #10]
 80045a6:	460b      	mov	r3, r1
 80045a8:	813b      	strh	r3, [r7, #8]
 80045aa:	4613      	mov	r3, r2
 80045ac:	80fb      	strh	r3, [r7, #6]
  /* Enable Acknowledge */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 80045ae:	68fb      	ldr	r3, [r7, #12]
 80045b0:	681b      	ldr	r3, [r3, #0]
 80045b2:	681a      	ldr	r2, [r3, #0]
 80045b4:	68fb      	ldr	r3, [r7, #12]
 80045b6:	681b      	ldr	r3, [r3, #0]
 80045b8:	f442 6280 	orr.w	r2, r2, #1024	@ 0x400
 80045bc:	601a      	str	r2, [r3, #0]

  /* Generate Start */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 80045be:	68fb      	ldr	r3, [r7, #12]
 80045c0:	681b      	ldr	r3, [r3, #0]
 80045c2:	681a      	ldr	r2, [r3, #0]
 80045c4:	68fb      	ldr	r3, [r7, #12]
 80045c6:	681b      	ldr	r3, [r3, #0]
 80045c8:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 80045cc:	601a      	str	r2, [r3, #0]

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 80045ce:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80045d0:	9300      	str	r3, [sp, #0]
 80045d2:	6a3b      	ldr	r3, [r7, #32]
 80045d4:	2200      	movs	r2, #0
 80045d6:	f04f 1101 	mov.w	r1, #65537	@ 0x10001
 80045da:	68f8      	ldr	r0, [r7, #12]
 80045dc:	f000 f8c2 	bl	8004764 <I2C_WaitOnFlagUntilTimeout>
 80045e0:	4603      	mov	r3, r0
 80045e2:	2b00      	cmp	r3, #0
 80045e4:	d00d      	beq.n	8004602 <I2C_RequestMemoryRead+0x6e>
  {
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 80045e6:	68fb      	ldr	r3, [r7, #12]
 80045e8:	681b      	ldr	r3, [r3, #0]
 80045ea:	681b      	ldr	r3, [r3, #0]
 80045ec:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80045f0:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 80045f4:	d103      	bne.n	80045fe <I2C_RequestMemoryRead+0x6a>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 80045f6:	68fb      	ldr	r3, [r7, #12]
 80045f8:	f44f 7200 	mov.w	r2, #512	@ 0x200
 80045fc:	641a      	str	r2, [r3, #64]	@ 0x40
    }
    return HAL_TIMEOUT;
 80045fe:	2303      	movs	r3, #3
 8004600:	e0aa      	b.n	8004758 <I2C_RequestMemoryRead+0x1c4>
  }

  /* Send slave address */
  hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(DevAddress);
 8004602:	897b      	ldrh	r3, [r7, #10]
 8004604:	b2db      	uxtb	r3, r3
 8004606:	461a      	mov	r2, r3
 8004608:	68fb      	ldr	r3, [r7, #12]
 800460a:	681b      	ldr	r3, [r3, #0]
 800460c:	f002 02fe 	and.w	r2, r2, #254	@ 0xfe
 8004610:	611a      	str	r2, [r3, #16]

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 8004612:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004614:	6a3a      	ldr	r2, [r7, #32]
 8004616:	4952      	ldr	r1, [pc, #328]	@ (8004760 <I2C_RequestMemoryRead+0x1cc>)
 8004618:	68f8      	ldr	r0, [r7, #12]
 800461a:	f000 f91d 	bl	8004858 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 800461e:	4603      	mov	r3, r0
 8004620:	2b00      	cmp	r3, #0
 8004622:	d001      	beq.n	8004628 <I2C_RequestMemoryRead+0x94>
  {
    return HAL_ERROR;
 8004624:	2301      	movs	r3, #1
 8004626:	e097      	b.n	8004758 <I2C_RequestMemoryRead+0x1c4>
  }

  /* Clear ADDR flag */
  __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8004628:	2300      	movs	r3, #0
 800462a:	617b      	str	r3, [r7, #20]
 800462c:	68fb      	ldr	r3, [r7, #12]
 800462e:	681b      	ldr	r3, [r3, #0]
 8004630:	695b      	ldr	r3, [r3, #20]
 8004632:	617b      	str	r3, [r7, #20]
 8004634:	68fb      	ldr	r3, [r7, #12]
 8004636:	681b      	ldr	r3, [r3, #0]
 8004638:	699b      	ldr	r3, [r3, #24]
 800463a:	617b      	str	r3, [r7, #20]
 800463c:	697b      	ldr	r3, [r7, #20]

  /* Wait until TXE flag is set */
  if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 800463e:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8004640:	6a39      	ldr	r1, [r7, #32]
 8004642:	68f8      	ldr	r0, [r7, #12]
 8004644:	f000 f9a8 	bl	8004998 <I2C_WaitOnTXEFlagUntilTimeout>
 8004648:	4603      	mov	r3, r0
 800464a:	2b00      	cmp	r3, #0
 800464c:	d00d      	beq.n	800466a <I2C_RequestMemoryRead+0xd6>
  {
    if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 800464e:	68fb      	ldr	r3, [r7, #12]
 8004650:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004652:	2b04      	cmp	r3, #4
 8004654:	d107      	bne.n	8004666 <I2C_RequestMemoryRead+0xd2>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8004656:	68fb      	ldr	r3, [r7, #12]
 8004658:	681b      	ldr	r3, [r3, #0]
 800465a:	681a      	ldr	r2, [r3, #0]
 800465c:	68fb      	ldr	r3, [r7, #12]
 800465e:	681b      	ldr	r3, [r3, #0]
 8004660:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8004664:	601a      	str	r2, [r3, #0]
    }
    return HAL_ERROR;
 8004666:	2301      	movs	r3, #1
 8004668:	e076      	b.n	8004758 <I2C_RequestMemoryRead+0x1c4>
  }

  /* If Memory address size is 8Bit */
  if (MemAddSize == I2C_MEMADD_SIZE_8BIT)
 800466a:	88fb      	ldrh	r3, [r7, #6]
 800466c:	2b01      	cmp	r3, #1
 800466e:	d105      	bne.n	800467c <I2C_RequestMemoryRead+0xe8>
  {
    /* Send Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(MemAddress);
 8004670:	893b      	ldrh	r3, [r7, #8]
 8004672:	b2da      	uxtb	r2, r3
 8004674:	68fb      	ldr	r3, [r7, #12]
 8004676:	681b      	ldr	r3, [r3, #0]
 8004678:	611a      	str	r2, [r3, #16]
 800467a:	e021      	b.n	80046c0 <I2C_RequestMemoryRead+0x12c>
  }
  /* If Memory address size is 16Bit */
  else
  {
    /* Send MSB of Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_MSB(MemAddress);
 800467c:	893b      	ldrh	r3, [r7, #8]
 800467e:	0a1b      	lsrs	r3, r3, #8
 8004680:	b29b      	uxth	r3, r3
 8004682:	b2da      	uxtb	r2, r3
 8004684:	68fb      	ldr	r3, [r7, #12]
 8004686:	681b      	ldr	r3, [r3, #0]
 8004688:	611a      	str	r2, [r3, #16]

    /* Wait until TXE flag is set */
    if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 800468a:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 800468c:	6a39      	ldr	r1, [r7, #32]
 800468e:	68f8      	ldr	r0, [r7, #12]
 8004690:	f000 f982 	bl	8004998 <I2C_WaitOnTXEFlagUntilTimeout>
 8004694:	4603      	mov	r3, r0
 8004696:	2b00      	cmp	r3, #0
 8004698:	d00d      	beq.n	80046b6 <I2C_RequestMemoryRead+0x122>
    {
      if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 800469a:	68fb      	ldr	r3, [r7, #12]
 800469c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800469e:	2b04      	cmp	r3, #4
 80046a0:	d107      	bne.n	80046b2 <I2C_RequestMemoryRead+0x11e>
      {
        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80046a2:	68fb      	ldr	r3, [r7, #12]
 80046a4:	681b      	ldr	r3, [r3, #0]
 80046a6:	681a      	ldr	r2, [r3, #0]
 80046a8:	68fb      	ldr	r3, [r7, #12]
 80046aa:	681b      	ldr	r3, [r3, #0]
 80046ac:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 80046b0:	601a      	str	r2, [r3, #0]
      }
      return HAL_ERROR;
 80046b2:	2301      	movs	r3, #1
 80046b4:	e050      	b.n	8004758 <I2C_RequestMemoryRead+0x1c4>
    }

    /* Send LSB of Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(MemAddress);
 80046b6:	893b      	ldrh	r3, [r7, #8]
 80046b8:	b2da      	uxtb	r2, r3
 80046ba:	68fb      	ldr	r3, [r7, #12]
 80046bc:	681b      	ldr	r3, [r3, #0]
 80046be:	611a      	str	r2, [r3, #16]
  }

  /* Wait until TXE flag is set */
  if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 80046c0:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 80046c2:	6a39      	ldr	r1, [r7, #32]
 80046c4:	68f8      	ldr	r0, [r7, #12]
 80046c6:	f000 f967 	bl	8004998 <I2C_WaitOnTXEFlagUntilTimeout>
 80046ca:	4603      	mov	r3, r0
 80046cc:	2b00      	cmp	r3, #0
 80046ce:	d00d      	beq.n	80046ec <I2C_RequestMemoryRead+0x158>
  {
    if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 80046d0:	68fb      	ldr	r3, [r7, #12]
 80046d2:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80046d4:	2b04      	cmp	r3, #4
 80046d6:	d107      	bne.n	80046e8 <I2C_RequestMemoryRead+0x154>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80046d8:	68fb      	ldr	r3, [r7, #12]
 80046da:	681b      	ldr	r3, [r3, #0]
 80046dc:	681a      	ldr	r2, [r3, #0]
 80046de:	68fb      	ldr	r3, [r7, #12]
 80046e0:	681b      	ldr	r3, [r3, #0]
 80046e2:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 80046e6:	601a      	str	r2, [r3, #0]
    }
    return HAL_ERROR;
 80046e8:	2301      	movs	r3, #1
 80046ea:	e035      	b.n	8004758 <I2C_RequestMemoryRead+0x1c4>
  }

  /* Generate Restart */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 80046ec:	68fb      	ldr	r3, [r7, #12]
 80046ee:	681b      	ldr	r3, [r3, #0]
 80046f0:	681a      	ldr	r2, [r3, #0]
 80046f2:	68fb      	ldr	r3, [r7, #12]
 80046f4:	681b      	ldr	r3, [r3, #0]
 80046f6:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 80046fa:	601a      	str	r2, [r3, #0]

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 80046fc:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80046fe:	9300      	str	r3, [sp, #0]
 8004700:	6a3b      	ldr	r3, [r7, #32]
 8004702:	2200      	movs	r2, #0
 8004704:	f04f 1101 	mov.w	r1, #65537	@ 0x10001
 8004708:	68f8      	ldr	r0, [r7, #12]
 800470a:	f000 f82b 	bl	8004764 <I2C_WaitOnFlagUntilTimeout>
 800470e:	4603      	mov	r3, r0
 8004710:	2b00      	cmp	r3, #0
 8004712:	d00d      	beq.n	8004730 <I2C_RequestMemoryRead+0x19c>
  {
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 8004714:	68fb      	ldr	r3, [r7, #12]
 8004716:	681b      	ldr	r3, [r3, #0]
 8004718:	681b      	ldr	r3, [r3, #0]
 800471a:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800471e:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8004722:	d103      	bne.n	800472c <I2C_RequestMemoryRead+0x198>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 8004724:	68fb      	ldr	r3, [r7, #12]
 8004726:	f44f 7200 	mov.w	r2, #512	@ 0x200
 800472a:	641a      	str	r2, [r3, #64]	@ 0x40
    }
    return HAL_TIMEOUT;
 800472c:	2303      	movs	r3, #3
 800472e:	e013      	b.n	8004758 <I2C_RequestMemoryRead+0x1c4>
  }

  /* Send slave address */
  hi2c->Instance->DR = I2C_7BIT_ADD_READ(DevAddress);
 8004730:	897b      	ldrh	r3, [r7, #10]
 8004732:	b2db      	uxtb	r3, r3
 8004734:	f043 0301 	orr.w	r3, r3, #1
 8004738:	b2da      	uxtb	r2, r3
 800473a:	68fb      	ldr	r3, [r7, #12]
 800473c:	681b      	ldr	r3, [r3, #0]
 800473e:	611a      	str	r2, [r3, #16]

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 8004740:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004742:	6a3a      	ldr	r2, [r7, #32]
 8004744:	4906      	ldr	r1, [pc, #24]	@ (8004760 <I2C_RequestMemoryRead+0x1cc>)
 8004746:	68f8      	ldr	r0, [r7, #12]
 8004748:	f000 f886 	bl	8004858 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 800474c:	4603      	mov	r3, r0
 800474e:	2b00      	cmp	r3, #0
 8004750:	d001      	beq.n	8004756 <I2C_RequestMemoryRead+0x1c2>
  {
    return HAL_ERROR;
 8004752:	2301      	movs	r3, #1
 8004754:	e000      	b.n	8004758 <I2C_RequestMemoryRead+0x1c4>
  }

  return HAL_OK;
 8004756:	2300      	movs	r3, #0
}
 8004758:	4618      	mov	r0, r3
 800475a:	3718      	adds	r7, #24
 800475c:	46bd      	mov	sp, r7
 800475e:	bd80      	pop	{r7, pc}
 8004760:	00010002 	.word	0x00010002

08004764 <I2C_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, FlagStatus Status, uint32_t Timeout, uint32_t Tickstart)
{
 8004764:	b580      	push	{r7, lr}
 8004766:	b084      	sub	sp, #16
 8004768:	af00      	add	r7, sp, #0
 800476a:	60f8      	str	r0, [r7, #12]
 800476c:	60b9      	str	r1, [r7, #8]
 800476e:	603b      	str	r3, [r7, #0]
 8004770:	4613      	mov	r3, r2
 8004772:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8004774:	e048      	b.n	8004808 <I2C_WaitOnFlagUntilTimeout+0xa4>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8004776:	683b      	ldr	r3, [r7, #0]
 8004778:	f1b3 3fff 	cmp.w	r3, #4294967295
 800477c:	d044      	beq.n	8004808 <I2C_WaitOnFlagUntilTimeout+0xa4>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800477e:	f7fe fd79 	bl	8003274 <HAL_GetTick>
 8004782:	4602      	mov	r2, r0
 8004784:	69bb      	ldr	r3, [r7, #24]
 8004786:	1ad3      	subs	r3, r2, r3
 8004788:	683a      	ldr	r2, [r7, #0]
 800478a:	429a      	cmp	r2, r3
 800478c:	d302      	bcc.n	8004794 <I2C_WaitOnFlagUntilTimeout+0x30>
 800478e:	683b      	ldr	r3, [r7, #0]
 8004790:	2b00      	cmp	r3, #0
 8004792:	d139      	bne.n	8004808 <I2C_WaitOnFlagUntilTimeout+0xa4>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, Flag) == Status))
 8004794:	68bb      	ldr	r3, [r7, #8]
 8004796:	0c1b      	lsrs	r3, r3, #16
 8004798:	b2db      	uxtb	r3, r3
 800479a:	2b01      	cmp	r3, #1
 800479c:	d10d      	bne.n	80047ba <I2C_WaitOnFlagUntilTimeout+0x56>
 800479e:	68fb      	ldr	r3, [r7, #12]
 80047a0:	681b      	ldr	r3, [r3, #0]
 80047a2:	695b      	ldr	r3, [r3, #20]
 80047a4:	43da      	mvns	r2, r3
 80047a6:	68bb      	ldr	r3, [r7, #8]
 80047a8:	4013      	ands	r3, r2
 80047aa:	b29b      	uxth	r3, r3
 80047ac:	2b00      	cmp	r3, #0
 80047ae:	bf0c      	ite	eq
 80047b0:	2301      	moveq	r3, #1
 80047b2:	2300      	movne	r3, #0
 80047b4:	b2db      	uxtb	r3, r3
 80047b6:	461a      	mov	r2, r3
 80047b8:	e00c      	b.n	80047d4 <I2C_WaitOnFlagUntilTimeout+0x70>
 80047ba:	68fb      	ldr	r3, [r7, #12]
 80047bc:	681b      	ldr	r3, [r3, #0]
 80047be:	699b      	ldr	r3, [r3, #24]
 80047c0:	43da      	mvns	r2, r3
 80047c2:	68bb      	ldr	r3, [r7, #8]
 80047c4:	4013      	ands	r3, r2
 80047c6:	b29b      	uxth	r3, r3
 80047c8:	2b00      	cmp	r3, #0
 80047ca:	bf0c      	ite	eq
 80047cc:	2301      	moveq	r3, #1
 80047ce:	2300      	movne	r3, #0
 80047d0:	b2db      	uxtb	r3, r3
 80047d2:	461a      	mov	r2, r3
 80047d4:	79fb      	ldrb	r3, [r7, #7]
 80047d6:	429a      	cmp	r2, r3
 80047d8:	d116      	bne.n	8004808 <I2C_WaitOnFlagUntilTimeout+0xa4>
        {
          hi2c->PreviousState     = I2C_STATE_NONE;
 80047da:	68fb      	ldr	r3, [r7, #12]
 80047dc:	2200      	movs	r2, #0
 80047de:	631a      	str	r2, [r3, #48]	@ 0x30
          hi2c->State             = HAL_I2C_STATE_READY;
 80047e0:	68fb      	ldr	r3, [r7, #12]
 80047e2:	2220      	movs	r2, #32
 80047e4:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
          hi2c->Mode              = HAL_I2C_MODE_NONE;
 80047e8:	68fb      	ldr	r3, [r7, #12]
 80047ea:	2200      	movs	r2, #0
 80047ec:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
          hi2c->ErrorCode         |= HAL_I2C_ERROR_TIMEOUT;
 80047f0:	68fb      	ldr	r3, [r7, #12]
 80047f2:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80047f4:	f043 0220 	orr.w	r2, r3, #32
 80047f8:	68fb      	ldr	r3, [r7, #12]
 80047fa:	641a      	str	r2, [r3, #64]	@ 0x40

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 80047fc:	68fb      	ldr	r3, [r7, #12]
 80047fe:	2200      	movs	r2, #0
 8004800:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

          return HAL_ERROR;
 8004804:	2301      	movs	r3, #1
 8004806:	e023      	b.n	8004850 <I2C_WaitOnFlagUntilTimeout+0xec>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8004808:	68bb      	ldr	r3, [r7, #8]
 800480a:	0c1b      	lsrs	r3, r3, #16
 800480c:	b2db      	uxtb	r3, r3
 800480e:	2b01      	cmp	r3, #1
 8004810:	d10d      	bne.n	800482e <I2C_WaitOnFlagUntilTimeout+0xca>
 8004812:	68fb      	ldr	r3, [r7, #12]
 8004814:	681b      	ldr	r3, [r3, #0]
 8004816:	695b      	ldr	r3, [r3, #20]
 8004818:	43da      	mvns	r2, r3
 800481a:	68bb      	ldr	r3, [r7, #8]
 800481c:	4013      	ands	r3, r2
 800481e:	b29b      	uxth	r3, r3
 8004820:	2b00      	cmp	r3, #0
 8004822:	bf0c      	ite	eq
 8004824:	2301      	moveq	r3, #1
 8004826:	2300      	movne	r3, #0
 8004828:	b2db      	uxtb	r3, r3
 800482a:	461a      	mov	r2, r3
 800482c:	e00c      	b.n	8004848 <I2C_WaitOnFlagUntilTimeout+0xe4>
 800482e:	68fb      	ldr	r3, [r7, #12]
 8004830:	681b      	ldr	r3, [r3, #0]
 8004832:	699b      	ldr	r3, [r3, #24]
 8004834:	43da      	mvns	r2, r3
 8004836:	68bb      	ldr	r3, [r7, #8]
 8004838:	4013      	ands	r3, r2
 800483a:	b29b      	uxth	r3, r3
 800483c:	2b00      	cmp	r3, #0
 800483e:	bf0c      	ite	eq
 8004840:	2301      	moveq	r3, #1
 8004842:	2300      	movne	r3, #0
 8004844:	b2db      	uxtb	r3, r3
 8004846:	461a      	mov	r2, r3
 8004848:	79fb      	ldrb	r3, [r7, #7]
 800484a:	429a      	cmp	r2, r3
 800484c:	d093      	beq.n	8004776 <I2C_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 800484e:	2300      	movs	r3, #0
}
 8004850:	4618      	mov	r0, r3
 8004852:	3710      	adds	r7, #16
 8004854:	46bd      	mov	sp, r7
 8004856:	bd80      	pop	{r7, pc}

08004858 <I2C_WaitOnMasterAddressFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnMasterAddressFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, uint32_t Timeout, uint32_t Tickstart)
{
 8004858:	b580      	push	{r7, lr}
 800485a:	b084      	sub	sp, #16
 800485c:	af00      	add	r7, sp, #0
 800485e:	60f8      	str	r0, [r7, #12]
 8004860:	60b9      	str	r1, [r7, #8]
 8004862:	607a      	str	r2, [r7, #4]
 8004864:	603b      	str	r3, [r7, #0]
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 8004866:	e071      	b.n	800494c <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf4>
  {
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 8004868:	68fb      	ldr	r3, [r7, #12]
 800486a:	681b      	ldr	r3, [r3, #0]
 800486c:	695b      	ldr	r3, [r3, #20]
 800486e:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8004872:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8004876:	d123      	bne.n	80048c0 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x68>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8004878:	68fb      	ldr	r3, [r7, #12]
 800487a:	681b      	ldr	r3, [r3, #0]
 800487c:	681a      	ldr	r2, [r3, #0]
 800487e:	68fb      	ldr	r3, [r7, #12]
 8004880:	681b      	ldr	r3, [r3, #0]
 8004882:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8004886:	601a      	str	r2, [r3, #0]

      /* Clear AF Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8004888:	68fb      	ldr	r3, [r7, #12]
 800488a:	681b      	ldr	r3, [r3, #0]
 800488c:	f46f 6280 	mvn.w	r2, #1024	@ 0x400
 8004890:	615a      	str	r2, [r3, #20]

      hi2c->PreviousState       = I2C_STATE_NONE;
 8004892:	68fb      	ldr	r3, [r7, #12]
 8004894:	2200      	movs	r2, #0
 8004896:	631a      	str	r2, [r3, #48]	@ 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 8004898:	68fb      	ldr	r3, [r7, #12]
 800489a:	2220      	movs	r2, #32
 800489c:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 80048a0:	68fb      	ldr	r3, [r7, #12]
 80048a2:	2200      	movs	r2, #0
 80048a4:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 80048a8:	68fb      	ldr	r3, [r7, #12]
 80048aa:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80048ac:	f043 0204 	orr.w	r2, r3, #4
 80048b0:	68fb      	ldr	r3, [r7, #12]
 80048b2:	641a      	str	r2, [r3, #64]	@ 0x40

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 80048b4:	68fb      	ldr	r3, [r7, #12]
 80048b6:	2200      	movs	r2, #0
 80048b8:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

      return HAL_ERROR;
 80048bc:	2301      	movs	r3, #1
 80048be:	e067      	b.n	8004990 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x138>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 80048c0:	687b      	ldr	r3, [r7, #4]
 80048c2:	f1b3 3fff 	cmp.w	r3, #4294967295
 80048c6:	d041      	beq.n	800494c <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf4>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80048c8:	f7fe fcd4 	bl	8003274 <HAL_GetTick>
 80048cc:	4602      	mov	r2, r0
 80048ce:	683b      	ldr	r3, [r7, #0]
 80048d0:	1ad3      	subs	r3, r2, r3
 80048d2:	687a      	ldr	r2, [r7, #4]
 80048d4:	429a      	cmp	r2, r3
 80048d6:	d302      	bcc.n	80048de <I2C_WaitOnMasterAddressFlagUntilTimeout+0x86>
 80048d8:	687b      	ldr	r3, [r7, #4]
 80048da:	2b00      	cmp	r3, #0
 80048dc:	d136      	bne.n	800494c <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf4>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET))
 80048de:	68bb      	ldr	r3, [r7, #8]
 80048e0:	0c1b      	lsrs	r3, r3, #16
 80048e2:	b2db      	uxtb	r3, r3
 80048e4:	2b01      	cmp	r3, #1
 80048e6:	d10c      	bne.n	8004902 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xaa>
 80048e8:	68fb      	ldr	r3, [r7, #12]
 80048ea:	681b      	ldr	r3, [r3, #0]
 80048ec:	695b      	ldr	r3, [r3, #20]
 80048ee:	43da      	mvns	r2, r3
 80048f0:	68bb      	ldr	r3, [r7, #8]
 80048f2:	4013      	ands	r3, r2
 80048f4:	b29b      	uxth	r3, r3
 80048f6:	2b00      	cmp	r3, #0
 80048f8:	bf14      	ite	ne
 80048fa:	2301      	movne	r3, #1
 80048fc:	2300      	moveq	r3, #0
 80048fe:	b2db      	uxtb	r3, r3
 8004900:	e00b      	b.n	800491a <I2C_WaitOnMasterAddressFlagUntilTimeout+0xc2>
 8004902:	68fb      	ldr	r3, [r7, #12]
 8004904:	681b      	ldr	r3, [r3, #0]
 8004906:	699b      	ldr	r3, [r3, #24]
 8004908:	43da      	mvns	r2, r3
 800490a:	68bb      	ldr	r3, [r7, #8]
 800490c:	4013      	ands	r3, r2
 800490e:	b29b      	uxth	r3, r3
 8004910:	2b00      	cmp	r3, #0
 8004912:	bf14      	ite	ne
 8004914:	2301      	movne	r3, #1
 8004916:	2300      	moveq	r3, #0
 8004918:	b2db      	uxtb	r3, r3
 800491a:	2b00      	cmp	r3, #0
 800491c:	d016      	beq.n	800494c <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf4>
        {
          hi2c->PreviousState       = I2C_STATE_NONE;
 800491e:	68fb      	ldr	r3, [r7, #12]
 8004920:	2200      	movs	r2, #0
 8004922:	631a      	str	r2, [r3, #48]	@ 0x30
          hi2c->State               = HAL_I2C_STATE_READY;
 8004924:	68fb      	ldr	r3, [r7, #12]
 8004926:	2220      	movs	r2, #32
 8004928:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
          hi2c->Mode                = HAL_I2C_MODE_NONE;
 800492c:	68fb      	ldr	r3, [r7, #12]
 800492e:	2200      	movs	r2, #0
 8004930:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
          hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8004934:	68fb      	ldr	r3, [r7, #12]
 8004936:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004938:	f043 0220 	orr.w	r2, r3, #32
 800493c:	68fb      	ldr	r3, [r7, #12]
 800493e:	641a      	str	r2, [r3, #64]	@ 0x40

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 8004940:	68fb      	ldr	r3, [r7, #12]
 8004942:	2200      	movs	r2, #0
 8004944:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

          return HAL_ERROR;
 8004948:	2301      	movs	r3, #1
 800494a:	e021      	b.n	8004990 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x138>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 800494c:	68bb      	ldr	r3, [r7, #8]
 800494e:	0c1b      	lsrs	r3, r3, #16
 8004950:	b2db      	uxtb	r3, r3
 8004952:	2b01      	cmp	r3, #1
 8004954:	d10c      	bne.n	8004970 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x118>
 8004956:	68fb      	ldr	r3, [r7, #12]
 8004958:	681b      	ldr	r3, [r3, #0]
 800495a:	695b      	ldr	r3, [r3, #20]
 800495c:	43da      	mvns	r2, r3
 800495e:	68bb      	ldr	r3, [r7, #8]
 8004960:	4013      	ands	r3, r2
 8004962:	b29b      	uxth	r3, r3
 8004964:	2b00      	cmp	r3, #0
 8004966:	bf14      	ite	ne
 8004968:	2301      	movne	r3, #1
 800496a:	2300      	moveq	r3, #0
 800496c:	b2db      	uxtb	r3, r3
 800496e:	e00b      	b.n	8004988 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x130>
 8004970:	68fb      	ldr	r3, [r7, #12]
 8004972:	681b      	ldr	r3, [r3, #0]
 8004974:	699b      	ldr	r3, [r3, #24]
 8004976:	43da      	mvns	r2, r3
 8004978:	68bb      	ldr	r3, [r7, #8]
 800497a:	4013      	ands	r3, r2
 800497c:	b29b      	uxth	r3, r3
 800497e:	2b00      	cmp	r3, #0
 8004980:	bf14      	ite	ne
 8004982:	2301      	movne	r3, #1
 8004984:	2300      	moveq	r3, #0
 8004986:	b2db      	uxtb	r3, r3
 8004988:	2b00      	cmp	r3, #0
 800498a:	f47f af6d 	bne.w	8004868 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x10>
        }
      }
    }
  }
  return HAL_OK;
 800498e:	2300      	movs	r3, #0
}
 8004990:	4618      	mov	r0, r3
 8004992:	3710      	adds	r7, #16
 8004994:	46bd      	mov	sp, r7
 8004996:	bd80      	pop	{r7, pc}

08004998 <I2C_WaitOnTXEFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnTXEFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8004998:	b580      	push	{r7, lr}
 800499a:	b084      	sub	sp, #16
 800499c:	af00      	add	r7, sp, #0
 800499e:	60f8      	str	r0, [r7, #12]
 80049a0:	60b9      	str	r1, [r7, #8]
 80049a2:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 80049a4:	e034      	b.n	8004a10 <I2C_WaitOnTXEFlagUntilTimeout+0x78>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c) != HAL_OK)
 80049a6:	68f8      	ldr	r0, [r7, #12]
 80049a8:	f000 f8e3 	bl	8004b72 <I2C_IsAcknowledgeFailed>
 80049ac:	4603      	mov	r3, r0
 80049ae:	2b00      	cmp	r3, #0
 80049b0:	d001      	beq.n	80049b6 <I2C_WaitOnTXEFlagUntilTimeout+0x1e>
    {
      return HAL_ERROR;
 80049b2:	2301      	movs	r3, #1
 80049b4:	e034      	b.n	8004a20 <I2C_WaitOnTXEFlagUntilTimeout+0x88>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 80049b6:	68bb      	ldr	r3, [r7, #8]
 80049b8:	f1b3 3fff 	cmp.w	r3, #4294967295
 80049bc:	d028      	beq.n	8004a10 <I2C_WaitOnTXEFlagUntilTimeout+0x78>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80049be:	f7fe fc59 	bl	8003274 <HAL_GetTick>
 80049c2:	4602      	mov	r2, r0
 80049c4:	687b      	ldr	r3, [r7, #4]
 80049c6:	1ad3      	subs	r3, r2, r3
 80049c8:	68ba      	ldr	r2, [r7, #8]
 80049ca:	429a      	cmp	r2, r3
 80049cc:	d302      	bcc.n	80049d4 <I2C_WaitOnTXEFlagUntilTimeout+0x3c>
 80049ce:	68bb      	ldr	r3, [r7, #8]
 80049d0:	2b00      	cmp	r3, #0
 80049d2:	d11d      	bne.n	8004a10 <I2C_WaitOnTXEFlagUntilTimeout+0x78>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET))
 80049d4:	68fb      	ldr	r3, [r7, #12]
 80049d6:	681b      	ldr	r3, [r3, #0]
 80049d8:	695b      	ldr	r3, [r3, #20]
 80049da:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 80049de:	2b80      	cmp	r3, #128	@ 0x80
 80049e0:	d016      	beq.n	8004a10 <I2C_WaitOnTXEFlagUntilTimeout+0x78>
        {
          hi2c->PreviousState       = I2C_STATE_NONE;
 80049e2:	68fb      	ldr	r3, [r7, #12]
 80049e4:	2200      	movs	r2, #0
 80049e6:	631a      	str	r2, [r3, #48]	@ 0x30
          hi2c->State               = HAL_I2C_STATE_READY;
 80049e8:	68fb      	ldr	r3, [r7, #12]
 80049ea:	2220      	movs	r2, #32
 80049ec:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
          hi2c->Mode                = HAL_I2C_MODE_NONE;
 80049f0:	68fb      	ldr	r3, [r7, #12]
 80049f2:	2200      	movs	r2, #0
 80049f4:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
          hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 80049f8:	68fb      	ldr	r3, [r7, #12]
 80049fa:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80049fc:	f043 0220 	orr.w	r2, r3, #32
 8004a00:	68fb      	ldr	r3, [r7, #12]
 8004a02:	641a      	str	r2, [r3, #64]	@ 0x40

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 8004a04:	68fb      	ldr	r3, [r7, #12]
 8004a06:	2200      	movs	r2, #0
 8004a08:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

          return HAL_ERROR;
 8004a0c:	2301      	movs	r3, #1
 8004a0e:	e007      	b.n	8004a20 <I2C_WaitOnTXEFlagUntilTimeout+0x88>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 8004a10:	68fb      	ldr	r3, [r7, #12]
 8004a12:	681b      	ldr	r3, [r3, #0]
 8004a14:	695b      	ldr	r3, [r3, #20]
 8004a16:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8004a1a:	2b80      	cmp	r3, #128	@ 0x80
 8004a1c:	d1c3      	bne.n	80049a6 <I2C_WaitOnTXEFlagUntilTimeout+0xe>
        }
      }
    }
  }
  return HAL_OK;
 8004a1e:	2300      	movs	r3, #0
}
 8004a20:	4618      	mov	r0, r3
 8004a22:	3710      	adds	r7, #16
 8004a24:	46bd      	mov	sp, r7
 8004a26:	bd80      	pop	{r7, pc}

08004a28 <I2C_WaitOnBTFFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnBTFFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8004a28:	b580      	push	{r7, lr}
 8004a2a:	b084      	sub	sp, #16
 8004a2c:	af00      	add	r7, sp, #0
 8004a2e:	60f8      	str	r0, [r7, #12]
 8004a30:	60b9      	str	r1, [r7, #8]
 8004a32:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET)
 8004a34:	e034      	b.n	8004aa0 <I2C_WaitOnBTFFlagUntilTimeout+0x78>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c) != HAL_OK)
 8004a36:	68f8      	ldr	r0, [r7, #12]
 8004a38:	f000 f89b 	bl	8004b72 <I2C_IsAcknowledgeFailed>
 8004a3c:	4603      	mov	r3, r0
 8004a3e:	2b00      	cmp	r3, #0
 8004a40:	d001      	beq.n	8004a46 <I2C_WaitOnBTFFlagUntilTimeout+0x1e>
    {
      return HAL_ERROR;
 8004a42:	2301      	movs	r3, #1
 8004a44:	e034      	b.n	8004ab0 <I2C_WaitOnBTFFlagUntilTimeout+0x88>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8004a46:	68bb      	ldr	r3, [r7, #8]
 8004a48:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004a4c:	d028      	beq.n	8004aa0 <I2C_WaitOnBTFFlagUntilTimeout+0x78>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8004a4e:	f7fe fc11 	bl	8003274 <HAL_GetTick>
 8004a52:	4602      	mov	r2, r0
 8004a54:	687b      	ldr	r3, [r7, #4]
 8004a56:	1ad3      	subs	r3, r2, r3
 8004a58:	68ba      	ldr	r2, [r7, #8]
 8004a5a:	429a      	cmp	r2, r3
 8004a5c:	d302      	bcc.n	8004a64 <I2C_WaitOnBTFFlagUntilTimeout+0x3c>
 8004a5e:	68bb      	ldr	r3, [r7, #8]
 8004a60:	2b00      	cmp	r3, #0
 8004a62:	d11d      	bne.n	8004aa0 <I2C_WaitOnBTFFlagUntilTimeout+0x78>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET))
 8004a64:	68fb      	ldr	r3, [r7, #12]
 8004a66:	681b      	ldr	r3, [r3, #0]
 8004a68:	695b      	ldr	r3, [r3, #20]
 8004a6a:	f003 0304 	and.w	r3, r3, #4
 8004a6e:	2b04      	cmp	r3, #4
 8004a70:	d016      	beq.n	8004aa0 <I2C_WaitOnBTFFlagUntilTimeout+0x78>
        {
          hi2c->PreviousState       = I2C_STATE_NONE;
 8004a72:	68fb      	ldr	r3, [r7, #12]
 8004a74:	2200      	movs	r2, #0
 8004a76:	631a      	str	r2, [r3, #48]	@ 0x30
          hi2c->State               = HAL_I2C_STATE_READY;
 8004a78:	68fb      	ldr	r3, [r7, #12]
 8004a7a:	2220      	movs	r2, #32
 8004a7c:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
          hi2c->Mode                = HAL_I2C_MODE_NONE;
 8004a80:	68fb      	ldr	r3, [r7, #12]
 8004a82:	2200      	movs	r2, #0
 8004a84:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
          hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8004a88:	68fb      	ldr	r3, [r7, #12]
 8004a8a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004a8c:	f043 0220 	orr.w	r2, r3, #32
 8004a90:	68fb      	ldr	r3, [r7, #12]
 8004a92:	641a      	str	r2, [r3, #64]	@ 0x40

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 8004a94:	68fb      	ldr	r3, [r7, #12]
 8004a96:	2200      	movs	r2, #0
 8004a98:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

          return HAL_ERROR;
 8004a9c:	2301      	movs	r3, #1
 8004a9e:	e007      	b.n	8004ab0 <I2C_WaitOnBTFFlagUntilTimeout+0x88>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET)
 8004aa0:	68fb      	ldr	r3, [r7, #12]
 8004aa2:	681b      	ldr	r3, [r3, #0]
 8004aa4:	695b      	ldr	r3, [r3, #20]
 8004aa6:	f003 0304 	and.w	r3, r3, #4
 8004aaa:	2b04      	cmp	r3, #4
 8004aac:	d1c3      	bne.n	8004a36 <I2C_WaitOnBTFFlagUntilTimeout+0xe>
        }
      }
    }
  }
  return HAL_OK;
 8004aae:	2300      	movs	r3, #0
}
 8004ab0:	4618      	mov	r0, r3
 8004ab2:	3710      	adds	r7, #16
 8004ab4:	46bd      	mov	sp, r7
 8004ab6:	bd80      	pop	{r7, pc}

08004ab8 <I2C_WaitOnRXNEFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnRXNEFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8004ab8:	b580      	push	{r7, lr}
 8004aba:	b084      	sub	sp, #16
 8004abc:	af00      	add	r7, sp, #0
 8004abe:	60f8      	str	r0, [r7, #12]
 8004ac0:	60b9      	str	r1, [r7, #8]
 8004ac2:	607a      	str	r2, [r7, #4]

  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET)
 8004ac4:	e049      	b.n	8004b5a <I2C_WaitOnRXNEFlagUntilTimeout+0xa2>
  {
    /* Check if a STOPF is detected */
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == SET)
 8004ac6:	68fb      	ldr	r3, [r7, #12]
 8004ac8:	681b      	ldr	r3, [r3, #0]
 8004aca:	695b      	ldr	r3, [r3, #20]
 8004acc:	f003 0310 	and.w	r3, r3, #16
 8004ad0:	2b10      	cmp	r3, #16
 8004ad2:	d119      	bne.n	8004b08 <I2C_WaitOnRXNEFlagUntilTimeout+0x50>
    {
      /* Clear STOP Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8004ad4:	68fb      	ldr	r3, [r7, #12]
 8004ad6:	681b      	ldr	r3, [r3, #0]
 8004ad8:	f06f 0210 	mvn.w	r2, #16
 8004adc:	615a      	str	r2, [r3, #20]

      hi2c->PreviousState       = I2C_STATE_NONE;
 8004ade:	68fb      	ldr	r3, [r7, #12]
 8004ae0:	2200      	movs	r2, #0
 8004ae2:	631a      	str	r2, [r3, #48]	@ 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 8004ae4:	68fb      	ldr	r3, [r7, #12]
 8004ae6:	2220      	movs	r2, #32
 8004ae8:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 8004aec:	68fb      	ldr	r3, [r7, #12]
 8004aee:	2200      	movs	r2, #0
 8004af0:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_NONE;
 8004af4:	68fb      	ldr	r3, [r7, #12]
 8004af6:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 8004af8:	68fb      	ldr	r3, [r7, #12]
 8004afa:	641a      	str	r2, [r3, #64]	@ 0x40

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8004afc:	68fb      	ldr	r3, [r7, #12]
 8004afe:	2200      	movs	r2, #0
 8004b00:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

      return HAL_ERROR;
 8004b04:	2301      	movs	r3, #1
 8004b06:	e030      	b.n	8004b6a <I2C_WaitOnRXNEFlagUntilTimeout+0xb2>
    }

    /* Check for the Timeout */
    if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8004b08:	f7fe fbb4 	bl	8003274 <HAL_GetTick>
 8004b0c:	4602      	mov	r2, r0
 8004b0e:	687b      	ldr	r3, [r7, #4]
 8004b10:	1ad3      	subs	r3, r2, r3
 8004b12:	68ba      	ldr	r2, [r7, #8]
 8004b14:	429a      	cmp	r2, r3
 8004b16:	d302      	bcc.n	8004b1e <I2C_WaitOnRXNEFlagUntilTimeout+0x66>
 8004b18:	68bb      	ldr	r3, [r7, #8]
 8004b1a:	2b00      	cmp	r3, #0
 8004b1c:	d11d      	bne.n	8004b5a <I2C_WaitOnRXNEFlagUntilTimeout+0xa2>
    {
      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET))
 8004b1e:	68fb      	ldr	r3, [r7, #12]
 8004b20:	681b      	ldr	r3, [r3, #0]
 8004b22:	695b      	ldr	r3, [r3, #20]
 8004b24:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8004b28:	2b40      	cmp	r3, #64	@ 0x40
 8004b2a:	d016      	beq.n	8004b5a <I2C_WaitOnRXNEFlagUntilTimeout+0xa2>
      {
        hi2c->PreviousState       = I2C_STATE_NONE;
 8004b2c:	68fb      	ldr	r3, [r7, #12]
 8004b2e:	2200      	movs	r2, #0
 8004b30:	631a      	str	r2, [r3, #48]	@ 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 8004b32:	68fb      	ldr	r3, [r7, #12]
 8004b34:	2220      	movs	r2, #32
 8004b36:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 8004b3a:	68fb      	ldr	r3, [r7, #12]
 8004b3c:	2200      	movs	r2, #0
 8004b3e:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8004b42:	68fb      	ldr	r3, [r7, #12]
 8004b44:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004b46:	f043 0220 	orr.w	r2, r3, #32
 8004b4a:	68fb      	ldr	r3, [r7, #12]
 8004b4c:	641a      	str	r2, [r3, #64]	@ 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8004b4e:	68fb      	ldr	r3, [r7, #12]
 8004b50:	2200      	movs	r2, #0
 8004b52:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

        return HAL_ERROR;
 8004b56:	2301      	movs	r3, #1
 8004b58:	e007      	b.n	8004b6a <I2C_WaitOnRXNEFlagUntilTimeout+0xb2>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET)
 8004b5a:	68fb      	ldr	r3, [r7, #12]
 8004b5c:	681b      	ldr	r3, [r3, #0]
 8004b5e:	695b      	ldr	r3, [r3, #20]
 8004b60:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8004b64:	2b40      	cmp	r3, #64	@ 0x40
 8004b66:	d1ae      	bne.n	8004ac6 <I2C_WaitOnRXNEFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
 8004b68:	2300      	movs	r3, #0
}
 8004b6a:	4618      	mov	r0, r3
 8004b6c:	3710      	adds	r7, #16
 8004b6e:	46bd      	mov	sp, r7
 8004b70:	bd80      	pop	{r7, pc}

08004b72 <I2C_IsAcknowledgeFailed>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_IsAcknowledgeFailed(I2C_HandleTypeDef *hi2c)
{
 8004b72:	b480      	push	{r7}
 8004b74:	b083      	sub	sp, #12
 8004b76:	af00      	add	r7, sp, #0
 8004b78:	6078      	str	r0, [r7, #4]
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 8004b7a:	687b      	ldr	r3, [r7, #4]
 8004b7c:	681b      	ldr	r3, [r3, #0]
 8004b7e:	695b      	ldr	r3, [r3, #20]
 8004b80:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8004b84:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8004b88:	d11b      	bne.n	8004bc2 <I2C_IsAcknowledgeFailed+0x50>
  {
    /* Clear NACKF Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8004b8a:	687b      	ldr	r3, [r7, #4]
 8004b8c:	681b      	ldr	r3, [r3, #0]
 8004b8e:	f46f 6280 	mvn.w	r2, #1024	@ 0x400
 8004b92:	615a      	str	r2, [r3, #20]

    hi2c->PreviousState       = I2C_STATE_NONE;
 8004b94:	687b      	ldr	r3, [r7, #4]
 8004b96:	2200      	movs	r2, #0
 8004b98:	631a      	str	r2, [r3, #48]	@ 0x30
    hi2c->State               = HAL_I2C_STATE_READY;
 8004b9a:	687b      	ldr	r3, [r7, #4]
 8004b9c:	2220      	movs	r2, #32
 8004b9e:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
    hi2c->Mode                = HAL_I2C_MODE_NONE;
 8004ba2:	687b      	ldr	r3, [r7, #4]
 8004ba4:	2200      	movs	r2, #0
 8004ba6:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
    hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 8004baa:	687b      	ldr	r3, [r7, #4]
 8004bac:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004bae:	f043 0204 	orr.w	r2, r3, #4
 8004bb2:	687b      	ldr	r3, [r7, #4]
 8004bb4:	641a      	str	r2, [r3, #64]	@ 0x40

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8004bb6:	687b      	ldr	r3, [r7, #4]
 8004bb8:	2200      	movs	r2, #0
 8004bba:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    return HAL_ERROR;
 8004bbe:	2301      	movs	r3, #1
 8004bc0:	e000      	b.n	8004bc4 <I2C_IsAcknowledgeFailed+0x52>
  }
  return HAL_OK;
 8004bc2:	2300      	movs	r3, #0
}
 8004bc4:	4618      	mov	r0, r3
 8004bc6:	370c      	adds	r7, #12
 8004bc8:	46bd      	mov	sp, r7
 8004bca:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004bce:	4770      	bx	lr

08004bd0 <HAL_I2CEx_ConfigAnalogFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  AnalogFilter new state of the Analog filter.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigAnalogFilter(I2C_HandleTypeDef *hi2c, uint32_t AnalogFilter)
{
 8004bd0:	b480      	push	{r7}
 8004bd2:	b083      	sub	sp, #12
 8004bd4:	af00      	add	r7, sp, #0
 8004bd6:	6078      	str	r0, [r7, #4]
 8004bd8:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_ANALOG_FILTER(AnalogFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8004bda:	687b      	ldr	r3, [r7, #4]
 8004bdc:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8004be0:	b2db      	uxtb	r3, r3
 8004be2:	2b20      	cmp	r3, #32
 8004be4:	d129      	bne.n	8004c3a <HAL_I2CEx_ConfigAnalogFilter+0x6a>
  {
    hi2c->State = HAL_I2C_STATE_BUSY;
 8004be6:	687b      	ldr	r3, [r7, #4]
 8004be8:	2224      	movs	r2, #36	@ 0x24
 8004bea:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 8004bee:	687b      	ldr	r3, [r7, #4]
 8004bf0:	681b      	ldr	r3, [r3, #0]
 8004bf2:	681a      	ldr	r2, [r3, #0]
 8004bf4:	687b      	ldr	r3, [r7, #4]
 8004bf6:	681b      	ldr	r3, [r3, #0]
 8004bf8:	f022 0201 	bic.w	r2, r2, #1
 8004bfc:	601a      	str	r2, [r3, #0]

    /* Reset I2Cx ANOFF bit */
    hi2c->Instance->FLTR &= ~(I2C_FLTR_ANOFF);
 8004bfe:	687b      	ldr	r3, [r7, #4]
 8004c00:	681b      	ldr	r3, [r3, #0]
 8004c02:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 8004c04:	687b      	ldr	r3, [r7, #4]
 8004c06:	681b      	ldr	r3, [r3, #0]
 8004c08:	f022 0210 	bic.w	r2, r2, #16
 8004c0c:	625a      	str	r2, [r3, #36]	@ 0x24

    /* Disable the analog filter */
    hi2c->Instance->FLTR |= AnalogFilter;
 8004c0e:	687b      	ldr	r3, [r7, #4]
 8004c10:	681b      	ldr	r3, [r3, #0]
 8004c12:	6a59      	ldr	r1, [r3, #36]	@ 0x24
 8004c14:	687b      	ldr	r3, [r7, #4]
 8004c16:	681b      	ldr	r3, [r3, #0]
 8004c18:	683a      	ldr	r2, [r7, #0]
 8004c1a:	430a      	orrs	r2, r1
 8004c1c:	625a      	str	r2, [r3, #36]	@ 0x24

    __HAL_I2C_ENABLE(hi2c);
 8004c1e:	687b      	ldr	r3, [r7, #4]
 8004c20:	681b      	ldr	r3, [r3, #0]
 8004c22:	681a      	ldr	r2, [r3, #0]
 8004c24:	687b      	ldr	r3, [r7, #4]
 8004c26:	681b      	ldr	r3, [r3, #0]
 8004c28:	f042 0201 	orr.w	r2, r2, #1
 8004c2c:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8004c2e:	687b      	ldr	r3, [r7, #4]
 8004c30:	2220      	movs	r2, #32
 8004c32:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

    return HAL_OK;
 8004c36:	2300      	movs	r3, #0
 8004c38:	e000      	b.n	8004c3c <HAL_I2CEx_ConfigAnalogFilter+0x6c>
  }
  else
  {
    return HAL_BUSY;
 8004c3a:	2302      	movs	r3, #2
  }
}
 8004c3c:	4618      	mov	r0, r3
 8004c3e:	370c      	adds	r7, #12
 8004c40:	46bd      	mov	sp, r7
 8004c42:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004c46:	4770      	bx	lr

08004c48 <HAL_I2CEx_ConfigDigitalFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  DigitalFilter Coefficient of digital noise filter between 0x00 and 0x0F.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigDigitalFilter(I2C_HandleTypeDef *hi2c, uint32_t DigitalFilter)
{
 8004c48:	b480      	push	{r7}
 8004c4a:	b085      	sub	sp, #20
 8004c4c:	af00      	add	r7, sp, #0
 8004c4e:	6078      	str	r0, [r7, #4]
 8004c50:	6039      	str	r1, [r7, #0]
  uint16_t tmpreg = 0;
 8004c52:	2300      	movs	r3, #0
 8004c54:	81fb      	strh	r3, [r7, #14]

  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_DIGITAL_FILTER(DigitalFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8004c56:	687b      	ldr	r3, [r7, #4]
 8004c58:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8004c5c:	b2db      	uxtb	r3, r3
 8004c5e:	2b20      	cmp	r3, #32
 8004c60:	d12a      	bne.n	8004cb8 <HAL_I2CEx_ConfigDigitalFilter+0x70>
  {
    hi2c->State = HAL_I2C_STATE_BUSY;
 8004c62:	687b      	ldr	r3, [r7, #4]
 8004c64:	2224      	movs	r2, #36	@ 0x24
 8004c66:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 8004c6a:	687b      	ldr	r3, [r7, #4]
 8004c6c:	681b      	ldr	r3, [r3, #0]
 8004c6e:	681a      	ldr	r2, [r3, #0]
 8004c70:	687b      	ldr	r3, [r7, #4]
 8004c72:	681b      	ldr	r3, [r3, #0]
 8004c74:	f022 0201 	bic.w	r2, r2, #1
 8004c78:	601a      	str	r2, [r3, #0]

    /* Get the old register value */
    tmpreg = hi2c->Instance->FLTR;
 8004c7a:	687b      	ldr	r3, [r7, #4]
 8004c7c:	681b      	ldr	r3, [r3, #0]
 8004c7e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004c80:	81fb      	strh	r3, [r7, #14]

    /* Reset I2Cx DNF bit [3:0] */
    tmpreg &= ~(I2C_FLTR_DNF);
 8004c82:	89fb      	ldrh	r3, [r7, #14]
 8004c84:	f023 030f 	bic.w	r3, r3, #15
 8004c88:	81fb      	strh	r3, [r7, #14]

    /* Set I2Cx DNF coefficient */
    tmpreg |= DigitalFilter;
 8004c8a:	683b      	ldr	r3, [r7, #0]
 8004c8c:	b29a      	uxth	r2, r3
 8004c8e:	89fb      	ldrh	r3, [r7, #14]
 8004c90:	4313      	orrs	r3, r2
 8004c92:	81fb      	strh	r3, [r7, #14]

    /* Store the new register value */
    hi2c->Instance->FLTR = tmpreg;
 8004c94:	687b      	ldr	r3, [r7, #4]
 8004c96:	681b      	ldr	r3, [r3, #0]
 8004c98:	89fa      	ldrh	r2, [r7, #14]
 8004c9a:	625a      	str	r2, [r3, #36]	@ 0x24

    __HAL_I2C_ENABLE(hi2c);
 8004c9c:	687b      	ldr	r3, [r7, #4]
 8004c9e:	681b      	ldr	r3, [r3, #0]
 8004ca0:	681a      	ldr	r2, [r3, #0]
 8004ca2:	687b      	ldr	r3, [r7, #4]
 8004ca4:	681b      	ldr	r3, [r3, #0]
 8004ca6:	f042 0201 	orr.w	r2, r2, #1
 8004caa:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8004cac:	687b      	ldr	r3, [r7, #4]
 8004cae:	2220      	movs	r2, #32
 8004cb0:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

    return HAL_OK;
 8004cb4:	2300      	movs	r3, #0
 8004cb6:	e000      	b.n	8004cba <HAL_I2CEx_ConfigDigitalFilter+0x72>
  }
  else
  {
    return HAL_BUSY;
 8004cb8:	2302      	movs	r3, #2
  }
}
 8004cba:	4618      	mov	r0, r3
 8004cbc:	3714      	adds	r7, #20
 8004cbe:	46bd      	mov	sp, r7
 8004cc0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004cc4:	4770      	bx	lr
	...

08004cc8 <HAL_LTDC_Init>:
  * @param  hltdc  pointer to a LTDC_HandleTypeDef structure that contains
  *                the configuration information for the LTDC.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_LTDC_Init(LTDC_HandleTypeDef *hltdc)
{
 8004cc8:	b580      	push	{r7, lr}
 8004cca:	b084      	sub	sp, #16
 8004ccc:	af00      	add	r7, sp, #0
 8004cce:	6078      	str	r0, [r7, #4]
  uint32_t tmp;
  uint32_t tmp1;

  /* Check the LTDC peripheral state */
  if (hltdc == NULL)
 8004cd0:	687b      	ldr	r3, [r7, #4]
 8004cd2:	2b00      	cmp	r3, #0
 8004cd4:	d101      	bne.n	8004cda <HAL_LTDC_Init+0x12>
  {
    return HAL_ERROR;
 8004cd6:	2301      	movs	r3, #1
 8004cd8:	e0bf      	b.n	8004e5a <HAL_LTDC_Init+0x192>
    }
    /* Init the low level hardware */
    hltdc->MspInitCallback(hltdc);
  }
#else
  if (hltdc->State == HAL_LTDC_STATE_RESET)
 8004cda:	687b      	ldr	r3, [r7, #4]
 8004cdc:	f893 30a1 	ldrb.w	r3, [r3, #161]	@ 0xa1
 8004ce0:	b2db      	uxtb	r3, r3
 8004ce2:	2b00      	cmp	r3, #0
 8004ce4:	d106      	bne.n	8004cf4 <HAL_LTDC_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hltdc->Lock = HAL_UNLOCKED;
 8004ce6:	687b      	ldr	r3, [r7, #4]
 8004ce8:	2200      	movs	r2, #0
 8004cea:	f883 20a0 	strb.w	r2, [r3, #160]	@ 0xa0
    /* Init the low level hardware */
    HAL_LTDC_MspInit(hltdc);
 8004cee:	6878      	ldr	r0, [r7, #4]
 8004cf0:	f7fd fbe6 	bl	80024c0 <HAL_LTDC_MspInit>
  }
#endif /* USE_HAL_LTDC_REGISTER_CALLBACKS */

  /* Change LTDC peripheral state */
  hltdc->State = HAL_LTDC_STATE_BUSY;
 8004cf4:	687b      	ldr	r3, [r7, #4]
 8004cf6:	2202      	movs	r2, #2
 8004cf8:	f883 20a1 	strb.w	r2, [r3, #161]	@ 0xa1

  /* Configure the HS, VS, DE and PC polarity */
  hltdc->Instance->GCR &= ~(LTDC_GCR_HSPOL | LTDC_GCR_VSPOL | LTDC_GCR_DEPOL | LTDC_GCR_PCPOL);
 8004cfc:	687b      	ldr	r3, [r7, #4]
 8004cfe:	681b      	ldr	r3, [r3, #0]
 8004d00:	699a      	ldr	r2, [r3, #24]
 8004d02:	687b      	ldr	r3, [r7, #4]
 8004d04:	681b      	ldr	r3, [r3, #0]
 8004d06:	f022 4270 	bic.w	r2, r2, #4026531840	@ 0xf0000000
 8004d0a:	619a      	str	r2, [r3, #24]
  hltdc->Instance->GCR |= (uint32_t)(hltdc->Init.HSPolarity | hltdc->Init.VSPolarity | \
 8004d0c:	687b      	ldr	r3, [r7, #4]
 8004d0e:	681b      	ldr	r3, [r3, #0]
 8004d10:	6999      	ldr	r1, [r3, #24]
 8004d12:	687b      	ldr	r3, [r7, #4]
 8004d14:	685a      	ldr	r2, [r3, #4]
 8004d16:	687b      	ldr	r3, [r7, #4]
 8004d18:	689b      	ldr	r3, [r3, #8]
 8004d1a:	431a      	orrs	r2, r3
                                     hltdc->Init.DEPolarity | hltdc->Init.PCPolarity);
 8004d1c:	687b      	ldr	r3, [r7, #4]
 8004d1e:	68db      	ldr	r3, [r3, #12]
  hltdc->Instance->GCR |= (uint32_t)(hltdc->Init.HSPolarity | hltdc->Init.VSPolarity | \
 8004d20:	431a      	orrs	r2, r3
                                     hltdc->Init.DEPolarity | hltdc->Init.PCPolarity);
 8004d22:	687b      	ldr	r3, [r7, #4]
 8004d24:	691b      	ldr	r3, [r3, #16]
 8004d26:	431a      	orrs	r2, r3
  hltdc->Instance->GCR |= (uint32_t)(hltdc->Init.HSPolarity | hltdc->Init.VSPolarity | \
 8004d28:	687b      	ldr	r3, [r7, #4]
 8004d2a:	681b      	ldr	r3, [r3, #0]
 8004d2c:	430a      	orrs	r2, r1
 8004d2e:	619a      	str	r2, [r3, #24]

  /* Set Synchronization size */
  hltdc->Instance->SSCR &= ~(LTDC_SSCR_VSH | LTDC_SSCR_HSW);
 8004d30:	687b      	ldr	r3, [r7, #4]
 8004d32:	681b      	ldr	r3, [r3, #0]
 8004d34:	6899      	ldr	r1, [r3, #8]
 8004d36:	687b      	ldr	r3, [r7, #4]
 8004d38:	681a      	ldr	r2, [r3, #0]
 8004d3a:	4b4a      	ldr	r3, [pc, #296]	@ (8004e64 <HAL_LTDC_Init+0x19c>)
 8004d3c:	400b      	ands	r3, r1
 8004d3e:	6093      	str	r3, [r2, #8]
  tmp = (hltdc->Init.HorizontalSync << 16U);
 8004d40:	687b      	ldr	r3, [r7, #4]
 8004d42:	695b      	ldr	r3, [r3, #20]
 8004d44:	041b      	lsls	r3, r3, #16
 8004d46:	60fb      	str	r3, [r7, #12]
  hltdc->Instance->SSCR |= (tmp | hltdc->Init.VerticalSync);
 8004d48:	687b      	ldr	r3, [r7, #4]
 8004d4a:	681b      	ldr	r3, [r3, #0]
 8004d4c:	6899      	ldr	r1, [r3, #8]
 8004d4e:	687b      	ldr	r3, [r7, #4]
 8004d50:	699a      	ldr	r2, [r3, #24]
 8004d52:	68fb      	ldr	r3, [r7, #12]
 8004d54:	431a      	orrs	r2, r3
 8004d56:	687b      	ldr	r3, [r7, #4]
 8004d58:	681b      	ldr	r3, [r3, #0]
 8004d5a:	430a      	orrs	r2, r1
 8004d5c:	609a      	str	r2, [r3, #8]

  /* Set Accumulated Back porch */
  hltdc->Instance->BPCR &= ~(LTDC_BPCR_AVBP | LTDC_BPCR_AHBP);
 8004d5e:	687b      	ldr	r3, [r7, #4]
 8004d60:	681b      	ldr	r3, [r3, #0]
 8004d62:	68d9      	ldr	r1, [r3, #12]
 8004d64:	687b      	ldr	r3, [r7, #4]
 8004d66:	681a      	ldr	r2, [r3, #0]
 8004d68:	4b3e      	ldr	r3, [pc, #248]	@ (8004e64 <HAL_LTDC_Init+0x19c>)
 8004d6a:	400b      	ands	r3, r1
 8004d6c:	60d3      	str	r3, [r2, #12]
  tmp = (hltdc->Init.AccumulatedHBP << 16U);
 8004d6e:	687b      	ldr	r3, [r7, #4]
 8004d70:	69db      	ldr	r3, [r3, #28]
 8004d72:	041b      	lsls	r3, r3, #16
 8004d74:	60fb      	str	r3, [r7, #12]
  hltdc->Instance->BPCR |= (tmp | hltdc->Init.AccumulatedVBP);
 8004d76:	687b      	ldr	r3, [r7, #4]
 8004d78:	681b      	ldr	r3, [r3, #0]
 8004d7a:	68d9      	ldr	r1, [r3, #12]
 8004d7c:	687b      	ldr	r3, [r7, #4]
 8004d7e:	6a1a      	ldr	r2, [r3, #32]
 8004d80:	68fb      	ldr	r3, [r7, #12]
 8004d82:	431a      	orrs	r2, r3
 8004d84:	687b      	ldr	r3, [r7, #4]
 8004d86:	681b      	ldr	r3, [r3, #0]
 8004d88:	430a      	orrs	r2, r1
 8004d8a:	60da      	str	r2, [r3, #12]

  /* Set Accumulated Active Width */
  hltdc->Instance->AWCR &= ~(LTDC_AWCR_AAH | LTDC_AWCR_AAW);
 8004d8c:	687b      	ldr	r3, [r7, #4]
 8004d8e:	681b      	ldr	r3, [r3, #0]
 8004d90:	6919      	ldr	r1, [r3, #16]
 8004d92:	687b      	ldr	r3, [r7, #4]
 8004d94:	681a      	ldr	r2, [r3, #0]
 8004d96:	4b33      	ldr	r3, [pc, #204]	@ (8004e64 <HAL_LTDC_Init+0x19c>)
 8004d98:	400b      	ands	r3, r1
 8004d9a:	6113      	str	r3, [r2, #16]
  tmp = (hltdc->Init.AccumulatedActiveW << 16U);
 8004d9c:	687b      	ldr	r3, [r7, #4]
 8004d9e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004da0:	041b      	lsls	r3, r3, #16
 8004da2:	60fb      	str	r3, [r7, #12]
  hltdc->Instance->AWCR |= (tmp | hltdc->Init.AccumulatedActiveH);
 8004da4:	687b      	ldr	r3, [r7, #4]
 8004da6:	681b      	ldr	r3, [r3, #0]
 8004da8:	6919      	ldr	r1, [r3, #16]
 8004daa:	687b      	ldr	r3, [r7, #4]
 8004dac:	6a9a      	ldr	r2, [r3, #40]	@ 0x28
 8004dae:	68fb      	ldr	r3, [r7, #12]
 8004db0:	431a      	orrs	r2, r3
 8004db2:	687b      	ldr	r3, [r7, #4]
 8004db4:	681b      	ldr	r3, [r3, #0]
 8004db6:	430a      	orrs	r2, r1
 8004db8:	611a      	str	r2, [r3, #16]

  /* Set Total Width */
  hltdc->Instance->TWCR &= ~(LTDC_TWCR_TOTALH | LTDC_TWCR_TOTALW);
 8004dba:	687b      	ldr	r3, [r7, #4]
 8004dbc:	681b      	ldr	r3, [r3, #0]
 8004dbe:	6959      	ldr	r1, [r3, #20]
 8004dc0:	687b      	ldr	r3, [r7, #4]
 8004dc2:	681a      	ldr	r2, [r3, #0]
 8004dc4:	4b27      	ldr	r3, [pc, #156]	@ (8004e64 <HAL_LTDC_Init+0x19c>)
 8004dc6:	400b      	ands	r3, r1
 8004dc8:	6153      	str	r3, [r2, #20]
  tmp = (hltdc->Init.TotalWidth << 16U);
 8004dca:	687b      	ldr	r3, [r7, #4]
 8004dcc:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8004dce:	041b      	lsls	r3, r3, #16
 8004dd0:	60fb      	str	r3, [r7, #12]
  hltdc->Instance->TWCR |= (tmp | hltdc->Init.TotalHeigh);
 8004dd2:	687b      	ldr	r3, [r7, #4]
 8004dd4:	681b      	ldr	r3, [r3, #0]
 8004dd6:	6959      	ldr	r1, [r3, #20]
 8004dd8:	687b      	ldr	r3, [r7, #4]
 8004dda:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 8004ddc:	68fb      	ldr	r3, [r7, #12]
 8004dde:	431a      	orrs	r2, r3
 8004de0:	687b      	ldr	r3, [r7, #4]
 8004de2:	681b      	ldr	r3, [r3, #0]
 8004de4:	430a      	orrs	r2, r1
 8004de6:	615a      	str	r2, [r3, #20]

  /* Set the background color value */
  tmp = ((uint32_t)(hltdc->Init.Backcolor.Green) << 8U);
 8004de8:	687b      	ldr	r3, [r7, #4]
 8004dea:	f893 3035 	ldrb.w	r3, [r3, #53]	@ 0x35
 8004dee:	021b      	lsls	r3, r3, #8
 8004df0:	60fb      	str	r3, [r7, #12]
  tmp1 = ((uint32_t)(hltdc->Init.Backcolor.Red) << 16U);
 8004df2:	687b      	ldr	r3, [r7, #4]
 8004df4:	f893 3036 	ldrb.w	r3, [r3, #54]	@ 0x36
 8004df8:	041b      	lsls	r3, r3, #16
 8004dfa:	60bb      	str	r3, [r7, #8]
  hltdc->Instance->BCCR &= ~(LTDC_BCCR_BCBLUE | LTDC_BCCR_BCGREEN | LTDC_BCCR_BCRED);
 8004dfc:	687b      	ldr	r3, [r7, #4]
 8004dfe:	681b      	ldr	r3, [r3, #0]
 8004e00:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8004e02:	687b      	ldr	r3, [r7, #4]
 8004e04:	681b      	ldr	r3, [r3, #0]
 8004e06:	f002 427f 	and.w	r2, r2, #4278190080	@ 0xff000000
 8004e0a:	62da      	str	r2, [r3, #44]	@ 0x2c
  hltdc->Instance->BCCR |= (tmp1 | tmp | hltdc->Init.Backcolor.Blue);
 8004e0c:	687b      	ldr	r3, [r7, #4]
 8004e0e:	681b      	ldr	r3, [r3, #0]
 8004e10:	6ad9      	ldr	r1, [r3, #44]	@ 0x2c
 8004e12:	68ba      	ldr	r2, [r7, #8]
 8004e14:	68fb      	ldr	r3, [r7, #12]
 8004e16:	4313      	orrs	r3, r2
 8004e18:	687a      	ldr	r2, [r7, #4]
 8004e1a:	f892 2034 	ldrb.w	r2, [r2, #52]	@ 0x34
 8004e1e:	431a      	orrs	r2, r3
 8004e20:	687b      	ldr	r3, [r7, #4]
 8004e22:	681b      	ldr	r3, [r3, #0]
 8004e24:	430a      	orrs	r2, r1
 8004e26:	62da      	str	r2, [r3, #44]	@ 0x2c

  /* Enable the Transfer Error and FIFO underrun interrupts */
  __HAL_LTDC_ENABLE_IT(hltdc, LTDC_IT_TE | LTDC_IT_FU);
 8004e28:	687b      	ldr	r3, [r7, #4]
 8004e2a:	681b      	ldr	r3, [r3, #0]
 8004e2c:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 8004e2e:	687b      	ldr	r3, [r7, #4]
 8004e30:	681b      	ldr	r3, [r3, #0]
 8004e32:	f042 0206 	orr.w	r2, r2, #6
 8004e36:	635a      	str	r2, [r3, #52]	@ 0x34

  /* Enable LTDC by setting LTDCEN bit */
  __HAL_LTDC_ENABLE(hltdc);
 8004e38:	687b      	ldr	r3, [r7, #4]
 8004e3a:	681b      	ldr	r3, [r3, #0]
 8004e3c:	699a      	ldr	r2, [r3, #24]
 8004e3e:	687b      	ldr	r3, [r7, #4]
 8004e40:	681b      	ldr	r3, [r3, #0]
 8004e42:	f042 0201 	orr.w	r2, r2, #1
 8004e46:	619a      	str	r2, [r3, #24]

  /* Initialize the error code */
  hltdc->ErrorCode = HAL_LTDC_ERROR_NONE;
 8004e48:	687b      	ldr	r3, [r7, #4]
 8004e4a:	2200      	movs	r2, #0
 8004e4c:	f8c3 20a4 	str.w	r2, [r3, #164]	@ 0xa4

  /* Initialize the LTDC state*/
  hltdc->State = HAL_LTDC_STATE_READY;
 8004e50:	687b      	ldr	r3, [r7, #4]
 8004e52:	2201      	movs	r2, #1
 8004e54:	f883 20a1 	strb.w	r2, [r3, #161]	@ 0xa1

  return HAL_OK;
 8004e58:	2300      	movs	r3, #0
}
 8004e5a:	4618      	mov	r0, r3
 8004e5c:	3710      	adds	r7, #16
 8004e5e:	46bd      	mov	sp, r7
 8004e60:	bd80      	pop	{r7, pc}
 8004e62:	bf00      	nop
 8004e64:	f000f800 	.word	0xf000f800

08004e68 <HAL_LTDC_ConfigLayer>:
  *                    This parameter can be one of the following values:
  *                    LTDC_LAYER_1 (0) or LTDC_LAYER_2 (1)
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_LTDC_ConfigLayer(LTDC_HandleTypeDef *hltdc, LTDC_LayerCfgTypeDef *pLayerCfg, uint32_t LayerIdx)
{
 8004e68:	b5b0      	push	{r4, r5, r7, lr}
 8004e6a:	b084      	sub	sp, #16
 8004e6c:	af00      	add	r7, sp, #0
 8004e6e:	60f8      	str	r0, [r7, #12]
 8004e70:	60b9      	str	r1, [r7, #8]
 8004e72:	607a      	str	r2, [r7, #4]
  assert_param(IS_LTDC_BLENDING_FACTOR2(pLayerCfg->BlendingFactor2));
  assert_param(IS_LTDC_CFBLL(pLayerCfg->ImageWidth));
  assert_param(IS_LTDC_CFBLNBR(pLayerCfg->ImageHeight));

  /* Process locked */
  __HAL_LOCK(hltdc);
 8004e74:	68fb      	ldr	r3, [r7, #12]
 8004e76:	f893 30a0 	ldrb.w	r3, [r3, #160]	@ 0xa0
 8004e7a:	2b01      	cmp	r3, #1
 8004e7c:	d101      	bne.n	8004e82 <HAL_LTDC_ConfigLayer+0x1a>
 8004e7e:	2302      	movs	r3, #2
 8004e80:	e02c      	b.n	8004edc <HAL_LTDC_ConfigLayer+0x74>
 8004e82:	68fb      	ldr	r3, [r7, #12]
 8004e84:	2201      	movs	r2, #1
 8004e86:	f883 20a0 	strb.w	r2, [r3, #160]	@ 0xa0

  /* Change LTDC peripheral state */
  hltdc->State = HAL_LTDC_STATE_BUSY;
 8004e8a:	68fb      	ldr	r3, [r7, #12]
 8004e8c:	2202      	movs	r2, #2
 8004e8e:	f883 20a1 	strb.w	r2, [r3, #161]	@ 0xa1

  /* Copy new layer configuration into handle structure */
  hltdc->LayerCfg[LayerIdx] = *pLayerCfg;
 8004e92:	68fa      	ldr	r2, [r7, #12]
 8004e94:	687b      	ldr	r3, [r7, #4]
 8004e96:	2134      	movs	r1, #52	@ 0x34
 8004e98:	fb01 f303 	mul.w	r3, r1, r3
 8004e9c:	4413      	add	r3, r2
 8004e9e:	f103 0238 	add.w	r2, r3, #56	@ 0x38
 8004ea2:	68bb      	ldr	r3, [r7, #8]
 8004ea4:	4614      	mov	r4, r2
 8004ea6:	461d      	mov	r5, r3
 8004ea8:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8004eaa:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8004eac:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8004eae:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8004eb0:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8004eb2:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8004eb4:	682b      	ldr	r3, [r5, #0]
 8004eb6:	6023      	str	r3, [r4, #0]

  /* Configure the LTDC Layer */
  LTDC_SetConfig(hltdc, pLayerCfg, LayerIdx);
 8004eb8:	687a      	ldr	r2, [r7, #4]
 8004eba:	68b9      	ldr	r1, [r7, #8]
 8004ebc:	68f8      	ldr	r0, [r7, #12]
 8004ebe:	f000 f811 	bl	8004ee4 <LTDC_SetConfig>

  /* Set the Immediate Reload type */
  hltdc->Instance->SRCR = LTDC_SRCR_IMR;
 8004ec2:	68fb      	ldr	r3, [r7, #12]
 8004ec4:	681b      	ldr	r3, [r3, #0]
 8004ec6:	2201      	movs	r2, #1
 8004ec8:	625a      	str	r2, [r3, #36]	@ 0x24

  /* Initialize the LTDC state*/
  hltdc->State  = HAL_LTDC_STATE_READY;
 8004eca:	68fb      	ldr	r3, [r7, #12]
 8004ecc:	2201      	movs	r2, #1
 8004ece:	f883 20a1 	strb.w	r2, [r3, #161]	@ 0xa1

  /* Process unlocked */
  __HAL_UNLOCK(hltdc);
 8004ed2:	68fb      	ldr	r3, [r7, #12]
 8004ed4:	2200      	movs	r2, #0
 8004ed6:	f883 20a0 	strb.w	r2, [r3, #160]	@ 0xa0

  return HAL_OK;
 8004eda:	2300      	movs	r3, #0
}
 8004edc:	4618      	mov	r0, r3
 8004ede:	3710      	adds	r7, #16
 8004ee0:	46bd      	mov	sp, r7
 8004ee2:	bdb0      	pop	{r4, r5, r7, pc}

08004ee4 <LTDC_SetConfig>:
  * @param  LayerIdx  LTDC Layer index.
  *                   This parameter can be one of the following values: LTDC_LAYER_1 (0) or LTDC_LAYER_2 (1)
  * @retval None
  */
static void LTDC_SetConfig(LTDC_HandleTypeDef *hltdc, LTDC_LayerCfgTypeDef *pLayerCfg, uint32_t LayerIdx)
{
 8004ee4:	b480      	push	{r7}
 8004ee6:	b089      	sub	sp, #36	@ 0x24
 8004ee8:	af00      	add	r7, sp, #0
 8004eea:	60f8      	str	r0, [r7, #12]
 8004eec:	60b9      	str	r1, [r7, #8]
 8004eee:	607a      	str	r2, [r7, #4]
  uint32_t tmp;
  uint32_t tmp1;
  uint32_t tmp2;

  /* Configure the horizontal start and stop position */
  tmp = ((pLayerCfg->WindowX1 + ((hltdc->Instance->BPCR & LTDC_BPCR_AHBP) >> 16U)) << 16U);
 8004ef0:	68bb      	ldr	r3, [r7, #8]
 8004ef2:	685a      	ldr	r2, [r3, #4]
 8004ef4:	68fb      	ldr	r3, [r7, #12]
 8004ef6:	681b      	ldr	r3, [r3, #0]
 8004ef8:	68db      	ldr	r3, [r3, #12]
 8004efa:	0c1b      	lsrs	r3, r3, #16
 8004efc:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8004f00:	4413      	add	r3, r2
 8004f02:	041b      	lsls	r3, r3, #16
 8004f04:	61fb      	str	r3, [r7, #28]
  LTDC_LAYER(hltdc, LayerIdx)->WHPCR &= ~(LTDC_LxWHPCR_WHSTPOS | LTDC_LxWHPCR_WHSPPOS);
 8004f06:	68fb      	ldr	r3, [r7, #12]
 8004f08:	681b      	ldr	r3, [r3, #0]
 8004f0a:	461a      	mov	r2, r3
 8004f0c:	687b      	ldr	r3, [r7, #4]
 8004f0e:	01db      	lsls	r3, r3, #7
 8004f10:	4413      	add	r3, r2
 8004f12:	3384      	adds	r3, #132	@ 0x84
 8004f14:	685b      	ldr	r3, [r3, #4]
 8004f16:	68fa      	ldr	r2, [r7, #12]
 8004f18:	6812      	ldr	r2, [r2, #0]
 8004f1a:	4611      	mov	r1, r2
 8004f1c:	687a      	ldr	r2, [r7, #4]
 8004f1e:	01d2      	lsls	r2, r2, #7
 8004f20:	440a      	add	r2, r1
 8004f22:	3284      	adds	r2, #132	@ 0x84
 8004f24:	f403 4370 	and.w	r3, r3, #61440	@ 0xf000
 8004f28:	6053      	str	r3, [r2, #4]
  LTDC_LAYER(hltdc, LayerIdx)->WHPCR = ((pLayerCfg->WindowX0 + \
 8004f2a:	68bb      	ldr	r3, [r7, #8]
 8004f2c:	681a      	ldr	r2, [r3, #0]
                                         ((hltdc->Instance->BPCR & LTDC_BPCR_AHBP) >> 16U) + 1U) | tmp);
 8004f2e:	68fb      	ldr	r3, [r7, #12]
 8004f30:	681b      	ldr	r3, [r3, #0]
 8004f32:	68db      	ldr	r3, [r3, #12]
 8004f34:	0c1b      	lsrs	r3, r3, #16
 8004f36:	f3c3 030b 	ubfx	r3, r3, #0, #12
  LTDC_LAYER(hltdc, LayerIdx)->WHPCR = ((pLayerCfg->WindowX0 + \
 8004f3a:	4413      	add	r3, r2
                                         ((hltdc->Instance->BPCR & LTDC_BPCR_AHBP) >> 16U) + 1U) | tmp);
 8004f3c:	1c5a      	adds	r2, r3, #1
  LTDC_LAYER(hltdc, LayerIdx)->WHPCR = ((pLayerCfg->WindowX0 + \
 8004f3e:	68fb      	ldr	r3, [r7, #12]
 8004f40:	681b      	ldr	r3, [r3, #0]
 8004f42:	4619      	mov	r1, r3
 8004f44:	687b      	ldr	r3, [r7, #4]
 8004f46:	01db      	lsls	r3, r3, #7
 8004f48:	440b      	add	r3, r1
 8004f4a:	3384      	adds	r3, #132	@ 0x84
 8004f4c:	4619      	mov	r1, r3
                                         ((hltdc->Instance->BPCR & LTDC_BPCR_AHBP) >> 16U) + 1U) | tmp);
 8004f4e:	69fb      	ldr	r3, [r7, #28]
 8004f50:	4313      	orrs	r3, r2
  LTDC_LAYER(hltdc, LayerIdx)->WHPCR = ((pLayerCfg->WindowX0 + \
 8004f52:	604b      	str	r3, [r1, #4]

  /* Configure the vertical start and stop position */
  tmp = ((pLayerCfg->WindowY1 + (hltdc->Instance->BPCR & LTDC_BPCR_AVBP)) << 16U);
 8004f54:	68bb      	ldr	r3, [r7, #8]
 8004f56:	68da      	ldr	r2, [r3, #12]
 8004f58:	68fb      	ldr	r3, [r7, #12]
 8004f5a:	681b      	ldr	r3, [r3, #0]
 8004f5c:	68db      	ldr	r3, [r3, #12]
 8004f5e:	f3c3 030a 	ubfx	r3, r3, #0, #11
 8004f62:	4413      	add	r3, r2
 8004f64:	041b      	lsls	r3, r3, #16
 8004f66:	61fb      	str	r3, [r7, #28]
  LTDC_LAYER(hltdc, LayerIdx)->WVPCR &= ~(LTDC_LxWVPCR_WVSTPOS | LTDC_LxWVPCR_WVSPPOS);
 8004f68:	68fb      	ldr	r3, [r7, #12]
 8004f6a:	681b      	ldr	r3, [r3, #0]
 8004f6c:	461a      	mov	r2, r3
 8004f6e:	687b      	ldr	r3, [r7, #4]
 8004f70:	01db      	lsls	r3, r3, #7
 8004f72:	4413      	add	r3, r2
 8004f74:	3384      	adds	r3, #132	@ 0x84
 8004f76:	689b      	ldr	r3, [r3, #8]
 8004f78:	68fa      	ldr	r2, [r7, #12]
 8004f7a:	6812      	ldr	r2, [r2, #0]
 8004f7c:	4611      	mov	r1, r2
 8004f7e:	687a      	ldr	r2, [r7, #4]
 8004f80:	01d2      	lsls	r2, r2, #7
 8004f82:	440a      	add	r2, r1
 8004f84:	3284      	adds	r2, #132	@ 0x84
 8004f86:	f403 4370 	and.w	r3, r3, #61440	@ 0xf000
 8004f8a:	6093      	str	r3, [r2, #8]
  LTDC_LAYER(hltdc, LayerIdx)->WVPCR  = ((pLayerCfg->WindowY0 + (hltdc->Instance->BPCR & LTDC_BPCR_AVBP) + 1U) | tmp);
 8004f8c:	68bb      	ldr	r3, [r7, #8]
 8004f8e:	689a      	ldr	r2, [r3, #8]
 8004f90:	68fb      	ldr	r3, [r7, #12]
 8004f92:	681b      	ldr	r3, [r3, #0]
 8004f94:	68db      	ldr	r3, [r3, #12]
 8004f96:	f3c3 030a 	ubfx	r3, r3, #0, #11
 8004f9a:	4413      	add	r3, r2
 8004f9c:	1c5a      	adds	r2, r3, #1
 8004f9e:	68fb      	ldr	r3, [r7, #12]
 8004fa0:	681b      	ldr	r3, [r3, #0]
 8004fa2:	4619      	mov	r1, r3
 8004fa4:	687b      	ldr	r3, [r7, #4]
 8004fa6:	01db      	lsls	r3, r3, #7
 8004fa8:	440b      	add	r3, r1
 8004faa:	3384      	adds	r3, #132	@ 0x84
 8004fac:	4619      	mov	r1, r3
 8004fae:	69fb      	ldr	r3, [r7, #28]
 8004fb0:	4313      	orrs	r3, r2
 8004fb2:	608b      	str	r3, [r1, #8]

  /* Specifies the pixel format */
  LTDC_LAYER(hltdc, LayerIdx)->PFCR &= ~(LTDC_LxPFCR_PF);
 8004fb4:	68fb      	ldr	r3, [r7, #12]
 8004fb6:	681b      	ldr	r3, [r3, #0]
 8004fb8:	461a      	mov	r2, r3
 8004fba:	687b      	ldr	r3, [r7, #4]
 8004fbc:	01db      	lsls	r3, r3, #7
 8004fbe:	4413      	add	r3, r2
 8004fc0:	3384      	adds	r3, #132	@ 0x84
 8004fc2:	691b      	ldr	r3, [r3, #16]
 8004fc4:	68fa      	ldr	r2, [r7, #12]
 8004fc6:	6812      	ldr	r2, [r2, #0]
 8004fc8:	4611      	mov	r1, r2
 8004fca:	687a      	ldr	r2, [r7, #4]
 8004fcc:	01d2      	lsls	r2, r2, #7
 8004fce:	440a      	add	r2, r1
 8004fd0:	3284      	adds	r2, #132	@ 0x84
 8004fd2:	f023 0307 	bic.w	r3, r3, #7
 8004fd6:	6113      	str	r3, [r2, #16]
  LTDC_LAYER(hltdc, LayerIdx)->PFCR = (pLayerCfg->PixelFormat);
 8004fd8:	68fb      	ldr	r3, [r7, #12]
 8004fda:	681b      	ldr	r3, [r3, #0]
 8004fdc:	461a      	mov	r2, r3
 8004fde:	687b      	ldr	r3, [r7, #4]
 8004fe0:	01db      	lsls	r3, r3, #7
 8004fe2:	4413      	add	r3, r2
 8004fe4:	3384      	adds	r3, #132	@ 0x84
 8004fe6:	461a      	mov	r2, r3
 8004fe8:	68bb      	ldr	r3, [r7, #8]
 8004fea:	691b      	ldr	r3, [r3, #16]
 8004fec:	6113      	str	r3, [r2, #16]

  /* Configure the default color values */
  tmp = ((uint32_t)(pLayerCfg->Backcolor.Green) << 8U);
 8004fee:	68bb      	ldr	r3, [r7, #8]
 8004ff0:	f893 3031 	ldrb.w	r3, [r3, #49]	@ 0x31
 8004ff4:	021b      	lsls	r3, r3, #8
 8004ff6:	61fb      	str	r3, [r7, #28]
  tmp1 = ((uint32_t)(pLayerCfg->Backcolor.Red) << 16U);
 8004ff8:	68bb      	ldr	r3, [r7, #8]
 8004ffa:	f893 3032 	ldrb.w	r3, [r3, #50]	@ 0x32
 8004ffe:	041b      	lsls	r3, r3, #16
 8005000:	61bb      	str	r3, [r7, #24]
  tmp2 = (pLayerCfg->Alpha0 << 24U);
 8005002:	68bb      	ldr	r3, [r7, #8]
 8005004:	699b      	ldr	r3, [r3, #24]
 8005006:	061b      	lsls	r3, r3, #24
 8005008:	617b      	str	r3, [r7, #20]
  LTDC_LAYER(hltdc, LayerIdx)->DCCR &= ~(LTDC_LxDCCR_DCBLUE | LTDC_LxDCCR_DCGREEN | LTDC_LxDCCR_DCRED |
 800500a:	68fb      	ldr	r3, [r7, #12]
 800500c:	681b      	ldr	r3, [r3, #0]
 800500e:	461a      	mov	r2, r3
 8005010:	687b      	ldr	r3, [r7, #4]
 8005012:	01db      	lsls	r3, r3, #7
 8005014:	4413      	add	r3, r2
 8005016:	3384      	adds	r3, #132	@ 0x84
 8005018:	699b      	ldr	r3, [r3, #24]
 800501a:	68fb      	ldr	r3, [r7, #12]
 800501c:	681b      	ldr	r3, [r3, #0]
 800501e:	461a      	mov	r2, r3
 8005020:	687b      	ldr	r3, [r7, #4]
 8005022:	01db      	lsls	r3, r3, #7
 8005024:	4413      	add	r3, r2
 8005026:	3384      	adds	r3, #132	@ 0x84
 8005028:	461a      	mov	r2, r3
 800502a:	2300      	movs	r3, #0
 800502c:	6193      	str	r3, [r2, #24]
                                         LTDC_LxDCCR_DCALPHA);
  LTDC_LAYER(hltdc, LayerIdx)->DCCR = (pLayerCfg->Backcolor.Blue | tmp | tmp1 | tmp2);
 800502e:	68bb      	ldr	r3, [r7, #8]
 8005030:	f893 3030 	ldrb.w	r3, [r3, #48]	@ 0x30
 8005034:	461a      	mov	r2, r3
 8005036:	69fb      	ldr	r3, [r7, #28]
 8005038:	431a      	orrs	r2, r3
 800503a:	69bb      	ldr	r3, [r7, #24]
 800503c:	431a      	orrs	r2, r3
 800503e:	68fb      	ldr	r3, [r7, #12]
 8005040:	681b      	ldr	r3, [r3, #0]
 8005042:	4619      	mov	r1, r3
 8005044:	687b      	ldr	r3, [r7, #4]
 8005046:	01db      	lsls	r3, r3, #7
 8005048:	440b      	add	r3, r1
 800504a:	3384      	adds	r3, #132	@ 0x84
 800504c:	4619      	mov	r1, r3
 800504e:	697b      	ldr	r3, [r7, #20]
 8005050:	4313      	orrs	r3, r2
 8005052:	618b      	str	r3, [r1, #24]

  /* Specifies the constant alpha value */
  LTDC_LAYER(hltdc, LayerIdx)->CACR &= ~(LTDC_LxCACR_CONSTA);
 8005054:	68fb      	ldr	r3, [r7, #12]
 8005056:	681b      	ldr	r3, [r3, #0]
 8005058:	461a      	mov	r2, r3
 800505a:	687b      	ldr	r3, [r7, #4]
 800505c:	01db      	lsls	r3, r3, #7
 800505e:	4413      	add	r3, r2
 8005060:	3384      	adds	r3, #132	@ 0x84
 8005062:	695b      	ldr	r3, [r3, #20]
 8005064:	68fa      	ldr	r2, [r7, #12]
 8005066:	6812      	ldr	r2, [r2, #0]
 8005068:	4611      	mov	r1, r2
 800506a:	687a      	ldr	r2, [r7, #4]
 800506c:	01d2      	lsls	r2, r2, #7
 800506e:	440a      	add	r2, r1
 8005070:	3284      	adds	r2, #132	@ 0x84
 8005072:	f023 03ff 	bic.w	r3, r3, #255	@ 0xff
 8005076:	6153      	str	r3, [r2, #20]
  LTDC_LAYER(hltdc, LayerIdx)->CACR = (pLayerCfg->Alpha);
 8005078:	68fb      	ldr	r3, [r7, #12]
 800507a:	681b      	ldr	r3, [r3, #0]
 800507c:	461a      	mov	r2, r3
 800507e:	687b      	ldr	r3, [r7, #4]
 8005080:	01db      	lsls	r3, r3, #7
 8005082:	4413      	add	r3, r2
 8005084:	3384      	adds	r3, #132	@ 0x84
 8005086:	461a      	mov	r2, r3
 8005088:	68bb      	ldr	r3, [r7, #8]
 800508a:	695b      	ldr	r3, [r3, #20]
 800508c:	6153      	str	r3, [r2, #20]

  /* Specifies the blending factors */
  LTDC_LAYER(hltdc, LayerIdx)->BFCR &= ~(LTDC_LxBFCR_BF2 | LTDC_LxBFCR_BF1);
 800508e:	68fb      	ldr	r3, [r7, #12]
 8005090:	681b      	ldr	r3, [r3, #0]
 8005092:	461a      	mov	r2, r3
 8005094:	687b      	ldr	r3, [r7, #4]
 8005096:	01db      	lsls	r3, r3, #7
 8005098:	4413      	add	r3, r2
 800509a:	3384      	adds	r3, #132	@ 0x84
 800509c:	69db      	ldr	r3, [r3, #28]
 800509e:	68fa      	ldr	r2, [r7, #12]
 80050a0:	6812      	ldr	r2, [r2, #0]
 80050a2:	4611      	mov	r1, r2
 80050a4:	687a      	ldr	r2, [r7, #4]
 80050a6:	01d2      	lsls	r2, r2, #7
 80050a8:	440a      	add	r2, r1
 80050aa:	3284      	adds	r2, #132	@ 0x84
 80050ac:	f423 63e0 	bic.w	r3, r3, #1792	@ 0x700
 80050b0:	f023 0307 	bic.w	r3, r3, #7
 80050b4:	61d3      	str	r3, [r2, #28]
  LTDC_LAYER(hltdc, LayerIdx)->BFCR = (pLayerCfg->BlendingFactor1 | pLayerCfg->BlendingFactor2);
 80050b6:	68bb      	ldr	r3, [r7, #8]
 80050b8:	69da      	ldr	r2, [r3, #28]
 80050ba:	68bb      	ldr	r3, [r7, #8]
 80050bc:	6a1b      	ldr	r3, [r3, #32]
 80050be:	68f9      	ldr	r1, [r7, #12]
 80050c0:	6809      	ldr	r1, [r1, #0]
 80050c2:	4608      	mov	r0, r1
 80050c4:	6879      	ldr	r1, [r7, #4]
 80050c6:	01c9      	lsls	r1, r1, #7
 80050c8:	4401      	add	r1, r0
 80050ca:	3184      	adds	r1, #132	@ 0x84
 80050cc:	4313      	orrs	r3, r2
 80050ce:	61cb      	str	r3, [r1, #28]

  /* Configure the color frame buffer start address */
  LTDC_LAYER(hltdc, LayerIdx)->CFBAR &= ~(LTDC_LxCFBAR_CFBADD);
 80050d0:	68fb      	ldr	r3, [r7, #12]
 80050d2:	681b      	ldr	r3, [r3, #0]
 80050d4:	461a      	mov	r2, r3
 80050d6:	687b      	ldr	r3, [r7, #4]
 80050d8:	01db      	lsls	r3, r3, #7
 80050da:	4413      	add	r3, r2
 80050dc:	3384      	adds	r3, #132	@ 0x84
 80050de:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80050e0:	68fb      	ldr	r3, [r7, #12]
 80050e2:	681b      	ldr	r3, [r3, #0]
 80050e4:	461a      	mov	r2, r3
 80050e6:	687b      	ldr	r3, [r7, #4]
 80050e8:	01db      	lsls	r3, r3, #7
 80050ea:	4413      	add	r3, r2
 80050ec:	3384      	adds	r3, #132	@ 0x84
 80050ee:	461a      	mov	r2, r3
 80050f0:	2300      	movs	r3, #0
 80050f2:	6293      	str	r3, [r2, #40]	@ 0x28
  LTDC_LAYER(hltdc, LayerIdx)->CFBAR = (pLayerCfg->FBStartAdress);
 80050f4:	68fb      	ldr	r3, [r7, #12]
 80050f6:	681b      	ldr	r3, [r3, #0]
 80050f8:	461a      	mov	r2, r3
 80050fa:	687b      	ldr	r3, [r7, #4]
 80050fc:	01db      	lsls	r3, r3, #7
 80050fe:	4413      	add	r3, r2
 8005100:	3384      	adds	r3, #132	@ 0x84
 8005102:	461a      	mov	r2, r3
 8005104:	68bb      	ldr	r3, [r7, #8]
 8005106:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8005108:	6293      	str	r3, [r2, #40]	@ 0x28

  if (pLayerCfg->PixelFormat == LTDC_PIXEL_FORMAT_ARGB8888)
 800510a:	68bb      	ldr	r3, [r7, #8]
 800510c:	691b      	ldr	r3, [r3, #16]
 800510e:	2b00      	cmp	r3, #0
 8005110:	d102      	bne.n	8005118 <LTDC_SetConfig+0x234>
  {
    tmp = 4U;
 8005112:	2304      	movs	r3, #4
 8005114:	61fb      	str	r3, [r7, #28]
 8005116:	e01b      	b.n	8005150 <LTDC_SetConfig+0x26c>
  }
  else if (pLayerCfg->PixelFormat == LTDC_PIXEL_FORMAT_RGB888)
 8005118:	68bb      	ldr	r3, [r7, #8]
 800511a:	691b      	ldr	r3, [r3, #16]
 800511c:	2b01      	cmp	r3, #1
 800511e:	d102      	bne.n	8005126 <LTDC_SetConfig+0x242>
  {
    tmp = 3U;
 8005120:	2303      	movs	r3, #3
 8005122:	61fb      	str	r3, [r7, #28]
 8005124:	e014      	b.n	8005150 <LTDC_SetConfig+0x26c>
  }
  else if ((pLayerCfg->PixelFormat == LTDC_PIXEL_FORMAT_ARGB4444) || \
 8005126:	68bb      	ldr	r3, [r7, #8]
 8005128:	691b      	ldr	r3, [r3, #16]
 800512a:	2b04      	cmp	r3, #4
 800512c:	d00b      	beq.n	8005146 <LTDC_SetConfig+0x262>
           (pLayerCfg->PixelFormat == LTDC_PIXEL_FORMAT_RGB565)   || \
 800512e:	68bb      	ldr	r3, [r7, #8]
 8005130:	691b      	ldr	r3, [r3, #16]
  else if ((pLayerCfg->PixelFormat == LTDC_PIXEL_FORMAT_ARGB4444) || \
 8005132:	2b02      	cmp	r3, #2
 8005134:	d007      	beq.n	8005146 <LTDC_SetConfig+0x262>
           (pLayerCfg->PixelFormat == LTDC_PIXEL_FORMAT_ARGB1555) || \
 8005136:	68bb      	ldr	r3, [r7, #8]
 8005138:	691b      	ldr	r3, [r3, #16]
           (pLayerCfg->PixelFormat == LTDC_PIXEL_FORMAT_RGB565)   || \
 800513a:	2b03      	cmp	r3, #3
 800513c:	d003      	beq.n	8005146 <LTDC_SetConfig+0x262>
           (pLayerCfg->PixelFormat == LTDC_PIXEL_FORMAT_AL88))
 800513e:	68bb      	ldr	r3, [r7, #8]
 8005140:	691b      	ldr	r3, [r3, #16]
           (pLayerCfg->PixelFormat == LTDC_PIXEL_FORMAT_ARGB1555) || \
 8005142:	2b07      	cmp	r3, #7
 8005144:	d102      	bne.n	800514c <LTDC_SetConfig+0x268>
  {
    tmp = 2U;
 8005146:	2302      	movs	r3, #2
 8005148:	61fb      	str	r3, [r7, #28]
 800514a:	e001      	b.n	8005150 <LTDC_SetConfig+0x26c>
  }
  else
  {
    tmp = 1U;
 800514c:	2301      	movs	r3, #1
 800514e:	61fb      	str	r3, [r7, #28]
  }

  /* Configure the color frame buffer pitch in byte */
  LTDC_LAYER(hltdc, LayerIdx)->CFBLR  &= ~(LTDC_LxCFBLR_CFBLL | LTDC_LxCFBLR_CFBP);
 8005150:	68fb      	ldr	r3, [r7, #12]
 8005152:	681b      	ldr	r3, [r3, #0]
 8005154:	461a      	mov	r2, r3
 8005156:	687b      	ldr	r3, [r7, #4]
 8005158:	01db      	lsls	r3, r3, #7
 800515a:	4413      	add	r3, r2
 800515c:	3384      	adds	r3, #132	@ 0x84
 800515e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8005160:	68fa      	ldr	r2, [r7, #12]
 8005162:	6812      	ldr	r2, [r2, #0]
 8005164:	4611      	mov	r1, r2
 8005166:	687a      	ldr	r2, [r7, #4]
 8005168:	01d2      	lsls	r2, r2, #7
 800516a:	440a      	add	r2, r1
 800516c:	3284      	adds	r2, #132	@ 0x84
 800516e:	f003 23e0 	and.w	r3, r3, #3758153728	@ 0xe000e000
 8005172:	62d3      	str	r3, [r2, #44]	@ 0x2c
  LTDC_LAYER(hltdc, LayerIdx)->CFBLR  = (((pLayerCfg->ImageWidth * tmp) << 16U) | \
 8005174:	68bb      	ldr	r3, [r7, #8]
 8005176:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8005178:	69fa      	ldr	r2, [r7, #28]
 800517a:	fb02 f303 	mul.w	r3, r2, r3
 800517e:	041a      	lsls	r2, r3, #16
                                         (((pLayerCfg->WindowX1 - pLayerCfg->WindowX0) * tmp)  + 3U));
 8005180:	68bb      	ldr	r3, [r7, #8]
 8005182:	6859      	ldr	r1, [r3, #4]
 8005184:	68bb      	ldr	r3, [r7, #8]
 8005186:	681b      	ldr	r3, [r3, #0]
 8005188:	1acb      	subs	r3, r1, r3
 800518a:	69f9      	ldr	r1, [r7, #28]
 800518c:	fb01 f303 	mul.w	r3, r1, r3
 8005190:	3303      	adds	r3, #3
  LTDC_LAYER(hltdc, LayerIdx)->CFBLR  = (((pLayerCfg->ImageWidth * tmp) << 16U) | \
 8005192:	68f9      	ldr	r1, [r7, #12]
 8005194:	6809      	ldr	r1, [r1, #0]
 8005196:	4608      	mov	r0, r1
 8005198:	6879      	ldr	r1, [r7, #4]
 800519a:	01c9      	lsls	r1, r1, #7
 800519c:	4401      	add	r1, r0
 800519e:	3184      	adds	r1, #132	@ 0x84
 80051a0:	4313      	orrs	r3, r2
 80051a2:	62cb      	str	r3, [r1, #44]	@ 0x2c
  /* Configure the frame buffer line number */
  LTDC_LAYER(hltdc, LayerIdx)->CFBLNR  &= ~(LTDC_LxCFBLNR_CFBLNBR);
 80051a4:	68fb      	ldr	r3, [r7, #12]
 80051a6:	681b      	ldr	r3, [r3, #0]
 80051a8:	461a      	mov	r2, r3
 80051aa:	687b      	ldr	r3, [r7, #4]
 80051ac:	01db      	lsls	r3, r3, #7
 80051ae:	4413      	add	r3, r2
 80051b0:	3384      	adds	r3, #132	@ 0x84
 80051b2:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80051b4:	68fa      	ldr	r2, [r7, #12]
 80051b6:	6812      	ldr	r2, [r2, #0]
 80051b8:	4611      	mov	r1, r2
 80051ba:	687a      	ldr	r2, [r7, #4]
 80051bc:	01d2      	lsls	r2, r2, #7
 80051be:	440a      	add	r2, r1
 80051c0:	3284      	adds	r2, #132	@ 0x84
 80051c2:	f423 63ff 	bic.w	r3, r3, #2040	@ 0x7f8
 80051c6:	f023 0307 	bic.w	r3, r3, #7
 80051ca:	6313      	str	r3, [r2, #48]	@ 0x30
  LTDC_LAYER(hltdc, LayerIdx)->CFBLNR  = (pLayerCfg->ImageHeight);
 80051cc:	68fb      	ldr	r3, [r7, #12]
 80051ce:	681b      	ldr	r3, [r3, #0]
 80051d0:	461a      	mov	r2, r3
 80051d2:	687b      	ldr	r3, [r7, #4]
 80051d4:	01db      	lsls	r3, r3, #7
 80051d6:	4413      	add	r3, r2
 80051d8:	3384      	adds	r3, #132	@ 0x84
 80051da:	461a      	mov	r2, r3
 80051dc:	68bb      	ldr	r3, [r7, #8]
 80051de:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80051e0:	6313      	str	r3, [r2, #48]	@ 0x30

  /* Enable LTDC_Layer by setting LEN bit */
  LTDC_LAYER(hltdc, LayerIdx)->CR |= (uint32_t)LTDC_LxCR_LEN;
 80051e2:	68fb      	ldr	r3, [r7, #12]
 80051e4:	681b      	ldr	r3, [r3, #0]
 80051e6:	461a      	mov	r2, r3
 80051e8:	687b      	ldr	r3, [r7, #4]
 80051ea:	01db      	lsls	r3, r3, #7
 80051ec:	4413      	add	r3, r2
 80051ee:	3384      	adds	r3, #132	@ 0x84
 80051f0:	681b      	ldr	r3, [r3, #0]
 80051f2:	68fa      	ldr	r2, [r7, #12]
 80051f4:	6812      	ldr	r2, [r2, #0]
 80051f6:	4611      	mov	r1, r2
 80051f8:	687a      	ldr	r2, [r7, #4]
 80051fa:	01d2      	lsls	r2, r2, #7
 80051fc:	440a      	add	r2, r1
 80051fe:	3284      	adds	r2, #132	@ 0x84
 8005200:	f043 0301 	orr.w	r3, r3, #1
 8005204:	6013      	str	r3, [r2, #0]
}
 8005206:	bf00      	nop
 8005208:	3724      	adds	r7, #36	@ 0x24
 800520a:	46bd      	mov	sp, r7
 800520c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005210:	4770      	bx	lr
	...

08005214 <HAL_RCC_OscConfig>:
  *         supported by this API. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8005214:	b580      	push	{r7, lr}
 8005216:	b086      	sub	sp, #24
 8005218:	af00      	add	r7, sp, #0
 800521a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;
  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 800521c:	687b      	ldr	r3, [r7, #4]
 800521e:	2b00      	cmp	r3, #0
 8005220:	d101      	bne.n	8005226 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8005222:	2301      	movs	r3, #1
 8005224:	e267      	b.n	80056f6 <HAL_RCC_OscConfig+0x4e2>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8005226:	687b      	ldr	r3, [r7, #4]
 8005228:	681b      	ldr	r3, [r3, #0]
 800522a:	f003 0301 	and.w	r3, r3, #1
 800522e:	2b00      	cmp	r3, #0
 8005230:	d075      	beq.n	800531e <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) || \
 8005232:	4b88      	ldr	r3, [pc, #544]	@ (8005454 <HAL_RCC_OscConfig+0x240>)
 8005234:	689b      	ldr	r3, [r3, #8]
 8005236:	f003 030c 	and.w	r3, r3, #12
 800523a:	2b04      	cmp	r3, #4
 800523c:	d00c      	beq.n	8005258 <HAL_RCC_OscConfig+0x44>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 800523e:	4b85      	ldr	r3, [pc, #532]	@ (8005454 <HAL_RCC_OscConfig+0x240>)
 8005240:	689b      	ldr	r3, [r3, #8]
 8005242:	f003 030c 	and.w	r3, r3, #12
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) || \
 8005246:	2b08      	cmp	r3, #8
 8005248:	d112      	bne.n	8005270 <HAL_RCC_OscConfig+0x5c>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 800524a:	4b82      	ldr	r3, [pc, #520]	@ (8005454 <HAL_RCC_OscConfig+0x240>)
 800524c:	685b      	ldr	r3, [r3, #4]
 800524e:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8005252:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 8005256:	d10b      	bne.n	8005270 <HAL_RCC_OscConfig+0x5c>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8005258:	4b7e      	ldr	r3, [pc, #504]	@ (8005454 <HAL_RCC_OscConfig+0x240>)
 800525a:	681b      	ldr	r3, [r3, #0]
 800525c:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8005260:	2b00      	cmp	r3, #0
 8005262:	d05b      	beq.n	800531c <HAL_RCC_OscConfig+0x108>
 8005264:	687b      	ldr	r3, [r7, #4]
 8005266:	685b      	ldr	r3, [r3, #4]
 8005268:	2b00      	cmp	r3, #0
 800526a:	d157      	bne.n	800531c <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 800526c:	2301      	movs	r3, #1
 800526e:	e242      	b.n	80056f6 <HAL_RCC_OscConfig+0x4e2>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8005270:	687b      	ldr	r3, [r7, #4]
 8005272:	685b      	ldr	r3, [r3, #4]
 8005274:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8005278:	d106      	bne.n	8005288 <HAL_RCC_OscConfig+0x74>
 800527a:	4b76      	ldr	r3, [pc, #472]	@ (8005454 <HAL_RCC_OscConfig+0x240>)
 800527c:	681b      	ldr	r3, [r3, #0]
 800527e:	4a75      	ldr	r2, [pc, #468]	@ (8005454 <HAL_RCC_OscConfig+0x240>)
 8005280:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8005284:	6013      	str	r3, [r2, #0]
 8005286:	e01d      	b.n	80052c4 <HAL_RCC_OscConfig+0xb0>
 8005288:	687b      	ldr	r3, [r7, #4]
 800528a:	685b      	ldr	r3, [r3, #4]
 800528c:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 8005290:	d10c      	bne.n	80052ac <HAL_RCC_OscConfig+0x98>
 8005292:	4b70      	ldr	r3, [pc, #448]	@ (8005454 <HAL_RCC_OscConfig+0x240>)
 8005294:	681b      	ldr	r3, [r3, #0]
 8005296:	4a6f      	ldr	r2, [pc, #444]	@ (8005454 <HAL_RCC_OscConfig+0x240>)
 8005298:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 800529c:	6013      	str	r3, [r2, #0]
 800529e:	4b6d      	ldr	r3, [pc, #436]	@ (8005454 <HAL_RCC_OscConfig+0x240>)
 80052a0:	681b      	ldr	r3, [r3, #0]
 80052a2:	4a6c      	ldr	r2, [pc, #432]	@ (8005454 <HAL_RCC_OscConfig+0x240>)
 80052a4:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 80052a8:	6013      	str	r3, [r2, #0]
 80052aa:	e00b      	b.n	80052c4 <HAL_RCC_OscConfig+0xb0>
 80052ac:	4b69      	ldr	r3, [pc, #420]	@ (8005454 <HAL_RCC_OscConfig+0x240>)
 80052ae:	681b      	ldr	r3, [r3, #0]
 80052b0:	4a68      	ldr	r2, [pc, #416]	@ (8005454 <HAL_RCC_OscConfig+0x240>)
 80052b2:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 80052b6:	6013      	str	r3, [r2, #0]
 80052b8:	4b66      	ldr	r3, [pc, #408]	@ (8005454 <HAL_RCC_OscConfig+0x240>)
 80052ba:	681b      	ldr	r3, [r3, #0]
 80052bc:	4a65      	ldr	r2, [pc, #404]	@ (8005454 <HAL_RCC_OscConfig+0x240>)
 80052be:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 80052c2:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if ((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 80052c4:	687b      	ldr	r3, [r7, #4]
 80052c6:	685b      	ldr	r3, [r3, #4]
 80052c8:	2b00      	cmp	r3, #0
 80052ca:	d013      	beq.n	80052f4 <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80052cc:	f7fd ffd2 	bl	8003274 <HAL_GetTick>
 80052d0:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80052d2:	e008      	b.n	80052e6 <HAL_RCC_OscConfig+0xd2>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 80052d4:	f7fd ffce 	bl	8003274 <HAL_GetTick>
 80052d8:	4602      	mov	r2, r0
 80052da:	693b      	ldr	r3, [r7, #16]
 80052dc:	1ad3      	subs	r3, r2, r3
 80052de:	2b64      	cmp	r3, #100	@ 0x64
 80052e0:	d901      	bls.n	80052e6 <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 80052e2:	2303      	movs	r3, #3
 80052e4:	e207      	b.n	80056f6 <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80052e6:	4b5b      	ldr	r3, [pc, #364]	@ (8005454 <HAL_RCC_OscConfig+0x240>)
 80052e8:	681b      	ldr	r3, [r3, #0]
 80052ea:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80052ee:	2b00      	cmp	r3, #0
 80052f0:	d0f0      	beq.n	80052d4 <HAL_RCC_OscConfig+0xc0>
 80052f2:	e014      	b.n	800531e <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80052f4:	f7fd ffbe 	bl	8003274 <HAL_GetTick>
 80052f8:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 80052fa:	e008      	b.n	800530e <HAL_RCC_OscConfig+0xfa>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 80052fc:	f7fd ffba 	bl	8003274 <HAL_GetTick>
 8005300:	4602      	mov	r2, r0
 8005302:	693b      	ldr	r3, [r7, #16]
 8005304:	1ad3      	subs	r3, r2, r3
 8005306:	2b64      	cmp	r3, #100	@ 0x64
 8005308:	d901      	bls.n	800530e <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 800530a:	2303      	movs	r3, #3
 800530c:	e1f3      	b.n	80056f6 <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 800530e:	4b51      	ldr	r3, [pc, #324]	@ (8005454 <HAL_RCC_OscConfig+0x240>)
 8005310:	681b      	ldr	r3, [r3, #0]
 8005312:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8005316:	2b00      	cmp	r3, #0
 8005318:	d1f0      	bne.n	80052fc <HAL_RCC_OscConfig+0xe8>
 800531a:	e000      	b.n	800531e <HAL_RCC_OscConfig+0x10a>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 800531c:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 800531e:	687b      	ldr	r3, [r7, #4]
 8005320:	681b      	ldr	r3, [r3, #0]
 8005322:	f003 0302 	and.w	r3, r3, #2
 8005326:	2b00      	cmp	r3, #0
 8005328:	d063      	beq.n	80053f2 <HAL_RCC_OscConfig+0x1de>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) || \
 800532a:	4b4a      	ldr	r3, [pc, #296]	@ (8005454 <HAL_RCC_OscConfig+0x240>)
 800532c:	689b      	ldr	r3, [r3, #8]
 800532e:	f003 030c 	and.w	r3, r3, #12
 8005332:	2b00      	cmp	r3, #0
 8005334:	d00b      	beq.n	800534e <HAL_RCC_OscConfig+0x13a>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8005336:	4b47      	ldr	r3, [pc, #284]	@ (8005454 <HAL_RCC_OscConfig+0x240>)
 8005338:	689b      	ldr	r3, [r3, #8]
 800533a:	f003 030c 	and.w	r3, r3, #12
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) || \
 800533e:	2b08      	cmp	r3, #8
 8005340:	d11c      	bne.n	800537c <HAL_RCC_OscConfig+0x168>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8005342:	4b44      	ldr	r3, [pc, #272]	@ (8005454 <HAL_RCC_OscConfig+0x240>)
 8005344:	685b      	ldr	r3, [r3, #4]
 8005346:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 800534a:	2b00      	cmp	r3, #0
 800534c:	d116      	bne.n	800537c <HAL_RCC_OscConfig+0x168>
    {
      /* When HSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 800534e:	4b41      	ldr	r3, [pc, #260]	@ (8005454 <HAL_RCC_OscConfig+0x240>)
 8005350:	681b      	ldr	r3, [r3, #0]
 8005352:	f003 0302 	and.w	r3, r3, #2
 8005356:	2b00      	cmp	r3, #0
 8005358:	d005      	beq.n	8005366 <HAL_RCC_OscConfig+0x152>
 800535a:	687b      	ldr	r3, [r7, #4]
 800535c:	68db      	ldr	r3, [r3, #12]
 800535e:	2b01      	cmp	r3, #1
 8005360:	d001      	beq.n	8005366 <HAL_RCC_OscConfig+0x152>
      {
        return HAL_ERROR;
 8005362:	2301      	movs	r3, #1
 8005364:	e1c7      	b.n	80056f6 <HAL_RCC_OscConfig+0x4e2>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8005366:	4b3b      	ldr	r3, [pc, #236]	@ (8005454 <HAL_RCC_OscConfig+0x240>)
 8005368:	681b      	ldr	r3, [r3, #0]
 800536a:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 800536e:	687b      	ldr	r3, [r7, #4]
 8005370:	691b      	ldr	r3, [r3, #16]
 8005372:	00db      	lsls	r3, r3, #3
 8005374:	4937      	ldr	r1, [pc, #220]	@ (8005454 <HAL_RCC_OscConfig+0x240>)
 8005376:	4313      	orrs	r3, r2
 8005378:	600b      	str	r3, [r1, #0]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 800537a:	e03a      	b.n	80053f2 <HAL_RCC_OscConfig+0x1de>
      }
    }
    else
    {
      /* Check the HSI State */
      if ((RCC_OscInitStruct->HSIState) != RCC_HSI_OFF)
 800537c:	687b      	ldr	r3, [r7, #4]
 800537e:	68db      	ldr	r3, [r3, #12]
 8005380:	2b00      	cmp	r3, #0
 8005382:	d020      	beq.n	80053c6 <HAL_RCC_OscConfig+0x1b2>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8005384:	4b34      	ldr	r3, [pc, #208]	@ (8005458 <HAL_RCC_OscConfig+0x244>)
 8005386:	2201      	movs	r2, #1
 8005388:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800538a:	f7fd ff73 	bl	8003274 <HAL_GetTick>
 800538e:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8005390:	e008      	b.n	80053a4 <HAL_RCC_OscConfig+0x190>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8005392:	f7fd ff6f 	bl	8003274 <HAL_GetTick>
 8005396:	4602      	mov	r2, r0
 8005398:	693b      	ldr	r3, [r7, #16]
 800539a:	1ad3      	subs	r3, r2, r3
 800539c:	2b02      	cmp	r3, #2
 800539e:	d901      	bls.n	80053a4 <HAL_RCC_OscConfig+0x190>
          {
            return HAL_TIMEOUT;
 80053a0:	2303      	movs	r3, #3
 80053a2:	e1a8      	b.n	80056f6 <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80053a4:	4b2b      	ldr	r3, [pc, #172]	@ (8005454 <HAL_RCC_OscConfig+0x240>)
 80053a6:	681b      	ldr	r3, [r3, #0]
 80053a8:	f003 0302 	and.w	r3, r3, #2
 80053ac:	2b00      	cmp	r3, #0
 80053ae:	d0f0      	beq.n	8005392 <HAL_RCC_OscConfig+0x17e>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value. */
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80053b0:	4b28      	ldr	r3, [pc, #160]	@ (8005454 <HAL_RCC_OscConfig+0x240>)
 80053b2:	681b      	ldr	r3, [r3, #0]
 80053b4:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 80053b8:	687b      	ldr	r3, [r7, #4]
 80053ba:	691b      	ldr	r3, [r3, #16]
 80053bc:	00db      	lsls	r3, r3, #3
 80053be:	4925      	ldr	r1, [pc, #148]	@ (8005454 <HAL_RCC_OscConfig+0x240>)
 80053c0:	4313      	orrs	r3, r2
 80053c2:	600b      	str	r3, [r1, #0]
 80053c4:	e015      	b.n	80053f2 <HAL_RCC_OscConfig+0x1de>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 80053c6:	4b24      	ldr	r3, [pc, #144]	@ (8005458 <HAL_RCC_OscConfig+0x244>)
 80053c8:	2200      	movs	r2, #0
 80053ca:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80053cc:	f7fd ff52 	bl	8003274 <HAL_GetTick>
 80053d0:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80053d2:	e008      	b.n	80053e6 <HAL_RCC_OscConfig+0x1d2>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 80053d4:	f7fd ff4e 	bl	8003274 <HAL_GetTick>
 80053d8:	4602      	mov	r2, r0
 80053da:	693b      	ldr	r3, [r7, #16]
 80053dc:	1ad3      	subs	r3, r2, r3
 80053de:	2b02      	cmp	r3, #2
 80053e0:	d901      	bls.n	80053e6 <HAL_RCC_OscConfig+0x1d2>
          {
            return HAL_TIMEOUT;
 80053e2:	2303      	movs	r3, #3
 80053e4:	e187      	b.n	80056f6 <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80053e6:	4b1b      	ldr	r3, [pc, #108]	@ (8005454 <HAL_RCC_OscConfig+0x240>)
 80053e8:	681b      	ldr	r3, [r3, #0]
 80053ea:	f003 0302 	and.w	r3, r3, #2
 80053ee:	2b00      	cmp	r3, #0
 80053f0:	d1f0      	bne.n	80053d4 <HAL_RCC_OscConfig+0x1c0>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 80053f2:	687b      	ldr	r3, [r7, #4]
 80053f4:	681b      	ldr	r3, [r3, #0]
 80053f6:	f003 0308 	and.w	r3, r3, #8
 80053fa:	2b00      	cmp	r3, #0
 80053fc:	d036      	beq.n	800546c <HAL_RCC_OscConfig+0x258>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if ((RCC_OscInitStruct->LSIState) != RCC_LSI_OFF)
 80053fe:	687b      	ldr	r3, [r7, #4]
 8005400:	695b      	ldr	r3, [r3, #20]
 8005402:	2b00      	cmp	r3, #0
 8005404:	d016      	beq.n	8005434 <HAL_RCC_OscConfig+0x220>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8005406:	4b15      	ldr	r3, [pc, #84]	@ (800545c <HAL_RCC_OscConfig+0x248>)
 8005408:	2201      	movs	r2, #1
 800540a:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800540c:	f7fd ff32 	bl	8003274 <HAL_GetTick>
 8005410:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8005412:	e008      	b.n	8005426 <HAL_RCC_OscConfig+0x212>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8005414:	f7fd ff2e 	bl	8003274 <HAL_GetTick>
 8005418:	4602      	mov	r2, r0
 800541a:	693b      	ldr	r3, [r7, #16]
 800541c:	1ad3      	subs	r3, r2, r3
 800541e:	2b02      	cmp	r3, #2
 8005420:	d901      	bls.n	8005426 <HAL_RCC_OscConfig+0x212>
        {
          return HAL_TIMEOUT;
 8005422:	2303      	movs	r3, #3
 8005424:	e167      	b.n	80056f6 <HAL_RCC_OscConfig+0x4e2>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8005426:	4b0b      	ldr	r3, [pc, #44]	@ (8005454 <HAL_RCC_OscConfig+0x240>)
 8005428:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 800542a:	f003 0302 	and.w	r3, r3, #2
 800542e:	2b00      	cmp	r3, #0
 8005430:	d0f0      	beq.n	8005414 <HAL_RCC_OscConfig+0x200>
 8005432:	e01b      	b.n	800546c <HAL_RCC_OscConfig+0x258>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8005434:	4b09      	ldr	r3, [pc, #36]	@ (800545c <HAL_RCC_OscConfig+0x248>)
 8005436:	2200      	movs	r2, #0
 8005438:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 800543a:	f7fd ff1b 	bl	8003274 <HAL_GetTick>
 800543e:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8005440:	e00e      	b.n	8005460 <HAL_RCC_OscConfig+0x24c>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8005442:	f7fd ff17 	bl	8003274 <HAL_GetTick>
 8005446:	4602      	mov	r2, r0
 8005448:	693b      	ldr	r3, [r7, #16]
 800544a:	1ad3      	subs	r3, r2, r3
 800544c:	2b02      	cmp	r3, #2
 800544e:	d907      	bls.n	8005460 <HAL_RCC_OscConfig+0x24c>
        {
          return HAL_TIMEOUT;
 8005450:	2303      	movs	r3, #3
 8005452:	e150      	b.n	80056f6 <HAL_RCC_OscConfig+0x4e2>
 8005454:	40023800 	.word	0x40023800
 8005458:	42470000 	.word	0x42470000
 800545c:	42470e80 	.word	0x42470e80
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8005460:	4b88      	ldr	r3, [pc, #544]	@ (8005684 <HAL_RCC_OscConfig+0x470>)
 8005462:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8005464:	f003 0302 	and.w	r3, r3, #2
 8005468:	2b00      	cmp	r3, #0
 800546a:	d1ea      	bne.n	8005442 <HAL_RCC_OscConfig+0x22e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 800546c:	687b      	ldr	r3, [r7, #4]
 800546e:	681b      	ldr	r3, [r3, #0]
 8005470:	f003 0304 	and.w	r3, r3, #4
 8005474:	2b00      	cmp	r3, #0
 8005476:	f000 8097 	beq.w	80055a8 <HAL_RCC_OscConfig+0x394>
  {
    FlagStatus       pwrclkchanged = RESET;
 800547a:	2300      	movs	r3, #0
 800547c:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 800547e:	4b81      	ldr	r3, [pc, #516]	@ (8005684 <HAL_RCC_OscConfig+0x470>)
 8005480:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8005482:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8005486:	2b00      	cmp	r3, #0
 8005488:	d10f      	bne.n	80054aa <HAL_RCC_OscConfig+0x296>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 800548a:	2300      	movs	r3, #0
 800548c:	60bb      	str	r3, [r7, #8]
 800548e:	4b7d      	ldr	r3, [pc, #500]	@ (8005684 <HAL_RCC_OscConfig+0x470>)
 8005490:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8005492:	4a7c      	ldr	r2, [pc, #496]	@ (8005684 <HAL_RCC_OscConfig+0x470>)
 8005494:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8005498:	6413      	str	r3, [r2, #64]	@ 0x40
 800549a:	4b7a      	ldr	r3, [pc, #488]	@ (8005684 <HAL_RCC_OscConfig+0x470>)
 800549c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800549e:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 80054a2:	60bb      	str	r3, [r7, #8]
 80054a4:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 80054a6:	2301      	movs	r3, #1
 80054a8:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80054aa:	4b77      	ldr	r3, [pc, #476]	@ (8005688 <HAL_RCC_OscConfig+0x474>)
 80054ac:	681b      	ldr	r3, [r3, #0]
 80054ae:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80054b2:	2b00      	cmp	r3, #0
 80054b4:	d118      	bne.n	80054e8 <HAL_RCC_OscConfig+0x2d4>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 80054b6:	4b74      	ldr	r3, [pc, #464]	@ (8005688 <HAL_RCC_OscConfig+0x474>)
 80054b8:	681b      	ldr	r3, [r3, #0]
 80054ba:	4a73      	ldr	r2, [pc, #460]	@ (8005688 <HAL_RCC_OscConfig+0x474>)
 80054bc:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 80054c0:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 80054c2:	f7fd fed7 	bl	8003274 <HAL_GetTick>
 80054c6:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80054c8:	e008      	b.n	80054dc <HAL_RCC_OscConfig+0x2c8>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80054ca:	f7fd fed3 	bl	8003274 <HAL_GetTick>
 80054ce:	4602      	mov	r2, r0
 80054d0:	693b      	ldr	r3, [r7, #16]
 80054d2:	1ad3      	subs	r3, r2, r3
 80054d4:	2b02      	cmp	r3, #2
 80054d6:	d901      	bls.n	80054dc <HAL_RCC_OscConfig+0x2c8>
        {
          return HAL_TIMEOUT;
 80054d8:	2303      	movs	r3, #3
 80054da:	e10c      	b.n	80056f6 <HAL_RCC_OscConfig+0x4e2>
      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80054dc:	4b6a      	ldr	r3, [pc, #424]	@ (8005688 <HAL_RCC_OscConfig+0x474>)
 80054de:	681b      	ldr	r3, [r3, #0]
 80054e0:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80054e4:	2b00      	cmp	r3, #0
 80054e6:	d0f0      	beq.n	80054ca <HAL_RCC_OscConfig+0x2b6>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 80054e8:	687b      	ldr	r3, [r7, #4]
 80054ea:	689b      	ldr	r3, [r3, #8]
 80054ec:	2b01      	cmp	r3, #1
 80054ee:	d106      	bne.n	80054fe <HAL_RCC_OscConfig+0x2ea>
 80054f0:	4b64      	ldr	r3, [pc, #400]	@ (8005684 <HAL_RCC_OscConfig+0x470>)
 80054f2:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80054f4:	4a63      	ldr	r2, [pc, #396]	@ (8005684 <HAL_RCC_OscConfig+0x470>)
 80054f6:	f043 0301 	orr.w	r3, r3, #1
 80054fa:	6713      	str	r3, [r2, #112]	@ 0x70
 80054fc:	e01c      	b.n	8005538 <HAL_RCC_OscConfig+0x324>
 80054fe:	687b      	ldr	r3, [r7, #4]
 8005500:	689b      	ldr	r3, [r3, #8]
 8005502:	2b05      	cmp	r3, #5
 8005504:	d10c      	bne.n	8005520 <HAL_RCC_OscConfig+0x30c>
 8005506:	4b5f      	ldr	r3, [pc, #380]	@ (8005684 <HAL_RCC_OscConfig+0x470>)
 8005508:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800550a:	4a5e      	ldr	r2, [pc, #376]	@ (8005684 <HAL_RCC_OscConfig+0x470>)
 800550c:	f043 0304 	orr.w	r3, r3, #4
 8005510:	6713      	str	r3, [r2, #112]	@ 0x70
 8005512:	4b5c      	ldr	r3, [pc, #368]	@ (8005684 <HAL_RCC_OscConfig+0x470>)
 8005514:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8005516:	4a5b      	ldr	r2, [pc, #364]	@ (8005684 <HAL_RCC_OscConfig+0x470>)
 8005518:	f043 0301 	orr.w	r3, r3, #1
 800551c:	6713      	str	r3, [r2, #112]	@ 0x70
 800551e:	e00b      	b.n	8005538 <HAL_RCC_OscConfig+0x324>
 8005520:	4b58      	ldr	r3, [pc, #352]	@ (8005684 <HAL_RCC_OscConfig+0x470>)
 8005522:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8005524:	4a57      	ldr	r2, [pc, #348]	@ (8005684 <HAL_RCC_OscConfig+0x470>)
 8005526:	f023 0301 	bic.w	r3, r3, #1
 800552a:	6713      	str	r3, [r2, #112]	@ 0x70
 800552c:	4b55      	ldr	r3, [pc, #340]	@ (8005684 <HAL_RCC_OscConfig+0x470>)
 800552e:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8005530:	4a54      	ldr	r2, [pc, #336]	@ (8005684 <HAL_RCC_OscConfig+0x470>)
 8005532:	f023 0304 	bic.w	r3, r3, #4
 8005536:	6713      	str	r3, [r2, #112]	@ 0x70
    /* Check the LSE State */
    if ((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 8005538:	687b      	ldr	r3, [r7, #4]
 800553a:	689b      	ldr	r3, [r3, #8]
 800553c:	2b00      	cmp	r3, #0
 800553e:	d015      	beq.n	800556c <HAL_RCC_OscConfig+0x358>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8005540:	f7fd fe98 	bl	8003274 <HAL_GetTick>
 8005544:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8005546:	e00a      	b.n	800555e <HAL_RCC_OscConfig+0x34a>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8005548:	f7fd fe94 	bl	8003274 <HAL_GetTick>
 800554c:	4602      	mov	r2, r0
 800554e:	693b      	ldr	r3, [r7, #16]
 8005550:	1ad3      	subs	r3, r2, r3
 8005552:	f241 3288 	movw	r2, #5000	@ 0x1388
 8005556:	4293      	cmp	r3, r2
 8005558:	d901      	bls.n	800555e <HAL_RCC_OscConfig+0x34a>
        {
          return HAL_TIMEOUT;
 800555a:	2303      	movs	r3, #3
 800555c:	e0cb      	b.n	80056f6 <HAL_RCC_OscConfig+0x4e2>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 800555e:	4b49      	ldr	r3, [pc, #292]	@ (8005684 <HAL_RCC_OscConfig+0x470>)
 8005560:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8005562:	f003 0302 	and.w	r3, r3, #2
 8005566:	2b00      	cmp	r3, #0
 8005568:	d0ee      	beq.n	8005548 <HAL_RCC_OscConfig+0x334>
 800556a:	e014      	b.n	8005596 <HAL_RCC_OscConfig+0x382>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 800556c:	f7fd fe82 	bl	8003274 <HAL_GetTick>
 8005570:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8005572:	e00a      	b.n	800558a <HAL_RCC_OscConfig+0x376>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8005574:	f7fd fe7e 	bl	8003274 <HAL_GetTick>
 8005578:	4602      	mov	r2, r0
 800557a:	693b      	ldr	r3, [r7, #16]
 800557c:	1ad3      	subs	r3, r2, r3
 800557e:	f241 3288 	movw	r2, #5000	@ 0x1388
 8005582:	4293      	cmp	r3, r2
 8005584:	d901      	bls.n	800558a <HAL_RCC_OscConfig+0x376>
        {
          return HAL_TIMEOUT;
 8005586:	2303      	movs	r3, #3
 8005588:	e0b5      	b.n	80056f6 <HAL_RCC_OscConfig+0x4e2>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 800558a:	4b3e      	ldr	r3, [pc, #248]	@ (8005684 <HAL_RCC_OscConfig+0x470>)
 800558c:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800558e:	f003 0302 	and.w	r3, r3, #2
 8005592:	2b00      	cmp	r3, #0
 8005594:	d1ee      	bne.n	8005574 <HAL_RCC_OscConfig+0x360>
        }
      }
    }

    /* Restore clock configuration if changed */
    if (pwrclkchanged == SET)
 8005596:	7dfb      	ldrb	r3, [r7, #23]
 8005598:	2b01      	cmp	r3, #1
 800559a:	d105      	bne.n	80055a8 <HAL_RCC_OscConfig+0x394>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 800559c:	4b39      	ldr	r3, [pc, #228]	@ (8005684 <HAL_RCC_OscConfig+0x470>)
 800559e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80055a0:	4a38      	ldr	r2, [pc, #224]	@ (8005684 <HAL_RCC_OscConfig+0x470>)
 80055a2:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 80055a6:	6413      	str	r3, [r2, #64]	@ 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 80055a8:	687b      	ldr	r3, [r7, #4]
 80055aa:	699b      	ldr	r3, [r3, #24]
 80055ac:	2b00      	cmp	r3, #0
 80055ae:	f000 80a1 	beq.w	80056f4 <HAL_RCC_OscConfig+0x4e0>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 80055b2:	4b34      	ldr	r3, [pc, #208]	@ (8005684 <HAL_RCC_OscConfig+0x470>)
 80055b4:	689b      	ldr	r3, [r3, #8]
 80055b6:	f003 030c 	and.w	r3, r3, #12
 80055ba:	2b08      	cmp	r3, #8
 80055bc:	d05c      	beq.n	8005678 <HAL_RCC_OscConfig+0x464>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 80055be:	687b      	ldr	r3, [r7, #4]
 80055c0:	699b      	ldr	r3, [r3, #24]
 80055c2:	2b02      	cmp	r3, #2
 80055c4:	d141      	bne.n	800564a <HAL_RCC_OscConfig+0x436>
        assert_param(IS_RCC_PLLN_VALUE(RCC_OscInitStruct->PLL.PLLN));
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80055c6:	4b31      	ldr	r3, [pc, #196]	@ (800568c <HAL_RCC_OscConfig+0x478>)
 80055c8:	2200      	movs	r2, #0
 80055ca:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80055cc:	f7fd fe52 	bl	8003274 <HAL_GetTick>
 80055d0:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80055d2:	e008      	b.n	80055e6 <HAL_RCC_OscConfig+0x3d2>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80055d4:	f7fd fe4e 	bl	8003274 <HAL_GetTick>
 80055d8:	4602      	mov	r2, r0
 80055da:	693b      	ldr	r3, [r7, #16]
 80055dc:	1ad3      	subs	r3, r2, r3
 80055de:	2b02      	cmp	r3, #2
 80055e0:	d901      	bls.n	80055e6 <HAL_RCC_OscConfig+0x3d2>
          {
            return HAL_TIMEOUT;
 80055e2:	2303      	movs	r3, #3
 80055e4:	e087      	b.n	80056f6 <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80055e6:	4b27      	ldr	r3, [pc, #156]	@ (8005684 <HAL_RCC_OscConfig+0x470>)
 80055e8:	681b      	ldr	r3, [r3, #0]
 80055ea:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 80055ee:	2b00      	cmp	r3, #0
 80055f0:	d1f0      	bne.n	80055d4 <HAL_RCC_OscConfig+0x3c0>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 80055f2:	687b      	ldr	r3, [r7, #4]
 80055f4:	69da      	ldr	r2, [r3, #28]
 80055f6:	687b      	ldr	r3, [r7, #4]
 80055f8:	6a1b      	ldr	r3, [r3, #32]
 80055fa:	431a      	orrs	r2, r3
 80055fc:	687b      	ldr	r3, [r7, #4]
 80055fe:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8005600:	019b      	lsls	r3, r3, #6
 8005602:	431a      	orrs	r2, r3
 8005604:	687b      	ldr	r3, [r7, #4]
 8005606:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8005608:	085b      	lsrs	r3, r3, #1
 800560a:	3b01      	subs	r3, #1
 800560c:	041b      	lsls	r3, r3, #16
 800560e:	431a      	orrs	r2, r3
 8005610:	687b      	ldr	r3, [r7, #4]
 8005612:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8005614:	061b      	lsls	r3, r3, #24
 8005616:	491b      	ldr	r1, [pc, #108]	@ (8005684 <HAL_RCC_OscConfig+0x470>)
 8005618:	4313      	orrs	r3, r2
 800561a:	604b      	str	r3, [r1, #4]
                                 RCC_OscInitStruct->PLL.PLLM                                                 | \
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)             | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos) | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 800561c:	4b1b      	ldr	r3, [pc, #108]	@ (800568c <HAL_RCC_OscConfig+0x478>)
 800561e:	2201      	movs	r2, #1
 8005620:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8005622:	f7fd fe27 	bl	8003274 <HAL_GetTick>
 8005626:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8005628:	e008      	b.n	800563c <HAL_RCC_OscConfig+0x428>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800562a:	f7fd fe23 	bl	8003274 <HAL_GetTick>
 800562e:	4602      	mov	r2, r0
 8005630:	693b      	ldr	r3, [r7, #16]
 8005632:	1ad3      	subs	r3, r2, r3
 8005634:	2b02      	cmp	r3, #2
 8005636:	d901      	bls.n	800563c <HAL_RCC_OscConfig+0x428>
          {
            return HAL_TIMEOUT;
 8005638:	2303      	movs	r3, #3
 800563a:	e05c      	b.n	80056f6 <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 800563c:	4b11      	ldr	r3, [pc, #68]	@ (8005684 <HAL_RCC_OscConfig+0x470>)
 800563e:	681b      	ldr	r3, [r3, #0]
 8005640:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8005644:	2b00      	cmp	r3, #0
 8005646:	d0f0      	beq.n	800562a <HAL_RCC_OscConfig+0x416>
 8005648:	e054      	b.n	80056f4 <HAL_RCC_OscConfig+0x4e0>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800564a:	4b10      	ldr	r3, [pc, #64]	@ (800568c <HAL_RCC_OscConfig+0x478>)
 800564c:	2200      	movs	r2, #0
 800564e:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8005650:	f7fd fe10 	bl	8003274 <HAL_GetTick>
 8005654:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8005656:	e008      	b.n	800566a <HAL_RCC_OscConfig+0x456>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8005658:	f7fd fe0c 	bl	8003274 <HAL_GetTick>
 800565c:	4602      	mov	r2, r0
 800565e:	693b      	ldr	r3, [r7, #16]
 8005660:	1ad3      	subs	r3, r2, r3
 8005662:	2b02      	cmp	r3, #2
 8005664:	d901      	bls.n	800566a <HAL_RCC_OscConfig+0x456>
          {
            return HAL_TIMEOUT;
 8005666:	2303      	movs	r3, #3
 8005668:	e045      	b.n	80056f6 <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800566a:	4b06      	ldr	r3, [pc, #24]	@ (8005684 <HAL_RCC_OscConfig+0x470>)
 800566c:	681b      	ldr	r3, [r3, #0]
 800566e:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8005672:	2b00      	cmp	r3, #0
 8005674:	d1f0      	bne.n	8005658 <HAL_RCC_OscConfig+0x444>
 8005676:	e03d      	b.n	80056f4 <HAL_RCC_OscConfig+0x4e0>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8005678:	687b      	ldr	r3, [r7, #4]
 800567a:	699b      	ldr	r3, [r3, #24]
 800567c:	2b01      	cmp	r3, #1
 800567e:	d107      	bne.n	8005690 <HAL_RCC_OscConfig+0x47c>
      {
        return HAL_ERROR;
 8005680:	2301      	movs	r3, #1
 8005682:	e038      	b.n	80056f6 <HAL_RCC_OscConfig+0x4e2>
 8005684:	40023800 	.word	0x40023800
 8005688:	40007000 	.word	0x40007000
 800568c:	42470060 	.word	0x42470060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 8005690:	4b1b      	ldr	r3, [pc, #108]	@ (8005700 <HAL_RCC_OscConfig+0x4ec>)
 8005692:	685b      	ldr	r3, [r3, #4]
 8005694:	60fb      	str	r3, [r7, #12]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
#else
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8005696:	687b      	ldr	r3, [r7, #4]
 8005698:	699b      	ldr	r3, [r3, #24]
 800569a:	2b01      	cmp	r3, #1
 800569c:	d028      	beq.n	80056f0 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800569e:	68fb      	ldr	r3, [r7, #12]
 80056a0:	f403 0280 	and.w	r2, r3, #4194304	@ 0x400000
 80056a4:	687b      	ldr	r3, [r7, #4]
 80056a6:	69db      	ldr	r3, [r3, #28]
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 80056a8:	429a      	cmp	r2, r3
 80056aa:	d121      	bne.n	80056f0 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 80056ac:	68fb      	ldr	r3, [r7, #12]
 80056ae:	f003 023f 	and.w	r2, r3, #63	@ 0x3f
 80056b2:	687b      	ldr	r3, [r7, #4]
 80056b4:	6a1b      	ldr	r3, [r3, #32]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80056b6:	429a      	cmp	r2, r3
 80056b8:	d11a      	bne.n	80056f0 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 80056ba:	68fa      	ldr	r2, [r7, #12]
 80056bc:	f647 73c0 	movw	r3, #32704	@ 0x7fc0
 80056c0:	4013      	ands	r3, r2
 80056c2:	687a      	ldr	r2, [r7, #4]
 80056c4:	6a52      	ldr	r2, [r2, #36]	@ 0x24
 80056c6:	0192      	lsls	r2, r2, #6
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 80056c8:	4293      	cmp	r3, r2
 80056ca:	d111      	bne.n	80056f0 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 80056cc:	68fb      	ldr	r3, [r7, #12]
 80056ce:	f403 3240 	and.w	r2, r3, #196608	@ 0x30000
 80056d2:	687b      	ldr	r3, [r7, #4]
 80056d4:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80056d6:	085b      	lsrs	r3, r3, #1
 80056d8:	3b01      	subs	r3, #1
 80056da:	041b      	lsls	r3, r3, #16
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 80056dc:	429a      	cmp	r2, r3
 80056de:	d107      	bne.n	80056f0 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
 80056e0:	68fb      	ldr	r3, [r7, #12]
 80056e2:	f003 6270 	and.w	r2, r3, #251658240	@ 0xf000000
 80056e6:	687b      	ldr	r3, [r7, #4]
 80056e8:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80056ea:	061b      	lsls	r3, r3, #24
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 80056ec:	429a      	cmp	r2, r3
 80056ee:	d001      	beq.n	80056f4 <HAL_RCC_OscConfig+0x4e0>
#endif /* RCC_PLLCFGR_PLLR */
        {
          return HAL_ERROR;
 80056f0:	2301      	movs	r3, #1
 80056f2:	e000      	b.n	80056f6 <HAL_RCC_OscConfig+0x4e2>
        }
      }
    }
  }
  return HAL_OK;
 80056f4:	2300      	movs	r3, #0
}
 80056f6:	4618      	mov	r0, r3
 80056f8:	3718      	adds	r7, #24
 80056fa:	46bd      	mov	sp, r7
 80056fc:	bd80      	pop	{r7, pc}
 80056fe:	bf00      	nop
 8005700:	40023800 	.word	0x40023800

08005704 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8005704:	b580      	push	{r7, lr}
 8005706:	b084      	sub	sp, #16
 8005708:	af00      	add	r7, sp, #0
 800570a:	6078      	str	r0, [r7, #4]
 800570c:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 800570e:	687b      	ldr	r3, [r7, #4]
 8005710:	2b00      	cmp	r3, #0
 8005712:	d101      	bne.n	8005718 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8005714:	2301      	movs	r3, #1
 8005716:	e0cc      	b.n	80058b2 <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 8005718:	4b68      	ldr	r3, [pc, #416]	@ (80058bc <HAL_RCC_ClockConfig+0x1b8>)
 800571a:	681b      	ldr	r3, [r3, #0]
 800571c:	f003 030f 	and.w	r3, r3, #15
 8005720:	683a      	ldr	r2, [r7, #0]
 8005722:	429a      	cmp	r2, r3
 8005724:	d90c      	bls.n	8005740 <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8005726:	4b65      	ldr	r3, [pc, #404]	@ (80058bc <HAL_RCC_ClockConfig+0x1b8>)
 8005728:	683a      	ldr	r2, [r7, #0]
 800572a:	b2d2      	uxtb	r2, r2
 800572c:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 800572e:	4b63      	ldr	r3, [pc, #396]	@ (80058bc <HAL_RCC_ClockConfig+0x1b8>)
 8005730:	681b      	ldr	r3, [r3, #0]
 8005732:	f003 030f 	and.w	r3, r3, #15
 8005736:	683a      	ldr	r2, [r7, #0]
 8005738:	429a      	cmp	r2, r3
 800573a:	d001      	beq.n	8005740 <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 800573c:	2301      	movs	r3, #1
 800573e:	e0b8      	b.n	80058b2 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8005740:	687b      	ldr	r3, [r7, #4]
 8005742:	681b      	ldr	r3, [r3, #0]
 8005744:	f003 0302 	and.w	r3, r3, #2
 8005748:	2b00      	cmp	r3, #0
 800574a:	d020      	beq.n	800578e <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 800574c:	687b      	ldr	r3, [r7, #4]
 800574e:	681b      	ldr	r3, [r3, #0]
 8005750:	f003 0304 	and.w	r3, r3, #4
 8005754:	2b00      	cmp	r3, #0
 8005756:	d005      	beq.n	8005764 <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8005758:	4b59      	ldr	r3, [pc, #356]	@ (80058c0 <HAL_RCC_ClockConfig+0x1bc>)
 800575a:	689b      	ldr	r3, [r3, #8]
 800575c:	4a58      	ldr	r2, [pc, #352]	@ (80058c0 <HAL_RCC_ClockConfig+0x1bc>)
 800575e:	f443 53e0 	orr.w	r3, r3, #7168	@ 0x1c00
 8005762:	6093      	str	r3, [r2, #8]
    }

    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8005764:	687b      	ldr	r3, [r7, #4]
 8005766:	681b      	ldr	r3, [r3, #0]
 8005768:	f003 0308 	and.w	r3, r3, #8
 800576c:	2b00      	cmp	r3, #0
 800576e:	d005      	beq.n	800577c <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8005770:	4b53      	ldr	r3, [pc, #332]	@ (80058c0 <HAL_RCC_ClockConfig+0x1bc>)
 8005772:	689b      	ldr	r3, [r3, #8]
 8005774:	4a52      	ldr	r2, [pc, #328]	@ (80058c0 <HAL_RCC_ClockConfig+0x1bc>)
 8005776:	f443 4360 	orr.w	r3, r3, #57344	@ 0xe000
 800577a:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 800577c:	4b50      	ldr	r3, [pc, #320]	@ (80058c0 <HAL_RCC_ClockConfig+0x1bc>)
 800577e:	689b      	ldr	r3, [r3, #8]
 8005780:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 8005784:	687b      	ldr	r3, [r7, #4]
 8005786:	689b      	ldr	r3, [r3, #8]
 8005788:	494d      	ldr	r1, [pc, #308]	@ (80058c0 <HAL_RCC_ClockConfig+0x1bc>)
 800578a:	4313      	orrs	r3, r2
 800578c:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 800578e:	687b      	ldr	r3, [r7, #4]
 8005790:	681b      	ldr	r3, [r3, #0]
 8005792:	f003 0301 	and.w	r3, r3, #1
 8005796:	2b00      	cmp	r3, #0
 8005798:	d044      	beq.n	8005824 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 800579a:	687b      	ldr	r3, [r7, #4]
 800579c:	685b      	ldr	r3, [r3, #4]
 800579e:	2b01      	cmp	r3, #1
 80057a0:	d107      	bne.n	80057b2 <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80057a2:	4b47      	ldr	r3, [pc, #284]	@ (80058c0 <HAL_RCC_ClockConfig+0x1bc>)
 80057a4:	681b      	ldr	r3, [r3, #0]
 80057a6:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80057aa:	2b00      	cmp	r3, #0
 80057ac:	d119      	bne.n	80057e2 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80057ae:	2301      	movs	r3, #1
 80057b0:	e07f      	b.n	80058b2 <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if ((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 80057b2:	687b      	ldr	r3, [r7, #4]
 80057b4:	685b      	ldr	r3, [r3, #4]
 80057b6:	2b02      	cmp	r3, #2
 80057b8:	d003      	beq.n	80057c2 <HAL_RCC_ClockConfig+0xbe>
             (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 80057ba:	687b      	ldr	r3, [r7, #4]
 80057bc:	685b      	ldr	r3, [r3, #4]
    else if ((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 80057be:	2b03      	cmp	r3, #3
 80057c0:	d107      	bne.n	80057d2 <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80057c2:	4b3f      	ldr	r3, [pc, #252]	@ (80058c0 <HAL_RCC_ClockConfig+0x1bc>)
 80057c4:	681b      	ldr	r3, [r3, #0]
 80057c6:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 80057ca:	2b00      	cmp	r3, #0
 80057cc:	d109      	bne.n	80057e2 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80057ce:	2301      	movs	r3, #1
 80057d0:	e06f      	b.n	80058b2 <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80057d2:	4b3b      	ldr	r3, [pc, #236]	@ (80058c0 <HAL_RCC_ClockConfig+0x1bc>)
 80057d4:	681b      	ldr	r3, [r3, #0]
 80057d6:	f003 0302 	and.w	r3, r3, #2
 80057da:	2b00      	cmp	r3, #0
 80057dc:	d101      	bne.n	80057e2 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80057de:	2301      	movs	r3, #1
 80057e0:	e067      	b.n	80058b2 <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 80057e2:	4b37      	ldr	r3, [pc, #220]	@ (80058c0 <HAL_RCC_ClockConfig+0x1bc>)
 80057e4:	689b      	ldr	r3, [r3, #8]
 80057e6:	f023 0203 	bic.w	r2, r3, #3
 80057ea:	687b      	ldr	r3, [r7, #4]
 80057ec:	685b      	ldr	r3, [r3, #4]
 80057ee:	4934      	ldr	r1, [pc, #208]	@ (80058c0 <HAL_RCC_ClockConfig+0x1bc>)
 80057f0:	4313      	orrs	r3, r2
 80057f2:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 80057f4:	f7fd fd3e 	bl	8003274 <HAL_GetTick>
 80057f8:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80057fa:	e00a      	b.n	8005812 <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 80057fc:	f7fd fd3a 	bl	8003274 <HAL_GetTick>
 8005800:	4602      	mov	r2, r0
 8005802:	68fb      	ldr	r3, [r7, #12]
 8005804:	1ad3      	subs	r3, r2, r3
 8005806:	f241 3288 	movw	r2, #5000	@ 0x1388
 800580a:	4293      	cmp	r3, r2
 800580c:	d901      	bls.n	8005812 <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 800580e:	2303      	movs	r3, #3
 8005810:	e04f      	b.n	80058b2 <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8005812:	4b2b      	ldr	r3, [pc, #172]	@ (80058c0 <HAL_RCC_ClockConfig+0x1bc>)
 8005814:	689b      	ldr	r3, [r3, #8]
 8005816:	f003 020c 	and.w	r2, r3, #12
 800581a:	687b      	ldr	r3, [r7, #4]
 800581c:	685b      	ldr	r3, [r3, #4]
 800581e:	009b      	lsls	r3, r3, #2
 8005820:	429a      	cmp	r2, r3
 8005822:	d1eb      	bne.n	80057fc <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 8005824:	4b25      	ldr	r3, [pc, #148]	@ (80058bc <HAL_RCC_ClockConfig+0x1b8>)
 8005826:	681b      	ldr	r3, [r3, #0]
 8005828:	f003 030f 	and.w	r3, r3, #15
 800582c:	683a      	ldr	r2, [r7, #0]
 800582e:	429a      	cmp	r2, r3
 8005830:	d20c      	bcs.n	800584c <HAL_RCC_ClockConfig+0x148>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8005832:	4b22      	ldr	r3, [pc, #136]	@ (80058bc <HAL_RCC_ClockConfig+0x1b8>)
 8005834:	683a      	ldr	r2, [r7, #0]
 8005836:	b2d2      	uxtb	r2, r2
 8005838:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 800583a:	4b20      	ldr	r3, [pc, #128]	@ (80058bc <HAL_RCC_ClockConfig+0x1b8>)
 800583c:	681b      	ldr	r3, [r3, #0]
 800583e:	f003 030f 	and.w	r3, r3, #15
 8005842:	683a      	ldr	r2, [r7, #0]
 8005844:	429a      	cmp	r2, r3
 8005846:	d001      	beq.n	800584c <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 8005848:	2301      	movs	r3, #1
 800584a:	e032      	b.n	80058b2 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 800584c:	687b      	ldr	r3, [r7, #4]
 800584e:	681b      	ldr	r3, [r3, #0]
 8005850:	f003 0304 	and.w	r3, r3, #4
 8005854:	2b00      	cmp	r3, #0
 8005856:	d008      	beq.n	800586a <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8005858:	4b19      	ldr	r3, [pc, #100]	@ (80058c0 <HAL_RCC_ClockConfig+0x1bc>)
 800585a:	689b      	ldr	r3, [r3, #8]
 800585c:	f423 52e0 	bic.w	r2, r3, #7168	@ 0x1c00
 8005860:	687b      	ldr	r3, [r7, #4]
 8005862:	68db      	ldr	r3, [r3, #12]
 8005864:	4916      	ldr	r1, [pc, #88]	@ (80058c0 <HAL_RCC_ClockConfig+0x1bc>)
 8005866:	4313      	orrs	r3, r2
 8005868:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 800586a:	687b      	ldr	r3, [r7, #4]
 800586c:	681b      	ldr	r3, [r3, #0]
 800586e:	f003 0308 	and.w	r3, r3, #8
 8005872:	2b00      	cmp	r3, #0
 8005874:	d009      	beq.n	800588a <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8005876:	4b12      	ldr	r3, [pc, #72]	@ (80058c0 <HAL_RCC_ClockConfig+0x1bc>)
 8005878:	689b      	ldr	r3, [r3, #8]
 800587a:	f423 4260 	bic.w	r2, r3, #57344	@ 0xe000
 800587e:	687b      	ldr	r3, [r7, #4]
 8005880:	691b      	ldr	r3, [r3, #16]
 8005882:	00db      	lsls	r3, r3, #3
 8005884:	490e      	ldr	r1, [pc, #56]	@ (80058c0 <HAL_RCC_ClockConfig+0x1bc>)
 8005886:	4313      	orrs	r3, r2
 8005888:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 800588a:	f000 f821 	bl	80058d0 <HAL_RCC_GetSysClockFreq>
 800588e:	4602      	mov	r2, r0
 8005890:	4b0b      	ldr	r3, [pc, #44]	@ (80058c0 <HAL_RCC_ClockConfig+0x1bc>)
 8005892:	689b      	ldr	r3, [r3, #8]
 8005894:	091b      	lsrs	r3, r3, #4
 8005896:	f003 030f 	and.w	r3, r3, #15
 800589a:	490a      	ldr	r1, [pc, #40]	@ (80058c4 <HAL_RCC_ClockConfig+0x1c0>)
 800589c:	5ccb      	ldrb	r3, [r1, r3]
 800589e:	fa22 f303 	lsr.w	r3, r2, r3
 80058a2:	4a09      	ldr	r2, [pc, #36]	@ (80058c8 <HAL_RCC_ClockConfig+0x1c4>)
 80058a4:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick(uwTickPrio);
 80058a6:	4b09      	ldr	r3, [pc, #36]	@ (80058cc <HAL_RCC_ClockConfig+0x1c8>)
 80058a8:	681b      	ldr	r3, [r3, #0]
 80058aa:	4618      	mov	r0, r3
 80058ac:	f7fd fc9e 	bl	80031ec <HAL_InitTick>

  return HAL_OK;
 80058b0:	2300      	movs	r3, #0
}
 80058b2:	4618      	mov	r0, r3
 80058b4:	3710      	adds	r7, #16
 80058b6:	46bd      	mov	sp, r7
 80058b8:	bd80      	pop	{r7, pc}
 80058ba:	bf00      	nop
 80058bc:	40023c00 	.word	0x40023c00
 80058c0:	40023800 	.word	0x40023800
 80058c4:	080089d0 	.word	0x080089d0
 80058c8:	20000024 	.word	0x20000024
 80058cc:	20000028 	.word	0x20000028

080058d0 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
__weak uint32_t HAL_RCC_GetSysClockFreq(void)
{
 80058d0:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 80058d4:	b094      	sub	sp, #80	@ 0x50
 80058d6:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U;
 80058d8:	2300      	movs	r3, #0
 80058da:	647b      	str	r3, [r7, #68]	@ 0x44
  uint32_t pllvco = 0U;
 80058dc:	2300      	movs	r3, #0
 80058de:	64fb      	str	r3, [r7, #76]	@ 0x4c
  uint32_t pllp = 0U;
 80058e0:	2300      	movs	r3, #0
 80058e2:	643b      	str	r3, [r7, #64]	@ 0x40
  uint32_t sysclockfreq = 0U;
 80058e4:	2300      	movs	r3, #0
 80058e6:	64bb      	str	r3, [r7, #72]	@ 0x48

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 80058e8:	4b79      	ldr	r3, [pc, #484]	@ (8005ad0 <HAL_RCC_GetSysClockFreq+0x200>)
 80058ea:	689b      	ldr	r3, [r3, #8]
 80058ec:	f003 030c 	and.w	r3, r3, #12
 80058f0:	2b08      	cmp	r3, #8
 80058f2:	d00d      	beq.n	8005910 <HAL_RCC_GetSysClockFreq+0x40>
 80058f4:	2b08      	cmp	r3, #8
 80058f6:	f200 80e1 	bhi.w	8005abc <HAL_RCC_GetSysClockFreq+0x1ec>
 80058fa:	2b00      	cmp	r3, #0
 80058fc:	d002      	beq.n	8005904 <HAL_RCC_GetSysClockFreq+0x34>
 80058fe:	2b04      	cmp	r3, #4
 8005900:	d003      	beq.n	800590a <HAL_RCC_GetSysClockFreq+0x3a>
 8005902:	e0db      	b.n	8005abc <HAL_RCC_GetSysClockFreq+0x1ec>
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 8005904:	4b73      	ldr	r3, [pc, #460]	@ (8005ad4 <HAL_RCC_GetSysClockFreq+0x204>)
 8005906:	64bb      	str	r3, [r7, #72]	@ 0x48
      break;
 8005908:	e0db      	b.n	8005ac2 <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 800590a:	4b73      	ldr	r3, [pc, #460]	@ (8005ad8 <HAL_RCC_GetSysClockFreq+0x208>)
 800590c:	64bb      	str	r3, [r7, #72]	@ 0x48
      break;
 800590e:	e0d8      	b.n	8005ac2 <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8005910:	4b6f      	ldr	r3, [pc, #444]	@ (8005ad0 <HAL_RCC_GetSysClockFreq+0x200>)
 8005912:	685b      	ldr	r3, [r3, #4]
 8005914:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 8005918:	647b      	str	r3, [r7, #68]	@ 0x44
      if (__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 800591a:	4b6d      	ldr	r3, [pc, #436]	@ (8005ad0 <HAL_RCC_GetSysClockFreq+0x200>)
 800591c:	685b      	ldr	r3, [r3, #4]
 800591e:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8005922:	2b00      	cmp	r3, #0
 8005924:	d063      	beq.n	80059ee <HAL_RCC_GetSysClockFreq+0x11e>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t)((((uint64_t) HSE_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8005926:	4b6a      	ldr	r3, [pc, #424]	@ (8005ad0 <HAL_RCC_GetSysClockFreq+0x200>)
 8005928:	685b      	ldr	r3, [r3, #4]
 800592a:	099b      	lsrs	r3, r3, #6
 800592c:	2200      	movs	r2, #0
 800592e:	63bb      	str	r3, [r7, #56]	@ 0x38
 8005930:	63fa      	str	r2, [r7, #60]	@ 0x3c
 8005932:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8005934:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8005938:	633b      	str	r3, [r7, #48]	@ 0x30
 800593a:	2300      	movs	r3, #0
 800593c:	637b      	str	r3, [r7, #52]	@ 0x34
 800593e:	e9d7 450c 	ldrd	r4, r5, [r7, #48]	@ 0x30
 8005942:	4622      	mov	r2, r4
 8005944:	462b      	mov	r3, r5
 8005946:	f04f 0000 	mov.w	r0, #0
 800594a:	f04f 0100 	mov.w	r1, #0
 800594e:	0159      	lsls	r1, r3, #5
 8005950:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8005954:	0150      	lsls	r0, r2, #5
 8005956:	4602      	mov	r2, r0
 8005958:	460b      	mov	r3, r1
 800595a:	4621      	mov	r1, r4
 800595c:	1a51      	subs	r1, r2, r1
 800595e:	6139      	str	r1, [r7, #16]
 8005960:	4629      	mov	r1, r5
 8005962:	eb63 0301 	sbc.w	r3, r3, r1
 8005966:	617b      	str	r3, [r7, #20]
 8005968:	f04f 0200 	mov.w	r2, #0
 800596c:	f04f 0300 	mov.w	r3, #0
 8005970:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 8005974:	4659      	mov	r1, fp
 8005976:	018b      	lsls	r3, r1, #6
 8005978:	4651      	mov	r1, sl
 800597a:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 800597e:	4651      	mov	r1, sl
 8005980:	018a      	lsls	r2, r1, #6
 8005982:	4651      	mov	r1, sl
 8005984:	ebb2 0801 	subs.w	r8, r2, r1
 8005988:	4659      	mov	r1, fp
 800598a:	eb63 0901 	sbc.w	r9, r3, r1
 800598e:	f04f 0200 	mov.w	r2, #0
 8005992:	f04f 0300 	mov.w	r3, #0
 8005996:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 800599a:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 800599e:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 80059a2:	4690      	mov	r8, r2
 80059a4:	4699      	mov	r9, r3
 80059a6:	4623      	mov	r3, r4
 80059a8:	eb18 0303 	adds.w	r3, r8, r3
 80059ac:	60bb      	str	r3, [r7, #8]
 80059ae:	462b      	mov	r3, r5
 80059b0:	eb49 0303 	adc.w	r3, r9, r3
 80059b4:	60fb      	str	r3, [r7, #12]
 80059b6:	f04f 0200 	mov.w	r2, #0
 80059ba:	f04f 0300 	mov.w	r3, #0
 80059be:	e9d7 4502 	ldrd	r4, r5, [r7, #8]
 80059c2:	4629      	mov	r1, r5
 80059c4:	024b      	lsls	r3, r1, #9
 80059c6:	4621      	mov	r1, r4
 80059c8:	ea43 53d1 	orr.w	r3, r3, r1, lsr #23
 80059cc:	4621      	mov	r1, r4
 80059ce:	024a      	lsls	r2, r1, #9
 80059d0:	4610      	mov	r0, r2
 80059d2:	4619      	mov	r1, r3
 80059d4:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 80059d6:	2200      	movs	r2, #0
 80059d8:	62bb      	str	r3, [r7, #40]	@ 0x28
 80059da:	62fa      	str	r2, [r7, #44]	@ 0x2c
 80059dc:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	@ 0x28
 80059e0:	f7fa fc56 	bl	8000290 <__aeabi_uldivmod>
 80059e4:	4602      	mov	r2, r0
 80059e6:	460b      	mov	r3, r1
 80059e8:	4613      	mov	r3, r2
 80059ea:	64fb      	str	r3, [r7, #76]	@ 0x4c
 80059ec:	e058      	b.n	8005aa0 <HAL_RCC_GetSysClockFreq+0x1d0>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t)((((uint64_t) HSI_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 80059ee:	4b38      	ldr	r3, [pc, #224]	@ (8005ad0 <HAL_RCC_GetSysClockFreq+0x200>)
 80059f0:	685b      	ldr	r3, [r3, #4]
 80059f2:	099b      	lsrs	r3, r3, #6
 80059f4:	2200      	movs	r2, #0
 80059f6:	4618      	mov	r0, r3
 80059f8:	4611      	mov	r1, r2
 80059fa:	f3c0 0308 	ubfx	r3, r0, #0, #9
 80059fe:	623b      	str	r3, [r7, #32]
 8005a00:	2300      	movs	r3, #0
 8005a02:	627b      	str	r3, [r7, #36]	@ 0x24
 8005a04:	e9d7 8908 	ldrd	r8, r9, [r7, #32]
 8005a08:	4642      	mov	r2, r8
 8005a0a:	464b      	mov	r3, r9
 8005a0c:	f04f 0000 	mov.w	r0, #0
 8005a10:	f04f 0100 	mov.w	r1, #0
 8005a14:	0159      	lsls	r1, r3, #5
 8005a16:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8005a1a:	0150      	lsls	r0, r2, #5
 8005a1c:	4602      	mov	r2, r0
 8005a1e:	460b      	mov	r3, r1
 8005a20:	4641      	mov	r1, r8
 8005a22:	ebb2 0a01 	subs.w	sl, r2, r1
 8005a26:	4649      	mov	r1, r9
 8005a28:	eb63 0b01 	sbc.w	fp, r3, r1
 8005a2c:	f04f 0200 	mov.w	r2, #0
 8005a30:	f04f 0300 	mov.w	r3, #0
 8005a34:	ea4f 138b 	mov.w	r3, fp, lsl #6
 8005a38:	ea43 639a 	orr.w	r3, r3, sl, lsr #26
 8005a3c:	ea4f 128a 	mov.w	r2, sl, lsl #6
 8005a40:	ebb2 040a 	subs.w	r4, r2, sl
 8005a44:	eb63 050b 	sbc.w	r5, r3, fp
 8005a48:	f04f 0200 	mov.w	r2, #0
 8005a4c:	f04f 0300 	mov.w	r3, #0
 8005a50:	00eb      	lsls	r3, r5, #3
 8005a52:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 8005a56:	00e2      	lsls	r2, r4, #3
 8005a58:	4614      	mov	r4, r2
 8005a5a:	461d      	mov	r5, r3
 8005a5c:	4643      	mov	r3, r8
 8005a5e:	18e3      	adds	r3, r4, r3
 8005a60:	603b      	str	r3, [r7, #0]
 8005a62:	464b      	mov	r3, r9
 8005a64:	eb45 0303 	adc.w	r3, r5, r3
 8005a68:	607b      	str	r3, [r7, #4]
 8005a6a:	f04f 0200 	mov.w	r2, #0
 8005a6e:	f04f 0300 	mov.w	r3, #0
 8005a72:	e9d7 4500 	ldrd	r4, r5, [r7]
 8005a76:	4629      	mov	r1, r5
 8005a78:	028b      	lsls	r3, r1, #10
 8005a7a:	4621      	mov	r1, r4
 8005a7c:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 8005a80:	4621      	mov	r1, r4
 8005a82:	028a      	lsls	r2, r1, #10
 8005a84:	4610      	mov	r0, r2
 8005a86:	4619      	mov	r1, r3
 8005a88:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8005a8a:	2200      	movs	r2, #0
 8005a8c:	61bb      	str	r3, [r7, #24]
 8005a8e:	61fa      	str	r2, [r7, #28]
 8005a90:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8005a94:	f7fa fbfc 	bl	8000290 <__aeabi_uldivmod>
 8005a98:	4602      	mov	r2, r0
 8005a9a:	460b      	mov	r3, r1
 8005a9c:	4613      	mov	r3, r2
 8005a9e:	64fb      	str	r3, [r7, #76]	@ 0x4c
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) * 2U);
 8005aa0:	4b0b      	ldr	r3, [pc, #44]	@ (8005ad0 <HAL_RCC_GetSysClockFreq+0x200>)
 8005aa2:	685b      	ldr	r3, [r3, #4]
 8005aa4:	0c1b      	lsrs	r3, r3, #16
 8005aa6:	f003 0303 	and.w	r3, r3, #3
 8005aaa:	3301      	adds	r3, #1
 8005aac:	005b      	lsls	r3, r3, #1
 8005aae:	643b      	str	r3, [r7, #64]	@ 0x40

      sysclockfreq = pllvco / pllp;
 8005ab0:	6cfa      	ldr	r2, [r7, #76]	@ 0x4c
 8005ab2:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8005ab4:	fbb2 f3f3 	udiv	r3, r2, r3
 8005ab8:	64bb      	str	r3, [r7, #72]	@ 0x48
      break;
 8005aba:	e002      	b.n	8005ac2 <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 8005abc:	4b05      	ldr	r3, [pc, #20]	@ (8005ad4 <HAL_RCC_GetSysClockFreq+0x204>)
 8005abe:	64bb      	str	r3, [r7, #72]	@ 0x48
      break;
 8005ac0:	bf00      	nop
    }
  }
  return sysclockfreq;
 8005ac2:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
}
 8005ac4:	4618      	mov	r0, r3
 8005ac6:	3750      	adds	r7, #80	@ 0x50
 8005ac8:	46bd      	mov	sp, r7
 8005aca:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8005ace:	bf00      	nop
 8005ad0:	40023800 	.word	0x40023800
 8005ad4:	00f42400 	.word	0x00f42400
 8005ad8:	007a1200 	.word	0x007a1200

08005adc <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8005adc:	b480      	push	{r7}
 8005ade:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8005ae0:	4b03      	ldr	r3, [pc, #12]	@ (8005af0 <HAL_RCC_GetHCLKFreq+0x14>)
 8005ae2:	681b      	ldr	r3, [r3, #0]
}
 8005ae4:	4618      	mov	r0, r3
 8005ae6:	46bd      	mov	sp, r7
 8005ae8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005aec:	4770      	bx	lr
 8005aee:	bf00      	nop
 8005af0:	20000024 	.word	0x20000024

08005af4 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8005af4:	b580      	push	{r7, lr}
 8005af6:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos]);
 8005af8:	f7ff fff0 	bl	8005adc <HAL_RCC_GetHCLKFreq>
 8005afc:	4602      	mov	r2, r0
 8005afe:	4b05      	ldr	r3, [pc, #20]	@ (8005b14 <HAL_RCC_GetPCLK1Freq+0x20>)
 8005b00:	689b      	ldr	r3, [r3, #8]
 8005b02:	0a9b      	lsrs	r3, r3, #10
 8005b04:	f003 0307 	and.w	r3, r3, #7
 8005b08:	4903      	ldr	r1, [pc, #12]	@ (8005b18 <HAL_RCC_GetPCLK1Freq+0x24>)
 8005b0a:	5ccb      	ldrb	r3, [r1, r3]
 8005b0c:	fa22 f303 	lsr.w	r3, r2, r3
}
 8005b10:	4618      	mov	r0, r3
 8005b12:	bd80      	pop	{r7, pc}
 8005b14:	40023800 	.word	0x40023800
 8005b18:	080089e0 	.word	0x080089e0

08005b1c <HAL_RCCEx_PeriphCLKConfig>:
  *         the backup registers) and RCC_BDCR register are set to their reset values.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8005b1c:	b580      	push	{r7, lr}
 8005b1e:	b086      	sub	sp, #24
 8005b20:	af00      	add	r7, sp, #0
 8005b22:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 8005b24:	2300      	movs	r3, #0
 8005b26:	617b      	str	r3, [r7, #20]
  uint32_t tmpreg1 = 0U;
 8005b28:	2300      	movs	r3, #0
 8005b2a:	613b      	str	r3, [r7, #16]

  /*----------------------- SAI/I2S Configuration (PLLI2S) -------------------*/
  /*----------------------- Common configuration SAI/I2S ---------------------*/
  /* In Case of SAI or I2S Clock Configuration through PLLI2S, PLLI2SN division
     factor is common parameters for both peripherals */
  if ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == RCC_PERIPHCLK_I2S) ||
 8005b2c:	687b      	ldr	r3, [r7, #4]
 8005b2e:	681b      	ldr	r3, [r3, #0]
 8005b30:	f003 0301 	and.w	r3, r3, #1
 8005b34:	2b00      	cmp	r3, #0
 8005b36:	d10b      	bne.n	8005b50 <HAL_RCCEx_PeriphCLKConfig+0x34>
      (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI_PLLI2S) == RCC_PERIPHCLK_SAI_PLLI2S) ||
 8005b38:	687b      	ldr	r3, [r7, #4]
 8005b3a:	681b      	ldr	r3, [r3, #0]
 8005b3c:	f003 0302 	and.w	r3, r3, #2
  if ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == RCC_PERIPHCLK_I2S) ||
 8005b40:	2b00      	cmp	r3, #0
 8005b42:	d105      	bne.n	8005b50 <HAL_RCCEx_PeriphCLKConfig+0x34>
      (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLLI2S) == RCC_PERIPHCLK_PLLI2S))
 8005b44:	687b      	ldr	r3, [r7, #4]
 8005b46:	681b      	ldr	r3, [r3, #0]
 8005b48:	f003 0340 	and.w	r3, r3, #64	@ 0x40
      (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI_PLLI2S) == RCC_PERIPHCLK_SAI_PLLI2S) ||
 8005b4c:	2b00      	cmp	r3, #0
 8005b4e:	d075      	beq.n	8005c3c <HAL_RCCEx_PeriphCLKConfig+0x120>
  {
    /* check for Parameters */
    assert_param(IS_RCC_PLLI2SN_VALUE(PeriphClkInit->PLLI2S.PLLI2SN));

    /* Disable the PLLI2S */
    __HAL_RCC_PLLI2S_DISABLE();
 8005b50:	4b91      	ldr	r3, [pc, #580]	@ (8005d98 <HAL_RCCEx_PeriphCLKConfig+0x27c>)
 8005b52:	2200      	movs	r2, #0
 8005b54:	601a      	str	r2, [r3, #0]
    /* Get tick */
    tickstart = HAL_GetTick();
 8005b56:	f7fd fb8d 	bl	8003274 <HAL_GetTick>
 8005b5a:	6178      	str	r0, [r7, #20]
    /* Wait till PLLI2S is disabled */
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  != RESET)
 8005b5c:	e008      	b.n	8005b70 <HAL_RCCEx_PeriphCLKConfig+0x54>
    {
      if ((HAL_GetTick() - tickstart) > PLLI2S_TIMEOUT_VALUE)
 8005b5e:	f7fd fb89 	bl	8003274 <HAL_GetTick>
 8005b62:	4602      	mov	r2, r0
 8005b64:	697b      	ldr	r3, [r7, #20]
 8005b66:	1ad3      	subs	r3, r2, r3
 8005b68:	2b02      	cmp	r3, #2
 8005b6a:	d901      	bls.n	8005b70 <HAL_RCCEx_PeriphCLKConfig+0x54>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 8005b6c:	2303      	movs	r3, #3
 8005b6e:	e189      	b.n	8005e84 <HAL_RCCEx_PeriphCLKConfig+0x368>
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  != RESET)
 8005b70:	4b8a      	ldr	r3, [pc, #552]	@ (8005d9c <HAL_RCCEx_PeriphCLKConfig+0x280>)
 8005b72:	681b      	ldr	r3, [r3, #0]
 8005b74:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 8005b78:	2b00      	cmp	r3, #0
 8005b7a:	d1f0      	bne.n	8005b5e <HAL_RCCEx_PeriphCLKConfig+0x42>
    }

    /*---------------------------- I2S configuration -------------------------*/
    /* In Case of I2S Clock Configuration through PLLI2S, PLLI2SR must be added
      only for I2S configuration */
    if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == (RCC_PERIPHCLK_I2S))
 8005b7c:	687b      	ldr	r3, [r7, #4]
 8005b7e:	681b      	ldr	r3, [r3, #0]
 8005b80:	f003 0301 	and.w	r3, r3, #1
 8005b84:	2b00      	cmp	r3, #0
 8005b86:	d009      	beq.n	8005b9c <HAL_RCCEx_PeriphCLKConfig+0x80>
      /* check for Parameters */
      assert_param(IS_RCC_PLLI2SR_VALUE(PeriphClkInit->PLLI2S.PLLI2SR));
      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO = f(VCO clock) = f(PLLI2S clock input) * (PLLI2SN/PLLM) */
      /* I2SCLK = f(PLLI2S clock output) = f(VCO clock) / PLLI2SR */
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN, PeriphClkInit->PLLI2S.PLLI2SR);
 8005b88:	687b      	ldr	r3, [r7, #4]
 8005b8a:	685b      	ldr	r3, [r3, #4]
 8005b8c:	019a      	lsls	r2, r3, #6
 8005b8e:	687b      	ldr	r3, [r7, #4]
 8005b90:	689b      	ldr	r3, [r3, #8]
 8005b92:	071b      	lsls	r3, r3, #28
 8005b94:	4981      	ldr	r1, [pc, #516]	@ (8005d9c <HAL_RCCEx_PeriphCLKConfig+0x280>)
 8005b96:	4313      	orrs	r3, r2
 8005b98:	f8c1 3084 	str.w	r3, [r1, #132]	@ 0x84
    }

    /*---------------------------- SAI configuration -------------------------*/
    /* In Case of SAI Clock Configuration through PLLI2S, PLLI2SQ and PLLI2S_DIVQ must
       be added only for SAI configuration */
    if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI_PLLI2S) == (RCC_PERIPHCLK_SAI_PLLI2S))
 8005b9c:	687b      	ldr	r3, [r7, #4]
 8005b9e:	681b      	ldr	r3, [r3, #0]
 8005ba0:	f003 0302 	and.w	r3, r3, #2
 8005ba4:	2b00      	cmp	r3, #0
 8005ba6:	d01f      	beq.n	8005be8 <HAL_RCCEx_PeriphCLKConfig+0xcc>
      /* Check the PLLI2S division factors */
      assert_param(IS_RCC_PLLI2SQ_VALUE(PeriphClkInit->PLLI2S.PLLI2SQ));
      assert_param(IS_RCC_PLLI2S_DIVQ_VALUE(PeriphClkInit->PLLI2SDivQ));

      /* Read PLLI2SR value from PLLI2SCFGR register (this value is not need for SAI configuration) */
      tmpreg1 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SR) >> RCC_PLLI2SCFGR_PLLI2SR_Pos);
 8005ba8:	4b7c      	ldr	r3, [pc, #496]	@ (8005d9c <HAL_RCCEx_PeriphCLKConfig+0x280>)
 8005baa:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 8005bae:	0f1b      	lsrs	r3, r3, #28
 8005bb0:	f003 0307 	and.w	r3, r3, #7
 8005bb4:	613b      	str	r3, [r7, #16]
      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO Input  = PLL_SOURCE/PLLM */
      /* PLLI2S_VCO Output = PLLI2S_VCO Input * PLLI2SN */
      /* SAI_CLK(first level) = PLLI2S_VCO Output/PLLI2SQ */
      __HAL_RCC_PLLI2S_SAICLK_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN, PeriphClkInit->PLLI2S.PLLI2SQ, tmpreg1);
 8005bb6:	687b      	ldr	r3, [r7, #4]
 8005bb8:	685b      	ldr	r3, [r3, #4]
 8005bba:	019a      	lsls	r2, r3, #6
 8005bbc:	687b      	ldr	r3, [r7, #4]
 8005bbe:	68db      	ldr	r3, [r3, #12]
 8005bc0:	061b      	lsls	r3, r3, #24
 8005bc2:	431a      	orrs	r2, r3
 8005bc4:	693b      	ldr	r3, [r7, #16]
 8005bc6:	071b      	lsls	r3, r3, #28
 8005bc8:	4974      	ldr	r1, [pc, #464]	@ (8005d9c <HAL_RCCEx_PeriphCLKConfig+0x280>)
 8005bca:	4313      	orrs	r3, r2
 8005bcc:	f8c1 3084 	str.w	r3, [r1, #132]	@ 0x84
      /* SAI_CLK_x = SAI_CLK(first level)/PLLI2SDIVQ */
      __HAL_RCC_PLLI2S_PLLSAICLKDIVQ_CONFIG(PeriphClkInit->PLLI2SDivQ);
 8005bd0:	4b72      	ldr	r3, [pc, #456]	@ (8005d9c <HAL_RCCEx_PeriphCLKConfig+0x280>)
 8005bd2:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 8005bd6:	f023 021f 	bic.w	r2, r3, #31
 8005bda:	687b      	ldr	r3, [r7, #4]
 8005bdc:	69db      	ldr	r3, [r3, #28]
 8005bde:	3b01      	subs	r3, #1
 8005be0:	496e      	ldr	r1, [pc, #440]	@ (8005d9c <HAL_RCCEx_PeriphCLKConfig+0x280>)
 8005be2:	4313      	orrs	r3, r2
 8005be4:	f8c1 308c 	str.w	r3, [r1, #140]	@ 0x8c
    }

    /*----------------- In Case of PLLI2S is just selected  -----------------*/
    if ((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_PLLI2S) == RCC_PERIPHCLK_PLLI2S)
 8005be8:	687b      	ldr	r3, [r7, #4]
 8005bea:	681b      	ldr	r3, [r3, #0]
 8005bec:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8005bf0:	2b00      	cmp	r3, #0
 8005bf2:	d00d      	beq.n	8005c10 <HAL_RCCEx_PeriphCLKConfig+0xf4>
      /* Check for Parameters */
      assert_param(IS_RCC_PLLI2SQ_VALUE(PeriphClkInit->PLLI2S.PLLI2SQ));
      assert_param(IS_RCC_PLLI2SR_VALUE(PeriphClkInit->PLLI2S.PLLI2SR));

      /* Configure the PLLI2S multiplication and division factors */
      __HAL_RCC_PLLI2S_SAICLK_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN, PeriphClkInit->PLLI2S.PLLI2SQ,
 8005bf4:	687b      	ldr	r3, [r7, #4]
 8005bf6:	685b      	ldr	r3, [r3, #4]
 8005bf8:	019a      	lsls	r2, r3, #6
 8005bfa:	687b      	ldr	r3, [r7, #4]
 8005bfc:	68db      	ldr	r3, [r3, #12]
 8005bfe:	061b      	lsls	r3, r3, #24
 8005c00:	431a      	orrs	r2, r3
 8005c02:	687b      	ldr	r3, [r7, #4]
 8005c04:	689b      	ldr	r3, [r3, #8]
 8005c06:	071b      	lsls	r3, r3, #28
 8005c08:	4964      	ldr	r1, [pc, #400]	@ (8005d9c <HAL_RCCEx_PeriphCLKConfig+0x280>)
 8005c0a:	4313      	orrs	r3, r2
 8005c0c:	f8c1 3084 	str.w	r3, [r1, #132]	@ 0x84
                                     PeriphClkInit->PLLI2S.PLLI2SR);
    }

    /* Enable the PLLI2S */
    __HAL_RCC_PLLI2S_ENABLE();
 8005c10:	4b61      	ldr	r3, [pc, #388]	@ (8005d98 <HAL_RCCEx_PeriphCLKConfig+0x27c>)
 8005c12:	2201      	movs	r2, #1
 8005c14:	601a      	str	r2, [r3, #0]
    /* Get tick */
    tickstart = HAL_GetTick();
 8005c16:	f7fd fb2d 	bl	8003274 <HAL_GetTick>
 8005c1a:	6178      	str	r0, [r7, #20]
    /* Wait till PLLI2S is ready */
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  == RESET)
 8005c1c:	e008      	b.n	8005c30 <HAL_RCCEx_PeriphCLKConfig+0x114>
    {
      if ((HAL_GetTick() - tickstart) > PLLI2S_TIMEOUT_VALUE)
 8005c1e:	f7fd fb29 	bl	8003274 <HAL_GetTick>
 8005c22:	4602      	mov	r2, r0
 8005c24:	697b      	ldr	r3, [r7, #20]
 8005c26:	1ad3      	subs	r3, r2, r3
 8005c28:	2b02      	cmp	r3, #2
 8005c2a:	d901      	bls.n	8005c30 <HAL_RCCEx_PeriphCLKConfig+0x114>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 8005c2c:	2303      	movs	r3, #3
 8005c2e:	e129      	b.n	8005e84 <HAL_RCCEx_PeriphCLKConfig+0x368>
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  == RESET)
 8005c30:	4b5a      	ldr	r3, [pc, #360]	@ (8005d9c <HAL_RCCEx_PeriphCLKConfig+0x280>)
 8005c32:	681b      	ldr	r3, [r3, #0]
 8005c34:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 8005c38:	2b00      	cmp	r3, #0
 8005c3a:	d0f0      	beq.n	8005c1e <HAL_RCCEx_PeriphCLKConfig+0x102>

  /*----------------------- SAI/LTDC Configuration (PLLSAI) ------------------*/
  /*----------------------- Common configuration SAI/LTDC --------------------*/
  /* In Case of SAI or LTDC Clock Configuration through PLLSAI, PLLSAIN division
     factor is common parameters for both peripherals */
  if ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI_PLLSAI) == RCC_PERIPHCLK_SAI_PLLSAI) ||
 8005c3c:	687b      	ldr	r3, [r7, #4]
 8005c3e:	681b      	ldr	r3, [r3, #0]
 8005c40:	f003 0304 	and.w	r3, r3, #4
 8005c44:	2b00      	cmp	r3, #0
 8005c46:	d105      	bne.n	8005c54 <HAL_RCCEx_PeriphCLKConfig+0x138>
      (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LTDC) == RCC_PERIPHCLK_LTDC))
 8005c48:	687b      	ldr	r3, [r7, #4]
 8005c4a:	681b      	ldr	r3, [r3, #0]
 8005c4c:	f003 0308 	and.w	r3, r3, #8
  if ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI_PLLSAI) == RCC_PERIPHCLK_SAI_PLLSAI) ||
 8005c50:	2b00      	cmp	r3, #0
 8005c52:	d079      	beq.n	8005d48 <HAL_RCCEx_PeriphCLKConfig+0x22c>
  {
    /* Check the PLLSAI division factors */
    assert_param(IS_RCC_PLLSAIN_VALUE(PeriphClkInit->PLLSAI.PLLSAIN));

    /* Disable PLLSAI Clock */
    __HAL_RCC_PLLSAI_DISABLE();
 8005c54:	4b52      	ldr	r3, [pc, #328]	@ (8005da0 <HAL_RCCEx_PeriphCLKConfig+0x284>)
 8005c56:	2200      	movs	r2, #0
 8005c58:	601a      	str	r2, [r3, #0]
    /* Get tick */
    tickstart = HAL_GetTick();
 8005c5a:	f7fd fb0b 	bl	8003274 <HAL_GetTick>
 8005c5e:	6178      	str	r0, [r7, #20]
    /* Wait till PLLSAI is disabled */
    while (__HAL_RCC_PLLSAI_GET_FLAG() != RESET)
 8005c60:	e008      	b.n	8005c74 <HAL_RCCEx_PeriphCLKConfig+0x158>
    {
      if ((HAL_GetTick() - tickstart) > PLLSAI_TIMEOUT_VALUE)
 8005c62:	f7fd fb07 	bl	8003274 <HAL_GetTick>
 8005c66:	4602      	mov	r2, r0
 8005c68:	697b      	ldr	r3, [r7, #20]
 8005c6a:	1ad3      	subs	r3, r2, r3
 8005c6c:	2b02      	cmp	r3, #2
 8005c6e:	d901      	bls.n	8005c74 <HAL_RCCEx_PeriphCLKConfig+0x158>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 8005c70:	2303      	movs	r3, #3
 8005c72:	e107      	b.n	8005e84 <HAL_RCCEx_PeriphCLKConfig+0x368>
    while (__HAL_RCC_PLLSAI_GET_FLAG() != RESET)
 8005c74:	4b49      	ldr	r3, [pc, #292]	@ (8005d9c <HAL_RCCEx_PeriphCLKConfig+0x280>)
 8005c76:	681b      	ldr	r3, [r3, #0]
 8005c78:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 8005c7c:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 8005c80:	d0ef      	beq.n	8005c62 <HAL_RCCEx_PeriphCLKConfig+0x146>
    }

    /*---------------------------- SAI configuration -------------------------*/
    /* In Case of SAI Clock Configuration through PLLSAI, PLLSAIQ and PLLSAI_DIVQ must
       be added only for SAI configuration */
    if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI_PLLSAI) == (RCC_PERIPHCLK_SAI_PLLSAI))
 8005c82:	687b      	ldr	r3, [r7, #4]
 8005c84:	681b      	ldr	r3, [r3, #0]
 8005c86:	f003 0304 	and.w	r3, r3, #4
 8005c8a:	2b00      	cmp	r3, #0
 8005c8c:	d020      	beq.n	8005cd0 <HAL_RCCEx_PeriphCLKConfig+0x1b4>
    {
      assert_param(IS_RCC_PLLSAIQ_VALUE(PeriphClkInit->PLLSAI.PLLSAIQ));
      assert_param(IS_RCC_PLLSAI_DIVQ_VALUE(PeriphClkInit->PLLSAIDivQ));

      /* Read PLLSAIR value from PLLSAICFGR register (this value is not need for SAI configuration) */
      tmpreg1 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIR) >> RCC_PLLSAICFGR_PLLSAIR_Pos);
 8005c8e:	4b43      	ldr	r3, [pc, #268]	@ (8005d9c <HAL_RCCEx_PeriphCLKConfig+0x280>)
 8005c90:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8005c94:	0f1b      	lsrs	r3, r3, #28
 8005c96:	f003 0307 	and.w	r3, r3, #7
 8005c9a:	613b      	str	r3, [r7, #16]
      /* PLLSAI_VCO Input  = PLL_SOURCE/PLLM */
      /* PLLSAI_VCO Output = PLLSAI_VCO Input * PLLSAIN */
      /* SAI_CLK(first level) = PLLSAI_VCO Output/PLLSAIQ */
      __HAL_RCC_PLLSAI_CONFIG(PeriphClkInit->PLLSAI.PLLSAIN, PeriphClkInit->PLLSAI.PLLSAIQ, tmpreg1);
 8005c9c:	687b      	ldr	r3, [r7, #4]
 8005c9e:	691b      	ldr	r3, [r3, #16]
 8005ca0:	019a      	lsls	r2, r3, #6
 8005ca2:	687b      	ldr	r3, [r7, #4]
 8005ca4:	695b      	ldr	r3, [r3, #20]
 8005ca6:	061b      	lsls	r3, r3, #24
 8005ca8:	431a      	orrs	r2, r3
 8005caa:	693b      	ldr	r3, [r7, #16]
 8005cac:	071b      	lsls	r3, r3, #28
 8005cae:	493b      	ldr	r1, [pc, #236]	@ (8005d9c <HAL_RCCEx_PeriphCLKConfig+0x280>)
 8005cb0:	4313      	orrs	r3, r2
 8005cb2:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
      /* SAI_CLK_x = SAI_CLK(first level)/PLLSAIDIVQ */
      __HAL_RCC_PLLSAI_PLLSAICLKDIVQ_CONFIG(PeriphClkInit->PLLSAIDivQ);
 8005cb6:	4b39      	ldr	r3, [pc, #228]	@ (8005d9c <HAL_RCCEx_PeriphCLKConfig+0x280>)
 8005cb8:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 8005cbc:	f423 52f8 	bic.w	r2, r3, #7936	@ 0x1f00
 8005cc0:	687b      	ldr	r3, [r7, #4]
 8005cc2:	6a1b      	ldr	r3, [r3, #32]
 8005cc4:	3b01      	subs	r3, #1
 8005cc6:	021b      	lsls	r3, r3, #8
 8005cc8:	4934      	ldr	r1, [pc, #208]	@ (8005d9c <HAL_RCCEx_PeriphCLKConfig+0x280>)
 8005cca:	4313      	orrs	r3, r2
 8005ccc:	f8c1 308c 	str.w	r3, [r1, #140]	@ 0x8c
    }

    /*---------------------------- LTDC configuration ------------------------*/
    if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LTDC) == (RCC_PERIPHCLK_LTDC))
 8005cd0:	687b      	ldr	r3, [r7, #4]
 8005cd2:	681b      	ldr	r3, [r3, #0]
 8005cd4:	f003 0308 	and.w	r3, r3, #8
 8005cd8:	2b00      	cmp	r3, #0
 8005cda:	d01e      	beq.n	8005d1a <HAL_RCCEx_PeriphCLKConfig+0x1fe>
    {
      assert_param(IS_RCC_PLLSAIR_VALUE(PeriphClkInit->PLLSAI.PLLSAIR));
      assert_param(IS_RCC_PLLSAI_DIVR_VALUE(PeriphClkInit->PLLSAIDivR));

      /* Read PLLSAIR value from PLLSAICFGR register (this value is not need for SAI configuration) */
      tmpreg1 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIQ) >> RCC_PLLSAICFGR_PLLSAIQ_Pos);
 8005cdc:	4b2f      	ldr	r3, [pc, #188]	@ (8005d9c <HAL_RCCEx_PeriphCLKConfig+0x280>)
 8005cde:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8005ce2:	0e1b      	lsrs	r3, r3, #24
 8005ce4:	f003 030f 	and.w	r3, r3, #15
 8005ce8:	613b      	str	r3, [r7, #16]
      /* PLLSAI_VCO Input  = PLL_SOURCE/PLLM */
      /* PLLSAI_VCO Output = PLLSAI_VCO Input * PLLSAIN */
      /* LTDC_CLK(first level) = PLLSAI_VCO Output/PLLSAIR */
      __HAL_RCC_PLLSAI_CONFIG(PeriphClkInit->PLLSAI.PLLSAIN, tmpreg1, PeriphClkInit->PLLSAI.PLLSAIR);
 8005cea:	687b      	ldr	r3, [r7, #4]
 8005cec:	691b      	ldr	r3, [r3, #16]
 8005cee:	019a      	lsls	r2, r3, #6
 8005cf0:	693b      	ldr	r3, [r7, #16]
 8005cf2:	061b      	lsls	r3, r3, #24
 8005cf4:	431a      	orrs	r2, r3
 8005cf6:	687b      	ldr	r3, [r7, #4]
 8005cf8:	699b      	ldr	r3, [r3, #24]
 8005cfa:	071b      	lsls	r3, r3, #28
 8005cfc:	4927      	ldr	r1, [pc, #156]	@ (8005d9c <HAL_RCCEx_PeriphCLKConfig+0x280>)
 8005cfe:	4313      	orrs	r3, r2
 8005d00:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
      /* LTDC_CLK = LTDC_CLK(first level)/PLLSAIDIVR */
      __HAL_RCC_PLLSAI_PLLSAICLKDIVR_CONFIG(PeriphClkInit->PLLSAIDivR);
 8005d04:	4b25      	ldr	r3, [pc, #148]	@ (8005d9c <HAL_RCCEx_PeriphCLKConfig+0x280>)
 8005d06:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 8005d0a:	f423 3240 	bic.w	r2, r3, #196608	@ 0x30000
 8005d0e:	687b      	ldr	r3, [r7, #4]
 8005d10:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8005d12:	4922      	ldr	r1, [pc, #136]	@ (8005d9c <HAL_RCCEx_PeriphCLKConfig+0x280>)
 8005d14:	4313      	orrs	r3, r2
 8005d16:	f8c1 308c 	str.w	r3, [r1, #140]	@ 0x8c
    }
    /* Enable PLLSAI Clock */
    __HAL_RCC_PLLSAI_ENABLE();
 8005d1a:	4b21      	ldr	r3, [pc, #132]	@ (8005da0 <HAL_RCCEx_PeriphCLKConfig+0x284>)
 8005d1c:	2201      	movs	r2, #1
 8005d1e:	601a      	str	r2, [r3, #0]
    /* Get tick */
    tickstart = HAL_GetTick();
 8005d20:	f7fd faa8 	bl	8003274 <HAL_GetTick>
 8005d24:	6178      	str	r0, [r7, #20]
    /* Wait till PLLSAI is ready */
    while (__HAL_RCC_PLLSAI_GET_FLAG() == RESET)
 8005d26:	e008      	b.n	8005d3a <HAL_RCCEx_PeriphCLKConfig+0x21e>
    {
      if ((HAL_GetTick() - tickstart) > PLLSAI_TIMEOUT_VALUE)
 8005d28:	f7fd faa4 	bl	8003274 <HAL_GetTick>
 8005d2c:	4602      	mov	r2, r0
 8005d2e:	697b      	ldr	r3, [r7, #20]
 8005d30:	1ad3      	subs	r3, r2, r3
 8005d32:	2b02      	cmp	r3, #2
 8005d34:	d901      	bls.n	8005d3a <HAL_RCCEx_PeriphCLKConfig+0x21e>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 8005d36:	2303      	movs	r3, #3
 8005d38:	e0a4      	b.n	8005e84 <HAL_RCCEx_PeriphCLKConfig+0x368>
    while (__HAL_RCC_PLLSAI_GET_FLAG() == RESET)
 8005d3a:	4b18      	ldr	r3, [pc, #96]	@ (8005d9c <HAL_RCCEx_PeriphCLKConfig+0x280>)
 8005d3c:	681b      	ldr	r3, [r3, #0]
 8005d3e:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 8005d42:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 8005d46:	d1ef      	bne.n	8005d28 <HAL_RCCEx_PeriphCLKConfig+0x20c>
    }
  }
  /*--------------------------------------------------------------------------*/

  /*---------------------------- RTC configuration ---------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == (RCC_PERIPHCLK_RTC))
 8005d48:	687b      	ldr	r3, [r7, #4]
 8005d4a:	681b      	ldr	r3, [r3, #0]
 8005d4c:	f003 0320 	and.w	r3, r3, #32
 8005d50:	2b00      	cmp	r3, #0
 8005d52:	f000 808b 	beq.w	8005e6c <HAL_RCCEx_PeriphCLKConfig+0x350>
  {
    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable Power Clock*/
    __HAL_RCC_PWR_CLK_ENABLE();
 8005d56:	2300      	movs	r3, #0
 8005d58:	60fb      	str	r3, [r7, #12]
 8005d5a:	4b10      	ldr	r3, [pc, #64]	@ (8005d9c <HAL_RCCEx_PeriphCLKConfig+0x280>)
 8005d5c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8005d5e:	4a0f      	ldr	r2, [pc, #60]	@ (8005d9c <HAL_RCCEx_PeriphCLKConfig+0x280>)
 8005d60:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8005d64:	6413      	str	r3, [r2, #64]	@ 0x40
 8005d66:	4b0d      	ldr	r3, [pc, #52]	@ (8005d9c <HAL_RCCEx_PeriphCLKConfig+0x280>)
 8005d68:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8005d6a:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8005d6e:	60fb      	str	r3, [r7, #12]
 8005d70:	68fb      	ldr	r3, [r7, #12]

    /* Enable write access to Backup domain */
    PWR->CR |= PWR_CR_DBP;
 8005d72:	4b0c      	ldr	r3, [pc, #48]	@ (8005da4 <HAL_RCCEx_PeriphCLKConfig+0x288>)
 8005d74:	681b      	ldr	r3, [r3, #0]
 8005d76:	4a0b      	ldr	r2, [pc, #44]	@ (8005da4 <HAL_RCCEx_PeriphCLKConfig+0x288>)
 8005d78:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8005d7c:	6013      	str	r3, [r2, #0]

    /* Get tick */
    tickstart = HAL_GetTick();
 8005d7e:	f7fd fa79 	bl	8003274 <HAL_GetTick>
 8005d82:	6178      	str	r0, [r7, #20]

    while ((PWR->CR & PWR_CR_DBP) == RESET)
 8005d84:	e010      	b.n	8005da8 <HAL_RCCEx_PeriphCLKConfig+0x28c>
    {
      if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8005d86:	f7fd fa75 	bl	8003274 <HAL_GetTick>
 8005d8a:	4602      	mov	r2, r0
 8005d8c:	697b      	ldr	r3, [r7, #20]
 8005d8e:	1ad3      	subs	r3, r2, r3
 8005d90:	2b02      	cmp	r3, #2
 8005d92:	d909      	bls.n	8005da8 <HAL_RCCEx_PeriphCLKConfig+0x28c>
      {
        return HAL_TIMEOUT;
 8005d94:	2303      	movs	r3, #3
 8005d96:	e075      	b.n	8005e84 <HAL_RCCEx_PeriphCLKConfig+0x368>
 8005d98:	42470068 	.word	0x42470068
 8005d9c:	40023800 	.word	0x40023800
 8005da0:	42470070 	.word	0x42470070
 8005da4:	40007000 	.word	0x40007000
    while ((PWR->CR & PWR_CR_DBP) == RESET)
 8005da8:	4b38      	ldr	r3, [pc, #224]	@ (8005e8c <HAL_RCCEx_PeriphCLKConfig+0x370>)
 8005daa:	681b      	ldr	r3, [r3, #0]
 8005dac:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8005db0:	2b00      	cmp	r3, #0
 8005db2:	d0e8      	beq.n	8005d86 <HAL_RCCEx_PeriphCLKConfig+0x26a>
      }
    }
    /* Reset the Backup domain only if the RTC Clock source selection is modified from reset value */
    tmpreg1 = (RCC->BDCR & RCC_BDCR_RTCSEL);
 8005db4:	4b36      	ldr	r3, [pc, #216]	@ (8005e90 <HAL_RCCEx_PeriphCLKConfig+0x374>)
 8005db6:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8005db8:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8005dbc:	613b      	str	r3, [r7, #16]
    if ((tmpreg1 != 0x00000000U) && ((tmpreg1) != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL)))
 8005dbe:	693b      	ldr	r3, [r7, #16]
 8005dc0:	2b00      	cmp	r3, #0
 8005dc2:	d02f      	beq.n	8005e24 <HAL_RCCEx_PeriphCLKConfig+0x308>
 8005dc4:	687b      	ldr	r3, [r7, #4]
 8005dc6:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8005dc8:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8005dcc:	693a      	ldr	r2, [r7, #16]
 8005dce:	429a      	cmp	r2, r3
 8005dd0:	d028      	beq.n	8005e24 <HAL_RCCEx_PeriphCLKConfig+0x308>
    {
      /* Store the content of BDCR register before the reset of Backup Domain */
      tmpreg1 = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 8005dd2:	4b2f      	ldr	r3, [pc, #188]	@ (8005e90 <HAL_RCCEx_PeriphCLKConfig+0x374>)
 8005dd4:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8005dd6:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8005dda:	613b      	str	r3, [r7, #16]
      /* RTC Clock selection can be changed only if the Backup Domain is reset */
      __HAL_RCC_BACKUPRESET_FORCE();
 8005ddc:	4b2d      	ldr	r3, [pc, #180]	@ (8005e94 <HAL_RCCEx_PeriphCLKConfig+0x378>)
 8005dde:	2201      	movs	r2, #1
 8005de0:	601a      	str	r2, [r3, #0]
      __HAL_RCC_BACKUPRESET_RELEASE();
 8005de2:	4b2c      	ldr	r3, [pc, #176]	@ (8005e94 <HAL_RCCEx_PeriphCLKConfig+0x378>)
 8005de4:	2200      	movs	r2, #0
 8005de6:	601a      	str	r2, [r3, #0]
      /* Restore the Content of BDCR register */
      RCC->BDCR = tmpreg1;
 8005de8:	4a29      	ldr	r2, [pc, #164]	@ (8005e90 <HAL_RCCEx_PeriphCLKConfig+0x374>)
 8005dea:	693b      	ldr	r3, [r7, #16]
 8005dec:	6713      	str	r3, [r2, #112]	@ 0x70

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if (HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSEON))
 8005dee:	4b28      	ldr	r3, [pc, #160]	@ (8005e90 <HAL_RCCEx_PeriphCLKConfig+0x374>)
 8005df0:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8005df2:	f003 0301 	and.w	r3, r3, #1
 8005df6:	2b01      	cmp	r3, #1
 8005df8:	d114      	bne.n	8005e24 <HAL_RCCEx_PeriphCLKConfig+0x308>
      {
        /* Get tick */
        tickstart = HAL_GetTick();
 8005dfa:	f7fd fa3b 	bl	8003274 <HAL_GetTick>
 8005dfe:	6178      	str	r0, [r7, #20]

        /* Wait till LSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8005e00:	e00a      	b.n	8005e18 <HAL_RCCEx_PeriphCLKConfig+0x2fc>
        {
          if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8005e02:	f7fd fa37 	bl	8003274 <HAL_GetTick>
 8005e06:	4602      	mov	r2, r0
 8005e08:	697b      	ldr	r3, [r7, #20]
 8005e0a:	1ad3      	subs	r3, r2, r3
 8005e0c:	f241 3288 	movw	r2, #5000	@ 0x1388
 8005e10:	4293      	cmp	r3, r2
 8005e12:	d901      	bls.n	8005e18 <HAL_RCCEx_PeriphCLKConfig+0x2fc>
          {
            return HAL_TIMEOUT;
 8005e14:	2303      	movs	r3, #3
 8005e16:	e035      	b.n	8005e84 <HAL_RCCEx_PeriphCLKConfig+0x368>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8005e18:	4b1d      	ldr	r3, [pc, #116]	@ (8005e90 <HAL_RCCEx_PeriphCLKConfig+0x374>)
 8005e1a:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8005e1c:	f003 0302 	and.w	r3, r3, #2
 8005e20:	2b00      	cmp	r3, #0
 8005e22:	d0ee      	beq.n	8005e02 <HAL_RCCEx_PeriphCLKConfig+0x2e6>
          }
        }
      }
    }
    __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 8005e24:	687b      	ldr	r3, [r7, #4]
 8005e26:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8005e28:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8005e2c:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 8005e30:	d10d      	bne.n	8005e4e <HAL_RCCEx_PeriphCLKConfig+0x332>
 8005e32:	4b17      	ldr	r3, [pc, #92]	@ (8005e90 <HAL_RCCEx_PeriphCLKConfig+0x374>)
 8005e34:	689b      	ldr	r3, [r3, #8]
 8005e36:	f423 12f8 	bic.w	r2, r3, #2031616	@ 0x1f0000
 8005e3a:	687b      	ldr	r3, [r7, #4]
 8005e3c:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8005e3e:	f023 4370 	bic.w	r3, r3, #4026531840	@ 0xf0000000
 8005e42:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8005e46:	4912      	ldr	r1, [pc, #72]	@ (8005e90 <HAL_RCCEx_PeriphCLKConfig+0x374>)
 8005e48:	4313      	orrs	r3, r2
 8005e4a:	608b      	str	r3, [r1, #8]
 8005e4c:	e005      	b.n	8005e5a <HAL_RCCEx_PeriphCLKConfig+0x33e>
 8005e4e:	4b10      	ldr	r3, [pc, #64]	@ (8005e90 <HAL_RCCEx_PeriphCLKConfig+0x374>)
 8005e50:	689b      	ldr	r3, [r3, #8]
 8005e52:	4a0f      	ldr	r2, [pc, #60]	@ (8005e90 <HAL_RCCEx_PeriphCLKConfig+0x374>)
 8005e54:	f423 13f8 	bic.w	r3, r3, #2031616	@ 0x1f0000
 8005e58:	6093      	str	r3, [r2, #8]
 8005e5a:	4b0d      	ldr	r3, [pc, #52]	@ (8005e90 <HAL_RCCEx_PeriphCLKConfig+0x374>)
 8005e5c:	6f1a      	ldr	r2, [r3, #112]	@ 0x70
 8005e5e:	687b      	ldr	r3, [r7, #4]
 8005e60:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8005e62:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8005e66:	490a      	ldr	r1, [pc, #40]	@ (8005e90 <HAL_RCCEx_PeriphCLKConfig+0x374>)
 8005e68:	4313      	orrs	r3, r2
 8005e6a:	670b      	str	r3, [r1, #112]	@ 0x70
  }
  /*--------------------------------------------------------------------------*/

  /*---------------------------- TIM configuration ---------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM) == (RCC_PERIPHCLK_TIM))
 8005e6c:	687b      	ldr	r3, [r7, #4]
 8005e6e:	681b      	ldr	r3, [r3, #0]
 8005e70:	f003 0310 	and.w	r3, r3, #16
 8005e74:	2b00      	cmp	r3, #0
 8005e76:	d004      	beq.n	8005e82 <HAL_RCCEx_PeriphCLKConfig+0x366>
  {
    __HAL_RCC_TIMCLKPRESCALER(PeriphClkInit->TIMPresSelection);
 8005e78:	687b      	ldr	r3, [r7, #4]
 8005e7a:	f893 202c 	ldrb.w	r2, [r3, #44]	@ 0x2c
 8005e7e:	4b06      	ldr	r3, [pc, #24]	@ (8005e98 <HAL_RCCEx_PeriphCLKConfig+0x37c>)
 8005e80:	601a      	str	r2, [r3, #0]
  }
  return HAL_OK;
 8005e82:	2300      	movs	r3, #0
}
 8005e84:	4618      	mov	r0, r3
 8005e86:	3718      	adds	r7, #24
 8005e88:	46bd      	mov	sp, r7
 8005e8a:	bd80      	pop	{r7, pc}
 8005e8c:	40007000 	.word	0x40007000
 8005e90:	40023800 	.word	0x40023800
 8005e94:	42470e40 	.word	0x42470e40
 8005e98:	424711e0 	.word	0x424711e0

08005e9c <HAL_RNG_Init>:
  * @param  hrng pointer to a RNG_HandleTypeDef structure that contains
  *                the configuration information for RNG.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RNG_Init(RNG_HandleTypeDef *hrng)
{
 8005e9c:	b580      	push	{r7, lr}
 8005e9e:	b082      	sub	sp, #8
 8005ea0:	af00      	add	r7, sp, #0
 8005ea2:	6078      	str	r0, [r7, #4]
  /* Check the RNG handle allocation */
  if (hrng == NULL)
 8005ea4:	687b      	ldr	r3, [r7, #4]
 8005ea6:	2b00      	cmp	r3, #0
 8005ea8:	d101      	bne.n	8005eae <HAL_RNG_Init+0x12>
  {
    return HAL_ERROR;
 8005eaa:	2301      	movs	r3, #1
 8005eac:	e01c      	b.n	8005ee8 <HAL_RNG_Init+0x4c>

    /* Init the low level hardware */
    hrng->MspInitCallback(hrng);
  }
#else
  if (hrng->State == HAL_RNG_STATE_RESET)
 8005eae:	687b      	ldr	r3, [r7, #4]
 8005eb0:	795b      	ldrb	r3, [r3, #5]
 8005eb2:	b2db      	uxtb	r3, r3
 8005eb4:	2b00      	cmp	r3, #0
 8005eb6:	d105      	bne.n	8005ec4 <HAL_RNG_Init+0x28>
  {
    /* Allocate lock resource and initialize it */
    hrng->Lock = HAL_UNLOCKED;
 8005eb8:	687b      	ldr	r3, [r7, #4]
 8005eba:	2200      	movs	r2, #0
 8005ebc:	711a      	strb	r2, [r3, #4]

    /* Init the low level hardware */
    HAL_RNG_MspInit(hrng);
 8005ebe:	6878      	ldr	r0, [r7, #4]
 8005ec0:	f7fc fc26 	bl	8002710 <HAL_RNG_MspInit>
  }
#endif /* USE_HAL_RNG_REGISTER_CALLBACKS */

  /* Change RNG peripheral state */
  hrng->State = HAL_RNG_STATE_BUSY;
 8005ec4:	687b      	ldr	r3, [r7, #4]
 8005ec6:	2202      	movs	r2, #2
 8005ec8:	715a      	strb	r2, [r3, #5]


  /* Enable the RNG Peripheral */
  __HAL_RNG_ENABLE(hrng);
 8005eca:	687b      	ldr	r3, [r7, #4]
 8005ecc:	681b      	ldr	r3, [r3, #0]
 8005ece:	681a      	ldr	r2, [r3, #0]
 8005ed0:	687b      	ldr	r3, [r7, #4]
 8005ed2:	681b      	ldr	r3, [r3, #0]
 8005ed4:	f042 0204 	orr.w	r2, r2, #4
 8005ed8:	601a      	str	r2, [r3, #0]

  /* Initialize the RNG state */
  hrng->State = HAL_RNG_STATE_READY;
 8005eda:	687b      	ldr	r3, [r7, #4]
 8005edc:	2201      	movs	r2, #1
 8005ede:	715a      	strb	r2, [r3, #5]

  /* Initialise the error code */
  hrng->ErrorCode = HAL_RNG_ERROR_NONE;
 8005ee0:	687b      	ldr	r3, [r7, #4]
 8005ee2:	2200      	movs	r2, #0
 8005ee4:	609a      	str	r2, [r3, #8]

  /* Return function status */
  return HAL_OK;
 8005ee6:	2300      	movs	r3, #0
}
 8005ee8:	4618      	mov	r0, r3
 8005eea:	3708      	adds	r7, #8
 8005eec:	46bd      	mov	sp, r7
 8005eee:	bd80      	pop	{r7, pc}

08005ef0 <HAL_RNG_GenerateRandomNumber>:
  * @param  random32bit pointer to generated random number variable if successful.
  * @retval HAL status
  */

HAL_StatusTypeDef HAL_RNG_GenerateRandomNumber(RNG_HandleTypeDef *hrng, uint32_t *random32bit)
{
 8005ef0:	b580      	push	{r7, lr}
 8005ef2:	b084      	sub	sp, #16
 8005ef4:	af00      	add	r7, sp, #0
 8005ef6:	6078      	str	r0, [r7, #4]
 8005ef8:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 8005efa:	2300      	movs	r3, #0
 8005efc:	73fb      	strb	r3, [r7, #15]

  /* Process Locked */
  __HAL_LOCK(hrng);
 8005efe:	687b      	ldr	r3, [r7, #4]
 8005f00:	791b      	ldrb	r3, [r3, #4]
 8005f02:	2b01      	cmp	r3, #1
 8005f04:	d101      	bne.n	8005f0a <HAL_RNG_GenerateRandomNumber+0x1a>
 8005f06:	2302      	movs	r3, #2
 8005f08:	e044      	b.n	8005f94 <HAL_RNG_GenerateRandomNumber+0xa4>
 8005f0a:	687b      	ldr	r3, [r7, #4]
 8005f0c:	2201      	movs	r2, #1
 8005f0e:	711a      	strb	r2, [r3, #4]

  /* Check RNG peripheral state */
  if (hrng->State == HAL_RNG_STATE_READY)
 8005f10:	687b      	ldr	r3, [r7, #4]
 8005f12:	795b      	ldrb	r3, [r3, #5]
 8005f14:	b2db      	uxtb	r3, r3
 8005f16:	2b01      	cmp	r3, #1
 8005f18:	d133      	bne.n	8005f82 <HAL_RNG_GenerateRandomNumber+0x92>
  {
    /* Change RNG peripheral state */
    hrng->State = HAL_RNG_STATE_BUSY;
 8005f1a:	687b      	ldr	r3, [r7, #4]
 8005f1c:	2202      	movs	r2, #2
 8005f1e:	715a      	strb	r2, [r3, #5]

    /* Get tick */
    tickstart = HAL_GetTick();
 8005f20:	f7fd f9a8 	bl	8003274 <HAL_GetTick>
 8005f24:	60b8      	str	r0, [r7, #8]

    /* Check if data register contains valid random data */
    while (__HAL_RNG_GET_FLAG(hrng, RNG_FLAG_DRDY) == RESET)
 8005f26:	e018      	b.n	8005f5a <HAL_RNG_GenerateRandomNumber+0x6a>
    {
      if ((HAL_GetTick() - tickstart) > RNG_TIMEOUT_VALUE)
 8005f28:	f7fd f9a4 	bl	8003274 <HAL_GetTick>
 8005f2c:	4602      	mov	r2, r0
 8005f2e:	68bb      	ldr	r3, [r7, #8]
 8005f30:	1ad3      	subs	r3, r2, r3
 8005f32:	2b02      	cmp	r3, #2
 8005f34:	d911      	bls.n	8005f5a <HAL_RNG_GenerateRandomNumber+0x6a>
      {
        /* New check to avoid false timeout detection in case of preemption */
        if (__HAL_RNG_GET_FLAG(hrng, RNG_FLAG_DRDY) == RESET)
 8005f36:	687b      	ldr	r3, [r7, #4]
 8005f38:	681b      	ldr	r3, [r3, #0]
 8005f3a:	685b      	ldr	r3, [r3, #4]
 8005f3c:	f003 0301 	and.w	r3, r3, #1
 8005f40:	2b01      	cmp	r3, #1
 8005f42:	d00a      	beq.n	8005f5a <HAL_RNG_GenerateRandomNumber+0x6a>
        {
          hrng->State = HAL_RNG_STATE_READY;
 8005f44:	687b      	ldr	r3, [r7, #4]
 8005f46:	2201      	movs	r2, #1
 8005f48:	715a      	strb	r2, [r3, #5]
          hrng->ErrorCode = HAL_RNG_ERROR_TIMEOUT;
 8005f4a:	687b      	ldr	r3, [r7, #4]
 8005f4c:	2202      	movs	r2, #2
 8005f4e:	609a      	str	r2, [r3, #8]
          /* Process Unlocked */
          __HAL_UNLOCK(hrng);
 8005f50:	687b      	ldr	r3, [r7, #4]
 8005f52:	2200      	movs	r2, #0
 8005f54:	711a      	strb	r2, [r3, #4]
          return HAL_ERROR;
 8005f56:	2301      	movs	r3, #1
 8005f58:	e01c      	b.n	8005f94 <HAL_RNG_GenerateRandomNumber+0xa4>
    while (__HAL_RNG_GET_FLAG(hrng, RNG_FLAG_DRDY) == RESET)
 8005f5a:	687b      	ldr	r3, [r7, #4]
 8005f5c:	681b      	ldr	r3, [r3, #0]
 8005f5e:	685b      	ldr	r3, [r3, #4]
 8005f60:	f003 0301 	and.w	r3, r3, #1
 8005f64:	2b01      	cmp	r3, #1
 8005f66:	d1df      	bne.n	8005f28 <HAL_RNG_GenerateRandomNumber+0x38>
        }
      }
    }

    /* Get a 32bit Random number */
    hrng->RandomNumber = hrng->Instance->DR;
 8005f68:	687b      	ldr	r3, [r7, #4]
 8005f6a:	681b      	ldr	r3, [r3, #0]
 8005f6c:	689a      	ldr	r2, [r3, #8]
 8005f6e:	687b      	ldr	r3, [r7, #4]
 8005f70:	60da      	str	r2, [r3, #12]
    *random32bit = hrng->RandomNumber;
 8005f72:	687b      	ldr	r3, [r7, #4]
 8005f74:	68da      	ldr	r2, [r3, #12]
 8005f76:	683b      	ldr	r3, [r7, #0]
 8005f78:	601a      	str	r2, [r3, #0]

    hrng->State = HAL_RNG_STATE_READY;
 8005f7a:	687b      	ldr	r3, [r7, #4]
 8005f7c:	2201      	movs	r2, #1
 8005f7e:	715a      	strb	r2, [r3, #5]
 8005f80:	e004      	b.n	8005f8c <HAL_RNG_GenerateRandomNumber+0x9c>
  }
  else
  {
    hrng->ErrorCode = HAL_RNG_ERROR_BUSY;
 8005f82:	687b      	ldr	r3, [r7, #4]
 8005f84:	2204      	movs	r2, #4
 8005f86:	609a      	str	r2, [r3, #8]
    status = HAL_ERROR;
 8005f88:	2301      	movs	r3, #1
 8005f8a:	73fb      	strb	r3, [r7, #15]
  }

  /* Process Unlocked */
  __HAL_UNLOCK(hrng);
 8005f8c:	687b      	ldr	r3, [r7, #4]
 8005f8e:	2200      	movs	r2, #0
 8005f90:	711a      	strb	r2, [r3, #4]

  return status;
 8005f92:	7bfb      	ldrb	r3, [r7, #15]
}
 8005f94:	4618      	mov	r0, r3
 8005f96:	3710      	adds	r7, #16
 8005f98:	46bd      	mov	sp, r7
 8005f9a:	bd80      	pop	{r7, pc}

08005f9c <HAL_RNG_GetRandomNumber>:
  * @param  hrng pointer to a RNG_HandleTypeDef structure that contains
  *                the configuration information for RNG.
  * @retval Random value
  */
uint32_t HAL_RNG_GetRandomNumber(RNG_HandleTypeDef *hrng)
{
 8005f9c:	b580      	push	{r7, lr}
 8005f9e:	b082      	sub	sp, #8
 8005fa0:	af00      	add	r7, sp, #0
 8005fa2:	6078      	str	r0, [r7, #4]
  if (HAL_RNG_GenerateRandomNumber(hrng, &(hrng->RandomNumber)) == HAL_OK)
 8005fa4:	687b      	ldr	r3, [r7, #4]
 8005fa6:	330c      	adds	r3, #12
 8005fa8:	4619      	mov	r1, r3
 8005faa:	6878      	ldr	r0, [r7, #4]
 8005fac:	f7ff ffa0 	bl	8005ef0 <HAL_RNG_GenerateRandomNumber>
 8005fb0:	4603      	mov	r3, r0
 8005fb2:	2b00      	cmp	r3, #0
 8005fb4:	d102      	bne.n	8005fbc <HAL_RNG_GetRandomNumber+0x20>
  {
    return hrng->RandomNumber;
 8005fb6:	687b      	ldr	r3, [r7, #4]
 8005fb8:	68db      	ldr	r3, [r3, #12]
 8005fba:	e000      	b.n	8005fbe <HAL_RNG_GetRandomNumber+0x22>
  }
  else
  {
    return 0U;
 8005fbc:	2300      	movs	r3, #0
  }
}
 8005fbe:	4618      	mov	r0, r3
 8005fc0:	3708      	adds	r7, #8
 8005fc2:	46bd      	mov	sp, r7
 8005fc4:	bd80      	pop	{r7, pc}

08005fc6 <HAL_SPI_Init>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi)
{
 8005fc6:	b580      	push	{r7, lr}
 8005fc8:	b082      	sub	sp, #8
 8005fca:	af00      	add	r7, sp, #0
 8005fcc:	6078      	str	r0, [r7, #4]
  /* Check the SPI handle allocation */
  if (hspi == NULL)
 8005fce:	687b      	ldr	r3, [r7, #4]
 8005fd0:	2b00      	cmp	r3, #0
 8005fd2:	d101      	bne.n	8005fd8 <HAL_SPI_Init+0x12>
  {
    return HAL_ERROR;
 8005fd4:	2301      	movs	r3, #1
 8005fd6:	e07b      	b.n	80060d0 <HAL_SPI_Init+0x10a>
  assert_param(IS_SPI_DATASIZE(hspi->Init.DataSize));
  assert_param(IS_SPI_NSS(hspi->Init.NSS));
  assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
  assert_param(IS_SPI_FIRST_BIT(hspi->Init.FirstBit));
  assert_param(IS_SPI_TIMODE(hspi->Init.TIMode));
  if (hspi->Init.TIMode == SPI_TIMODE_DISABLE)
 8005fd8:	687b      	ldr	r3, [r7, #4]
 8005fda:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8005fdc:	2b00      	cmp	r3, #0
 8005fde:	d108      	bne.n	8005ff2 <HAL_SPI_Init+0x2c>
  {
    assert_param(IS_SPI_CPOL(hspi->Init.CLKPolarity));
    assert_param(IS_SPI_CPHA(hspi->Init.CLKPhase));

    if (hspi->Init.Mode == SPI_MODE_MASTER)
 8005fe0:	687b      	ldr	r3, [r7, #4]
 8005fe2:	685b      	ldr	r3, [r3, #4]
 8005fe4:	f5b3 7f82 	cmp.w	r3, #260	@ 0x104
 8005fe8:	d009      	beq.n	8005ffe <HAL_SPI_Init+0x38>
      assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
    }
    else
    {
      /* Baudrate prescaler not use in Motoraola Slave mode. force to default value */
      hspi->Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 8005fea:	687b      	ldr	r3, [r7, #4]
 8005fec:	2200      	movs	r2, #0
 8005fee:	61da      	str	r2, [r3, #28]
 8005ff0:	e005      	b.n	8005ffe <HAL_SPI_Init+0x38>
  else
  {
    assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));

    /* Force polarity and phase to TI protocaol requirements */
    hspi->Init.CLKPolarity = SPI_POLARITY_LOW;
 8005ff2:	687b      	ldr	r3, [r7, #4]
 8005ff4:	2200      	movs	r2, #0
 8005ff6:	611a      	str	r2, [r3, #16]
    hspi->Init.CLKPhase    = SPI_PHASE_1EDGE;
 8005ff8:	687b      	ldr	r3, [r7, #4]
 8005ffa:	2200      	movs	r2, #0
 8005ffc:	615a      	str	r2, [r3, #20]
  if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
  {
    assert_param(IS_SPI_CRC_POLYNOMIAL(hspi->Init.CRCPolynomial));
  }
#else
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8005ffe:	687b      	ldr	r3, [r7, #4]
 8006000:	2200      	movs	r2, #0
 8006002:	629a      	str	r2, [r3, #40]	@ 0x28
#endif /* USE_SPI_CRC */

  if (hspi->State == HAL_SPI_STATE_RESET)
 8006004:	687b      	ldr	r3, [r7, #4]
 8006006:	f893 3051 	ldrb.w	r3, [r3, #81]	@ 0x51
 800600a:	b2db      	uxtb	r3, r3
 800600c:	2b00      	cmp	r3, #0
 800600e:	d106      	bne.n	800601e <HAL_SPI_Init+0x58>
  {
    /* Allocate lock resource and initialize it */
    hspi->Lock = HAL_UNLOCKED;
 8006010:	687b      	ldr	r3, [r7, #4]
 8006012:	2200      	movs	r2, #0
 8006014:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hspi->MspInitCallback(hspi);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SPI_MspInit(hspi);
 8006018:	6878      	ldr	r0, [r7, #4]
 800601a:	f7fc fb9b 	bl	8002754 <HAL_SPI_MspInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }

  hspi->State = HAL_SPI_STATE_BUSY;
 800601e:	687b      	ldr	r3, [r7, #4]
 8006020:	2202      	movs	r2, #2
 8006022:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51

  /* Disable the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 8006026:	687b      	ldr	r3, [r7, #4]
 8006028:	681b      	ldr	r3, [r3, #0]
 800602a:	681a      	ldr	r2, [r3, #0]
 800602c:	687b      	ldr	r3, [r7, #4]
 800602e:	681b      	ldr	r3, [r3, #0]
 8006030:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 8006034:	601a      	str	r2, [r3, #0]

  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Data size, Clock polarity and phase, NSS management,
  Communication speed, First bit and CRC calculation state */
  WRITE_REG(hspi->Instance->CR1, ((hspi->Init.Mode & (SPI_CR1_MSTR | SPI_CR1_SSI)) |
 8006036:	687b      	ldr	r3, [r7, #4]
 8006038:	685b      	ldr	r3, [r3, #4]
 800603a:	f403 7282 	and.w	r2, r3, #260	@ 0x104
 800603e:	687b      	ldr	r3, [r7, #4]
 8006040:	689b      	ldr	r3, [r3, #8]
 8006042:	f403 4304 	and.w	r3, r3, #33792	@ 0x8400
 8006046:	431a      	orrs	r2, r3
 8006048:	687b      	ldr	r3, [r7, #4]
 800604a:	68db      	ldr	r3, [r3, #12]
 800604c:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 8006050:	431a      	orrs	r2, r3
 8006052:	687b      	ldr	r3, [r7, #4]
 8006054:	691b      	ldr	r3, [r3, #16]
 8006056:	f003 0302 	and.w	r3, r3, #2
 800605a:	431a      	orrs	r2, r3
 800605c:	687b      	ldr	r3, [r7, #4]
 800605e:	695b      	ldr	r3, [r3, #20]
 8006060:	f003 0301 	and.w	r3, r3, #1
 8006064:	431a      	orrs	r2, r3
 8006066:	687b      	ldr	r3, [r7, #4]
 8006068:	699b      	ldr	r3, [r3, #24]
 800606a:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 800606e:	431a      	orrs	r2, r3
 8006070:	687b      	ldr	r3, [r7, #4]
 8006072:	69db      	ldr	r3, [r3, #28]
 8006074:	f003 0338 	and.w	r3, r3, #56	@ 0x38
 8006078:	431a      	orrs	r2, r3
 800607a:	687b      	ldr	r3, [r7, #4]
 800607c:	6a1b      	ldr	r3, [r3, #32]
 800607e:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8006082:	ea42 0103 	orr.w	r1, r2, r3
 8006086:	687b      	ldr	r3, [r7, #4]
 8006088:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800608a:	f403 5200 	and.w	r2, r3, #8192	@ 0x2000
 800608e:	687b      	ldr	r3, [r7, #4]
 8006090:	681b      	ldr	r3, [r3, #0]
 8006092:	430a      	orrs	r2, r1
 8006094:	601a      	str	r2, [r3, #0]
                                  (hspi->Init.BaudRatePrescaler & SPI_CR1_BR_Msk) |
                                  (hspi->Init.FirstBit  & SPI_CR1_LSBFIRST) |
                                  (hspi->Init.CRCCalculation & SPI_CR1_CRCEN)));

  /* Configure : NSS management, TI Mode */
  WRITE_REG(hspi->Instance->CR2, (((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE) | (hspi->Init.TIMode & SPI_CR2_FRF)));
 8006096:	687b      	ldr	r3, [r7, #4]
 8006098:	699b      	ldr	r3, [r3, #24]
 800609a:	0c1b      	lsrs	r3, r3, #16
 800609c:	f003 0104 	and.w	r1, r3, #4
 80060a0:	687b      	ldr	r3, [r7, #4]
 80060a2:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80060a4:	f003 0210 	and.w	r2, r3, #16
 80060a8:	687b      	ldr	r3, [r7, #4]
 80060aa:	681b      	ldr	r3, [r3, #0]
 80060ac:	430a      	orrs	r2, r1
 80060ae:	605a      	str	r2, [r3, #4]
  }
#endif /* USE_SPI_CRC */

#if defined(SPI_I2SCFGR_I2SMOD)
  /* Activate the SPI mode (Make sure that I2SMOD bit in I2SCFGR register is reset) */
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
 80060b0:	687b      	ldr	r3, [r7, #4]
 80060b2:	681b      	ldr	r3, [r3, #0]
 80060b4:	69da      	ldr	r2, [r3, #28]
 80060b6:	687b      	ldr	r3, [r7, #4]
 80060b8:	681b      	ldr	r3, [r3, #0]
 80060ba:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 80060be:	61da      	str	r2, [r3, #28]
#endif /* SPI_I2SCFGR_I2SMOD */

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 80060c0:	687b      	ldr	r3, [r7, #4]
 80060c2:	2200      	movs	r2, #0
 80060c4:	655a      	str	r2, [r3, #84]	@ 0x54
  hspi->State     = HAL_SPI_STATE_READY;
 80060c6:	687b      	ldr	r3, [r7, #4]
 80060c8:	2201      	movs	r2, #1
 80060ca:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51

  return HAL_OK;
 80060ce:	2300      	movs	r3, #0
}
 80060d0:	4618      	mov	r0, r3
 80060d2:	3708      	adds	r7, #8
 80060d4:	46bd      	mov	sp, r7
 80060d6:	bd80      	pop	{r7, pc}

080060d8 <HAL_SPI_DeInit>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_DeInit(SPI_HandleTypeDef *hspi)
{
 80060d8:	b580      	push	{r7, lr}
 80060da:	b082      	sub	sp, #8
 80060dc:	af00      	add	r7, sp, #0
 80060de:	6078      	str	r0, [r7, #4]
  /* Check the SPI handle allocation */
  if (hspi == NULL)
 80060e0:	687b      	ldr	r3, [r7, #4]
 80060e2:	2b00      	cmp	r3, #0
 80060e4:	d101      	bne.n	80060ea <HAL_SPI_DeInit+0x12>
  {
    return HAL_ERROR;
 80060e6:	2301      	movs	r3, #1
 80060e8:	e01a      	b.n	8006120 <HAL_SPI_DeInit+0x48>
  }

  /* Check SPI Instance parameter */
  assert_param(IS_SPI_ALL_INSTANCE(hspi->Instance));

  hspi->State = HAL_SPI_STATE_BUSY;
 80060ea:	687b      	ldr	r3, [r7, #4]
 80060ec:	2202      	movs	r2, #2
 80060ee:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51

  /* Disable the SPI Peripheral Clock */
  __HAL_SPI_DISABLE(hspi);
 80060f2:	687b      	ldr	r3, [r7, #4]
 80060f4:	681b      	ldr	r3, [r3, #0]
 80060f6:	681a      	ldr	r2, [r3, #0]
 80060f8:	687b      	ldr	r3, [r7, #4]
 80060fa:	681b      	ldr	r3, [r3, #0]
 80060fc:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 8006100:	601a      	str	r2, [r3, #0]

  /* DeInit the low level hardware: GPIO, CLOCK, NVIC... */
  hspi->MspDeInitCallback(hspi);
#else
  /* DeInit the low level hardware: GPIO, CLOCK, NVIC... */
  HAL_SPI_MspDeInit(hspi);
 8006102:	6878      	ldr	r0, [r7, #4]
 8006104:	f7fc fb6e 	bl	80027e4 <HAL_SPI_MspDeInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 8006108:	687b      	ldr	r3, [r7, #4]
 800610a:	2200      	movs	r2, #0
 800610c:	655a      	str	r2, [r3, #84]	@ 0x54
  hspi->State = HAL_SPI_STATE_RESET;
 800610e:	687b      	ldr	r3, [r7, #4]
 8006110:	2200      	movs	r2, #0
 8006112:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51

  /* Release Lock */
  __HAL_UNLOCK(hspi);
 8006116:	687b      	ldr	r3, [r7, #4]
 8006118:	2200      	movs	r2, #0
 800611a:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50

  return HAL_OK;
 800611e:	2300      	movs	r3, #0
}
 8006120:	4618      	mov	r0, r3
 8006122:	3708      	adds	r7, #8
 8006124:	46bd      	mov	sp, r7
 8006126:	bd80      	pop	{r7, pc}

08006128 <HAL_SPI_Transmit>:
  * @param  Size amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Transmit(SPI_HandleTypeDef *hspi, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8006128:	b580      	push	{r7, lr}
 800612a:	b088      	sub	sp, #32
 800612c:	af00      	add	r7, sp, #0
 800612e:	60f8      	str	r0, [r7, #12]
 8006130:	60b9      	str	r1, [r7, #8]
 8006132:	603b      	str	r3, [r7, #0]
 8006134:	4613      	mov	r3, r2
 8006136:	80fb      	strh	r3, [r7, #6]

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES_OR_1LINE(hspi->Init.Direction));

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 8006138:	f7fd f89c 	bl	8003274 <HAL_GetTick>
 800613c:	61f8      	str	r0, [r7, #28]
  initial_TxXferCount = Size;
 800613e:	88fb      	ldrh	r3, [r7, #6]
 8006140:	837b      	strh	r3, [r7, #26]

  if (hspi->State != HAL_SPI_STATE_READY)
 8006142:	68fb      	ldr	r3, [r7, #12]
 8006144:	f893 3051 	ldrb.w	r3, [r3, #81]	@ 0x51
 8006148:	b2db      	uxtb	r3, r3
 800614a:	2b01      	cmp	r3, #1
 800614c:	d001      	beq.n	8006152 <HAL_SPI_Transmit+0x2a>
  {
    return HAL_BUSY;
 800614e:	2302      	movs	r3, #2
 8006150:	e12a      	b.n	80063a8 <HAL_SPI_Transmit+0x280>
  }

  if ((pData == NULL) || (Size == 0U))
 8006152:	68bb      	ldr	r3, [r7, #8]
 8006154:	2b00      	cmp	r3, #0
 8006156:	d002      	beq.n	800615e <HAL_SPI_Transmit+0x36>
 8006158:	88fb      	ldrh	r3, [r7, #6]
 800615a:	2b00      	cmp	r3, #0
 800615c:	d101      	bne.n	8006162 <HAL_SPI_Transmit+0x3a>
  {
    return HAL_ERROR;
 800615e:	2301      	movs	r3, #1
 8006160:	e122      	b.n	80063a8 <HAL_SPI_Transmit+0x280>
  }

  /* Process Locked */
  __HAL_LOCK(hspi);
 8006162:	68fb      	ldr	r3, [r7, #12]
 8006164:	f893 3050 	ldrb.w	r3, [r3, #80]	@ 0x50
 8006168:	2b01      	cmp	r3, #1
 800616a:	d101      	bne.n	8006170 <HAL_SPI_Transmit+0x48>
 800616c:	2302      	movs	r3, #2
 800616e:	e11b      	b.n	80063a8 <HAL_SPI_Transmit+0x280>
 8006170:	68fb      	ldr	r3, [r7, #12]
 8006172:	2201      	movs	r2, #1
 8006174:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50

  /* Set the transaction information */
  hspi->State       = HAL_SPI_STATE_BUSY_TX;
 8006178:	68fb      	ldr	r3, [r7, #12]
 800617a:	2203      	movs	r2, #3
 800617c:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 8006180:	68fb      	ldr	r3, [r7, #12]
 8006182:	2200      	movs	r2, #0
 8006184:	655a      	str	r2, [r3, #84]	@ 0x54
  hspi->pTxBuffPtr  = (const uint8_t *)pData;
 8006186:	68fb      	ldr	r3, [r7, #12]
 8006188:	68ba      	ldr	r2, [r7, #8]
 800618a:	631a      	str	r2, [r3, #48]	@ 0x30
  hspi->TxXferSize  = Size;
 800618c:	68fb      	ldr	r3, [r7, #12]
 800618e:	88fa      	ldrh	r2, [r7, #6]
 8006190:	869a      	strh	r2, [r3, #52]	@ 0x34
  hspi->TxXferCount = Size;
 8006192:	68fb      	ldr	r3, [r7, #12]
 8006194:	88fa      	ldrh	r2, [r7, #6]
 8006196:	86da      	strh	r2, [r3, #54]	@ 0x36

  /*Init field not used in handle to zero */
  hspi->pRxBuffPtr  = (uint8_t *)NULL;
 8006198:	68fb      	ldr	r3, [r7, #12]
 800619a:	2200      	movs	r2, #0
 800619c:	639a      	str	r2, [r3, #56]	@ 0x38
  hspi->RxXferSize  = 0U;
 800619e:	68fb      	ldr	r3, [r7, #12]
 80061a0:	2200      	movs	r2, #0
 80061a2:	879a      	strh	r2, [r3, #60]	@ 0x3c
  hspi->RxXferCount = 0U;
 80061a4:	68fb      	ldr	r3, [r7, #12]
 80061a6:	2200      	movs	r2, #0
 80061a8:	87da      	strh	r2, [r3, #62]	@ 0x3e
  hspi->TxISR       = NULL;
 80061aa:	68fb      	ldr	r3, [r7, #12]
 80061ac:	2200      	movs	r2, #0
 80061ae:	645a      	str	r2, [r3, #68]	@ 0x44
  hspi->RxISR       = NULL;
 80061b0:	68fb      	ldr	r3, [r7, #12]
 80061b2:	2200      	movs	r2, #0
 80061b4:	641a      	str	r2, [r3, #64]	@ 0x40

  /* Configure communication direction : 1Line */
  if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
 80061b6:	68fb      	ldr	r3, [r7, #12]
 80061b8:	689b      	ldr	r3, [r3, #8]
 80061ba:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 80061be:	d10f      	bne.n	80061e0 <HAL_SPI_Transmit+0xb8>
  {
    /* Disable SPI Peripheral before set 1Line direction (BIDIOE bit) */
    __HAL_SPI_DISABLE(hspi);
 80061c0:	68fb      	ldr	r3, [r7, #12]
 80061c2:	681b      	ldr	r3, [r3, #0]
 80061c4:	681a      	ldr	r2, [r3, #0]
 80061c6:	68fb      	ldr	r3, [r7, #12]
 80061c8:	681b      	ldr	r3, [r3, #0]
 80061ca:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 80061ce:	601a      	str	r2, [r3, #0]
    SPI_1LINE_TX(hspi);
 80061d0:	68fb      	ldr	r3, [r7, #12]
 80061d2:	681b      	ldr	r3, [r3, #0]
 80061d4:	681a      	ldr	r2, [r3, #0]
 80061d6:	68fb      	ldr	r3, [r7, #12]
 80061d8:	681b      	ldr	r3, [r3, #0]
 80061da:	f442 4280 	orr.w	r2, r2, #16384	@ 0x4000
 80061de:	601a      	str	r2, [r3, #0]
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 80061e0:	68fb      	ldr	r3, [r7, #12]
 80061e2:	681b      	ldr	r3, [r3, #0]
 80061e4:	681b      	ldr	r3, [r3, #0]
 80061e6:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80061ea:	2b40      	cmp	r3, #64	@ 0x40
 80061ec:	d007      	beq.n	80061fe <HAL_SPI_Transmit+0xd6>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 80061ee:	68fb      	ldr	r3, [r7, #12]
 80061f0:	681b      	ldr	r3, [r3, #0]
 80061f2:	681a      	ldr	r2, [r3, #0]
 80061f4:	68fb      	ldr	r3, [r7, #12]
 80061f6:	681b      	ldr	r3, [r3, #0]
 80061f8:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 80061fc:	601a      	str	r2, [r3, #0]
  }

  /* Transmit data in 16 Bit mode */
  if (hspi->Init.DataSize == SPI_DATASIZE_16BIT)
 80061fe:	68fb      	ldr	r3, [r7, #12]
 8006200:	68db      	ldr	r3, [r3, #12]
 8006202:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 8006206:	d152      	bne.n	80062ae <HAL_SPI_Transmit+0x186>
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8006208:	68fb      	ldr	r3, [r7, #12]
 800620a:	685b      	ldr	r3, [r3, #4]
 800620c:	2b00      	cmp	r3, #0
 800620e:	d002      	beq.n	8006216 <HAL_SPI_Transmit+0xee>
 8006210:	8b7b      	ldrh	r3, [r7, #26]
 8006212:	2b01      	cmp	r3, #1
 8006214:	d145      	bne.n	80062a2 <HAL_SPI_Transmit+0x17a>
    {
      hspi->Instance->DR = *((const uint16_t *)hspi->pTxBuffPtr);
 8006216:	68fb      	ldr	r3, [r7, #12]
 8006218:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800621a:	881a      	ldrh	r2, [r3, #0]
 800621c:	68fb      	ldr	r3, [r7, #12]
 800621e:	681b      	ldr	r3, [r3, #0]
 8006220:	60da      	str	r2, [r3, #12]
      hspi->pTxBuffPtr += sizeof(uint16_t);
 8006222:	68fb      	ldr	r3, [r7, #12]
 8006224:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8006226:	1c9a      	adds	r2, r3, #2
 8006228:	68fb      	ldr	r3, [r7, #12]
 800622a:	631a      	str	r2, [r3, #48]	@ 0x30
      hspi->TxXferCount--;
 800622c:	68fb      	ldr	r3, [r7, #12]
 800622e:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 8006230:	b29b      	uxth	r3, r3
 8006232:	3b01      	subs	r3, #1
 8006234:	b29a      	uxth	r2, r3
 8006236:	68fb      	ldr	r3, [r7, #12]
 8006238:	86da      	strh	r2, [r3, #54]	@ 0x36
    }
    /* Transmit data in 16 Bit mode */
    while (hspi->TxXferCount > 0U)
 800623a:	e032      	b.n	80062a2 <HAL_SPI_Transmit+0x17a>
    {
      /* Wait until TXE flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 800623c:	68fb      	ldr	r3, [r7, #12]
 800623e:	681b      	ldr	r3, [r3, #0]
 8006240:	689b      	ldr	r3, [r3, #8]
 8006242:	f003 0302 	and.w	r3, r3, #2
 8006246:	2b02      	cmp	r3, #2
 8006248:	d112      	bne.n	8006270 <HAL_SPI_Transmit+0x148>
      {
        hspi->Instance->DR = *((const uint16_t *)hspi->pTxBuffPtr);
 800624a:	68fb      	ldr	r3, [r7, #12]
 800624c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800624e:	881a      	ldrh	r2, [r3, #0]
 8006250:	68fb      	ldr	r3, [r7, #12]
 8006252:	681b      	ldr	r3, [r3, #0]
 8006254:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 8006256:	68fb      	ldr	r3, [r7, #12]
 8006258:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800625a:	1c9a      	adds	r2, r3, #2
 800625c:	68fb      	ldr	r3, [r7, #12]
 800625e:	631a      	str	r2, [r3, #48]	@ 0x30
        hspi->TxXferCount--;
 8006260:	68fb      	ldr	r3, [r7, #12]
 8006262:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 8006264:	b29b      	uxth	r3, r3
 8006266:	3b01      	subs	r3, #1
 8006268:	b29a      	uxth	r2, r3
 800626a:	68fb      	ldr	r3, [r7, #12]
 800626c:	86da      	strh	r2, [r3, #54]	@ 0x36
 800626e:	e018      	b.n	80062a2 <HAL_SPI_Transmit+0x17a>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 8006270:	f7fd f800 	bl	8003274 <HAL_GetTick>
 8006274:	4602      	mov	r2, r0
 8006276:	69fb      	ldr	r3, [r7, #28]
 8006278:	1ad3      	subs	r3, r2, r3
 800627a:	683a      	ldr	r2, [r7, #0]
 800627c:	429a      	cmp	r2, r3
 800627e:	d803      	bhi.n	8006288 <HAL_SPI_Transmit+0x160>
 8006280:	683b      	ldr	r3, [r7, #0]
 8006282:	f1b3 3fff 	cmp.w	r3, #4294967295
 8006286:	d102      	bne.n	800628e <HAL_SPI_Transmit+0x166>
 8006288:	683b      	ldr	r3, [r7, #0]
 800628a:	2b00      	cmp	r3, #0
 800628c:	d109      	bne.n	80062a2 <HAL_SPI_Transmit+0x17a>
        {
          hspi->State = HAL_SPI_STATE_READY;
 800628e:	68fb      	ldr	r3, [r7, #12]
 8006290:	2201      	movs	r2, #1
 8006292:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51
          __HAL_UNLOCK(hspi);
 8006296:	68fb      	ldr	r3, [r7, #12]
 8006298:	2200      	movs	r2, #0
 800629a:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50
          return HAL_TIMEOUT;
 800629e:	2303      	movs	r3, #3
 80062a0:	e082      	b.n	80063a8 <HAL_SPI_Transmit+0x280>
    while (hspi->TxXferCount > 0U)
 80062a2:	68fb      	ldr	r3, [r7, #12]
 80062a4:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 80062a6:	b29b      	uxth	r3, r3
 80062a8:	2b00      	cmp	r3, #0
 80062aa:	d1c7      	bne.n	800623c <HAL_SPI_Transmit+0x114>
 80062ac:	e053      	b.n	8006356 <HAL_SPI_Transmit+0x22e>
    }
  }
  /* Transmit data in 8 Bit mode */
  else
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 80062ae:	68fb      	ldr	r3, [r7, #12]
 80062b0:	685b      	ldr	r3, [r3, #4]
 80062b2:	2b00      	cmp	r3, #0
 80062b4:	d002      	beq.n	80062bc <HAL_SPI_Transmit+0x194>
 80062b6:	8b7b      	ldrh	r3, [r7, #26]
 80062b8:	2b01      	cmp	r3, #1
 80062ba:	d147      	bne.n	800634c <HAL_SPI_Transmit+0x224>
    {
      *((__IO uint8_t *)&hspi->Instance->DR) = *((const uint8_t *)hspi->pTxBuffPtr);
 80062bc:	68fb      	ldr	r3, [r7, #12]
 80062be:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 80062c0:	68fb      	ldr	r3, [r7, #12]
 80062c2:	681b      	ldr	r3, [r3, #0]
 80062c4:	330c      	adds	r3, #12
 80062c6:	7812      	ldrb	r2, [r2, #0]
 80062c8:	701a      	strb	r2, [r3, #0]
      hspi->pTxBuffPtr += sizeof(uint8_t);
 80062ca:	68fb      	ldr	r3, [r7, #12]
 80062cc:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80062ce:	1c5a      	adds	r2, r3, #1
 80062d0:	68fb      	ldr	r3, [r7, #12]
 80062d2:	631a      	str	r2, [r3, #48]	@ 0x30
      hspi->TxXferCount--;
 80062d4:	68fb      	ldr	r3, [r7, #12]
 80062d6:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 80062d8:	b29b      	uxth	r3, r3
 80062da:	3b01      	subs	r3, #1
 80062dc:	b29a      	uxth	r2, r3
 80062de:	68fb      	ldr	r3, [r7, #12]
 80062e0:	86da      	strh	r2, [r3, #54]	@ 0x36
    }
    while (hspi->TxXferCount > 0U)
 80062e2:	e033      	b.n	800634c <HAL_SPI_Transmit+0x224>
    {
      /* Wait until TXE flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 80062e4:	68fb      	ldr	r3, [r7, #12]
 80062e6:	681b      	ldr	r3, [r3, #0]
 80062e8:	689b      	ldr	r3, [r3, #8]
 80062ea:	f003 0302 	and.w	r3, r3, #2
 80062ee:	2b02      	cmp	r3, #2
 80062f0:	d113      	bne.n	800631a <HAL_SPI_Transmit+0x1f2>
      {
        *((__IO uint8_t *)&hspi->Instance->DR) = *((const uint8_t *)hspi->pTxBuffPtr);
 80062f2:	68fb      	ldr	r3, [r7, #12]
 80062f4:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 80062f6:	68fb      	ldr	r3, [r7, #12]
 80062f8:	681b      	ldr	r3, [r3, #0]
 80062fa:	330c      	adds	r3, #12
 80062fc:	7812      	ldrb	r2, [r2, #0]
 80062fe:	701a      	strb	r2, [r3, #0]
        hspi->pTxBuffPtr += sizeof(uint8_t);
 8006300:	68fb      	ldr	r3, [r7, #12]
 8006302:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8006304:	1c5a      	adds	r2, r3, #1
 8006306:	68fb      	ldr	r3, [r7, #12]
 8006308:	631a      	str	r2, [r3, #48]	@ 0x30
        hspi->TxXferCount--;
 800630a:	68fb      	ldr	r3, [r7, #12]
 800630c:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 800630e:	b29b      	uxth	r3, r3
 8006310:	3b01      	subs	r3, #1
 8006312:	b29a      	uxth	r2, r3
 8006314:	68fb      	ldr	r3, [r7, #12]
 8006316:	86da      	strh	r2, [r3, #54]	@ 0x36
 8006318:	e018      	b.n	800634c <HAL_SPI_Transmit+0x224>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 800631a:	f7fc ffab 	bl	8003274 <HAL_GetTick>
 800631e:	4602      	mov	r2, r0
 8006320:	69fb      	ldr	r3, [r7, #28]
 8006322:	1ad3      	subs	r3, r2, r3
 8006324:	683a      	ldr	r2, [r7, #0]
 8006326:	429a      	cmp	r2, r3
 8006328:	d803      	bhi.n	8006332 <HAL_SPI_Transmit+0x20a>
 800632a:	683b      	ldr	r3, [r7, #0]
 800632c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8006330:	d102      	bne.n	8006338 <HAL_SPI_Transmit+0x210>
 8006332:	683b      	ldr	r3, [r7, #0]
 8006334:	2b00      	cmp	r3, #0
 8006336:	d109      	bne.n	800634c <HAL_SPI_Transmit+0x224>
        {
          hspi->State = HAL_SPI_STATE_READY;
 8006338:	68fb      	ldr	r3, [r7, #12]
 800633a:	2201      	movs	r2, #1
 800633c:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51
          __HAL_UNLOCK(hspi);
 8006340:	68fb      	ldr	r3, [r7, #12]
 8006342:	2200      	movs	r2, #0
 8006344:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50
          return HAL_TIMEOUT;
 8006348:	2303      	movs	r3, #3
 800634a:	e02d      	b.n	80063a8 <HAL_SPI_Transmit+0x280>
    while (hspi->TxXferCount > 0U)
 800634c:	68fb      	ldr	r3, [r7, #12]
 800634e:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 8006350:	b29b      	uxth	r3, r3
 8006352:	2b00      	cmp	r3, #0
 8006354:	d1c6      	bne.n	80062e4 <HAL_SPI_Transmit+0x1bc>
    SET_BIT(hspi->Instance->CR1, SPI_CR1_CRCNEXT);
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 8006356:	69fa      	ldr	r2, [r7, #28]
 8006358:	6839      	ldr	r1, [r7, #0]
 800635a:	68f8      	ldr	r0, [r7, #12]
 800635c:	f000 f8be 	bl	80064dc <SPI_EndRxTxTransaction>
 8006360:	4603      	mov	r3, r0
 8006362:	2b00      	cmp	r3, #0
 8006364:	d002      	beq.n	800636c <HAL_SPI_Transmit+0x244>
  {
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 8006366:	68fb      	ldr	r3, [r7, #12]
 8006368:	2220      	movs	r2, #32
 800636a:	655a      	str	r2, [r3, #84]	@ 0x54
  }

  /* Clear overrun flag in 2 Lines communication mode because received is not read */
  if (hspi->Init.Direction == SPI_DIRECTION_2LINES)
 800636c:	68fb      	ldr	r3, [r7, #12]
 800636e:	689b      	ldr	r3, [r3, #8]
 8006370:	2b00      	cmp	r3, #0
 8006372:	d10a      	bne.n	800638a <HAL_SPI_Transmit+0x262>
  {
    __HAL_SPI_CLEAR_OVRFLAG(hspi);
 8006374:	2300      	movs	r3, #0
 8006376:	617b      	str	r3, [r7, #20]
 8006378:	68fb      	ldr	r3, [r7, #12]
 800637a:	681b      	ldr	r3, [r3, #0]
 800637c:	68db      	ldr	r3, [r3, #12]
 800637e:	617b      	str	r3, [r7, #20]
 8006380:	68fb      	ldr	r3, [r7, #12]
 8006382:	681b      	ldr	r3, [r3, #0]
 8006384:	689b      	ldr	r3, [r3, #8]
 8006386:	617b      	str	r3, [r7, #20]
 8006388:	697b      	ldr	r3, [r7, #20]
  }

  hspi->State = HAL_SPI_STATE_READY;
 800638a:	68fb      	ldr	r3, [r7, #12]
 800638c:	2201      	movs	r2, #1
 800638e:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51
  /* Process Unlocked */
  __HAL_UNLOCK(hspi);
 8006392:	68fb      	ldr	r3, [r7, #12]
 8006394:	2200      	movs	r2, #0
 8006396:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50

  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 800639a:	68fb      	ldr	r3, [r7, #12]
 800639c:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800639e:	2b00      	cmp	r3, #0
 80063a0:	d001      	beq.n	80063a6 <HAL_SPI_Transmit+0x27e>
  {
    return HAL_ERROR;
 80063a2:	2301      	movs	r3, #1
 80063a4:	e000      	b.n	80063a8 <HAL_SPI_Transmit+0x280>
  }
  else
  {
    return HAL_OK;
 80063a6:	2300      	movs	r3, #0
  }
}
 80063a8:	4618      	mov	r0, r3
 80063aa:	3720      	adds	r7, #32
 80063ac:	46bd      	mov	sp, r7
 80063ae:	bd80      	pop	{r7, pc}

080063b0 <HAL_SPI_GetState>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval SPI state
  */
HAL_SPI_StateTypeDef HAL_SPI_GetState(const SPI_HandleTypeDef *hspi)
{
 80063b0:	b480      	push	{r7}
 80063b2:	b083      	sub	sp, #12
 80063b4:	af00      	add	r7, sp, #0
 80063b6:	6078      	str	r0, [r7, #4]
  /* Return SPI handle state */
  return hspi->State;
 80063b8:	687b      	ldr	r3, [r7, #4]
 80063ba:	f893 3051 	ldrb.w	r3, [r3, #81]	@ 0x51
 80063be:	b2db      	uxtb	r3, r3
}
 80063c0:	4618      	mov	r0, r3
 80063c2:	370c      	adds	r7, #12
 80063c4:	46bd      	mov	sp, r7
 80063c6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80063ca:	4770      	bx	lr

080063cc <SPI_WaitFlagStateUntilTimeout>:
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_WaitFlagStateUntilTimeout(SPI_HandleTypeDef *hspi, uint32_t Flag, FlagStatus State,
                                                       uint32_t Timeout, uint32_t Tickstart)
{
 80063cc:	b580      	push	{r7, lr}
 80063ce:	b088      	sub	sp, #32
 80063d0:	af00      	add	r7, sp, #0
 80063d2:	60f8      	str	r0, [r7, #12]
 80063d4:	60b9      	str	r1, [r7, #8]
 80063d6:	603b      	str	r3, [r7, #0]
 80063d8:	4613      	mov	r3, r2
 80063da:	71fb      	strb	r3, [r7, #7]
  __IO uint32_t count;
  uint32_t tmp_timeout;
  uint32_t tmp_tickstart;

  /* Adjust Timeout value  in case of end of transfer */
  tmp_timeout   = Timeout - (HAL_GetTick() - Tickstart);
 80063dc:	f7fc ff4a 	bl	8003274 <HAL_GetTick>
 80063e0:	4602      	mov	r2, r0
 80063e2:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80063e4:	1a9b      	subs	r3, r3, r2
 80063e6:	683a      	ldr	r2, [r7, #0]
 80063e8:	4413      	add	r3, r2
 80063ea:	61fb      	str	r3, [r7, #28]
  tmp_tickstart = HAL_GetTick();
 80063ec:	f7fc ff42 	bl	8003274 <HAL_GetTick>
 80063f0:	61b8      	str	r0, [r7, #24]

  /* Calculate Timeout based on a software loop to avoid blocking issue if Systick is disabled */
  count = tmp_timeout * ((SystemCoreClock * 32U) >> 20U);
 80063f2:	4b39      	ldr	r3, [pc, #228]	@ (80064d8 <SPI_WaitFlagStateUntilTimeout+0x10c>)
 80063f4:	681b      	ldr	r3, [r3, #0]
 80063f6:	015b      	lsls	r3, r3, #5
 80063f8:	0d1b      	lsrs	r3, r3, #20
 80063fa:	69fa      	ldr	r2, [r7, #28]
 80063fc:	fb02 f303 	mul.w	r3, r2, r3
 8006400:	617b      	str	r3, [r7, #20]

  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 8006402:	e054      	b.n	80064ae <SPI_WaitFlagStateUntilTimeout+0xe2>
  {
    if (Timeout != HAL_MAX_DELAY)
 8006404:	683b      	ldr	r3, [r7, #0]
 8006406:	f1b3 3fff 	cmp.w	r3, #4294967295
 800640a:	d050      	beq.n	80064ae <SPI_WaitFlagStateUntilTimeout+0xe2>
    {
      if (((HAL_GetTick() - tmp_tickstart) >= tmp_timeout) || (tmp_timeout == 0U))
 800640c:	f7fc ff32 	bl	8003274 <HAL_GetTick>
 8006410:	4602      	mov	r2, r0
 8006412:	69bb      	ldr	r3, [r7, #24]
 8006414:	1ad3      	subs	r3, r2, r3
 8006416:	69fa      	ldr	r2, [r7, #28]
 8006418:	429a      	cmp	r2, r3
 800641a:	d902      	bls.n	8006422 <SPI_WaitFlagStateUntilTimeout+0x56>
 800641c:	69fb      	ldr	r3, [r7, #28]
 800641e:	2b00      	cmp	r3, #0
 8006420:	d13d      	bne.n	800649e <SPI_WaitFlagStateUntilTimeout+0xd2>
        /* Disable the SPI and reset the CRC: the CRC value should be cleared
           on both master and slave sides in order to resynchronize the master
           and slave for their respective CRC calculation */

        /* Disable TXE, RXNE and ERR interrupts for the interrupt process */
        __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_RXNE | SPI_IT_ERR));
 8006422:	68fb      	ldr	r3, [r7, #12]
 8006424:	681b      	ldr	r3, [r3, #0]
 8006426:	685a      	ldr	r2, [r3, #4]
 8006428:	68fb      	ldr	r3, [r7, #12]
 800642a:	681b      	ldr	r3, [r3, #0]
 800642c:	f022 02e0 	bic.w	r2, r2, #224	@ 0xe0
 8006430:	605a      	str	r2, [r3, #4]

        if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8006432:	68fb      	ldr	r3, [r7, #12]
 8006434:	685b      	ldr	r3, [r3, #4]
 8006436:	f5b3 7f82 	cmp.w	r3, #260	@ 0x104
 800643a:	d111      	bne.n	8006460 <SPI_WaitFlagStateUntilTimeout+0x94>
 800643c:	68fb      	ldr	r3, [r7, #12]
 800643e:	689b      	ldr	r3, [r3, #8]
 8006440:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 8006444:	d004      	beq.n	8006450 <SPI_WaitFlagStateUntilTimeout+0x84>
                                                     || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 8006446:	68fb      	ldr	r3, [r7, #12]
 8006448:	689b      	ldr	r3, [r3, #8]
 800644a:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 800644e:	d107      	bne.n	8006460 <SPI_WaitFlagStateUntilTimeout+0x94>
        {
          /* Disable SPI peripheral */
          __HAL_SPI_DISABLE(hspi);
 8006450:	68fb      	ldr	r3, [r7, #12]
 8006452:	681b      	ldr	r3, [r3, #0]
 8006454:	681a      	ldr	r2, [r3, #0]
 8006456:	68fb      	ldr	r3, [r7, #12]
 8006458:	681b      	ldr	r3, [r3, #0]
 800645a:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 800645e:	601a      	str	r2, [r3, #0]
        }

        /* Reset CRC Calculation */
        if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 8006460:	68fb      	ldr	r3, [r7, #12]
 8006462:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8006464:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8006468:	d10f      	bne.n	800648a <SPI_WaitFlagStateUntilTimeout+0xbe>
        {
          SPI_RESET_CRC(hspi);
 800646a:	68fb      	ldr	r3, [r7, #12]
 800646c:	681b      	ldr	r3, [r3, #0]
 800646e:	681a      	ldr	r2, [r3, #0]
 8006470:	68fb      	ldr	r3, [r7, #12]
 8006472:	681b      	ldr	r3, [r3, #0]
 8006474:	f422 5200 	bic.w	r2, r2, #8192	@ 0x2000
 8006478:	601a      	str	r2, [r3, #0]
 800647a:	68fb      	ldr	r3, [r7, #12]
 800647c:	681b      	ldr	r3, [r3, #0]
 800647e:	681a      	ldr	r2, [r3, #0]
 8006480:	68fb      	ldr	r3, [r7, #12]
 8006482:	681b      	ldr	r3, [r3, #0]
 8006484:	f442 5200 	orr.w	r2, r2, #8192	@ 0x2000
 8006488:	601a      	str	r2, [r3, #0]
        }

        hspi->State = HAL_SPI_STATE_READY;
 800648a:	68fb      	ldr	r3, [r7, #12]
 800648c:	2201      	movs	r2, #1
 800648e:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51

        /* Process Unlocked */
        __HAL_UNLOCK(hspi);
 8006492:	68fb      	ldr	r3, [r7, #12]
 8006494:	2200      	movs	r2, #0
 8006496:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50

        return HAL_TIMEOUT;
 800649a:	2303      	movs	r3, #3
 800649c:	e017      	b.n	80064ce <SPI_WaitFlagStateUntilTimeout+0x102>
      }
      /* If Systick is disabled or not incremented, deactivate timeout to go in disable loop procedure */
      if (count == 0U)
 800649e:	697b      	ldr	r3, [r7, #20]
 80064a0:	2b00      	cmp	r3, #0
 80064a2:	d101      	bne.n	80064a8 <SPI_WaitFlagStateUntilTimeout+0xdc>
      {
        tmp_timeout = 0U;
 80064a4:	2300      	movs	r3, #0
 80064a6:	61fb      	str	r3, [r7, #28]
      }
      count--;
 80064a8:	697b      	ldr	r3, [r7, #20]
 80064aa:	3b01      	subs	r3, #1
 80064ac:	617b      	str	r3, [r7, #20]
  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 80064ae:	68fb      	ldr	r3, [r7, #12]
 80064b0:	681b      	ldr	r3, [r3, #0]
 80064b2:	689a      	ldr	r2, [r3, #8]
 80064b4:	68bb      	ldr	r3, [r7, #8]
 80064b6:	4013      	ands	r3, r2
 80064b8:	68ba      	ldr	r2, [r7, #8]
 80064ba:	429a      	cmp	r2, r3
 80064bc:	bf0c      	ite	eq
 80064be:	2301      	moveq	r3, #1
 80064c0:	2300      	movne	r3, #0
 80064c2:	b2db      	uxtb	r3, r3
 80064c4:	461a      	mov	r2, r3
 80064c6:	79fb      	ldrb	r3, [r7, #7]
 80064c8:	429a      	cmp	r2, r3
 80064ca:	d19b      	bne.n	8006404 <SPI_WaitFlagStateUntilTimeout+0x38>
    }
  }

  return HAL_OK;
 80064cc:	2300      	movs	r3, #0
}
 80064ce:	4618      	mov	r0, r3
 80064d0:	3720      	adds	r7, #32
 80064d2:	46bd      	mov	sp, r7
 80064d4:	bd80      	pop	{r7, pc}
 80064d6:	bf00      	nop
 80064d8:	20000024 	.word	0x20000024

080064dc <SPI_EndRxTxTransaction>:
  * @param  Timeout Timeout duration
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_EndRxTxTransaction(SPI_HandleTypeDef *hspi, uint32_t Timeout, uint32_t Tickstart)
{
 80064dc:	b580      	push	{r7, lr}
 80064de:	b088      	sub	sp, #32
 80064e0:	af02      	add	r7, sp, #8
 80064e2:	60f8      	str	r0, [r7, #12]
 80064e4:	60b9      	str	r1, [r7, #8]
 80064e6:	607a      	str	r2, [r7, #4]
  /* Wait until TXE flag */
  if(SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_TXE, SET, Timeout, Tickstart) != HAL_OK)
 80064e8:	687b      	ldr	r3, [r7, #4]
 80064ea:	9300      	str	r3, [sp, #0]
 80064ec:	68bb      	ldr	r3, [r7, #8]
 80064ee:	2201      	movs	r2, #1
 80064f0:	2102      	movs	r1, #2
 80064f2:	68f8      	ldr	r0, [r7, #12]
 80064f4:	f7ff ff6a 	bl	80063cc <SPI_WaitFlagStateUntilTimeout>
 80064f8:	4603      	mov	r3, r0
 80064fa:	2b00      	cmp	r3, #0
 80064fc:	d007      	beq.n	800650e <SPI_EndRxTxTransaction+0x32>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 80064fe:	68fb      	ldr	r3, [r7, #12]
 8006500:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8006502:	f043 0220 	orr.w	r2, r3, #32
 8006506:	68fb      	ldr	r3, [r7, #12]
 8006508:	655a      	str	r2, [r3, #84]	@ 0x54
    return HAL_TIMEOUT;
 800650a:	2303      	movs	r3, #3
 800650c:	e032      	b.n	8006574 <SPI_EndRxTxTransaction+0x98>
  }

  /* Timeout in µs */
  __IO uint32_t count = SPI_BSY_FLAG_WORKAROUND_TIMEOUT * (SystemCoreClock / 24U / 1000000U);
 800650e:	4b1b      	ldr	r3, [pc, #108]	@ (800657c <SPI_EndRxTxTransaction+0xa0>)
 8006510:	681b      	ldr	r3, [r3, #0]
 8006512:	4a1b      	ldr	r2, [pc, #108]	@ (8006580 <SPI_EndRxTxTransaction+0xa4>)
 8006514:	fba2 2303 	umull	r2, r3, r2, r3
 8006518:	0d5b      	lsrs	r3, r3, #21
 800651a:	f44f 727a 	mov.w	r2, #1000	@ 0x3e8
 800651e:	fb02 f303 	mul.w	r3, r2, r3
 8006522:	617b      	str	r3, [r7, #20]
  /* Erratasheet: BSY bit may stay high at the end of a data transfer in Slave mode */
  if (hspi->Init.Mode == SPI_MODE_MASTER)
 8006524:	68fb      	ldr	r3, [r7, #12]
 8006526:	685b      	ldr	r3, [r3, #4]
 8006528:	f5b3 7f82 	cmp.w	r3, #260	@ 0x104
 800652c:	d112      	bne.n	8006554 <SPI_EndRxTxTransaction+0x78>
  {
    /* Control the BSY flag */
    if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_BSY, RESET, Timeout, Tickstart) != HAL_OK)
 800652e:	687b      	ldr	r3, [r7, #4]
 8006530:	9300      	str	r3, [sp, #0]
 8006532:	68bb      	ldr	r3, [r7, #8]
 8006534:	2200      	movs	r2, #0
 8006536:	2180      	movs	r1, #128	@ 0x80
 8006538:	68f8      	ldr	r0, [r7, #12]
 800653a:	f7ff ff47 	bl	80063cc <SPI_WaitFlagStateUntilTimeout>
 800653e:	4603      	mov	r3, r0
 8006540:	2b00      	cmp	r3, #0
 8006542:	d016      	beq.n	8006572 <SPI_EndRxTxTransaction+0x96>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8006544:	68fb      	ldr	r3, [r7, #12]
 8006546:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8006548:	f043 0220 	orr.w	r2, r3, #32
 800654c:	68fb      	ldr	r3, [r7, #12]
 800654e:	655a      	str	r2, [r3, #84]	@ 0x54
      return HAL_TIMEOUT;
 8006550:	2303      	movs	r3, #3
 8006552:	e00f      	b.n	8006574 <SPI_EndRxTxTransaction+0x98>
    * User have to calculate the timeout value to fit with the time of 1 byte transfer.
    * This time is directly link with the SPI clock from Master device.
    */
    do
    {
      if (count == 0U)
 8006554:	697b      	ldr	r3, [r7, #20]
 8006556:	2b00      	cmp	r3, #0
 8006558:	d00a      	beq.n	8006570 <SPI_EndRxTxTransaction+0x94>
      {
        break;
      }
      count--;
 800655a:	697b      	ldr	r3, [r7, #20]
 800655c:	3b01      	subs	r3, #1
 800655e:	617b      	str	r3, [r7, #20]
    } while (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_BSY) != RESET);
 8006560:	68fb      	ldr	r3, [r7, #12]
 8006562:	681b      	ldr	r3, [r3, #0]
 8006564:	689b      	ldr	r3, [r3, #8]
 8006566:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800656a:	2b80      	cmp	r3, #128	@ 0x80
 800656c:	d0f2      	beq.n	8006554 <SPI_EndRxTxTransaction+0x78>
 800656e:	e000      	b.n	8006572 <SPI_EndRxTxTransaction+0x96>
        break;
 8006570:	bf00      	nop
  }

  return HAL_OK;
 8006572:	2300      	movs	r3, #0
}
 8006574:	4618      	mov	r0, r3
 8006576:	3718      	adds	r7, #24
 8006578:	46bd      	mov	sp, r7
 800657a:	bd80      	pop	{r7, pc}
 800657c:	20000024 	.word	0x20000024
 8006580:	165e9f81 	.word	0x165e9f81

08006584 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8006584:	b580      	push	{r7, lr}
 8006586:	b082      	sub	sp, #8
 8006588:	af00      	add	r7, sp, #0
 800658a:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 800658c:	687b      	ldr	r3, [r7, #4]
 800658e:	2b00      	cmp	r3, #0
 8006590:	d101      	bne.n	8006596 <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 8006592:	2301      	movs	r3, #1
 8006594:	e041      	b.n	800661a <HAL_TIM_Base_Init+0x96>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8006596:	687b      	ldr	r3, [r7, #4]
 8006598:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 800659c:	b2db      	uxtb	r3, r3
 800659e:	2b00      	cmp	r3, #0
 80065a0:	d106      	bne.n	80065b0 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 80065a2:	687b      	ldr	r3, [r7, #4]
 80065a4:	2200      	movs	r2, #0
 80065a6:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 80065aa:	6878      	ldr	r0, [r7, #4]
 80065ac:	f7fc f938 	bl	8002820 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 80065b0:	687b      	ldr	r3, [r7, #4]
 80065b2:	2202      	movs	r2, #2
 80065b4:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 80065b8:	687b      	ldr	r3, [r7, #4]
 80065ba:	681a      	ldr	r2, [r3, #0]
 80065bc:	687b      	ldr	r3, [r7, #4]
 80065be:	3304      	adds	r3, #4
 80065c0:	4619      	mov	r1, r3
 80065c2:	4610      	mov	r0, r2
 80065c4:	f000 f896 	bl	80066f4 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 80065c8:	687b      	ldr	r3, [r7, #4]
 80065ca:	2201      	movs	r2, #1
 80065cc:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80065d0:	687b      	ldr	r3, [r7, #4]
 80065d2:	2201      	movs	r2, #1
 80065d4:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 80065d8:	687b      	ldr	r3, [r7, #4]
 80065da:	2201      	movs	r2, #1
 80065dc:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 80065e0:	687b      	ldr	r3, [r7, #4]
 80065e2:	2201      	movs	r2, #1
 80065e4:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 80065e8:	687b      	ldr	r3, [r7, #4]
 80065ea:	2201      	movs	r2, #1
 80065ec:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80065f0:	687b      	ldr	r3, [r7, #4]
 80065f2:	2201      	movs	r2, #1
 80065f4:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 80065f8:	687b      	ldr	r3, [r7, #4]
 80065fa:	2201      	movs	r2, #1
 80065fc:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
 8006600:	687b      	ldr	r3, [r7, #4]
 8006602:	2201      	movs	r2, #1
 8006604:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 8006608:	687b      	ldr	r3, [r7, #4]
 800660a:	2201      	movs	r2, #1
 800660c:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8006610:	687b      	ldr	r3, [r7, #4]
 8006612:	2201      	movs	r2, #1
 8006614:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  return HAL_OK;
 8006618:	2300      	movs	r3, #0
}
 800661a:	4618      	mov	r0, r3
 800661c:	3708      	adds	r7, #8
 800661e:	46bd      	mov	sp, r7
 8006620:	bd80      	pop	{r7, pc}
	...

08006624 <HAL_TIM_Base_Start>:
  * @brief  Starts the TIM Base generation.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start(TIM_HandleTypeDef *htim)
{
 8006624:	b480      	push	{r7}
 8006626:	b085      	sub	sp, #20
 8006628:	af00      	add	r7, sp, #0
 800662a:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 800662c:	687b      	ldr	r3, [r7, #4]
 800662e:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8006632:	b2db      	uxtb	r3, r3
 8006634:	2b01      	cmp	r3, #1
 8006636:	d001      	beq.n	800663c <HAL_TIM_Base_Start+0x18>
  {
    return HAL_ERROR;
 8006638:	2301      	movs	r3, #1
 800663a:	e046      	b.n	80066ca <HAL_TIM_Base_Start+0xa6>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 800663c:	687b      	ldr	r3, [r7, #4]
 800663e:	2202      	movs	r2, #2
 8006640:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8006644:	687b      	ldr	r3, [r7, #4]
 8006646:	681b      	ldr	r3, [r3, #0]
 8006648:	4a23      	ldr	r2, [pc, #140]	@ (80066d8 <HAL_TIM_Base_Start+0xb4>)
 800664a:	4293      	cmp	r3, r2
 800664c:	d022      	beq.n	8006694 <HAL_TIM_Base_Start+0x70>
 800664e:	687b      	ldr	r3, [r7, #4]
 8006650:	681b      	ldr	r3, [r3, #0]
 8006652:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8006656:	d01d      	beq.n	8006694 <HAL_TIM_Base_Start+0x70>
 8006658:	687b      	ldr	r3, [r7, #4]
 800665a:	681b      	ldr	r3, [r3, #0]
 800665c:	4a1f      	ldr	r2, [pc, #124]	@ (80066dc <HAL_TIM_Base_Start+0xb8>)
 800665e:	4293      	cmp	r3, r2
 8006660:	d018      	beq.n	8006694 <HAL_TIM_Base_Start+0x70>
 8006662:	687b      	ldr	r3, [r7, #4]
 8006664:	681b      	ldr	r3, [r3, #0]
 8006666:	4a1e      	ldr	r2, [pc, #120]	@ (80066e0 <HAL_TIM_Base_Start+0xbc>)
 8006668:	4293      	cmp	r3, r2
 800666a:	d013      	beq.n	8006694 <HAL_TIM_Base_Start+0x70>
 800666c:	687b      	ldr	r3, [r7, #4]
 800666e:	681b      	ldr	r3, [r3, #0]
 8006670:	4a1c      	ldr	r2, [pc, #112]	@ (80066e4 <HAL_TIM_Base_Start+0xc0>)
 8006672:	4293      	cmp	r3, r2
 8006674:	d00e      	beq.n	8006694 <HAL_TIM_Base_Start+0x70>
 8006676:	687b      	ldr	r3, [r7, #4]
 8006678:	681b      	ldr	r3, [r3, #0]
 800667a:	4a1b      	ldr	r2, [pc, #108]	@ (80066e8 <HAL_TIM_Base_Start+0xc4>)
 800667c:	4293      	cmp	r3, r2
 800667e:	d009      	beq.n	8006694 <HAL_TIM_Base_Start+0x70>
 8006680:	687b      	ldr	r3, [r7, #4]
 8006682:	681b      	ldr	r3, [r3, #0]
 8006684:	4a19      	ldr	r2, [pc, #100]	@ (80066ec <HAL_TIM_Base_Start+0xc8>)
 8006686:	4293      	cmp	r3, r2
 8006688:	d004      	beq.n	8006694 <HAL_TIM_Base_Start+0x70>
 800668a:	687b      	ldr	r3, [r7, #4]
 800668c:	681b      	ldr	r3, [r3, #0]
 800668e:	4a18      	ldr	r2, [pc, #96]	@ (80066f0 <HAL_TIM_Base_Start+0xcc>)
 8006690:	4293      	cmp	r3, r2
 8006692:	d111      	bne.n	80066b8 <HAL_TIM_Base_Start+0x94>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8006694:	687b      	ldr	r3, [r7, #4]
 8006696:	681b      	ldr	r3, [r3, #0]
 8006698:	689b      	ldr	r3, [r3, #8]
 800669a:	f003 0307 	and.w	r3, r3, #7
 800669e:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80066a0:	68fb      	ldr	r3, [r7, #12]
 80066a2:	2b06      	cmp	r3, #6
 80066a4:	d010      	beq.n	80066c8 <HAL_TIM_Base_Start+0xa4>
    {
      __HAL_TIM_ENABLE(htim);
 80066a6:	687b      	ldr	r3, [r7, #4]
 80066a8:	681b      	ldr	r3, [r3, #0]
 80066aa:	681a      	ldr	r2, [r3, #0]
 80066ac:	687b      	ldr	r3, [r7, #4]
 80066ae:	681b      	ldr	r3, [r3, #0]
 80066b0:	f042 0201 	orr.w	r2, r2, #1
 80066b4:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80066b6:	e007      	b.n	80066c8 <HAL_TIM_Base_Start+0xa4>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 80066b8:	687b      	ldr	r3, [r7, #4]
 80066ba:	681b      	ldr	r3, [r3, #0]
 80066bc:	681a      	ldr	r2, [r3, #0]
 80066be:	687b      	ldr	r3, [r7, #4]
 80066c0:	681b      	ldr	r3, [r3, #0]
 80066c2:	f042 0201 	orr.w	r2, r2, #1
 80066c6:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 80066c8:	2300      	movs	r3, #0
}
 80066ca:	4618      	mov	r0, r3
 80066cc:	3714      	adds	r7, #20
 80066ce:	46bd      	mov	sp, r7
 80066d0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80066d4:	4770      	bx	lr
 80066d6:	bf00      	nop
 80066d8:	40010000 	.word	0x40010000
 80066dc:	40000400 	.word	0x40000400
 80066e0:	40000800 	.word	0x40000800
 80066e4:	40000c00 	.word	0x40000c00
 80066e8:	40010400 	.word	0x40010400
 80066ec:	40014000 	.word	0x40014000
 80066f0:	40001800 	.word	0x40001800

080066f4 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, const TIM_Base_InitTypeDef *Structure)
{
 80066f4:	b480      	push	{r7}
 80066f6:	b085      	sub	sp, #20
 80066f8:	af00      	add	r7, sp, #0
 80066fa:	6078      	str	r0, [r7, #4]
 80066fc:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 80066fe:	687b      	ldr	r3, [r7, #4]
 8006700:	681b      	ldr	r3, [r3, #0]
 8006702:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8006704:	687b      	ldr	r3, [r7, #4]
 8006706:	4a46      	ldr	r2, [pc, #280]	@ (8006820 <TIM_Base_SetConfig+0x12c>)
 8006708:	4293      	cmp	r3, r2
 800670a:	d013      	beq.n	8006734 <TIM_Base_SetConfig+0x40>
 800670c:	687b      	ldr	r3, [r7, #4]
 800670e:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8006712:	d00f      	beq.n	8006734 <TIM_Base_SetConfig+0x40>
 8006714:	687b      	ldr	r3, [r7, #4]
 8006716:	4a43      	ldr	r2, [pc, #268]	@ (8006824 <TIM_Base_SetConfig+0x130>)
 8006718:	4293      	cmp	r3, r2
 800671a:	d00b      	beq.n	8006734 <TIM_Base_SetConfig+0x40>
 800671c:	687b      	ldr	r3, [r7, #4]
 800671e:	4a42      	ldr	r2, [pc, #264]	@ (8006828 <TIM_Base_SetConfig+0x134>)
 8006720:	4293      	cmp	r3, r2
 8006722:	d007      	beq.n	8006734 <TIM_Base_SetConfig+0x40>
 8006724:	687b      	ldr	r3, [r7, #4]
 8006726:	4a41      	ldr	r2, [pc, #260]	@ (800682c <TIM_Base_SetConfig+0x138>)
 8006728:	4293      	cmp	r3, r2
 800672a:	d003      	beq.n	8006734 <TIM_Base_SetConfig+0x40>
 800672c:	687b      	ldr	r3, [r7, #4]
 800672e:	4a40      	ldr	r2, [pc, #256]	@ (8006830 <TIM_Base_SetConfig+0x13c>)
 8006730:	4293      	cmp	r3, r2
 8006732:	d108      	bne.n	8006746 <TIM_Base_SetConfig+0x52>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8006734:	68fb      	ldr	r3, [r7, #12]
 8006736:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 800673a:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 800673c:	683b      	ldr	r3, [r7, #0]
 800673e:	685b      	ldr	r3, [r3, #4]
 8006740:	68fa      	ldr	r2, [r7, #12]
 8006742:	4313      	orrs	r3, r2
 8006744:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8006746:	687b      	ldr	r3, [r7, #4]
 8006748:	4a35      	ldr	r2, [pc, #212]	@ (8006820 <TIM_Base_SetConfig+0x12c>)
 800674a:	4293      	cmp	r3, r2
 800674c:	d02b      	beq.n	80067a6 <TIM_Base_SetConfig+0xb2>
 800674e:	687b      	ldr	r3, [r7, #4]
 8006750:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8006754:	d027      	beq.n	80067a6 <TIM_Base_SetConfig+0xb2>
 8006756:	687b      	ldr	r3, [r7, #4]
 8006758:	4a32      	ldr	r2, [pc, #200]	@ (8006824 <TIM_Base_SetConfig+0x130>)
 800675a:	4293      	cmp	r3, r2
 800675c:	d023      	beq.n	80067a6 <TIM_Base_SetConfig+0xb2>
 800675e:	687b      	ldr	r3, [r7, #4]
 8006760:	4a31      	ldr	r2, [pc, #196]	@ (8006828 <TIM_Base_SetConfig+0x134>)
 8006762:	4293      	cmp	r3, r2
 8006764:	d01f      	beq.n	80067a6 <TIM_Base_SetConfig+0xb2>
 8006766:	687b      	ldr	r3, [r7, #4]
 8006768:	4a30      	ldr	r2, [pc, #192]	@ (800682c <TIM_Base_SetConfig+0x138>)
 800676a:	4293      	cmp	r3, r2
 800676c:	d01b      	beq.n	80067a6 <TIM_Base_SetConfig+0xb2>
 800676e:	687b      	ldr	r3, [r7, #4]
 8006770:	4a2f      	ldr	r2, [pc, #188]	@ (8006830 <TIM_Base_SetConfig+0x13c>)
 8006772:	4293      	cmp	r3, r2
 8006774:	d017      	beq.n	80067a6 <TIM_Base_SetConfig+0xb2>
 8006776:	687b      	ldr	r3, [r7, #4]
 8006778:	4a2e      	ldr	r2, [pc, #184]	@ (8006834 <TIM_Base_SetConfig+0x140>)
 800677a:	4293      	cmp	r3, r2
 800677c:	d013      	beq.n	80067a6 <TIM_Base_SetConfig+0xb2>
 800677e:	687b      	ldr	r3, [r7, #4]
 8006780:	4a2d      	ldr	r2, [pc, #180]	@ (8006838 <TIM_Base_SetConfig+0x144>)
 8006782:	4293      	cmp	r3, r2
 8006784:	d00f      	beq.n	80067a6 <TIM_Base_SetConfig+0xb2>
 8006786:	687b      	ldr	r3, [r7, #4]
 8006788:	4a2c      	ldr	r2, [pc, #176]	@ (800683c <TIM_Base_SetConfig+0x148>)
 800678a:	4293      	cmp	r3, r2
 800678c:	d00b      	beq.n	80067a6 <TIM_Base_SetConfig+0xb2>
 800678e:	687b      	ldr	r3, [r7, #4]
 8006790:	4a2b      	ldr	r2, [pc, #172]	@ (8006840 <TIM_Base_SetConfig+0x14c>)
 8006792:	4293      	cmp	r3, r2
 8006794:	d007      	beq.n	80067a6 <TIM_Base_SetConfig+0xb2>
 8006796:	687b      	ldr	r3, [r7, #4]
 8006798:	4a2a      	ldr	r2, [pc, #168]	@ (8006844 <TIM_Base_SetConfig+0x150>)
 800679a:	4293      	cmp	r3, r2
 800679c:	d003      	beq.n	80067a6 <TIM_Base_SetConfig+0xb2>
 800679e:	687b      	ldr	r3, [r7, #4]
 80067a0:	4a29      	ldr	r2, [pc, #164]	@ (8006848 <TIM_Base_SetConfig+0x154>)
 80067a2:	4293      	cmp	r3, r2
 80067a4:	d108      	bne.n	80067b8 <TIM_Base_SetConfig+0xc4>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 80067a6:	68fb      	ldr	r3, [r7, #12]
 80067a8:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 80067ac:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 80067ae:	683b      	ldr	r3, [r7, #0]
 80067b0:	68db      	ldr	r3, [r3, #12]
 80067b2:	68fa      	ldr	r2, [r7, #12]
 80067b4:	4313      	orrs	r3, r2
 80067b6:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 80067b8:	68fb      	ldr	r3, [r7, #12]
 80067ba:	f023 0280 	bic.w	r2, r3, #128	@ 0x80
 80067be:	683b      	ldr	r3, [r7, #0]
 80067c0:	695b      	ldr	r3, [r3, #20]
 80067c2:	4313      	orrs	r3, r2
 80067c4:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 80067c6:	687b      	ldr	r3, [r7, #4]
 80067c8:	68fa      	ldr	r2, [r7, #12]
 80067ca:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 80067cc:	683b      	ldr	r3, [r7, #0]
 80067ce:	689a      	ldr	r2, [r3, #8]
 80067d0:	687b      	ldr	r3, [r7, #4]
 80067d2:	62da      	str	r2, [r3, #44]	@ 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 80067d4:	683b      	ldr	r3, [r7, #0]
 80067d6:	681a      	ldr	r2, [r3, #0]
 80067d8:	687b      	ldr	r3, [r7, #4]
 80067da:	629a      	str	r2, [r3, #40]	@ 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 80067dc:	687b      	ldr	r3, [r7, #4]
 80067de:	4a10      	ldr	r2, [pc, #64]	@ (8006820 <TIM_Base_SetConfig+0x12c>)
 80067e0:	4293      	cmp	r3, r2
 80067e2:	d003      	beq.n	80067ec <TIM_Base_SetConfig+0xf8>
 80067e4:	687b      	ldr	r3, [r7, #4]
 80067e6:	4a12      	ldr	r2, [pc, #72]	@ (8006830 <TIM_Base_SetConfig+0x13c>)
 80067e8:	4293      	cmp	r3, r2
 80067ea:	d103      	bne.n	80067f4 <TIM_Base_SetConfig+0x100>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 80067ec:	683b      	ldr	r3, [r7, #0]
 80067ee:	691a      	ldr	r2, [r3, #16]
 80067f0:	687b      	ldr	r3, [r7, #4]
 80067f2:	631a      	str	r2, [r3, #48]	@ 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 80067f4:	687b      	ldr	r3, [r7, #4]
 80067f6:	2201      	movs	r2, #1
 80067f8:	615a      	str	r2, [r3, #20]

  /* Check if the update flag is set after the Update Generation, if so clear the UIF flag */
  if (HAL_IS_BIT_SET(TIMx->SR, TIM_FLAG_UPDATE))
 80067fa:	687b      	ldr	r3, [r7, #4]
 80067fc:	691b      	ldr	r3, [r3, #16]
 80067fe:	f003 0301 	and.w	r3, r3, #1
 8006802:	2b01      	cmp	r3, #1
 8006804:	d105      	bne.n	8006812 <TIM_Base_SetConfig+0x11e>
  {
    /* Clear the update flag */
    CLEAR_BIT(TIMx->SR, TIM_FLAG_UPDATE);
 8006806:	687b      	ldr	r3, [r7, #4]
 8006808:	691b      	ldr	r3, [r3, #16]
 800680a:	f023 0201 	bic.w	r2, r3, #1
 800680e:	687b      	ldr	r3, [r7, #4]
 8006810:	611a      	str	r2, [r3, #16]
  }
}
 8006812:	bf00      	nop
 8006814:	3714      	adds	r7, #20
 8006816:	46bd      	mov	sp, r7
 8006818:	f85d 7b04 	ldr.w	r7, [sp], #4
 800681c:	4770      	bx	lr
 800681e:	bf00      	nop
 8006820:	40010000 	.word	0x40010000
 8006824:	40000400 	.word	0x40000400
 8006828:	40000800 	.word	0x40000800
 800682c:	40000c00 	.word	0x40000c00
 8006830:	40010400 	.word	0x40010400
 8006834:	40014000 	.word	0x40014000
 8006838:	40014400 	.word	0x40014400
 800683c:	40014800 	.word	0x40014800
 8006840:	40001800 	.word	0x40001800
 8006844:	40001c00 	.word	0x40001c00
 8006848:	40002000 	.word	0x40002000

0800684c <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        const TIM_MasterConfigTypeDef *sMasterConfig)
{
 800684c:	b480      	push	{r7}
 800684e:	b085      	sub	sp, #20
 8006850:	af00      	add	r7, sp, #0
 8006852:	6078      	str	r0, [r7, #4]
 8006854:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 8006856:	687b      	ldr	r3, [r7, #4]
 8006858:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 800685c:	2b01      	cmp	r3, #1
 800685e:	d101      	bne.n	8006864 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 8006860:	2302      	movs	r3, #2
 8006862:	e05a      	b.n	800691a <HAL_TIMEx_MasterConfigSynchronization+0xce>
 8006864:	687b      	ldr	r3, [r7, #4]
 8006866:	2201      	movs	r2, #1
 8006868:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 800686c:	687b      	ldr	r3, [r7, #4]
 800686e:	2202      	movs	r2, #2
 8006870:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 8006874:	687b      	ldr	r3, [r7, #4]
 8006876:	681b      	ldr	r3, [r3, #0]
 8006878:	685b      	ldr	r3, [r3, #4]
 800687a:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 800687c:	687b      	ldr	r3, [r7, #4]
 800687e:	681b      	ldr	r3, [r3, #0]
 8006880:	689b      	ldr	r3, [r3, #8]
 8006882:	60bb      	str	r3, [r7, #8]

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 8006884:	68fb      	ldr	r3, [r7, #12]
 8006886:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 800688a:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 800688c:	683b      	ldr	r3, [r7, #0]
 800688e:	681b      	ldr	r3, [r3, #0]
 8006890:	68fa      	ldr	r2, [r7, #12]
 8006892:	4313      	orrs	r3, r2
 8006894:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 8006896:	687b      	ldr	r3, [r7, #4]
 8006898:	681b      	ldr	r3, [r3, #0]
 800689a:	68fa      	ldr	r2, [r7, #12]
 800689c:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 800689e:	687b      	ldr	r3, [r7, #4]
 80068a0:	681b      	ldr	r3, [r3, #0]
 80068a2:	4a21      	ldr	r2, [pc, #132]	@ (8006928 <HAL_TIMEx_MasterConfigSynchronization+0xdc>)
 80068a4:	4293      	cmp	r3, r2
 80068a6:	d022      	beq.n	80068ee <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 80068a8:	687b      	ldr	r3, [r7, #4]
 80068aa:	681b      	ldr	r3, [r3, #0]
 80068ac:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 80068b0:	d01d      	beq.n	80068ee <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 80068b2:	687b      	ldr	r3, [r7, #4]
 80068b4:	681b      	ldr	r3, [r3, #0]
 80068b6:	4a1d      	ldr	r2, [pc, #116]	@ (800692c <HAL_TIMEx_MasterConfigSynchronization+0xe0>)
 80068b8:	4293      	cmp	r3, r2
 80068ba:	d018      	beq.n	80068ee <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 80068bc:	687b      	ldr	r3, [r7, #4]
 80068be:	681b      	ldr	r3, [r3, #0]
 80068c0:	4a1b      	ldr	r2, [pc, #108]	@ (8006930 <HAL_TIMEx_MasterConfigSynchronization+0xe4>)
 80068c2:	4293      	cmp	r3, r2
 80068c4:	d013      	beq.n	80068ee <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 80068c6:	687b      	ldr	r3, [r7, #4]
 80068c8:	681b      	ldr	r3, [r3, #0]
 80068ca:	4a1a      	ldr	r2, [pc, #104]	@ (8006934 <HAL_TIMEx_MasterConfigSynchronization+0xe8>)
 80068cc:	4293      	cmp	r3, r2
 80068ce:	d00e      	beq.n	80068ee <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 80068d0:	687b      	ldr	r3, [r7, #4]
 80068d2:	681b      	ldr	r3, [r3, #0]
 80068d4:	4a18      	ldr	r2, [pc, #96]	@ (8006938 <HAL_TIMEx_MasterConfigSynchronization+0xec>)
 80068d6:	4293      	cmp	r3, r2
 80068d8:	d009      	beq.n	80068ee <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 80068da:	687b      	ldr	r3, [r7, #4]
 80068dc:	681b      	ldr	r3, [r3, #0]
 80068de:	4a17      	ldr	r2, [pc, #92]	@ (800693c <HAL_TIMEx_MasterConfigSynchronization+0xf0>)
 80068e0:	4293      	cmp	r3, r2
 80068e2:	d004      	beq.n	80068ee <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 80068e4:	687b      	ldr	r3, [r7, #4]
 80068e6:	681b      	ldr	r3, [r3, #0]
 80068e8:	4a15      	ldr	r2, [pc, #84]	@ (8006940 <HAL_TIMEx_MasterConfigSynchronization+0xf4>)
 80068ea:	4293      	cmp	r3, r2
 80068ec:	d10c      	bne.n	8006908 <HAL_TIMEx_MasterConfigSynchronization+0xbc>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 80068ee:	68bb      	ldr	r3, [r7, #8]
 80068f0:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 80068f4:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 80068f6:	683b      	ldr	r3, [r7, #0]
 80068f8:	685b      	ldr	r3, [r3, #4]
 80068fa:	68ba      	ldr	r2, [r7, #8]
 80068fc:	4313      	orrs	r3, r2
 80068fe:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 8006900:	687b      	ldr	r3, [r7, #4]
 8006902:	681b      	ldr	r3, [r3, #0]
 8006904:	68ba      	ldr	r2, [r7, #8]
 8006906:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 8006908:	687b      	ldr	r3, [r7, #4]
 800690a:	2201      	movs	r2, #1
 800690c:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  __HAL_UNLOCK(htim);
 8006910:	687b      	ldr	r3, [r7, #4]
 8006912:	2200      	movs	r2, #0
 8006914:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return HAL_OK;
 8006918:	2300      	movs	r3, #0
}
 800691a:	4618      	mov	r0, r3
 800691c:	3714      	adds	r7, #20
 800691e:	46bd      	mov	sp, r7
 8006920:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006924:	4770      	bx	lr
 8006926:	bf00      	nop
 8006928:	40010000 	.word	0x40010000
 800692c:	40000400 	.word	0x40000400
 8006930:	40000800 	.word	0x40000800
 8006934:	40000c00 	.word	0x40000c00
 8006938:	40010400 	.word	0x40010400
 800693c:	40014000 	.word	0x40014000
 8006940:	40001800 	.word	0x40001800

08006944 <std>:
 8006944:	2300      	movs	r3, #0
 8006946:	b510      	push	{r4, lr}
 8006948:	4604      	mov	r4, r0
 800694a:	e9c0 3300 	strd	r3, r3, [r0]
 800694e:	e9c0 3304 	strd	r3, r3, [r0, #16]
 8006952:	6083      	str	r3, [r0, #8]
 8006954:	8181      	strh	r1, [r0, #12]
 8006956:	6643      	str	r3, [r0, #100]	@ 0x64
 8006958:	81c2      	strh	r2, [r0, #14]
 800695a:	6183      	str	r3, [r0, #24]
 800695c:	4619      	mov	r1, r3
 800695e:	2208      	movs	r2, #8
 8006960:	305c      	adds	r0, #92	@ 0x5c
 8006962:	f000 f99b 	bl	8006c9c <memset>
 8006966:	4b0d      	ldr	r3, [pc, #52]	@ (800699c <std+0x58>)
 8006968:	6263      	str	r3, [r4, #36]	@ 0x24
 800696a:	4b0d      	ldr	r3, [pc, #52]	@ (80069a0 <std+0x5c>)
 800696c:	62a3      	str	r3, [r4, #40]	@ 0x28
 800696e:	4b0d      	ldr	r3, [pc, #52]	@ (80069a4 <std+0x60>)
 8006970:	62e3      	str	r3, [r4, #44]	@ 0x2c
 8006972:	4b0d      	ldr	r3, [pc, #52]	@ (80069a8 <std+0x64>)
 8006974:	6323      	str	r3, [r4, #48]	@ 0x30
 8006976:	4b0d      	ldr	r3, [pc, #52]	@ (80069ac <std+0x68>)
 8006978:	6224      	str	r4, [r4, #32]
 800697a:	429c      	cmp	r4, r3
 800697c:	d006      	beq.n	800698c <std+0x48>
 800697e:	f103 0268 	add.w	r2, r3, #104	@ 0x68
 8006982:	4294      	cmp	r4, r2
 8006984:	d002      	beq.n	800698c <std+0x48>
 8006986:	33d0      	adds	r3, #208	@ 0xd0
 8006988:	429c      	cmp	r4, r3
 800698a:	d105      	bne.n	8006998 <std+0x54>
 800698c:	f104 0058 	add.w	r0, r4, #88	@ 0x58
 8006990:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8006994:	f000 b9fa 	b.w	8006d8c <__retarget_lock_init_recursive>
 8006998:	bd10      	pop	{r4, pc}
 800699a:	bf00      	nop
 800699c:	08006aed 	.word	0x08006aed
 80069a0:	08006b0f 	.word	0x08006b0f
 80069a4:	08006b47 	.word	0x08006b47
 80069a8:	08006b6b 	.word	0x08006b6b
 80069ac:	20025cd0 	.word	0x20025cd0

080069b0 <stdio_exit_handler>:
 80069b0:	4a02      	ldr	r2, [pc, #8]	@ (80069bc <stdio_exit_handler+0xc>)
 80069b2:	4903      	ldr	r1, [pc, #12]	@ (80069c0 <stdio_exit_handler+0x10>)
 80069b4:	4803      	ldr	r0, [pc, #12]	@ (80069c4 <stdio_exit_handler+0x14>)
 80069b6:	f000 b869 	b.w	8006a8c <_fwalk_sglue>
 80069ba:	bf00      	nop
 80069bc:	20000030 	.word	0x20000030
 80069c0:	0800762d 	.word	0x0800762d
 80069c4:	20000040 	.word	0x20000040

080069c8 <cleanup_stdio>:
 80069c8:	6841      	ldr	r1, [r0, #4]
 80069ca:	4b0c      	ldr	r3, [pc, #48]	@ (80069fc <cleanup_stdio+0x34>)
 80069cc:	4299      	cmp	r1, r3
 80069ce:	b510      	push	{r4, lr}
 80069d0:	4604      	mov	r4, r0
 80069d2:	d001      	beq.n	80069d8 <cleanup_stdio+0x10>
 80069d4:	f000 fe2a 	bl	800762c <_fflush_r>
 80069d8:	68a1      	ldr	r1, [r4, #8]
 80069da:	4b09      	ldr	r3, [pc, #36]	@ (8006a00 <cleanup_stdio+0x38>)
 80069dc:	4299      	cmp	r1, r3
 80069de:	d002      	beq.n	80069e6 <cleanup_stdio+0x1e>
 80069e0:	4620      	mov	r0, r4
 80069e2:	f000 fe23 	bl	800762c <_fflush_r>
 80069e6:	68e1      	ldr	r1, [r4, #12]
 80069e8:	4b06      	ldr	r3, [pc, #24]	@ (8006a04 <cleanup_stdio+0x3c>)
 80069ea:	4299      	cmp	r1, r3
 80069ec:	d004      	beq.n	80069f8 <cleanup_stdio+0x30>
 80069ee:	4620      	mov	r0, r4
 80069f0:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 80069f4:	f000 be1a 	b.w	800762c <_fflush_r>
 80069f8:	bd10      	pop	{r4, pc}
 80069fa:	bf00      	nop
 80069fc:	20025cd0 	.word	0x20025cd0
 8006a00:	20025d38 	.word	0x20025d38
 8006a04:	20025da0 	.word	0x20025da0

08006a08 <global_stdio_init.part.0>:
 8006a08:	b510      	push	{r4, lr}
 8006a0a:	4b0b      	ldr	r3, [pc, #44]	@ (8006a38 <global_stdio_init.part.0+0x30>)
 8006a0c:	4c0b      	ldr	r4, [pc, #44]	@ (8006a3c <global_stdio_init.part.0+0x34>)
 8006a0e:	4a0c      	ldr	r2, [pc, #48]	@ (8006a40 <global_stdio_init.part.0+0x38>)
 8006a10:	601a      	str	r2, [r3, #0]
 8006a12:	4620      	mov	r0, r4
 8006a14:	2200      	movs	r2, #0
 8006a16:	2104      	movs	r1, #4
 8006a18:	f7ff ff94 	bl	8006944 <std>
 8006a1c:	f104 0068 	add.w	r0, r4, #104	@ 0x68
 8006a20:	2201      	movs	r2, #1
 8006a22:	2109      	movs	r1, #9
 8006a24:	f7ff ff8e 	bl	8006944 <std>
 8006a28:	f104 00d0 	add.w	r0, r4, #208	@ 0xd0
 8006a2c:	2202      	movs	r2, #2
 8006a2e:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8006a32:	2112      	movs	r1, #18
 8006a34:	f7ff bf86 	b.w	8006944 <std>
 8006a38:	20025e08 	.word	0x20025e08
 8006a3c:	20025cd0 	.word	0x20025cd0
 8006a40:	080069b1 	.word	0x080069b1

08006a44 <__sfp_lock_acquire>:
 8006a44:	4801      	ldr	r0, [pc, #4]	@ (8006a4c <__sfp_lock_acquire+0x8>)
 8006a46:	f000 b9a2 	b.w	8006d8e <__retarget_lock_acquire_recursive>
 8006a4a:	bf00      	nop
 8006a4c:	20025e11 	.word	0x20025e11

08006a50 <__sfp_lock_release>:
 8006a50:	4801      	ldr	r0, [pc, #4]	@ (8006a58 <__sfp_lock_release+0x8>)
 8006a52:	f000 b99d 	b.w	8006d90 <__retarget_lock_release_recursive>
 8006a56:	bf00      	nop
 8006a58:	20025e11 	.word	0x20025e11

08006a5c <__sinit>:
 8006a5c:	b510      	push	{r4, lr}
 8006a5e:	4604      	mov	r4, r0
 8006a60:	f7ff fff0 	bl	8006a44 <__sfp_lock_acquire>
 8006a64:	6a23      	ldr	r3, [r4, #32]
 8006a66:	b11b      	cbz	r3, 8006a70 <__sinit+0x14>
 8006a68:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8006a6c:	f7ff bff0 	b.w	8006a50 <__sfp_lock_release>
 8006a70:	4b04      	ldr	r3, [pc, #16]	@ (8006a84 <__sinit+0x28>)
 8006a72:	6223      	str	r3, [r4, #32]
 8006a74:	4b04      	ldr	r3, [pc, #16]	@ (8006a88 <__sinit+0x2c>)
 8006a76:	681b      	ldr	r3, [r3, #0]
 8006a78:	2b00      	cmp	r3, #0
 8006a7a:	d1f5      	bne.n	8006a68 <__sinit+0xc>
 8006a7c:	f7ff ffc4 	bl	8006a08 <global_stdio_init.part.0>
 8006a80:	e7f2      	b.n	8006a68 <__sinit+0xc>
 8006a82:	bf00      	nop
 8006a84:	080069c9 	.word	0x080069c9
 8006a88:	20025e08 	.word	0x20025e08

08006a8c <_fwalk_sglue>:
 8006a8c:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8006a90:	4607      	mov	r7, r0
 8006a92:	4688      	mov	r8, r1
 8006a94:	4614      	mov	r4, r2
 8006a96:	2600      	movs	r6, #0
 8006a98:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 8006a9c:	f1b9 0901 	subs.w	r9, r9, #1
 8006aa0:	d505      	bpl.n	8006aae <_fwalk_sglue+0x22>
 8006aa2:	6824      	ldr	r4, [r4, #0]
 8006aa4:	2c00      	cmp	r4, #0
 8006aa6:	d1f7      	bne.n	8006a98 <_fwalk_sglue+0xc>
 8006aa8:	4630      	mov	r0, r6
 8006aaa:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8006aae:	89ab      	ldrh	r3, [r5, #12]
 8006ab0:	2b01      	cmp	r3, #1
 8006ab2:	d907      	bls.n	8006ac4 <_fwalk_sglue+0x38>
 8006ab4:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 8006ab8:	3301      	adds	r3, #1
 8006aba:	d003      	beq.n	8006ac4 <_fwalk_sglue+0x38>
 8006abc:	4629      	mov	r1, r5
 8006abe:	4638      	mov	r0, r7
 8006ac0:	47c0      	blx	r8
 8006ac2:	4306      	orrs	r6, r0
 8006ac4:	3568      	adds	r5, #104	@ 0x68
 8006ac6:	e7e9      	b.n	8006a9c <_fwalk_sglue+0x10>

08006ac8 <iprintf>:
 8006ac8:	b40f      	push	{r0, r1, r2, r3}
 8006aca:	b507      	push	{r0, r1, r2, lr}
 8006acc:	4906      	ldr	r1, [pc, #24]	@ (8006ae8 <iprintf+0x20>)
 8006ace:	ab04      	add	r3, sp, #16
 8006ad0:	6808      	ldr	r0, [r1, #0]
 8006ad2:	f853 2b04 	ldr.w	r2, [r3], #4
 8006ad6:	6881      	ldr	r1, [r0, #8]
 8006ad8:	9301      	str	r3, [sp, #4]
 8006ada:	f000 fa7d 	bl	8006fd8 <_vfiprintf_r>
 8006ade:	b003      	add	sp, #12
 8006ae0:	f85d eb04 	ldr.w	lr, [sp], #4
 8006ae4:	b004      	add	sp, #16
 8006ae6:	4770      	bx	lr
 8006ae8:	2000003c 	.word	0x2000003c

08006aec <__sread>:
 8006aec:	b510      	push	{r4, lr}
 8006aee:	460c      	mov	r4, r1
 8006af0:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8006af4:	f000 f8fc 	bl	8006cf0 <_read_r>
 8006af8:	2800      	cmp	r0, #0
 8006afa:	bfab      	itete	ge
 8006afc:	6d63      	ldrge	r3, [r4, #84]	@ 0x54
 8006afe:	89a3      	ldrhlt	r3, [r4, #12]
 8006b00:	181b      	addge	r3, r3, r0
 8006b02:	f423 5380 	biclt.w	r3, r3, #4096	@ 0x1000
 8006b06:	bfac      	ite	ge
 8006b08:	6563      	strge	r3, [r4, #84]	@ 0x54
 8006b0a:	81a3      	strhlt	r3, [r4, #12]
 8006b0c:	bd10      	pop	{r4, pc}

08006b0e <__swrite>:
 8006b0e:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8006b12:	461f      	mov	r7, r3
 8006b14:	898b      	ldrh	r3, [r1, #12]
 8006b16:	05db      	lsls	r3, r3, #23
 8006b18:	4605      	mov	r5, r0
 8006b1a:	460c      	mov	r4, r1
 8006b1c:	4616      	mov	r6, r2
 8006b1e:	d505      	bpl.n	8006b2c <__swrite+0x1e>
 8006b20:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8006b24:	2302      	movs	r3, #2
 8006b26:	2200      	movs	r2, #0
 8006b28:	f000 f8d0 	bl	8006ccc <_lseek_r>
 8006b2c:	89a3      	ldrh	r3, [r4, #12]
 8006b2e:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8006b32:	f423 5380 	bic.w	r3, r3, #4096	@ 0x1000
 8006b36:	81a3      	strh	r3, [r4, #12]
 8006b38:	4632      	mov	r2, r6
 8006b3a:	463b      	mov	r3, r7
 8006b3c:	4628      	mov	r0, r5
 8006b3e:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8006b42:	f000 b8e7 	b.w	8006d14 <_write_r>

08006b46 <__sseek>:
 8006b46:	b510      	push	{r4, lr}
 8006b48:	460c      	mov	r4, r1
 8006b4a:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8006b4e:	f000 f8bd 	bl	8006ccc <_lseek_r>
 8006b52:	1c43      	adds	r3, r0, #1
 8006b54:	89a3      	ldrh	r3, [r4, #12]
 8006b56:	bf15      	itete	ne
 8006b58:	6560      	strne	r0, [r4, #84]	@ 0x54
 8006b5a:	f423 5380 	biceq.w	r3, r3, #4096	@ 0x1000
 8006b5e:	f443 5380 	orrne.w	r3, r3, #4096	@ 0x1000
 8006b62:	81a3      	strheq	r3, [r4, #12]
 8006b64:	bf18      	it	ne
 8006b66:	81a3      	strhne	r3, [r4, #12]
 8006b68:	bd10      	pop	{r4, pc}

08006b6a <__sclose>:
 8006b6a:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8006b6e:	f000 b89d 	b.w	8006cac <_close_r>

08006b72 <__swbuf_r>:
 8006b72:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8006b74:	460e      	mov	r6, r1
 8006b76:	4614      	mov	r4, r2
 8006b78:	4605      	mov	r5, r0
 8006b7a:	b118      	cbz	r0, 8006b84 <__swbuf_r+0x12>
 8006b7c:	6a03      	ldr	r3, [r0, #32]
 8006b7e:	b90b      	cbnz	r3, 8006b84 <__swbuf_r+0x12>
 8006b80:	f7ff ff6c 	bl	8006a5c <__sinit>
 8006b84:	69a3      	ldr	r3, [r4, #24]
 8006b86:	60a3      	str	r3, [r4, #8]
 8006b88:	89a3      	ldrh	r3, [r4, #12]
 8006b8a:	071a      	lsls	r2, r3, #28
 8006b8c:	d501      	bpl.n	8006b92 <__swbuf_r+0x20>
 8006b8e:	6923      	ldr	r3, [r4, #16]
 8006b90:	b943      	cbnz	r3, 8006ba4 <__swbuf_r+0x32>
 8006b92:	4621      	mov	r1, r4
 8006b94:	4628      	mov	r0, r5
 8006b96:	f000 f82b 	bl	8006bf0 <__swsetup_r>
 8006b9a:	b118      	cbz	r0, 8006ba4 <__swbuf_r+0x32>
 8006b9c:	f04f 37ff 	mov.w	r7, #4294967295
 8006ba0:	4638      	mov	r0, r7
 8006ba2:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8006ba4:	6823      	ldr	r3, [r4, #0]
 8006ba6:	6922      	ldr	r2, [r4, #16]
 8006ba8:	1a98      	subs	r0, r3, r2
 8006baa:	6963      	ldr	r3, [r4, #20]
 8006bac:	b2f6      	uxtb	r6, r6
 8006bae:	4283      	cmp	r3, r0
 8006bb0:	4637      	mov	r7, r6
 8006bb2:	dc05      	bgt.n	8006bc0 <__swbuf_r+0x4e>
 8006bb4:	4621      	mov	r1, r4
 8006bb6:	4628      	mov	r0, r5
 8006bb8:	f000 fd38 	bl	800762c <_fflush_r>
 8006bbc:	2800      	cmp	r0, #0
 8006bbe:	d1ed      	bne.n	8006b9c <__swbuf_r+0x2a>
 8006bc0:	68a3      	ldr	r3, [r4, #8]
 8006bc2:	3b01      	subs	r3, #1
 8006bc4:	60a3      	str	r3, [r4, #8]
 8006bc6:	6823      	ldr	r3, [r4, #0]
 8006bc8:	1c5a      	adds	r2, r3, #1
 8006bca:	6022      	str	r2, [r4, #0]
 8006bcc:	701e      	strb	r6, [r3, #0]
 8006bce:	6962      	ldr	r2, [r4, #20]
 8006bd0:	1c43      	adds	r3, r0, #1
 8006bd2:	429a      	cmp	r2, r3
 8006bd4:	d004      	beq.n	8006be0 <__swbuf_r+0x6e>
 8006bd6:	89a3      	ldrh	r3, [r4, #12]
 8006bd8:	07db      	lsls	r3, r3, #31
 8006bda:	d5e1      	bpl.n	8006ba0 <__swbuf_r+0x2e>
 8006bdc:	2e0a      	cmp	r6, #10
 8006bde:	d1df      	bne.n	8006ba0 <__swbuf_r+0x2e>
 8006be0:	4621      	mov	r1, r4
 8006be2:	4628      	mov	r0, r5
 8006be4:	f000 fd22 	bl	800762c <_fflush_r>
 8006be8:	2800      	cmp	r0, #0
 8006bea:	d0d9      	beq.n	8006ba0 <__swbuf_r+0x2e>
 8006bec:	e7d6      	b.n	8006b9c <__swbuf_r+0x2a>
	...

08006bf0 <__swsetup_r>:
 8006bf0:	b538      	push	{r3, r4, r5, lr}
 8006bf2:	4b29      	ldr	r3, [pc, #164]	@ (8006c98 <__swsetup_r+0xa8>)
 8006bf4:	4605      	mov	r5, r0
 8006bf6:	6818      	ldr	r0, [r3, #0]
 8006bf8:	460c      	mov	r4, r1
 8006bfa:	b118      	cbz	r0, 8006c04 <__swsetup_r+0x14>
 8006bfc:	6a03      	ldr	r3, [r0, #32]
 8006bfe:	b90b      	cbnz	r3, 8006c04 <__swsetup_r+0x14>
 8006c00:	f7ff ff2c 	bl	8006a5c <__sinit>
 8006c04:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8006c08:	0719      	lsls	r1, r3, #28
 8006c0a:	d422      	bmi.n	8006c52 <__swsetup_r+0x62>
 8006c0c:	06da      	lsls	r2, r3, #27
 8006c0e:	d407      	bmi.n	8006c20 <__swsetup_r+0x30>
 8006c10:	2209      	movs	r2, #9
 8006c12:	602a      	str	r2, [r5, #0]
 8006c14:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8006c18:	81a3      	strh	r3, [r4, #12]
 8006c1a:	f04f 30ff 	mov.w	r0, #4294967295
 8006c1e:	e033      	b.n	8006c88 <__swsetup_r+0x98>
 8006c20:	0758      	lsls	r0, r3, #29
 8006c22:	d512      	bpl.n	8006c4a <__swsetup_r+0x5a>
 8006c24:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 8006c26:	b141      	cbz	r1, 8006c3a <__swsetup_r+0x4a>
 8006c28:	f104 0344 	add.w	r3, r4, #68	@ 0x44
 8006c2c:	4299      	cmp	r1, r3
 8006c2e:	d002      	beq.n	8006c36 <__swsetup_r+0x46>
 8006c30:	4628      	mov	r0, r5
 8006c32:	f000 f8af 	bl	8006d94 <_free_r>
 8006c36:	2300      	movs	r3, #0
 8006c38:	6363      	str	r3, [r4, #52]	@ 0x34
 8006c3a:	89a3      	ldrh	r3, [r4, #12]
 8006c3c:	f023 0324 	bic.w	r3, r3, #36	@ 0x24
 8006c40:	81a3      	strh	r3, [r4, #12]
 8006c42:	2300      	movs	r3, #0
 8006c44:	6063      	str	r3, [r4, #4]
 8006c46:	6923      	ldr	r3, [r4, #16]
 8006c48:	6023      	str	r3, [r4, #0]
 8006c4a:	89a3      	ldrh	r3, [r4, #12]
 8006c4c:	f043 0308 	orr.w	r3, r3, #8
 8006c50:	81a3      	strh	r3, [r4, #12]
 8006c52:	6923      	ldr	r3, [r4, #16]
 8006c54:	b94b      	cbnz	r3, 8006c6a <__swsetup_r+0x7a>
 8006c56:	89a3      	ldrh	r3, [r4, #12]
 8006c58:	f403 7320 	and.w	r3, r3, #640	@ 0x280
 8006c5c:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8006c60:	d003      	beq.n	8006c6a <__swsetup_r+0x7a>
 8006c62:	4621      	mov	r1, r4
 8006c64:	4628      	mov	r0, r5
 8006c66:	f000 fd2f 	bl	80076c8 <__smakebuf_r>
 8006c6a:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8006c6e:	f013 0201 	ands.w	r2, r3, #1
 8006c72:	d00a      	beq.n	8006c8a <__swsetup_r+0x9a>
 8006c74:	2200      	movs	r2, #0
 8006c76:	60a2      	str	r2, [r4, #8]
 8006c78:	6962      	ldr	r2, [r4, #20]
 8006c7a:	4252      	negs	r2, r2
 8006c7c:	61a2      	str	r2, [r4, #24]
 8006c7e:	6922      	ldr	r2, [r4, #16]
 8006c80:	b942      	cbnz	r2, 8006c94 <__swsetup_r+0xa4>
 8006c82:	f013 0080 	ands.w	r0, r3, #128	@ 0x80
 8006c86:	d1c5      	bne.n	8006c14 <__swsetup_r+0x24>
 8006c88:	bd38      	pop	{r3, r4, r5, pc}
 8006c8a:	0799      	lsls	r1, r3, #30
 8006c8c:	bf58      	it	pl
 8006c8e:	6962      	ldrpl	r2, [r4, #20]
 8006c90:	60a2      	str	r2, [r4, #8]
 8006c92:	e7f4      	b.n	8006c7e <__swsetup_r+0x8e>
 8006c94:	2000      	movs	r0, #0
 8006c96:	e7f7      	b.n	8006c88 <__swsetup_r+0x98>
 8006c98:	2000003c 	.word	0x2000003c

08006c9c <memset>:
 8006c9c:	4402      	add	r2, r0
 8006c9e:	4603      	mov	r3, r0
 8006ca0:	4293      	cmp	r3, r2
 8006ca2:	d100      	bne.n	8006ca6 <memset+0xa>
 8006ca4:	4770      	bx	lr
 8006ca6:	f803 1b01 	strb.w	r1, [r3], #1
 8006caa:	e7f9      	b.n	8006ca0 <memset+0x4>

08006cac <_close_r>:
 8006cac:	b538      	push	{r3, r4, r5, lr}
 8006cae:	4d06      	ldr	r5, [pc, #24]	@ (8006cc8 <_close_r+0x1c>)
 8006cb0:	2300      	movs	r3, #0
 8006cb2:	4604      	mov	r4, r0
 8006cb4:	4608      	mov	r0, r1
 8006cb6:	602b      	str	r3, [r5, #0]
 8006cb8:	f7fc f9d0 	bl	800305c <_close>
 8006cbc:	1c43      	adds	r3, r0, #1
 8006cbe:	d102      	bne.n	8006cc6 <_close_r+0x1a>
 8006cc0:	682b      	ldr	r3, [r5, #0]
 8006cc2:	b103      	cbz	r3, 8006cc6 <_close_r+0x1a>
 8006cc4:	6023      	str	r3, [r4, #0]
 8006cc6:	bd38      	pop	{r3, r4, r5, pc}
 8006cc8:	20025e0c 	.word	0x20025e0c

08006ccc <_lseek_r>:
 8006ccc:	b538      	push	{r3, r4, r5, lr}
 8006cce:	4d07      	ldr	r5, [pc, #28]	@ (8006cec <_lseek_r+0x20>)
 8006cd0:	4604      	mov	r4, r0
 8006cd2:	4608      	mov	r0, r1
 8006cd4:	4611      	mov	r1, r2
 8006cd6:	2200      	movs	r2, #0
 8006cd8:	602a      	str	r2, [r5, #0]
 8006cda:	461a      	mov	r2, r3
 8006cdc:	f7fc f9e5 	bl	80030aa <_lseek>
 8006ce0:	1c43      	adds	r3, r0, #1
 8006ce2:	d102      	bne.n	8006cea <_lseek_r+0x1e>
 8006ce4:	682b      	ldr	r3, [r5, #0]
 8006ce6:	b103      	cbz	r3, 8006cea <_lseek_r+0x1e>
 8006ce8:	6023      	str	r3, [r4, #0]
 8006cea:	bd38      	pop	{r3, r4, r5, pc}
 8006cec:	20025e0c 	.word	0x20025e0c

08006cf0 <_read_r>:
 8006cf0:	b538      	push	{r3, r4, r5, lr}
 8006cf2:	4d07      	ldr	r5, [pc, #28]	@ (8006d10 <_read_r+0x20>)
 8006cf4:	4604      	mov	r4, r0
 8006cf6:	4608      	mov	r0, r1
 8006cf8:	4611      	mov	r1, r2
 8006cfa:	2200      	movs	r2, #0
 8006cfc:	602a      	str	r2, [r5, #0]
 8006cfe:	461a      	mov	r2, r3
 8006d00:	f7fc f973 	bl	8002fea <_read>
 8006d04:	1c43      	adds	r3, r0, #1
 8006d06:	d102      	bne.n	8006d0e <_read_r+0x1e>
 8006d08:	682b      	ldr	r3, [r5, #0]
 8006d0a:	b103      	cbz	r3, 8006d0e <_read_r+0x1e>
 8006d0c:	6023      	str	r3, [r4, #0]
 8006d0e:	bd38      	pop	{r3, r4, r5, pc}
 8006d10:	20025e0c 	.word	0x20025e0c

08006d14 <_write_r>:
 8006d14:	b538      	push	{r3, r4, r5, lr}
 8006d16:	4d07      	ldr	r5, [pc, #28]	@ (8006d34 <_write_r+0x20>)
 8006d18:	4604      	mov	r4, r0
 8006d1a:	4608      	mov	r0, r1
 8006d1c:	4611      	mov	r1, r2
 8006d1e:	2200      	movs	r2, #0
 8006d20:	602a      	str	r2, [r5, #0]
 8006d22:	461a      	mov	r2, r3
 8006d24:	f7fc f97e 	bl	8003024 <_write>
 8006d28:	1c43      	adds	r3, r0, #1
 8006d2a:	d102      	bne.n	8006d32 <_write_r+0x1e>
 8006d2c:	682b      	ldr	r3, [r5, #0]
 8006d2e:	b103      	cbz	r3, 8006d32 <_write_r+0x1e>
 8006d30:	6023      	str	r3, [r4, #0]
 8006d32:	bd38      	pop	{r3, r4, r5, pc}
 8006d34:	20025e0c 	.word	0x20025e0c

08006d38 <__errno>:
 8006d38:	4b01      	ldr	r3, [pc, #4]	@ (8006d40 <__errno+0x8>)
 8006d3a:	6818      	ldr	r0, [r3, #0]
 8006d3c:	4770      	bx	lr
 8006d3e:	bf00      	nop
 8006d40:	2000003c 	.word	0x2000003c

08006d44 <__libc_init_array>:
 8006d44:	b570      	push	{r4, r5, r6, lr}
 8006d46:	4d0d      	ldr	r5, [pc, #52]	@ (8006d7c <__libc_init_array+0x38>)
 8006d48:	4c0d      	ldr	r4, [pc, #52]	@ (8006d80 <__libc_init_array+0x3c>)
 8006d4a:	1b64      	subs	r4, r4, r5
 8006d4c:	10a4      	asrs	r4, r4, #2
 8006d4e:	2600      	movs	r6, #0
 8006d50:	42a6      	cmp	r6, r4
 8006d52:	d109      	bne.n	8006d68 <__libc_init_array+0x24>
 8006d54:	4d0b      	ldr	r5, [pc, #44]	@ (8006d84 <__libc_init_array+0x40>)
 8006d56:	4c0c      	ldr	r4, [pc, #48]	@ (8006d88 <__libc_init_array+0x44>)
 8006d58:	f000 fd24 	bl	80077a4 <_init>
 8006d5c:	1b64      	subs	r4, r4, r5
 8006d5e:	10a4      	asrs	r4, r4, #2
 8006d60:	2600      	movs	r6, #0
 8006d62:	42a6      	cmp	r6, r4
 8006d64:	d105      	bne.n	8006d72 <__libc_init_array+0x2e>
 8006d66:	bd70      	pop	{r4, r5, r6, pc}
 8006d68:	f855 3b04 	ldr.w	r3, [r5], #4
 8006d6c:	4798      	blx	r3
 8006d6e:	3601      	adds	r6, #1
 8006d70:	e7ee      	b.n	8006d50 <__libc_init_array+0xc>
 8006d72:	f855 3b04 	ldr.w	r3, [r5], #4
 8006d76:	4798      	blx	r3
 8006d78:	3601      	adds	r6, #1
 8006d7a:	e7f2      	b.n	8006d62 <__libc_init_array+0x1e>
 8006d7c:	08008a24 	.word	0x08008a24
 8006d80:	08008a24 	.word	0x08008a24
 8006d84:	08008a24 	.word	0x08008a24
 8006d88:	08008a28 	.word	0x08008a28

08006d8c <__retarget_lock_init_recursive>:
 8006d8c:	4770      	bx	lr

08006d8e <__retarget_lock_acquire_recursive>:
 8006d8e:	4770      	bx	lr

08006d90 <__retarget_lock_release_recursive>:
 8006d90:	4770      	bx	lr
	...

08006d94 <_free_r>:
 8006d94:	b538      	push	{r3, r4, r5, lr}
 8006d96:	4605      	mov	r5, r0
 8006d98:	2900      	cmp	r1, #0
 8006d9a:	d041      	beq.n	8006e20 <_free_r+0x8c>
 8006d9c:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8006da0:	1f0c      	subs	r4, r1, #4
 8006da2:	2b00      	cmp	r3, #0
 8006da4:	bfb8      	it	lt
 8006da6:	18e4      	addlt	r4, r4, r3
 8006da8:	f000 f8e0 	bl	8006f6c <__malloc_lock>
 8006dac:	4a1d      	ldr	r2, [pc, #116]	@ (8006e24 <_free_r+0x90>)
 8006dae:	6813      	ldr	r3, [r2, #0]
 8006db0:	b933      	cbnz	r3, 8006dc0 <_free_r+0x2c>
 8006db2:	6063      	str	r3, [r4, #4]
 8006db4:	6014      	str	r4, [r2, #0]
 8006db6:	4628      	mov	r0, r5
 8006db8:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8006dbc:	f000 b8dc 	b.w	8006f78 <__malloc_unlock>
 8006dc0:	42a3      	cmp	r3, r4
 8006dc2:	d908      	bls.n	8006dd6 <_free_r+0x42>
 8006dc4:	6820      	ldr	r0, [r4, #0]
 8006dc6:	1821      	adds	r1, r4, r0
 8006dc8:	428b      	cmp	r3, r1
 8006dca:	bf01      	itttt	eq
 8006dcc:	6819      	ldreq	r1, [r3, #0]
 8006dce:	685b      	ldreq	r3, [r3, #4]
 8006dd0:	1809      	addeq	r1, r1, r0
 8006dd2:	6021      	streq	r1, [r4, #0]
 8006dd4:	e7ed      	b.n	8006db2 <_free_r+0x1e>
 8006dd6:	461a      	mov	r2, r3
 8006dd8:	685b      	ldr	r3, [r3, #4]
 8006dda:	b10b      	cbz	r3, 8006de0 <_free_r+0x4c>
 8006ddc:	42a3      	cmp	r3, r4
 8006dde:	d9fa      	bls.n	8006dd6 <_free_r+0x42>
 8006de0:	6811      	ldr	r1, [r2, #0]
 8006de2:	1850      	adds	r0, r2, r1
 8006de4:	42a0      	cmp	r0, r4
 8006de6:	d10b      	bne.n	8006e00 <_free_r+0x6c>
 8006de8:	6820      	ldr	r0, [r4, #0]
 8006dea:	4401      	add	r1, r0
 8006dec:	1850      	adds	r0, r2, r1
 8006dee:	4283      	cmp	r3, r0
 8006df0:	6011      	str	r1, [r2, #0]
 8006df2:	d1e0      	bne.n	8006db6 <_free_r+0x22>
 8006df4:	6818      	ldr	r0, [r3, #0]
 8006df6:	685b      	ldr	r3, [r3, #4]
 8006df8:	6053      	str	r3, [r2, #4]
 8006dfa:	4408      	add	r0, r1
 8006dfc:	6010      	str	r0, [r2, #0]
 8006dfe:	e7da      	b.n	8006db6 <_free_r+0x22>
 8006e00:	d902      	bls.n	8006e08 <_free_r+0x74>
 8006e02:	230c      	movs	r3, #12
 8006e04:	602b      	str	r3, [r5, #0]
 8006e06:	e7d6      	b.n	8006db6 <_free_r+0x22>
 8006e08:	6820      	ldr	r0, [r4, #0]
 8006e0a:	1821      	adds	r1, r4, r0
 8006e0c:	428b      	cmp	r3, r1
 8006e0e:	bf04      	itt	eq
 8006e10:	6819      	ldreq	r1, [r3, #0]
 8006e12:	685b      	ldreq	r3, [r3, #4]
 8006e14:	6063      	str	r3, [r4, #4]
 8006e16:	bf04      	itt	eq
 8006e18:	1809      	addeq	r1, r1, r0
 8006e1a:	6021      	streq	r1, [r4, #0]
 8006e1c:	6054      	str	r4, [r2, #4]
 8006e1e:	e7ca      	b.n	8006db6 <_free_r+0x22>
 8006e20:	bd38      	pop	{r3, r4, r5, pc}
 8006e22:	bf00      	nop
 8006e24:	20025e18 	.word	0x20025e18

08006e28 <sbrk_aligned>:
 8006e28:	b570      	push	{r4, r5, r6, lr}
 8006e2a:	4e0f      	ldr	r6, [pc, #60]	@ (8006e68 <sbrk_aligned+0x40>)
 8006e2c:	460c      	mov	r4, r1
 8006e2e:	6831      	ldr	r1, [r6, #0]
 8006e30:	4605      	mov	r5, r0
 8006e32:	b911      	cbnz	r1, 8006e3a <sbrk_aligned+0x12>
 8006e34:	f000 fca6 	bl	8007784 <_sbrk_r>
 8006e38:	6030      	str	r0, [r6, #0]
 8006e3a:	4621      	mov	r1, r4
 8006e3c:	4628      	mov	r0, r5
 8006e3e:	f000 fca1 	bl	8007784 <_sbrk_r>
 8006e42:	1c43      	adds	r3, r0, #1
 8006e44:	d103      	bne.n	8006e4e <sbrk_aligned+0x26>
 8006e46:	f04f 34ff 	mov.w	r4, #4294967295
 8006e4a:	4620      	mov	r0, r4
 8006e4c:	bd70      	pop	{r4, r5, r6, pc}
 8006e4e:	1cc4      	adds	r4, r0, #3
 8006e50:	f024 0403 	bic.w	r4, r4, #3
 8006e54:	42a0      	cmp	r0, r4
 8006e56:	d0f8      	beq.n	8006e4a <sbrk_aligned+0x22>
 8006e58:	1a21      	subs	r1, r4, r0
 8006e5a:	4628      	mov	r0, r5
 8006e5c:	f000 fc92 	bl	8007784 <_sbrk_r>
 8006e60:	3001      	adds	r0, #1
 8006e62:	d1f2      	bne.n	8006e4a <sbrk_aligned+0x22>
 8006e64:	e7ef      	b.n	8006e46 <sbrk_aligned+0x1e>
 8006e66:	bf00      	nop
 8006e68:	20025e14 	.word	0x20025e14

08006e6c <_malloc_r>:
 8006e6c:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8006e70:	1ccd      	adds	r5, r1, #3
 8006e72:	f025 0503 	bic.w	r5, r5, #3
 8006e76:	3508      	adds	r5, #8
 8006e78:	2d0c      	cmp	r5, #12
 8006e7a:	bf38      	it	cc
 8006e7c:	250c      	movcc	r5, #12
 8006e7e:	2d00      	cmp	r5, #0
 8006e80:	4606      	mov	r6, r0
 8006e82:	db01      	blt.n	8006e88 <_malloc_r+0x1c>
 8006e84:	42a9      	cmp	r1, r5
 8006e86:	d904      	bls.n	8006e92 <_malloc_r+0x26>
 8006e88:	230c      	movs	r3, #12
 8006e8a:	6033      	str	r3, [r6, #0]
 8006e8c:	2000      	movs	r0, #0
 8006e8e:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8006e92:	f8df 80d4 	ldr.w	r8, [pc, #212]	@ 8006f68 <_malloc_r+0xfc>
 8006e96:	f000 f869 	bl	8006f6c <__malloc_lock>
 8006e9a:	f8d8 3000 	ldr.w	r3, [r8]
 8006e9e:	461c      	mov	r4, r3
 8006ea0:	bb44      	cbnz	r4, 8006ef4 <_malloc_r+0x88>
 8006ea2:	4629      	mov	r1, r5
 8006ea4:	4630      	mov	r0, r6
 8006ea6:	f7ff ffbf 	bl	8006e28 <sbrk_aligned>
 8006eaa:	1c43      	adds	r3, r0, #1
 8006eac:	4604      	mov	r4, r0
 8006eae:	d158      	bne.n	8006f62 <_malloc_r+0xf6>
 8006eb0:	f8d8 4000 	ldr.w	r4, [r8]
 8006eb4:	4627      	mov	r7, r4
 8006eb6:	2f00      	cmp	r7, #0
 8006eb8:	d143      	bne.n	8006f42 <_malloc_r+0xd6>
 8006eba:	2c00      	cmp	r4, #0
 8006ebc:	d04b      	beq.n	8006f56 <_malloc_r+0xea>
 8006ebe:	6823      	ldr	r3, [r4, #0]
 8006ec0:	4639      	mov	r1, r7
 8006ec2:	4630      	mov	r0, r6
 8006ec4:	eb04 0903 	add.w	r9, r4, r3
 8006ec8:	f000 fc5c 	bl	8007784 <_sbrk_r>
 8006ecc:	4581      	cmp	r9, r0
 8006ece:	d142      	bne.n	8006f56 <_malloc_r+0xea>
 8006ed0:	6821      	ldr	r1, [r4, #0]
 8006ed2:	1a6d      	subs	r5, r5, r1
 8006ed4:	4629      	mov	r1, r5
 8006ed6:	4630      	mov	r0, r6
 8006ed8:	f7ff ffa6 	bl	8006e28 <sbrk_aligned>
 8006edc:	3001      	adds	r0, #1
 8006ede:	d03a      	beq.n	8006f56 <_malloc_r+0xea>
 8006ee0:	6823      	ldr	r3, [r4, #0]
 8006ee2:	442b      	add	r3, r5
 8006ee4:	6023      	str	r3, [r4, #0]
 8006ee6:	f8d8 3000 	ldr.w	r3, [r8]
 8006eea:	685a      	ldr	r2, [r3, #4]
 8006eec:	bb62      	cbnz	r2, 8006f48 <_malloc_r+0xdc>
 8006eee:	f8c8 7000 	str.w	r7, [r8]
 8006ef2:	e00f      	b.n	8006f14 <_malloc_r+0xa8>
 8006ef4:	6822      	ldr	r2, [r4, #0]
 8006ef6:	1b52      	subs	r2, r2, r5
 8006ef8:	d420      	bmi.n	8006f3c <_malloc_r+0xd0>
 8006efa:	2a0b      	cmp	r2, #11
 8006efc:	d917      	bls.n	8006f2e <_malloc_r+0xc2>
 8006efe:	1961      	adds	r1, r4, r5
 8006f00:	42a3      	cmp	r3, r4
 8006f02:	6025      	str	r5, [r4, #0]
 8006f04:	bf18      	it	ne
 8006f06:	6059      	strne	r1, [r3, #4]
 8006f08:	6863      	ldr	r3, [r4, #4]
 8006f0a:	bf08      	it	eq
 8006f0c:	f8c8 1000 	streq.w	r1, [r8]
 8006f10:	5162      	str	r2, [r4, r5]
 8006f12:	604b      	str	r3, [r1, #4]
 8006f14:	4630      	mov	r0, r6
 8006f16:	f000 f82f 	bl	8006f78 <__malloc_unlock>
 8006f1a:	f104 000b 	add.w	r0, r4, #11
 8006f1e:	1d23      	adds	r3, r4, #4
 8006f20:	f020 0007 	bic.w	r0, r0, #7
 8006f24:	1ac2      	subs	r2, r0, r3
 8006f26:	bf1c      	itt	ne
 8006f28:	1a1b      	subne	r3, r3, r0
 8006f2a:	50a3      	strne	r3, [r4, r2]
 8006f2c:	e7af      	b.n	8006e8e <_malloc_r+0x22>
 8006f2e:	6862      	ldr	r2, [r4, #4]
 8006f30:	42a3      	cmp	r3, r4
 8006f32:	bf0c      	ite	eq
 8006f34:	f8c8 2000 	streq.w	r2, [r8]
 8006f38:	605a      	strne	r2, [r3, #4]
 8006f3a:	e7eb      	b.n	8006f14 <_malloc_r+0xa8>
 8006f3c:	4623      	mov	r3, r4
 8006f3e:	6864      	ldr	r4, [r4, #4]
 8006f40:	e7ae      	b.n	8006ea0 <_malloc_r+0x34>
 8006f42:	463c      	mov	r4, r7
 8006f44:	687f      	ldr	r7, [r7, #4]
 8006f46:	e7b6      	b.n	8006eb6 <_malloc_r+0x4a>
 8006f48:	461a      	mov	r2, r3
 8006f4a:	685b      	ldr	r3, [r3, #4]
 8006f4c:	42a3      	cmp	r3, r4
 8006f4e:	d1fb      	bne.n	8006f48 <_malloc_r+0xdc>
 8006f50:	2300      	movs	r3, #0
 8006f52:	6053      	str	r3, [r2, #4]
 8006f54:	e7de      	b.n	8006f14 <_malloc_r+0xa8>
 8006f56:	230c      	movs	r3, #12
 8006f58:	6033      	str	r3, [r6, #0]
 8006f5a:	4630      	mov	r0, r6
 8006f5c:	f000 f80c 	bl	8006f78 <__malloc_unlock>
 8006f60:	e794      	b.n	8006e8c <_malloc_r+0x20>
 8006f62:	6005      	str	r5, [r0, #0]
 8006f64:	e7d6      	b.n	8006f14 <_malloc_r+0xa8>
 8006f66:	bf00      	nop
 8006f68:	20025e18 	.word	0x20025e18

08006f6c <__malloc_lock>:
 8006f6c:	4801      	ldr	r0, [pc, #4]	@ (8006f74 <__malloc_lock+0x8>)
 8006f6e:	f7ff bf0e 	b.w	8006d8e <__retarget_lock_acquire_recursive>
 8006f72:	bf00      	nop
 8006f74:	20025e10 	.word	0x20025e10

08006f78 <__malloc_unlock>:
 8006f78:	4801      	ldr	r0, [pc, #4]	@ (8006f80 <__malloc_unlock+0x8>)
 8006f7a:	f7ff bf09 	b.w	8006d90 <__retarget_lock_release_recursive>
 8006f7e:	bf00      	nop
 8006f80:	20025e10 	.word	0x20025e10

08006f84 <__sfputc_r>:
 8006f84:	6893      	ldr	r3, [r2, #8]
 8006f86:	3b01      	subs	r3, #1
 8006f88:	2b00      	cmp	r3, #0
 8006f8a:	b410      	push	{r4}
 8006f8c:	6093      	str	r3, [r2, #8]
 8006f8e:	da08      	bge.n	8006fa2 <__sfputc_r+0x1e>
 8006f90:	6994      	ldr	r4, [r2, #24]
 8006f92:	42a3      	cmp	r3, r4
 8006f94:	db01      	blt.n	8006f9a <__sfputc_r+0x16>
 8006f96:	290a      	cmp	r1, #10
 8006f98:	d103      	bne.n	8006fa2 <__sfputc_r+0x1e>
 8006f9a:	f85d 4b04 	ldr.w	r4, [sp], #4
 8006f9e:	f7ff bde8 	b.w	8006b72 <__swbuf_r>
 8006fa2:	6813      	ldr	r3, [r2, #0]
 8006fa4:	1c58      	adds	r0, r3, #1
 8006fa6:	6010      	str	r0, [r2, #0]
 8006fa8:	7019      	strb	r1, [r3, #0]
 8006faa:	4608      	mov	r0, r1
 8006fac:	f85d 4b04 	ldr.w	r4, [sp], #4
 8006fb0:	4770      	bx	lr

08006fb2 <__sfputs_r>:
 8006fb2:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8006fb4:	4606      	mov	r6, r0
 8006fb6:	460f      	mov	r7, r1
 8006fb8:	4614      	mov	r4, r2
 8006fba:	18d5      	adds	r5, r2, r3
 8006fbc:	42ac      	cmp	r4, r5
 8006fbe:	d101      	bne.n	8006fc4 <__sfputs_r+0x12>
 8006fc0:	2000      	movs	r0, #0
 8006fc2:	e007      	b.n	8006fd4 <__sfputs_r+0x22>
 8006fc4:	f814 1b01 	ldrb.w	r1, [r4], #1
 8006fc8:	463a      	mov	r2, r7
 8006fca:	4630      	mov	r0, r6
 8006fcc:	f7ff ffda 	bl	8006f84 <__sfputc_r>
 8006fd0:	1c43      	adds	r3, r0, #1
 8006fd2:	d1f3      	bne.n	8006fbc <__sfputs_r+0xa>
 8006fd4:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

08006fd8 <_vfiprintf_r>:
 8006fd8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8006fdc:	460d      	mov	r5, r1
 8006fde:	b09d      	sub	sp, #116	@ 0x74
 8006fe0:	4614      	mov	r4, r2
 8006fe2:	4698      	mov	r8, r3
 8006fe4:	4606      	mov	r6, r0
 8006fe6:	b118      	cbz	r0, 8006ff0 <_vfiprintf_r+0x18>
 8006fe8:	6a03      	ldr	r3, [r0, #32]
 8006fea:	b90b      	cbnz	r3, 8006ff0 <_vfiprintf_r+0x18>
 8006fec:	f7ff fd36 	bl	8006a5c <__sinit>
 8006ff0:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 8006ff2:	07d9      	lsls	r1, r3, #31
 8006ff4:	d405      	bmi.n	8007002 <_vfiprintf_r+0x2a>
 8006ff6:	89ab      	ldrh	r3, [r5, #12]
 8006ff8:	059a      	lsls	r2, r3, #22
 8006ffa:	d402      	bmi.n	8007002 <_vfiprintf_r+0x2a>
 8006ffc:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 8006ffe:	f7ff fec6 	bl	8006d8e <__retarget_lock_acquire_recursive>
 8007002:	89ab      	ldrh	r3, [r5, #12]
 8007004:	071b      	lsls	r3, r3, #28
 8007006:	d501      	bpl.n	800700c <_vfiprintf_r+0x34>
 8007008:	692b      	ldr	r3, [r5, #16]
 800700a:	b99b      	cbnz	r3, 8007034 <_vfiprintf_r+0x5c>
 800700c:	4629      	mov	r1, r5
 800700e:	4630      	mov	r0, r6
 8007010:	f7ff fdee 	bl	8006bf0 <__swsetup_r>
 8007014:	b170      	cbz	r0, 8007034 <_vfiprintf_r+0x5c>
 8007016:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 8007018:	07dc      	lsls	r4, r3, #31
 800701a:	d504      	bpl.n	8007026 <_vfiprintf_r+0x4e>
 800701c:	f04f 30ff 	mov.w	r0, #4294967295
 8007020:	b01d      	add	sp, #116	@ 0x74
 8007022:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8007026:	89ab      	ldrh	r3, [r5, #12]
 8007028:	0598      	lsls	r0, r3, #22
 800702a:	d4f7      	bmi.n	800701c <_vfiprintf_r+0x44>
 800702c:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 800702e:	f7ff feaf 	bl	8006d90 <__retarget_lock_release_recursive>
 8007032:	e7f3      	b.n	800701c <_vfiprintf_r+0x44>
 8007034:	2300      	movs	r3, #0
 8007036:	9309      	str	r3, [sp, #36]	@ 0x24
 8007038:	2320      	movs	r3, #32
 800703a:	f88d 3029 	strb.w	r3, [sp, #41]	@ 0x29
 800703e:	f8cd 800c 	str.w	r8, [sp, #12]
 8007042:	2330      	movs	r3, #48	@ 0x30
 8007044:	f8df 81ac 	ldr.w	r8, [pc, #428]	@ 80071f4 <_vfiprintf_r+0x21c>
 8007048:	f88d 302a 	strb.w	r3, [sp, #42]	@ 0x2a
 800704c:	f04f 0901 	mov.w	r9, #1
 8007050:	4623      	mov	r3, r4
 8007052:	469a      	mov	sl, r3
 8007054:	f813 2b01 	ldrb.w	r2, [r3], #1
 8007058:	b10a      	cbz	r2, 800705e <_vfiprintf_r+0x86>
 800705a:	2a25      	cmp	r2, #37	@ 0x25
 800705c:	d1f9      	bne.n	8007052 <_vfiprintf_r+0x7a>
 800705e:	ebba 0b04 	subs.w	fp, sl, r4
 8007062:	d00b      	beq.n	800707c <_vfiprintf_r+0xa4>
 8007064:	465b      	mov	r3, fp
 8007066:	4622      	mov	r2, r4
 8007068:	4629      	mov	r1, r5
 800706a:	4630      	mov	r0, r6
 800706c:	f7ff ffa1 	bl	8006fb2 <__sfputs_r>
 8007070:	3001      	adds	r0, #1
 8007072:	f000 80a7 	beq.w	80071c4 <_vfiprintf_r+0x1ec>
 8007076:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 8007078:	445a      	add	r2, fp
 800707a:	9209      	str	r2, [sp, #36]	@ 0x24
 800707c:	f89a 3000 	ldrb.w	r3, [sl]
 8007080:	2b00      	cmp	r3, #0
 8007082:	f000 809f 	beq.w	80071c4 <_vfiprintf_r+0x1ec>
 8007086:	2300      	movs	r3, #0
 8007088:	f04f 32ff 	mov.w	r2, #4294967295
 800708c:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8007090:	f10a 0a01 	add.w	sl, sl, #1
 8007094:	9304      	str	r3, [sp, #16]
 8007096:	9307      	str	r3, [sp, #28]
 8007098:	f88d 3053 	strb.w	r3, [sp, #83]	@ 0x53
 800709c:	931a      	str	r3, [sp, #104]	@ 0x68
 800709e:	4654      	mov	r4, sl
 80070a0:	2205      	movs	r2, #5
 80070a2:	f814 1b01 	ldrb.w	r1, [r4], #1
 80070a6:	4853      	ldr	r0, [pc, #332]	@ (80071f4 <_vfiprintf_r+0x21c>)
 80070a8:	f7f9 f8a2 	bl	80001f0 <memchr>
 80070ac:	9a04      	ldr	r2, [sp, #16]
 80070ae:	b9d8      	cbnz	r0, 80070e8 <_vfiprintf_r+0x110>
 80070b0:	06d1      	lsls	r1, r2, #27
 80070b2:	bf44      	itt	mi
 80070b4:	2320      	movmi	r3, #32
 80070b6:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 80070ba:	0713      	lsls	r3, r2, #28
 80070bc:	bf44      	itt	mi
 80070be:	232b      	movmi	r3, #43	@ 0x2b
 80070c0:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 80070c4:	f89a 3000 	ldrb.w	r3, [sl]
 80070c8:	2b2a      	cmp	r3, #42	@ 0x2a
 80070ca:	d015      	beq.n	80070f8 <_vfiprintf_r+0x120>
 80070cc:	9a07      	ldr	r2, [sp, #28]
 80070ce:	4654      	mov	r4, sl
 80070d0:	2000      	movs	r0, #0
 80070d2:	f04f 0c0a 	mov.w	ip, #10
 80070d6:	4621      	mov	r1, r4
 80070d8:	f811 3b01 	ldrb.w	r3, [r1], #1
 80070dc:	3b30      	subs	r3, #48	@ 0x30
 80070de:	2b09      	cmp	r3, #9
 80070e0:	d94b      	bls.n	800717a <_vfiprintf_r+0x1a2>
 80070e2:	b1b0      	cbz	r0, 8007112 <_vfiprintf_r+0x13a>
 80070e4:	9207      	str	r2, [sp, #28]
 80070e6:	e014      	b.n	8007112 <_vfiprintf_r+0x13a>
 80070e8:	eba0 0308 	sub.w	r3, r0, r8
 80070ec:	fa09 f303 	lsl.w	r3, r9, r3
 80070f0:	4313      	orrs	r3, r2
 80070f2:	9304      	str	r3, [sp, #16]
 80070f4:	46a2      	mov	sl, r4
 80070f6:	e7d2      	b.n	800709e <_vfiprintf_r+0xc6>
 80070f8:	9b03      	ldr	r3, [sp, #12]
 80070fa:	1d19      	adds	r1, r3, #4
 80070fc:	681b      	ldr	r3, [r3, #0]
 80070fe:	9103      	str	r1, [sp, #12]
 8007100:	2b00      	cmp	r3, #0
 8007102:	bfbb      	ittet	lt
 8007104:	425b      	neglt	r3, r3
 8007106:	f042 0202 	orrlt.w	r2, r2, #2
 800710a:	9307      	strge	r3, [sp, #28]
 800710c:	9307      	strlt	r3, [sp, #28]
 800710e:	bfb8      	it	lt
 8007110:	9204      	strlt	r2, [sp, #16]
 8007112:	7823      	ldrb	r3, [r4, #0]
 8007114:	2b2e      	cmp	r3, #46	@ 0x2e
 8007116:	d10a      	bne.n	800712e <_vfiprintf_r+0x156>
 8007118:	7863      	ldrb	r3, [r4, #1]
 800711a:	2b2a      	cmp	r3, #42	@ 0x2a
 800711c:	d132      	bne.n	8007184 <_vfiprintf_r+0x1ac>
 800711e:	9b03      	ldr	r3, [sp, #12]
 8007120:	1d1a      	adds	r2, r3, #4
 8007122:	681b      	ldr	r3, [r3, #0]
 8007124:	9203      	str	r2, [sp, #12]
 8007126:	ea43 73e3 	orr.w	r3, r3, r3, asr #31
 800712a:	3402      	adds	r4, #2
 800712c:	9305      	str	r3, [sp, #20]
 800712e:	f8df a0d4 	ldr.w	sl, [pc, #212]	@ 8007204 <_vfiprintf_r+0x22c>
 8007132:	7821      	ldrb	r1, [r4, #0]
 8007134:	2203      	movs	r2, #3
 8007136:	4650      	mov	r0, sl
 8007138:	f7f9 f85a 	bl	80001f0 <memchr>
 800713c:	b138      	cbz	r0, 800714e <_vfiprintf_r+0x176>
 800713e:	9b04      	ldr	r3, [sp, #16]
 8007140:	eba0 000a 	sub.w	r0, r0, sl
 8007144:	2240      	movs	r2, #64	@ 0x40
 8007146:	4082      	lsls	r2, r0
 8007148:	4313      	orrs	r3, r2
 800714a:	3401      	adds	r4, #1
 800714c:	9304      	str	r3, [sp, #16]
 800714e:	f814 1b01 	ldrb.w	r1, [r4], #1
 8007152:	4829      	ldr	r0, [pc, #164]	@ (80071f8 <_vfiprintf_r+0x220>)
 8007154:	f88d 1028 	strb.w	r1, [sp, #40]	@ 0x28
 8007158:	2206      	movs	r2, #6
 800715a:	f7f9 f849 	bl	80001f0 <memchr>
 800715e:	2800      	cmp	r0, #0
 8007160:	d03f      	beq.n	80071e2 <_vfiprintf_r+0x20a>
 8007162:	4b26      	ldr	r3, [pc, #152]	@ (80071fc <_vfiprintf_r+0x224>)
 8007164:	bb1b      	cbnz	r3, 80071ae <_vfiprintf_r+0x1d6>
 8007166:	9b03      	ldr	r3, [sp, #12]
 8007168:	3307      	adds	r3, #7
 800716a:	f023 0307 	bic.w	r3, r3, #7
 800716e:	3308      	adds	r3, #8
 8007170:	9303      	str	r3, [sp, #12]
 8007172:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8007174:	443b      	add	r3, r7
 8007176:	9309      	str	r3, [sp, #36]	@ 0x24
 8007178:	e76a      	b.n	8007050 <_vfiprintf_r+0x78>
 800717a:	fb0c 3202 	mla	r2, ip, r2, r3
 800717e:	460c      	mov	r4, r1
 8007180:	2001      	movs	r0, #1
 8007182:	e7a8      	b.n	80070d6 <_vfiprintf_r+0xfe>
 8007184:	2300      	movs	r3, #0
 8007186:	3401      	adds	r4, #1
 8007188:	9305      	str	r3, [sp, #20]
 800718a:	4619      	mov	r1, r3
 800718c:	f04f 0c0a 	mov.w	ip, #10
 8007190:	4620      	mov	r0, r4
 8007192:	f810 2b01 	ldrb.w	r2, [r0], #1
 8007196:	3a30      	subs	r2, #48	@ 0x30
 8007198:	2a09      	cmp	r2, #9
 800719a:	d903      	bls.n	80071a4 <_vfiprintf_r+0x1cc>
 800719c:	2b00      	cmp	r3, #0
 800719e:	d0c6      	beq.n	800712e <_vfiprintf_r+0x156>
 80071a0:	9105      	str	r1, [sp, #20]
 80071a2:	e7c4      	b.n	800712e <_vfiprintf_r+0x156>
 80071a4:	fb0c 2101 	mla	r1, ip, r1, r2
 80071a8:	4604      	mov	r4, r0
 80071aa:	2301      	movs	r3, #1
 80071ac:	e7f0      	b.n	8007190 <_vfiprintf_r+0x1b8>
 80071ae:	ab03      	add	r3, sp, #12
 80071b0:	9300      	str	r3, [sp, #0]
 80071b2:	462a      	mov	r2, r5
 80071b4:	4b12      	ldr	r3, [pc, #72]	@ (8007200 <_vfiprintf_r+0x228>)
 80071b6:	a904      	add	r1, sp, #16
 80071b8:	4630      	mov	r0, r6
 80071ba:	f3af 8000 	nop.w
 80071be:	4607      	mov	r7, r0
 80071c0:	1c78      	adds	r0, r7, #1
 80071c2:	d1d6      	bne.n	8007172 <_vfiprintf_r+0x19a>
 80071c4:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 80071c6:	07d9      	lsls	r1, r3, #31
 80071c8:	d405      	bmi.n	80071d6 <_vfiprintf_r+0x1fe>
 80071ca:	89ab      	ldrh	r3, [r5, #12]
 80071cc:	059a      	lsls	r2, r3, #22
 80071ce:	d402      	bmi.n	80071d6 <_vfiprintf_r+0x1fe>
 80071d0:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 80071d2:	f7ff fddd 	bl	8006d90 <__retarget_lock_release_recursive>
 80071d6:	89ab      	ldrh	r3, [r5, #12]
 80071d8:	065b      	lsls	r3, r3, #25
 80071da:	f53f af1f 	bmi.w	800701c <_vfiprintf_r+0x44>
 80071de:	9809      	ldr	r0, [sp, #36]	@ 0x24
 80071e0:	e71e      	b.n	8007020 <_vfiprintf_r+0x48>
 80071e2:	ab03      	add	r3, sp, #12
 80071e4:	9300      	str	r3, [sp, #0]
 80071e6:	462a      	mov	r2, r5
 80071e8:	4b05      	ldr	r3, [pc, #20]	@ (8007200 <_vfiprintf_r+0x228>)
 80071ea:	a904      	add	r1, sp, #16
 80071ec:	4630      	mov	r0, r6
 80071ee:	f000 f879 	bl	80072e4 <_printf_i>
 80071f2:	e7e4      	b.n	80071be <_vfiprintf_r+0x1e6>
 80071f4:	080089e8 	.word	0x080089e8
 80071f8:	080089f2 	.word	0x080089f2
 80071fc:	00000000 	.word	0x00000000
 8007200:	08006fb3 	.word	0x08006fb3
 8007204:	080089ee 	.word	0x080089ee

08007208 <_printf_common>:
 8007208:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800720c:	4616      	mov	r6, r2
 800720e:	4698      	mov	r8, r3
 8007210:	688a      	ldr	r2, [r1, #8]
 8007212:	690b      	ldr	r3, [r1, #16]
 8007214:	f8dd 9020 	ldr.w	r9, [sp, #32]
 8007218:	4293      	cmp	r3, r2
 800721a:	bfb8      	it	lt
 800721c:	4613      	movlt	r3, r2
 800721e:	6033      	str	r3, [r6, #0]
 8007220:	f891 2043 	ldrb.w	r2, [r1, #67]	@ 0x43
 8007224:	4607      	mov	r7, r0
 8007226:	460c      	mov	r4, r1
 8007228:	b10a      	cbz	r2, 800722e <_printf_common+0x26>
 800722a:	3301      	adds	r3, #1
 800722c:	6033      	str	r3, [r6, #0]
 800722e:	6823      	ldr	r3, [r4, #0]
 8007230:	0699      	lsls	r1, r3, #26
 8007232:	bf42      	ittt	mi
 8007234:	6833      	ldrmi	r3, [r6, #0]
 8007236:	3302      	addmi	r3, #2
 8007238:	6033      	strmi	r3, [r6, #0]
 800723a:	6825      	ldr	r5, [r4, #0]
 800723c:	f015 0506 	ands.w	r5, r5, #6
 8007240:	d106      	bne.n	8007250 <_printf_common+0x48>
 8007242:	f104 0a19 	add.w	sl, r4, #25
 8007246:	68e3      	ldr	r3, [r4, #12]
 8007248:	6832      	ldr	r2, [r6, #0]
 800724a:	1a9b      	subs	r3, r3, r2
 800724c:	42ab      	cmp	r3, r5
 800724e:	dc26      	bgt.n	800729e <_printf_common+0x96>
 8007250:	f894 3043 	ldrb.w	r3, [r4, #67]	@ 0x43
 8007254:	6822      	ldr	r2, [r4, #0]
 8007256:	3b00      	subs	r3, #0
 8007258:	bf18      	it	ne
 800725a:	2301      	movne	r3, #1
 800725c:	0692      	lsls	r2, r2, #26
 800725e:	d42b      	bmi.n	80072b8 <_printf_common+0xb0>
 8007260:	f104 0243 	add.w	r2, r4, #67	@ 0x43
 8007264:	4641      	mov	r1, r8
 8007266:	4638      	mov	r0, r7
 8007268:	47c8      	blx	r9
 800726a:	3001      	adds	r0, #1
 800726c:	d01e      	beq.n	80072ac <_printf_common+0xa4>
 800726e:	6823      	ldr	r3, [r4, #0]
 8007270:	6922      	ldr	r2, [r4, #16]
 8007272:	f003 0306 	and.w	r3, r3, #6
 8007276:	2b04      	cmp	r3, #4
 8007278:	bf02      	ittt	eq
 800727a:	68e5      	ldreq	r5, [r4, #12]
 800727c:	6833      	ldreq	r3, [r6, #0]
 800727e:	1aed      	subeq	r5, r5, r3
 8007280:	68a3      	ldr	r3, [r4, #8]
 8007282:	bf0c      	ite	eq
 8007284:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 8007288:	2500      	movne	r5, #0
 800728a:	4293      	cmp	r3, r2
 800728c:	bfc4      	itt	gt
 800728e:	1a9b      	subgt	r3, r3, r2
 8007290:	18ed      	addgt	r5, r5, r3
 8007292:	2600      	movs	r6, #0
 8007294:	341a      	adds	r4, #26
 8007296:	42b5      	cmp	r5, r6
 8007298:	d11a      	bne.n	80072d0 <_printf_common+0xc8>
 800729a:	2000      	movs	r0, #0
 800729c:	e008      	b.n	80072b0 <_printf_common+0xa8>
 800729e:	2301      	movs	r3, #1
 80072a0:	4652      	mov	r2, sl
 80072a2:	4641      	mov	r1, r8
 80072a4:	4638      	mov	r0, r7
 80072a6:	47c8      	blx	r9
 80072a8:	3001      	adds	r0, #1
 80072aa:	d103      	bne.n	80072b4 <_printf_common+0xac>
 80072ac:	f04f 30ff 	mov.w	r0, #4294967295
 80072b0:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80072b4:	3501      	adds	r5, #1
 80072b6:	e7c6      	b.n	8007246 <_printf_common+0x3e>
 80072b8:	18e1      	adds	r1, r4, r3
 80072ba:	1c5a      	adds	r2, r3, #1
 80072bc:	2030      	movs	r0, #48	@ 0x30
 80072be:	f881 0043 	strb.w	r0, [r1, #67]	@ 0x43
 80072c2:	4422      	add	r2, r4
 80072c4:	f894 1045 	ldrb.w	r1, [r4, #69]	@ 0x45
 80072c8:	f882 1043 	strb.w	r1, [r2, #67]	@ 0x43
 80072cc:	3302      	adds	r3, #2
 80072ce:	e7c7      	b.n	8007260 <_printf_common+0x58>
 80072d0:	2301      	movs	r3, #1
 80072d2:	4622      	mov	r2, r4
 80072d4:	4641      	mov	r1, r8
 80072d6:	4638      	mov	r0, r7
 80072d8:	47c8      	blx	r9
 80072da:	3001      	adds	r0, #1
 80072dc:	d0e6      	beq.n	80072ac <_printf_common+0xa4>
 80072de:	3601      	adds	r6, #1
 80072e0:	e7d9      	b.n	8007296 <_printf_common+0x8e>
	...

080072e4 <_printf_i>:
 80072e4:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 80072e8:	7e0f      	ldrb	r7, [r1, #24]
 80072ea:	9e0c      	ldr	r6, [sp, #48]	@ 0x30
 80072ec:	2f78      	cmp	r7, #120	@ 0x78
 80072ee:	4691      	mov	r9, r2
 80072f0:	4680      	mov	r8, r0
 80072f2:	460c      	mov	r4, r1
 80072f4:	469a      	mov	sl, r3
 80072f6:	f101 0243 	add.w	r2, r1, #67	@ 0x43
 80072fa:	d807      	bhi.n	800730c <_printf_i+0x28>
 80072fc:	2f62      	cmp	r7, #98	@ 0x62
 80072fe:	d80a      	bhi.n	8007316 <_printf_i+0x32>
 8007300:	2f00      	cmp	r7, #0
 8007302:	f000 80d2 	beq.w	80074aa <_printf_i+0x1c6>
 8007306:	2f58      	cmp	r7, #88	@ 0x58
 8007308:	f000 80b9 	beq.w	800747e <_printf_i+0x19a>
 800730c:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 8007310:	f884 7042 	strb.w	r7, [r4, #66]	@ 0x42
 8007314:	e03a      	b.n	800738c <_printf_i+0xa8>
 8007316:	f1a7 0363 	sub.w	r3, r7, #99	@ 0x63
 800731a:	2b15      	cmp	r3, #21
 800731c:	d8f6      	bhi.n	800730c <_printf_i+0x28>
 800731e:	a101      	add	r1, pc, #4	@ (adr r1, 8007324 <_printf_i+0x40>)
 8007320:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 8007324:	0800737d 	.word	0x0800737d
 8007328:	08007391 	.word	0x08007391
 800732c:	0800730d 	.word	0x0800730d
 8007330:	0800730d 	.word	0x0800730d
 8007334:	0800730d 	.word	0x0800730d
 8007338:	0800730d 	.word	0x0800730d
 800733c:	08007391 	.word	0x08007391
 8007340:	0800730d 	.word	0x0800730d
 8007344:	0800730d 	.word	0x0800730d
 8007348:	0800730d 	.word	0x0800730d
 800734c:	0800730d 	.word	0x0800730d
 8007350:	08007491 	.word	0x08007491
 8007354:	080073bb 	.word	0x080073bb
 8007358:	0800744b 	.word	0x0800744b
 800735c:	0800730d 	.word	0x0800730d
 8007360:	0800730d 	.word	0x0800730d
 8007364:	080074b3 	.word	0x080074b3
 8007368:	0800730d 	.word	0x0800730d
 800736c:	080073bb 	.word	0x080073bb
 8007370:	0800730d 	.word	0x0800730d
 8007374:	0800730d 	.word	0x0800730d
 8007378:	08007453 	.word	0x08007453
 800737c:	6833      	ldr	r3, [r6, #0]
 800737e:	1d1a      	adds	r2, r3, #4
 8007380:	681b      	ldr	r3, [r3, #0]
 8007382:	6032      	str	r2, [r6, #0]
 8007384:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 8007388:	f884 3042 	strb.w	r3, [r4, #66]	@ 0x42
 800738c:	2301      	movs	r3, #1
 800738e:	e09d      	b.n	80074cc <_printf_i+0x1e8>
 8007390:	6833      	ldr	r3, [r6, #0]
 8007392:	6820      	ldr	r0, [r4, #0]
 8007394:	1d19      	adds	r1, r3, #4
 8007396:	6031      	str	r1, [r6, #0]
 8007398:	0606      	lsls	r6, r0, #24
 800739a:	d501      	bpl.n	80073a0 <_printf_i+0xbc>
 800739c:	681d      	ldr	r5, [r3, #0]
 800739e:	e003      	b.n	80073a8 <_printf_i+0xc4>
 80073a0:	0645      	lsls	r5, r0, #25
 80073a2:	d5fb      	bpl.n	800739c <_printf_i+0xb8>
 80073a4:	f9b3 5000 	ldrsh.w	r5, [r3]
 80073a8:	2d00      	cmp	r5, #0
 80073aa:	da03      	bge.n	80073b4 <_printf_i+0xd0>
 80073ac:	232d      	movs	r3, #45	@ 0x2d
 80073ae:	426d      	negs	r5, r5
 80073b0:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 80073b4:	4859      	ldr	r0, [pc, #356]	@ (800751c <_printf_i+0x238>)
 80073b6:	230a      	movs	r3, #10
 80073b8:	e011      	b.n	80073de <_printf_i+0xfa>
 80073ba:	6821      	ldr	r1, [r4, #0]
 80073bc:	6833      	ldr	r3, [r6, #0]
 80073be:	0608      	lsls	r0, r1, #24
 80073c0:	f853 5b04 	ldr.w	r5, [r3], #4
 80073c4:	d402      	bmi.n	80073cc <_printf_i+0xe8>
 80073c6:	0649      	lsls	r1, r1, #25
 80073c8:	bf48      	it	mi
 80073ca:	b2ad      	uxthmi	r5, r5
 80073cc:	2f6f      	cmp	r7, #111	@ 0x6f
 80073ce:	4853      	ldr	r0, [pc, #332]	@ (800751c <_printf_i+0x238>)
 80073d0:	6033      	str	r3, [r6, #0]
 80073d2:	bf14      	ite	ne
 80073d4:	230a      	movne	r3, #10
 80073d6:	2308      	moveq	r3, #8
 80073d8:	2100      	movs	r1, #0
 80073da:	f884 1043 	strb.w	r1, [r4, #67]	@ 0x43
 80073de:	6866      	ldr	r6, [r4, #4]
 80073e0:	60a6      	str	r6, [r4, #8]
 80073e2:	2e00      	cmp	r6, #0
 80073e4:	bfa2      	ittt	ge
 80073e6:	6821      	ldrge	r1, [r4, #0]
 80073e8:	f021 0104 	bicge.w	r1, r1, #4
 80073ec:	6021      	strge	r1, [r4, #0]
 80073ee:	b90d      	cbnz	r5, 80073f4 <_printf_i+0x110>
 80073f0:	2e00      	cmp	r6, #0
 80073f2:	d04b      	beq.n	800748c <_printf_i+0x1a8>
 80073f4:	4616      	mov	r6, r2
 80073f6:	fbb5 f1f3 	udiv	r1, r5, r3
 80073fa:	fb03 5711 	mls	r7, r3, r1, r5
 80073fe:	5dc7      	ldrb	r7, [r0, r7]
 8007400:	f806 7d01 	strb.w	r7, [r6, #-1]!
 8007404:	462f      	mov	r7, r5
 8007406:	42bb      	cmp	r3, r7
 8007408:	460d      	mov	r5, r1
 800740a:	d9f4      	bls.n	80073f6 <_printf_i+0x112>
 800740c:	2b08      	cmp	r3, #8
 800740e:	d10b      	bne.n	8007428 <_printf_i+0x144>
 8007410:	6823      	ldr	r3, [r4, #0]
 8007412:	07df      	lsls	r7, r3, #31
 8007414:	d508      	bpl.n	8007428 <_printf_i+0x144>
 8007416:	6923      	ldr	r3, [r4, #16]
 8007418:	6861      	ldr	r1, [r4, #4]
 800741a:	4299      	cmp	r1, r3
 800741c:	bfde      	ittt	le
 800741e:	2330      	movle	r3, #48	@ 0x30
 8007420:	f806 3c01 	strble.w	r3, [r6, #-1]
 8007424:	f106 36ff 	addle.w	r6, r6, #4294967295
 8007428:	1b92      	subs	r2, r2, r6
 800742a:	6122      	str	r2, [r4, #16]
 800742c:	f8cd a000 	str.w	sl, [sp]
 8007430:	464b      	mov	r3, r9
 8007432:	aa03      	add	r2, sp, #12
 8007434:	4621      	mov	r1, r4
 8007436:	4640      	mov	r0, r8
 8007438:	f7ff fee6 	bl	8007208 <_printf_common>
 800743c:	3001      	adds	r0, #1
 800743e:	d14a      	bne.n	80074d6 <_printf_i+0x1f2>
 8007440:	f04f 30ff 	mov.w	r0, #4294967295
 8007444:	b004      	add	sp, #16
 8007446:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800744a:	6823      	ldr	r3, [r4, #0]
 800744c:	f043 0320 	orr.w	r3, r3, #32
 8007450:	6023      	str	r3, [r4, #0]
 8007452:	4833      	ldr	r0, [pc, #204]	@ (8007520 <_printf_i+0x23c>)
 8007454:	2778      	movs	r7, #120	@ 0x78
 8007456:	f884 7045 	strb.w	r7, [r4, #69]	@ 0x45
 800745a:	6823      	ldr	r3, [r4, #0]
 800745c:	6831      	ldr	r1, [r6, #0]
 800745e:	061f      	lsls	r7, r3, #24
 8007460:	f851 5b04 	ldr.w	r5, [r1], #4
 8007464:	d402      	bmi.n	800746c <_printf_i+0x188>
 8007466:	065f      	lsls	r7, r3, #25
 8007468:	bf48      	it	mi
 800746a:	b2ad      	uxthmi	r5, r5
 800746c:	6031      	str	r1, [r6, #0]
 800746e:	07d9      	lsls	r1, r3, #31
 8007470:	bf44      	itt	mi
 8007472:	f043 0320 	orrmi.w	r3, r3, #32
 8007476:	6023      	strmi	r3, [r4, #0]
 8007478:	b11d      	cbz	r5, 8007482 <_printf_i+0x19e>
 800747a:	2310      	movs	r3, #16
 800747c:	e7ac      	b.n	80073d8 <_printf_i+0xf4>
 800747e:	4827      	ldr	r0, [pc, #156]	@ (800751c <_printf_i+0x238>)
 8007480:	e7e9      	b.n	8007456 <_printf_i+0x172>
 8007482:	6823      	ldr	r3, [r4, #0]
 8007484:	f023 0320 	bic.w	r3, r3, #32
 8007488:	6023      	str	r3, [r4, #0]
 800748a:	e7f6      	b.n	800747a <_printf_i+0x196>
 800748c:	4616      	mov	r6, r2
 800748e:	e7bd      	b.n	800740c <_printf_i+0x128>
 8007490:	6833      	ldr	r3, [r6, #0]
 8007492:	6825      	ldr	r5, [r4, #0]
 8007494:	6961      	ldr	r1, [r4, #20]
 8007496:	1d18      	adds	r0, r3, #4
 8007498:	6030      	str	r0, [r6, #0]
 800749a:	062e      	lsls	r6, r5, #24
 800749c:	681b      	ldr	r3, [r3, #0]
 800749e:	d501      	bpl.n	80074a4 <_printf_i+0x1c0>
 80074a0:	6019      	str	r1, [r3, #0]
 80074a2:	e002      	b.n	80074aa <_printf_i+0x1c6>
 80074a4:	0668      	lsls	r0, r5, #25
 80074a6:	d5fb      	bpl.n	80074a0 <_printf_i+0x1bc>
 80074a8:	8019      	strh	r1, [r3, #0]
 80074aa:	2300      	movs	r3, #0
 80074ac:	6123      	str	r3, [r4, #16]
 80074ae:	4616      	mov	r6, r2
 80074b0:	e7bc      	b.n	800742c <_printf_i+0x148>
 80074b2:	6833      	ldr	r3, [r6, #0]
 80074b4:	1d1a      	adds	r2, r3, #4
 80074b6:	6032      	str	r2, [r6, #0]
 80074b8:	681e      	ldr	r6, [r3, #0]
 80074ba:	6862      	ldr	r2, [r4, #4]
 80074bc:	2100      	movs	r1, #0
 80074be:	4630      	mov	r0, r6
 80074c0:	f7f8 fe96 	bl	80001f0 <memchr>
 80074c4:	b108      	cbz	r0, 80074ca <_printf_i+0x1e6>
 80074c6:	1b80      	subs	r0, r0, r6
 80074c8:	6060      	str	r0, [r4, #4]
 80074ca:	6863      	ldr	r3, [r4, #4]
 80074cc:	6123      	str	r3, [r4, #16]
 80074ce:	2300      	movs	r3, #0
 80074d0:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 80074d4:	e7aa      	b.n	800742c <_printf_i+0x148>
 80074d6:	6923      	ldr	r3, [r4, #16]
 80074d8:	4632      	mov	r2, r6
 80074da:	4649      	mov	r1, r9
 80074dc:	4640      	mov	r0, r8
 80074de:	47d0      	blx	sl
 80074e0:	3001      	adds	r0, #1
 80074e2:	d0ad      	beq.n	8007440 <_printf_i+0x15c>
 80074e4:	6823      	ldr	r3, [r4, #0]
 80074e6:	079b      	lsls	r3, r3, #30
 80074e8:	d413      	bmi.n	8007512 <_printf_i+0x22e>
 80074ea:	68e0      	ldr	r0, [r4, #12]
 80074ec:	9b03      	ldr	r3, [sp, #12]
 80074ee:	4298      	cmp	r0, r3
 80074f0:	bfb8      	it	lt
 80074f2:	4618      	movlt	r0, r3
 80074f4:	e7a6      	b.n	8007444 <_printf_i+0x160>
 80074f6:	2301      	movs	r3, #1
 80074f8:	4632      	mov	r2, r6
 80074fa:	4649      	mov	r1, r9
 80074fc:	4640      	mov	r0, r8
 80074fe:	47d0      	blx	sl
 8007500:	3001      	adds	r0, #1
 8007502:	d09d      	beq.n	8007440 <_printf_i+0x15c>
 8007504:	3501      	adds	r5, #1
 8007506:	68e3      	ldr	r3, [r4, #12]
 8007508:	9903      	ldr	r1, [sp, #12]
 800750a:	1a5b      	subs	r3, r3, r1
 800750c:	42ab      	cmp	r3, r5
 800750e:	dcf2      	bgt.n	80074f6 <_printf_i+0x212>
 8007510:	e7eb      	b.n	80074ea <_printf_i+0x206>
 8007512:	2500      	movs	r5, #0
 8007514:	f104 0619 	add.w	r6, r4, #25
 8007518:	e7f5      	b.n	8007506 <_printf_i+0x222>
 800751a:	bf00      	nop
 800751c:	080089f9 	.word	0x080089f9
 8007520:	08008a0a 	.word	0x08008a0a

08007524 <__sflush_r>:
 8007524:	f9b1 200c 	ldrsh.w	r2, [r1, #12]
 8007528:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800752c:	0716      	lsls	r6, r2, #28
 800752e:	4605      	mov	r5, r0
 8007530:	460c      	mov	r4, r1
 8007532:	d454      	bmi.n	80075de <__sflush_r+0xba>
 8007534:	684b      	ldr	r3, [r1, #4]
 8007536:	2b00      	cmp	r3, #0
 8007538:	dc02      	bgt.n	8007540 <__sflush_r+0x1c>
 800753a:	6c0b      	ldr	r3, [r1, #64]	@ 0x40
 800753c:	2b00      	cmp	r3, #0
 800753e:	dd48      	ble.n	80075d2 <__sflush_r+0xae>
 8007540:	6ae6      	ldr	r6, [r4, #44]	@ 0x2c
 8007542:	2e00      	cmp	r6, #0
 8007544:	d045      	beq.n	80075d2 <__sflush_r+0xae>
 8007546:	2300      	movs	r3, #0
 8007548:	f412 5280 	ands.w	r2, r2, #4096	@ 0x1000
 800754c:	682f      	ldr	r7, [r5, #0]
 800754e:	6a21      	ldr	r1, [r4, #32]
 8007550:	602b      	str	r3, [r5, #0]
 8007552:	d030      	beq.n	80075b6 <__sflush_r+0x92>
 8007554:	6d62      	ldr	r2, [r4, #84]	@ 0x54
 8007556:	89a3      	ldrh	r3, [r4, #12]
 8007558:	0759      	lsls	r1, r3, #29
 800755a:	d505      	bpl.n	8007568 <__sflush_r+0x44>
 800755c:	6863      	ldr	r3, [r4, #4]
 800755e:	1ad2      	subs	r2, r2, r3
 8007560:	6b63      	ldr	r3, [r4, #52]	@ 0x34
 8007562:	b10b      	cbz	r3, 8007568 <__sflush_r+0x44>
 8007564:	6c23      	ldr	r3, [r4, #64]	@ 0x40
 8007566:	1ad2      	subs	r2, r2, r3
 8007568:	2300      	movs	r3, #0
 800756a:	6ae6      	ldr	r6, [r4, #44]	@ 0x2c
 800756c:	6a21      	ldr	r1, [r4, #32]
 800756e:	4628      	mov	r0, r5
 8007570:	47b0      	blx	r6
 8007572:	1c43      	adds	r3, r0, #1
 8007574:	89a3      	ldrh	r3, [r4, #12]
 8007576:	d106      	bne.n	8007586 <__sflush_r+0x62>
 8007578:	6829      	ldr	r1, [r5, #0]
 800757a:	291d      	cmp	r1, #29
 800757c:	d82b      	bhi.n	80075d6 <__sflush_r+0xb2>
 800757e:	4a2a      	ldr	r2, [pc, #168]	@ (8007628 <__sflush_r+0x104>)
 8007580:	410a      	asrs	r2, r1
 8007582:	07d6      	lsls	r6, r2, #31
 8007584:	d427      	bmi.n	80075d6 <__sflush_r+0xb2>
 8007586:	2200      	movs	r2, #0
 8007588:	6062      	str	r2, [r4, #4]
 800758a:	04d9      	lsls	r1, r3, #19
 800758c:	6922      	ldr	r2, [r4, #16]
 800758e:	6022      	str	r2, [r4, #0]
 8007590:	d504      	bpl.n	800759c <__sflush_r+0x78>
 8007592:	1c42      	adds	r2, r0, #1
 8007594:	d101      	bne.n	800759a <__sflush_r+0x76>
 8007596:	682b      	ldr	r3, [r5, #0]
 8007598:	b903      	cbnz	r3, 800759c <__sflush_r+0x78>
 800759a:	6560      	str	r0, [r4, #84]	@ 0x54
 800759c:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 800759e:	602f      	str	r7, [r5, #0]
 80075a0:	b1b9      	cbz	r1, 80075d2 <__sflush_r+0xae>
 80075a2:	f104 0344 	add.w	r3, r4, #68	@ 0x44
 80075a6:	4299      	cmp	r1, r3
 80075a8:	d002      	beq.n	80075b0 <__sflush_r+0x8c>
 80075aa:	4628      	mov	r0, r5
 80075ac:	f7ff fbf2 	bl	8006d94 <_free_r>
 80075b0:	2300      	movs	r3, #0
 80075b2:	6363      	str	r3, [r4, #52]	@ 0x34
 80075b4:	e00d      	b.n	80075d2 <__sflush_r+0xae>
 80075b6:	2301      	movs	r3, #1
 80075b8:	4628      	mov	r0, r5
 80075ba:	47b0      	blx	r6
 80075bc:	4602      	mov	r2, r0
 80075be:	1c50      	adds	r0, r2, #1
 80075c0:	d1c9      	bne.n	8007556 <__sflush_r+0x32>
 80075c2:	682b      	ldr	r3, [r5, #0]
 80075c4:	2b00      	cmp	r3, #0
 80075c6:	d0c6      	beq.n	8007556 <__sflush_r+0x32>
 80075c8:	2b1d      	cmp	r3, #29
 80075ca:	d001      	beq.n	80075d0 <__sflush_r+0xac>
 80075cc:	2b16      	cmp	r3, #22
 80075ce:	d11e      	bne.n	800760e <__sflush_r+0xea>
 80075d0:	602f      	str	r7, [r5, #0]
 80075d2:	2000      	movs	r0, #0
 80075d4:	e022      	b.n	800761c <__sflush_r+0xf8>
 80075d6:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 80075da:	b21b      	sxth	r3, r3
 80075dc:	e01b      	b.n	8007616 <__sflush_r+0xf2>
 80075de:	690f      	ldr	r7, [r1, #16]
 80075e0:	2f00      	cmp	r7, #0
 80075e2:	d0f6      	beq.n	80075d2 <__sflush_r+0xae>
 80075e4:	0793      	lsls	r3, r2, #30
 80075e6:	680e      	ldr	r6, [r1, #0]
 80075e8:	bf08      	it	eq
 80075ea:	694b      	ldreq	r3, [r1, #20]
 80075ec:	600f      	str	r7, [r1, #0]
 80075ee:	bf18      	it	ne
 80075f0:	2300      	movne	r3, #0
 80075f2:	eba6 0807 	sub.w	r8, r6, r7
 80075f6:	608b      	str	r3, [r1, #8]
 80075f8:	f1b8 0f00 	cmp.w	r8, #0
 80075fc:	dde9      	ble.n	80075d2 <__sflush_r+0xae>
 80075fe:	6a21      	ldr	r1, [r4, #32]
 8007600:	6aa6      	ldr	r6, [r4, #40]	@ 0x28
 8007602:	4643      	mov	r3, r8
 8007604:	463a      	mov	r2, r7
 8007606:	4628      	mov	r0, r5
 8007608:	47b0      	blx	r6
 800760a:	2800      	cmp	r0, #0
 800760c:	dc08      	bgt.n	8007620 <__sflush_r+0xfc>
 800760e:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8007612:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8007616:	81a3      	strh	r3, [r4, #12]
 8007618:	f04f 30ff 	mov.w	r0, #4294967295
 800761c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8007620:	4407      	add	r7, r0
 8007622:	eba8 0800 	sub.w	r8, r8, r0
 8007626:	e7e7      	b.n	80075f8 <__sflush_r+0xd4>
 8007628:	dfbffffe 	.word	0xdfbffffe

0800762c <_fflush_r>:
 800762c:	b538      	push	{r3, r4, r5, lr}
 800762e:	690b      	ldr	r3, [r1, #16]
 8007630:	4605      	mov	r5, r0
 8007632:	460c      	mov	r4, r1
 8007634:	b913      	cbnz	r3, 800763c <_fflush_r+0x10>
 8007636:	2500      	movs	r5, #0
 8007638:	4628      	mov	r0, r5
 800763a:	bd38      	pop	{r3, r4, r5, pc}
 800763c:	b118      	cbz	r0, 8007646 <_fflush_r+0x1a>
 800763e:	6a03      	ldr	r3, [r0, #32]
 8007640:	b90b      	cbnz	r3, 8007646 <_fflush_r+0x1a>
 8007642:	f7ff fa0b 	bl	8006a5c <__sinit>
 8007646:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800764a:	2b00      	cmp	r3, #0
 800764c:	d0f3      	beq.n	8007636 <_fflush_r+0xa>
 800764e:	6e62      	ldr	r2, [r4, #100]	@ 0x64
 8007650:	07d0      	lsls	r0, r2, #31
 8007652:	d404      	bmi.n	800765e <_fflush_r+0x32>
 8007654:	0599      	lsls	r1, r3, #22
 8007656:	d402      	bmi.n	800765e <_fflush_r+0x32>
 8007658:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 800765a:	f7ff fb98 	bl	8006d8e <__retarget_lock_acquire_recursive>
 800765e:	4628      	mov	r0, r5
 8007660:	4621      	mov	r1, r4
 8007662:	f7ff ff5f 	bl	8007524 <__sflush_r>
 8007666:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 8007668:	07da      	lsls	r2, r3, #31
 800766a:	4605      	mov	r5, r0
 800766c:	d4e4      	bmi.n	8007638 <_fflush_r+0xc>
 800766e:	89a3      	ldrh	r3, [r4, #12]
 8007670:	059b      	lsls	r3, r3, #22
 8007672:	d4e1      	bmi.n	8007638 <_fflush_r+0xc>
 8007674:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 8007676:	f7ff fb8b 	bl	8006d90 <__retarget_lock_release_recursive>
 800767a:	e7dd      	b.n	8007638 <_fflush_r+0xc>

0800767c <__swhatbuf_r>:
 800767c:	b570      	push	{r4, r5, r6, lr}
 800767e:	460c      	mov	r4, r1
 8007680:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8007684:	2900      	cmp	r1, #0
 8007686:	b096      	sub	sp, #88	@ 0x58
 8007688:	4615      	mov	r5, r2
 800768a:	461e      	mov	r6, r3
 800768c:	da0d      	bge.n	80076aa <__swhatbuf_r+0x2e>
 800768e:	89a3      	ldrh	r3, [r4, #12]
 8007690:	f013 0f80 	tst.w	r3, #128	@ 0x80
 8007694:	f04f 0100 	mov.w	r1, #0
 8007698:	bf14      	ite	ne
 800769a:	2340      	movne	r3, #64	@ 0x40
 800769c:	f44f 6380 	moveq.w	r3, #1024	@ 0x400
 80076a0:	2000      	movs	r0, #0
 80076a2:	6031      	str	r1, [r6, #0]
 80076a4:	602b      	str	r3, [r5, #0]
 80076a6:	b016      	add	sp, #88	@ 0x58
 80076a8:	bd70      	pop	{r4, r5, r6, pc}
 80076aa:	466a      	mov	r2, sp
 80076ac:	f000 f848 	bl	8007740 <_fstat_r>
 80076b0:	2800      	cmp	r0, #0
 80076b2:	dbec      	blt.n	800768e <__swhatbuf_r+0x12>
 80076b4:	9901      	ldr	r1, [sp, #4]
 80076b6:	f401 4170 	and.w	r1, r1, #61440	@ 0xf000
 80076ba:	f5a1 5300 	sub.w	r3, r1, #8192	@ 0x2000
 80076be:	4259      	negs	r1, r3
 80076c0:	4159      	adcs	r1, r3
 80076c2:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 80076c6:	e7eb      	b.n	80076a0 <__swhatbuf_r+0x24>

080076c8 <__smakebuf_r>:
 80076c8:	898b      	ldrh	r3, [r1, #12]
 80076ca:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 80076cc:	079d      	lsls	r5, r3, #30
 80076ce:	4606      	mov	r6, r0
 80076d0:	460c      	mov	r4, r1
 80076d2:	d507      	bpl.n	80076e4 <__smakebuf_r+0x1c>
 80076d4:	f104 0347 	add.w	r3, r4, #71	@ 0x47
 80076d8:	6023      	str	r3, [r4, #0]
 80076da:	6123      	str	r3, [r4, #16]
 80076dc:	2301      	movs	r3, #1
 80076de:	6163      	str	r3, [r4, #20]
 80076e0:	b003      	add	sp, #12
 80076e2:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80076e4:	ab01      	add	r3, sp, #4
 80076e6:	466a      	mov	r2, sp
 80076e8:	f7ff ffc8 	bl	800767c <__swhatbuf_r>
 80076ec:	9f00      	ldr	r7, [sp, #0]
 80076ee:	4605      	mov	r5, r0
 80076f0:	4639      	mov	r1, r7
 80076f2:	4630      	mov	r0, r6
 80076f4:	f7ff fbba 	bl	8006e6c <_malloc_r>
 80076f8:	b948      	cbnz	r0, 800770e <__smakebuf_r+0x46>
 80076fa:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 80076fe:	059a      	lsls	r2, r3, #22
 8007700:	d4ee      	bmi.n	80076e0 <__smakebuf_r+0x18>
 8007702:	f023 0303 	bic.w	r3, r3, #3
 8007706:	f043 0302 	orr.w	r3, r3, #2
 800770a:	81a3      	strh	r3, [r4, #12]
 800770c:	e7e2      	b.n	80076d4 <__smakebuf_r+0xc>
 800770e:	89a3      	ldrh	r3, [r4, #12]
 8007710:	6020      	str	r0, [r4, #0]
 8007712:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8007716:	81a3      	strh	r3, [r4, #12]
 8007718:	9b01      	ldr	r3, [sp, #4]
 800771a:	e9c4 0704 	strd	r0, r7, [r4, #16]
 800771e:	b15b      	cbz	r3, 8007738 <__smakebuf_r+0x70>
 8007720:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8007724:	4630      	mov	r0, r6
 8007726:	f000 f81d 	bl	8007764 <_isatty_r>
 800772a:	b128      	cbz	r0, 8007738 <__smakebuf_r+0x70>
 800772c:	89a3      	ldrh	r3, [r4, #12]
 800772e:	f023 0303 	bic.w	r3, r3, #3
 8007732:	f043 0301 	orr.w	r3, r3, #1
 8007736:	81a3      	strh	r3, [r4, #12]
 8007738:	89a3      	ldrh	r3, [r4, #12]
 800773a:	431d      	orrs	r5, r3
 800773c:	81a5      	strh	r5, [r4, #12]
 800773e:	e7cf      	b.n	80076e0 <__smakebuf_r+0x18>

08007740 <_fstat_r>:
 8007740:	b538      	push	{r3, r4, r5, lr}
 8007742:	4d07      	ldr	r5, [pc, #28]	@ (8007760 <_fstat_r+0x20>)
 8007744:	2300      	movs	r3, #0
 8007746:	4604      	mov	r4, r0
 8007748:	4608      	mov	r0, r1
 800774a:	4611      	mov	r1, r2
 800774c:	602b      	str	r3, [r5, #0]
 800774e:	f7fb fc91 	bl	8003074 <_fstat>
 8007752:	1c43      	adds	r3, r0, #1
 8007754:	d102      	bne.n	800775c <_fstat_r+0x1c>
 8007756:	682b      	ldr	r3, [r5, #0]
 8007758:	b103      	cbz	r3, 800775c <_fstat_r+0x1c>
 800775a:	6023      	str	r3, [r4, #0]
 800775c:	bd38      	pop	{r3, r4, r5, pc}
 800775e:	bf00      	nop
 8007760:	20025e0c 	.word	0x20025e0c

08007764 <_isatty_r>:
 8007764:	b538      	push	{r3, r4, r5, lr}
 8007766:	4d06      	ldr	r5, [pc, #24]	@ (8007780 <_isatty_r+0x1c>)
 8007768:	2300      	movs	r3, #0
 800776a:	4604      	mov	r4, r0
 800776c:	4608      	mov	r0, r1
 800776e:	602b      	str	r3, [r5, #0]
 8007770:	f7fb fc90 	bl	8003094 <_isatty>
 8007774:	1c43      	adds	r3, r0, #1
 8007776:	d102      	bne.n	800777e <_isatty_r+0x1a>
 8007778:	682b      	ldr	r3, [r5, #0]
 800777a:	b103      	cbz	r3, 800777e <_isatty_r+0x1a>
 800777c:	6023      	str	r3, [r4, #0]
 800777e:	bd38      	pop	{r3, r4, r5, pc}
 8007780:	20025e0c 	.word	0x20025e0c

08007784 <_sbrk_r>:
 8007784:	b538      	push	{r3, r4, r5, lr}
 8007786:	4d06      	ldr	r5, [pc, #24]	@ (80077a0 <_sbrk_r+0x1c>)
 8007788:	2300      	movs	r3, #0
 800778a:	4604      	mov	r4, r0
 800778c:	4608      	mov	r0, r1
 800778e:	602b      	str	r3, [r5, #0]
 8007790:	f7fb fc98 	bl	80030c4 <_sbrk>
 8007794:	1c43      	adds	r3, r0, #1
 8007796:	d102      	bne.n	800779e <_sbrk_r+0x1a>
 8007798:	682b      	ldr	r3, [r5, #0]
 800779a:	b103      	cbz	r3, 800779e <_sbrk_r+0x1a>
 800779c:	6023      	str	r3, [r4, #0]
 800779e:	bd38      	pop	{r3, r4, r5, pc}
 80077a0:	20025e0c 	.word	0x20025e0c

080077a4 <_init>:
 80077a4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80077a6:	bf00      	nop
 80077a8:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80077aa:	bc08      	pop	{r3}
 80077ac:	469e      	mov	lr, r3
 80077ae:	4770      	bx	lr

080077b0 <_fini>:
 80077b0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80077b2:	bf00      	nop
 80077b4:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80077b6:	bc08      	pop	{r3}
 80077b8:	469e      	mov	lr, r3
 80077ba:	4770      	bx	lr
