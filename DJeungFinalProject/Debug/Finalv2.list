
Finalv2.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001ac  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00007324  080001b0  080001b0  000011b0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00001260  080074d4  080074d4  000084d4  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08008734  08008734  0000a080  2**0
                  CONTENTS
  4 .ARM          00000008  08008734  08008734  00009734  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  0800873c  0800873c  0000a080  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  0800873c  0800873c  0000973c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  7 .fini_array   00000004  08008740  08008740  00009740  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  8 .data         00000080  20000000  08008744  0000a000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .ccmram       00000000  10000000  10000000  0000a080  2**0
                  CONTENTS
 10 .bss          00025d90  20000080  20000080  0000a080  2**2
                  ALLOC
 11 ._user_heap_stack 00000600  20025e10  20025e10  0000a080  2**0
                  ALLOC
 12 .ARM.attributes 00000030  00000000  00000000  0000a080  2**0
                  CONTENTS, READONLY
 13 .debug_info   000146a2  00000000  00000000  0000a0b0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_abbrev 000032f8  00000000  00000000  0001e752  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_aranges 00001468  00000000  00000000  00021a50  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_rnglists 00000fbc  00000000  00000000  00022eb8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_macro  00027062  00000000  00000000  00023e74  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_line   00019083  00000000  00000000  0004aed6  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_str    000e2cf6  00000000  00000000  00063f59  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .comment      00000043  00000000  00000000  00146c4f  2**0
                  CONTENTS, READONLY
 21 .debug_frame  00005d0c  00000000  00000000  00146c94  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 22 .debug_line_str 00000063  00000000  00000000  0014c9a0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001b0 <__do_global_dtors_aux>:
 80001b0:	b510      	push	{r4, lr}
 80001b2:	4c05      	ldr	r4, [pc, #20]	@ (80001c8 <__do_global_dtors_aux+0x18>)
 80001b4:	7823      	ldrb	r3, [r4, #0]
 80001b6:	b933      	cbnz	r3, 80001c6 <__do_global_dtors_aux+0x16>
 80001b8:	4b04      	ldr	r3, [pc, #16]	@ (80001cc <__do_global_dtors_aux+0x1c>)
 80001ba:	b113      	cbz	r3, 80001c2 <__do_global_dtors_aux+0x12>
 80001bc:	4804      	ldr	r0, [pc, #16]	@ (80001d0 <__do_global_dtors_aux+0x20>)
 80001be:	f3af 8000 	nop.w
 80001c2:	2301      	movs	r3, #1
 80001c4:	7023      	strb	r3, [r4, #0]
 80001c6:	bd10      	pop	{r4, pc}
 80001c8:	20000080 	.word	0x20000080
 80001cc:	00000000 	.word	0x00000000
 80001d0:	080074bc 	.word	0x080074bc

080001d4 <frame_dummy>:
 80001d4:	b508      	push	{r3, lr}
 80001d6:	4b03      	ldr	r3, [pc, #12]	@ (80001e4 <frame_dummy+0x10>)
 80001d8:	b11b      	cbz	r3, 80001e2 <frame_dummy+0xe>
 80001da:	4903      	ldr	r1, [pc, #12]	@ (80001e8 <frame_dummy+0x14>)
 80001dc:	4803      	ldr	r0, [pc, #12]	@ (80001ec <frame_dummy+0x18>)
 80001de:	f3af 8000 	nop.w
 80001e2:	bd08      	pop	{r3, pc}
 80001e4:	00000000 	.word	0x00000000
 80001e8:	20000084 	.word	0x20000084
 80001ec:	080074bc 	.word	0x080074bc

080001f0 <memchr>:
 80001f0:	f001 01ff 	and.w	r1, r1, #255	@ 0xff
 80001f4:	2a10      	cmp	r2, #16
 80001f6:	db2b      	blt.n	8000250 <memchr+0x60>
 80001f8:	f010 0f07 	tst.w	r0, #7
 80001fc:	d008      	beq.n	8000210 <memchr+0x20>
 80001fe:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000202:	3a01      	subs	r2, #1
 8000204:	428b      	cmp	r3, r1
 8000206:	d02d      	beq.n	8000264 <memchr+0x74>
 8000208:	f010 0f07 	tst.w	r0, #7
 800020c:	b342      	cbz	r2, 8000260 <memchr+0x70>
 800020e:	d1f6      	bne.n	80001fe <memchr+0xe>
 8000210:	b4f0      	push	{r4, r5, r6, r7}
 8000212:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000216:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800021a:	f022 0407 	bic.w	r4, r2, #7
 800021e:	f07f 0700 	mvns.w	r7, #0
 8000222:	2300      	movs	r3, #0
 8000224:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000228:	3c08      	subs	r4, #8
 800022a:	ea85 0501 	eor.w	r5, r5, r1
 800022e:	ea86 0601 	eor.w	r6, r6, r1
 8000232:	fa85 f547 	uadd8	r5, r5, r7
 8000236:	faa3 f587 	sel	r5, r3, r7
 800023a:	fa86 f647 	uadd8	r6, r6, r7
 800023e:	faa5 f687 	sel	r6, r5, r7
 8000242:	b98e      	cbnz	r6, 8000268 <memchr+0x78>
 8000244:	d1ee      	bne.n	8000224 <memchr+0x34>
 8000246:	bcf0      	pop	{r4, r5, r6, r7}
 8000248:	f001 01ff 	and.w	r1, r1, #255	@ 0xff
 800024c:	f002 0207 	and.w	r2, r2, #7
 8000250:	b132      	cbz	r2, 8000260 <memchr+0x70>
 8000252:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000256:	3a01      	subs	r2, #1
 8000258:	ea83 0301 	eor.w	r3, r3, r1
 800025c:	b113      	cbz	r3, 8000264 <memchr+0x74>
 800025e:	d1f8      	bne.n	8000252 <memchr+0x62>
 8000260:	2000      	movs	r0, #0
 8000262:	4770      	bx	lr
 8000264:	3801      	subs	r0, #1
 8000266:	4770      	bx	lr
 8000268:	2d00      	cmp	r5, #0
 800026a:	bf06      	itte	eq
 800026c:	4635      	moveq	r5, r6
 800026e:	3803      	subeq	r0, #3
 8000270:	3807      	subne	r0, #7
 8000272:	f015 0f01 	tst.w	r5, #1
 8000276:	d107      	bne.n	8000288 <memchr+0x98>
 8000278:	3001      	adds	r0, #1
 800027a:	f415 7f80 	tst.w	r5, #256	@ 0x100
 800027e:	bf02      	ittt	eq
 8000280:	3001      	addeq	r0, #1
 8000282:	f415 3fc0 	tsteq.w	r5, #98304	@ 0x18000
 8000286:	3001      	addeq	r0, #1
 8000288:	bcf0      	pop	{r4, r5, r6, r7}
 800028a:	3801      	subs	r0, #1
 800028c:	4770      	bx	lr
 800028e:	bf00      	nop

08000290 <__aeabi_uldivmod>:
 8000290:	b953      	cbnz	r3, 80002a8 <__aeabi_uldivmod+0x18>
 8000292:	b94a      	cbnz	r2, 80002a8 <__aeabi_uldivmod+0x18>
 8000294:	2900      	cmp	r1, #0
 8000296:	bf08      	it	eq
 8000298:	2800      	cmpeq	r0, #0
 800029a:	bf1c      	itt	ne
 800029c:	f04f 31ff 	movne.w	r1, #4294967295
 80002a0:	f04f 30ff 	movne.w	r0, #4294967295
 80002a4:	f000 b96a 	b.w	800057c <__aeabi_idiv0>
 80002a8:	f1ad 0c08 	sub.w	ip, sp, #8
 80002ac:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 80002b0:	f000 f806 	bl	80002c0 <__udivmoddi4>
 80002b4:	f8dd e004 	ldr.w	lr, [sp, #4]
 80002b8:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 80002bc:	b004      	add	sp, #16
 80002be:	4770      	bx	lr

080002c0 <__udivmoddi4>:
 80002c0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80002c4:	9d08      	ldr	r5, [sp, #32]
 80002c6:	460c      	mov	r4, r1
 80002c8:	2b00      	cmp	r3, #0
 80002ca:	d14e      	bne.n	800036a <__udivmoddi4+0xaa>
 80002cc:	4694      	mov	ip, r2
 80002ce:	458c      	cmp	ip, r1
 80002d0:	4686      	mov	lr, r0
 80002d2:	fab2 f282 	clz	r2, r2
 80002d6:	d962      	bls.n	800039e <__udivmoddi4+0xde>
 80002d8:	b14a      	cbz	r2, 80002ee <__udivmoddi4+0x2e>
 80002da:	f1c2 0320 	rsb	r3, r2, #32
 80002de:	4091      	lsls	r1, r2
 80002e0:	fa20 f303 	lsr.w	r3, r0, r3
 80002e4:	fa0c fc02 	lsl.w	ip, ip, r2
 80002e8:	4319      	orrs	r1, r3
 80002ea:	fa00 fe02 	lsl.w	lr, r0, r2
 80002ee:	ea4f 471c 	mov.w	r7, ip, lsr #16
 80002f2:	fa1f f68c 	uxth.w	r6, ip
 80002f6:	fbb1 f4f7 	udiv	r4, r1, r7
 80002fa:	ea4f 431e 	mov.w	r3, lr, lsr #16
 80002fe:	fb07 1114 	mls	r1, r7, r4, r1
 8000302:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000306:	fb04 f106 	mul.w	r1, r4, r6
 800030a:	4299      	cmp	r1, r3
 800030c:	d90a      	bls.n	8000324 <__udivmoddi4+0x64>
 800030e:	eb1c 0303 	adds.w	r3, ip, r3
 8000312:	f104 30ff 	add.w	r0, r4, #4294967295
 8000316:	f080 8112 	bcs.w	800053e <__udivmoddi4+0x27e>
 800031a:	4299      	cmp	r1, r3
 800031c:	f240 810f 	bls.w	800053e <__udivmoddi4+0x27e>
 8000320:	3c02      	subs	r4, #2
 8000322:	4463      	add	r3, ip
 8000324:	1a59      	subs	r1, r3, r1
 8000326:	fa1f f38e 	uxth.w	r3, lr
 800032a:	fbb1 f0f7 	udiv	r0, r1, r7
 800032e:	fb07 1110 	mls	r1, r7, r0, r1
 8000332:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000336:	fb00 f606 	mul.w	r6, r0, r6
 800033a:	429e      	cmp	r6, r3
 800033c:	d90a      	bls.n	8000354 <__udivmoddi4+0x94>
 800033e:	eb1c 0303 	adds.w	r3, ip, r3
 8000342:	f100 31ff 	add.w	r1, r0, #4294967295
 8000346:	f080 80fc 	bcs.w	8000542 <__udivmoddi4+0x282>
 800034a:	429e      	cmp	r6, r3
 800034c:	f240 80f9 	bls.w	8000542 <__udivmoddi4+0x282>
 8000350:	4463      	add	r3, ip
 8000352:	3802      	subs	r0, #2
 8000354:	1b9b      	subs	r3, r3, r6
 8000356:	ea40 4004 	orr.w	r0, r0, r4, lsl #16
 800035a:	2100      	movs	r1, #0
 800035c:	b11d      	cbz	r5, 8000366 <__udivmoddi4+0xa6>
 800035e:	40d3      	lsrs	r3, r2
 8000360:	2200      	movs	r2, #0
 8000362:	e9c5 3200 	strd	r3, r2, [r5]
 8000366:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800036a:	428b      	cmp	r3, r1
 800036c:	d905      	bls.n	800037a <__udivmoddi4+0xba>
 800036e:	b10d      	cbz	r5, 8000374 <__udivmoddi4+0xb4>
 8000370:	e9c5 0100 	strd	r0, r1, [r5]
 8000374:	2100      	movs	r1, #0
 8000376:	4608      	mov	r0, r1
 8000378:	e7f5      	b.n	8000366 <__udivmoddi4+0xa6>
 800037a:	fab3 f183 	clz	r1, r3
 800037e:	2900      	cmp	r1, #0
 8000380:	d146      	bne.n	8000410 <__udivmoddi4+0x150>
 8000382:	42a3      	cmp	r3, r4
 8000384:	d302      	bcc.n	800038c <__udivmoddi4+0xcc>
 8000386:	4290      	cmp	r0, r2
 8000388:	f0c0 80f0 	bcc.w	800056c <__udivmoddi4+0x2ac>
 800038c:	1a86      	subs	r6, r0, r2
 800038e:	eb64 0303 	sbc.w	r3, r4, r3
 8000392:	2001      	movs	r0, #1
 8000394:	2d00      	cmp	r5, #0
 8000396:	d0e6      	beq.n	8000366 <__udivmoddi4+0xa6>
 8000398:	e9c5 6300 	strd	r6, r3, [r5]
 800039c:	e7e3      	b.n	8000366 <__udivmoddi4+0xa6>
 800039e:	2a00      	cmp	r2, #0
 80003a0:	f040 8090 	bne.w	80004c4 <__udivmoddi4+0x204>
 80003a4:	eba1 040c 	sub.w	r4, r1, ip
 80003a8:	ea4f 481c 	mov.w	r8, ip, lsr #16
 80003ac:	fa1f f78c 	uxth.w	r7, ip
 80003b0:	2101      	movs	r1, #1
 80003b2:	fbb4 f6f8 	udiv	r6, r4, r8
 80003b6:	ea4f 431e 	mov.w	r3, lr, lsr #16
 80003ba:	fb08 4416 	mls	r4, r8, r6, r4
 80003be:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 80003c2:	fb07 f006 	mul.w	r0, r7, r6
 80003c6:	4298      	cmp	r0, r3
 80003c8:	d908      	bls.n	80003dc <__udivmoddi4+0x11c>
 80003ca:	eb1c 0303 	adds.w	r3, ip, r3
 80003ce:	f106 34ff 	add.w	r4, r6, #4294967295
 80003d2:	d202      	bcs.n	80003da <__udivmoddi4+0x11a>
 80003d4:	4298      	cmp	r0, r3
 80003d6:	f200 80cd 	bhi.w	8000574 <__udivmoddi4+0x2b4>
 80003da:	4626      	mov	r6, r4
 80003dc:	1a1c      	subs	r4, r3, r0
 80003de:	fa1f f38e 	uxth.w	r3, lr
 80003e2:	fbb4 f0f8 	udiv	r0, r4, r8
 80003e6:	fb08 4410 	mls	r4, r8, r0, r4
 80003ea:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 80003ee:	fb00 f707 	mul.w	r7, r0, r7
 80003f2:	429f      	cmp	r7, r3
 80003f4:	d908      	bls.n	8000408 <__udivmoddi4+0x148>
 80003f6:	eb1c 0303 	adds.w	r3, ip, r3
 80003fa:	f100 34ff 	add.w	r4, r0, #4294967295
 80003fe:	d202      	bcs.n	8000406 <__udivmoddi4+0x146>
 8000400:	429f      	cmp	r7, r3
 8000402:	f200 80b0 	bhi.w	8000566 <__udivmoddi4+0x2a6>
 8000406:	4620      	mov	r0, r4
 8000408:	1bdb      	subs	r3, r3, r7
 800040a:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 800040e:	e7a5      	b.n	800035c <__udivmoddi4+0x9c>
 8000410:	f1c1 0620 	rsb	r6, r1, #32
 8000414:	408b      	lsls	r3, r1
 8000416:	fa22 f706 	lsr.w	r7, r2, r6
 800041a:	431f      	orrs	r7, r3
 800041c:	fa20 fc06 	lsr.w	ip, r0, r6
 8000420:	fa04 f301 	lsl.w	r3, r4, r1
 8000424:	ea43 030c 	orr.w	r3, r3, ip
 8000428:	40f4      	lsrs	r4, r6
 800042a:	fa00 f801 	lsl.w	r8, r0, r1
 800042e:	0c38      	lsrs	r0, r7, #16
 8000430:	ea4f 4913 	mov.w	r9, r3, lsr #16
 8000434:	fbb4 fef0 	udiv	lr, r4, r0
 8000438:	fa1f fc87 	uxth.w	ip, r7
 800043c:	fb00 441e 	mls	r4, r0, lr, r4
 8000440:	ea49 4404 	orr.w	r4, r9, r4, lsl #16
 8000444:	fb0e f90c 	mul.w	r9, lr, ip
 8000448:	45a1      	cmp	r9, r4
 800044a:	fa02 f201 	lsl.w	r2, r2, r1
 800044e:	d90a      	bls.n	8000466 <__udivmoddi4+0x1a6>
 8000450:	193c      	adds	r4, r7, r4
 8000452:	f10e 3aff 	add.w	sl, lr, #4294967295
 8000456:	f080 8084 	bcs.w	8000562 <__udivmoddi4+0x2a2>
 800045a:	45a1      	cmp	r9, r4
 800045c:	f240 8081 	bls.w	8000562 <__udivmoddi4+0x2a2>
 8000460:	f1ae 0e02 	sub.w	lr, lr, #2
 8000464:	443c      	add	r4, r7
 8000466:	eba4 0409 	sub.w	r4, r4, r9
 800046a:	fa1f f983 	uxth.w	r9, r3
 800046e:	fbb4 f3f0 	udiv	r3, r4, r0
 8000472:	fb00 4413 	mls	r4, r0, r3, r4
 8000476:	ea49 4404 	orr.w	r4, r9, r4, lsl #16
 800047a:	fb03 fc0c 	mul.w	ip, r3, ip
 800047e:	45a4      	cmp	ip, r4
 8000480:	d907      	bls.n	8000492 <__udivmoddi4+0x1d2>
 8000482:	193c      	adds	r4, r7, r4
 8000484:	f103 30ff 	add.w	r0, r3, #4294967295
 8000488:	d267      	bcs.n	800055a <__udivmoddi4+0x29a>
 800048a:	45a4      	cmp	ip, r4
 800048c:	d965      	bls.n	800055a <__udivmoddi4+0x29a>
 800048e:	3b02      	subs	r3, #2
 8000490:	443c      	add	r4, r7
 8000492:	ea43 400e 	orr.w	r0, r3, lr, lsl #16
 8000496:	fba0 9302 	umull	r9, r3, r0, r2
 800049a:	eba4 040c 	sub.w	r4, r4, ip
 800049e:	429c      	cmp	r4, r3
 80004a0:	46ce      	mov	lr, r9
 80004a2:	469c      	mov	ip, r3
 80004a4:	d351      	bcc.n	800054a <__udivmoddi4+0x28a>
 80004a6:	d04e      	beq.n	8000546 <__udivmoddi4+0x286>
 80004a8:	b155      	cbz	r5, 80004c0 <__udivmoddi4+0x200>
 80004aa:	ebb8 030e 	subs.w	r3, r8, lr
 80004ae:	eb64 040c 	sbc.w	r4, r4, ip
 80004b2:	fa04 f606 	lsl.w	r6, r4, r6
 80004b6:	40cb      	lsrs	r3, r1
 80004b8:	431e      	orrs	r6, r3
 80004ba:	40cc      	lsrs	r4, r1
 80004bc:	e9c5 6400 	strd	r6, r4, [r5]
 80004c0:	2100      	movs	r1, #0
 80004c2:	e750      	b.n	8000366 <__udivmoddi4+0xa6>
 80004c4:	f1c2 0320 	rsb	r3, r2, #32
 80004c8:	fa20 f103 	lsr.w	r1, r0, r3
 80004cc:	fa0c fc02 	lsl.w	ip, ip, r2
 80004d0:	fa24 f303 	lsr.w	r3, r4, r3
 80004d4:	4094      	lsls	r4, r2
 80004d6:	430c      	orrs	r4, r1
 80004d8:	ea4f 481c 	mov.w	r8, ip, lsr #16
 80004dc:	fa00 fe02 	lsl.w	lr, r0, r2
 80004e0:	fa1f f78c 	uxth.w	r7, ip
 80004e4:	fbb3 f0f8 	udiv	r0, r3, r8
 80004e8:	fb08 3110 	mls	r1, r8, r0, r3
 80004ec:	0c23      	lsrs	r3, r4, #16
 80004ee:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 80004f2:	fb00 f107 	mul.w	r1, r0, r7
 80004f6:	4299      	cmp	r1, r3
 80004f8:	d908      	bls.n	800050c <__udivmoddi4+0x24c>
 80004fa:	eb1c 0303 	adds.w	r3, ip, r3
 80004fe:	f100 36ff 	add.w	r6, r0, #4294967295
 8000502:	d22c      	bcs.n	800055e <__udivmoddi4+0x29e>
 8000504:	4299      	cmp	r1, r3
 8000506:	d92a      	bls.n	800055e <__udivmoddi4+0x29e>
 8000508:	3802      	subs	r0, #2
 800050a:	4463      	add	r3, ip
 800050c:	1a5b      	subs	r3, r3, r1
 800050e:	b2a4      	uxth	r4, r4
 8000510:	fbb3 f1f8 	udiv	r1, r3, r8
 8000514:	fb08 3311 	mls	r3, r8, r1, r3
 8000518:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 800051c:	fb01 f307 	mul.w	r3, r1, r7
 8000520:	42a3      	cmp	r3, r4
 8000522:	d908      	bls.n	8000536 <__udivmoddi4+0x276>
 8000524:	eb1c 0404 	adds.w	r4, ip, r4
 8000528:	f101 36ff 	add.w	r6, r1, #4294967295
 800052c:	d213      	bcs.n	8000556 <__udivmoddi4+0x296>
 800052e:	42a3      	cmp	r3, r4
 8000530:	d911      	bls.n	8000556 <__udivmoddi4+0x296>
 8000532:	3902      	subs	r1, #2
 8000534:	4464      	add	r4, ip
 8000536:	1ae4      	subs	r4, r4, r3
 8000538:	ea41 4100 	orr.w	r1, r1, r0, lsl #16
 800053c:	e739      	b.n	80003b2 <__udivmoddi4+0xf2>
 800053e:	4604      	mov	r4, r0
 8000540:	e6f0      	b.n	8000324 <__udivmoddi4+0x64>
 8000542:	4608      	mov	r0, r1
 8000544:	e706      	b.n	8000354 <__udivmoddi4+0x94>
 8000546:	45c8      	cmp	r8, r9
 8000548:	d2ae      	bcs.n	80004a8 <__udivmoddi4+0x1e8>
 800054a:	ebb9 0e02 	subs.w	lr, r9, r2
 800054e:	eb63 0c07 	sbc.w	ip, r3, r7
 8000552:	3801      	subs	r0, #1
 8000554:	e7a8      	b.n	80004a8 <__udivmoddi4+0x1e8>
 8000556:	4631      	mov	r1, r6
 8000558:	e7ed      	b.n	8000536 <__udivmoddi4+0x276>
 800055a:	4603      	mov	r3, r0
 800055c:	e799      	b.n	8000492 <__udivmoddi4+0x1d2>
 800055e:	4630      	mov	r0, r6
 8000560:	e7d4      	b.n	800050c <__udivmoddi4+0x24c>
 8000562:	46d6      	mov	lr, sl
 8000564:	e77f      	b.n	8000466 <__udivmoddi4+0x1a6>
 8000566:	4463      	add	r3, ip
 8000568:	3802      	subs	r0, #2
 800056a:	e74d      	b.n	8000408 <__udivmoddi4+0x148>
 800056c:	4606      	mov	r6, r0
 800056e:	4623      	mov	r3, r4
 8000570:	4608      	mov	r0, r1
 8000572:	e70f      	b.n	8000394 <__udivmoddi4+0xd4>
 8000574:	3e02      	subs	r6, #2
 8000576:	4463      	add	r3, ip
 8000578:	e730      	b.n	80003dc <__udivmoddi4+0x11c>
 800057a:	bf00      	nop

0800057c <__aeabi_idiv0>:
 800057c:	4770      	bx	lr
 800057e:	bf00      	nop

08000580 <ApplicationInit>:
void LCDTouchScreenInterruptGPIOInit(void);
#endif // TOUCH_INTERRUPT_ENABLED
#endif // COMPILE_TOUCH_FUNCTIONS

void ApplicationInit(void)
{
 8000580:	b580      	push	{r7, lr}
 8000582:	af00      	add	r7, sp, #0
	initialise_monitor_handles(); // Allows printf functionality
 8000584:	f002 fc1e 	bl	8002dc4 <initialise_monitor_handles>
    LTCD__Init();
 8000588:	f000 fd30 	bl	8000fec <LTCD__Init>
    LTCD_Layer_Init(0);
 800058c:	2000      	movs	r0, #0
 800058e:	f000 fcb1 	bl	8000ef4 <LTCD_Layer_Init>
    LCD_Clear(0,LCD_COLOR_WHITE);
 8000592:	f64f 71ff 	movw	r1, #65535	@ 0xffff
 8000596:	2000      	movs	r0, #0
 8000598:	f000 fdf8 	bl	800118c <LCD_Clear>

    #if COMPILE_TOUCH_FUNCTIONS == 1
	InitializeLCDTouch();
 800059c:	f000 ff24 	bl	80013e8 <InitializeLCDTouch>

	// This is the orientation for the board to be direclty up where the buttons are vertically above the screen
	// Top left would be low x value, high y value. Bottom right would be low x value, low y value.
	StaticTouchData.orientation = STMPE811_Orientation_Portrait_2;
 80005a0:	4b03      	ldr	r3, [pc, #12]	@ (80005b0 <ApplicationInit+0x30>)
 80005a2:	2201      	movs	r2, #1
 80005a4:	719a      	strb	r2, [r3, #6]

	#if TOUCH_INTERRUPT_ENABLED == 1
	LCDTouchScreenInterruptGPIOInit();
 80005a6:	f000 fa69 	bl	8000a7c <LCDTouchScreenInterruptGPIOInit>
	#endif // TOUCH_INTERRUPT_ENABLED

	#endif // COMPILE_TOUCH_FUNCTIONS
}
 80005aa:	bf00      	nop
 80005ac:	bd80      	pop	{r7, pc}
 80005ae:	bf00      	nop
 80005b0:	20000120 	.word	0x20000120

080005b4 <check_grid_empty>:
		for (uint8_t col = 0; col<4; col++)
			gameGrid[row][col] = 0;
}

bool check_grid_empty()
{
 80005b4:	b480      	push	{r7}
 80005b6:	b083      	sub	sp, #12
 80005b8:	af00      	add	r7, sp, #0
	for (uint8_t row = 0; row < 4; row++)
 80005ba:	2300      	movs	r3, #0
 80005bc:	71fb      	strb	r3, [r7, #7]
 80005be:	e016      	b.n	80005ee <check_grid_empty+0x3a>
		for (uint8_t col = 0; col<3; col++)
 80005c0:	2300      	movs	r3, #0
 80005c2:	71bb      	strb	r3, [r7, #6]
 80005c4:	e00d      	b.n	80005e2 <check_grid_empty+0x2e>
			if (gameGrid[col][row] != 0)
 80005c6:	79ba      	ldrb	r2, [r7, #6]
 80005c8:	79fb      	ldrb	r3, [r7, #7]
 80005ca:	490f      	ldr	r1, [pc, #60]	@ (8000608 <check_grid_empty+0x54>)
 80005cc:	0092      	lsls	r2, r2, #2
 80005ce:	4413      	add	r3, r2
 80005d0:	f831 3013 	ldrh.w	r3, [r1, r3, lsl #1]
 80005d4:	2b00      	cmp	r3, #0
 80005d6:	d001      	beq.n	80005dc <check_grid_empty+0x28>
				return 0;
 80005d8:	2300      	movs	r3, #0
 80005da:	e00f      	b.n	80005fc <check_grid_empty+0x48>
		for (uint8_t col = 0; col<3; col++)
 80005dc:	79bb      	ldrb	r3, [r7, #6]
 80005de:	3301      	adds	r3, #1
 80005e0:	71bb      	strb	r3, [r7, #6]
 80005e2:	79bb      	ldrb	r3, [r7, #6]
 80005e4:	2b02      	cmp	r3, #2
 80005e6:	d9ee      	bls.n	80005c6 <check_grid_empty+0x12>
	for (uint8_t row = 0; row < 4; row++)
 80005e8:	79fb      	ldrb	r3, [r7, #7]
 80005ea:	3301      	adds	r3, #1
 80005ec:	71fb      	strb	r3, [r7, #7]
 80005ee:	79fb      	ldrb	r3, [r7, #7]
 80005f0:	2b03      	cmp	r3, #3
 80005f2:	d9e5      	bls.n	80005c0 <check_grid_empty+0xc>
	touchNum = 0;
 80005f4:	4b05      	ldr	r3, [pc, #20]	@ (800060c <check_grid_empty+0x58>)
 80005f6:	2200      	movs	r2, #0
 80005f8:	801a      	strh	r2, [r3, #0]
	return 1;
 80005fa:	2301      	movs	r3, #1
}
 80005fc:	4618      	mov	r0, r3
 80005fe:	370c      	adds	r7, #12
 8000600:	46bd      	mov	sp, r7
 8000602:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000606:	4770      	bx	lr
 8000608:	200000a4 	.word	0x200000a4
 800060c:	200000a0 	.word	0x200000a0

08000610 <homescreen>:

void homescreen()
{
 8000610:	b580      	push	{r7, lr}
 8000612:	af00      	add	r7, sp, #0
	LCD_Clear(0,LCD_COLOR_WHITE);
 8000614:	f64f 71ff 	movw	r1, #65535	@ 0xffff
 8000618:	2000      	movs	r0, #0
 800061a:	f000 fdb7 	bl	800118c <LCD_Clear>
	LCD_SetTextColor(LCD_COLOR_BLACK);
 800061e:	2000      	movs	r0, #0
 8000620:	f000 fdd6 	bl	80011d0 <LCD_SetTextColor>
	LCD_SetFont(&Font16x24);
 8000624:	483d      	ldr	r0, [pc, #244]	@ (800071c <homescreen+0x10c>)
 8000626:	f000 fde3 	bl	80011f0 <LCD_SetFont>

	LCD_DrawMonkey(120, 160);
 800062a:	21a0      	movs	r1, #160	@ 0xa0
 800062c:	2078      	movs	r0, #120	@ 0x78
 800062e:	f000 fe5d 	bl	80012ec <LCD_DrawMonkey>

	LCD_DisplayChar(90, 50, 'C');
 8000632:	2243      	movs	r2, #67	@ 0x43
 8000634:	2132      	movs	r1, #50	@ 0x32
 8000636:	205a      	movs	r0, #90	@ 0x5a
 8000638:	f000 feae 	bl	8001398 <LCD_DisplayChar>
	LCD_DisplayChar(105, 50, 'H');
 800063c:	2248      	movs	r2, #72	@ 0x48
 800063e:	2132      	movs	r1, #50	@ 0x32
 8000640:	2069      	movs	r0, #105	@ 0x69
 8000642:	f000 fea9 	bl	8001398 <LCD_DisplayChar>
	LCD_DisplayChar(120, 50, 'I');
 8000646:	2249      	movs	r2, #73	@ 0x49
 8000648:	2132      	movs	r1, #50	@ 0x32
 800064a:	2078      	movs	r0, #120	@ 0x78
 800064c:	f000 fea4 	bl	8001398 <LCD_DisplayChar>
	LCD_DisplayChar(135, 50, 'M');
 8000650:	224d      	movs	r2, #77	@ 0x4d
 8000652:	2132      	movs	r1, #50	@ 0x32
 8000654:	2087      	movs	r0, #135	@ 0x87
 8000656:	f000 fe9f 	bl	8001398 <LCD_DisplayChar>
	LCD_DisplayChar(150, 50, 'P');
 800065a:	2250      	movs	r2, #80	@ 0x50
 800065c:	2132      	movs	r1, #50	@ 0x32
 800065e:	2096      	movs	r0, #150	@ 0x96
 8000660:	f000 fe9a 	bl	8001398 <LCD_DisplayChar>

	LCD_DisplayChar(100, 70, 'T');
 8000664:	2254      	movs	r2, #84	@ 0x54
 8000666:	2146      	movs	r1, #70	@ 0x46
 8000668:	2064      	movs	r0, #100	@ 0x64
 800066a:	f000 fe95 	bl	8001398 <LCD_DisplayChar>
	LCD_DisplayChar(115, 70, 'E');
 800066e:	2245      	movs	r2, #69	@ 0x45
 8000670:	2146      	movs	r1, #70	@ 0x46
 8000672:	2073      	movs	r0, #115	@ 0x73
 8000674:	f000 fe90 	bl	8001398 <LCD_DisplayChar>
	LCD_DisplayChar(130, 70, 'S');
 8000678:	2253      	movs	r2, #83	@ 0x53
 800067a:	2146      	movs	r1, #70	@ 0x46
 800067c:	2082      	movs	r0, #130	@ 0x82
 800067e:	f000 fe8b 	bl	8001398 <LCD_DisplayChar>
	LCD_DisplayChar(145, 70, 'T');
 8000682:	2254      	movs	r2, #84	@ 0x54
 8000684:	2146      	movs	r1, #70	@ 0x46
 8000686:	2091      	movs	r0, #145	@ 0x91
 8000688:	f000 fe86 	bl	8001398 <LCD_DisplayChar>

	LCD_DisplayChar(90, 200, 'P');
 800068c:	2250      	movs	r2, #80	@ 0x50
 800068e:	21c8      	movs	r1, #200	@ 0xc8
 8000690:	205a      	movs	r0, #90	@ 0x5a
 8000692:	f000 fe81 	bl	8001398 <LCD_DisplayChar>
	LCD_DisplayChar(105, 200, 'R');
 8000696:	2252      	movs	r2, #82	@ 0x52
 8000698:	21c8      	movs	r1, #200	@ 0xc8
 800069a:	2069      	movs	r0, #105	@ 0x69
 800069c:	f000 fe7c 	bl	8001398 <LCD_DisplayChar>
	LCD_DisplayChar(120, 200, 'E');
 80006a0:	2245      	movs	r2, #69	@ 0x45
 80006a2:	21c8      	movs	r1, #200	@ 0xc8
 80006a4:	2078      	movs	r0, #120	@ 0x78
 80006a6:	f000 fe77 	bl	8001398 <LCD_DisplayChar>
	LCD_DisplayChar(135, 200, 'S');
 80006aa:	2253      	movs	r2, #83	@ 0x53
 80006ac:	21c8      	movs	r1, #200	@ 0xc8
 80006ae:	2087      	movs	r0, #135	@ 0x87
 80006b0:	f000 fe72 	bl	8001398 <LCD_DisplayChar>
	LCD_DisplayChar(150, 200, 'S');
 80006b4:	2253      	movs	r2, #83	@ 0x53
 80006b6:	21c8      	movs	r1, #200	@ 0xc8
 80006b8:	2096      	movs	r0, #150	@ 0x96
 80006ba:	f000 fe6d 	bl	8001398 <LCD_DisplayChar>

	LCD_DisplayChar(110, 220, 'T');
 80006be:	2254      	movs	r2, #84	@ 0x54
 80006c0:	21dc      	movs	r1, #220	@ 0xdc
 80006c2:	206e      	movs	r0, #110	@ 0x6e
 80006c4:	f000 fe68 	bl	8001398 <LCD_DisplayChar>
	LCD_DisplayChar(125, 220, 'O');
 80006c8:	224f      	movs	r2, #79	@ 0x4f
 80006ca:	21dc      	movs	r1, #220	@ 0xdc
 80006cc:	207d      	movs	r0, #125	@ 0x7d
 80006ce:	f000 fe63 	bl	8001398 <LCD_DisplayChar>

	LCD_DisplayChar(90, 240, 'S');
 80006d2:	2253      	movs	r2, #83	@ 0x53
 80006d4:	21f0      	movs	r1, #240	@ 0xf0
 80006d6:	205a      	movs	r0, #90	@ 0x5a
 80006d8:	f000 fe5e 	bl	8001398 <LCD_DisplayChar>
	LCD_DisplayChar(105, 240, 'T');
 80006dc:	2254      	movs	r2, #84	@ 0x54
 80006de:	21f0      	movs	r1, #240	@ 0xf0
 80006e0:	2069      	movs	r0, #105	@ 0x69
 80006e2:	f000 fe59 	bl	8001398 <LCD_DisplayChar>
	LCD_DisplayChar(120, 240, 'A');
 80006e6:	2241      	movs	r2, #65	@ 0x41
 80006e8:	21f0      	movs	r1, #240	@ 0xf0
 80006ea:	2078      	movs	r0, #120	@ 0x78
 80006ec:	f000 fe54 	bl	8001398 <LCD_DisplayChar>
	LCD_DisplayChar(135, 240, 'R');
 80006f0:	2252      	movs	r2, #82	@ 0x52
 80006f2:	21f0      	movs	r1, #240	@ 0xf0
 80006f4:	2087      	movs	r0, #135	@ 0x87
 80006f6:	f000 fe4f 	bl	8001398 <LCD_DisplayChar>
	LCD_DisplayChar(150, 240, 'T');
 80006fa:	2254      	movs	r2, #84	@ 0x54
 80006fc:	21f0      	movs	r1, #240	@ 0xf0
 80006fe:	2096      	movs	r0, #150	@ 0x96
 8000700:	f000 fe4a 	bl	8001398 <LCD_DisplayChar>

	while (startGame_flag == 0);
 8000704:	bf00      	nop
 8000706:	4b06      	ldr	r3, [pc, #24]	@ (8000720 <homescreen+0x110>)
 8000708:	781b      	ldrb	r3, [r3, #0]
 800070a:	f083 0301 	eor.w	r3, r3, #1
 800070e:	b2db      	uxtb	r3, r3
 8000710:	2b00      	cmp	r3, #0
 8000712:	d1f8      	bne.n	8000706 <homescreen+0xf6>

}
 8000714:	bf00      	nop
 8000716:	bf00      	nop
 8000718:	bd80      	pop	{r7, pc}
 800071a:	bf00      	nop
 800071c:	2000000c 	.word	0x2000000c
 8000720:	2000011c 	.word	0x2000011c

08000724 <endscreen>:

void endscreen()
{
 8000724:	b580      	push	{r7, lr}
 8000726:	af00      	add	r7, sp, #0
	LCD_Clear(0,LCD_COLOR_WHITE);
 8000728:	f64f 71ff 	movw	r1, #65535	@ 0xffff
 800072c:	2000      	movs	r0, #0
 800072e:	f000 fd2d 	bl	800118c <LCD_Clear>
	LCD_DrawMonkey(120, 140);
 8000732:	218c      	movs	r1, #140	@ 0x8c
 8000734:	2078      	movs	r0, #120	@ 0x78
 8000736:	f000 fdd9 	bl	80012ec <LCD_DrawMonkey>

	LCD_DisplayChar(80,80,'U');
 800073a:	2255      	movs	r2, #85	@ 0x55
 800073c:	2150      	movs	r1, #80	@ 0x50
 800073e:	2050      	movs	r0, #80	@ 0x50
 8000740:	f000 fe2a 	bl	8001398 <LCD_DisplayChar>
	LCD_DisplayChar(95,80,'H');
 8000744:	2248      	movs	r2, #72	@ 0x48
 8000746:	2150      	movs	r1, #80	@ 0x50
 8000748:	205f      	movs	r0, #95	@ 0x5f
 800074a:	f000 fe25 	bl	8001398 <LCD_DisplayChar>

	LCD_DisplayChar(125,80,'O');
 800074e:	224f      	movs	r2, #79	@ 0x4f
 8000750:	2150      	movs	r1, #80	@ 0x50
 8000752:	207d      	movs	r0, #125	@ 0x7d
 8000754:	f000 fe20 	bl	8001398 <LCD_DisplayChar>
	LCD_DisplayChar(140,80,'H');
 8000758:	2248      	movs	r2, #72	@ 0x48
 800075a:	2150      	movs	r1, #80	@ 0x50
 800075c:	208c      	movs	r0, #140	@ 0x8c
 800075e:	f000 fe1b 	bl	8001398 <LCD_DisplayChar>

	LCD_DisplayChar(60,200,'Y');
 8000762:	2259      	movs	r2, #89	@ 0x59
 8000764:	21c8      	movs	r1, #200	@ 0xc8
 8000766:	203c      	movs	r0, #60	@ 0x3c
 8000768:	f000 fe16 	bl	8001398 <LCD_DisplayChar>
	LCD_DisplayChar(75,200,'O');
 800076c:	224f      	movs	r2, #79	@ 0x4f
 800076e:	21c8      	movs	r1, #200	@ 0xc8
 8000770:	204b      	movs	r0, #75	@ 0x4b
 8000772:	f000 fe11 	bl	8001398 <LCD_DisplayChar>
	LCD_DisplayChar(90,200,'U');
 8000776:	2255      	movs	r2, #85	@ 0x55
 8000778:	21c8      	movs	r1, #200	@ 0xc8
 800077a:	205a      	movs	r0, #90	@ 0x5a
 800077c:	f000 fe0c 	bl	8001398 <LCD_DisplayChar>

	LCD_DisplayChar(120,200,'L');
 8000780:	224c      	movs	r2, #76	@ 0x4c
 8000782:	21c8      	movs	r1, #200	@ 0xc8
 8000784:	2078      	movs	r0, #120	@ 0x78
 8000786:	f000 fe07 	bl	8001398 <LCD_DisplayChar>
	LCD_DisplayChar(135,200,'O');
 800078a:	224f      	movs	r2, #79	@ 0x4f
 800078c:	21c8      	movs	r1, #200	@ 0xc8
 800078e:	2087      	movs	r0, #135	@ 0x87
 8000790:	f000 fe02 	bl	8001398 <LCD_DisplayChar>
	LCD_DisplayChar(150,200,'S');
 8000794:	2253      	movs	r2, #83	@ 0x53
 8000796:	21c8      	movs	r1, #200	@ 0xc8
 8000798:	2096      	movs	r0, #150	@ 0x96
 800079a:	f000 fdfd 	bl	8001398 <LCD_DisplayChar>
	LCD_DisplayChar(165,200,'T');
 800079e:	2254      	movs	r2, #84	@ 0x54
 80007a0:	21c8      	movs	r1, #200	@ 0xc8
 80007a2:	20a5      	movs	r0, #165	@ 0xa5
 80007a4:	f000 fdf8 	bl	8001398 <LCD_DisplayChar>

}
 80007a8:	bf00      	nop
 80007aa:	bd80      	pop	{r7, pc}

080007ac <random_block>:

void random_block(uint16_t num, RNG_HandleTypeDef hrng)
{
 80007ac:	b084      	sub	sp, #16
 80007ae:	b590      	push	{r4, r7, lr}
 80007b0:	b083      	sub	sp, #12
 80007b2:	af00      	add	r7, sp, #0
 80007b4:	4604      	mov	r4, r0
 80007b6:	f107 001c 	add.w	r0, r7, #28
 80007ba:	e880 000e 	stmia.w	r0, {r1, r2, r3}
 80007be:	4623      	mov	r3, r4
 80007c0:	80fb      	strh	r3, [r7, #6]

	hrng.Instance = RNG;
 80007c2:	4b32      	ldr	r3, [pc, #200]	@ (800088c <random_block+0xe0>)
 80007c4:	61fb      	str	r3, [r7, #28]
	if (HAL_RNG_Init(&hrng) != HAL_OK)
 80007c6:	f107 031c 	add.w	r3, r7, #28
 80007ca:	4618      	mov	r0, r3
 80007cc:	f005 fa5a 	bl	8005c84 <HAL_RNG_Init>
 80007d0:	4603      	mov	r3, r0
 80007d2:	2b00      	cmp	r3, #0
 80007d4:	d001      	beq.n	80007da <random_block+0x2e>
	{
		Error_Handler();
 80007d6:	f001 fccf 	bl	8002178 <Error_Handler>
	}

	num--;
 80007da:	88fb      	ldrh	r3, [r7, #6]
 80007dc:	3b01      	subs	r3, #1
 80007de:	80fb      	strh	r3, [r7, #6]

	do
	{
		randomNumbery[num] = HAL_RNG_GetRandomNumber(&hrng)%4;
 80007e0:	f107 031c 	add.w	r3, r7, #28
 80007e4:	4618      	mov	r0, r3
 80007e6:	f005 facd 	bl	8005d84 <HAL_RNG_GetRandomNumber>
 80007ea:	4602      	mov	r2, r0
 80007ec:	88fb      	ldrh	r3, [r7, #6]
 80007ee:	f002 0203 	and.w	r2, r2, #3
 80007f2:	4927      	ldr	r1, [pc, #156]	@ (8000890 <random_block+0xe4>)
 80007f4:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
		randomNumberx[num] = HAL_RNG_GetRandomNumber(&hrng)%3;
 80007f8:	f107 031c 	add.w	r3, r7, #28
 80007fc:	4618      	mov	r0, r3
 80007fe:	f005 fac1 	bl	8005d84 <HAL_RNG_GetRandomNumber>
 8000802:	4601      	mov	r1, r0
 8000804:	88f8      	ldrh	r0, [r7, #6]
 8000806:	4b23      	ldr	r3, [pc, #140]	@ (8000894 <random_block+0xe8>)
 8000808:	fba3 2301 	umull	r2, r3, r3, r1
 800080c:	085a      	lsrs	r2, r3, #1
 800080e:	4613      	mov	r3, r2
 8000810:	005b      	lsls	r3, r3, #1
 8000812:	4413      	add	r3, r2
 8000814:	1aca      	subs	r2, r1, r3
 8000816:	4b20      	ldr	r3, [pc, #128]	@ (8000898 <random_block+0xec>)
 8000818:	f843 2020 	str.w	r2, [r3, r0, lsl #2]
	} while (gameGrid[randomNumberx[num]][randomNumbery[num]] != 0);
 800081c:	88fb      	ldrh	r3, [r7, #6]
 800081e:	4a1e      	ldr	r2, [pc, #120]	@ (8000898 <random_block+0xec>)
 8000820:	f852 2023 	ldr.w	r2, [r2, r3, lsl #2]
 8000824:	88fb      	ldrh	r3, [r7, #6]
 8000826:	491a      	ldr	r1, [pc, #104]	@ (8000890 <random_block+0xe4>)
 8000828:	f851 3023 	ldr.w	r3, [r1, r3, lsl #2]
 800082c:	491b      	ldr	r1, [pc, #108]	@ (800089c <random_block+0xf0>)
 800082e:	0092      	lsls	r2, r2, #2
 8000830:	4413      	add	r3, r2
 8000832:	f831 3013 	ldrh.w	r3, [r1, r3, lsl #1]
 8000836:	2b00      	cmp	r3, #0
 8000838:	d1d2      	bne.n	80007e0 <random_block+0x34>

	gameGrid[randomNumberx[num]][randomNumbery[num]] = num + 1;
 800083a:	88fb      	ldrh	r3, [r7, #6]
 800083c:	4a16      	ldr	r2, [pc, #88]	@ (8000898 <random_block+0xec>)
 800083e:	f852 2023 	ldr.w	r2, [r2, r3, lsl #2]
 8000842:	88fb      	ldrh	r3, [r7, #6]
 8000844:	4912      	ldr	r1, [pc, #72]	@ (8000890 <random_block+0xe4>)
 8000846:	f851 3023 	ldr.w	r3, [r1, r3, lsl #2]
 800084a:	88f9      	ldrh	r1, [r7, #6]
 800084c:	3101      	adds	r1, #1
 800084e:	b288      	uxth	r0, r1
 8000850:	4912      	ldr	r1, [pc, #72]	@ (800089c <random_block+0xf0>)
 8000852:	0092      	lsls	r2, r2, #2
 8000854:	4413      	add	r3, r2
 8000856:	4602      	mov	r2, r0
 8000858:	f821 2013 	strh.w	r2, [r1, r3, lsl #1]

	generate_block(randomNumberx[num], randomNumbery[num], num + 1);
 800085c:	88fb      	ldrh	r3, [r7, #6]
 800085e:	4a0e      	ldr	r2, [pc, #56]	@ (8000898 <random_block+0xec>)
 8000860:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8000864:	b298      	uxth	r0, r3
 8000866:	88fb      	ldrh	r3, [r7, #6]
 8000868:	4a09      	ldr	r2, [pc, #36]	@ (8000890 <random_block+0xe4>)
 800086a:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800086e:	b299      	uxth	r1, r3
 8000870:	88fb      	ldrh	r3, [r7, #6]
 8000872:	3301      	adds	r3, #1
 8000874:	b29b      	uxth	r3, r3
 8000876:	461a      	mov	r2, r3
 8000878:	f000 f84c 	bl	8000914 <generate_block>



}
 800087c:	bf00      	nop
 800087e:	370c      	adds	r7, #12
 8000880:	46bd      	mov	sp, r7
 8000882:	e8bd 4090 	ldmia.w	sp!, {r4, r7, lr}
 8000886:	b004      	add	sp, #16
 8000888:	4770      	bx	lr
 800088a:	bf00      	nop
 800088c:	50060800 	.word	0x50060800
 8000890:	200000ec 	.word	0x200000ec
 8000894:	aaaaaaab 	.word	0xaaaaaaab
 8000898:	200000bc 	.word	0x200000bc
 800089c:	200000a4 	.word	0x200000a4

080008a0 <hide_numbers>:

void hide_numbers()
{
 80008a0:	b580      	push	{r7, lr}
 80008a2:	b082      	sub	sp, #8
 80008a4:	af00      	add	r7, sp, #0
	for (uint16_t x = 0; x<3; x++)
 80008a6:	2300      	movs	r3, #0
 80008a8:	80fb      	strh	r3, [r7, #6]
 80008aa:	e028      	b.n	80008fe <hide_numbers+0x5e>
		for (uint16_t y = 0; y<4; y++)
 80008ac:	2300      	movs	r3, #0
 80008ae:	80bb      	strh	r3, [r7, #4]
 80008b0:	e01f      	b.n	80008f2 <hide_numbers+0x52>
			if (gameGrid[x][y] != 0)
 80008b2:	88fa      	ldrh	r2, [r7, #6]
 80008b4:	88bb      	ldrh	r3, [r7, #4]
 80008b6:	4916      	ldr	r1, [pc, #88]	@ (8000910 <hide_numbers+0x70>)
 80008b8:	0092      	lsls	r2, r2, #2
 80008ba:	4413      	add	r3, r2
 80008bc:	f831 3013 	ldrh.w	r3, [r1, r3, lsl #1]
 80008c0:	2b00      	cmp	r3, #0
 80008c2:	d013      	beq.n	80008ec <hide_numbers+0x4c>
				LCD_Draw_Square_Fill(((x * 80)+ 2), ((y * 80) + 2), 76, LCD_COLOR_BLUE);
 80008c4:	88fb      	ldrh	r3, [r7, #6]
 80008c6:	461a      	mov	r2, r3
 80008c8:	0092      	lsls	r2, r2, #2
 80008ca:	4413      	add	r3, r2
 80008cc:	011b      	lsls	r3, r3, #4
 80008ce:	b29b      	uxth	r3, r3
 80008d0:	3302      	adds	r3, #2
 80008d2:	b298      	uxth	r0, r3
 80008d4:	88bb      	ldrh	r3, [r7, #4]
 80008d6:	461a      	mov	r2, r3
 80008d8:	0092      	lsls	r2, r2, #2
 80008da:	4413      	add	r3, r2
 80008dc:	011b      	lsls	r3, r3, #4
 80008de:	b29b      	uxth	r3, r3
 80008e0:	3302      	adds	r3, #2
 80008e2:	b299      	uxth	r1, r3
 80008e4:	231f      	movs	r3, #31
 80008e6:	224c      	movs	r2, #76	@ 0x4c
 80008e8:	f000 fb44 	bl	8000f74 <LCD_Draw_Square_Fill>
		for (uint16_t y = 0; y<4; y++)
 80008ec:	88bb      	ldrh	r3, [r7, #4]
 80008ee:	3301      	adds	r3, #1
 80008f0:	80bb      	strh	r3, [r7, #4]
 80008f2:	88bb      	ldrh	r3, [r7, #4]
 80008f4:	2b03      	cmp	r3, #3
 80008f6:	d9dc      	bls.n	80008b2 <hide_numbers+0x12>
	for (uint16_t x = 0; x<3; x++)
 80008f8:	88fb      	ldrh	r3, [r7, #6]
 80008fa:	3301      	adds	r3, #1
 80008fc:	80fb      	strh	r3, [r7, #6]
 80008fe:	88fb      	ldrh	r3, [r7, #6]
 8000900:	2b02      	cmp	r3, #2
 8000902:	d9d3      	bls.n	80008ac <hide_numbers+0xc>
}
 8000904:	bf00      	nop
 8000906:	bf00      	nop
 8000908:	3708      	adds	r7, #8
 800090a:	46bd      	mov	sp, r7
 800090c:	bd80      	pop	{r7, pc}
 800090e:	bf00      	nop
 8000910:	200000a4 	.word	0x200000a4

08000914 <generate_block>:
void generate_block	(uint16_t x, uint16_t y, uint16_t num)
{
 8000914:	b590      	push	{r4, r7, lr}
 8000916:	b083      	sub	sp, #12
 8000918:	af00      	add	r7, sp, #0
 800091a:	4603      	mov	r3, r0
 800091c:	80fb      	strh	r3, [r7, #6]
 800091e:	460b      	mov	r3, r1
 8000920:	80bb      	strh	r3, [r7, #4]
 8000922:	4613      	mov	r3, r2
 8000924:	807b      	strh	r3, [r7, #2]
	LCD_Draw_Square_Fill((x * 80), (y * 80), 80, LCD_COLOR_BLACK);
 8000926:	88fb      	ldrh	r3, [r7, #6]
 8000928:	461a      	mov	r2, r3
 800092a:	0092      	lsls	r2, r2, #2
 800092c:	4413      	add	r3, r2
 800092e:	011b      	lsls	r3, r3, #4
 8000930:	b298      	uxth	r0, r3
 8000932:	88bb      	ldrh	r3, [r7, #4]
 8000934:	461a      	mov	r2, r3
 8000936:	0092      	lsls	r2, r2, #2
 8000938:	4413      	add	r3, r2
 800093a:	011b      	lsls	r3, r3, #4
 800093c:	b299      	uxth	r1, r3
 800093e:	2300      	movs	r3, #0
 8000940:	2250      	movs	r2, #80	@ 0x50
 8000942:	f000 fb17 	bl	8000f74 <LCD_Draw_Square_Fill>
	LCD_Draw_Square_Fill(((x * 80)+ 2), ((y * 80) + 2), 76, LCD_COLOR_BLUE);
 8000946:	88fb      	ldrh	r3, [r7, #6]
 8000948:	461a      	mov	r2, r3
 800094a:	0092      	lsls	r2, r2, #2
 800094c:	4413      	add	r3, r2
 800094e:	011b      	lsls	r3, r3, #4
 8000950:	b29b      	uxth	r3, r3
 8000952:	3302      	adds	r3, #2
 8000954:	b298      	uxth	r0, r3
 8000956:	88bb      	ldrh	r3, [r7, #4]
 8000958:	461a      	mov	r2, r3
 800095a:	0092      	lsls	r2, r2, #2
 800095c:	4413      	add	r3, r2
 800095e:	011b      	lsls	r3, r3, #4
 8000960:	b29b      	uxth	r3, r3
 8000962:	3302      	adds	r3, #2
 8000964:	b299      	uxth	r1, r3
 8000966:	231f      	movs	r3, #31
 8000968:	224c      	movs	r2, #76	@ 0x4c
 800096a:	f000 fb03 	bl	8000f74 <LCD_Draw_Square_Fill>
	LCD_SetTextColor(LCD_COLOR_BLACK);
 800096e:	2000      	movs	r0, #0
 8000970:	f000 fc2e 	bl	80011d0 <LCD_SetTextColor>
	LCD_SetFont(&Font16x24);
 8000974:	482f      	ldr	r0, [pc, #188]	@ (8000a34 <generate_block+0x120>)
 8000976:	f000 fc3b 	bl	80011f0 <LCD_SetFont>
	if (num > 9)
 800097a:	887b      	ldrh	r3, [r7, #2]
 800097c:	2b09      	cmp	r3, #9
 800097e:	d93e      	bls.n	80009fe <generate_block+0xea>
	{

		LCD_DisplayChar((x * 80) + 25, (y * 80) + 30, blockNums[num / 10] );
 8000980:	88fb      	ldrh	r3, [r7, #6]
 8000982:	461a      	mov	r2, r3
 8000984:	0092      	lsls	r2, r2, #2
 8000986:	4413      	add	r3, r2
 8000988:	011b      	lsls	r3, r3, #4
 800098a:	b29b      	uxth	r3, r3
 800098c:	3319      	adds	r3, #25
 800098e:	b298      	uxth	r0, r3
 8000990:	88bb      	ldrh	r3, [r7, #4]
 8000992:	461a      	mov	r2, r3
 8000994:	0092      	lsls	r2, r2, #2
 8000996:	4413      	add	r3, r2
 8000998:	011b      	lsls	r3, r3, #4
 800099a:	b29b      	uxth	r3, r3
 800099c:	331e      	adds	r3, #30
 800099e:	b299      	uxth	r1, r3
 80009a0:	887b      	ldrh	r3, [r7, #2]
 80009a2:	4a25      	ldr	r2, [pc, #148]	@ (8000a38 <generate_block+0x124>)
 80009a4:	fba2 2303 	umull	r2, r3, r2, r3
 80009a8:	08db      	lsrs	r3, r3, #3
 80009aa:	b29b      	uxth	r3, r3
 80009ac:	461a      	mov	r2, r3
 80009ae:	4b23      	ldr	r3, [pc, #140]	@ (8000a3c <generate_block+0x128>)
 80009b0:	5c9b      	ldrb	r3, [r3, r2]
 80009b2:	461a      	mov	r2, r3
 80009b4:	f000 fcf0 	bl	8001398 <LCD_DisplayChar>
		LCD_DisplayChar((x * 80) + 35, (y * 80) + 30, blockNums[num % 10] );
 80009b8:	88fb      	ldrh	r3, [r7, #6]
 80009ba:	461a      	mov	r2, r3
 80009bc:	0092      	lsls	r2, r2, #2
 80009be:	4413      	add	r3, r2
 80009c0:	011b      	lsls	r3, r3, #4
 80009c2:	b29b      	uxth	r3, r3
 80009c4:	3323      	adds	r3, #35	@ 0x23
 80009c6:	b298      	uxth	r0, r3
 80009c8:	88bb      	ldrh	r3, [r7, #4]
 80009ca:	461a      	mov	r2, r3
 80009cc:	0092      	lsls	r2, r2, #2
 80009ce:	4413      	add	r3, r2
 80009d0:	011b      	lsls	r3, r3, #4
 80009d2:	b29b      	uxth	r3, r3
 80009d4:	331e      	adds	r3, #30
 80009d6:	b29c      	uxth	r4, r3
 80009d8:	887a      	ldrh	r2, [r7, #2]
 80009da:	4b17      	ldr	r3, [pc, #92]	@ (8000a38 <generate_block+0x124>)
 80009dc:	fba3 1302 	umull	r1, r3, r3, r2
 80009e0:	08d9      	lsrs	r1, r3, #3
 80009e2:	460b      	mov	r3, r1
 80009e4:	009b      	lsls	r3, r3, #2
 80009e6:	440b      	add	r3, r1
 80009e8:	005b      	lsls	r3, r3, #1
 80009ea:	1ad3      	subs	r3, r2, r3
 80009ec:	b29b      	uxth	r3, r3
 80009ee:	461a      	mov	r2, r3
 80009f0:	4b12      	ldr	r3, [pc, #72]	@ (8000a3c <generate_block+0x128>)
 80009f2:	5c9b      	ldrb	r3, [r3, r2]
 80009f4:	461a      	mov	r2, r3
 80009f6:	4621      	mov	r1, r4
 80009f8:	f000 fcce 	bl	8001398 <LCD_DisplayChar>
	}
	else
	{
		LCD_DisplayChar((x * 80) + 30, (y * 80) + 30, blockNums[num] );
	}
}
 80009fc:	e015      	b.n	8000a2a <generate_block+0x116>
		LCD_DisplayChar((x * 80) + 30, (y * 80) + 30, blockNums[num] );
 80009fe:	88fb      	ldrh	r3, [r7, #6]
 8000a00:	461a      	mov	r2, r3
 8000a02:	0092      	lsls	r2, r2, #2
 8000a04:	4413      	add	r3, r2
 8000a06:	011b      	lsls	r3, r3, #4
 8000a08:	b29b      	uxth	r3, r3
 8000a0a:	331e      	adds	r3, #30
 8000a0c:	b298      	uxth	r0, r3
 8000a0e:	88bb      	ldrh	r3, [r7, #4]
 8000a10:	461a      	mov	r2, r3
 8000a12:	0092      	lsls	r2, r2, #2
 8000a14:	4413      	add	r3, r2
 8000a16:	011b      	lsls	r3, r3, #4
 8000a18:	b29b      	uxth	r3, r3
 8000a1a:	331e      	adds	r3, #30
 8000a1c:	b299      	uxth	r1, r3
 8000a1e:	887b      	ldrh	r3, [r7, #2]
 8000a20:	4a06      	ldr	r2, [pc, #24]	@ (8000a3c <generate_block+0x128>)
 8000a22:	5cd3      	ldrb	r3, [r2, r3]
 8000a24:	461a      	mov	r2, r3
 8000a26:	f000 fcb7 	bl	8001398 <LCD_DisplayChar>
}
 8000a2a:	bf00      	nop
 8000a2c:	370c      	adds	r7, #12
 8000a2e:	46bd      	mov	sp, r7
 8000a30:	bd90      	pop	{r4, r7, pc}
 8000a32:	bf00      	nop
 8000a34:	2000000c 	.word	0x2000000c
 8000a38:	cccccccd 	.word	0xcccccccd
 8000a3c:	20000000 	.word	0x20000000

08000a40 <remove_block>:


void remove_block	(uint16_t x, uint16_t y)
{
 8000a40:	b580      	push	{r7, lr}
 8000a42:	b082      	sub	sp, #8
 8000a44:	af00      	add	r7, sp, #0
 8000a46:	4603      	mov	r3, r0
 8000a48:	460a      	mov	r2, r1
 8000a4a:	80fb      	strh	r3, [r7, #6]
 8000a4c:	4613      	mov	r3, r2
 8000a4e:	80bb      	strh	r3, [r7, #4]
	LCD_Draw_Square_Fill((x * 80), (y * 80), 80, LCD_COLOR_WHITE);
 8000a50:	88fb      	ldrh	r3, [r7, #6]
 8000a52:	461a      	mov	r2, r3
 8000a54:	0092      	lsls	r2, r2, #2
 8000a56:	4413      	add	r3, r2
 8000a58:	011b      	lsls	r3, r3, #4
 8000a5a:	b298      	uxth	r0, r3
 8000a5c:	88bb      	ldrh	r3, [r7, #4]
 8000a5e:	461a      	mov	r2, r3
 8000a60:	0092      	lsls	r2, r2, #2
 8000a62:	4413      	add	r3, r2
 8000a64:	011b      	lsls	r3, r3, #4
 8000a66:	b299      	uxth	r1, r3
 8000a68:	f64f 73ff 	movw	r3, #65535	@ 0xffff
 8000a6c:	2250      	movs	r2, #80	@ 0x50
 8000a6e:	f000 fa81 	bl	8000f74 <LCD_Draw_Square_Fill>
}
 8000a72:	bf00      	nop
 8000a74:	3708      	adds	r7, #8
 8000a76:	46bd      	mov	sp, r7
 8000a78:	bd80      	pop	{r7, pc}
	...

08000a7c <LCDTouchScreenInterruptGPIOInit>:

// TouchScreen Interrupt
#if TOUCH_INTERRUPT_ENABLED == 1

void LCDTouchScreenInterruptGPIOInit(void)
{
 8000a7c:	b580      	push	{r7, lr}
 8000a7e:	b086      	sub	sp, #24
 8000a80:	af00      	add	r7, sp, #0
	GPIO_InitTypeDef LCDConfig = {0};
 8000a82:	1d3b      	adds	r3, r7, #4
 8000a84:	2200      	movs	r2, #0
 8000a86:	601a      	str	r2, [r3, #0]
 8000a88:	605a      	str	r2, [r3, #4]
 8000a8a:	609a      	str	r2, [r3, #8]
 8000a8c:	60da      	str	r2, [r3, #12]
 8000a8e:	611a      	str	r2, [r3, #16]
    LCDConfig.Pin = GPIO_PIN_15;
 8000a90:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 8000a94:	607b      	str	r3, [r7, #4]
    LCDConfig.Mode = GPIO_MODE_IT_RISING_FALLING;
 8000a96:	f44f 1344 	mov.w	r3, #3211264	@ 0x310000
 8000a9a:	60bb      	str	r3, [r7, #8]
    LCDConfig.Pull = GPIO_NOPULL;
 8000a9c:	2300      	movs	r3, #0
 8000a9e:	60fb      	str	r3, [r7, #12]
    LCDConfig.Speed = GPIO_SPEED_FREQ_HIGH;
 8000aa0:	2302      	movs	r3, #2
 8000aa2:	613b      	str	r3, [r7, #16]
    
    // Clock enable
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000aa4:	2300      	movs	r3, #0
 8000aa6:	603b      	str	r3, [r7, #0]
 8000aa8:	4b0d      	ldr	r3, [pc, #52]	@ (8000ae0 <LCDTouchScreenInterruptGPIOInit+0x64>)
 8000aaa:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000aac:	4a0c      	ldr	r2, [pc, #48]	@ (8000ae0 <LCDTouchScreenInterruptGPIOInit+0x64>)
 8000aae:	f043 0301 	orr.w	r3, r3, #1
 8000ab2:	6313      	str	r3, [r2, #48]	@ 0x30
 8000ab4:	4b0a      	ldr	r3, [pc, #40]	@ (8000ae0 <LCDTouchScreenInterruptGPIOInit+0x64>)
 8000ab6:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000ab8:	f003 0301 	and.w	r3, r3, #1
 8000abc:	603b      	str	r3, [r7, #0]
 8000abe:	683b      	ldr	r3, [r7, #0]

    // GPIO Init      
    HAL_GPIO_Init(GPIOA, &LCDConfig);
 8000ac0:	1d3b      	adds	r3, r7, #4
 8000ac2:	4619      	mov	r1, r3
 8000ac4:	4807      	ldr	r0, [pc, #28]	@ (8000ae4 <LCDTouchScreenInterruptGPIOInit+0x68>)
 8000ac6:	f002 fc81 	bl	80033cc <HAL_GPIO_Init>

    // Interrupt Configuration
    HAL_NVIC_EnableIRQ(EXTI15_10_IRQn);
 8000aca:	2028      	movs	r0, #40	@ 0x28
 8000acc:	f002 fc2f 	bl	800332e <HAL_NVIC_EnableIRQ>

	LCDTouchIRQ.Line = EXTI_LINE_15;
 8000ad0:	4b05      	ldr	r3, [pc, #20]	@ (8000ae8 <LCDTouchScreenInterruptGPIOInit+0x6c>)
 8000ad2:	4a06      	ldr	r2, [pc, #24]	@ (8000aec <LCDTouchScreenInterruptGPIOInit+0x70>)
 8000ad4:	601a      	str	r2, [r3, #0]

}
 8000ad6:	bf00      	nop
 8000ad8:	3718      	adds	r7, #24
 8000ada:	46bd      	mov	sp, r7
 8000adc:	bd80      	pop	{r7, pc}
 8000ade:	bf00      	nop
 8000ae0:	40023800 	.word	0x40023800
 8000ae4:	40020000 	.word	0x40020000
 8000ae8:	20000128 	.word	0x20000128
 8000aec:	0600000f 	.word	0x0600000f

08000af0 <makeLevel>:

void makeLevel(uint16_t level, RNG_HandleTypeDef hrng)
{
 8000af0:	b084      	sub	sp, #16
 8000af2:	b590      	push	{r4, r7, lr}
 8000af4:	b087      	sub	sp, #28
 8000af6:	af02      	add	r7, sp, #8
 8000af8:	4604      	mov	r4, r0
 8000afa:	f107 0024 	add.w	r0, r7, #36	@ 0x24
 8000afe:	e880 000e 	stmia.w	r0, {r1, r2, r3}
 8000b02:	4623      	mov	r3, r4
 8000b04:	80fb      	strh	r3, [r7, #6]
	//gameGrid_reset();

	for (int i = level; i>0; i--)
 8000b06:	88fb      	ldrh	r3, [r7, #6]
 8000b08:	60fb      	str	r3, [r7, #12]
 8000b0a:	e00b      	b.n	8000b24 <makeLevel+0x34>
		random_block((i), hrng);
 8000b0c:	68fb      	ldr	r3, [r7, #12]
 8000b0e:	b298      	uxth	r0, r3
 8000b10:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8000b12:	9300      	str	r3, [sp, #0]
 8000b14:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8000b18:	cb0e      	ldmia	r3, {r1, r2, r3}
 8000b1a:	f7ff fe47 	bl	80007ac <random_block>
	for (int i = level; i>0; i--)
 8000b1e:	68fb      	ldr	r3, [r7, #12]
 8000b20:	3b01      	subs	r3, #1
 8000b22:	60fb      	str	r3, [r7, #12]
 8000b24:	68fb      	ldr	r3, [r7, #12]
 8000b26:	2b00      	cmp	r3, #0
 8000b28:	dcf0      	bgt.n	8000b0c <makeLevel+0x1c>

	HAL_Delay(1000);
 8000b2a:	f44f 707a 	mov.w	r0, #1000	@ 0x3e8
 8000b2e:	f002 faa1 	bl	8003074 <HAL_Delay>
	hide_numbers();
 8000b32:	f7ff feb5 	bl	80008a0 <hide_numbers>


	while(check_grid_empty() == 0);
 8000b36:	bf00      	nop
 8000b38:	f7ff fd3c 	bl	80005b4 <check_grid_empty>
 8000b3c:	4603      	mov	r3, r0
 8000b3e:	f083 0301 	eor.w	r3, r3, #1
 8000b42:	b2db      	uxtb	r3, r3
 8000b44:	2b00      	cmp	r3, #0
 8000b46:	d1f7      	bne.n	8000b38 <makeLevel+0x48>
}
 8000b48:	bf00      	nop
 8000b4a:	bf00      	nop
 8000b4c:	3714      	adds	r7, #20
 8000b4e:	46bd      	mov	sp, r7
 8000b50:	e8bd 4090 	ldmia.w	sp!, {r4, r7, lr}
 8000b54:	b004      	add	sp, #16
 8000b56:	4770      	bx	lr

08000b58 <EXTI15_10_IRQHandler>:
#define TOUCH_DETECTED_IRQ_STATUS_BIT   (1 << 0)  // Touchscreen detected bitmask

static uint8_t statusFlag;

void EXTI15_10_IRQHandler()
{
 8000b58:	b580      	push	{r7, lr}
 8000b5a:	b082      	sub	sp, #8
 8000b5c:	af00      	add	r7, sp, #0
	HAL_NVIC_DisableIRQ(EXTI15_10_IRQn); // May consider making this a universial interrupt guard
 8000b5e:	2028      	movs	r0, #40	@ 0x28
 8000b60:	f002 fbf3 	bl	800334a <HAL_NVIC_DisableIRQ>
	bool isTouchDetected = false;
 8000b64:	2300      	movs	r3, #0
 8000b66:	71fb      	strb	r3, [r7, #7]

	static uint32_t count;
	count = 0;
 8000b68:	4b71      	ldr	r3, [pc, #452]	@ (8000d30 <EXTI15_10_IRQHandler+0x1d8>)
 8000b6a:	2200      	movs	r2, #0
 8000b6c:	601a      	str	r2, [r3, #0]
	while(count == 0){
 8000b6e:	e006      	b.n	8000b7e <EXTI15_10_IRQHandler+0x26>
		count = STMPE811_Read(STMPE811_FIFO_SIZE);
 8000b70:	204c      	movs	r0, #76	@ 0x4c
 8000b72:	f001 fe96 	bl	80028a2 <STMPE811_Read>
 8000b76:	4603      	mov	r3, r0
 8000b78:	461a      	mov	r2, r3
 8000b7a:	4b6d      	ldr	r3, [pc, #436]	@ (8000d30 <EXTI15_10_IRQHandler+0x1d8>)
 8000b7c:	601a      	str	r2, [r3, #0]
	while(count == 0){
 8000b7e:	4b6c      	ldr	r3, [pc, #432]	@ (8000d30 <EXTI15_10_IRQHandler+0x1d8>)
 8000b80:	681b      	ldr	r3, [r3, #0]
 8000b82:	2b00      	cmp	r3, #0
 8000b84:	d0f4      	beq.n	8000b70 <EXTI15_10_IRQHandler+0x18>
	}

	// Disable touch interrupt bit on the STMPE811
	uint8_t currentIRQEnables = ReadRegisterFromTouchModule(STMPE811_INT_EN);
 8000b86:	200a      	movs	r0, #10
 8000b88:	f000 fc44 	bl	8001414 <ReadRegisterFromTouchModule>
 8000b8c:	4603      	mov	r3, r0
 8000b8e:	71bb      	strb	r3, [r7, #6]
	WriteDataToTouchModule(STMPE811_INT_EN, 0x00);
 8000b90:	2100      	movs	r1, #0
 8000b92:	200a      	movs	r0, #10
 8000b94:	f000 fc4c 	bl	8001430 <WriteDataToTouchModule>

	// Clear the interrupt bit in the STMPE811
	statusFlag = ReadRegisterFromTouchModule(STMPE811_INT_STA);
 8000b98:	200b      	movs	r0, #11
 8000b9a:	f000 fc3b 	bl	8001414 <ReadRegisterFromTouchModule>
 8000b9e:	4603      	mov	r3, r0
 8000ba0:	461a      	mov	r2, r3
 8000ba2:	4b64      	ldr	r3, [pc, #400]	@ (8000d34 <EXTI15_10_IRQHandler+0x1dc>)
 8000ba4:	701a      	strb	r2, [r3, #0]
	uint8_t clearIRQData = (statusFlag | TOUCH_DETECTED_IRQ_STATUS_BIT); // Write one to clear bit
 8000ba6:	4b63      	ldr	r3, [pc, #396]	@ (8000d34 <EXTI15_10_IRQHandler+0x1dc>)
 8000ba8:	781b      	ldrb	r3, [r3, #0]
 8000baa:	f043 0301 	orr.w	r3, r3, #1
 8000bae:	717b      	strb	r3, [r7, #5]
	WriteDataToTouchModule(STMPE811_INT_STA, clearIRQData);
 8000bb0:	797b      	ldrb	r3, [r7, #5]
 8000bb2:	4619      	mov	r1, r3
 8000bb4:	200b      	movs	r0, #11
 8000bb6:	f000 fc3b 	bl	8001430 <WriteDataToTouchModule>
	
	uint8_t ctrlReg = ReadRegisterFromTouchModule(STMPE811_TSC_CTRL);
 8000bba:	2040      	movs	r0, #64	@ 0x40
 8000bbc:	f000 fc2a 	bl	8001414 <ReadRegisterFromTouchModule>
 8000bc0:	4603      	mov	r3, r0
 8000bc2:	713b      	strb	r3, [r7, #4]
	if (ctrlReg & 0x80)
 8000bc4:	f997 3004 	ldrsb.w	r3, [r7, #4]
 8000bc8:	2b00      	cmp	r3, #0
 8000bca:	da01      	bge.n	8000bd0 <EXTI15_10_IRQHandler+0x78>
	{
		isTouchDetected = true;
 8000bcc:	2301      	movs	r3, #1
 8000bce:	71fb      	strb	r3, [r7, #7]
	}

	// Determine if it is pressed or unpressed
	if(isTouchDetected) // Touch has been detected
 8000bd0:	79fb      	ldrb	r3, [r7, #7]
 8000bd2:	2b00      	cmp	r3, #0
 8000bd4:	d00f      	beq.n	8000bf6 <EXTI15_10_IRQHandler+0x9e>
	{
		printf("\nPressed");
 8000bd6:	4858      	ldr	r0, [pc, #352]	@ (8000d38 <EXTI15_10_IRQHandler+0x1e0>)
 8000bd8:	f005 fe02 	bl	80067e0 <iprintf>
		// May need to do numerous retries? 
		DetermineTouchPosition(&StaticTouchData);
 8000bdc:	4857      	ldr	r0, [pc, #348]	@ (8000d3c <EXTI15_10_IRQHandler+0x1e4>)
 8000bde:	f000 fc0e 	bl	80013fe <DetermineTouchPosition>
		/* Touch valid */
		printf("\nX: %03d\nY: %03d \n", StaticTouchData.x, StaticTouchData.y);
 8000be2:	4b56      	ldr	r3, [pc, #344]	@ (8000d3c <EXTI15_10_IRQHandler+0x1e4>)
 8000be4:	881b      	ldrh	r3, [r3, #0]
 8000be6:	4619      	mov	r1, r3
 8000be8:	4b54      	ldr	r3, [pc, #336]	@ (8000d3c <EXTI15_10_IRQHandler+0x1e4>)
 8000bea:	885b      	ldrh	r3, [r3, #2]
 8000bec:	461a      	mov	r2, r3
 8000bee:	4854      	ldr	r0, [pc, #336]	@ (8000d40 <EXTI15_10_IRQHandler+0x1e8>)
 8000bf0:	f005 fdf6 	bl	80067e0 <iprintf>
 8000bf4:	e07c      	b.n	8000cf0 <EXTI15_10_IRQHandler+0x198>
		//LCD_Clear(0, LCD_COLOR_RED);

	}else{


		if (startGame_flag)
 8000bf6:	4b53      	ldr	r3, [pc, #332]	@ (8000d44 <EXTI15_10_IRQHandler+0x1ec>)
 8000bf8:	781b      	ldrb	r3, [r3, #0]
 8000bfa:	2b00      	cmp	r3, #0
 8000bfc:	d075      	beq.n	8000cea <EXTI15_10_IRQHandler+0x192>
		{
			correctCenterx = randomNumberx[touchNum] * 80 + 40;
 8000bfe:	4b52      	ldr	r3, [pc, #328]	@ (8000d48 <EXTI15_10_IRQHandler+0x1f0>)
 8000c00:	881b      	ldrh	r3, [r3, #0]
 8000c02:	461a      	mov	r2, r3
 8000c04:	4b51      	ldr	r3, [pc, #324]	@ (8000d4c <EXTI15_10_IRQHandler+0x1f4>)
 8000c06:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8000c0a:	b29b      	uxth	r3, r3
 8000c0c:	461a      	mov	r2, r3
 8000c0e:	0092      	lsls	r2, r2, #2
 8000c10:	4413      	add	r3, r2
 8000c12:	011b      	lsls	r3, r3, #4
 8000c14:	b29b      	uxth	r3, r3
 8000c16:	3328      	adds	r3, #40	@ 0x28
 8000c18:	b29a      	uxth	r2, r3
 8000c1a:	4b4d      	ldr	r3, [pc, #308]	@ (8000d50 <EXTI15_10_IRQHandler+0x1f8>)
 8000c1c:	801a      	strh	r2, [r3, #0]
			correctCentery = randomNumbery[touchNum] * 80 + 40;
 8000c1e:	4b4a      	ldr	r3, [pc, #296]	@ (8000d48 <EXTI15_10_IRQHandler+0x1f0>)
 8000c20:	881b      	ldrh	r3, [r3, #0]
 8000c22:	461a      	mov	r2, r3
 8000c24:	4b4b      	ldr	r3, [pc, #300]	@ (8000d54 <EXTI15_10_IRQHandler+0x1fc>)
 8000c26:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8000c2a:	b29b      	uxth	r3, r3
 8000c2c:	461a      	mov	r2, r3
 8000c2e:	0092      	lsls	r2, r2, #2
 8000c30:	4413      	add	r3, r2
 8000c32:	011b      	lsls	r3, r3, #4
 8000c34:	b29b      	uxth	r3, r3
 8000c36:	3328      	adds	r3, #40	@ 0x28
 8000c38:	b29a      	uxth	r2, r3
 8000c3a:	4b47      	ldr	r3, [pc, #284]	@ (8000d58 <EXTI15_10_IRQHandler+0x200>)
 8000c3c:	801a      	strh	r2, [r3, #0]

			DetermineTouchPosition(&StaticTouchData);
 8000c3e:	483f      	ldr	r0, [pc, #252]	@ (8000d3c <EXTI15_10_IRQHandler+0x1e4>)
 8000c40:	f000 fbdd 	bl	80013fe <DetermineTouchPosition>
			if (((StaticTouchData.x - correctCenterx) > -40) && ((StaticTouchData.x - correctCenterx) < 40) && (((320 - StaticTouchData.y) - correctCentery) > -40) && (((320 - StaticTouchData.y) - correctCentery) < 40))
 8000c44:	4b3d      	ldr	r3, [pc, #244]	@ (8000d3c <EXTI15_10_IRQHandler+0x1e4>)
 8000c46:	881b      	ldrh	r3, [r3, #0]
 8000c48:	461a      	mov	r2, r3
 8000c4a:	4b41      	ldr	r3, [pc, #260]	@ (8000d50 <EXTI15_10_IRQHandler+0x1f8>)
 8000c4c:	881b      	ldrh	r3, [r3, #0]
 8000c4e:	1ad3      	subs	r3, r2, r3
 8000c50:	f113 0f27 	cmn.w	r3, #39	@ 0x27
 8000c54:	db45      	blt.n	8000ce2 <EXTI15_10_IRQHandler+0x18a>
 8000c56:	4b39      	ldr	r3, [pc, #228]	@ (8000d3c <EXTI15_10_IRQHandler+0x1e4>)
 8000c58:	881b      	ldrh	r3, [r3, #0]
 8000c5a:	461a      	mov	r2, r3
 8000c5c:	4b3c      	ldr	r3, [pc, #240]	@ (8000d50 <EXTI15_10_IRQHandler+0x1f8>)
 8000c5e:	881b      	ldrh	r3, [r3, #0]
 8000c60:	1ad3      	subs	r3, r2, r3
 8000c62:	2b27      	cmp	r3, #39	@ 0x27
 8000c64:	dc3d      	bgt.n	8000ce2 <EXTI15_10_IRQHandler+0x18a>
 8000c66:	4b35      	ldr	r3, [pc, #212]	@ (8000d3c <EXTI15_10_IRQHandler+0x1e4>)
 8000c68:	885b      	ldrh	r3, [r3, #2]
 8000c6a:	f5c3 73a0 	rsb	r3, r3, #320	@ 0x140
 8000c6e:	4a3a      	ldr	r2, [pc, #232]	@ (8000d58 <EXTI15_10_IRQHandler+0x200>)
 8000c70:	8812      	ldrh	r2, [r2, #0]
 8000c72:	1a9b      	subs	r3, r3, r2
 8000c74:	f113 0f27 	cmn.w	r3, #39	@ 0x27
 8000c78:	db33      	blt.n	8000ce2 <EXTI15_10_IRQHandler+0x18a>
 8000c7a:	4b30      	ldr	r3, [pc, #192]	@ (8000d3c <EXTI15_10_IRQHandler+0x1e4>)
 8000c7c:	885b      	ldrh	r3, [r3, #2]
 8000c7e:	f5c3 73a0 	rsb	r3, r3, #320	@ 0x140
 8000c82:	4a35      	ldr	r2, [pc, #212]	@ (8000d58 <EXTI15_10_IRQHandler+0x200>)
 8000c84:	8812      	ldrh	r2, [r2, #0]
 8000c86:	1a9b      	subs	r3, r3, r2
 8000c88:	2b27      	cmp	r3, #39	@ 0x27
 8000c8a:	dc2a      	bgt.n	8000ce2 <EXTI15_10_IRQHandler+0x18a>
			{
				remove_block(randomNumberx[touchNum], randomNumbery[touchNum]);
 8000c8c:	4b2e      	ldr	r3, [pc, #184]	@ (8000d48 <EXTI15_10_IRQHandler+0x1f0>)
 8000c8e:	881b      	ldrh	r3, [r3, #0]
 8000c90:	461a      	mov	r2, r3
 8000c92:	4b2e      	ldr	r3, [pc, #184]	@ (8000d4c <EXTI15_10_IRQHandler+0x1f4>)
 8000c94:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8000c98:	b29b      	uxth	r3, r3
 8000c9a:	4a2b      	ldr	r2, [pc, #172]	@ (8000d48 <EXTI15_10_IRQHandler+0x1f0>)
 8000c9c:	8812      	ldrh	r2, [r2, #0]
 8000c9e:	4611      	mov	r1, r2
 8000ca0:	4a2c      	ldr	r2, [pc, #176]	@ (8000d54 <EXTI15_10_IRQHandler+0x1fc>)
 8000ca2:	f852 2021 	ldr.w	r2, [r2, r1, lsl #2]
 8000ca6:	b292      	uxth	r2, r2
 8000ca8:	4611      	mov	r1, r2
 8000caa:	4618      	mov	r0, r3
 8000cac:	f7ff fec8 	bl	8000a40 <remove_block>
				gameGrid[randomNumberx[touchNum]][randomNumbery[touchNum]] = 0;
 8000cb0:	4b25      	ldr	r3, [pc, #148]	@ (8000d48 <EXTI15_10_IRQHandler+0x1f0>)
 8000cb2:	881b      	ldrh	r3, [r3, #0]
 8000cb4:	461a      	mov	r2, r3
 8000cb6:	4b25      	ldr	r3, [pc, #148]	@ (8000d4c <EXTI15_10_IRQHandler+0x1f4>)
 8000cb8:	f853 2022 	ldr.w	r2, [r3, r2, lsl #2]
 8000cbc:	4b22      	ldr	r3, [pc, #136]	@ (8000d48 <EXTI15_10_IRQHandler+0x1f0>)
 8000cbe:	881b      	ldrh	r3, [r3, #0]
 8000cc0:	4619      	mov	r1, r3
 8000cc2:	4b24      	ldr	r3, [pc, #144]	@ (8000d54 <EXTI15_10_IRQHandler+0x1fc>)
 8000cc4:	f853 3021 	ldr.w	r3, [r3, r1, lsl #2]
 8000cc8:	4924      	ldr	r1, [pc, #144]	@ (8000d5c <EXTI15_10_IRQHandler+0x204>)
 8000cca:	0092      	lsls	r2, r2, #2
 8000ccc:	4413      	add	r3, r2
 8000cce:	2200      	movs	r2, #0
 8000cd0:	f821 2013 	strh.w	r2, [r1, r3, lsl #1]
				touchNum++;
 8000cd4:	4b1c      	ldr	r3, [pc, #112]	@ (8000d48 <EXTI15_10_IRQHandler+0x1f0>)
 8000cd6:	881b      	ldrh	r3, [r3, #0]
 8000cd8:	3301      	adds	r3, #1
 8000cda:	b29a      	uxth	r2, r3
 8000cdc:	4b1a      	ldr	r3, [pc, #104]	@ (8000d48 <EXTI15_10_IRQHandler+0x1f0>)
 8000cde:	801a      	strh	r2, [r3, #0]
 8000ce0:	e006      	b.n	8000cf0 <EXTI15_10_IRQHandler+0x198>
				// wait a little bit for debounce


			}else
			{
				endscreen();
 8000ce2:	f7ff fd1f 	bl	8000724 <endscreen>
				while (1);
 8000ce6:	bf00      	nop
 8000ce8:	e7fd      	b.n	8000ce6 <EXTI15_10_IRQHandler+0x18e>
			}
		}else
		{
			startGame_flag = 1;
 8000cea:	4b16      	ldr	r3, [pc, #88]	@ (8000d44 <EXTI15_10_IRQHandler+0x1ec>)
 8000cec:	2201      	movs	r2, #1
 8000cee:	701a      	strb	r2, [r3, #0]
			//remove_block(1, 1);
		//LCD_Clear(0, LCD_COLOR_GREEN);
	}


	STMPE811_Write(STMPE811_FIFO_STA, 0x01);
 8000cf0:	2101      	movs	r1, #1
 8000cf2:	204b      	movs	r0, #75	@ 0x4b
 8000cf4:	f001 fde6 	bl	80028c4 <STMPE811_Write>
	STMPE811_Write(STMPE811_FIFO_STA, 0x00);
 8000cf8:	2100      	movs	r1, #0
 8000cfa:	204b      	movs	r0, #75	@ 0x4b
 8000cfc:	f001 fde2 	bl	80028c4 <STMPE811_Write>

	// Re-enable IRQs
    WriteDataToTouchModule(STMPE811_INT_EN, currentIRQEnables);
 8000d00:	79bb      	ldrb	r3, [r7, #6]
 8000d02:	4619      	mov	r1, r3
 8000d04:	200a      	movs	r0, #10
 8000d06:	f000 fb93 	bl	8001430 <WriteDataToTouchModule>
	HAL_EXTI_ClearPending(&LCDTouchIRQ, EXTI_TRIGGER_RISING_FALLING);
 8000d0a:	2103      	movs	r1, #3
 8000d0c:	4814      	ldr	r0, [pc, #80]	@ (8000d60 <EXTI15_10_IRQHandler+0x208>)
 8000d0e:	f002 fb45 	bl	800339c <HAL_EXTI_ClearPending>

	HAL_NVIC_ClearPendingIRQ(EXTI15_10_IRQn);
 8000d12:	2028      	movs	r0, #40	@ 0x28
 8000d14:	f002 fb33 	bl	800337e <HAL_NVIC_ClearPendingIRQ>
	HAL_NVIC_EnableIRQ(EXTI15_10_IRQn);
 8000d18:	2028      	movs	r0, #40	@ 0x28
 8000d1a:	f002 fb08 	bl	800332e <HAL_NVIC_EnableIRQ>

	//Potential ERRATA? Clearing IRQ bit again due to an IRQ being triggered DURING the handling of this IRQ..
	WriteDataToTouchModule(STMPE811_INT_STA, clearIRQData);
 8000d1e:	797b      	ldrb	r3, [r7, #5]
 8000d20:	4619      	mov	r1, r3
 8000d22:	200b      	movs	r0, #11
 8000d24:	f000 fb84 	bl	8001430 <WriteDataToTouchModule>

}
 8000d28:	bf00      	nop
 8000d2a:	3708      	adds	r7, #8
 8000d2c:	46bd      	mov	sp, r7
 8000d2e:	bd80      	pop	{r7, pc}
 8000d30:	20000134 	.word	0x20000134
 8000d34:	20000130 	.word	0x20000130
 8000d38:	080074f8 	.word	0x080074f8
 8000d3c:	20000120 	.word	0x20000120
 8000d40:	08007504 	.word	0x08007504
 8000d44:	2000011c 	.word	0x2000011c
 8000d48:	200000a0 	.word	0x200000a0
 8000d4c:	200000bc 	.word	0x200000bc
 8000d50:	2000009c 	.word	0x2000009c
 8000d54:	200000ec 	.word	0x200000ec
 8000d58:	2000009e 	.word	0x2000009e
 8000d5c:	200000a4 	.word	0x200000a4
 8000d60:	20000128 	.word	0x20000128

08000d64 <LCD_GPIO_Init>:
//Someone from STM said it was "often accessed" a 1-dim array, and not a 2d array. However you still access it like a 2dim array,  using fb[y*W+x] instead of fb[y][x].
uint16_t frameBuffer[LCD_PIXEL_WIDTH*LCD_PIXEL_HEIGHT] = {0};			//16bpp pixel format.


void LCD_GPIO_Init(void)
{
 8000d64:	b580      	push	{r7, lr}
 8000d66:	b08c      	sub	sp, #48	@ 0x30
 8000d68:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStructure;

  /* Enable the LTDC clock */
  __HAL_RCC_LTDC_CLK_ENABLE();
 8000d6a:	2300      	movs	r3, #0
 8000d6c:	61bb      	str	r3, [r7, #24]
 8000d6e:	4b5a      	ldr	r3, [pc, #360]	@ (8000ed8 <LCD_GPIO_Init+0x174>)
 8000d70:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8000d72:	4a59      	ldr	r2, [pc, #356]	@ (8000ed8 <LCD_GPIO_Init+0x174>)
 8000d74:	f043 6380 	orr.w	r3, r3, #67108864	@ 0x4000000
 8000d78:	6453      	str	r3, [r2, #68]	@ 0x44
 8000d7a:	4b57      	ldr	r3, [pc, #348]	@ (8000ed8 <LCD_GPIO_Init+0x174>)
 8000d7c:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8000d7e:	f003 6380 	and.w	r3, r3, #67108864	@ 0x4000000
 8000d82:	61bb      	str	r3, [r7, #24]
 8000d84:	69bb      	ldr	r3, [r7, #24]

  /* Enable GPIO clock */
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8000d86:	2300      	movs	r3, #0
 8000d88:	617b      	str	r3, [r7, #20]
 8000d8a:	4b53      	ldr	r3, [pc, #332]	@ (8000ed8 <LCD_GPIO_Init+0x174>)
 8000d8c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000d8e:	4a52      	ldr	r2, [pc, #328]	@ (8000ed8 <LCD_GPIO_Init+0x174>)
 8000d90:	f043 0301 	orr.w	r3, r3, #1
 8000d94:	6313      	str	r3, [r2, #48]	@ 0x30
 8000d96:	4b50      	ldr	r3, [pc, #320]	@ (8000ed8 <LCD_GPIO_Init+0x174>)
 8000d98:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000d9a:	f003 0301 	and.w	r3, r3, #1
 8000d9e:	617b      	str	r3, [r7, #20]
 8000da0:	697b      	ldr	r3, [r7, #20]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8000da2:	2300      	movs	r3, #0
 8000da4:	613b      	str	r3, [r7, #16]
 8000da6:	4b4c      	ldr	r3, [pc, #304]	@ (8000ed8 <LCD_GPIO_Init+0x174>)
 8000da8:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000daa:	4a4b      	ldr	r2, [pc, #300]	@ (8000ed8 <LCD_GPIO_Init+0x174>)
 8000dac:	f043 0302 	orr.w	r3, r3, #2
 8000db0:	6313      	str	r3, [r2, #48]	@ 0x30
 8000db2:	4b49      	ldr	r3, [pc, #292]	@ (8000ed8 <LCD_GPIO_Init+0x174>)
 8000db4:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000db6:	f003 0302 	and.w	r3, r3, #2
 8000dba:	613b      	str	r3, [r7, #16]
 8000dbc:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8000dbe:	2300      	movs	r3, #0
 8000dc0:	60fb      	str	r3, [r7, #12]
 8000dc2:	4b45      	ldr	r3, [pc, #276]	@ (8000ed8 <LCD_GPIO_Init+0x174>)
 8000dc4:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000dc6:	4a44      	ldr	r2, [pc, #272]	@ (8000ed8 <LCD_GPIO_Init+0x174>)
 8000dc8:	f043 0304 	orr.w	r3, r3, #4
 8000dcc:	6313      	str	r3, [r2, #48]	@ 0x30
 8000dce:	4b42      	ldr	r3, [pc, #264]	@ (8000ed8 <LCD_GPIO_Init+0x174>)
 8000dd0:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000dd2:	f003 0304 	and.w	r3, r3, #4
 8000dd6:	60fb      	str	r3, [r7, #12]
 8000dd8:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 8000dda:	2300      	movs	r3, #0
 8000ddc:	60bb      	str	r3, [r7, #8]
 8000dde:	4b3e      	ldr	r3, [pc, #248]	@ (8000ed8 <LCD_GPIO_Init+0x174>)
 8000de0:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000de2:	4a3d      	ldr	r2, [pc, #244]	@ (8000ed8 <LCD_GPIO_Init+0x174>)
 8000de4:	f043 0308 	orr.w	r3, r3, #8
 8000de8:	6313      	str	r3, [r2, #48]	@ 0x30
 8000dea:	4b3b      	ldr	r3, [pc, #236]	@ (8000ed8 <LCD_GPIO_Init+0x174>)
 8000dec:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000dee:	f003 0308 	and.w	r3, r3, #8
 8000df2:	60bb      	str	r3, [r7, #8]
 8000df4:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOF_CLK_ENABLE();
 8000df6:	2300      	movs	r3, #0
 8000df8:	607b      	str	r3, [r7, #4]
 8000dfa:	4b37      	ldr	r3, [pc, #220]	@ (8000ed8 <LCD_GPIO_Init+0x174>)
 8000dfc:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000dfe:	4a36      	ldr	r2, [pc, #216]	@ (8000ed8 <LCD_GPIO_Init+0x174>)
 8000e00:	f043 0320 	orr.w	r3, r3, #32
 8000e04:	6313      	str	r3, [r2, #48]	@ 0x30
 8000e06:	4b34      	ldr	r3, [pc, #208]	@ (8000ed8 <LCD_GPIO_Init+0x174>)
 8000e08:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000e0a:	f003 0320 	and.w	r3, r3, #32
 8000e0e:	607b      	str	r3, [r7, #4]
 8000e10:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOG_CLK_ENABLE();
 8000e12:	2300      	movs	r3, #0
 8000e14:	603b      	str	r3, [r7, #0]
 8000e16:	4b30      	ldr	r3, [pc, #192]	@ (8000ed8 <LCD_GPIO_Init+0x174>)
 8000e18:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000e1a:	4a2f      	ldr	r2, [pc, #188]	@ (8000ed8 <LCD_GPIO_Init+0x174>)
 8000e1c:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8000e20:	6313      	str	r3, [r2, #48]	@ 0x30
 8000e22:	4b2d      	ldr	r3, [pc, #180]	@ (8000ed8 <LCD_GPIO_Init+0x174>)
 8000e24:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000e26:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8000e2a:	603b      	str	r3, [r7, #0]
 8000e2c:	683b      	ldr	r3, [r7, #0]
   LCD_TFT CLK   <-> PG.07
   LCD_TFT DE   <->  PF.10
  */

  /* GPIOA configuration */
  GPIO_InitStructure.Pin = GPIO_PIN_3 | GPIO_PIN_4 | GPIO_PIN_6 |
 8000e2e:	f641 0358 	movw	r3, #6232	@ 0x1858
 8000e32:	61fb      	str	r3, [r7, #28]
                           GPIO_PIN_11 | GPIO_PIN_12;
  GPIO_InitStructure.Mode = GPIO_MODE_AF_PP;
 8000e34:	2302      	movs	r3, #2
 8000e36:	623b      	str	r3, [r7, #32]
  GPIO_InitStructure.Pull = GPIO_NOPULL;
 8000e38:	2300      	movs	r3, #0
 8000e3a:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStructure.Speed = GPIO_SPEED_FAST;
 8000e3c:	2302      	movs	r3, #2
 8000e3e:	62bb      	str	r3, [r7, #40]	@ 0x28
  GPIO_InitStructure.Alternate= GPIO_AF14_LTDC;
 8000e40:	230e      	movs	r3, #14
 8000e42:	62fb      	str	r3, [r7, #44]	@ 0x2c
  HAL_GPIO_Init(GPIOA, &GPIO_InitStructure);
 8000e44:	f107 031c 	add.w	r3, r7, #28
 8000e48:	4619      	mov	r1, r3
 8000e4a:	4824      	ldr	r0, [pc, #144]	@ (8000edc <LCD_GPIO_Init+0x178>)
 8000e4c:	f002 fabe 	bl	80033cc <HAL_GPIO_Init>

 /* GPIOB configuration */
  GPIO_InitStructure.Pin = GPIO_PIN_8 | \
 8000e50:	f44f 6370 	mov.w	r3, #3840	@ 0xf00
 8000e54:	61fb      	str	r3, [r7, #28]
                           GPIO_PIN_9 | GPIO_PIN_10 | GPIO_PIN_11;
  HAL_GPIO_Init(GPIOB, &GPIO_InitStructure);
 8000e56:	f107 031c 	add.w	r3, r7, #28
 8000e5a:	4619      	mov	r1, r3
 8000e5c:	4820      	ldr	r0, [pc, #128]	@ (8000ee0 <LCD_GPIO_Init+0x17c>)
 8000e5e:	f002 fab5 	bl	80033cc <HAL_GPIO_Init>

 /* GPIOC configuration */
  GPIO_InitStructure.Pin = GPIO_PIN_6 | GPIO_PIN_7 | GPIO_PIN_10;
 8000e62:	f44f 6398 	mov.w	r3, #1216	@ 0x4c0
 8000e66:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOC, &GPIO_InitStructure);
 8000e68:	f107 031c 	add.w	r3, r7, #28
 8000e6c:	4619      	mov	r1, r3
 8000e6e:	481d      	ldr	r0, [pc, #116]	@ (8000ee4 <LCD_GPIO_Init+0x180>)
 8000e70:	f002 faac 	bl	80033cc <HAL_GPIO_Init>

 /* GPIOD configuration */
  GPIO_InitStructure.Pin = GPIO_PIN_3 | GPIO_PIN_6;
 8000e74:	2348      	movs	r3, #72	@ 0x48
 8000e76:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOD, &GPIO_InitStructure);
 8000e78:	f107 031c 	add.w	r3, r7, #28
 8000e7c:	4619      	mov	r1, r3
 8000e7e:	481a      	ldr	r0, [pc, #104]	@ (8000ee8 <LCD_GPIO_Init+0x184>)
 8000e80:	f002 faa4 	bl	80033cc <HAL_GPIO_Init>

 /* GPIOF configuration */
  GPIO_InitStructure.Pin = GPIO_PIN_10;
 8000e84:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 8000e88:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOF, &GPIO_InitStructure);
 8000e8a:	f107 031c 	add.w	r3, r7, #28
 8000e8e:	4619      	mov	r1, r3
 8000e90:	4816      	ldr	r0, [pc, #88]	@ (8000eec <LCD_GPIO_Init+0x188>)
 8000e92:	f002 fa9b 	bl	80033cc <HAL_GPIO_Init>

 /* GPIOG configuration */
  GPIO_InitStructure.Pin = GPIO_PIN_6 | GPIO_PIN_7 | \
 8000e96:	f44f 630c 	mov.w	r3, #2240	@ 0x8c0
 8000e9a:	61fb      	str	r3, [r7, #28]
                           GPIO_PIN_11;
  HAL_GPIO_Init(GPIOG, &GPIO_InitStructure);
 8000e9c:	f107 031c 	add.w	r3, r7, #28
 8000ea0:	4619      	mov	r1, r3
 8000ea2:	4813      	ldr	r0, [pc, #76]	@ (8000ef0 <LCD_GPIO_Init+0x18c>)
 8000ea4:	f002 fa92 	bl	80033cc <HAL_GPIO_Init>

  /* GPIOB configuration */
  GPIO_InitStructure.Pin = GPIO_PIN_0 | GPIO_PIN_1;
 8000ea8:	2303      	movs	r3, #3
 8000eaa:	61fb      	str	r3, [r7, #28]
  GPIO_InitStructure.Alternate= GPIO_AF9_LTDC;
 8000eac:	2309      	movs	r3, #9
 8000eae:	62fb      	str	r3, [r7, #44]	@ 0x2c
  HAL_GPIO_Init(GPIOB, &GPIO_InitStructure);
 8000eb0:	f107 031c 	add.w	r3, r7, #28
 8000eb4:	4619      	mov	r1, r3
 8000eb6:	480a      	ldr	r0, [pc, #40]	@ (8000ee0 <LCD_GPIO_Init+0x17c>)
 8000eb8:	f002 fa88 	bl	80033cc <HAL_GPIO_Init>

  /* GPIOG configuration */
  GPIO_InitStructure.Pin = GPIO_PIN_10 | GPIO_PIN_12;
 8000ebc:	f44f 53a0 	mov.w	r3, #5120	@ 0x1400
 8000ec0:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOG, &GPIO_InitStructure);
 8000ec2:	f107 031c 	add.w	r3, r7, #28
 8000ec6:	4619      	mov	r1, r3
 8000ec8:	4809      	ldr	r0, [pc, #36]	@ (8000ef0 <LCD_GPIO_Init+0x18c>)
 8000eca:	f002 fa7f 	bl	80033cc <HAL_GPIO_Init>
}
 8000ece:	bf00      	nop
 8000ed0:	3730      	adds	r7, #48	@ 0x30
 8000ed2:	46bd      	mov	sp, r7
 8000ed4:	bd80      	pop	{r7, pc}
 8000ed6:	bf00      	nop
 8000ed8:	40023800 	.word	0x40023800
 8000edc:	40020000 	.word	0x40020000
 8000ee0:	40020400 	.word	0x40020400
 8000ee4:	40020800 	.word	0x40020800
 8000ee8:	40020c00 	.word	0x40020c00
 8000eec:	40021400 	.word	0x40021400
 8000ef0:	40021800 	.word	0x40021800

08000ef4 <LTCD_Layer_Init>:

void LTCD_Layer_Init(uint8_t LayerIndex)
{
 8000ef4:	b580      	push	{r7, lr}
 8000ef6:	b090      	sub	sp, #64	@ 0x40
 8000ef8:	af00      	add	r7, sp, #0
 8000efa:	4603      	mov	r3, r0
 8000efc:	71fb      	strb	r3, [r7, #7]
	LTDC_LayerCfgTypeDef  pLayerCfg;

	pLayerCfg.WindowX0 = 0;	//Configures the Window HORZ START Position.
 8000efe:	2300      	movs	r3, #0
 8000f00:	60fb      	str	r3, [r7, #12]
	pLayerCfg.WindowX1 = LCD_PIXEL_WIDTH;	//Configures the Window HORZ Stop Position.
 8000f02:	23f0      	movs	r3, #240	@ 0xf0
 8000f04:	613b      	str	r3, [r7, #16]
	pLayerCfg.WindowY0 = 0;	//Configures the Window vertical START Position.
 8000f06:	2300      	movs	r3, #0
 8000f08:	617b      	str	r3, [r7, #20]
	pLayerCfg.WindowY1 = LCD_PIXEL_HEIGHT;	//Configures the Window vertical Stop Position.
 8000f0a:	f44f 73a0 	mov.w	r3, #320	@ 0x140
 8000f0e:	61bb      	str	r3, [r7, #24]
	pLayerCfg.PixelFormat = LCD_PIXEL_FORMAT_1;  //INCORRECT PIXEL FORMAT WILL GIVE WEIRD RESULTS!! IT MAY STILL WORK FOR 1/2 THE DISPLAY!!! //This is our buffers pixel format. 2 bytes for each pixel
 8000f10:	2302      	movs	r3, #2
 8000f12:	61fb      	str	r3, [r7, #28]
	pLayerCfg.Alpha = 255;
 8000f14:	23ff      	movs	r3, #255	@ 0xff
 8000f16:	623b      	str	r3, [r7, #32]
	pLayerCfg.Alpha0 = 0;
 8000f18:	2300      	movs	r3, #0
 8000f1a:	627b      	str	r3, [r7, #36]	@ 0x24
	pLayerCfg.BlendingFactor1 = LTDC_BLENDING_FACTOR1_CA;
 8000f1c:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 8000f20:	62bb      	str	r3, [r7, #40]	@ 0x28
	pLayerCfg.BlendingFactor2 = LTDC_BLENDING_FACTOR2_CA;
 8000f22:	2305      	movs	r3, #5
 8000f24:	62fb      	str	r3, [r7, #44]	@ 0x2c
	if (LayerIndex == 0){
 8000f26:	79fb      	ldrb	r3, [r7, #7]
 8000f28:	2b00      	cmp	r3, #0
 8000f2a:	d101      	bne.n	8000f30 <LTCD_Layer_Init+0x3c>
		pLayerCfg.FBStartAdress = (uintptr_t)frameBuffer;
 8000f2c:	4b0f      	ldr	r3, [pc, #60]	@ (8000f6c <LTCD_Layer_Init+0x78>)
 8000f2e:	633b      	str	r3, [r7, #48]	@ 0x30
	}
	pLayerCfg.ImageWidth = LCD_PIXEL_WIDTH;
 8000f30:	23f0      	movs	r3, #240	@ 0xf0
 8000f32:	637b      	str	r3, [r7, #52]	@ 0x34
	pLayerCfg.ImageHeight = LCD_PIXEL_HEIGHT;
 8000f34:	f44f 73a0 	mov.w	r3, #320	@ 0x140
 8000f38:	63bb      	str	r3, [r7, #56]	@ 0x38
	pLayerCfg.Backcolor.Blue = 0;
 8000f3a:	2300      	movs	r3, #0
 8000f3c:	f887 303c 	strb.w	r3, [r7, #60]	@ 0x3c
	pLayerCfg.Backcolor.Green = 0;
 8000f40:	2300      	movs	r3, #0
 8000f42:	f887 303d 	strb.w	r3, [r7, #61]	@ 0x3d
	pLayerCfg.Backcolor.Red = 0;
 8000f46:	2300      	movs	r3, #0
 8000f48:	f887 303e 	strb.w	r3, [r7, #62]	@ 0x3e
	if (HAL_LTDC_ConfigLayer(&hltdc, &pLayerCfg, LayerIndex) != HAL_OK)
 8000f4c:	79fa      	ldrb	r2, [r7, #7]
 8000f4e:	f107 030c 	add.w	r3, r7, #12
 8000f52:	4619      	mov	r1, r3
 8000f54:	4806      	ldr	r0, [pc, #24]	@ (8000f70 <LTCD_Layer_Init+0x7c>)
 8000f56:	f003 fe7b 	bl	8004c50 <HAL_LTDC_ConfigLayer>
 8000f5a:	4603      	mov	r3, r0
 8000f5c:	2b00      	cmp	r3, #0
 8000f5e:	d001      	beq.n	8000f64 <LTCD_Layer_Init+0x70>
	{
		LCD_Error_Handler();
 8000f60:	f000 fa3c 	bl	80013dc <LCD_Error_Handler>
	}
}
 8000f64:	bf00      	nop
 8000f66:	3740      	adds	r7, #64	@ 0x40
 8000f68:	46bd      	mov	sp, r7
 8000f6a:	bd80      	pop	{r7, pc}
 8000f6c:	20000214 	.word	0x20000214
 8000f70:	20000138 	.word	0x20000138

08000f74 <LCD_Draw_Square_Fill>:
{
  LCD_Clear(0,LCD_COLOR_WHITE);
}

void LCD_Draw_Square_Fill(uint16_t Xpos, uint16_t Ypos, uint16_t length, uint16_t color)
{
 8000f74:	b590      	push	{r4, r7, lr}
 8000f76:	b085      	sub	sp, #20
 8000f78:	af00      	add	r7, sp, #0
 8000f7a:	4604      	mov	r4, r0
 8000f7c:	4608      	mov	r0, r1
 8000f7e:	4611      	mov	r1, r2
 8000f80:	461a      	mov	r2, r3
 8000f82:	4623      	mov	r3, r4
 8000f84:	80fb      	strh	r3, [r7, #6]
 8000f86:	4603      	mov	r3, r0
 8000f88:	80bb      	strh	r3, [r7, #4]
 8000f8a:	460b      	mov	r3, r1
 8000f8c:	807b      	strh	r3, [r7, #2]
 8000f8e:	4613      	mov	r3, r2
 8000f90:	803b      	strh	r3, [r7, #0]
	for (int16_t y = Ypos ; y <= (Ypos+length); y++)
 8000f92:	88bb      	ldrh	r3, [r7, #4]
 8000f94:	81fb      	strh	r3, [r7, #14]
 8000f96:	e01d      	b.n	8000fd4 <LCD_Draw_Square_Fill+0x60>
	{
		for (int16_t x = Xpos; x<= (Xpos+length); x++)
 8000f98:	88fb      	ldrh	r3, [r7, #6]
 8000f9a:	81bb      	strh	r3, [r7, #12]
 8000f9c:	e00d      	b.n	8000fba <LCD_Draw_Square_Fill+0x46>
		{
			LCD_Draw_Pixel(x, y, color);
 8000f9e:	f9b7 300c 	ldrsh.w	r3, [r7, #12]
 8000fa2:	f9b7 100e 	ldrsh.w	r1, [r7, #14]
 8000fa6:	883a      	ldrh	r2, [r7, #0]
 8000fa8:	4618      	mov	r0, r3
 8000faa:	f000 f87d 	bl	80010a8 <LCD_Draw_Pixel>
		for (int16_t x = Xpos; x<= (Xpos+length); x++)
 8000fae:	f9b7 300c 	ldrsh.w	r3, [r7, #12]
 8000fb2:	b29b      	uxth	r3, r3
 8000fb4:	3301      	adds	r3, #1
 8000fb6:	b29b      	uxth	r3, r3
 8000fb8:	81bb      	strh	r3, [r7, #12]
 8000fba:	f9b7 200c 	ldrsh.w	r2, [r7, #12]
 8000fbe:	88f9      	ldrh	r1, [r7, #6]
 8000fc0:	887b      	ldrh	r3, [r7, #2]
 8000fc2:	440b      	add	r3, r1
 8000fc4:	429a      	cmp	r2, r3
 8000fc6:	ddea      	ble.n	8000f9e <LCD_Draw_Square_Fill+0x2a>
	for (int16_t y = Ypos ; y <= (Ypos+length); y++)
 8000fc8:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
 8000fcc:	b29b      	uxth	r3, r3
 8000fce:	3301      	adds	r3, #1
 8000fd0:	b29b      	uxth	r3, r3
 8000fd2:	81fb      	strh	r3, [r7, #14]
 8000fd4:	f9b7 200e 	ldrsh.w	r2, [r7, #14]
 8000fd8:	88b9      	ldrh	r1, [r7, #4]
 8000fda:	887b      	ldrh	r3, [r7, #2]
 8000fdc:	440b      	add	r3, r1
 8000fde:	429a      	cmp	r2, r3
 8000fe0:	ddda      	ble.n	8000f98 <LCD_Draw_Square_Fill+0x24>
		}
	}
}
 8000fe2:	bf00      	nop
 8000fe4:	bf00      	nop
 8000fe6:	3714      	adds	r7, #20
 8000fe8:	46bd      	mov	sp, r7
 8000fea:	bd90      	pop	{r4, r7, pc}

08000fec <LTCD__Init>:

void LTCD__Init(void)
{
 8000fec:	b580      	push	{r7, lr}
 8000fee:	af00      	add	r7, sp, #0
	hltdc.Instance = LTDC;
 8000ff0:	4b2a      	ldr	r3, [pc, #168]	@ (800109c <LTCD__Init+0xb0>)
 8000ff2:	4a2b      	ldr	r2, [pc, #172]	@ (80010a0 <LTCD__Init+0xb4>)
 8000ff4:	601a      	str	r2, [r3, #0]
	/* Configure horizontal synchronization width */
	hltdc.Init.HorizontalSync = ILI9341_HSYNC;
 8000ff6:	4b29      	ldr	r3, [pc, #164]	@ (800109c <LTCD__Init+0xb0>)
 8000ff8:	2209      	movs	r2, #9
 8000ffa:	615a      	str	r2, [r3, #20]
	/* Configure vertical synchronization height */
	hltdc.Init.VerticalSync = ILI9341_VSYNC;
 8000ffc:	4b27      	ldr	r3, [pc, #156]	@ (800109c <LTCD__Init+0xb0>)
 8000ffe:	2201      	movs	r2, #1
 8001000:	619a      	str	r2, [r3, #24]
	/* Configure accumulated horizontal back porch */
	hltdc.Init.AccumulatedHBP = ILI9341_HBP;
 8001002:	4b26      	ldr	r3, [pc, #152]	@ (800109c <LTCD__Init+0xb0>)
 8001004:	221d      	movs	r2, #29
 8001006:	61da      	str	r2, [r3, #28]
	/* Configure accumulated vertical back porch */
	hltdc.Init.AccumulatedVBP = ILI9341_VBP;
 8001008:	4b24      	ldr	r3, [pc, #144]	@ (800109c <LTCD__Init+0xb0>)
 800100a:	2203      	movs	r2, #3
 800100c:	621a      	str	r2, [r3, #32]
	/* Configure accumulated active width */
	hltdc.Init.AccumulatedActiveW = 269;
 800100e:	4b23      	ldr	r3, [pc, #140]	@ (800109c <LTCD__Init+0xb0>)
 8001010:	f240 120d 	movw	r2, #269	@ 0x10d
 8001014:	625a      	str	r2, [r3, #36]	@ 0x24
	/* Configure accumulated active height */
	hltdc.Init.AccumulatedActiveH = 323;
 8001016:	4b21      	ldr	r3, [pc, #132]	@ (800109c <LTCD__Init+0xb0>)
 8001018:	f240 1243 	movw	r2, #323	@ 0x143
 800101c:	629a      	str	r2, [r3, #40]	@ 0x28
	/* Configure total width */
	hltdc.Init.TotalWidth = 279;
 800101e:	4b1f      	ldr	r3, [pc, #124]	@ (800109c <LTCD__Init+0xb0>)
 8001020:	f240 1217 	movw	r2, #279	@ 0x117
 8001024:	62da      	str	r2, [r3, #44]	@ 0x2c
	/* Configure total height */
	hltdc.Init.TotalHeigh = 327;
 8001026:	4b1d      	ldr	r3, [pc, #116]	@ (800109c <LTCD__Init+0xb0>)
 8001028:	f240 1247 	movw	r2, #327	@ 0x147
 800102c:	631a      	str	r2, [r3, #48]	@ 0x30
	/* Configure R,G,B component values for LCD background color */
	hltdc.Init.Backcolor.Red = 0;
 800102e:	4b1b      	ldr	r3, [pc, #108]	@ (800109c <LTCD__Init+0xb0>)
 8001030:	2200      	movs	r2, #0
 8001032:	f883 2036 	strb.w	r2, [r3, #54]	@ 0x36
	hltdc.Init.Backcolor.Blue = 0;
 8001036:	4b19      	ldr	r3, [pc, #100]	@ (800109c <LTCD__Init+0xb0>)
 8001038:	2200      	movs	r2, #0
 800103a:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
	hltdc.Init.Backcolor.Green = 0;
 800103e:	4b17      	ldr	r3, [pc, #92]	@ (800109c <LTCD__Init+0xb0>)
 8001040:	2200      	movs	r2, #0
 8001042:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35
	/* PLLSAI_VCO Input = HSE_VALUE/PLL_M = 1 Mhz */
	/* PLLSAI_VCO Output = PLLSAI_VCO Input * PLLSAIN = 192 Mhz */
	/* PLLLCDCLK = PLLSAI_VCO Output/PLLSAIR = 192/4 = 48 Mhz */
	/* LTDC clock frequency = PLLLCDCLK / LTDC_PLLSAI_DIVR_8 = 48/4 = 6Mhz */

	PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_LTDC;
 8001046:	4b17      	ldr	r3, [pc, #92]	@ (80010a4 <LTCD__Init+0xb8>)
 8001048:	2208      	movs	r2, #8
 800104a:	601a      	str	r2, [r3, #0]
	PeriphClkInitStruct.PLLSAI.PLLSAIN = 192;
 800104c:	4b15      	ldr	r3, [pc, #84]	@ (80010a4 <LTCD__Init+0xb8>)
 800104e:	22c0      	movs	r2, #192	@ 0xc0
 8001050:	611a      	str	r2, [r3, #16]
	PeriphClkInitStruct.PLLSAI.PLLSAIR = 4;
 8001052:	4b14      	ldr	r3, [pc, #80]	@ (80010a4 <LTCD__Init+0xb8>)
 8001054:	2204      	movs	r2, #4
 8001056:	619a      	str	r2, [r3, #24]
	PeriphClkInitStruct.PLLSAIDivR = RCC_PLLSAIDIVR_8;
 8001058:	4b12      	ldr	r3, [pc, #72]	@ (80010a4 <LTCD__Init+0xb8>)
 800105a:	f44f 3200 	mov.w	r2, #131072	@ 0x20000
 800105e:	625a      	str	r2, [r3, #36]	@ 0x24
	HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct);
 8001060:	4810      	ldr	r0, [pc, #64]	@ (80010a4 <LTCD__Init+0xb8>)
 8001062:	f004 fc4f 	bl	8005904 <HAL_RCCEx_PeriphCLKConfig>
	/* Polarity */
	hltdc.Init.HSPolarity = LTDC_HSPOLARITY_AL;
 8001066:	4b0d      	ldr	r3, [pc, #52]	@ (800109c <LTCD__Init+0xb0>)
 8001068:	2200      	movs	r2, #0
 800106a:	605a      	str	r2, [r3, #4]
	hltdc.Init.VSPolarity = LTDC_VSPOLARITY_AL;
 800106c:	4b0b      	ldr	r3, [pc, #44]	@ (800109c <LTCD__Init+0xb0>)
 800106e:	2200      	movs	r2, #0
 8001070:	609a      	str	r2, [r3, #8]
	hltdc.Init.DEPolarity = LTDC_DEPOLARITY_AL;
 8001072:	4b0a      	ldr	r3, [pc, #40]	@ (800109c <LTCD__Init+0xb0>)
 8001074:	2200      	movs	r2, #0
 8001076:	60da      	str	r2, [r3, #12]
	hltdc.Init.PCPolarity = LTDC_PCPOLARITY_IPC;
 8001078:	4b08      	ldr	r3, [pc, #32]	@ (800109c <LTCD__Init+0xb0>)
 800107a:	2200      	movs	r2, #0
 800107c:	611a      	str	r2, [r3, #16]

	LCD_GPIO_Init();
 800107e:	f7ff fe71 	bl	8000d64 <LCD_GPIO_Init>

	if (HAL_LTDC_Init(&hltdc) != HAL_OK)
 8001082:	4806      	ldr	r0, [pc, #24]	@ (800109c <LTCD__Init+0xb0>)
 8001084:	f003 fd14 	bl	8004ab0 <HAL_LTDC_Init>
 8001088:	4603      	mov	r3, r0
 800108a:	2b00      	cmp	r3, #0
 800108c:	d001      	beq.n	8001092 <LTCD__Init+0xa6>
	 {
	   LCD_Error_Handler();
 800108e:	f000 f9a5 	bl	80013dc <LCD_Error_Handler>
	 }

	ili9341_Init();
 8001092:	f000 f9df 	bl	8001454 <ili9341_Init>
}
 8001096:	bf00      	nop
 8001098:	bd80      	pop	{r7, pc}
 800109a:	bf00      	nop
 800109c:	20000138 	.word	0x20000138
 80010a0:	40016800 	.word	0x40016800
 80010a4:	200001e0 	.word	0x200001e0

080010a8 <LCD_Draw_Pixel>:
 * This is really the only function needed.
 * All drawing consists of is manipulating the array.
 * Adding input sanitation should probably be done.
 */
void LCD_Draw_Pixel(uint16_t x, uint16_t y, uint16_t color)
{
 80010a8:	b480      	push	{r7}
 80010aa:	b083      	sub	sp, #12
 80010ac:	af00      	add	r7, sp, #0
 80010ae:	4603      	mov	r3, r0
 80010b0:	80fb      	strh	r3, [r7, #6]
 80010b2:	460b      	mov	r3, r1
 80010b4:	80bb      	strh	r3, [r7, #4]
 80010b6:	4613      	mov	r3, r2
 80010b8:	807b      	strh	r3, [r7, #2]
	frameBuffer[y*LCD_PIXEL_WIDTH+x] = color;  //You cannot do x*y to set the pixel.
 80010ba:	88ba      	ldrh	r2, [r7, #4]
 80010bc:	4613      	mov	r3, r2
 80010be:	011b      	lsls	r3, r3, #4
 80010c0:	1a9b      	subs	r3, r3, r2
 80010c2:	011b      	lsls	r3, r3, #4
 80010c4:	461a      	mov	r2, r3
 80010c6:	88fb      	ldrh	r3, [r7, #6]
 80010c8:	4413      	add	r3, r2
 80010ca:	4905      	ldr	r1, [pc, #20]	@ (80010e0 <LCD_Draw_Pixel+0x38>)
 80010cc:	887a      	ldrh	r2, [r7, #2]
 80010ce:	f821 2013 	strh.w	r2, [r1, r3, lsl #1]
}
 80010d2:	bf00      	nop
 80010d4:	370c      	adds	r7, #12
 80010d6:	46bd      	mov	sp, r7
 80010d8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80010dc:	4770      	bx	lr
 80010de:	bf00      	nop
 80010e0:	20000214 	.word	0x20000214

080010e4 <LCD_Draw_Circle_Fill>:
 * These functions are simple examples. Most computer graphics like OpenGl and stm's graphics library use a state machine. Where you first call some function like SetColor(color), SetPosition(x,y), then DrawSqure(size)
 * Instead all of these are explicit where color, size, and position are passed in.
 * There is tons of ways to handle drawing. I dont think it matters too much.
 */
void LCD_Draw_Circle_Fill(uint16_t Xpos, uint16_t Ypos, uint16_t radius, uint16_t color)
{
 80010e4:	b590      	push	{r4, r7, lr}
 80010e6:	b085      	sub	sp, #20
 80010e8:	af00      	add	r7, sp, #0
 80010ea:	4604      	mov	r4, r0
 80010ec:	4608      	mov	r0, r1
 80010ee:	4611      	mov	r1, r2
 80010f0:	461a      	mov	r2, r3
 80010f2:	4623      	mov	r3, r4
 80010f4:	80fb      	strh	r3, [r7, #6]
 80010f6:	4603      	mov	r3, r0
 80010f8:	80bb      	strh	r3, [r7, #4]
 80010fa:	460b      	mov	r3, r1
 80010fc:	807b      	strh	r3, [r7, #2]
 80010fe:	4613      	mov	r3, r2
 8001100:	803b      	strh	r3, [r7, #0]
    for(int16_t y=-radius; y<=radius; y++)
 8001102:	887b      	ldrh	r3, [r7, #2]
 8001104:	425b      	negs	r3, r3
 8001106:	b29b      	uxth	r3, r3
 8001108:	81fb      	strh	r3, [r7, #14]
 800110a:	e034      	b.n	8001176 <LCD_Draw_Circle_Fill+0x92>
    {
        for(int16_t x=-radius; x<=radius; x++)
 800110c:	887b      	ldrh	r3, [r7, #2]
 800110e:	425b      	negs	r3, r3
 8001110:	b29b      	uxth	r3, r3
 8001112:	81bb      	strh	r3, [r7, #12]
 8001114:	e024      	b.n	8001160 <LCD_Draw_Circle_Fill+0x7c>
        {
            if(x*x+y*y <= radius*radius)
 8001116:	f9b7 300c 	ldrsh.w	r3, [r7, #12]
 800111a:	f9b7 200c 	ldrsh.w	r2, [r7, #12]
 800111e:	fb03 f202 	mul.w	r2, r3, r2
 8001122:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
 8001126:	f9b7 100e 	ldrsh.w	r1, [r7, #14]
 800112a:	fb01 f303 	mul.w	r3, r1, r3
 800112e:	441a      	add	r2, r3
 8001130:	887b      	ldrh	r3, [r7, #2]
 8001132:	8879      	ldrh	r1, [r7, #2]
 8001134:	fb01 f303 	mul.w	r3, r1, r3
 8001138:	429a      	cmp	r2, r3
 800113a:	dc0b      	bgt.n	8001154 <LCD_Draw_Circle_Fill+0x70>
            {
            	LCD_Draw_Pixel(x+Xpos, y+Ypos, color);
 800113c:	89ba      	ldrh	r2, [r7, #12]
 800113e:	88fb      	ldrh	r3, [r7, #6]
 8001140:	4413      	add	r3, r2
 8001142:	b298      	uxth	r0, r3
 8001144:	89fa      	ldrh	r2, [r7, #14]
 8001146:	88bb      	ldrh	r3, [r7, #4]
 8001148:	4413      	add	r3, r2
 800114a:	b29b      	uxth	r3, r3
 800114c:	883a      	ldrh	r2, [r7, #0]
 800114e:	4619      	mov	r1, r3
 8001150:	f7ff ffaa 	bl	80010a8 <LCD_Draw_Pixel>
        for(int16_t x=-radius; x<=radius; x++)
 8001154:	f9b7 300c 	ldrsh.w	r3, [r7, #12]
 8001158:	b29b      	uxth	r3, r3
 800115a:	3301      	adds	r3, #1
 800115c:	b29b      	uxth	r3, r3
 800115e:	81bb      	strh	r3, [r7, #12]
 8001160:	f9b7 200c 	ldrsh.w	r2, [r7, #12]
 8001164:	887b      	ldrh	r3, [r7, #2]
 8001166:	429a      	cmp	r2, r3
 8001168:	ddd5      	ble.n	8001116 <LCD_Draw_Circle_Fill+0x32>
    for(int16_t y=-radius; y<=radius; y++)
 800116a:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
 800116e:	b29b      	uxth	r3, r3
 8001170:	3301      	adds	r3, #1
 8001172:	b29b      	uxth	r3, r3
 8001174:	81fb      	strh	r3, [r7, #14]
 8001176:	f9b7 200e 	ldrsh.w	r2, [r7, #14]
 800117a:	887b      	ldrh	r3, [r7, #2]
 800117c:	429a      	cmp	r2, r3
 800117e:	ddc5      	ble.n	800110c <LCD_Draw_Circle_Fill+0x28>
            }
        }
    }
}
 8001180:	bf00      	nop
 8001182:	bf00      	nop
 8001184:	3714      	adds	r7, #20
 8001186:	46bd      	mov	sp, r7
 8001188:	bd90      	pop	{r4, r7, pc}
	...

0800118c <LCD_Clear>:
	  LCD_Draw_Pixel(x, i+y, color);
  }
}

void LCD_Clear(uint8_t LayerIndex, uint16_t Color)
{
 800118c:	b480      	push	{r7}
 800118e:	b085      	sub	sp, #20
 8001190:	af00      	add	r7, sp, #0
 8001192:	4603      	mov	r3, r0
 8001194:	460a      	mov	r2, r1
 8001196:	71fb      	strb	r3, [r7, #7]
 8001198:	4613      	mov	r3, r2
 800119a:	80bb      	strh	r3, [r7, #4]
	if (LayerIndex == 0){
 800119c:	79fb      	ldrb	r3, [r7, #7]
 800119e:	2b00      	cmp	r3, #0
 80011a0:	d10e      	bne.n	80011c0 <LCD_Clear+0x34>
		for (uint32_t i = 0; i < LCD_PIXEL_WIDTH * LCD_PIXEL_HEIGHT; i++){
 80011a2:	2300      	movs	r3, #0
 80011a4:	60fb      	str	r3, [r7, #12]
 80011a6:	e007      	b.n	80011b8 <LCD_Clear+0x2c>
			frameBuffer[i] = Color;
 80011a8:	4908      	ldr	r1, [pc, #32]	@ (80011cc <LCD_Clear+0x40>)
 80011aa:	68fb      	ldr	r3, [r7, #12]
 80011ac:	88ba      	ldrh	r2, [r7, #4]
 80011ae:	f821 2013 	strh.w	r2, [r1, r3, lsl #1]
		for (uint32_t i = 0; i < LCD_PIXEL_WIDTH * LCD_PIXEL_HEIGHT; i++){
 80011b2:	68fb      	ldr	r3, [r7, #12]
 80011b4:	3301      	adds	r3, #1
 80011b6:	60fb      	str	r3, [r7, #12]
 80011b8:	68fb      	ldr	r3, [r7, #12]
 80011ba:	f5b3 3f96 	cmp.w	r3, #76800	@ 0x12c00
 80011be:	d3f3      	bcc.n	80011a8 <LCD_Clear+0x1c>
		}
	}
  // TODO: Add more Layers if needed
}
 80011c0:	bf00      	nop
 80011c2:	3714      	adds	r7, #20
 80011c4:	46bd      	mov	sp, r7
 80011c6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80011ca:	4770      	bx	lr
 80011cc:	20000214 	.word	0x20000214

080011d0 <LCD_SetTextColor>:

//This was taken and adapted from stm32's mcu code
void LCD_SetTextColor(uint16_t Color)
{
 80011d0:	b480      	push	{r7}
 80011d2:	b083      	sub	sp, #12
 80011d4:	af00      	add	r7, sp, #0
 80011d6:	4603      	mov	r3, r0
 80011d8:	80fb      	strh	r3, [r7, #6]
  CurrentTextColor = Color;
 80011da:	4a04      	ldr	r2, [pc, #16]	@ (80011ec <LCD_SetTextColor+0x1c>)
 80011dc:	88fb      	ldrh	r3, [r7, #6]
 80011de:	8013      	strh	r3, [r2, #0]
}
 80011e0:	bf00      	nop
 80011e2:	370c      	adds	r7, #12
 80011e4:	46bd      	mov	sp, r7
 80011e6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80011ea:	4770      	bx	lr
 80011ec:	2000000a 	.word	0x2000000a

080011f0 <LCD_SetFont>:

//This was taken and adapted from stm32's mcu code
void LCD_SetFont(FONT_t *fonts)
{
 80011f0:	b480      	push	{r7}
 80011f2:	b083      	sub	sp, #12
 80011f4:	af00      	add	r7, sp, #0
 80011f6:	6078      	str	r0, [r7, #4]
  LCD_Currentfonts = fonts;
 80011f8:	4a04      	ldr	r2, [pc, #16]	@ (800120c <LCD_SetFont+0x1c>)
 80011fa:	687b      	ldr	r3, [r7, #4]
 80011fc:	6013      	str	r3, [r2, #0]
}
 80011fe:	bf00      	nop
 8001200:	370c      	adds	r7, #12
 8001202:	46bd      	mov	sp, r7
 8001204:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001208:	4770      	bx	lr
 800120a:	bf00      	nop
 800120c:	20000210 	.word	0x20000210

08001210 <LCD_Draw_Char>:

//This was taken and adapted from stm32's mcu code
void LCD_Draw_Char(uint16_t Xpos, uint16_t Ypos, const uint16_t *c)
{
 8001210:	b580      	push	{r7, lr}
 8001212:	b084      	sub	sp, #16
 8001214:	af00      	add	r7, sp, #0
 8001216:	4603      	mov	r3, r0
 8001218:	603a      	str	r2, [r7, #0]
 800121a:	80fb      	strh	r3, [r7, #6]
 800121c:	460b      	mov	r3, r1
 800121e:	80bb      	strh	r3, [r7, #4]
  uint32_t index = 0, counter = 0;
 8001220:	2300      	movs	r3, #0
 8001222:	60fb      	str	r3, [r7, #12]
 8001224:	2300      	movs	r3, #0
 8001226:	60bb      	str	r3, [r7, #8]
  for(index = 0; index < LCD_Currentfonts->Height; index++)
 8001228:	2300      	movs	r3, #0
 800122a:	60fb      	str	r3, [r7, #12]
 800122c:	e04c      	b.n	80012c8 <LCD_Draw_Char+0xb8>
  {
    for(counter = 0; counter < LCD_Currentfonts->Width; counter++)
 800122e:	2300      	movs	r3, #0
 8001230:	60bb      	str	r3, [r7, #8]
 8001232:	e03f      	b.n	80012b4 <LCD_Draw_Char+0xa4>
    {
      if((((c[index] & ((0x80 << ((LCD_Currentfonts->Width / 12 ) * 8 ) ) >> counter)) == 0x00) && (LCD_Currentfonts->Width <= 12)) || (((c[index] & (0x1 << counter)) == 0x00)&&(LCD_Currentfonts->Width > 12 )))
 8001234:	68fb      	ldr	r3, [r7, #12]
 8001236:	005b      	lsls	r3, r3, #1
 8001238:	683a      	ldr	r2, [r7, #0]
 800123a:	4413      	add	r3, r2
 800123c:	881b      	ldrh	r3, [r3, #0]
 800123e:	4619      	mov	r1, r3
 8001240:	4b27      	ldr	r3, [pc, #156]	@ (80012e0 <LCD_Draw_Char+0xd0>)
 8001242:	681b      	ldr	r3, [r3, #0]
 8001244:	889b      	ldrh	r3, [r3, #4]
 8001246:	4a27      	ldr	r2, [pc, #156]	@ (80012e4 <LCD_Draw_Char+0xd4>)
 8001248:	fba2 2303 	umull	r2, r3, r2, r3
 800124c:	08db      	lsrs	r3, r3, #3
 800124e:	b29b      	uxth	r3, r3
 8001250:	00db      	lsls	r3, r3, #3
 8001252:	2280      	movs	r2, #128	@ 0x80
 8001254:	409a      	lsls	r2, r3
 8001256:	68bb      	ldr	r3, [r7, #8]
 8001258:	fa42 f303 	asr.w	r3, r2, r3
 800125c:	400b      	ands	r3, r1
 800125e:	2b00      	cmp	r3, #0
 8001260:	d104      	bne.n	800126c <LCD_Draw_Char+0x5c>
 8001262:	4b1f      	ldr	r3, [pc, #124]	@ (80012e0 <LCD_Draw_Char+0xd0>)
 8001264:	681b      	ldr	r3, [r3, #0]
 8001266:	889b      	ldrh	r3, [r3, #4]
 8001268:	2b0c      	cmp	r3, #12
 800126a:	d920      	bls.n	80012ae <LCD_Draw_Char+0x9e>
 800126c:	68fb      	ldr	r3, [r7, #12]
 800126e:	005b      	lsls	r3, r3, #1
 8001270:	683a      	ldr	r2, [r7, #0]
 8001272:	4413      	add	r3, r2
 8001274:	881b      	ldrh	r3, [r3, #0]
 8001276:	461a      	mov	r2, r3
 8001278:	68bb      	ldr	r3, [r7, #8]
 800127a:	fa42 f303 	asr.w	r3, r2, r3
 800127e:	f003 0301 	and.w	r3, r3, #1
 8001282:	2b00      	cmp	r3, #0
 8001284:	d104      	bne.n	8001290 <LCD_Draw_Char+0x80>
 8001286:	4b16      	ldr	r3, [pc, #88]	@ (80012e0 <LCD_Draw_Char+0xd0>)
 8001288:	681b      	ldr	r3, [r3, #0]
 800128a:	889b      	ldrh	r3, [r3, #4]
 800128c:	2b0c      	cmp	r3, #12
 800128e:	d80e      	bhi.n	80012ae <LCD_Draw_Char+0x9e>
      {
         //Background If want to overrite text under then add a set color here
      }
      else
      {
    	  LCD_Draw_Pixel(counter + Xpos,index + Ypos,CurrentTextColor);
 8001290:	68bb      	ldr	r3, [r7, #8]
 8001292:	b29a      	uxth	r2, r3
 8001294:	88fb      	ldrh	r3, [r7, #6]
 8001296:	4413      	add	r3, r2
 8001298:	b298      	uxth	r0, r3
 800129a:	68fb      	ldr	r3, [r7, #12]
 800129c:	b29a      	uxth	r2, r3
 800129e:	88bb      	ldrh	r3, [r7, #4]
 80012a0:	4413      	add	r3, r2
 80012a2:	b29b      	uxth	r3, r3
 80012a4:	4a10      	ldr	r2, [pc, #64]	@ (80012e8 <LCD_Draw_Char+0xd8>)
 80012a6:	8812      	ldrh	r2, [r2, #0]
 80012a8:	4619      	mov	r1, r3
 80012aa:	f7ff fefd 	bl	80010a8 <LCD_Draw_Pixel>
    for(counter = 0; counter < LCD_Currentfonts->Width; counter++)
 80012ae:	68bb      	ldr	r3, [r7, #8]
 80012b0:	3301      	adds	r3, #1
 80012b2:	60bb      	str	r3, [r7, #8]
 80012b4:	4b0a      	ldr	r3, [pc, #40]	@ (80012e0 <LCD_Draw_Char+0xd0>)
 80012b6:	681b      	ldr	r3, [r3, #0]
 80012b8:	889b      	ldrh	r3, [r3, #4]
 80012ba:	461a      	mov	r2, r3
 80012bc:	68bb      	ldr	r3, [r7, #8]
 80012be:	4293      	cmp	r3, r2
 80012c0:	d3b8      	bcc.n	8001234 <LCD_Draw_Char+0x24>
  for(index = 0; index < LCD_Currentfonts->Height; index++)
 80012c2:	68fb      	ldr	r3, [r7, #12]
 80012c4:	3301      	adds	r3, #1
 80012c6:	60fb      	str	r3, [r7, #12]
 80012c8:	4b05      	ldr	r3, [pc, #20]	@ (80012e0 <LCD_Draw_Char+0xd0>)
 80012ca:	681b      	ldr	r3, [r3, #0]
 80012cc:	88db      	ldrh	r3, [r3, #6]
 80012ce:	461a      	mov	r2, r3
 80012d0:	68fb      	ldr	r3, [r7, #12]
 80012d2:	4293      	cmp	r3, r2
 80012d4:	d3ab      	bcc.n	800122e <LCD_Draw_Char+0x1e>
      }
    }
  }
}
 80012d6:	bf00      	nop
 80012d8:	bf00      	nop
 80012da:	3710      	adds	r7, #16
 80012dc:	46bd      	mov	sp, r7
 80012de:	bd80      	pop	{r7, pc}
 80012e0:	20000210 	.word	0x20000210
 80012e4:	aaaaaaab 	.word	0xaaaaaaab
 80012e8:	2000000a 	.word	0x2000000a

080012ec <LCD_DrawMonkey>:

void LCD_DrawMonkey(uint16_t x, uint16_t y)
{
 80012ec:	b580      	push	{r7, lr}
 80012ee:	b084      	sub	sp, #16
 80012f0:	af00      	add	r7, sp, #0
 80012f2:	4603      	mov	r3, r0
 80012f4:	460a      	mov	r2, r1
 80012f6:	80fb      	strh	r3, [r7, #6]
 80012f8:	4613      	mov	r3, r2
 80012fa:	80bb      	strh	r3, [r7, #4]

	    // Head
	    LCD_Draw_Circle_Fill(x, y, 30, LCD_COLOR_BROWN);
 80012fc:	88b9      	ldrh	r1, [r7, #4]
 80012fe:	88f8      	ldrh	r0, [r7, #6]
 8001300:	f649 3387 	movw	r3, #39815	@ 0x9b87
 8001304:	221e      	movs	r2, #30
 8001306:	f7ff feed 	bl	80010e4 <LCD_Draw_Circle_Fill>

	    // Ears
	    LCD_Draw_Circle_Fill(x - 30, y, 10, LCD_COLOR_BROWN); // Left ear
 800130a:	88fb      	ldrh	r3, [r7, #6]
 800130c:	3b1e      	subs	r3, #30
 800130e:	b298      	uxth	r0, r3
 8001310:	88b9      	ldrh	r1, [r7, #4]
 8001312:	f649 3387 	movw	r3, #39815	@ 0x9b87
 8001316:	220a      	movs	r2, #10
 8001318:	f7ff fee4 	bl	80010e4 <LCD_Draw_Circle_Fill>
	    LCD_Draw_Circle_Fill(x + 30, y, 10, LCD_COLOR_BROWN); // Right ear
 800131c:	88fb      	ldrh	r3, [r7, #6]
 800131e:	331e      	adds	r3, #30
 8001320:	b298      	uxth	r0, r3
 8001322:	88b9      	ldrh	r1, [r7, #4]
 8001324:	f649 3387 	movw	r3, #39815	@ 0x9b87
 8001328:	220a      	movs	r2, #10
 800132a:	f7ff fedb 	bl	80010e4 <LCD_Draw_Circle_Fill>

	    // Eyes
	    LCD_Draw_Circle_Fill(x - 10, y - 10, 2, LCD_COLOR_BLACK); // Left eye (black)
 800132e:	88fb      	ldrh	r3, [r7, #6]
 8001330:	3b0a      	subs	r3, #10
 8001332:	b298      	uxth	r0, r3
 8001334:	88bb      	ldrh	r3, [r7, #4]
 8001336:	3b0a      	subs	r3, #10
 8001338:	b299      	uxth	r1, r3
 800133a:	2300      	movs	r3, #0
 800133c:	2202      	movs	r2, #2
 800133e:	f7ff fed1 	bl	80010e4 <LCD_Draw_Circle_Fill>
	    LCD_Draw_Circle_Fill(x + 10, y - 10, 2, LCD_COLOR_BLACK); // Right eye (black)
 8001342:	88fb      	ldrh	r3, [r7, #6]
 8001344:	330a      	adds	r3, #10
 8001346:	b298      	uxth	r0, r3
 8001348:	88bb      	ldrh	r3, [r7, #4]
 800134a:	3b0a      	subs	r3, #10
 800134c:	b299      	uxth	r1, r3
 800134e:	2300      	movs	r3, #0
 8001350:	2202      	movs	r2, #2
 8001352:	f7ff fec7 	bl	80010e4 <LCD_Draw_Circle_Fill>

	    // Nose
	    LCD_Draw_Circle_Fill(x, y, 2, LCD_COLOR_BLACK); // Nose (black)
 8001356:	88b9      	ldrh	r1, [r7, #4]
 8001358:	88f8      	ldrh	r0, [r7, #6]
 800135a:	2300      	movs	r3, #0
 800135c:	2202      	movs	r2, #2
 800135e:	f7ff fec1 	bl	80010e4 <LCD_Draw_Circle_Fill>

	    // Mouth
	    for (int xx = x - 5; xx <= x + 5; xx++) {
 8001362:	88fb      	ldrh	r3, [r7, #6]
 8001364:	3b05      	subs	r3, #5
 8001366:	60fb      	str	r3, [r7, #12]
 8001368:	e00b      	b.n	8001382 <LCD_DrawMonkey+0x96>
	    	LCD_Draw_Pixel(xx, y + 10, LCD_COLOR_BLACK); // Mouth (black)
 800136a:	68fb      	ldr	r3, [r7, #12]
 800136c:	b298      	uxth	r0, r3
 800136e:	88bb      	ldrh	r3, [r7, #4]
 8001370:	330a      	adds	r3, #10
 8001372:	b29b      	uxth	r3, r3
 8001374:	2200      	movs	r2, #0
 8001376:	4619      	mov	r1, r3
 8001378:	f7ff fe96 	bl	80010a8 <LCD_Draw_Pixel>
	    for (int xx = x - 5; xx <= x + 5; xx++) {
 800137c:	68fb      	ldr	r3, [r7, #12]
 800137e:	3301      	adds	r3, #1
 8001380:	60fb      	str	r3, [r7, #12]
 8001382:	88fb      	ldrh	r3, [r7, #6]
 8001384:	3305      	adds	r3, #5
 8001386:	68fa      	ldr	r2, [r7, #12]
 8001388:	429a      	cmp	r2, r3
 800138a:	ddee      	ble.n	800136a <LCD_DrawMonkey+0x7e>
	    }
}
 800138c:	bf00      	nop
 800138e:	bf00      	nop
 8001390:	3710      	adds	r7, #16
 8001392:	46bd      	mov	sp, r7
 8001394:	bd80      	pop	{r7, pc}
	...

08001398 <LCD_DisplayChar>:


//This was taken and adapted from stm32's mcu code
void LCD_DisplayChar(uint16_t Xpos, uint16_t Ypos, uint8_t Ascii)
{
 8001398:	b580      	push	{r7, lr}
 800139a:	b082      	sub	sp, #8
 800139c:	af00      	add	r7, sp, #0
 800139e:	4603      	mov	r3, r0
 80013a0:	80fb      	strh	r3, [r7, #6]
 80013a2:	460b      	mov	r3, r1
 80013a4:	80bb      	strh	r3, [r7, #4]
 80013a6:	4613      	mov	r3, r2
 80013a8:	70fb      	strb	r3, [r7, #3]
  Ascii -= 32;
 80013aa:	78fb      	ldrb	r3, [r7, #3]
 80013ac:	3b20      	subs	r3, #32
 80013ae:	70fb      	strb	r3, [r7, #3]
  LCD_Draw_Char(Xpos, Ypos, &LCD_Currentfonts->table[Ascii * LCD_Currentfonts->Height]);
 80013b0:	4b09      	ldr	r3, [pc, #36]	@ (80013d8 <LCD_DisplayChar+0x40>)
 80013b2:	681b      	ldr	r3, [r3, #0]
 80013b4:	681a      	ldr	r2, [r3, #0]
 80013b6:	78fb      	ldrb	r3, [r7, #3]
 80013b8:	4907      	ldr	r1, [pc, #28]	@ (80013d8 <LCD_DisplayChar+0x40>)
 80013ba:	6809      	ldr	r1, [r1, #0]
 80013bc:	88c9      	ldrh	r1, [r1, #6]
 80013be:	fb01 f303 	mul.w	r3, r1, r3
 80013c2:	005b      	lsls	r3, r3, #1
 80013c4:	441a      	add	r2, r3
 80013c6:	88b9      	ldrh	r1, [r7, #4]
 80013c8:	88fb      	ldrh	r3, [r7, #6]
 80013ca:	4618      	mov	r0, r3
 80013cc:	f7ff ff20 	bl	8001210 <LCD_Draw_Char>
}
 80013d0:	bf00      	nop
 80013d2:	3708      	adds	r7, #8
 80013d4:	46bd      	mov	sp, r7
 80013d6:	bd80      	pop	{r7, pc}
 80013d8:	20000210 	.word	0x20000210

080013dc <LCD_Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void LCD_Error_Handler(void)
{
 80013dc:	b480      	push	{r7}
 80013de:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting special-purpose register PRIMASK.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 80013e0:	b672      	cpsid	i
}
 80013e2:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 80013e4:	bf00      	nop
 80013e6:	e7fd      	b.n	80013e4 <LCD_Error_Handler+0x8>

080013e8 <InitializeLCDTouch>:
// Touch Functionality   //

#if COMPILE_TOUCH_FUNCTIONS == 1

void InitializeLCDTouch(void)
{
 80013e8:	b580      	push	{r7, lr}
 80013ea:	af00      	add	r7, sp, #0
  if(STMPE811_Init() != STMPE811_State_Ok)
 80013ec:	f001 f992 	bl	8002714 <STMPE811_Init>
 80013f0:	4603      	mov	r3, r0
 80013f2:	2b02      	cmp	r3, #2
 80013f4:	d001      	beq.n	80013fa <InitializeLCDTouch+0x12>
  {
	 for(;;); // Hang code due to error in initialzation
 80013f6:	bf00      	nop
 80013f8:	e7fd      	b.n	80013f6 <InitializeLCDTouch+0xe>
  }
}
 80013fa:	bf00      	nop
 80013fc:	bd80      	pop	{r7, pc}

080013fe <DetermineTouchPosition>:
{
	return STMPE811_ReadTouch(touchStruct);
}

void DetermineTouchPosition(STMPE811_TouchData * touchStruct)
{
 80013fe:	b580      	push	{r7, lr}
 8001400:	b082      	sub	sp, #8
 8001402:	af00      	add	r7, sp, #0
 8001404:	6078      	str	r0, [r7, #4]
	STMPE811_DetermineTouchPosition(touchStruct);
 8001406:	6878      	ldr	r0, [r7, #4]
 8001408:	f001 fa6e 	bl	80028e8 <STMPE811_DetermineTouchPosition>
}
 800140c:	bf00      	nop
 800140e:	3708      	adds	r7, #8
 8001410:	46bd      	mov	sp, r7
 8001412:	bd80      	pop	{r7, pc}

08001414 <ReadRegisterFromTouchModule>:

uint8_t ReadRegisterFromTouchModule(uint8_t RegToRead)
{
 8001414:	b580      	push	{r7, lr}
 8001416:	b082      	sub	sp, #8
 8001418:	af00      	add	r7, sp, #0
 800141a:	4603      	mov	r3, r0
 800141c:	71fb      	strb	r3, [r7, #7]
	return STMPE811_Read(RegToRead);
 800141e:	79fb      	ldrb	r3, [r7, #7]
 8001420:	4618      	mov	r0, r3
 8001422:	f001 fa3e 	bl	80028a2 <STMPE811_Read>
 8001426:	4603      	mov	r3, r0
}
 8001428:	4618      	mov	r0, r3
 800142a:	3708      	adds	r7, #8
 800142c:	46bd      	mov	sp, r7
 800142e:	bd80      	pop	{r7, pc}

08001430 <WriteDataToTouchModule>:

void WriteDataToTouchModule(uint8_t RegToWrite, uint8_t writeData)
{
 8001430:	b580      	push	{r7, lr}
 8001432:	b082      	sub	sp, #8
 8001434:	af00      	add	r7, sp, #0
 8001436:	4603      	mov	r3, r0
 8001438:	460a      	mov	r2, r1
 800143a:	71fb      	strb	r3, [r7, #7]
 800143c:	4613      	mov	r3, r2
 800143e:	71bb      	strb	r3, [r7, #6]
	STMPE811_Write(RegToWrite, writeData);
 8001440:	79ba      	ldrb	r2, [r7, #6]
 8001442:	79fb      	ldrb	r3, [r7, #7]
 8001444:	4611      	mov	r1, r2
 8001446:	4618      	mov	r0, r3
 8001448:	f001 fa3c 	bl	80028c4 <STMPE811_Write>
}
 800144c:	bf00      	nop
 800144e:	3708      	adds	r7, #8
 8001450:	46bd      	mov	sp, r7
 8001452:	bd80      	pop	{r7, pc}

08001454 <ili9341_Init>:
  * @brief  Power on the LCD.
  * @param  None
  * @retval None
  */
void ili9341_Init(void)
{
 8001454:	b580      	push	{r7, lr}
 8001456:	af00      	add	r7, sp, #0
  /* Initialize ILI9341 low level bus layer ----------------------------------*/
  LCD_IO_Init();
 8001458:	f000 f9fe 	bl	8001858 <LCD_IO_Init>

  /* Configure LCD */
  ili9341_Write_Reg(0xCA);
 800145c:	20ca      	movs	r0, #202	@ 0xca
 800145e:	f000 f943 	bl	80016e8 <ili9341_Write_Reg>
  ili9341_Send_Data(0xC3);				//param 1
 8001462:	20c3      	movs	r0, #195	@ 0xc3
 8001464:	f000 f94d 	bl	8001702 <ili9341_Send_Data>
  ili9341_Send_Data(0x08);				//param 2
 8001468:	2008      	movs	r0, #8
 800146a:	f000 f94a 	bl	8001702 <ili9341_Send_Data>
  ili9341_Send_Data(0x50);				//param 3
 800146e:	2050      	movs	r0, #80	@ 0x50
 8001470:	f000 f947 	bl	8001702 <ili9341_Send_Data>
  ili9341_Write_Reg(LCD_POWERB); //CF
 8001474:	20cf      	movs	r0, #207	@ 0xcf
 8001476:	f000 f937 	bl	80016e8 <ili9341_Write_Reg>
  ili9341_Send_Data(0x00);				//param 1
 800147a:	2000      	movs	r0, #0
 800147c:	f000 f941 	bl	8001702 <ili9341_Send_Data>
  ili9341_Send_Data(0xC1);				//param 2
 8001480:	20c1      	movs	r0, #193	@ 0xc1
 8001482:	f000 f93e 	bl	8001702 <ili9341_Send_Data>
  ili9341_Send_Data(0x30);				//param 3
 8001486:	2030      	movs	r0, #48	@ 0x30
 8001488:	f000 f93b 	bl	8001702 <ili9341_Send_Data>
  ili9341_Write_Reg(LCD_POWER_SEQ); //ED
 800148c:	20ed      	movs	r0, #237	@ 0xed
 800148e:	f000 f92b 	bl	80016e8 <ili9341_Write_Reg>
  ili9341_Send_Data(0x64);
 8001492:	2064      	movs	r0, #100	@ 0x64
 8001494:	f000 f935 	bl	8001702 <ili9341_Send_Data>
  ili9341_Send_Data(0x03);
 8001498:	2003      	movs	r0, #3
 800149a:	f000 f932 	bl	8001702 <ili9341_Send_Data>
  ili9341_Send_Data(0x12);
 800149e:	2012      	movs	r0, #18
 80014a0:	f000 f92f 	bl	8001702 <ili9341_Send_Data>
  ili9341_Send_Data(0x81);
 80014a4:	2081      	movs	r0, #129	@ 0x81
 80014a6:	f000 f92c 	bl	8001702 <ili9341_Send_Data>
  ili9341_Write_Reg(LCD_DTCA);
 80014aa:	20e8      	movs	r0, #232	@ 0xe8
 80014ac:	f000 f91c 	bl	80016e8 <ili9341_Write_Reg>
  ili9341_Send_Data(0x85);
 80014b0:	2085      	movs	r0, #133	@ 0x85
 80014b2:	f000 f926 	bl	8001702 <ili9341_Send_Data>
  ili9341_Send_Data(0x00);
 80014b6:	2000      	movs	r0, #0
 80014b8:	f000 f923 	bl	8001702 <ili9341_Send_Data>
  ili9341_Send_Data(0x78);
 80014bc:	2078      	movs	r0, #120	@ 0x78
 80014be:	f000 f920 	bl	8001702 <ili9341_Send_Data>
  ili9341_Write_Reg(LCD_POWERA);
 80014c2:	20cb      	movs	r0, #203	@ 0xcb
 80014c4:	f000 f910 	bl	80016e8 <ili9341_Write_Reg>
  ili9341_Send_Data(0x39);
 80014c8:	2039      	movs	r0, #57	@ 0x39
 80014ca:	f000 f91a 	bl	8001702 <ili9341_Send_Data>
  ili9341_Send_Data(0x2C);
 80014ce:	202c      	movs	r0, #44	@ 0x2c
 80014d0:	f000 f917 	bl	8001702 <ili9341_Send_Data>
  ili9341_Send_Data(0x00);
 80014d4:	2000      	movs	r0, #0
 80014d6:	f000 f914 	bl	8001702 <ili9341_Send_Data>
  ili9341_Send_Data(0x34);
 80014da:	2034      	movs	r0, #52	@ 0x34
 80014dc:	f000 f911 	bl	8001702 <ili9341_Send_Data>
  ili9341_Send_Data(0x02);
 80014e0:	2002      	movs	r0, #2
 80014e2:	f000 f90e 	bl	8001702 <ili9341_Send_Data>
  ili9341_Write_Reg(LCD_PRC);
 80014e6:	20f7      	movs	r0, #247	@ 0xf7
 80014e8:	f000 f8fe 	bl	80016e8 <ili9341_Write_Reg>
  ili9341_Send_Data(0x20);
 80014ec:	2020      	movs	r0, #32
 80014ee:	f000 f908 	bl	8001702 <ili9341_Send_Data>
  ili9341_Write_Reg(LCD_DTCB);
 80014f2:	20ea      	movs	r0, #234	@ 0xea
 80014f4:	f000 f8f8 	bl	80016e8 <ili9341_Write_Reg>
  ili9341_Send_Data(0x00);
 80014f8:	2000      	movs	r0, #0
 80014fa:	f000 f902 	bl	8001702 <ili9341_Send_Data>
  ili9341_Send_Data(0x00);
 80014fe:	2000      	movs	r0, #0
 8001500:	f000 f8ff 	bl	8001702 <ili9341_Send_Data>
  ili9341_Write_Reg(LCD_FRMCTR1);
 8001504:	20b1      	movs	r0, #177	@ 0xb1
 8001506:	f000 f8ef 	bl	80016e8 <ili9341_Write_Reg>
  ili9341_Send_Data(0x00);
 800150a:	2000      	movs	r0, #0
 800150c:	f000 f8f9 	bl	8001702 <ili9341_Send_Data>
  ili9341_Send_Data(0x1B);
 8001510:	201b      	movs	r0, #27
 8001512:	f000 f8f6 	bl	8001702 <ili9341_Send_Data>
  ili9341_Write_Reg(LCD_DFC);
 8001516:	20b6      	movs	r0, #182	@ 0xb6
 8001518:	f000 f8e6 	bl	80016e8 <ili9341_Write_Reg>
  ili9341_Send_Data(0x0A);
 800151c:	200a      	movs	r0, #10
 800151e:	f000 f8f0 	bl	8001702 <ili9341_Send_Data>
  ili9341_Send_Data(0xA2);
 8001522:	20a2      	movs	r0, #162	@ 0xa2
 8001524:	f000 f8ed 	bl	8001702 <ili9341_Send_Data>
  ili9341_Write_Reg(LCD_POWER1);
 8001528:	20c0      	movs	r0, #192	@ 0xc0
 800152a:	f000 f8dd 	bl	80016e8 <ili9341_Write_Reg>
  ili9341_Send_Data(0x10);
 800152e:	2010      	movs	r0, #16
 8001530:	f000 f8e7 	bl	8001702 <ili9341_Send_Data>
  ili9341_Write_Reg(LCD_POWER2);
 8001534:	20c1      	movs	r0, #193	@ 0xc1
 8001536:	f000 f8d7 	bl	80016e8 <ili9341_Write_Reg>
  ili9341_Send_Data(0x10);
 800153a:	2010      	movs	r0, #16
 800153c:	f000 f8e1 	bl	8001702 <ili9341_Send_Data>
  ili9341_Write_Reg(LCD_VCOM1);
 8001540:	20c5      	movs	r0, #197	@ 0xc5
 8001542:	f000 f8d1 	bl	80016e8 <ili9341_Write_Reg>
  ili9341_Send_Data(0x45);
 8001546:	2045      	movs	r0, #69	@ 0x45
 8001548:	f000 f8db 	bl	8001702 <ili9341_Send_Data>
  ili9341_Send_Data(0x15);
 800154c:	2015      	movs	r0, #21
 800154e:	f000 f8d8 	bl	8001702 <ili9341_Send_Data>
  ili9341_Write_Reg(LCD_VCOM2);
 8001552:	20c7      	movs	r0, #199	@ 0xc7
 8001554:	f000 f8c8 	bl	80016e8 <ili9341_Write_Reg>
  ili9341_Send_Data(0x90);
 8001558:	2090      	movs	r0, #144	@ 0x90
 800155a:	f000 f8d2 	bl	8001702 <ili9341_Send_Data>
  ili9341_Write_Reg(LCD_MAC);
 800155e:	2036      	movs	r0, #54	@ 0x36
 8001560:	f000 f8c2 	bl	80016e8 <ili9341_Write_Reg>
  ili9341_Send_Data(0xC8);
 8001564:	20c8      	movs	r0, #200	@ 0xc8
 8001566:	f000 f8cc 	bl	8001702 <ili9341_Send_Data>
  ili9341_Write_Reg(LCD_3GAMMA_EN);
 800156a:	20f2      	movs	r0, #242	@ 0xf2
 800156c:	f000 f8bc 	bl	80016e8 <ili9341_Write_Reg>
  ili9341_Send_Data(0x00);
 8001570:	2000      	movs	r0, #0
 8001572:	f000 f8c6 	bl	8001702 <ili9341_Send_Data>
  ili9341_Write_Reg(LCD_RGB_INTERFACE);
 8001576:	20b0      	movs	r0, #176	@ 0xb0
 8001578:	f000 f8b6 	bl	80016e8 <ili9341_Write_Reg>
  ili9341_Send_Data(0xC2);
 800157c:	20c2      	movs	r0, #194	@ 0xc2
 800157e:	f000 f8c0 	bl	8001702 <ili9341_Send_Data>
  ili9341_Write_Reg(LCD_DFC);
 8001582:	20b6      	movs	r0, #182	@ 0xb6
 8001584:	f000 f8b0 	bl	80016e8 <ili9341_Write_Reg>
  ili9341_Send_Data(0x0A);
 8001588:	200a      	movs	r0, #10
 800158a:	f000 f8ba 	bl	8001702 <ili9341_Send_Data>
  ili9341_Send_Data(0xA7);
 800158e:	20a7      	movs	r0, #167	@ 0xa7
 8001590:	f000 f8b7 	bl	8001702 <ili9341_Send_Data>
  ili9341_Send_Data(0x27);
 8001594:	2027      	movs	r0, #39	@ 0x27
 8001596:	f000 f8b4 	bl	8001702 <ili9341_Send_Data>
  ili9341_Send_Data(0x04);
 800159a:	2004      	movs	r0, #4
 800159c:	f000 f8b1 	bl	8001702 <ili9341_Send_Data>

  /* Colomn address set */
  ili9341_Write_Reg(LCD_COLUMN_ADDR);
 80015a0:	202a      	movs	r0, #42	@ 0x2a
 80015a2:	f000 f8a1 	bl	80016e8 <ili9341_Write_Reg>
  ili9341_Send_Data(0x00);
 80015a6:	2000      	movs	r0, #0
 80015a8:	f000 f8ab 	bl	8001702 <ili9341_Send_Data>
  ili9341_Send_Data(0x00);
 80015ac:	2000      	movs	r0, #0
 80015ae:	f000 f8a8 	bl	8001702 <ili9341_Send_Data>
  ili9341_Send_Data(0x00);
 80015b2:	2000      	movs	r0, #0
 80015b4:	f000 f8a5 	bl	8001702 <ili9341_Send_Data>
  ili9341_Send_Data(0xEF);
 80015b8:	20ef      	movs	r0, #239	@ 0xef
 80015ba:	f000 f8a2 	bl	8001702 <ili9341_Send_Data>

  /* Page address set */
  ili9341_Write_Reg(LCD_PAGE_ADDR);
 80015be:	202b      	movs	r0, #43	@ 0x2b
 80015c0:	f000 f892 	bl	80016e8 <ili9341_Write_Reg>
  ili9341_Send_Data(0x00);
 80015c4:	2000      	movs	r0, #0
 80015c6:	f000 f89c 	bl	8001702 <ili9341_Send_Data>
  ili9341_Send_Data(0x00);
 80015ca:	2000      	movs	r0, #0
 80015cc:	f000 f899 	bl	8001702 <ili9341_Send_Data>
  ili9341_Send_Data(0x01);
 80015d0:	2001      	movs	r0, #1
 80015d2:	f000 f896 	bl	8001702 <ili9341_Send_Data>
  ili9341_Send_Data(0x3F);
 80015d6:	203f      	movs	r0, #63	@ 0x3f
 80015d8:	f000 f893 	bl	8001702 <ili9341_Send_Data>
  ili9341_Write_Reg(LCD_INTERFACE);
 80015dc:	20f6      	movs	r0, #246	@ 0xf6
 80015de:	f000 f883 	bl	80016e8 <ili9341_Write_Reg>
  ili9341_Send_Data(0x01);
 80015e2:	2001      	movs	r0, #1
 80015e4:	f000 f88d 	bl	8001702 <ili9341_Send_Data>
  ili9341_Send_Data(0x00);
 80015e8:	2000      	movs	r0, #0
 80015ea:	f000 f88a 	bl	8001702 <ili9341_Send_Data>
  ili9341_Send_Data(0x06);
 80015ee:	2006      	movs	r0, #6
 80015f0:	f000 f887 	bl	8001702 <ili9341_Send_Data>

  ili9341_Write_Reg(LCD_GRAM);
 80015f4:	202c      	movs	r0, #44	@ 0x2c
 80015f6:	f000 f877 	bl	80016e8 <ili9341_Write_Reg>
  LCD_Delay(200);
 80015fa:	20c8      	movs	r0, #200	@ 0xc8
 80015fc:	f000 f9e8 	bl	80019d0 <LCD_Delay>

  ili9341_Write_Reg(LCD_GAMMA);
 8001600:	2026      	movs	r0, #38	@ 0x26
 8001602:	f000 f871 	bl	80016e8 <ili9341_Write_Reg>
  ili9341_Send_Data(0x01);
 8001606:	2001      	movs	r0, #1
 8001608:	f000 f87b 	bl	8001702 <ili9341_Send_Data>

  ili9341_Write_Reg(LCD_PGAMMA);
 800160c:	20e0      	movs	r0, #224	@ 0xe0
 800160e:	f000 f86b 	bl	80016e8 <ili9341_Write_Reg>
  ili9341_Send_Data(0x0F);
 8001612:	200f      	movs	r0, #15
 8001614:	f000 f875 	bl	8001702 <ili9341_Send_Data>
  ili9341_Send_Data(0x29);
 8001618:	2029      	movs	r0, #41	@ 0x29
 800161a:	f000 f872 	bl	8001702 <ili9341_Send_Data>
  ili9341_Send_Data(0x24);
 800161e:	2024      	movs	r0, #36	@ 0x24
 8001620:	f000 f86f 	bl	8001702 <ili9341_Send_Data>
  ili9341_Send_Data(0x0C);
 8001624:	200c      	movs	r0, #12
 8001626:	f000 f86c 	bl	8001702 <ili9341_Send_Data>
  ili9341_Send_Data(0x0E);
 800162a:	200e      	movs	r0, #14
 800162c:	f000 f869 	bl	8001702 <ili9341_Send_Data>
  ili9341_Send_Data(0x09);
 8001630:	2009      	movs	r0, #9
 8001632:	f000 f866 	bl	8001702 <ili9341_Send_Data>
  ili9341_Send_Data(0x4E);
 8001636:	204e      	movs	r0, #78	@ 0x4e
 8001638:	f000 f863 	bl	8001702 <ili9341_Send_Data>
  ili9341_Send_Data(0x78);
 800163c:	2078      	movs	r0, #120	@ 0x78
 800163e:	f000 f860 	bl	8001702 <ili9341_Send_Data>
  ili9341_Send_Data(0x3C);
 8001642:	203c      	movs	r0, #60	@ 0x3c
 8001644:	f000 f85d 	bl	8001702 <ili9341_Send_Data>
  ili9341_Send_Data(0x09);
 8001648:	2009      	movs	r0, #9
 800164a:	f000 f85a 	bl	8001702 <ili9341_Send_Data>
  ili9341_Send_Data(0x13);
 800164e:	2013      	movs	r0, #19
 8001650:	f000 f857 	bl	8001702 <ili9341_Send_Data>
  ili9341_Send_Data(0x05);
 8001654:	2005      	movs	r0, #5
 8001656:	f000 f854 	bl	8001702 <ili9341_Send_Data>
  ili9341_Send_Data(0x17);
 800165a:	2017      	movs	r0, #23
 800165c:	f000 f851 	bl	8001702 <ili9341_Send_Data>
  ili9341_Send_Data(0x11);
 8001660:	2011      	movs	r0, #17
 8001662:	f000 f84e 	bl	8001702 <ili9341_Send_Data>
  ili9341_Send_Data(0x00);
 8001666:	2000      	movs	r0, #0
 8001668:	f000 f84b 	bl	8001702 <ili9341_Send_Data>
  ili9341_Write_Reg(LCD_NGAMMA);
 800166c:	20e1      	movs	r0, #225	@ 0xe1
 800166e:	f000 f83b 	bl	80016e8 <ili9341_Write_Reg>
  ili9341_Send_Data(0x00);
 8001672:	2000      	movs	r0, #0
 8001674:	f000 f845 	bl	8001702 <ili9341_Send_Data>
  ili9341_Send_Data(0x16);
 8001678:	2016      	movs	r0, #22
 800167a:	f000 f842 	bl	8001702 <ili9341_Send_Data>
  ili9341_Send_Data(0x1B);
 800167e:	201b      	movs	r0, #27
 8001680:	f000 f83f 	bl	8001702 <ili9341_Send_Data>
  ili9341_Send_Data(0x04);
 8001684:	2004      	movs	r0, #4
 8001686:	f000 f83c 	bl	8001702 <ili9341_Send_Data>
  ili9341_Send_Data(0x11);
 800168a:	2011      	movs	r0, #17
 800168c:	f000 f839 	bl	8001702 <ili9341_Send_Data>
  ili9341_Send_Data(0x07);
 8001690:	2007      	movs	r0, #7
 8001692:	f000 f836 	bl	8001702 <ili9341_Send_Data>
  ili9341_Send_Data(0x31);
 8001696:	2031      	movs	r0, #49	@ 0x31
 8001698:	f000 f833 	bl	8001702 <ili9341_Send_Data>
  ili9341_Send_Data(0x33);
 800169c:	2033      	movs	r0, #51	@ 0x33
 800169e:	f000 f830 	bl	8001702 <ili9341_Send_Data>
  ili9341_Send_Data(0x42);
 80016a2:	2042      	movs	r0, #66	@ 0x42
 80016a4:	f000 f82d 	bl	8001702 <ili9341_Send_Data>
  ili9341_Send_Data(0x05);
 80016a8:	2005      	movs	r0, #5
 80016aa:	f000 f82a 	bl	8001702 <ili9341_Send_Data>
  ili9341_Send_Data(0x0C);
 80016ae:	200c      	movs	r0, #12
 80016b0:	f000 f827 	bl	8001702 <ili9341_Send_Data>
  ili9341_Send_Data(0x0A);
 80016b4:	200a      	movs	r0, #10
 80016b6:	f000 f824 	bl	8001702 <ili9341_Send_Data>
  ili9341_Send_Data(0x28);
 80016ba:	2028      	movs	r0, #40	@ 0x28
 80016bc:	f000 f821 	bl	8001702 <ili9341_Send_Data>
  ili9341_Send_Data(0x2F);
 80016c0:	202f      	movs	r0, #47	@ 0x2f
 80016c2:	f000 f81e 	bl	8001702 <ili9341_Send_Data>
  ili9341_Send_Data(0x0F);
 80016c6:	200f      	movs	r0, #15
 80016c8:	f000 f81b 	bl	8001702 <ili9341_Send_Data>

  ili9341_Write_Reg(LCD_SLEEP_OUT);
 80016cc:	2011      	movs	r0, #17
 80016ce:	f000 f80b 	bl	80016e8 <ili9341_Write_Reg>
  LCD_Delay(200);
 80016d2:	20c8      	movs	r0, #200	@ 0xc8
 80016d4:	f000 f97c 	bl	80019d0 <LCD_Delay>
  ili9341_Write_Reg(LCD_DISPLAY_ON);
 80016d8:	2029      	movs	r0, #41	@ 0x29
 80016da:	f000 f805 	bl	80016e8 <ili9341_Write_Reg>
  /* GRAM start writing */
  ili9341_Write_Reg(LCD_GRAM);
 80016de:	202c      	movs	r0, #44	@ 0x2c
 80016e0:	f000 f802 	bl	80016e8 <ili9341_Write_Reg>
}
 80016e4:	bf00      	nop
 80016e6:	bd80      	pop	{r7, pc}

080016e8 <ili9341_Write_Reg>:
  * @brief  Writes  to the selected LCD register.
  * @param  LCD_Reg: address of the selected register.
  * @retval None
  */
void ili9341_Write_Reg(uint8_t LCD_Reg)
{
 80016e8:	b580      	push	{r7, lr}
 80016ea:	b082      	sub	sp, #8
 80016ec:	af00      	add	r7, sp, #0
 80016ee:	4603      	mov	r3, r0
 80016f0:	71fb      	strb	r3, [r7, #7]
  LCD_IO_WriteReg(LCD_Reg);
 80016f2:	79fb      	ldrb	r3, [r7, #7]
 80016f4:	4618      	mov	r0, r3
 80016f6:	f000 f949 	bl	800198c <LCD_IO_WriteReg>
}
 80016fa:	bf00      	nop
 80016fc:	3708      	adds	r7, #8
 80016fe:	46bd      	mov	sp, r7
 8001700:	bd80      	pop	{r7, pc}

08001702 <ili9341_Send_Data>:
  * @brief  Writes data to the selected LCD register.
  * @param  LCD_Reg: address of the selected register.
  * @retval None
  */
void ili9341_Send_Data(uint16_t RegValue)
{
 8001702:	b580      	push	{r7, lr}
 8001704:	b082      	sub	sp, #8
 8001706:	af00      	add	r7, sp, #0
 8001708:	4603      	mov	r3, r0
 800170a:	80fb      	strh	r3, [r7, #6]
  LCD_IO_WriteData(RegValue);
 800170c:	88fb      	ldrh	r3, [r7, #6]
 800170e:	4618      	mov	r0, r3
 8001710:	f000 f91a 	bl	8001948 <LCD_IO_WriteData>
}
 8001714:	bf00      	nop
 8001716:	3708      	adds	r7, #8
 8001718:	46bd      	mov	sp, r7
 800171a:	bd80      	pop	{r7, pc}

0800171c <SPI_Init>:

/**
  * @brief  SPI Bus initialization
  */
static void SPI_Init(void)
{
 800171c:	b580      	push	{r7, lr}
 800171e:	af00      	add	r7, sp, #0
  if(HAL_SPI_GetState(&SpiHandle) == HAL_SPI_STATE_RESET)
 8001720:	4819      	ldr	r0, [pc, #100]	@ (8001788 <SPI_Init+0x6c>)
 8001722:	f004 fd39 	bl	8006198 <HAL_SPI_GetState>
 8001726:	4603      	mov	r3, r0
 8001728:	2b00      	cmp	r3, #0
 800172a:	d12b      	bne.n	8001784 <SPI_Init+0x68>
  {
    /* SPI configuration -----------------------------------------------------*/
    SpiHandle.Instance = DISCOVERY_SPI;
 800172c:	4b16      	ldr	r3, [pc, #88]	@ (8001788 <SPI_Init+0x6c>)
 800172e:	4a17      	ldr	r2, [pc, #92]	@ (800178c <SPI_Init+0x70>)
 8001730:	601a      	str	r2, [r3, #0]
       to verify these constraints:
       - ILI9341 LCD SPI interface max baudrate is 10MHz for write and 6.66MHz for read
       - l3gd20 SPI interface max baudrate is 10MHz for write/read
       - PCLK2 frequency is set to 90 MHz
    */
    SpiHandle.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_16;
 8001732:	4b15      	ldr	r3, [pc, #84]	@ (8001788 <SPI_Init+0x6c>)
 8001734:	2218      	movs	r2, #24
 8001736:	61da      	str	r2, [r3, #28]

    /* On STM32F429I-Discovery, LCD ID cannot be read then keep a common configuration */
    /* for LCD and GYRO (SPI_DIRECTION_2LINES) */
    /* Note: To read a register a LCD, SPI_DIRECTION_1LINE should be set */
    SpiHandle.Init.Direction      = SPI_DIRECTION_2LINES;
 8001738:	4b13      	ldr	r3, [pc, #76]	@ (8001788 <SPI_Init+0x6c>)
 800173a:	2200      	movs	r2, #0
 800173c:	609a      	str	r2, [r3, #8]
    SpiHandle.Init.CLKPhase       = SPI_PHASE_1EDGE;
 800173e:	4b12      	ldr	r3, [pc, #72]	@ (8001788 <SPI_Init+0x6c>)
 8001740:	2200      	movs	r2, #0
 8001742:	615a      	str	r2, [r3, #20]
    SpiHandle.Init.CLKPolarity    = SPI_POLARITY_LOW;
 8001744:	4b10      	ldr	r3, [pc, #64]	@ (8001788 <SPI_Init+0x6c>)
 8001746:	2200      	movs	r2, #0
 8001748:	611a      	str	r2, [r3, #16]
    SpiHandle.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLED;
 800174a:	4b0f      	ldr	r3, [pc, #60]	@ (8001788 <SPI_Init+0x6c>)
 800174c:	2200      	movs	r2, #0
 800174e:	629a      	str	r2, [r3, #40]	@ 0x28
    SpiHandle.Init.CRCPolynomial  = 7;
 8001750:	4b0d      	ldr	r3, [pc, #52]	@ (8001788 <SPI_Init+0x6c>)
 8001752:	2207      	movs	r2, #7
 8001754:	62da      	str	r2, [r3, #44]	@ 0x2c
    SpiHandle.Init.DataSize       = SPI_DATASIZE_8BIT;
 8001756:	4b0c      	ldr	r3, [pc, #48]	@ (8001788 <SPI_Init+0x6c>)
 8001758:	2200      	movs	r2, #0
 800175a:	60da      	str	r2, [r3, #12]
    SpiHandle.Init.FirstBit       = SPI_FIRSTBIT_MSB;
 800175c:	4b0a      	ldr	r3, [pc, #40]	@ (8001788 <SPI_Init+0x6c>)
 800175e:	2200      	movs	r2, #0
 8001760:	621a      	str	r2, [r3, #32]
    SpiHandle.Init.NSS            = SPI_NSS_SOFT;
 8001762:	4b09      	ldr	r3, [pc, #36]	@ (8001788 <SPI_Init+0x6c>)
 8001764:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8001768:	619a      	str	r2, [r3, #24]
    SpiHandle.Init.TIMode         = SPI_TIMODE_DISABLED;
 800176a:	4b07      	ldr	r3, [pc, #28]	@ (8001788 <SPI_Init+0x6c>)
 800176c:	2200      	movs	r2, #0
 800176e:	625a      	str	r2, [r3, #36]	@ 0x24
    SpiHandle.Init.Mode           = SPI_MODE_MASTER;
 8001770:	4b05      	ldr	r3, [pc, #20]	@ (8001788 <SPI_Init+0x6c>)
 8001772:	f44f 7282 	mov.w	r2, #260	@ 0x104
 8001776:	605a      	str	r2, [r3, #4]

    SPI_MspInit(&SpiHandle);
 8001778:	4803      	ldr	r0, [pc, #12]	@ (8001788 <SPI_Init+0x6c>)
 800177a:	f000 f833 	bl	80017e4 <SPI_MspInit>
    HAL_SPI_Init(&SpiHandle);
 800177e:	4802      	ldr	r0, [pc, #8]	@ (8001788 <SPI_Init+0x6c>)
 8001780:	f004 fb15 	bl	8005dae <HAL_SPI_Init>
  }
}
 8001784:	bf00      	nop
 8001786:	bd80      	pop	{r7, pc}
 8001788:	20025a14 	.word	0x20025a14
 800178c:	40015000 	.word	0x40015000

08001790 <SPI_Write>:
/**
  * @brief  Writes a byte to device.
  * @param  Value: value to be written
  */
static void SPI_Write(uint16_t Value)
{
 8001790:	b580      	push	{r7, lr}
 8001792:	b084      	sub	sp, #16
 8001794:	af00      	add	r7, sp, #0
 8001796:	4603      	mov	r3, r0
 8001798:	80fb      	strh	r3, [r7, #6]
  HAL_StatusTypeDef status = HAL_OK;
 800179a:	2300      	movs	r3, #0
 800179c:	73fb      	strb	r3, [r7, #15]

  status = HAL_SPI_Transmit(&SpiHandle, (uint8_t*) &Value, 1, SpiTimeout);
 800179e:	4b09      	ldr	r3, [pc, #36]	@ (80017c4 <SPI_Write+0x34>)
 80017a0:	681b      	ldr	r3, [r3, #0]
 80017a2:	1db9      	adds	r1, r7, #6
 80017a4:	2201      	movs	r2, #1
 80017a6:	4808      	ldr	r0, [pc, #32]	@ (80017c8 <SPI_Write+0x38>)
 80017a8:	f004 fbb2 	bl	8005f10 <HAL_SPI_Transmit>
 80017ac:	4603      	mov	r3, r0
 80017ae:	73fb      	strb	r3, [r7, #15]

  /* Check the communication status */
  if(status != HAL_OK)
 80017b0:	7bfb      	ldrb	r3, [r7, #15]
 80017b2:	2b00      	cmp	r3, #0
 80017b4:	d001      	beq.n	80017ba <SPI_Write+0x2a>
  {
    /* Re-Initialize the BUS */
    SPI_Error();
 80017b6:	f000 f809 	bl	80017cc <SPI_Error>
  }
}
 80017ba:	bf00      	nop
 80017bc:	3710      	adds	r7, #16
 80017be:	46bd      	mov	sp, r7
 80017c0:	bd80      	pop	{r7, pc}
 80017c2:	bf00      	nop
 80017c4:	20000014 	.word	0x20000014
 80017c8:	20025a14 	.word	0x20025a14

080017cc <SPI_Error>:

/**
  * @brief  SPI error treatment function.
  */
static void SPI_Error(void)
{
 80017cc:	b580      	push	{r7, lr}
 80017ce:	af00      	add	r7, sp, #0
  /* De-initialize the SPI communication BUS */
  HAL_SPI_DeInit(&SpiHandle);
 80017d0:	4803      	ldr	r0, [pc, #12]	@ (80017e0 <SPI_Error+0x14>)
 80017d2:	f004 fb75 	bl	8005ec0 <HAL_SPI_DeInit>

  /* Re- Initialize the SPI communication BUS */
  SPI_Init();
 80017d6:	f7ff ffa1 	bl	800171c <SPI_Init>
}
 80017da:	bf00      	nop
 80017dc:	bd80      	pop	{r7, pc}
 80017de:	bf00      	nop
 80017e0:	20025a14 	.word	0x20025a14

080017e4 <SPI_MspInit>:
/**
  * @brief  SPI MSP Init.
  * @param  hspi: SPI handle
  */
static void SPI_MspInit(SPI_HandleTypeDef *hspi)
{
 80017e4:	b580      	push	{r7, lr}
 80017e6:	b08a      	sub	sp, #40	@ 0x28
 80017e8:	af00      	add	r7, sp, #0
 80017ea:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef   GPIO_InitStructure;

  /* Enable SPI clock */
  DISCOVERY_SPI_CLK_ENABLE();
 80017ec:	2300      	movs	r3, #0
 80017ee:	613b      	str	r3, [r7, #16]
 80017f0:	4b17      	ldr	r3, [pc, #92]	@ (8001850 <SPI_MspInit+0x6c>)
 80017f2:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80017f4:	4a16      	ldr	r2, [pc, #88]	@ (8001850 <SPI_MspInit+0x6c>)
 80017f6:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 80017fa:	6453      	str	r3, [r2, #68]	@ 0x44
 80017fc:	4b14      	ldr	r3, [pc, #80]	@ (8001850 <SPI_MspInit+0x6c>)
 80017fe:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8001800:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 8001804:	613b      	str	r3, [r7, #16]
 8001806:	693b      	ldr	r3, [r7, #16]

  /* Enable DISCOVERY_SPI GPIO clock */
  DISCOVERY_SPI_GPIO_CLK_ENABLE();
 8001808:	2300      	movs	r3, #0
 800180a:	60fb      	str	r3, [r7, #12]
 800180c:	4b10      	ldr	r3, [pc, #64]	@ (8001850 <SPI_MspInit+0x6c>)
 800180e:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001810:	4a0f      	ldr	r2, [pc, #60]	@ (8001850 <SPI_MspInit+0x6c>)
 8001812:	f043 0320 	orr.w	r3, r3, #32
 8001816:	6313      	str	r3, [r2, #48]	@ 0x30
 8001818:	4b0d      	ldr	r3, [pc, #52]	@ (8001850 <SPI_MspInit+0x6c>)
 800181a:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800181c:	f003 0320 	and.w	r3, r3, #32
 8001820:	60fb      	str	r3, [r7, #12]
 8001822:	68fb      	ldr	r3, [r7, #12]

  /* configure SPI SCK, MOSI and MISO */
  GPIO_InitStructure.Pin    = (DISCOVERY_SPI_SCK_PIN | DISCOVERY_SPI_MOSI_PIN | DISCOVERY_SPI_MISO_PIN);
 8001824:	f44f 7360 	mov.w	r3, #896	@ 0x380
 8001828:	617b      	str	r3, [r7, #20]
  GPIO_InitStructure.Mode   = GPIO_MODE_AF_PP;
 800182a:	2302      	movs	r3, #2
 800182c:	61bb      	str	r3, [r7, #24]
  GPIO_InitStructure.Pull   = GPIO_PULLDOWN;
 800182e:	2302      	movs	r3, #2
 8001830:	61fb      	str	r3, [r7, #28]
  GPIO_InitStructure.Speed  = GPIO_SPEED_MEDIUM;
 8001832:	2301      	movs	r3, #1
 8001834:	623b      	str	r3, [r7, #32]
  GPIO_InitStructure.Alternate = DISCOVERY_SPI_AF;
 8001836:	2305      	movs	r3, #5
 8001838:	627b      	str	r3, [r7, #36]	@ 0x24
  HAL_GPIO_Init(DISCOVERY_SPI_GPIO_PORT, &GPIO_InitStructure);
 800183a:	f107 0314 	add.w	r3, r7, #20
 800183e:	4619      	mov	r1, r3
 8001840:	4804      	ldr	r0, [pc, #16]	@ (8001854 <SPI_MspInit+0x70>)
 8001842:	f001 fdc3 	bl	80033cc <HAL_GPIO_Init>
}
 8001846:	bf00      	nop
 8001848:	3728      	adds	r7, #40	@ 0x28
 800184a:	46bd      	mov	sp, r7
 800184c:	bd80      	pop	{r7, pc}
 800184e:	bf00      	nop
 8001850:	40023800 	.word	0x40023800
 8001854:	40021400 	.word	0x40021400

08001858 <LCD_IO_Init>:

/**
  * @brief  Configures the LCD_SPI interface.
  */
void LCD_IO_Init(void)
{
 8001858:	b580      	push	{r7, lr}
 800185a:	b088      	sub	sp, #32
 800185c:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStructure;

  if(Is_LCD_IO_Initialized == 0)
 800185e:	4b36      	ldr	r3, [pc, #216]	@ (8001938 <LCD_IO_Init+0xe0>)
 8001860:	781b      	ldrb	r3, [r3, #0]
 8001862:	2b00      	cmp	r3, #0
 8001864:	d164      	bne.n	8001930 <LCD_IO_Init+0xd8>
  {
    Is_LCD_IO_Initialized = 1;
 8001866:	4b34      	ldr	r3, [pc, #208]	@ (8001938 <LCD_IO_Init+0xe0>)
 8001868:	2201      	movs	r2, #1
 800186a:	701a      	strb	r2, [r3, #0]

    /* Configure in Output Push-Pull mode */
    LCD_WRX_GPIO_CLK_ENABLE();
 800186c:	2300      	movs	r3, #0
 800186e:	60bb      	str	r3, [r7, #8]
 8001870:	4b32      	ldr	r3, [pc, #200]	@ (800193c <LCD_IO_Init+0xe4>)
 8001872:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001874:	4a31      	ldr	r2, [pc, #196]	@ (800193c <LCD_IO_Init+0xe4>)
 8001876:	f043 0308 	orr.w	r3, r3, #8
 800187a:	6313      	str	r3, [r2, #48]	@ 0x30
 800187c:	4b2f      	ldr	r3, [pc, #188]	@ (800193c <LCD_IO_Init+0xe4>)
 800187e:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001880:	f003 0308 	and.w	r3, r3, #8
 8001884:	60bb      	str	r3, [r7, #8]
 8001886:	68bb      	ldr	r3, [r7, #8]
    GPIO_InitStructure.Pin     = LCD_WRX_PIN;
 8001888:	f44f 5300 	mov.w	r3, #8192	@ 0x2000
 800188c:	60fb      	str	r3, [r7, #12]
    GPIO_InitStructure.Mode    = GPIO_MODE_OUTPUT_PP;
 800188e:	2301      	movs	r3, #1
 8001890:	613b      	str	r3, [r7, #16]
    GPIO_InitStructure.Pull    = GPIO_NOPULL;
 8001892:	2300      	movs	r3, #0
 8001894:	617b      	str	r3, [r7, #20]
    GPIO_InitStructure.Speed   = GPIO_SPEED_FAST;
 8001896:	2302      	movs	r3, #2
 8001898:	61bb      	str	r3, [r7, #24]
    HAL_GPIO_Init(LCD_WRX_GPIO_PORT, &GPIO_InitStructure);
 800189a:	f107 030c 	add.w	r3, r7, #12
 800189e:	4619      	mov	r1, r3
 80018a0:	4827      	ldr	r0, [pc, #156]	@ (8001940 <LCD_IO_Init+0xe8>)
 80018a2:	f001 fd93 	bl	80033cc <HAL_GPIO_Init>

    LCD_RDX_GPIO_CLK_ENABLE();
 80018a6:	2300      	movs	r3, #0
 80018a8:	607b      	str	r3, [r7, #4]
 80018aa:	4b24      	ldr	r3, [pc, #144]	@ (800193c <LCD_IO_Init+0xe4>)
 80018ac:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80018ae:	4a23      	ldr	r2, [pc, #140]	@ (800193c <LCD_IO_Init+0xe4>)
 80018b0:	f043 0308 	orr.w	r3, r3, #8
 80018b4:	6313      	str	r3, [r2, #48]	@ 0x30
 80018b6:	4b21      	ldr	r3, [pc, #132]	@ (800193c <LCD_IO_Init+0xe4>)
 80018b8:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80018ba:	f003 0308 	and.w	r3, r3, #8
 80018be:	607b      	str	r3, [r7, #4]
 80018c0:	687b      	ldr	r3, [r7, #4]
    GPIO_InitStructure.Pin     = LCD_RDX_PIN;
 80018c2:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 80018c6:	60fb      	str	r3, [r7, #12]
    GPIO_InitStructure.Mode    = GPIO_MODE_OUTPUT_PP;
 80018c8:	2301      	movs	r3, #1
 80018ca:	613b      	str	r3, [r7, #16]
    GPIO_InitStructure.Pull    = GPIO_NOPULL;
 80018cc:	2300      	movs	r3, #0
 80018ce:	617b      	str	r3, [r7, #20]
    GPIO_InitStructure.Speed   = GPIO_SPEED_FAST;
 80018d0:	2302      	movs	r3, #2
 80018d2:	61bb      	str	r3, [r7, #24]
    HAL_GPIO_Init(LCD_RDX_GPIO_PORT, &GPIO_InitStructure);
 80018d4:	f107 030c 	add.w	r3, r7, #12
 80018d8:	4619      	mov	r1, r3
 80018da:	4819      	ldr	r0, [pc, #100]	@ (8001940 <LCD_IO_Init+0xe8>)
 80018dc:	f001 fd76 	bl	80033cc <HAL_GPIO_Init>

    /* Configure the LCD Control pins ----------------------------------------*/
    LCD_NCS_GPIO_CLK_ENABLE();
 80018e0:	2300      	movs	r3, #0
 80018e2:	603b      	str	r3, [r7, #0]
 80018e4:	4b15      	ldr	r3, [pc, #84]	@ (800193c <LCD_IO_Init+0xe4>)
 80018e6:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80018e8:	4a14      	ldr	r2, [pc, #80]	@ (800193c <LCD_IO_Init+0xe4>)
 80018ea:	f043 0304 	orr.w	r3, r3, #4
 80018ee:	6313      	str	r3, [r2, #48]	@ 0x30
 80018f0:	4b12      	ldr	r3, [pc, #72]	@ (800193c <LCD_IO_Init+0xe4>)
 80018f2:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80018f4:	f003 0304 	and.w	r3, r3, #4
 80018f8:	603b      	str	r3, [r7, #0]
 80018fa:	683b      	ldr	r3, [r7, #0]

    /* Configure NCS in Output Push-Pull mode */
    GPIO_InitStructure.Pin     = LCD_NCS_PIN;
 80018fc:	2304      	movs	r3, #4
 80018fe:	60fb      	str	r3, [r7, #12]
    GPIO_InitStructure.Mode    = GPIO_MODE_OUTPUT_PP;
 8001900:	2301      	movs	r3, #1
 8001902:	613b      	str	r3, [r7, #16]
    GPIO_InitStructure.Pull    = GPIO_NOPULL;
 8001904:	2300      	movs	r3, #0
 8001906:	617b      	str	r3, [r7, #20]
    GPIO_InitStructure.Speed   = GPIO_SPEED_FAST;
 8001908:	2302      	movs	r3, #2
 800190a:	61bb      	str	r3, [r7, #24]
    HAL_GPIO_Init(LCD_NCS_GPIO_PORT, &GPIO_InitStructure);
 800190c:	f107 030c 	add.w	r3, r7, #12
 8001910:	4619      	mov	r1, r3
 8001912:	480c      	ldr	r0, [pc, #48]	@ (8001944 <LCD_IO_Init+0xec>)
 8001914:	f001 fd5a 	bl	80033cc <HAL_GPIO_Init>

    /* Set or Reset the control line */
    LCD_CS_LOW();
 8001918:	2200      	movs	r2, #0
 800191a:	2104      	movs	r1, #4
 800191c:	4809      	ldr	r0, [pc, #36]	@ (8001944 <LCD_IO_Init+0xec>)
 800191e:	f002 f80d 	bl	800393c <HAL_GPIO_WritePin>
    LCD_CS_HIGH();
 8001922:	2201      	movs	r2, #1
 8001924:	2104      	movs	r1, #4
 8001926:	4807      	ldr	r0, [pc, #28]	@ (8001944 <LCD_IO_Init+0xec>)
 8001928:	f002 f808 	bl	800393c <HAL_GPIO_WritePin>

    SPI_Init();
 800192c:	f7ff fef6 	bl	800171c <SPI_Init>
  }
}
 8001930:	bf00      	nop
 8001932:	3720      	adds	r7, #32
 8001934:	46bd      	mov	sp, r7
 8001936:	bd80      	pop	{r7, pc}
 8001938:	20025a6c 	.word	0x20025a6c
 800193c:	40023800 	.word	0x40023800
 8001940:	40020c00 	.word	0x40020c00
 8001944:	40020800 	.word	0x40020800

08001948 <LCD_IO_WriteData>:

/**
  * @brief  Writes register value.
  */
void LCD_IO_WriteData(uint16_t RegValue)
{
 8001948:	b580      	push	{r7, lr}
 800194a:	b082      	sub	sp, #8
 800194c:	af00      	add	r7, sp, #0
 800194e:	4603      	mov	r3, r0
 8001950:	80fb      	strh	r3, [r7, #6]
  /* Set WRX to send data */
  LCD_WRX_HIGH();
 8001952:	2201      	movs	r2, #1
 8001954:	f44f 5100 	mov.w	r1, #8192	@ 0x2000
 8001958:	480a      	ldr	r0, [pc, #40]	@ (8001984 <LCD_IO_WriteData+0x3c>)
 800195a:	f001 ffef 	bl	800393c <HAL_GPIO_WritePin>

  /* Reset LCD control line(/CS) and Send data */
  LCD_CS_LOW();
 800195e:	2200      	movs	r2, #0
 8001960:	2104      	movs	r1, #4
 8001962:	4809      	ldr	r0, [pc, #36]	@ (8001988 <LCD_IO_WriteData+0x40>)
 8001964:	f001 ffea 	bl	800393c <HAL_GPIO_WritePin>
  SPI_Write(RegValue);
 8001968:	88fb      	ldrh	r3, [r7, #6]
 800196a:	4618      	mov	r0, r3
 800196c:	f7ff ff10 	bl	8001790 <SPI_Write>

  /* Deselect: Chip Select high */
  LCD_CS_HIGH();
 8001970:	2201      	movs	r2, #1
 8001972:	2104      	movs	r1, #4
 8001974:	4804      	ldr	r0, [pc, #16]	@ (8001988 <LCD_IO_WriteData+0x40>)
 8001976:	f001 ffe1 	bl	800393c <HAL_GPIO_WritePin>
}
 800197a:	bf00      	nop
 800197c:	3708      	adds	r7, #8
 800197e:	46bd      	mov	sp, r7
 8001980:	bd80      	pop	{r7, pc}
 8001982:	bf00      	nop
 8001984:	40020c00 	.word	0x40020c00
 8001988:	40020800 	.word	0x40020800

0800198c <LCD_IO_WriteReg>:

/**
  * @brief  Writes register address.
  */
void LCD_IO_WriteReg(uint8_t Reg)
{
 800198c:	b580      	push	{r7, lr}
 800198e:	b082      	sub	sp, #8
 8001990:	af00      	add	r7, sp, #0
 8001992:	4603      	mov	r3, r0
 8001994:	71fb      	strb	r3, [r7, #7]
  /* Reset WRX to send command */
  LCD_WRX_LOW();
 8001996:	2200      	movs	r2, #0
 8001998:	f44f 5100 	mov.w	r1, #8192	@ 0x2000
 800199c:	480a      	ldr	r0, [pc, #40]	@ (80019c8 <LCD_IO_WriteReg+0x3c>)
 800199e:	f001 ffcd 	bl	800393c <HAL_GPIO_WritePin>

  /* Reset LCD control line(/CS) and Send command */
  LCD_CS_LOW();
 80019a2:	2200      	movs	r2, #0
 80019a4:	2104      	movs	r1, #4
 80019a6:	4809      	ldr	r0, [pc, #36]	@ (80019cc <LCD_IO_WriteReg+0x40>)
 80019a8:	f001 ffc8 	bl	800393c <HAL_GPIO_WritePin>
  SPI_Write(Reg);
 80019ac:	79fb      	ldrb	r3, [r7, #7]
 80019ae:	b29b      	uxth	r3, r3
 80019b0:	4618      	mov	r0, r3
 80019b2:	f7ff feed 	bl	8001790 <SPI_Write>

  /* Deselect: Chip Select high */
  LCD_CS_HIGH();
 80019b6:	2201      	movs	r2, #1
 80019b8:	2104      	movs	r1, #4
 80019ba:	4804      	ldr	r0, [pc, #16]	@ (80019cc <LCD_IO_WriteReg+0x40>)
 80019bc:	f001 ffbe 	bl	800393c <HAL_GPIO_WritePin>
}
 80019c0:	bf00      	nop
 80019c2:	3708      	adds	r7, #8
 80019c4:	46bd      	mov	sp, r7
 80019c6:	bd80      	pop	{r7, pc}
 80019c8:	40020c00 	.word	0x40020c00
 80019cc:	40020800 	.word	0x40020800

080019d0 <LCD_Delay>:
/**
  * @brief  Wait for loop in ms.
  * @param  Delay in ms.
  */
void LCD_Delay(uint32_t Delay)
{
 80019d0:	b580      	push	{r7, lr}
 80019d2:	b082      	sub	sp, #8
 80019d4:	af00      	add	r7, sp, #0
 80019d6:	6078      	str	r0, [r7, #4]
  HAL_Delay(Delay);
 80019d8:	6878      	ldr	r0, [r7, #4]
 80019da:	f001 fb4b 	bl	8003074 <HAL_Delay>
}
 80019de:	bf00      	nop
 80019e0:	3708      	adds	r7, #8
 80019e2:	46bd      	mov	sp, r7
 80019e4:	bd80      	pop	{r7, pc}
	...

080019e8 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 80019e8:	b580      	push	{r7, lr}
 80019ea:	b084      	sub	sp, #16
 80019ec:	af02      	add	r7, sp, #8
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 80019ee:	f001 facf 	bl	8002f90 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClockOverride();
 80019f2:	f000 f967 	bl	8001cc4 <SystemClockOverride>


  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 80019f6:	f000 fa11 	bl	8001e1c <MX_GPIO_Init>
  MX_I2C3_Init();
 80019fa:	f000 f827 	bl	8001a4c <MX_I2C3_Init>
  MX_LTDC_Init();
 80019fe:	f000 f865 	bl	8001acc <MX_LTDC_Init>
  MX_RNG_Init();
 8001a02:	f000 f915 	bl	8001c30 <MX_RNG_Init>
  MX_SPI5_Init();
 8001a06:	f000 f927 	bl	8001c58 <MX_SPI5_Init>
  MX_TIM6_Init();
 8001a0a:	f000 f99b 	bl	8001d44 <MX_TIM6_Init>
  MX_TIM7_Init();
 8001a0e:	f000 f9cf 	bl	8001db0 <MX_TIM7_Init>
  ApplicationInit();
 8001a12:	f7fe fdb5 	bl	8000580 <ApplicationInit>
/*
	for (int i = 2; i>0; i--)
		random_block((i), hrng);
*/

  homescreen();
 8001a16:	f7fe fdfb 	bl	8000610 <homescreen>


  LCD_Clear(0,LCD_COLOR_WHITE);
 8001a1a:	f64f 71ff 	movw	r1, #65535	@ 0xffff
 8001a1e:	2000      	movs	r0, #0
 8001a20:	f7ff fbb4 	bl	800118c <LCD_Clear>

  for (uint16_t level = 1; level <= 12; level++)
 8001a24:	2301      	movs	r3, #1
 8001a26:	80fb      	strh	r3, [r7, #6]
 8001a28:	e009      	b.n	8001a3e <main+0x56>
  {
	makeLevel(level, hrng);
 8001a2a:	88f8      	ldrh	r0, [r7, #6]
 8001a2c:	4b06      	ldr	r3, [pc, #24]	@ (8001a48 <main+0x60>)
 8001a2e:	68da      	ldr	r2, [r3, #12]
 8001a30:	9200      	str	r2, [sp, #0]
 8001a32:	cb0e      	ldmia	r3, {r1, r2, r3}
 8001a34:	f7ff f85c 	bl	8000af0 <makeLevel>
  for (uint16_t level = 1; level <= 12; level++)
 8001a38:	88fb      	ldrh	r3, [r7, #6]
 8001a3a:	3301      	adds	r3, #1
 8001a3c:	80fb      	strh	r3, [r7, #6]
 8001a3e:	88fb      	ldrh	r3, [r7, #6]
 8001a40:	2b0c      	cmp	r3, #12
 8001a42:	d9f2      	bls.n	8001a2a <main+0x42>




  /* USER CODE BEGIN WHILE */
  while (1)
 8001a44:	bf00      	nop
 8001a46:	e7fd      	b.n	8001a44 <main+0x5c>
 8001a48:	20025b6c 	.word	0x20025b6c

08001a4c <MX_I2C3_Init>:
  * @brief I2C3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_I2C3_Init(void)
{
 8001a4c:	b580      	push	{r7, lr}
 8001a4e:	af00      	add	r7, sp, #0
  /* USER CODE END I2C3_Init 0 */

  /* USER CODE BEGIN I2C3_Init 1 */

  /* USER CODE END I2C3_Init 1 */
  hi2c3.Instance = I2C3;
 8001a50:	4b1b      	ldr	r3, [pc, #108]	@ (8001ac0 <MX_I2C3_Init+0x74>)
 8001a52:	4a1c      	ldr	r2, [pc, #112]	@ (8001ac4 <MX_I2C3_Init+0x78>)
 8001a54:	601a      	str	r2, [r3, #0]
  hi2c3.Init.ClockSpeed = 100000;
 8001a56:	4b1a      	ldr	r3, [pc, #104]	@ (8001ac0 <MX_I2C3_Init+0x74>)
 8001a58:	4a1b      	ldr	r2, [pc, #108]	@ (8001ac8 <MX_I2C3_Init+0x7c>)
 8001a5a:	605a      	str	r2, [r3, #4]
  hi2c3.Init.DutyCycle = I2C_DUTYCYCLE_2;
 8001a5c:	4b18      	ldr	r3, [pc, #96]	@ (8001ac0 <MX_I2C3_Init+0x74>)
 8001a5e:	2200      	movs	r2, #0
 8001a60:	609a      	str	r2, [r3, #8]
  hi2c3.Init.OwnAddress1 = 0;
 8001a62:	4b17      	ldr	r3, [pc, #92]	@ (8001ac0 <MX_I2C3_Init+0x74>)
 8001a64:	2200      	movs	r2, #0
 8001a66:	60da      	str	r2, [r3, #12]
  hi2c3.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 8001a68:	4b15      	ldr	r3, [pc, #84]	@ (8001ac0 <MX_I2C3_Init+0x74>)
 8001a6a:	f44f 4280 	mov.w	r2, #16384	@ 0x4000
 8001a6e:	611a      	str	r2, [r3, #16]
  hi2c3.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 8001a70:	4b13      	ldr	r3, [pc, #76]	@ (8001ac0 <MX_I2C3_Init+0x74>)
 8001a72:	2200      	movs	r2, #0
 8001a74:	615a      	str	r2, [r3, #20]
  hi2c3.Init.OwnAddress2 = 0;
 8001a76:	4b12      	ldr	r3, [pc, #72]	@ (8001ac0 <MX_I2C3_Init+0x74>)
 8001a78:	2200      	movs	r2, #0
 8001a7a:	619a      	str	r2, [r3, #24]
  hi2c3.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 8001a7c:	4b10      	ldr	r3, [pc, #64]	@ (8001ac0 <MX_I2C3_Init+0x74>)
 8001a7e:	2200      	movs	r2, #0
 8001a80:	61da      	str	r2, [r3, #28]
  hi2c3.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 8001a82:	4b0f      	ldr	r3, [pc, #60]	@ (8001ac0 <MX_I2C3_Init+0x74>)
 8001a84:	2200      	movs	r2, #0
 8001a86:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c3) != HAL_OK)
 8001a88:	480d      	ldr	r0, [pc, #52]	@ (8001ac0 <MX_I2C3_Init+0x74>)
 8001a8a:	f001 ff71 	bl	8003970 <HAL_I2C_Init>
 8001a8e:	4603      	mov	r3, r0
 8001a90:	2b00      	cmp	r3, #0
 8001a92:	d001      	beq.n	8001a98 <MX_I2C3_Init+0x4c>
  {
    Error_Handler();
 8001a94:	f000 fb70 	bl	8002178 <Error_Handler>
  }

  /** Configure Analogue filter
  */
  if (HAL_I2CEx_ConfigAnalogFilter(&hi2c3, I2C_ANALOGFILTER_ENABLE) != HAL_OK)
 8001a98:	2100      	movs	r1, #0
 8001a9a:	4809      	ldr	r0, [pc, #36]	@ (8001ac0 <MX_I2C3_Init+0x74>)
 8001a9c:	f002 ff8c 	bl	80049b8 <HAL_I2CEx_ConfigAnalogFilter>
 8001aa0:	4603      	mov	r3, r0
 8001aa2:	2b00      	cmp	r3, #0
 8001aa4:	d001      	beq.n	8001aaa <MX_I2C3_Init+0x5e>
  {
    Error_Handler();
 8001aa6:	f000 fb67 	bl	8002178 <Error_Handler>
  }

  /** Configure Digital filter
  */
  if (HAL_I2CEx_ConfigDigitalFilter(&hi2c3, 0) != HAL_OK)
 8001aaa:	2100      	movs	r1, #0
 8001aac:	4804      	ldr	r0, [pc, #16]	@ (8001ac0 <MX_I2C3_Init+0x74>)
 8001aae:	f002 ffbf 	bl	8004a30 <HAL_I2CEx_ConfigDigitalFilter>
 8001ab2:	4603      	mov	r3, r0
 8001ab4:	2b00      	cmp	r3, #0
 8001ab6:	d001      	beq.n	8001abc <MX_I2C3_Init+0x70>
  {
    Error_Handler();
 8001ab8:	f000 fb5e 	bl	8002178 <Error_Handler>
  }
  /* USER CODE BEGIN I2C3_Init 2 */

  /* USER CODE END I2C3_Init 2 */

}
 8001abc:	bf00      	nop
 8001abe:	bd80      	pop	{r7, pc}
 8001ac0:	20025a70 	.word	0x20025a70
 8001ac4:	40005c00 	.word	0x40005c00
 8001ac8:	000186a0 	.word	0x000186a0

08001acc <MX_LTDC_Init>:
  * @brief LTDC Initialization Function
  * @param None
  * @retval None
  */
static void MX_LTDC_Init(void)
{
 8001acc:	b580      	push	{r7, lr}
 8001ace:	b09a      	sub	sp, #104	@ 0x68
 8001ad0:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN LTDC_Init 0 */

  /* USER CODE END LTDC_Init 0 */

  LTDC_LayerCfgTypeDef pLayerCfg = {0};
 8001ad2:	f107 0334 	add.w	r3, r7, #52	@ 0x34
 8001ad6:	2234      	movs	r2, #52	@ 0x34
 8001ad8:	2100      	movs	r1, #0
 8001ada:	4618      	mov	r0, r3
 8001adc:	f004 ff6a 	bl	80069b4 <memset>
  LTDC_LayerCfgTypeDef pLayerCfg1 = {0};
 8001ae0:	463b      	mov	r3, r7
 8001ae2:	2234      	movs	r2, #52	@ 0x34
 8001ae4:	2100      	movs	r1, #0
 8001ae6:	4618      	mov	r0, r3
 8001ae8:	f004 ff64 	bl	80069b4 <memset>

  /* USER CODE BEGIN LTDC_Init 1 */

  /* USER CODE END LTDC_Init 1 */
  hltdc.Instance = LTDC;
 8001aec:	4b4e      	ldr	r3, [pc, #312]	@ (8001c28 <MX_LTDC_Init+0x15c>)
 8001aee:	4a4f      	ldr	r2, [pc, #316]	@ (8001c2c <MX_LTDC_Init+0x160>)
 8001af0:	601a      	str	r2, [r3, #0]
  hltdc.Init.HSPolarity = LTDC_HSPOLARITY_AL;
 8001af2:	4b4d      	ldr	r3, [pc, #308]	@ (8001c28 <MX_LTDC_Init+0x15c>)
 8001af4:	2200      	movs	r2, #0
 8001af6:	605a      	str	r2, [r3, #4]
  hltdc.Init.VSPolarity = LTDC_VSPOLARITY_AL;
 8001af8:	4b4b      	ldr	r3, [pc, #300]	@ (8001c28 <MX_LTDC_Init+0x15c>)
 8001afa:	2200      	movs	r2, #0
 8001afc:	609a      	str	r2, [r3, #8]
  hltdc.Init.DEPolarity = LTDC_DEPOLARITY_AL;
 8001afe:	4b4a      	ldr	r3, [pc, #296]	@ (8001c28 <MX_LTDC_Init+0x15c>)
 8001b00:	2200      	movs	r2, #0
 8001b02:	60da      	str	r2, [r3, #12]
  hltdc.Init.PCPolarity = LTDC_PCPOLARITY_IPC;
 8001b04:	4b48      	ldr	r3, [pc, #288]	@ (8001c28 <MX_LTDC_Init+0x15c>)
 8001b06:	2200      	movs	r2, #0
 8001b08:	611a      	str	r2, [r3, #16]
  hltdc.Init.HorizontalSync = 7;
 8001b0a:	4b47      	ldr	r3, [pc, #284]	@ (8001c28 <MX_LTDC_Init+0x15c>)
 8001b0c:	2207      	movs	r2, #7
 8001b0e:	615a      	str	r2, [r3, #20]
  hltdc.Init.VerticalSync = 3;
 8001b10:	4b45      	ldr	r3, [pc, #276]	@ (8001c28 <MX_LTDC_Init+0x15c>)
 8001b12:	2203      	movs	r2, #3
 8001b14:	619a      	str	r2, [r3, #24]
  hltdc.Init.AccumulatedHBP = 14;
 8001b16:	4b44      	ldr	r3, [pc, #272]	@ (8001c28 <MX_LTDC_Init+0x15c>)
 8001b18:	220e      	movs	r2, #14
 8001b1a:	61da      	str	r2, [r3, #28]
  hltdc.Init.AccumulatedVBP = 5;
 8001b1c:	4b42      	ldr	r3, [pc, #264]	@ (8001c28 <MX_LTDC_Init+0x15c>)
 8001b1e:	2205      	movs	r2, #5
 8001b20:	621a      	str	r2, [r3, #32]
  hltdc.Init.AccumulatedActiveW = 654;
 8001b22:	4b41      	ldr	r3, [pc, #260]	@ (8001c28 <MX_LTDC_Init+0x15c>)
 8001b24:	f240 228e 	movw	r2, #654	@ 0x28e
 8001b28:	625a      	str	r2, [r3, #36]	@ 0x24
  hltdc.Init.AccumulatedActiveH = 485;
 8001b2a:	4b3f      	ldr	r3, [pc, #252]	@ (8001c28 <MX_LTDC_Init+0x15c>)
 8001b2c:	f240 12e5 	movw	r2, #485	@ 0x1e5
 8001b30:	629a      	str	r2, [r3, #40]	@ 0x28
  hltdc.Init.TotalWidth = 660;
 8001b32:	4b3d      	ldr	r3, [pc, #244]	@ (8001c28 <MX_LTDC_Init+0x15c>)
 8001b34:	f44f 7225 	mov.w	r2, #660	@ 0x294
 8001b38:	62da      	str	r2, [r3, #44]	@ 0x2c
  hltdc.Init.TotalHeigh = 487;
 8001b3a:	4b3b      	ldr	r3, [pc, #236]	@ (8001c28 <MX_LTDC_Init+0x15c>)
 8001b3c:	f240 12e7 	movw	r2, #487	@ 0x1e7
 8001b40:	631a      	str	r2, [r3, #48]	@ 0x30
  hltdc.Init.Backcolor.Blue = 0;
 8001b42:	4b39      	ldr	r3, [pc, #228]	@ (8001c28 <MX_LTDC_Init+0x15c>)
 8001b44:	2200      	movs	r2, #0
 8001b46:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
  hltdc.Init.Backcolor.Green = 0;
 8001b4a:	4b37      	ldr	r3, [pc, #220]	@ (8001c28 <MX_LTDC_Init+0x15c>)
 8001b4c:	2200      	movs	r2, #0
 8001b4e:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35
  hltdc.Init.Backcolor.Red = 0;
 8001b52:	4b35      	ldr	r3, [pc, #212]	@ (8001c28 <MX_LTDC_Init+0x15c>)
 8001b54:	2200      	movs	r2, #0
 8001b56:	f883 2036 	strb.w	r2, [r3, #54]	@ 0x36
  if (HAL_LTDC_Init(&hltdc) != HAL_OK)
 8001b5a:	4833      	ldr	r0, [pc, #204]	@ (8001c28 <MX_LTDC_Init+0x15c>)
 8001b5c:	f002 ffa8 	bl	8004ab0 <HAL_LTDC_Init>
 8001b60:	4603      	mov	r3, r0
 8001b62:	2b00      	cmp	r3, #0
 8001b64:	d001      	beq.n	8001b6a <MX_LTDC_Init+0x9e>
  {
    Error_Handler();
 8001b66:	f000 fb07 	bl	8002178 <Error_Handler>
  }
  pLayerCfg.WindowX0 = 0;
 8001b6a:	2300      	movs	r3, #0
 8001b6c:	637b      	str	r3, [r7, #52]	@ 0x34
  pLayerCfg.WindowX1 = 0;
 8001b6e:	2300      	movs	r3, #0
 8001b70:	63bb      	str	r3, [r7, #56]	@ 0x38
  pLayerCfg.WindowY0 = 0;
 8001b72:	2300      	movs	r3, #0
 8001b74:	63fb      	str	r3, [r7, #60]	@ 0x3c
  pLayerCfg.WindowY1 = 0;
 8001b76:	2300      	movs	r3, #0
 8001b78:	643b      	str	r3, [r7, #64]	@ 0x40
  pLayerCfg.PixelFormat = LTDC_PIXEL_FORMAT_ARGB8888;
 8001b7a:	2300      	movs	r3, #0
 8001b7c:	647b      	str	r3, [r7, #68]	@ 0x44
  pLayerCfg.Alpha = 0;
 8001b7e:	2300      	movs	r3, #0
 8001b80:	64bb      	str	r3, [r7, #72]	@ 0x48
  pLayerCfg.Alpha0 = 0;
 8001b82:	2300      	movs	r3, #0
 8001b84:	64fb      	str	r3, [r7, #76]	@ 0x4c
  pLayerCfg.BlendingFactor1 = LTDC_BLENDING_FACTOR1_CA;
 8001b86:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 8001b8a:	653b      	str	r3, [r7, #80]	@ 0x50
  pLayerCfg.BlendingFactor2 = LTDC_BLENDING_FACTOR2_CA;
 8001b8c:	2305      	movs	r3, #5
 8001b8e:	657b      	str	r3, [r7, #84]	@ 0x54
  pLayerCfg.FBStartAdress = 0;
 8001b90:	2300      	movs	r3, #0
 8001b92:	65bb      	str	r3, [r7, #88]	@ 0x58
  pLayerCfg.ImageWidth = 0;
 8001b94:	2300      	movs	r3, #0
 8001b96:	65fb      	str	r3, [r7, #92]	@ 0x5c
  pLayerCfg.ImageHeight = 0;
 8001b98:	2300      	movs	r3, #0
 8001b9a:	663b      	str	r3, [r7, #96]	@ 0x60
  pLayerCfg.Backcolor.Blue = 0;
 8001b9c:	2300      	movs	r3, #0
 8001b9e:	f887 3064 	strb.w	r3, [r7, #100]	@ 0x64
  pLayerCfg.Backcolor.Green = 0;
 8001ba2:	2300      	movs	r3, #0
 8001ba4:	f887 3065 	strb.w	r3, [r7, #101]	@ 0x65
  pLayerCfg.Backcolor.Red = 0;
 8001ba8:	2300      	movs	r3, #0
 8001baa:	f887 3066 	strb.w	r3, [r7, #102]	@ 0x66
  if (HAL_LTDC_ConfigLayer(&hltdc, &pLayerCfg, 0) != HAL_OK)
 8001bae:	f107 0334 	add.w	r3, r7, #52	@ 0x34
 8001bb2:	2200      	movs	r2, #0
 8001bb4:	4619      	mov	r1, r3
 8001bb6:	481c      	ldr	r0, [pc, #112]	@ (8001c28 <MX_LTDC_Init+0x15c>)
 8001bb8:	f003 f84a 	bl	8004c50 <HAL_LTDC_ConfigLayer>
 8001bbc:	4603      	mov	r3, r0
 8001bbe:	2b00      	cmp	r3, #0
 8001bc0:	d001      	beq.n	8001bc6 <MX_LTDC_Init+0xfa>
  {
    Error_Handler();
 8001bc2:	f000 fad9 	bl	8002178 <Error_Handler>
  }
  pLayerCfg1.WindowX0 = 0;
 8001bc6:	2300      	movs	r3, #0
 8001bc8:	603b      	str	r3, [r7, #0]
  pLayerCfg1.WindowX1 = 0;
 8001bca:	2300      	movs	r3, #0
 8001bcc:	607b      	str	r3, [r7, #4]
  pLayerCfg1.WindowY0 = 0;
 8001bce:	2300      	movs	r3, #0
 8001bd0:	60bb      	str	r3, [r7, #8]
  pLayerCfg1.WindowY1 = 0;
 8001bd2:	2300      	movs	r3, #0
 8001bd4:	60fb      	str	r3, [r7, #12]
  pLayerCfg1.PixelFormat = LTDC_PIXEL_FORMAT_ARGB8888;
 8001bd6:	2300      	movs	r3, #0
 8001bd8:	613b      	str	r3, [r7, #16]
  pLayerCfg1.Alpha = 0;
 8001bda:	2300      	movs	r3, #0
 8001bdc:	617b      	str	r3, [r7, #20]
  pLayerCfg1.Alpha0 = 0;
 8001bde:	2300      	movs	r3, #0
 8001be0:	61bb      	str	r3, [r7, #24]
  pLayerCfg1.BlendingFactor1 = LTDC_BLENDING_FACTOR1_CA;
 8001be2:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 8001be6:	61fb      	str	r3, [r7, #28]
  pLayerCfg1.BlendingFactor2 = LTDC_BLENDING_FACTOR2_CA;
 8001be8:	2305      	movs	r3, #5
 8001bea:	623b      	str	r3, [r7, #32]
  pLayerCfg1.FBStartAdress = 0;
 8001bec:	2300      	movs	r3, #0
 8001bee:	627b      	str	r3, [r7, #36]	@ 0x24
  pLayerCfg1.ImageWidth = 0;
 8001bf0:	2300      	movs	r3, #0
 8001bf2:	62bb      	str	r3, [r7, #40]	@ 0x28
  pLayerCfg1.ImageHeight = 0;
 8001bf4:	2300      	movs	r3, #0
 8001bf6:	62fb      	str	r3, [r7, #44]	@ 0x2c
  pLayerCfg1.Backcolor.Blue = 0;
 8001bf8:	2300      	movs	r3, #0
 8001bfa:	f887 3030 	strb.w	r3, [r7, #48]	@ 0x30
  pLayerCfg1.Backcolor.Green = 0;
 8001bfe:	2300      	movs	r3, #0
 8001c00:	f887 3031 	strb.w	r3, [r7, #49]	@ 0x31
  pLayerCfg1.Backcolor.Red = 0;
 8001c04:	2300      	movs	r3, #0
 8001c06:	f887 3032 	strb.w	r3, [r7, #50]	@ 0x32
  if (HAL_LTDC_ConfigLayer(&hltdc, &pLayerCfg1, 1) != HAL_OK)
 8001c0a:	463b      	mov	r3, r7
 8001c0c:	2201      	movs	r2, #1
 8001c0e:	4619      	mov	r1, r3
 8001c10:	4805      	ldr	r0, [pc, #20]	@ (8001c28 <MX_LTDC_Init+0x15c>)
 8001c12:	f003 f81d 	bl	8004c50 <HAL_LTDC_ConfigLayer>
 8001c16:	4603      	mov	r3, r0
 8001c18:	2b00      	cmp	r3, #0
 8001c1a:	d001      	beq.n	8001c20 <MX_LTDC_Init+0x154>
  {
    Error_Handler();
 8001c1c:	f000 faac 	bl	8002178 <Error_Handler>
  }
  /* USER CODE BEGIN LTDC_Init 2 */

  /* USER CODE END LTDC_Init 2 */

}
 8001c20:	bf00      	nop
 8001c22:	3768      	adds	r7, #104	@ 0x68
 8001c24:	46bd      	mov	sp, r7
 8001c26:	bd80      	pop	{r7, pc}
 8001c28:	20025ac4 	.word	0x20025ac4
 8001c2c:	40016800 	.word	0x40016800

08001c30 <MX_RNG_Init>:
  * @brief RNG Initialization Function
  * @param None
  * @retval None
  */
static void MX_RNG_Init(void)
{
 8001c30:	b580      	push	{r7, lr}
 8001c32:	af00      	add	r7, sp, #0
  /* USER CODE END RNG_Init 0 */

  /* USER CODE BEGIN RNG_Init 1 */

  /* USER CODE END RNG_Init 1 */
  hrng.Instance = RNG;
 8001c34:	4b06      	ldr	r3, [pc, #24]	@ (8001c50 <MX_RNG_Init+0x20>)
 8001c36:	4a07      	ldr	r2, [pc, #28]	@ (8001c54 <MX_RNG_Init+0x24>)
 8001c38:	601a      	str	r2, [r3, #0]
  if (HAL_RNG_Init(&hrng) != HAL_OK)
 8001c3a:	4805      	ldr	r0, [pc, #20]	@ (8001c50 <MX_RNG_Init+0x20>)
 8001c3c:	f004 f822 	bl	8005c84 <HAL_RNG_Init>
 8001c40:	4603      	mov	r3, r0
 8001c42:	2b00      	cmp	r3, #0
 8001c44:	d001      	beq.n	8001c4a <MX_RNG_Init+0x1a>
  {
    Error_Handler();
 8001c46:	f000 fa97 	bl	8002178 <Error_Handler>
  }
  /* USER CODE BEGIN RNG_Init 2 */

  /* USER CODE END RNG_Init 2 */

}
 8001c4a:	bf00      	nop
 8001c4c:	bd80      	pop	{r7, pc}
 8001c4e:	bf00      	nop
 8001c50:	20025b6c 	.word	0x20025b6c
 8001c54:	50060800 	.word	0x50060800

08001c58 <MX_SPI5_Init>:
  * @brief SPI5 Initialization Function
  * @param None
  * @retval None
  */
static void MX_SPI5_Init(void)
{
 8001c58:	b580      	push	{r7, lr}
 8001c5a:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN SPI5_Init 1 */

  /* USER CODE END SPI5_Init 1 */
  /* SPI5 parameter configuration*/
  hspi5.Instance = SPI5;
 8001c5c:	4b17      	ldr	r3, [pc, #92]	@ (8001cbc <MX_SPI5_Init+0x64>)
 8001c5e:	4a18      	ldr	r2, [pc, #96]	@ (8001cc0 <MX_SPI5_Init+0x68>)
 8001c60:	601a      	str	r2, [r3, #0]
  hspi5.Init.Mode = SPI_MODE_MASTER;
 8001c62:	4b16      	ldr	r3, [pc, #88]	@ (8001cbc <MX_SPI5_Init+0x64>)
 8001c64:	f44f 7282 	mov.w	r2, #260	@ 0x104
 8001c68:	605a      	str	r2, [r3, #4]
  hspi5.Init.Direction = SPI_DIRECTION_2LINES;
 8001c6a:	4b14      	ldr	r3, [pc, #80]	@ (8001cbc <MX_SPI5_Init+0x64>)
 8001c6c:	2200      	movs	r2, #0
 8001c6e:	609a      	str	r2, [r3, #8]
  hspi5.Init.DataSize = SPI_DATASIZE_8BIT;
 8001c70:	4b12      	ldr	r3, [pc, #72]	@ (8001cbc <MX_SPI5_Init+0x64>)
 8001c72:	2200      	movs	r2, #0
 8001c74:	60da      	str	r2, [r3, #12]
  hspi5.Init.CLKPolarity = SPI_POLARITY_LOW;
 8001c76:	4b11      	ldr	r3, [pc, #68]	@ (8001cbc <MX_SPI5_Init+0x64>)
 8001c78:	2200      	movs	r2, #0
 8001c7a:	611a      	str	r2, [r3, #16]
  hspi5.Init.CLKPhase = SPI_PHASE_1EDGE;
 8001c7c:	4b0f      	ldr	r3, [pc, #60]	@ (8001cbc <MX_SPI5_Init+0x64>)
 8001c7e:	2200      	movs	r2, #0
 8001c80:	615a      	str	r2, [r3, #20]
  hspi5.Init.NSS = SPI_NSS_SOFT;
 8001c82:	4b0e      	ldr	r3, [pc, #56]	@ (8001cbc <MX_SPI5_Init+0x64>)
 8001c84:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8001c88:	619a      	str	r2, [r3, #24]
  hspi5.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 8001c8a:	4b0c      	ldr	r3, [pc, #48]	@ (8001cbc <MX_SPI5_Init+0x64>)
 8001c8c:	2200      	movs	r2, #0
 8001c8e:	61da      	str	r2, [r3, #28]
  hspi5.Init.FirstBit = SPI_FIRSTBIT_MSB;
 8001c90:	4b0a      	ldr	r3, [pc, #40]	@ (8001cbc <MX_SPI5_Init+0x64>)
 8001c92:	2200      	movs	r2, #0
 8001c94:	621a      	str	r2, [r3, #32]
  hspi5.Init.TIMode = SPI_TIMODE_DISABLE;
 8001c96:	4b09      	ldr	r3, [pc, #36]	@ (8001cbc <MX_SPI5_Init+0x64>)
 8001c98:	2200      	movs	r2, #0
 8001c9a:	625a      	str	r2, [r3, #36]	@ 0x24
  hspi5.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8001c9c:	4b07      	ldr	r3, [pc, #28]	@ (8001cbc <MX_SPI5_Init+0x64>)
 8001c9e:	2200      	movs	r2, #0
 8001ca0:	629a      	str	r2, [r3, #40]	@ 0x28
  hspi5.Init.CRCPolynomial = 10;
 8001ca2:	4b06      	ldr	r3, [pc, #24]	@ (8001cbc <MX_SPI5_Init+0x64>)
 8001ca4:	220a      	movs	r2, #10
 8001ca6:	62da      	str	r2, [r3, #44]	@ 0x2c
  if (HAL_SPI_Init(&hspi5) != HAL_OK)
 8001ca8:	4804      	ldr	r0, [pc, #16]	@ (8001cbc <MX_SPI5_Init+0x64>)
 8001caa:	f004 f880 	bl	8005dae <HAL_SPI_Init>
 8001cae:	4603      	mov	r3, r0
 8001cb0:	2b00      	cmp	r3, #0
 8001cb2:	d001      	beq.n	8001cb8 <MX_SPI5_Init+0x60>
  {
    Error_Handler();
 8001cb4:	f000 fa60 	bl	8002178 <Error_Handler>
  }
  /* USER CODE BEGIN SPI5_Init 2 */

  /* USER CODE END SPI5_Init 2 */

}
 8001cb8:	bf00      	nop
 8001cba:	bd80      	pop	{r7, pc}
 8001cbc:	20025b7c 	.word	0x20025b7c
 8001cc0:	40015000 	.word	0x40015000

08001cc4 <SystemClockOverride>:

void SystemClockOverride(void)
{
 8001cc4:	b580      	push	{r7, lr}
 8001cc6:	b092      	sub	sp, #72	@ 0x48
 8001cc8:	af00      	add	r7, sp, #0
  RCC_ClkInitTypeDef RCC_ClkInitStruct;
  RCC_OscInitTypeDef RCC_OscInitStruct;

  __HAL_RCC_PWR_CLK_ENABLE();
 8001cca:	2300      	movs	r3, #0
 8001ccc:	603b      	str	r3, [r7, #0]
 8001cce:	4b1c      	ldr	r3, [pc, #112]	@ (8001d40 <SystemClockOverride+0x7c>)
 8001cd0:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001cd2:	4a1b      	ldr	r2, [pc, #108]	@ (8001d40 <SystemClockOverride+0x7c>)
 8001cd4:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8001cd8:	6413      	str	r3, [r2, #64]	@ 0x40
 8001cda:	4b19      	ldr	r3, [pc, #100]	@ (8001d40 <SystemClockOverride+0x7c>)
 8001cdc:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001cde:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8001ce2:	603b      	str	r3, [r7, #0]
 8001ce4:	683b      	ldr	r3, [r7, #0]

  // __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1); // not needed, power scaling consumption for when not running at max freq.

  /* Enable HSE Osc and activate PLL with HSE source */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 8001ce6:	2301      	movs	r3, #1
 8001ce8:	607b      	str	r3, [r7, #4]
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 8001cea:	f44f 3380 	mov.w	r3, #65536	@ 0x10000
 8001cee:	60bb      	str	r3, [r7, #8]
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8001cf0:	2302      	movs	r3, #2
 8001cf2:	61fb      	str	r3, [r7, #28]
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 8001cf4:	f44f 0380 	mov.w	r3, #4194304	@ 0x400000
 8001cf8:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.PLL.PLLM = 8;
 8001cfa:	2308      	movs	r3, #8
 8001cfc:	627b      	str	r3, [r7, #36]	@ 0x24
  RCC_OscInitStruct.PLL.PLLN = 336;
 8001cfe:	f44f 73a8 	mov.w	r3, #336	@ 0x150
 8001d02:	62bb      	str	r3, [r7, #40]	@ 0x28
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 8001d04:	2302      	movs	r3, #2
 8001d06:	62fb      	str	r3, [r7, #44]	@ 0x2c
  RCC_OscInitStruct.PLL.PLLQ = 7;
 8001d08:	2307      	movs	r3, #7
 8001d0a:	633b      	str	r3, [r7, #48]	@ 0x30
  HAL_RCC_OscConfig(&RCC_OscInitStruct);
 8001d0c:	1d3b      	adds	r3, r7, #4
 8001d0e:	4618      	mov	r0, r3
 8001d10:	f003 f974 	bl	8004ffc <HAL_RCC_OscConfig>

  /* Select PLL as system clock source and configure the HCLK, PCLK1 and PCLK2 clocks dividers */
  RCC_ClkInitStruct.ClockType = (RCC_CLOCKTYPE_SYSCLK | RCC_CLOCKTYPE_HCLK | RCC_CLOCKTYPE_PCLK1 | RCC_CLOCKTYPE_PCLK2);
 8001d14:	230f      	movs	r3, #15
 8001d16:	637b      	str	r3, [r7, #52]	@ 0x34
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8001d18:	2302      	movs	r3, #2
 8001d1a:	63bb      	str	r3, [r7, #56]	@ 0x38
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8001d1c:	2300      	movs	r3, #0
 8001d1e:	63fb      	str	r3, [r7, #60]	@ 0x3c
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV4;
 8001d20:	f44f 53a0 	mov.w	r3, #5120	@ 0x1400
 8001d24:	643b      	str	r3, [r7, #64]	@ 0x40
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV2;
 8001d26:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 8001d2a:	647b      	str	r3, [r7, #68]	@ 0x44
  HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_5);
 8001d2c:	f107 0334 	add.w	r3, r7, #52	@ 0x34
 8001d30:	2105      	movs	r1, #5
 8001d32:	4618      	mov	r0, r3
 8001d34:	f003 fbda 	bl	80054ec <HAL_RCC_ClockConfig>
}
 8001d38:	bf00      	nop
 8001d3a:	3748      	adds	r7, #72	@ 0x48
 8001d3c:	46bd      	mov	sp, r7
 8001d3e:	bd80      	pop	{r7, pc}
 8001d40:	40023800 	.word	0x40023800

08001d44 <MX_TIM6_Init>:
  * @brief TIM6 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM6_Init(void)
{
 8001d44:	b580      	push	{r7, lr}
 8001d46:	b082      	sub	sp, #8
 8001d48:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM6_Init 0 */

  /* USER CODE END TIM6_Init 0 */

  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8001d4a:	463b      	mov	r3, r7
 8001d4c:	2200      	movs	r2, #0
 8001d4e:	601a      	str	r2, [r3, #0]
 8001d50:	605a      	str	r2, [r3, #4]

  /* USER CODE BEGIN TIM6_Init 1 */

  /* USER CODE END TIM6_Init 1 */
  htim6.Instance = TIM6;
 8001d52:	4b15      	ldr	r3, [pc, #84]	@ (8001da8 <MX_TIM6_Init+0x64>)
 8001d54:	4a15      	ldr	r2, [pc, #84]	@ (8001dac <MX_TIM6_Init+0x68>)
 8001d56:	601a      	str	r2, [r3, #0]
  htim6.Init.Prescaler = 0;
 8001d58:	4b13      	ldr	r3, [pc, #76]	@ (8001da8 <MX_TIM6_Init+0x64>)
 8001d5a:	2200      	movs	r2, #0
 8001d5c:	605a      	str	r2, [r3, #4]
  htim6.Init.CounterMode = TIM_COUNTERMODE_UP;
 8001d5e:	4b12      	ldr	r3, [pc, #72]	@ (8001da8 <MX_TIM6_Init+0x64>)
 8001d60:	2200      	movs	r2, #0
 8001d62:	609a      	str	r2, [r3, #8]
  htim6.Init.Period = 65535;
 8001d64:	4b10      	ldr	r3, [pc, #64]	@ (8001da8 <MX_TIM6_Init+0x64>)
 8001d66:	f64f 72ff 	movw	r2, #65535	@ 0xffff
 8001d6a:	60da      	str	r2, [r3, #12]
  htim6.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8001d6c:	4b0e      	ldr	r3, [pc, #56]	@ (8001da8 <MX_TIM6_Init+0x64>)
 8001d6e:	2200      	movs	r2, #0
 8001d70:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim6) != HAL_OK)
 8001d72:	480d      	ldr	r0, [pc, #52]	@ (8001da8 <MX_TIM6_Init+0x64>)
 8001d74:	f004 fafa 	bl	800636c <HAL_TIM_Base_Init>
 8001d78:	4603      	mov	r3, r0
 8001d7a:	2b00      	cmp	r3, #0
 8001d7c:	d001      	beq.n	8001d82 <MX_TIM6_Init+0x3e>
  {
    Error_Handler();
 8001d7e:	f000 f9fb 	bl	8002178 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8001d82:	2300      	movs	r3, #0
 8001d84:	603b      	str	r3, [r7, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8001d86:	2300      	movs	r3, #0
 8001d88:	607b      	str	r3, [r7, #4]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim6, &sMasterConfig) != HAL_OK)
 8001d8a:	463b      	mov	r3, r7
 8001d8c:	4619      	mov	r1, r3
 8001d8e:	4806      	ldr	r0, [pc, #24]	@ (8001da8 <MX_TIM6_Init+0x64>)
 8001d90:	f004 fbe8 	bl	8006564 <HAL_TIMEx_MasterConfigSynchronization>
 8001d94:	4603      	mov	r3, r0
 8001d96:	2b00      	cmp	r3, #0
 8001d98:	d001      	beq.n	8001d9e <MX_TIM6_Init+0x5a>
  {
    Error_Handler();
 8001d9a:	f000 f9ed 	bl	8002178 <Error_Handler>
  }
  /* USER CODE BEGIN TIM6_Init 2 */

  /* USER CODE END TIM6_Init 2 */

}
 8001d9e:	bf00      	nop
 8001da0:	3708      	adds	r7, #8
 8001da2:	46bd      	mov	sp, r7
 8001da4:	bd80      	pop	{r7, pc}
 8001da6:	bf00      	nop
 8001da8:	20025bd4 	.word	0x20025bd4
 8001dac:	40001000 	.word	0x40001000

08001db0 <MX_TIM7_Init>:
  * @brief TIM7 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM7_Init(void)
{
 8001db0:	b580      	push	{r7, lr}
 8001db2:	b082      	sub	sp, #8
 8001db4:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM7_Init 0 */

  /* USER CODE END TIM7_Init 0 */

  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8001db6:	463b      	mov	r3, r7
 8001db8:	2200      	movs	r2, #0
 8001dba:	601a      	str	r2, [r3, #0]
 8001dbc:	605a      	str	r2, [r3, #4]

  /* USER CODE BEGIN TIM7_Init 1 */

  /* USER CODE END TIM7_Init 1 */
  htim7.Instance = TIM7;
 8001dbe:	4b15      	ldr	r3, [pc, #84]	@ (8001e14 <MX_TIM7_Init+0x64>)
 8001dc0:	4a15      	ldr	r2, [pc, #84]	@ (8001e18 <MX_TIM7_Init+0x68>)
 8001dc2:	601a      	str	r2, [r3, #0]
  htim7.Init.Prescaler = 0;
 8001dc4:	4b13      	ldr	r3, [pc, #76]	@ (8001e14 <MX_TIM7_Init+0x64>)
 8001dc6:	2200      	movs	r2, #0
 8001dc8:	605a      	str	r2, [r3, #4]
  htim7.Init.CounterMode = TIM_COUNTERMODE_UP;
 8001dca:	4b12      	ldr	r3, [pc, #72]	@ (8001e14 <MX_TIM7_Init+0x64>)
 8001dcc:	2200      	movs	r2, #0
 8001dce:	609a      	str	r2, [r3, #8]
  htim7.Init.Period = 65535;
 8001dd0:	4b10      	ldr	r3, [pc, #64]	@ (8001e14 <MX_TIM7_Init+0x64>)
 8001dd2:	f64f 72ff 	movw	r2, #65535	@ 0xffff
 8001dd6:	60da      	str	r2, [r3, #12]
  htim7.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8001dd8:	4b0e      	ldr	r3, [pc, #56]	@ (8001e14 <MX_TIM7_Init+0x64>)
 8001dda:	2200      	movs	r2, #0
 8001ddc:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim7) != HAL_OK)
 8001dde:	480d      	ldr	r0, [pc, #52]	@ (8001e14 <MX_TIM7_Init+0x64>)
 8001de0:	f004 fac4 	bl	800636c <HAL_TIM_Base_Init>
 8001de4:	4603      	mov	r3, r0
 8001de6:	2b00      	cmp	r3, #0
 8001de8:	d001      	beq.n	8001dee <MX_TIM7_Init+0x3e>
  {
    Error_Handler();
 8001dea:	f000 f9c5 	bl	8002178 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8001dee:	2300      	movs	r3, #0
 8001df0:	603b      	str	r3, [r7, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8001df2:	2300      	movs	r3, #0
 8001df4:	607b      	str	r3, [r7, #4]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim7, &sMasterConfig) != HAL_OK)
 8001df6:	463b      	mov	r3, r7
 8001df8:	4619      	mov	r1, r3
 8001dfa:	4806      	ldr	r0, [pc, #24]	@ (8001e14 <MX_TIM7_Init+0x64>)
 8001dfc:	f004 fbb2 	bl	8006564 <HAL_TIMEx_MasterConfigSynchronization>
 8001e00:	4603      	mov	r3, r0
 8001e02:	2b00      	cmp	r3, #0
 8001e04:	d001      	beq.n	8001e0a <MX_TIM7_Init+0x5a>
  {
    Error_Handler();
 8001e06:	f000 f9b7 	bl	8002178 <Error_Handler>
  }
  /* USER CODE BEGIN TIM7_Init 2 */

  /* USER CODE END TIM7_Init 2 */

}
 8001e0a:	bf00      	nop
 8001e0c:	3708      	adds	r7, #8
 8001e0e:	46bd      	mov	sp, r7
 8001e10:	bd80      	pop	{r7, pc}
 8001e12:	bf00      	nop
 8001e14:	20025c1c 	.word	0x20025c1c
 8001e18:	40001400 	.word	0x40001400

08001e1c <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8001e1c:	b580      	push	{r7, lr}
 8001e1e:	b08e      	sub	sp, #56	@ 0x38
 8001e20:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001e22:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8001e26:	2200      	movs	r2, #0
 8001e28:	601a      	str	r2, [r3, #0]
 8001e2a:	605a      	str	r2, [r3, #4]
 8001e2c:	609a      	str	r2, [r3, #8]
 8001e2e:	60da      	str	r2, [r3, #12]
 8001e30:	611a      	str	r2, [r3, #16]
/* USER CODE BEGIN MX_GPIO_Init_1 */
/* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8001e32:	2300      	movs	r3, #0
 8001e34:	623b      	str	r3, [r7, #32]
 8001e36:	4bb2      	ldr	r3, [pc, #712]	@ (8002100 <MX_GPIO_Init+0x2e4>)
 8001e38:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001e3a:	4ab1      	ldr	r2, [pc, #708]	@ (8002100 <MX_GPIO_Init+0x2e4>)
 8001e3c:	f043 0304 	orr.w	r3, r3, #4
 8001e40:	6313      	str	r3, [r2, #48]	@ 0x30
 8001e42:	4baf      	ldr	r3, [pc, #700]	@ (8002100 <MX_GPIO_Init+0x2e4>)
 8001e44:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001e46:	f003 0304 	and.w	r3, r3, #4
 8001e4a:	623b      	str	r3, [r7, #32]
 8001e4c:	6a3b      	ldr	r3, [r7, #32]
  __HAL_RCC_GPIOF_CLK_ENABLE();
 8001e4e:	2300      	movs	r3, #0
 8001e50:	61fb      	str	r3, [r7, #28]
 8001e52:	4bab      	ldr	r3, [pc, #684]	@ (8002100 <MX_GPIO_Init+0x2e4>)
 8001e54:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001e56:	4aaa      	ldr	r2, [pc, #680]	@ (8002100 <MX_GPIO_Init+0x2e4>)
 8001e58:	f043 0320 	orr.w	r3, r3, #32
 8001e5c:	6313      	str	r3, [r2, #48]	@ 0x30
 8001e5e:	4ba8      	ldr	r3, [pc, #672]	@ (8002100 <MX_GPIO_Init+0x2e4>)
 8001e60:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001e62:	f003 0320 	and.w	r3, r3, #32
 8001e66:	61fb      	str	r3, [r7, #28]
 8001e68:	69fb      	ldr	r3, [r7, #28]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 8001e6a:	2300      	movs	r3, #0
 8001e6c:	61bb      	str	r3, [r7, #24]
 8001e6e:	4ba4      	ldr	r3, [pc, #656]	@ (8002100 <MX_GPIO_Init+0x2e4>)
 8001e70:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001e72:	4aa3      	ldr	r2, [pc, #652]	@ (8002100 <MX_GPIO_Init+0x2e4>)
 8001e74:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8001e78:	6313      	str	r3, [r2, #48]	@ 0x30
 8001e7a:	4ba1      	ldr	r3, [pc, #644]	@ (8002100 <MX_GPIO_Init+0x2e4>)
 8001e7c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001e7e:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8001e82:	61bb      	str	r3, [r7, #24]
 8001e84:	69bb      	ldr	r3, [r7, #24]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8001e86:	2300      	movs	r3, #0
 8001e88:	617b      	str	r3, [r7, #20]
 8001e8a:	4b9d      	ldr	r3, [pc, #628]	@ (8002100 <MX_GPIO_Init+0x2e4>)
 8001e8c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001e8e:	4a9c      	ldr	r2, [pc, #624]	@ (8002100 <MX_GPIO_Init+0x2e4>)
 8001e90:	f043 0301 	orr.w	r3, r3, #1
 8001e94:	6313      	str	r3, [r2, #48]	@ 0x30
 8001e96:	4b9a      	ldr	r3, [pc, #616]	@ (8002100 <MX_GPIO_Init+0x2e4>)
 8001e98:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001e9a:	f003 0301 	and.w	r3, r3, #1
 8001e9e:	617b      	str	r3, [r7, #20]
 8001ea0:	697b      	ldr	r3, [r7, #20]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8001ea2:	2300      	movs	r3, #0
 8001ea4:	613b      	str	r3, [r7, #16]
 8001ea6:	4b96      	ldr	r3, [pc, #600]	@ (8002100 <MX_GPIO_Init+0x2e4>)
 8001ea8:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001eaa:	4a95      	ldr	r2, [pc, #596]	@ (8002100 <MX_GPIO_Init+0x2e4>)
 8001eac:	f043 0302 	orr.w	r3, r3, #2
 8001eb0:	6313      	str	r3, [r2, #48]	@ 0x30
 8001eb2:	4b93      	ldr	r3, [pc, #588]	@ (8002100 <MX_GPIO_Init+0x2e4>)
 8001eb4:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001eb6:	f003 0302 	and.w	r3, r3, #2
 8001eba:	613b      	str	r3, [r7, #16]
 8001ebc:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOG_CLK_ENABLE();
 8001ebe:	2300      	movs	r3, #0
 8001ec0:	60fb      	str	r3, [r7, #12]
 8001ec2:	4b8f      	ldr	r3, [pc, #572]	@ (8002100 <MX_GPIO_Init+0x2e4>)
 8001ec4:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001ec6:	4a8e      	ldr	r2, [pc, #568]	@ (8002100 <MX_GPIO_Init+0x2e4>)
 8001ec8:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8001ecc:	6313      	str	r3, [r2, #48]	@ 0x30
 8001ece:	4b8c      	ldr	r3, [pc, #560]	@ (8002100 <MX_GPIO_Init+0x2e4>)
 8001ed0:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001ed2:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8001ed6:	60fb      	str	r3, [r7, #12]
 8001ed8:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOE_CLK_ENABLE();
 8001eda:	2300      	movs	r3, #0
 8001edc:	60bb      	str	r3, [r7, #8]
 8001ede:	4b88      	ldr	r3, [pc, #544]	@ (8002100 <MX_GPIO_Init+0x2e4>)
 8001ee0:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001ee2:	4a87      	ldr	r2, [pc, #540]	@ (8002100 <MX_GPIO_Init+0x2e4>)
 8001ee4:	f043 0310 	orr.w	r3, r3, #16
 8001ee8:	6313      	str	r3, [r2, #48]	@ 0x30
 8001eea:	4b85      	ldr	r3, [pc, #532]	@ (8002100 <MX_GPIO_Init+0x2e4>)
 8001eec:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001eee:	f003 0310 	and.w	r3, r3, #16
 8001ef2:	60bb      	str	r3, [r7, #8]
 8001ef4:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 8001ef6:	2300      	movs	r3, #0
 8001ef8:	607b      	str	r3, [r7, #4]
 8001efa:	4b81      	ldr	r3, [pc, #516]	@ (8002100 <MX_GPIO_Init+0x2e4>)
 8001efc:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001efe:	4a80      	ldr	r2, [pc, #512]	@ (8002100 <MX_GPIO_Init+0x2e4>)
 8001f00:	f043 0308 	orr.w	r3, r3, #8
 8001f04:	6313      	str	r3, [r2, #48]	@ 0x30
 8001f06:	4b7e      	ldr	r3, [pc, #504]	@ (8002100 <MX_GPIO_Init+0x2e4>)
 8001f08:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001f0a:	f003 0308 	and.w	r3, r3, #8
 8001f0e:	607b      	str	r3, [r7, #4]
 8001f10:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOC, NCS_MEMS_SPI_Pin|CSX_Pin|OTG_FS_PSO_Pin, GPIO_PIN_RESET);
 8001f12:	2200      	movs	r2, #0
 8001f14:	2116      	movs	r1, #22
 8001f16:	487b      	ldr	r0, [pc, #492]	@ (8002104 <MX_GPIO_Init+0x2e8>)
 8001f18:	f001 fd10 	bl	800393c <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(ACP_RST_GPIO_Port, ACP_RST_Pin, GPIO_PIN_RESET);
 8001f1c:	2200      	movs	r2, #0
 8001f1e:	2180      	movs	r1, #128	@ 0x80
 8001f20:	4879      	ldr	r0, [pc, #484]	@ (8002108 <MX_GPIO_Init+0x2ec>)
 8001f22:	f001 fd0b 	bl	800393c <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOD, RDX_Pin|WRX_DCX_Pin, GPIO_PIN_RESET);
 8001f26:	2200      	movs	r2, #0
 8001f28:	f44f 5140 	mov.w	r1, #12288	@ 0x3000
 8001f2c:	4877      	ldr	r0, [pc, #476]	@ (800210c <MX_GPIO_Init+0x2f0>)
 8001f2e:	f001 fd05 	bl	800393c <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOG, LD3_Pin|LD4_Pin, GPIO_PIN_RESET);
 8001f32:	2200      	movs	r2, #0
 8001f34:	f44f 41c0 	mov.w	r1, #24576	@ 0x6000
 8001f38:	4875      	ldr	r0, [pc, #468]	@ (8002110 <MX_GPIO_Init+0x2f4>)
 8001f3a:	f001 fcff 	bl	800393c <HAL_GPIO_WritePin>

  /*Configure GPIO pins : A0_Pin A1_Pin A2_Pin A3_Pin
                           A4_Pin A5_Pin SDNRAS_Pin A6_Pin
                           A7_Pin A8_Pin A9_Pin */
  GPIO_InitStruct.Pin = A0_Pin|A1_Pin|A2_Pin|A3_Pin
 8001f3e:	f64f 033f 	movw	r3, #63551	@ 0xf83f
 8001f42:	627b      	str	r3, [r7, #36]	@ 0x24
                          |A4_Pin|A5_Pin|SDNRAS_Pin|A6_Pin
                          |A7_Pin|A8_Pin|A9_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001f44:	2302      	movs	r3, #2
 8001f46:	62bb      	str	r3, [r7, #40]	@ 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001f48:	2300      	movs	r3, #0
 8001f4a:	62fb      	str	r3, [r7, #44]	@ 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001f4c:	2303      	movs	r3, #3
 8001f4e:	633b      	str	r3, [r7, #48]	@ 0x30
  GPIO_InitStruct.Alternate = GPIO_AF12_FMC;
 8001f50:	230c      	movs	r3, #12
 8001f52:	637b      	str	r3, [r7, #52]	@ 0x34
  HAL_GPIO_Init(GPIOF, &GPIO_InitStruct);
 8001f54:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8001f58:	4619      	mov	r1, r3
 8001f5a:	486e      	ldr	r0, [pc, #440]	@ (8002114 <MX_GPIO_Init+0x2f8>)
 8001f5c:	f001 fa36 	bl	80033cc <HAL_GPIO_Init>

  /*Configure GPIO pin : SDNWE_Pin */
  GPIO_InitStruct.Pin = SDNWE_Pin;
 8001f60:	2301      	movs	r3, #1
 8001f62:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001f64:	2302      	movs	r3, #2
 8001f66:	62bb      	str	r3, [r7, #40]	@ 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001f68:	2300      	movs	r3, #0
 8001f6a:	62fb      	str	r3, [r7, #44]	@ 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001f6c:	2303      	movs	r3, #3
 8001f6e:	633b      	str	r3, [r7, #48]	@ 0x30
  GPIO_InitStruct.Alternate = GPIO_AF12_FMC;
 8001f70:	230c      	movs	r3, #12
 8001f72:	637b      	str	r3, [r7, #52]	@ 0x34
  HAL_GPIO_Init(SDNWE_GPIO_Port, &GPIO_InitStruct);
 8001f74:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8001f78:	4619      	mov	r1, r3
 8001f7a:	4862      	ldr	r0, [pc, #392]	@ (8002104 <MX_GPIO_Init+0x2e8>)
 8001f7c:	f001 fa26 	bl	80033cc <HAL_GPIO_Init>

  /*Configure GPIO pins : NCS_MEMS_SPI_Pin CSX_Pin OTG_FS_PSO_Pin */
  GPIO_InitStruct.Pin = NCS_MEMS_SPI_Pin|CSX_Pin|OTG_FS_PSO_Pin;
 8001f80:	2316      	movs	r3, #22
 8001f82:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001f84:	2301      	movs	r3, #1
 8001f86:	62bb      	str	r3, [r7, #40]	@ 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001f88:	2300      	movs	r3, #0
 8001f8a:	62fb      	str	r3, [r7, #44]	@ 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001f8c:	2300      	movs	r3, #0
 8001f8e:	633b      	str	r3, [r7, #48]	@ 0x30
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8001f90:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8001f94:	4619      	mov	r1, r3
 8001f96:	485b      	ldr	r0, [pc, #364]	@ (8002104 <MX_GPIO_Init+0x2e8>)
 8001f98:	f001 fa18 	bl	80033cc <HAL_GPIO_Init>

  /*Configure GPIO pins : B1_Pin MEMS_INT1_Pin MEMS_INT2_Pin TP_INT1_Pin */
  GPIO_InitStruct.Pin = B1_Pin|MEMS_INT1_Pin|MEMS_INT2_Pin|TP_INT1_Pin;
 8001f9c:	f248 0307 	movw	r3, #32775	@ 0x8007
 8001fa0:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_EVT_RISING;
 8001fa2:	f44f 1390 	mov.w	r3, #1179648	@ 0x120000
 8001fa6:	62bb      	str	r3, [r7, #40]	@ 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001fa8:	2300      	movs	r3, #0
 8001faa:	62fb      	str	r3, [r7, #44]	@ 0x2c
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001fac:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8001fb0:	4619      	mov	r1, r3
 8001fb2:	4855      	ldr	r0, [pc, #340]	@ (8002108 <MX_GPIO_Init+0x2ec>)
 8001fb4:	f001 fa0a 	bl	80033cc <HAL_GPIO_Init>

  /*Configure GPIO pin : ACP_RST_Pin */
  GPIO_InitStruct.Pin = ACP_RST_Pin;
 8001fb8:	2380      	movs	r3, #128	@ 0x80
 8001fba:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001fbc:	2301      	movs	r3, #1
 8001fbe:	62bb      	str	r3, [r7, #40]	@ 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001fc0:	2300      	movs	r3, #0
 8001fc2:	62fb      	str	r3, [r7, #44]	@ 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001fc4:	2300      	movs	r3, #0
 8001fc6:	633b      	str	r3, [r7, #48]	@ 0x30
  HAL_GPIO_Init(ACP_RST_GPIO_Port, &GPIO_InitStruct);
 8001fc8:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8001fcc:	4619      	mov	r1, r3
 8001fce:	484e      	ldr	r0, [pc, #312]	@ (8002108 <MX_GPIO_Init+0x2ec>)
 8001fd0:	f001 f9fc 	bl	80033cc <HAL_GPIO_Init>

  /*Configure GPIO pin : OTG_FS_OC_Pin */
  GPIO_InitStruct.Pin = OTG_FS_OC_Pin;
 8001fd4:	2320      	movs	r3, #32
 8001fd6:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_EVT_RISING;
 8001fd8:	f44f 1390 	mov.w	r3, #1179648	@ 0x120000
 8001fdc:	62bb      	str	r3, [r7, #40]	@ 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001fde:	2300      	movs	r3, #0
 8001fe0:	62fb      	str	r3, [r7, #44]	@ 0x2c
  HAL_GPIO_Init(OTG_FS_OC_GPIO_Port, &GPIO_InitStruct);
 8001fe2:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8001fe6:	4619      	mov	r1, r3
 8001fe8:	4846      	ldr	r0, [pc, #280]	@ (8002104 <MX_GPIO_Init+0x2e8>)
 8001fea:	f001 f9ef 	bl	80033cc <HAL_GPIO_Init>

  /*Configure GPIO pin : BOOT1_Pin */
  GPIO_InitStruct.Pin = BOOT1_Pin;
 8001fee:	2304      	movs	r3, #4
 8001ff0:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8001ff2:	2300      	movs	r3, #0
 8001ff4:	62bb      	str	r3, [r7, #40]	@ 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001ff6:	2300      	movs	r3, #0
 8001ff8:	62fb      	str	r3, [r7, #44]	@ 0x2c
  HAL_GPIO_Init(BOOT1_GPIO_Port, &GPIO_InitStruct);
 8001ffa:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8001ffe:	4619      	mov	r1, r3
 8002000:	4845      	ldr	r0, [pc, #276]	@ (8002118 <MX_GPIO_Init+0x2fc>)
 8002002:	f001 f9e3 	bl	80033cc <HAL_GPIO_Init>

  /*Configure GPIO pins : A10_Pin A11_Pin BA0_Pin BA1_Pin
                           SDCLK_Pin SDNCAS_Pin */
  GPIO_InitStruct.Pin = A10_Pin|A11_Pin|BA0_Pin|BA1_Pin
 8002006:	f248 1333 	movw	r3, #33075	@ 0x8133
 800200a:	627b      	str	r3, [r7, #36]	@ 0x24
                          |SDCLK_Pin|SDNCAS_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800200c:	2302      	movs	r3, #2
 800200e:	62bb      	str	r3, [r7, #40]	@ 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002010:	2300      	movs	r3, #0
 8002012:	62fb      	str	r3, [r7, #44]	@ 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8002014:	2303      	movs	r3, #3
 8002016:	633b      	str	r3, [r7, #48]	@ 0x30
  GPIO_InitStruct.Alternate = GPIO_AF12_FMC;
 8002018:	230c      	movs	r3, #12
 800201a:	637b      	str	r3, [r7, #52]	@ 0x34
  HAL_GPIO_Init(GPIOG, &GPIO_InitStruct);
 800201c:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8002020:	4619      	mov	r1, r3
 8002022:	483b      	ldr	r0, [pc, #236]	@ (8002110 <MX_GPIO_Init+0x2f4>)
 8002024:	f001 f9d2 	bl	80033cc <HAL_GPIO_Init>

  /*Configure GPIO pins : D4_Pin D5_Pin D6_Pin D7_Pin
                           D8_Pin D9_Pin D10_Pin D11_Pin
                           D12_Pin NBL0_Pin NBL1_Pin */
  GPIO_InitStruct.Pin = D4_Pin|D5_Pin|D6_Pin|D7_Pin
 8002028:	f64f 7383 	movw	r3, #65411	@ 0xff83
 800202c:	627b      	str	r3, [r7, #36]	@ 0x24
                          |D8_Pin|D9_Pin|D10_Pin|D11_Pin
                          |D12_Pin|NBL0_Pin|NBL1_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800202e:	2302      	movs	r3, #2
 8002030:	62bb      	str	r3, [r7, #40]	@ 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002032:	2300      	movs	r3, #0
 8002034:	62fb      	str	r3, [r7, #44]	@ 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8002036:	2303      	movs	r3, #3
 8002038:	633b      	str	r3, [r7, #48]	@ 0x30
  GPIO_InitStruct.Alternate = GPIO_AF12_FMC;
 800203a:	230c      	movs	r3, #12
 800203c:	637b      	str	r3, [r7, #52]	@ 0x34
  HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 800203e:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8002042:	4619      	mov	r1, r3
 8002044:	4835      	ldr	r0, [pc, #212]	@ (800211c <MX_GPIO_Init+0x300>)
 8002046:	f001 f9c1 	bl	80033cc <HAL_GPIO_Init>

  /*Configure GPIO pins : OTG_HS_ID_Pin OTG_HS_DM_Pin OTG_HS_DP_Pin */
  GPIO_InitStruct.Pin = OTG_HS_ID_Pin|OTG_HS_DM_Pin|OTG_HS_DP_Pin;
 800204a:	f44f 4350 	mov.w	r3, #53248	@ 0xd000
 800204e:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002050:	2302      	movs	r3, #2
 8002052:	62bb      	str	r3, [r7, #40]	@ 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002054:	2300      	movs	r3, #0
 8002056:	62fb      	str	r3, [r7, #44]	@ 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002058:	2300      	movs	r3, #0
 800205a:	633b      	str	r3, [r7, #48]	@ 0x30
  GPIO_InitStruct.Alternate = GPIO_AF12_OTG_HS_FS;
 800205c:	230c      	movs	r3, #12
 800205e:	637b      	str	r3, [r7, #52]	@ 0x34
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8002060:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8002064:	4619      	mov	r1, r3
 8002066:	482c      	ldr	r0, [pc, #176]	@ (8002118 <MX_GPIO_Init+0x2fc>)
 8002068:	f001 f9b0 	bl	80033cc <HAL_GPIO_Init>

  /*Configure GPIO pin : VBUS_HS_Pin */
  GPIO_InitStruct.Pin = VBUS_HS_Pin;
 800206c:	f44f 5300 	mov.w	r3, #8192	@ 0x2000
 8002070:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8002072:	2300      	movs	r3, #0
 8002074:	62bb      	str	r3, [r7, #40]	@ 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002076:	2300      	movs	r3, #0
 8002078:	62fb      	str	r3, [r7, #44]	@ 0x2c
  HAL_GPIO_Init(VBUS_HS_GPIO_Port, &GPIO_InitStruct);
 800207a:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 800207e:	4619      	mov	r1, r3
 8002080:	4825      	ldr	r0, [pc, #148]	@ (8002118 <MX_GPIO_Init+0x2fc>)
 8002082:	f001 f9a3 	bl	80033cc <HAL_GPIO_Init>

  /*Configure GPIO pins : D13_Pin D14_Pin D15_Pin D0_Pin
                           D1_Pin D2_Pin D3_Pin */
  GPIO_InitStruct.Pin = D13_Pin|D14_Pin|D15_Pin|D0_Pin
 8002086:	f24c 7303 	movw	r3, #50947	@ 0xc703
 800208a:	627b      	str	r3, [r7, #36]	@ 0x24
                          |D1_Pin|D2_Pin|D3_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800208c:	2302      	movs	r3, #2
 800208e:	62bb      	str	r3, [r7, #40]	@ 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002090:	2300      	movs	r3, #0
 8002092:	62fb      	str	r3, [r7, #44]	@ 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8002094:	2303      	movs	r3, #3
 8002096:	633b      	str	r3, [r7, #48]	@ 0x30
  GPIO_InitStruct.Alternate = GPIO_AF12_FMC;
 8002098:	230c      	movs	r3, #12
 800209a:	637b      	str	r3, [r7, #52]	@ 0x34
  HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 800209c:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 80020a0:	4619      	mov	r1, r3
 80020a2:	481a      	ldr	r0, [pc, #104]	@ (800210c <MX_GPIO_Init+0x2f0>)
 80020a4:	f001 f992 	bl	80033cc <HAL_GPIO_Init>

  /*Configure GPIO pin : TE_Pin */
  GPIO_InitStruct.Pin = TE_Pin;
 80020a8:	f44f 6300 	mov.w	r3, #2048	@ 0x800
 80020ac:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 80020ae:	2300      	movs	r3, #0
 80020b0:	62bb      	str	r3, [r7, #40]	@ 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80020b2:	2300      	movs	r3, #0
 80020b4:	62fb      	str	r3, [r7, #44]	@ 0x2c
  HAL_GPIO_Init(TE_GPIO_Port, &GPIO_InitStruct);
 80020b6:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 80020ba:	4619      	mov	r1, r3
 80020bc:	4813      	ldr	r0, [pc, #76]	@ (800210c <MX_GPIO_Init+0x2f0>)
 80020be:	f001 f985 	bl	80033cc <HAL_GPIO_Init>

  /*Configure GPIO pins : RDX_Pin WRX_DCX_Pin */
  GPIO_InitStruct.Pin = RDX_Pin|WRX_DCX_Pin;
 80020c2:	f44f 5340 	mov.w	r3, #12288	@ 0x3000
 80020c6:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80020c8:	2301      	movs	r3, #1
 80020ca:	62bb      	str	r3, [r7, #40]	@ 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80020cc:	2300      	movs	r3, #0
 80020ce:	62fb      	str	r3, [r7, #44]	@ 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80020d0:	2300      	movs	r3, #0
 80020d2:	633b      	str	r3, [r7, #48]	@ 0x30
  HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 80020d4:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 80020d8:	4619      	mov	r1, r3
 80020da:	480c      	ldr	r0, [pc, #48]	@ (800210c <MX_GPIO_Init+0x2f0>)
 80020dc:	f001 f976 	bl	80033cc <HAL_GPIO_Init>

  /*Configure GPIO pins : STLINK_RX_Pin STLINK_TX_Pin */
  GPIO_InitStruct.Pin = STLINK_RX_Pin|STLINK_TX_Pin;
 80020e0:	f44f 63c0 	mov.w	r3, #1536	@ 0x600
 80020e4:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80020e6:	2302      	movs	r3, #2
 80020e8:	62bb      	str	r3, [r7, #40]	@ 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80020ea:	2300      	movs	r3, #0
 80020ec:	62fb      	str	r3, [r7, #44]	@ 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80020ee:	2303      	movs	r3, #3
 80020f0:	633b      	str	r3, [r7, #48]	@ 0x30
  GPIO_InitStruct.Alternate = GPIO_AF7_USART1;
 80020f2:	2307      	movs	r3, #7
 80020f4:	637b      	str	r3, [r7, #52]	@ 0x34
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80020f6:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 80020fa:	4619      	mov	r1, r3
 80020fc:	e010      	b.n	8002120 <MX_GPIO_Init+0x304>
 80020fe:	bf00      	nop
 8002100:	40023800 	.word	0x40023800
 8002104:	40020800 	.word	0x40020800
 8002108:	40020000 	.word	0x40020000
 800210c:	40020c00 	.word	0x40020c00
 8002110:	40021800 	.word	0x40021800
 8002114:	40021400 	.word	0x40021400
 8002118:	40020400 	.word	0x40020400
 800211c:	40021000 	.word	0x40021000
 8002120:	4812      	ldr	r0, [pc, #72]	@ (800216c <MX_GPIO_Init+0x350>)
 8002122:	f001 f953 	bl	80033cc <HAL_GPIO_Init>

  /*Configure GPIO pins : LD3_Pin LD4_Pin */
  GPIO_InitStruct.Pin = LD3_Pin|LD4_Pin;
 8002126:	f44f 43c0 	mov.w	r3, #24576	@ 0x6000
 800212a:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800212c:	2301      	movs	r3, #1
 800212e:	62bb      	str	r3, [r7, #40]	@ 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002130:	2300      	movs	r3, #0
 8002132:	62fb      	str	r3, [r7, #44]	@ 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002134:	2300      	movs	r3, #0
 8002136:	633b      	str	r3, [r7, #48]	@ 0x30
  HAL_GPIO_Init(GPIOG, &GPIO_InitStruct);
 8002138:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 800213c:	4619      	mov	r1, r3
 800213e:	480c      	ldr	r0, [pc, #48]	@ (8002170 <MX_GPIO_Init+0x354>)
 8002140:	f001 f944 	bl	80033cc <HAL_GPIO_Init>

  /*Configure GPIO pins : SDCKE1_Pin SDNE1_Pin */
  GPIO_InitStruct.Pin = SDCKE1_Pin|SDNE1_Pin;
 8002144:	2360      	movs	r3, #96	@ 0x60
 8002146:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002148:	2302      	movs	r3, #2
 800214a:	62bb      	str	r3, [r7, #40]	@ 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800214c:	2300      	movs	r3, #0
 800214e:	62fb      	str	r3, [r7, #44]	@ 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8002150:	2303      	movs	r3, #3
 8002152:	633b      	str	r3, [r7, #48]	@ 0x30
  GPIO_InitStruct.Alternate = GPIO_AF12_FMC;
 8002154:	230c      	movs	r3, #12
 8002156:	637b      	str	r3, [r7, #52]	@ 0x34
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8002158:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 800215c:	4619      	mov	r1, r3
 800215e:	4805      	ldr	r0, [pc, #20]	@ (8002174 <MX_GPIO_Init+0x358>)
 8002160:	f001 f934 	bl	80033cc <HAL_GPIO_Init>

/* USER CODE BEGIN MX_GPIO_Init_2 */
/* USER CODE END MX_GPIO_Init_2 */
}
 8002164:	bf00      	nop
 8002166:	3738      	adds	r7, #56	@ 0x38
 8002168:	46bd      	mov	sp, r7
 800216a:	bd80      	pop	{r7, pc}
 800216c:	40020000 	.word	0x40020000
 8002170:	40021800 	.word	0x40021800
 8002174:	40020400 	.word	0x40020400

08002178 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8002178:	b480      	push	{r7}
 800217a:	af00      	add	r7, sp, #0
  __ASM volatile ("cpsid i" : : : "memory");
 800217c:	b672      	cpsid	i
}
 800217e:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8002180:	bf00      	nop
 8002182:	e7fd      	b.n	8002180 <Error_Handler+0x8>

08002184 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8002184:	b580      	push	{r7, lr}
 8002186:	b082      	sub	sp, #8
 8002188:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 800218a:	2300      	movs	r3, #0
 800218c:	607b      	str	r3, [r7, #4]
 800218e:	4b10      	ldr	r3, [pc, #64]	@ (80021d0 <HAL_MspInit+0x4c>)
 8002190:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8002192:	4a0f      	ldr	r2, [pc, #60]	@ (80021d0 <HAL_MspInit+0x4c>)
 8002194:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 8002198:	6453      	str	r3, [r2, #68]	@ 0x44
 800219a:	4b0d      	ldr	r3, [pc, #52]	@ (80021d0 <HAL_MspInit+0x4c>)
 800219c:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800219e:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 80021a2:	607b      	str	r3, [r7, #4]
 80021a4:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 80021a6:	2300      	movs	r3, #0
 80021a8:	603b      	str	r3, [r7, #0]
 80021aa:	4b09      	ldr	r3, [pc, #36]	@ (80021d0 <HAL_MspInit+0x4c>)
 80021ac:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80021ae:	4a08      	ldr	r2, [pc, #32]	@ (80021d0 <HAL_MspInit+0x4c>)
 80021b0:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 80021b4:	6413      	str	r3, [r2, #64]	@ 0x40
 80021b6:	4b06      	ldr	r3, [pc, #24]	@ (80021d0 <HAL_MspInit+0x4c>)
 80021b8:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80021ba:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 80021be:	603b      	str	r3, [r7, #0]
 80021c0:	683b      	ldr	r3, [r7, #0]

  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_0);
 80021c2:	2007      	movs	r0, #7
 80021c4:	f001 f88c 	bl	80032e0 <HAL_NVIC_SetPriorityGrouping>
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 80021c8:	bf00      	nop
 80021ca:	3708      	adds	r7, #8
 80021cc:	46bd      	mov	sp, r7
 80021ce:	bd80      	pop	{r7, pc}
 80021d0:	40023800 	.word	0x40023800

080021d4 <HAL_I2C_MspInit>:
* This function configures the hardware resources used in this example
* @param hi2c: I2C handle pointer
* @retval None
*/
void HAL_I2C_MspInit(I2C_HandleTypeDef* hi2c)
{
 80021d4:	b580      	push	{r7, lr}
 80021d6:	b08a      	sub	sp, #40	@ 0x28
 80021d8:	af00      	add	r7, sp, #0
 80021da:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80021dc:	f107 0314 	add.w	r3, r7, #20
 80021e0:	2200      	movs	r2, #0
 80021e2:	601a      	str	r2, [r3, #0]
 80021e4:	605a      	str	r2, [r3, #4]
 80021e6:	609a      	str	r2, [r3, #8]
 80021e8:	60da      	str	r2, [r3, #12]
 80021ea:	611a      	str	r2, [r3, #16]
  if(hi2c->Instance==I2C3)
 80021ec:	687b      	ldr	r3, [r7, #4]
 80021ee:	681b      	ldr	r3, [r3, #0]
 80021f0:	4a29      	ldr	r2, [pc, #164]	@ (8002298 <HAL_I2C_MspInit+0xc4>)
 80021f2:	4293      	cmp	r3, r2
 80021f4:	d14b      	bne.n	800228e <HAL_I2C_MspInit+0xba>
  {
  /* USER CODE BEGIN I2C3_MspInit 0 */

  /* USER CODE END I2C3_MspInit 0 */

    __HAL_RCC_GPIOC_CLK_ENABLE();
 80021f6:	2300      	movs	r3, #0
 80021f8:	613b      	str	r3, [r7, #16]
 80021fa:	4b28      	ldr	r3, [pc, #160]	@ (800229c <HAL_I2C_MspInit+0xc8>)
 80021fc:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80021fe:	4a27      	ldr	r2, [pc, #156]	@ (800229c <HAL_I2C_MspInit+0xc8>)
 8002200:	f043 0304 	orr.w	r3, r3, #4
 8002204:	6313      	str	r3, [r2, #48]	@ 0x30
 8002206:	4b25      	ldr	r3, [pc, #148]	@ (800229c <HAL_I2C_MspInit+0xc8>)
 8002208:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800220a:	f003 0304 	and.w	r3, r3, #4
 800220e:	613b      	str	r3, [r7, #16]
 8002210:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8002212:	2300      	movs	r3, #0
 8002214:	60fb      	str	r3, [r7, #12]
 8002216:	4b21      	ldr	r3, [pc, #132]	@ (800229c <HAL_I2C_MspInit+0xc8>)
 8002218:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800221a:	4a20      	ldr	r2, [pc, #128]	@ (800229c <HAL_I2C_MspInit+0xc8>)
 800221c:	f043 0301 	orr.w	r3, r3, #1
 8002220:	6313      	str	r3, [r2, #48]	@ 0x30
 8002222:	4b1e      	ldr	r3, [pc, #120]	@ (800229c <HAL_I2C_MspInit+0xc8>)
 8002224:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002226:	f003 0301 	and.w	r3, r3, #1
 800222a:	60fb      	str	r3, [r7, #12]
 800222c:	68fb      	ldr	r3, [r7, #12]
    /**I2C3 GPIO Configuration
    PC9     ------> I2C3_SDA
    PA8     ------> I2C3_SCL
    */
    GPIO_InitStruct.Pin = I2C3_SDA_Pin;
 800222e:	f44f 7300 	mov.w	r3, #512	@ 0x200
 8002232:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8002234:	2312      	movs	r3, #18
 8002236:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002238:	2300      	movs	r3, #0
 800223a:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800223c:	2300      	movs	r3, #0
 800223e:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C3;
 8002240:	2304      	movs	r3, #4
 8002242:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(I2C3_SDA_GPIO_Port, &GPIO_InitStruct);
 8002244:	f107 0314 	add.w	r3, r7, #20
 8002248:	4619      	mov	r1, r3
 800224a:	4815      	ldr	r0, [pc, #84]	@ (80022a0 <HAL_I2C_MspInit+0xcc>)
 800224c:	f001 f8be 	bl	80033cc <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = I2C3_SCL_Pin;
 8002250:	f44f 7380 	mov.w	r3, #256	@ 0x100
 8002254:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8002256:	2312      	movs	r3, #18
 8002258:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800225a:	2300      	movs	r3, #0
 800225c:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800225e:	2300      	movs	r3, #0
 8002260:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C3;
 8002262:	2304      	movs	r3, #4
 8002264:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(I2C3_SCL_GPIO_Port, &GPIO_InitStruct);
 8002266:	f107 0314 	add.w	r3, r7, #20
 800226a:	4619      	mov	r1, r3
 800226c:	480d      	ldr	r0, [pc, #52]	@ (80022a4 <HAL_I2C_MspInit+0xd0>)
 800226e:	f001 f8ad 	bl	80033cc <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_I2C3_CLK_ENABLE();
 8002272:	2300      	movs	r3, #0
 8002274:	60bb      	str	r3, [r7, #8]
 8002276:	4b09      	ldr	r3, [pc, #36]	@ (800229c <HAL_I2C_MspInit+0xc8>)
 8002278:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800227a:	4a08      	ldr	r2, [pc, #32]	@ (800229c <HAL_I2C_MspInit+0xc8>)
 800227c:	f443 0300 	orr.w	r3, r3, #8388608	@ 0x800000
 8002280:	6413      	str	r3, [r2, #64]	@ 0x40
 8002282:	4b06      	ldr	r3, [pc, #24]	@ (800229c <HAL_I2C_MspInit+0xc8>)
 8002284:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002286:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 800228a:	60bb      	str	r3, [r7, #8]
 800228c:	68bb      	ldr	r3, [r7, #8]

  /* USER CODE END I2C3_MspInit 1 */

  }

}
 800228e:	bf00      	nop
 8002290:	3728      	adds	r7, #40	@ 0x28
 8002292:	46bd      	mov	sp, r7
 8002294:	bd80      	pop	{r7, pc}
 8002296:	bf00      	nop
 8002298:	40005c00 	.word	0x40005c00
 800229c:	40023800 	.word	0x40023800
 80022a0:	40020800 	.word	0x40020800
 80022a4:	40020000 	.word	0x40020000

080022a8 <HAL_LTDC_MspInit>:
* This function configures the hardware resources used in this example
* @param hltdc: LTDC handle pointer
* @retval None
*/
void HAL_LTDC_MspInit(LTDC_HandleTypeDef* hltdc)
{
 80022a8:	b580      	push	{r7, lr}
 80022aa:	b09a      	sub	sp, #104	@ 0x68
 80022ac:	af00      	add	r7, sp, #0
 80022ae:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80022b0:	f107 0354 	add.w	r3, r7, #84	@ 0x54
 80022b4:	2200      	movs	r2, #0
 80022b6:	601a      	str	r2, [r3, #0]
 80022b8:	605a      	str	r2, [r3, #4]
 80022ba:	609a      	str	r2, [r3, #8]
 80022bc:	60da      	str	r2, [r3, #12]
 80022be:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 80022c0:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 80022c4:	2230      	movs	r2, #48	@ 0x30
 80022c6:	2100      	movs	r1, #0
 80022c8:	4618      	mov	r0, r3
 80022ca:	f004 fb73 	bl	80069b4 <memset>
  if(hltdc->Instance==LTDC)
 80022ce:	687b      	ldr	r3, [r7, #4]
 80022d0:	681b      	ldr	r3, [r3, #0]
 80022d2:	4a81      	ldr	r2, [pc, #516]	@ (80024d8 <HAL_LTDC_MspInit+0x230>)
 80022d4:	4293      	cmp	r3, r2
 80022d6:	f040 80fa 	bne.w	80024ce <HAL_LTDC_MspInit+0x226>

  /* USER CODE END LTDC_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_LTDC;
 80022da:	2308      	movs	r3, #8
 80022dc:	627b      	str	r3, [r7, #36]	@ 0x24
    PeriphClkInitStruct.PLLSAI.PLLSAIN = 50;
 80022de:	2332      	movs	r3, #50	@ 0x32
 80022e0:	637b      	str	r3, [r7, #52]	@ 0x34
    PeriphClkInitStruct.PLLSAI.PLLSAIR = 2;
 80022e2:	2302      	movs	r3, #2
 80022e4:	63fb      	str	r3, [r7, #60]	@ 0x3c
    PeriphClkInitStruct.PLLSAIDivR = RCC_PLLSAIDIVR_2;
 80022e6:	2300      	movs	r3, #0
 80022e8:	64bb      	str	r3, [r7, #72]	@ 0x48
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 80022ea:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 80022ee:	4618      	mov	r0, r3
 80022f0:	f003 fb08 	bl	8005904 <HAL_RCCEx_PeriphCLKConfig>
 80022f4:	4603      	mov	r3, r0
 80022f6:	2b00      	cmp	r3, #0
 80022f8:	d001      	beq.n	80022fe <HAL_LTDC_MspInit+0x56>
    {
      Error_Handler();
 80022fa:	f7ff ff3d 	bl	8002178 <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_LTDC_CLK_ENABLE();
 80022fe:	2300      	movs	r3, #0
 8002300:	623b      	str	r3, [r7, #32]
 8002302:	4b76      	ldr	r3, [pc, #472]	@ (80024dc <HAL_LTDC_MspInit+0x234>)
 8002304:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8002306:	4a75      	ldr	r2, [pc, #468]	@ (80024dc <HAL_LTDC_MspInit+0x234>)
 8002308:	f043 6380 	orr.w	r3, r3, #67108864	@ 0x4000000
 800230c:	6453      	str	r3, [r2, #68]	@ 0x44
 800230e:	4b73      	ldr	r3, [pc, #460]	@ (80024dc <HAL_LTDC_MspInit+0x234>)
 8002310:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8002312:	f003 6380 	and.w	r3, r3, #67108864	@ 0x4000000
 8002316:	623b      	str	r3, [r7, #32]
 8002318:	6a3b      	ldr	r3, [r7, #32]

    __HAL_RCC_GPIOF_CLK_ENABLE();
 800231a:	2300      	movs	r3, #0
 800231c:	61fb      	str	r3, [r7, #28]
 800231e:	4b6f      	ldr	r3, [pc, #444]	@ (80024dc <HAL_LTDC_MspInit+0x234>)
 8002320:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002322:	4a6e      	ldr	r2, [pc, #440]	@ (80024dc <HAL_LTDC_MspInit+0x234>)
 8002324:	f043 0320 	orr.w	r3, r3, #32
 8002328:	6313      	str	r3, [r2, #48]	@ 0x30
 800232a:	4b6c      	ldr	r3, [pc, #432]	@ (80024dc <HAL_LTDC_MspInit+0x234>)
 800232c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800232e:	f003 0320 	and.w	r3, r3, #32
 8002332:	61fb      	str	r3, [r7, #28]
 8002334:	69fb      	ldr	r3, [r7, #28]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8002336:	2300      	movs	r3, #0
 8002338:	61bb      	str	r3, [r7, #24]
 800233a:	4b68      	ldr	r3, [pc, #416]	@ (80024dc <HAL_LTDC_MspInit+0x234>)
 800233c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800233e:	4a67      	ldr	r2, [pc, #412]	@ (80024dc <HAL_LTDC_MspInit+0x234>)
 8002340:	f043 0301 	orr.w	r3, r3, #1
 8002344:	6313      	str	r3, [r2, #48]	@ 0x30
 8002346:	4b65      	ldr	r3, [pc, #404]	@ (80024dc <HAL_LTDC_MspInit+0x234>)
 8002348:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800234a:	f003 0301 	and.w	r3, r3, #1
 800234e:	61bb      	str	r3, [r7, #24]
 8002350:	69bb      	ldr	r3, [r7, #24]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8002352:	2300      	movs	r3, #0
 8002354:	617b      	str	r3, [r7, #20]
 8002356:	4b61      	ldr	r3, [pc, #388]	@ (80024dc <HAL_LTDC_MspInit+0x234>)
 8002358:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800235a:	4a60      	ldr	r2, [pc, #384]	@ (80024dc <HAL_LTDC_MspInit+0x234>)
 800235c:	f043 0302 	orr.w	r3, r3, #2
 8002360:	6313      	str	r3, [r2, #48]	@ 0x30
 8002362:	4b5e      	ldr	r3, [pc, #376]	@ (80024dc <HAL_LTDC_MspInit+0x234>)
 8002364:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002366:	f003 0302 	and.w	r3, r3, #2
 800236a:	617b      	str	r3, [r7, #20]
 800236c:	697b      	ldr	r3, [r7, #20]
    __HAL_RCC_GPIOG_CLK_ENABLE();
 800236e:	2300      	movs	r3, #0
 8002370:	613b      	str	r3, [r7, #16]
 8002372:	4b5a      	ldr	r3, [pc, #360]	@ (80024dc <HAL_LTDC_MspInit+0x234>)
 8002374:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002376:	4a59      	ldr	r2, [pc, #356]	@ (80024dc <HAL_LTDC_MspInit+0x234>)
 8002378:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 800237c:	6313      	str	r3, [r2, #48]	@ 0x30
 800237e:	4b57      	ldr	r3, [pc, #348]	@ (80024dc <HAL_LTDC_MspInit+0x234>)
 8002380:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002382:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8002386:	613b      	str	r3, [r7, #16]
 8002388:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOC_CLK_ENABLE();
 800238a:	2300      	movs	r3, #0
 800238c:	60fb      	str	r3, [r7, #12]
 800238e:	4b53      	ldr	r3, [pc, #332]	@ (80024dc <HAL_LTDC_MspInit+0x234>)
 8002390:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002392:	4a52      	ldr	r2, [pc, #328]	@ (80024dc <HAL_LTDC_MspInit+0x234>)
 8002394:	f043 0304 	orr.w	r3, r3, #4
 8002398:	6313      	str	r3, [r2, #48]	@ 0x30
 800239a:	4b50      	ldr	r3, [pc, #320]	@ (80024dc <HAL_LTDC_MspInit+0x234>)
 800239c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800239e:	f003 0304 	and.w	r3, r3, #4
 80023a2:	60fb      	str	r3, [r7, #12]
 80023a4:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOD_CLK_ENABLE();
 80023a6:	2300      	movs	r3, #0
 80023a8:	60bb      	str	r3, [r7, #8]
 80023aa:	4b4c      	ldr	r3, [pc, #304]	@ (80024dc <HAL_LTDC_MspInit+0x234>)
 80023ac:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80023ae:	4a4b      	ldr	r2, [pc, #300]	@ (80024dc <HAL_LTDC_MspInit+0x234>)
 80023b0:	f043 0308 	orr.w	r3, r3, #8
 80023b4:	6313      	str	r3, [r2, #48]	@ 0x30
 80023b6:	4b49      	ldr	r3, [pc, #292]	@ (80024dc <HAL_LTDC_MspInit+0x234>)
 80023b8:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80023ba:	f003 0308 	and.w	r3, r3, #8
 80023be:	60bb      	str	r3, [r7, #8]
 80023c0:	68bb      	ldr	r3, [r7, #8]
    PG11     ------> LTDC_B3
    PG12     ------> LTDC_B4
    PB8     ------> LTDC_B6
    PB9     ------> LTDC_B7
    */
    GPIO_InitStruct.Pin = ENABLE_Pin;
 80023c2:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 80023c6:	657b      	str	r3, [r7, #84]	@ 0x54
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80023c8:	2302      	movs	r3, #2
 80023ca:	65bb      	str	r3, [r7, #88]	@ 0x58
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80023cc:	2300      	movs	r3, #0
 80023ce:	65fb      	str	r3, [r7, #92]	@ 0x5c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80023d0:	2300      	movs	r3, #0
 80023d2:	663b      	str	r3, [r7, #96]	@ 0x60
    GPIO_InitStruct.Alternate = GPIO_AF14_LTDC;
 80023d4:	230e      	movs	r3, #14
 80023d6:	667b      	str	r3, [r7, #100]	@ 0x64
    HAL_GPIO_Init(ENABLE_GPIO_Port, &GPIO_InitStruct);
 80023d8:	f107 0354 	add.w	r3, r7, #84	@ 0x54
 80023dc:	4619      	mov	r1, r3
 80023de:	4840      	ldr	r0, [pc, #256]	@ (80024e0 <HAL_LTDC_MspInit+0x238>)
 80023e0:	f000 fff4 	bl	80033cc <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = B5_Pin|VSYNC_Pin|G2_Pin|R4_Pin
 80023e4:	f641 0358 	movw	r3, #6232	@ 0x1858
 80023e8:	657b      	str	r3, [r7, #84]	@ 0x54
                          |R5_Pin;
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80023ea:	2302      	movs	r3, #2
 80023ec:	65bb      	str	r3, [r7, #88]	@ 0x58
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80023ee:	2300      	movs	r3, #0
 80023f0:	65fb      	str	r3, [r7, #92]	@ 0x5c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80023f2:	2300      	movs	r3, #0
 80023f4:	663b      	str	r3, [r7, #96]	@ 0x60
    GPIO_InitStruct.Alternate = GPIO_AF14_LTDC;
 80023f6:	230e      	movs	r3, #14
 80023f8:	667b      	str	r3, [r7, #100]	@ 0x64
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80023fa:	f107 0354 	add.w	r3, r7, #84	@ 0x54
 80023fe:	4619      	mov	r1, r3
 8002400:	4838      	ldr	r0, [pc, #224]	@ (80024e4 <HAL_LTDC_MspInit+0x23c>)
 8002402:	f000 ffe3 	bl	80033cc <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = R3_Pin|R6_Pin;
 8002406:	2303      	movs	r3, #3
 8002408:	657b      	str	r3, [r7, #84]	@ 0x54
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800240a:	2302      	movs	r3, #2
 800240c:	65bb      	str	r3, [r7, #88]	@ 0x58
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800240e:	2300      	movs	r3, #0
 8002410:	65fb      	str	r3, [r7, #92]	@ 0x5c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002412:	2300      	movs	r3, #0
 8002414:	663b      	str	r3, [r7, #96]	@ 0x60
    GPIO_InitStruct.Alternate = GPIO_AF9_LTDC;
 8002416:	2309      	movs	r3, #9
 8002418:	667b      	str	r3, [r7, #100]	@ 0x64
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800241a:	f107 0354 	add.w	r3, r7, #84	@ 0x54
 800241e:	4619      	mov	r1, r3
 8002420:	4831      	ldr	r0, [pc, #196]	@ (80024e8 <HAL_LTDC_MspInit+0x240>)
 8002422:	f000 ffd3 	bl	80033cc <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = G4_Pin|G5_Pin|B6_Pin|B7_Pin;
 8002426:	f44f 6370 	mov.w	r3, #3840	@ 0xf00
 800242a:	657b      	str	r3, [r7, #84]	@ 0x54
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800242c:	2302      	movs	r3, #2
 800242e:	65bb      	str	r3, [r7, #88]	@ 0x58
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002430:	2300      	movs	r3, #0
 8002432:	65fb      	str	r3, [r7, #92]	@ 0x5c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002434:	2300      	movs	r3, #0
 8002436:	663b      	str	r3, [r7, #96]	@ 0x60
    GPIO_InitStruct.Alternate = GPIO_AF14_LTDC;
 8002438:	230e      	movs	r3, #14
 800243a:	667b      	str	r3, [r7, #100]	@ 0x64
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800243c:	f107 0354 	add.w	r3, r7, #84	@ 0x54
 8002440:	4619      	mov	r1, r3
 8002442:	4829      	ldr	r0, [pc, #164]	@ (80024e8 <HAL_LTDC_MspInit+0x240>)
 8002444:	f000 ffc2 	bl	80033cc <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = R7_Pin|DOTCLK_Pin|B3_Pin;
 8002448:	f44f 630c 	mov.w	r3, #2240	@ 0x8c0
 800244c:	657b      	str	r3, [r7, #84]	@ 0x54
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800244e:	2302      	movs	r3, #2
 8002450:	65bb      	str	r3, [r7, #88]	@ 0x58
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002452:	2300      	movs	r3, #0
 8002454:	65fb      	str	r3, [r7, #92]	@ 0x5c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002456:	2300      	movs	r3, #0
 8002458:	663b      	str	r3, [r7, #96]	@ 0x60
    GPIO_InitStruct.Alternate = GPIO_AF14_LTDC;
 800245a:	230e      	movs	r3, #14
 800245c:	667b      	str	r3, [r7, #100]	@ 0x64
    HAL_GPIO_Init(GPIOG, &GPIO_InitStruct);
 800245e:	f107 0354 	add.w	r3, r7, #84	@ 0x54
 8002462:	4619      	mov	r1, r3
 8002464:	4821      	ldr	r0, [pc, #132]	@ (80024ec <HAL_LTDC_MspInit+0x244>)
 8002466:	f000 ffb1 	bl	80033cc <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = HSYNC_Pin|G6_Pin|R2_Pin;
 800246a:	f44f 6398 	mov.w	r3, #1216	@ 0x4c0
 800246e:	657b      	str	r3, [r7, #84]	@ 0x54
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002470:	2302      	movs	r3, #2
 8002472:	65bb      	str	r3, [r7, #88]	@ 0x58
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002474:	2300      	movs	r3, #0
 8002476:	65fb      	str	r3, [r7, #92]	@ 0x5c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002478:	2300      	movs	r3, #0
 800247a:	663b      	str	r3, [r7, #96]	@ 0x60
    GPIO_InitStruct.Alternate = GPIO_AF14_LTDC;
 800247c:	230e      	movs	r3, #14
 800247e:	667b      	str	r3, [r7, #100]	@ 0x64
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8002480:	f107 0354 	add.w	r3, r7, #84	@ 0x54
 8002484:	4619      	mov	r1, r3
 8002486:	481a      	ldr	r0, [pc, #104]	@ (80024f0 <HAL_LTDC_MspInit+0x248>)
 8002488:	f000 ffa0 	bl	80033cc <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = G7_Pin|B2_Pin;
 800248c:	2348      	movs	r3, #72	@ 0x48
 800248e:	657b      	str	r3, [r7, #84]	@ 0x54
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002490:	2302      	movs	r3, #2
 8002492:	65bb      	str	r3, [r7, #88]	@ 0x58
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002494:	2300      	movs	r3, #0
 8002496:	65fb      	str	r3, [r7, #92]	@ 0x5c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002498:	2300      	movs	r3, #0
 800249a:	663b      	str	r3, [r7, #96]	@ 0x60
    GPIO_InitStruct.Alternate = GPIO_AF14_LTDC;
 800249c:	230e      	movs	r3, #14
 800249e:	667b      	str	r3, [r7, #100]	@ 0x64
    HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 80024a0:	f107 0354 	add.w	r3, r7, #84	@ 0x54
 80024a4:	4619      	mov	r1, r3
 80024a6:	4813      	ldr	r0, [pc, #76]	@ (80024f4 <HAL_LTDC_MspInit+0x24c>)
 80024a8:	f000 ff90 	bl	80033cc <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = G3_Pin|B4_Pin;
 80024ac:	f44f 53a0 	mov.w	r3, #5120	@ 0x1400
 80024b0:	657b      	str	r3, [r7, #84]	@ 0x54
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80024b2:	2302      	movs	r3, #2
 80024b4:	65bb      	str	r3, [r7, #88]	@ 0x58
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80024b6:	2300      	movs	r3, #0
 80024b8:	65fb      	str	r3, [r7, #92]	@ 0x5c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80024ba:	2300      	movs	r3, #0
 80024bc:	663b      	str	r3, [r7, #96]	@ 0x60
    GPIO_InitStruct.Alternate = GPIO_AF9_LTDC;
 80024be:	2309      	movs	r3, #9
 80024c0:	667b      	str	r3, [r7, #100]	@ 0x64
    HAL_GPIO_Init(GPIOG, &GPIO_InitStruct);
 80024c2:	f107 0354 	add.w	r3, r7, #84	@ 0x54
 80024c6:	4619      	mov	r1, r3
 80024c8:	4808      	ldr	r0, [pc, #32]	@ (80024ec <HAL_LTDC_MspInit+0x244>)
 80024ca:	f000 ff7f 	bl	80033cc <HAL_GPIO_Init>

  /* USER CODE END LTDC_MspInit 1 */

  }

}
 80024ce:	bf00      	nop
 80024d0:	3768      	adds	r7, #104	@ 0x68
 80024d2:	46bd      	mov	sp, r7
 80024d4:	bd80      	pop	{r7, pc}
 80024d6:	bf00      	nop
 80024d8:	40016800 	.word	0x40016800
 80024dc:	40023800 	.word	0x40023800
 80024e0:	40021400 	.word	0x40021400
 80024e4:	40020000 	.word	0x40020000
 80024e8:	40020400 	.word	0x40020400
 80024ec:	40021800 	.word	0x40021800
 80024f0:	40020800 	.word	0x40020800
 80024f4:	40020c00 	.word	0x40020c00

080024f8 <HAL_RNG_MspInit>:
* This function configures the hardware resources used in this example
* @param hrng: RNG handle pointer
* @retval None
*/
void HAL_RNG_MspInit(RNG_HandleTypeDef* hrng)
{
 80024f8:	b480      	push	{r7}
 80024fa:	b085      	sub	sp, #20
 80024fc:	af00      	add	r7, sp, #0
 80024fe:	6078      	str	r0, [r7, #4]
  if(hrng->Instance==RNG)
 8002500:	687b      	ldr	r3, [r7, #4]
 8002502:	681b      	ldr	r3, [r3, #0]
 8002504:	4a0b      	ldr	r2, [pc, #44]	@ (8002534 <HAL_RNG_MspInit+0x3c>)
 8002506:	4293      	cmp	r3, r2
 8002508:	d10d      	bne.n	8002526 <HAL_RNG_MspInit+0x2e>
  {
  /* USER CODE BEGIN RNG_MspInit 0 */

  /* USER CODE END RNG_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_RNG_CLK_ENABLE();
 800250a:	2300      	movs	r3, #0
 800250c:	60fb      	str	r3, [r7, #12]
 800250e:	4b0a      	ldr	r3, [pc, #40]	@ (8002538 <HAL_RNG_MspInit+0x40>)
 8002510:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8002512:	4a09      	ldr	r2, [pc, #36]	@ (8002538 <HAL_RNG_MspInit+0x40>)
 8002514:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8002518:	6353      	str	r3, [r2, #52]	@ 0x34
 800251a:	4b07      	ldr	r3, [pc, #28]	@ (8002538 <HAL_RNG_MspInit+0x40>)
 800251c:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800251e:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8002522:	60fb      	str	r3, [r7, #12]
 8002524:	68fb      	ldr	r3, [r7, #12]

  /* USER CODE END RNG_MspInit 1 */

  }

}
 8002526:	bf00      	nop
 8002528:	3714      	adds	r7, #20
 800252a:	46bd      	mov	sp, r7
 800252c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002530:	4770      	bx	lr
 8002532:	bf00      	nop
 8002534:	50060800 	.word	0x50060800
 8002538:	40023800 	.word	0x40023800

0800253c <HAL_SPI_MspInit>:
* This function configures the hardware resources used in this example
* @param hspi: SPI handle pointer
* @retval None
*/
void HAL_SPI_MspInit(SPI_HandleTypeDef* hspi)
{
 800253c:	b580      	push	{r7, lr}
 800253e:	b08a      	sub	sp, #40	@ 0x28
 8002540:	af00      	add	r7, sp, #0
 8002542:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002544:	f107 0314 	add.w	r3, r7, #20
 8002548:	2200      	movs	r2, #0
 800254a:	601a      	str	r2, [r3, #0]
 800254c:	605a      	str	r2, [r3, #4]
 800254e:	609a      	str	r2, [r3, #8]
 8002550:	60da      	str	r2, [r3, #12]
 8002552:	611a      	str	r2, [r3, #16]
  if(hspi->Instance==SPI5)
 8002554:	687b      	ldr	r3, [r7, #4]
 8002556:	681b      	ldr	r3, [r3, #0]
 8002558:	4a19      	ldr	r2, [pc, #100]	@ (80025c0 <HAL_SPI_MspInit+0x84>)
 800255a:	4293      	cmp	r3, r2
 800255c:	d12c      	bne.n	80025b8 <HAL_SPI_MspInit+0x7c>
  {
  /* USER CODE BEGIN SPI5_MspInit 0 */

  /* USER CODE END SPI5_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_SPI5_CLK_ENABLE();
 800255e:	2300      	movs	r3, #0
 8002560:	613b      	str	r3, [r7, #16]
 8002562:	4b18      	ldr	r3, [pc, #96]	@ (80025c4 <HAL_SPI_MspInit+0x88>)
 8002564:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8002566:	4a17      	ldr	r2, [pc, #92]	@ (80025c4 <HAL_SPI_MspInit+0x88>)
 8002568:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 800256c:	6453      	str	r3, [r2, #68]	@ 0x44
 800256e:	4b15      	ldr	r3, [pc, #84]	@ (80025c4 <HAL_SPI_MspInit+0x88>)
 8002570:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8002572:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 8002576:	613b      	str	r3, [r7, #16]
 8002578:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOF_CLK_ENABLE();
 800257a:	2300      	movs	r3, #0
 800257c:	60fb      	str	r3, [r7, #12]
 800257e:	4b11      	ldr	r3, [pc, #68]	@ (80025c4 <HAL_SPI_MspInit+0x88>)
 8002580:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002582:	4a10      	ldr	r2, [pc, #64]	@ (80025c4 <HAL_SPI_MspInit+0x88>)
 8002584:	f043 0320 	orr.w	r3, r3, #32
 8002588:	6313      	str	r3, [r2, #48]	@ 0x30
 800258a:	4b0e      	ldr	r3, [pc, #56]	@ (80025c4 <HAL_SPI_MspInit+0x88>)
 800258c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800258e:	f003 0320 	and.w	r3, r3, #32
 8002592:	60fb      	str	r3, [r7, #12]
 8002594:	68fb      	ldr	r3, [r7, #12]
    /**SPI5 GPIO Configuration
    PF7     ------> SPI5_SCK
    PF8     ------> SPI5_MISO
    PF9     ------> SPI5_MOSI
    */
    GPIO_InitStruct.Pin = SPI5_SCK_Pin|SPI5_MISO_Pin|SPI5_MOSI_Pin;
 8002596:	f44f 7360 	mov.w	r3, #896	@ 0x380
 800259a:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800259c:	2302      	movs	r3, #2
 800259e:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80025a0:	2300      	movs	r3, #0
 80025a2:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80025a4:	2300      	movs	r3, #0
 80025a6:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI5;
 80025a8:	2305      	movs	r3, #5
 80025aa:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(GPIOF, &GPIO_InitStruct);
 80025ac:	f107 0314 	add.w	r3, r7, #20
 80025b0:	4619      	mov	r1, r3
 80025b2:	4805      	ldr	r0, [pc, #20]	@ (80025c8 <HAL_SPI_MspInit+0x8c>)
 80025b4:	f000 ff0a 	bl	80033cc <HAL_GPIO_Init>

  /* USER CODE END SPI5_MspInit 1 */

  }

}
 80025b8:	bf00      	nop
 80025ba:	3728      	adds	r7, #40	@ 0x28
 80025bc:	46bd      	mov	sp, r7
 80025be:	bd80      	pop	{r7, pc}
 80025c0:	40015000 	.word	0x40015000
 80025c4:	40023800 	.word	0x40023800
 80025c8:	40021400 	.word	0x40021400

080025cc <HAL_SPI_MspDeInit>:
* This function freeze the hardware resources used in this example
* @param hspi: SPI handle pointer
* @retval None
*/
void HAL_SPI_MspDeInit(SPI_HandleTypeDef* hspi)
{
 80025cc:	b580      	push	{r7, lr}
 80025ce:	b082      	sub	sp, #8
 80025d0:	af00      	add	r7, sp, #0
 80025d2:	6078      	str	r0, [r7, #4]
  if(hspi->Instance==SPI5)
 80025d4:	687b      	ldr	r3, [r7, #4]
 80025d6:	681b      	ldr	r3, [r3, #0]
 80025d8:	4a08      	ldr	r2, [pc, #32]	@ (80025fc <HAL_SPI_MspDeInit+0x30>)
 80025da:	4293      	cmp	r3, r2
 80025dc:	d10a      	bne.n	80025f4 <HAL_SPI_MspDeInit+0x28>
  {
  /* USER CODE BEGIN SPI5_MspDeInit 0 */

  /* USER CODE END SPI5_MspDeInit 0 */
    /* Peripheral clock disable */
    __HAL_RCC_SPI5_CLK_DISABLE();
 80025de:	4b08      	ldr	r3, [pc, #32]	@ (8002600 <HAL_SPI_MspDeInit+0x34>)
 80025e0:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80025e2:	4a07      	ldr	r2, [pc, #28]	@ (8002600 <HAL_SPI_MspDeInit+0x34>)
 80025e4:	f423 1380 	bic.w	r3, r3, #1048576	@ 0x100000
 80025e8:	6453      	str	r3, [r2, #68]	@ 0x44
    /**SPI5 GPIO Configuration
    PF7     ------> SPI5_SCK
    PF8     ------> SPI5_MISO
    PF9     ------> SPI5_MOSI
    */
    HAL_GPIO_DeInit(GPIOF, SPI5_SCK_Pin|SPI5_MISO_Pin|SPI5_MOSI_Pin);
 80025ea:	f44f 7160 	mov.w	r1, #896	@ 0x380
 80025ee:	4805      	ldr	r0, [pc, #20]	@ (8002604 <HAL_SPI_MspDeInit+0x38>)
 80025f0:	f001 f898 	bl	8003724 <HAL_GPIO_DeInit>
  /* USER CODE BEGIN SPI5_MspDeInit 1 */

  /* USER CODE END SPI5_MspDeInit 1 */
  }

}
 80025f4:	bf00      	nop
 80025f6:	3708      	adds	r7, #8
 80025f8:	46bd      	mov	sp, r7
 80025fa:	bd80      	pop	{r7, pc}
 80025fc:	40015000 	.word	0x40015000
 8002600:	40023800 	.word	0x40023800
 8002604:	40021400 	.word	0x40021400

08002608 <HAL_TIM_Base_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 8002608:	b480      	push	{r7}
 800260a:	b085      	sub	sp, #20
 800260c:	af00      	add	r7, sp, #0
 800260e:	6078      	str	r0, [r7, #4]
  if(htim_base->Instance==TIM6)
 8002610:	687b      	ldr	r3, [r7, #4]
 8002612:	681b      	ldr	r3, [r3, #0]
 8002614:	4a15      	ldr	r2, [pc, #84]	@ (800266c <HAL_TIM_Base_MspInit+0x64>)
 8002616:	4293      	cmp	r3, r2
 8002618:	d10e      	bne.n	8002638 <HAL_TIM_Base_MspInit+0x30>
  {
  /* USER CODE BEGIN TIM6_MspInit 0 */

  /* USER CODE END TIM6_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM6_CLK_ENABLE();
 800261a:	2300      	movs	r3, #0
 800261c:	60fb      	str	r3, [r7, #12]
 800261e:	4b14      	ldr	r3, [pc, #80]	@ (8002670 <HAL_TIM_Base_MspInit+0x68>)
 8002620:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002622:	4a13      	ldr	r2, [pc, #76]	@ (8002670 <HAL_TIM_Base_MspInit+0x68>)
 8002624:	f043 0310 	orr.w	r3, r3, #16
 8002628:	6413      	str	r3, [r2, #64]	@ 0x40
 800262a:	4b11      	ldr	r3, [pc, #68]	@ (8002670 <HAL_TIM_Base_MspInit+0x68>)
 800262c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800262e:	f003 0310 	and.w	r3, r3, #16
 8002632:	60fb      	str	r3, [r7, #12]
 8002634:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN TIM7_MspInit 1 */

  /* USER CODE END TIM7_MspInit 1 */
  }

}
 8002636:	e012      	b.n	800265e <HAL_TIM_Base_MspInit+0x56>
  else if(htim_base->Instance==TIM7)
 8002638:	687b      	ldr	r3, [r7, #4]
 800263a:	681b      	ldr	r3, [r3, #0]
 800263c:	4a0d      	ldr	r2, [pc, #52]	@ (8002674 <HAL_TIM_Base_MspInit+0x6c>)
 800263e:	4293      	cmp	r3, r2
 8002640:	d10d      	bne.n	800265e <HAL_TIM_Base_MspInit+0x56>
    __HAL_RCC_TIM7_CLK_ENABLE();
 8002642:	2300      	movs	r3, #0
 8002644:	60bb      	str	r3, [r7, #8]
 8002646:	4b0a      	ldr	r3, [pc, #40]	@ (8002670 <HAL_TIM_Base_MspInit+0x68>)
 8002648:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800264a:	4a09      	ldr	r2, [pc, #36]	@ (8002670 <HAL_TIM_Base_MspInit+0x68>)
 800264c:	f043 0320 	orr.w	r3, r3, #32
 8002650:	6413      	str	r3, [r2, #64]	@ 0x40
 8002652:	4b07      	ldr	r3, [pc, #28]	@ (8002670 <HAL_TIM_Base_MspInit+0x68>)
 8002654:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002656:	f003 0320 	and.w	r3, r3, #32
 800265a:	60bb      	str	r3, [r7, #8]
 800265c:	68bb      	ldr	r3, [r7, #8]
}
 800265e:	bf00      	nop
 8002660:	3714      	adds	r7, #20
 8002662:	46bd      	mov	sp, r7
 8002664:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002668:	4770      	bx	lr
 800266a:	bf00      	nop
 800266c:	40001000 	.word	0x40001000
 8002670:	40023800 	.word	0x40023800
 8002674:	40001400 	.word	0x40001400

08002678 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8002678:	b480      	push	{r7}
 800267a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 800267c:	bf00      	nop
 800267e:	e7fd      	b.n	800267c <NMI_Handler+0x4>

08002680 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8002680:	b480      	push	{r7}
 8002682:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8002684:	bf00      	nop
 8002686:	e7fd      	b.n	8002684 <HardFault_Handler+0x4>

08002688 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8002688:	b480      	push	{r7}
 800268a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 800268c:	bf00      	nop
 800268e:	e7fd      	b.n	800268c <MemManage_Handler+0x4>

08002690 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8002690:	b480      	push	{r7}
 8002692:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8002694:	bf00      	nop
 8002696:	e7fd      	b.n	8002694 <BusFault_Handler+0x4>

08002698 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8002698:	b480      	push	{r7}
 800269a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 800269c:	bf00      	nop
 800269e:	e7fd      	b.n	800269c <UsageFault_Handler+0x4>

080026a0 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 80026a0:	b480      	push	{r7}
 80026a2:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 80026a4:	bf00      	nop
 80026a6:	46bd      	mov	sp, r7
 80026a8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80026ac:	4770      	bx	lr

080026ae <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 80026ae:	b480      	push	{r7}
 80026b0:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 80026b2:	bf00      	nop
 80026b4:	46bd      	mov	sp, r7
 80026b6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80026ba:	4770      	bx	lr

080026bc <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 80026bc:	b480      	push	{r7}
 80026be:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 80026c0:	bf00      	nop
 80026c2:	46bd      	mov	sp, r7
 80026c4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80026c8:	4770      	bx	lr

080026ca <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 80026ca:	b580      	push	{r7, lr}
 80026cc:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 80026ce:	f000 fcb1 	bl	8003034 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 80026d2:	bf00      	nop
 80026d4:	bd80      	pop	{r7, pc}
	...

080026d8 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80026d8:	b480      	push	{r7}
 80026da:	b083      	sub	sp, #12
 80026dc:	af00      	add	r7, sp, #0
 80026de:	4603      	mov	r3, r0
 80026e0:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80026e2:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80026e6:	2b00      	cmp	r3, #0
 80026e8:	db0b      	blt.n	8002702 <__NVIC_EnableIRQ+0x2a>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 80026ea:	79fb      	ldrb	r3, [r7, #7]
 80026ec:	f003 021f 	and.w	r2, r3, #31
 80026f0:	4907      	ldr	r1, [pc, #28]	@ (8002710 <__NVIC_EnableIRQ+0x38>)
 80026f2:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80026f6:	095b      	lsrs	r3, r3, #5
 80026f8:	2001      	movs	r0, #1
 80026fa:	fa00 f202 	lsl.w	r2, r0, r2
 80026fe:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    __COMPILER_BARRIER();
  }
}
 8002702:	bf00      	nop
 8002704:	370c      	adds	r7, #12
 8002706:	46bd      	mov	sp, r7
 8002708:	f85d 7b04 	ldr.w	r7, [sp], #4
 800270c:	4770      	bx	lr
 800270e:	bf00      	nop
 8002710:	e000e100 	.word	0xe000e100

08002714 <STMPE811_Init>:

#define DEFAULT_TESTING_TIMEOUT 250000

/* The below function was created by Tilen MAJERLE but modified by Xavion */
STMPE811_State_t STMPE811_Init(void)
{
 8002714:	b580      	push	{r7, lr}
 8002716:	b082      	sub	sp, #8
 8002718:	af00      	add	r7, sp, #0

    // Initalize any other GPIO neeeded
    //stmpe811_MspInit(); // Currently we will be just using the HAL GPIO Init fuction to initialize GPIOs..

    // Initialze I2C3 ports 
    I2C3_MspInit();
 800271a:	f000 f9dd 	bl	8002ad8 <I2C3_MspInit>
    /* Initialize I2C */
    I2C3_Init();
 800271e:	f000 f99d 	bl	8002a5c <I2C3_Init>

    /* Reset */
    I2C3_Write(STMPE811_ADDRESS, STMPE811_SYS_CTRL1, 0x02);
 8002722:	2202      	movs	r2, #2
 8002724:	2103      	movs	r1, #3
 8002726:	2082      	movs	r0, #130	@ 0x82
 8002728:	f000 fa2a 	bl	8002b80 <I2C3_Write>
    HAL_Delay(5);
 800272c:	2005      	movs	r0, #5
 800272e:	f000 fca1 	bl	8003074 <HAL_Delay>
    I2C3_Write(STMPE811_ADDRESS, STMPE811_SYS_CTRL1, 0x00);
 8002732:	2200      	movs	r2, #0
 8002734:	2103      	movs	r1, #3
 8002736:	2082      	movs	r0, #130	@ 0x82
 8002738:	f000 fa22 	bl	8002b80 <I2C3_Write>
    HAL_Delay(2);
 800273c:	2002      	movs	r0, #2
 800273e:	f000 fc99 	bl	8003074 <HAL_Delay>

    /* Check for STMPE811 Connected */
    uint16_t dataRecieved;
    I2C3_MulitByteRead(STMPE811_ADDRESS, STMPE811_CHIP_ID, (uint8_t * )&dataRecieved, TWOBYTE); // Need to change
 8002742:	1cba      	adds	r2, r7, #2
 8002744:	2302      	movs	r3, #2
 8002746:	2100      	movs	r1, #0
 8002748:	2082      	movs	r0, #130	@ 0x82
 800274a:	f000 fa69 	bl	8002c20 <I2C3_MulitByteRead>
    // Flip bytes
    uint16_t chipID = (dataRecieved << 8);
 800274e:	887b      	ldrh	r3, [r7, #2]
 8002750:	021b      	lsls	r3, r3, #8
 8002752:	80fb      	strh	r3, [r7, #6]
    chipID |= ((dataRecieved & 0xFF00) >> 8);
 8002754:	887b      	ldrh	r3, [r7, #2]
 8002756:	0a1b      	lsrs	r3, r3, #8
 8002758:	b29a      	uxth	r2, r3
 800275a:	88fb      	ldrh	r3, [r7, #6]
 800275c:	4313      	orrs	r3, r2
 800275e:	80fb      	strh	r3, [r7, #6]

    if (chipID != STMPE811_CHIP_ID_VALUE) {
 8002760:	88fb      	ldrh	r3, [r7, #6]
 8002762:	f640 0211 	movw	r2, #2065	@ 0x811
 8002766:	4293      	cmp	r3, r2
 8002768:	d001      	beq.n	800276e <STMPE811_Init+0x5a>
    	return STMPE811_State_Error;
 800276a:	2303      	movs	r3, #3
 800276c:	e095      	b.n	800289a <STMPE811_Init+0x186>
    }

    /* Reset */
    I2C3_Write(STMPE811_ADDRESS, STMPE811_SYS_CTRL1, 0x02);
 800276e:	2202      	movs	r2, #2
 8002770:	2103      	movs	r1, #3
 8002772:	2082      	movs	r0, #130	@ 0x82
 8002774:	f000 fa04 	bl	8002b80 <I2C3_Write>
    HAL_Delay(5);
 8002778:	2005      	movs	r0, #5
 800277a:	f000 fc7b 	bl	8003074 <HAL_Delay>
    I2C3_Write(STMPE811_ADDRESS, STMPE811_SYS_CTRL1, 0x00);
 800277e:	2200      	movs	r2, #0
 8002780:	2103      	movs	r1, #3
 8002782:	2082      	movs	r0, #130	@ 0x82
 8002784:	f000 f9fc 	bl	8002b80 <I2C3_Write>
    HAL_Delay(2);
 8002788:	2002      	movs	r0, #2
 800278a:	f000 fc73 	bl	8003074 <HAL_Delay>

    /* Get the current register value */
    mode = STMPE811_Read(STMPE811_SYS_CTRL2);
 800278e:	2004      	movs	r0, #4
 8002790:	f000 f887 	bl	80028a2 <STMPE811_Read>
 8002794:	4603      	mov	r3, r0
 8002796:	717b      	strb	r3, [r7, #5]
    mode &= ~(0x01);
 8002798:	797b      	ldrb	r3, [r7, #5]
 800279a:	f023 0301 	bic.w	r3, r3, #1
 800279e:	717b      	strb	r3, [r7, #5]
    I2C3_Write(STMPE811_ADDRESS, STMPE811_SYS_CTRL2, mode);
 80027a0:	797b      	ldrb	r3, [r7, #5]
 80027a2:	461a      	mov	r2, r3
 80027a4:	2104      	movs	r1, #4
 80027a6:	2082      	movs	r0, #130	@ 0x82
 80027a8:	f000 f9ea 	bl	8002b80 <I2C3_Write>
    mode = STMPE811_Read(STMPE811_SYS_CTRL2);
 80027ac:	2004      	movs	r0, #4
 80027ae:	f000 f878 	bl	80028a2 <STMPE811_Read>
 80027b2:	4603      	mov	r3, r0
 80027b4:	717b      	strb	r3, [r7, #5]
    mode &= ~(0x02);
 80027b6:	797b      	ldrb	r3, [r7, #5]
 80027b8:	f023 0302 	bic.w	r3, r3, #2
 80027bc:	717b      	strb	r3, [r7, #5]
    I2C3_Write(STMPE811_ADDRESS, STMPE811_SYS_CTRL2, mode);
 80027be:	797b      	ldrb	r3, [r7, #5]
 80027c0:	461a      	mov	r2, r3
 80027c2:	2104      	movs	r1, #4
 80027c4:	2082      	movs	r0, #130	@ 0x82
 80027c6:	f000 f9db 	bl	8002b80 <I2C3_Write>

    /* Select Sample Time, bit number and ADC Reference */
    I2C3_Write(STMPE811_ADDRESS, STMPE811_ADC_CTRL1, 0x49);
 80027ca:	2249      	movs	r2, #73	@ 0x49
 80027cc:	2120      	movs	r1, #32
 80027ce:	2082      	movs	r0, #130	@ 0x82
 80027d0:	f000 f9d6 	bl	8002b80 <I2C3_Write>

    /* Wait for 2 ms */
    HAL_Delay(2);
 80027d4:	2002      	movs	r0, #2
 80027d6:	f000 fc4d 	bl	8003074 <HAL_Delay>

    /* Select the ADC clock speed: 3.25 MHz */
    I2C3_Write(STMPE811_ADDRESS, STMPE811_ADC_CTRL2, 0x01);
 80027da:	2201      	movs	r2, #1
 80027dc:	2121      	movs	r1, #33	@ 0x21
 80027de:	2082      	movs	r0, #130	@ 0x82
 80027e0:	f000 f9ce 	bl	8002b80 <I2C3_Write>

    /* Select TSC pins in non default mode */
    mode = STMPE811_Read(STMPE811_GPIO_AF);
 80027e4:	2017      	movs	r0, #23
 80027e6:	f000 f85c 	bl	80028a2 <STMPE811_Read>
 80027ea:	4603      	mov	r3, r0
 80027ec:	717b      	strb	r3, [r7, #5]
    mode |= 0x1E;
 80027ee:	797b      	ldrb	r3, [r7, #5]
 80027f0:	f043 031e 	orr.w	r3, r3, #30
 80027f4:	717b      	strb	r3, [r7, #5]
    I2C3_Write(STMPE811_ADDRESS, STMPE811_GPIO_AF, mode);
 80027f6:	797b      	ldrb	r3, [r7, #5]
 80027f8:	461a      	mov	r2, r3
 80027fa:	2117      	movs	r1, #23
 80027fc:	2082      	movs	r0, #130	@ 0x82
 80027fe:	f000 f9bf 	bl	8002b80 <I2C3_Write>
    /* Configuration:
    - Touch average control    : 4 samples
    - Touch delay time         : 500 uS
    - Panel driver setting time: 500 uS
    */
    I2C3_Write(STMPE811_ADDRESS, STMPE811_TSC_CFG, 0x9A);
 8002802:	229a      	movs	r2, #154	@ 0x9a
 8002804:	2141      	movs	r1, #65	@ 0x41
 8002806:	2082      	movs	r0, #130	@ 0x82
 8002808:	f000 f9ba 	bl	8002b80 <I2C3_Write>

    /* Configure the Touch FIFO threshold: single point reading */
    I2C3_Write(STMPE811_ADDRESS, STMPE811_FIFO_TH, 0x01);
 800280c:	2201      	movs	r2, #1
 800280e:	214a      	movs	r1, #74	@ 0x4a
 8002810:	2082      	movs	r0, #130	@ 0x82
 8002812:	f000 f9b5 	bl	8002b80 <I2C3_Write>

    /* Clear the FIFO memory content. */
    I2C3_Write(STMPE811_ADDRESS, STMPE811_FIFO_STA, 0x01);
 8002816:	2201      	movs	r2, #1
 8002818:	214b      	movs	r1, #75	@ 0x4b
 800281a:	2082      	movs	r0, #130	@ 0x82
 800281c:	f000 f9b0 	bl	8002b80 <I2C3_Write>

    /* Put the FIFO back into operation mode  */
    I2C3_Write( STMPE811_ADDRESS, STMPE811_FIFO_STA, 0x00);
 8002820:	2200      	movs	r2, #0
 8002822:	214b      	movs	r1, #75	@ 0x4b
 8002824:	2082      	movs	r0, #130	@ 0x82
 8002826:	f000 f9ab 	bl	8002b80 <I2C3_Write>

    /* Set the range and accuracy pf the pressure measurement (Z) :
    - Fractional part :7
    - Whole part      :1
    */
    I2C3_Write( STMPE811_ADDRESS, STMPE811_TSC_FRACTION_Z, 0x01);
 800282a:	2201      	movs	r2, #1
 800282c:	2156      	movs	r1, #86	@ 0x56
 800282e:	2082      	movs	r0, #130	@ 0x82
 8002830:	f000 f9a6 	bl	8002b80 <I2C3_Write>

    /* Set the driving capability (limit) of the device for TSC pins: 50mA */
    I2C3_Write(STMPE811_ADDRESS, STMPE811_TSC_I_DRIVE, 0x01);
 8002834:	2201      	movs	r2, #1
 8002836:	2158      	movs	r1, #88	@ 0x58
 8002838:	2082      	movs	r0, #130	@ 0x82
 800283a:	f000 f9a1 	bl	8002b80 <I2C3_Write>

    /* Touch screen control configuration (enable TSC):
    - No window tracking index
    - XYZ acquisition mode
    */
    I2C3_Write(STMPE811_ADDRESS, STMPE811_TSC_CTRL, 0x03);
 800283e:	2203      	movs	r2, #3
 8002840:	2140      	movs	r1, #64	@ 0x40
 8002842:	2082      	movs	r0, #130	@ 0x82
 8002844:	f000 f99c 	bl	8002b80 <I2C3_Write>

    /* Clear all the status pending bits if any */
    I2C3_Write(STMPE811_ADDRESS, STMPE811_INT_STA, 0xFF);
 8002848:	22ff      	movs	r2, #255	@ 0xff
 800284a:	210b      	movs	r1, #11
 800284c:	2082      	movs	r0, #130	@ 0x82
 800284e:	f000 f997 	bl	8002b80 <I2C3_Write>

    /* Enable global interrupts */
    #if COMPILE_TOUCH_INTERRUPT_SUPPORT == 1

    enableInterruptSupportForTouch();
 8002852:	f000 f8c1 	bl	80029d8 <enableInterruptSupportForTouch>

    mode = STMPE811_Read(STMPE811_INT_CTRL);
 8002856:	2009      	movs	r0, #9
 8002858:	f000 f823 	bl	80028a2 <STMPE811_Read>
 800285c:	4603      	mov	r3, r0
 800285e:	717b      	strb	r3, [r7, #5]
    mode |= 0x01;
 8002860:	797b      	ldrb	r3, [r7, #5]
 8002862:	f043 0301 	orr.w	r3, r3, #1
 8002866:	717b      	strb	r3, [r7, #5]
    I2C3_Write(STMPE811_ADDRESS, STMPE811_INT_CTRL, mode);
 8002868:	797b      	ldrb	r3, [r7, #5]
 800286a:	461a      	mov	r2, r3
 800286c:	2109      	movs	r1, #9
 800286e:	2082      	movs	r0, #130	@ 0x82
 8002870:	f000 f986 	bl	8002b80 <I2C3_Write>
    
    /* Enable touch interrupt */
    mode = STMPE811_Read(STMPE811_INT_EN);
 8002874:	200a      	movs	r0, #10
 8002876:	f000 f814 	bl	80028a2 <STMPE811_Read>
 800287a:	4603      	mov	r3, r0
 800287c:	717b      	strb	r3, [r7, #5]
    mode |= 0x01;
 800287e:	797b      	ldrb	r3, [r7, #5]
 8002880:	f043 0301 	orr.w	r3, r3, #1
 8002884:	717b      	strb	r3, [r7, #5]
    I2C3_Write(STMPE811_ADDRESS, STMPE811_INT_EN, mode);
 8002886:	797b      	ldrb	r3, [r7, #5]
 8002888:	461a      	mov	r2, r3
 800288a:	210a      	movs	r1, #10
 800288c:	2082      	movs	r0, #130	@ 0x82
 800288e:	f000 f977 	bl	8002b80 <I2C3_Write>
    
    #endif // COMPILE_TOUCH_INTERRUPT_SUPPORT
    
    /* Wait for 2 ms delay */
    HAL_Delay(200);
 8002892:	20c8      	movs	r0, #200	@ 0xc8
 8002894:	f000 fbee 	bl	8003074 <HAL_Delay>

    return STMPE811_State_Ok;
 8002898:	2302      	movs	r3, #2

}
 800289a:	4618      	mov	r0, r3
 800289c:	3708      	adds	r7, #8
 800289e:	46bd      	mov	sp, r7
 80028a0:	bd80      	pop	{r7, pc}

080028a2 <STMPE811_Read>:

uint8_t STMPE811_Read(uint8_t reg)
{
 80028a2:	b580      	push	{r7, lr}
 80028a4:	b084      	sub	sp, #16
 80028a6:	af00      	add	r7, sp, #0
 80028a8:	4603      	mov	r3, r0
 80028aa:	71fb      	strb	r3, [r7, #7]
    // I2C Read
    uint8_t readData;
    I2C3_Read(STMPE811_ADDRESS, reg, &readData);
 80028ac:	f107 020f 	add.w	r2, r7, #15
 80028b0:	79fb      	ldrb	r3, [r7, #7]
 80028b2:	4619      	mov	r1, r3
 80028b4:	2082      	movs	r0, #130	@ 0x82
 80028b6:	f000 f98d 	bl	8002bd4 <I2C3_Read>

    return readData;
 80028ba:	7bfb      	ldrb	r3, [r7, #15]
}
 80028bc:	4618      	mov	r0, r3
 80028be:	3710      	adds	r7, #16
 80028c0:	46bd      	mov	sp, r7
 80028c2:	bd80      	pop	{r7, pc}

080028c4 <STMPE811_Write>:

void STMPE811_Write(uint8_t reg, uint8_t dataToWrite)
{
 80028c4:	b580      	push	{r7, lr}
 80028c6:	b082      	sub	sp, #8
 80028c8:	af00      	add	r7, sp, #0
 80028ca:	4603      	mov	r3, r0
 80028cc:	460a      	mov	r2, r1
 80028ce:	71fb      	strb	r3, [r7, #7]
 80028d0:	4613      	mov	r3, r2
 80028d2:	71bb      	strb	r3, [r7, #6]
    I2C3_Write(STMPE811_ADDRESS, reg, dataToWrite);
 80028d4:	79ba      	ldrb	r2, [r7, #6]
 80028d6:	79fb      	ldrb	r3, [r7, #7]
 80028d8:	4619      	mov	r1, r3
 80028da:	2082      	movs	r0, #130	@ 0x82
 80028dc:	f000 f950 	bl	8002b80 <I2C3_Write>
}
 80028e0:	bf00      	nop
 80028e2:	3708      	adds	r7, #8
 80028e4:	46bd      	mov	sp, r7
 80028e6:	bd80      	pop	{r7, pc}

080028e8 <STMPE811_DetermineTouchPosition>:

    return STMPE811_State_Released;
}

void STMPE811_DetermineTouchPosition(STMPE811_TouchData * data)
{
 80028e8:	b580      	push	{r7, lr}
 80028ea:	b082      	sub	sp, #8
 80028ec:	af00      	add	r7, sp, #0
 80028ee:	6078      	str	r0, [r7, #4]
    //Pressed
    if (data->orientation == STMPE811_Orientation_Portrait_1) {
 80028f0:	687b      	ldr	r3, [r7, #4]
 80028f2:	799b      	ldrb	r3, [r3, #6]
 80028f4:	2b00      	cmp	r3, #0
 80028f6:	d117      	bne.n	8002928 <STMPE811_DetermineTouchPosition+0x40>
        data->x = 239 - TM_STMPE811_ReadX(data->x);
 80028f8:	687b      	ldr	r3, [r7, #4]
 80028fa:	881b      	ldrh	r3, [r3, #0]
 80028fc:	4618      	mov	r0, r3
 80028fe:	f000 f9b1 	bl	8002c64 <TM_STMPE811_ReadX>
 8002902:	4603      	mov	r3, r0
 8002904:	f1c3 03ef 	rsb	r3, r3, #239	@ 0xef
 8002908:	b29a      	uxth	r2, r3
 800290a:	687b      	ldr	r3, [r7, #4]
 800290c:	801a      	strh	r2, [r3, #0]
        data->y = 319 - TM_STMPE811_ReadY(data->y);
 800290e:	687b      	ldr	r3, [r7, #4]
 8002910:	885b      	ldrh	r3, [r3, #2]
 8002912:	4618      	mov	r0, r3
 8002914:	f000 fa04 	bl	8002d20 <TM_STMPE811_ReadY>
 8002918:	4603      	mov	r3, r0
 800291a:	f5c3 739f 	rsb	r3, r3, #318	@ 0x13e
 800291e:	3301      	adds	r3, #1
 8002920:	b29a      	uxth	r2, r3
 8002922:	687b      	ldr	r3, [r7, #4]
 8002924:	805a      	strh	r2, [r3, #2]
 8002926:	e048      	b.n	80029ba <STMPE811_DetermineTouchPosition+0xd2>
    } else if (data->orientation == STMPE811_Orientation_Portrait_2) {
 8002928:	687b      	ldr	r3, [r7, #4]
 800292a:	799b      	ldrb	r3, [r3, #6]
 800292c:	2b01      	cmp	r3, #1
 800292e:	d112      	bne.n	8002956 <STMPE811_DetermineTouchPosition+0x6e>
        data->x = TM_STMPE811_ReadX(data->x);
 8002930:	687b      	ldr	r3, [r7, #4]
 8002932:	881b      	ldrh	r3, [r3, #0]
 8002934:	4618      	mov	r0, r3
 8002936:	f000 f995 	bl	8002c64 <TM_STMPE811_ReadX>
 800293a:	4603      	mov	r3, r0
 800293c:	461a      	mov	r2, r3
 800293e:	687b      	ldr	r3, [r7, #4]
 8002940:	801a      	strh	r2, [r3, #0]
        data->y = TM_STMPE811_ReadY(data->y);
 8002942:	687b      	ldr	r3, [r7, #4]
 8002944:	885b      	ldrh	r3, [r3, #2]
 8002946:	4618      	mov	r0, r3
 8002948:	f000 f9ea 	bl	8002d20 <TM_STMPE811_ReadY>
 800294c:	4603      	mov	r3, r0
 800294e:	461a      	mov	r2, r3
 8002950:	687b      	ldr	r3, [r7, #4]
 8002952:	805a      	strh	r2, [r3, #2]
 8002954:	e031      	b.n	80029ba <STMPE811_DetermineTouchPosition+0xd2>
    } else if (data->orientation == STMPE811_Orientation_Landscape_1) {
 8002956:	687b      	ldr	r3, [r7, #4]
 8002958:	799b      	ldrb	r3, [r3, #6]
 800295a:	2b02      	cmp	r3, #2
 800295c:	d115      	bne.n	800298a <STMPE811_DetermineTouchPosition+0xa2>
        data->y = TM_STMPE811_ReadX(data->y);
 800295e:	687b      	ldr	r3, [r7, #4]
 8002960:	885b      	ldrh	r3, [r3, #2]
 8002962:	4618      	mov	r0, r3
 8002964:	f000 f97e 	bl	8002c64 <TM_STMPE811_ReadX>
 8002968:	4603      	mov	r3, r0
 800296a:	461a      	mov	r2, r3
 800296c:	687b      	ldr	r3, [r7, #4]
 800296e:	805a      	strh	r2, [r3, #2]
        data->x = 319 - TM_STMPE811_ReadY(data->x);
 8002970:	687b      	ldr	r3, [r7, #4]
 8002972:	881b      	ldrh	r3, [r3, #0]
 8002974:	4618      	mov	r0, r3
 8002976:	f000 f9d3 	bl	8002d20 <TM_STMPE811_ReadY>
 800297a:	4603      	mov	r3, r0
 800297c:	f5c3 739f 	rsb	r3, r3, #318	@ 0x13e
 8002980:	3301      	adds	r3, #1
 8002982:	b29a      	uxth	r2, r3
 8002984:	687b      	ldr	r3, [r7, #4]
 8002986:	801a      	strh	r2, [r3, #0]
 8002988:	e017      	b.n	80029ba <STMPE811_DetermineTouchPosition+0xd2>
    } else if (data->orientation == STMPE811_Orientation_Landscape_2) {
 800298a:	687b      	ldr	r3, [r7, #4]
 800298c:	799b      	ldrb	r3, [r3, #6]
 800298e:	2b03      	cmp	r3, #3
 8002990:	d113      	bne.n	80029ba <STMPE811_DetermineTouchPosition+0xd2>
        data->y = 239 - TM_STMPE811_ReadX(data->x);
 8002992:	687b      	ldr	r3, [r7, #4]
 8002994:	881b      	ldrh	r3, [r3, #0]
 8002996:	4618      	mov	r0, r3
 8002998:	f000 f964 	bl	8002c64 <TM_STMPE811_ReadX>
 800299c:	4603      	mov	r3, r0
 800299e:	f1c3 03ef 	rsb	r3, r3, #239	@ 0xef
 80029a2:	b29a      	uxth	r2, r3
 80029a4:	687b      	ldr	r3, [r7, #4]
 80029a6:	805a      	strh	r2, [r3, #2]
        data->x = TM_STMPE811_ReadY(data->x);
 80029a8:	687b      	ldr	r3, [r7, #4]
 80029aa:	881b      	ldrh	r3, [r3, #0]
 80029ac:	4618      	mov	r0, r3
 80029ae:	f000 f9b7 	bl	8002d20 <TM_STMPE811_ReadY>
 80029b2:	4603      	mov	r3, r0
 80029b4:	461a      	mov	r2, r3
 80029b6:	687b      	ldr	r3, [r7, #4]
 80029b8:	801a      	strh	r2, [r3, #0]
    }

    //Reset Fifo
    I2C3_Write(STMPE811_ADDRESS, STMPE811_FIFO_STA, 0x01);
 80029ba:	2201      	movs	r2, #1
 80029bc:	214b      	movs	r1, #75	@ 0x4b
 80029be:	2082      	movs	r0, #130	@ 0x82
 80029c0:	f000 f8de 	bl	8002b80 <I2C3_Write>
    I2C3_Write(STMPE811_ADDRESS, STMPE811_FIFO_STA, 0x00);
 80029c4:	2200      	movs	r2, #0
 80029c6:	214b      	movs	r1, #75	@ 0x4b
 80029c8:	2082      	movs	r0, #130	@ 0x82
 80029ca:	f000 f8d9 	bl	8002b80 <I2C3_Write>
}
 80029ce:	bf00      	nop
 80029d0:	3708      	adds	r7, #8
 80029d2:	46bd      	mov	sp, r7
 80029d4:	bd80      	pop	{r7, pc}
	...

080029d8 <enableInterruptSupportForTouch>:
}

#if COMPILE_TOUCH_INTERRUPT_SUPPORT == 1

void enableInterruptSupportForTouch(void)
{
 80029d8:	b580      	push	{r7, lr}
 80029da:	b086      	sub	sp, #24
 80029dc:	af00      	add	r7, sp, #0
    // Initialze the GPIO and enable the interrupt
    // Interrupt is on interrupt Line PA15
    __HAL_RCC_GPIOA_CLK_ENABLE();
 80029de:	2300      	movs	r3, #0
 80029e0:	603b      	str	r3, [r7, #0]
 80029e2:	4b14      	ldr	r3, [pc, #80]	@ (8002a34 <enableInterruptSupportForTouch+0x5c>)
 80029e4:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80029e6:	4a13      	ldr	r2, [pc, #76]	@ (8002a34 <enableInterruptSupportForTouch+0x5c>)
 80029e8:	f043 0301 	orr.w	r3, r3, #1
 80029ec:	6313      	str	r3, [r2, #48]	@ 0x30
 80029ee:	4b11      	ldr	r3, [pc, #68]	@ (8002a34 <enableInterruptSupportForTouch+0x5c>)
 80029f0:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80029f2:	f003 0301 	and.w	r3, r3, #1
 80029f6:	603b      	str	r3, [r7, #0]
 80029f8:	683b      	ldr	r3, [r7, #0]

    GPIO_InitTypeDef GPIO_InitStruct = {0};
 80029fa:	1d3b      	adds	r3, r7, #4
 80029fc:	2200      	movs	r2, #0
 80029fe:	601a      	str	r2, [r3, #0]
 8002a00:	605a      	str	r2, [r3, #4]
 8002a02:	609a      	str	r2, [r3, #8]
 8002a04:	60da      	str	r2, [r3, #12]
 8002a06:	611a      	str	r2, [r3, #16]

    GPIO_InitStruct.Pin = GPIO_PIN_15;
 8002a08:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 8002a0c:	607b      	str	r3, [r7, #4]
    GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING_FALLING;
 8002a0e:	f44f 1344 	mov.w	r3, #3211264	@ 0x310000
 8002a12:	60bb      	str	r3, [r7, #8]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002a14:	2300      	movs	r3, #0
 8002a16:	60fb      	str	r3, [r7, #12]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8002a18:	2302      	movs	r3, #2
 8002a1a:	613b      	str	r3, [r7, #16]

    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8002a1c:	1d3b      	adds	r3, r7, #4
 8002a1e:	4619      	mov	r1, r3
 8002a20:	4805      	ldr	r0, [pc, #20]	@ (8002a38 <enableInterruptSupportForTouch+0x60>)
 8002a22:	f000 fcd3 	bl	80033cc <HAL_GPIO_Init>

    NVIC_EnableIRQ(EXTI15_10_IRQn);
 8002a26:	2028      	movs	r0, #40	@ 0x28
 8002a28:	f7ff fe56 	bl	80026d8 <__NVIC_EnableIRQ>

}
 8002a2c:	bf00      	nop
 8002a2e:	3718      	adds	r7, #24
 8002a30:	46bd      	mov	sp, r7
 8002a32:	bd80      	pop	{r7, pc}
 8002a34:	40023800 	.word	0x40023800
 8002a38:	40020000 	.word	0x40020000

08002a3c <verifyHAL_I2C_IS_OKAY>:

#endif 


//  ******************************** I2C Functions ********************************//
void verifyHAL_I2C_IS_OKAY(){
 8002a3c:	b480      	push	{r7}
 8002a3e:	af00      	add	r7, sp, #0
    if (HAL_status != HAL_OK)
 8002a40:	4b05      	ldr	r3, [pc, #20]	@ (8002a58 <verifyHAL_I2C_IS_OKAY+0x1c>)
 8002a42:	781b      	ldrb	r3, [r3, #0]
 8002a44:	2b00      	cmp	r3, #0
 8002a46:	d001      	beq.n	8002a4c <verifyHAL_I2C_IS_OKAY+0x10>
    {
        while(1);
 8002a48:	bf00      	nop
 8002a4a:	e7fd      	b.n	8002a48 <verifyHAL_I2C_IS_OKAY+0xc>
    }
}
 8002a4c:	bf00      	nop
 8002a4e:	46bd      	mov	sp, r7
 8002a50:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002a54:	4770      	bx	lr
 8002a56:	bf00      	nop
 8002a58:	20025cb8 	.word	0x20025cb8

08002a5c <I2C3_Init>:

static void I2C3_Init()
{
 8002a5c:	b580      	push	{r7, lr}
 8002a5e:	b082      	sub	sp, #8
 8002a60:	af00      	add	r7, sp, #0

	__HAL_RCC_I2C3_CLK_ENABLE();
 8002a62:	2300      	movs	r3, #0
 8002a64:	603b      	str	r3, [r7, #0]
 8002a66:	4b18      	ldr	r3, [pc, #96]	@ (8002ac8 <I2C3_Init+0x6c>)
 8002a68:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002a6a:	4a17      	ldr	r2, [pc, #92]	@ (8002ac8 <I2C3_Init+0x6c>)
 8002a6c:	f443 0300 	orr.w	r3, r3, #8388608	@ 0x800000
 8002a70:	6413      	str	r3, [r2, #64]	@ 0x40
 8002a72:	4b15      	ldr	r3, [pc, #84]	@ (8002ac8 <I2C3_Init+0x6c>)
 8002a74:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002a76:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 8002a7a:	603b      	str	r3, [r7, #0]
 8002a7c:	683b      	ldr	r3, [r7, #0]
    // Configure I2C3
    hI2C3.Instance = STMPE811_I2C;
 8002a7e:	4b13      	ldr	r3, [pc, #76]	@ (8002acc <I2C3_Init+0x70>)
 8002a80:	4a13      	ldr	r2, [pc, #76]	@ (8002ad0 <I2C3_Init+0x74>)
 8002a82:	601a      	str	r2, [r3, #0]
    hI2C3.Init.ClockSpeed = STMPE811_I2C_CLOCK;
 8002a84:	4b11      	ldr	r3, [pc, #68]	@ (8002acc <I2C3_Init+0x70>)
 8002a86:	4a13      	ldr	r2, [pc, #76]	@ (8002ad4 <I2C3_Init+0x78>)
 8002a88:	605a      	str	r2, [r3, #4]
    hI2C3.Init.DutyCycle = I2C_DUTYCYCLE_2;
 8002a8a:	4b10      	ldr	r3, [pc, #64]	@ (8002acc <I2C3_Init+0x70>)
 8002a8c:	2200      	movs	r2, #0
 8002a8e:	609a      	str	r2, [r3, #8]
    hI2C3.Init.OwnAddress1 = 0x00; // May be wrong
 8002a90:	4b0e      	ldr	r3, [pc, #56]	@ (8002acc <I2C3_Init+0x70>)
 8002a92:	2200      	movs	r2, #0
 8002a94:	60da      	str	r2, [r3, #12]
    hI2C3.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 8002a96:	4b0d      	ldr	r3, [pc, #52]	@ (8002acc <I2C3_Init+0x70>)
 8002a98:	f44f 4280 	mov.w	r2, #16384	@ 0x4000
 8002a9c:	611a      	str	r2, [r3, #16]
    hI2C3.Init.GeneralCallMode = I2C_NOSTRETCH_DISABLE;
 8002a9e:	4b0b      	ldr	r3, [pc, #44]	@ (8002acc <I2C3_Init+0x70>)
 8002aa0:	2200      	movs	r2, #0
 8002aa2:	61da      	str	r2, [r3, #28]
    hI2C3.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 8002aa4:	4b09      	ldr	r3, [pc, #36]	@ (8002acc <I2C3_Init+0x70>)
 8002aa6:	2200      	movs	r2, #0
 8002aa8:	621a      	str	r2, [r3, #32]
    // Do we need to configutre I2C Mode? 

    // Initialize I2C3 interface
    HAL_StatusTypeDef status;
    status = HAL_I2C_Init(&hI2C3);
 8002aaa:	4808      	ldr	r0, [pc, #32]	@ (8002acc <I2C3_Init+0x70>)
 8002aac:	f000 ff60 	bl	8003970 <HAL_I2C_Init>
 8002ab0:	4603      	mov	r3, r0
 8002ab2:	71fb      	strb	r3, [r7, #7]
    if (status != HAL_OK)
 8002ab4:	79fb      	ldrb	r3, [r7, #7]
 8002ab6:	2b00      	cmp	r3, #0
 8002ab8:	d001      	beq.n	8002abe <I2C3_Init+0x62>
    {
        for(;;); // Catch error
 8002aba:	bf00      	nop
 8002abc:	e7fd      	b.n	8002aba <I2C3_Init+0x5e>
    }
    return;
 8002abe:	bf00      	nop
}
 8002ac0:	3708      	adds	r7, #8
 8002ac2:	46bd      	mov	sp, r7
 8002ac4:	bd80      	pop	{r7, pc}
 8002ac6:	bf00      	nop
 8002ac8:	40023800 	.word	0x40023800
 8002acc:	20025c64 	.word	0x20025c64
 8002ad0:	40005c00 	.word	0x40005c00
 8002ad4:	000186a0 	.word	0x000186a0

08002ad8 <I2C3_MspInit>:

// GPIO Initializations 
static void I2C3_MspInit(void)
{
 8002ad8:	b580      	push	{r7, lr}
 8002ada:	b088      	sub	sp, #32
 8002adc:	af00      	add	r7, sp, #0
	GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002ade:	f107 030c 	add.w	r3, r7, #12
 8002ae2:	2200      	movs	r2, #0
 8002ae4:	601a      	str	r2, [r3, #0]
 8002ae6:	605a      	str	r2, [r3, #4]
 8002ae8:	609a      	str	r2, [r3, #8]
 8002aea:	60da      	str	r2, [r3, #12]
 8002aec:	611a      	str	r2, [r3, #16]
    // Enable Clocks
    // GPIOC
    __HAL_RCC_GPIOC_CLK_ENABLE();
 8002aee:	2300      	movs	r3, #0
 8002af0:	60bb      	str	r3, [r7, #8]
 8002af2:	4b20      	ldr	r3, [pc, #128]	@ (8002b74 <I2C3_MspInit+0x9c>)
 8002af4:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002af6:	4a1f      	ldr	r2, [pc, #124]	@ (8002b74 <I2C3_MspInit+0x9c>)
 8002af8:	f043 0304 	orr.w	r3, r3, #4
 8002afc:	6313      	str	r3, [r2, #48]	@ 0x30
 8002afe:	4b1d      	ldr	r3, [pc, #116]	@ (8002b74 <I2C3_MspInit+0x9c>)
 8002b00:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002b02:	f003 0304 	and.w	r3, r3, #4
 8002b06:	60bb      	str	r3, [r7, #8]
 8002b08:	68bb      	ldr	r3, [r7, #8]

    // GPIOA 
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8002b0a:	2300      	movs	r3, #0
 8002b0c:	607b      	str	r3, [r7, #4]
 8002b0e:	4b19      	ldr	r3, [pc, #100]	@ (8002b74 <I2C3_MspInit+0x9c>)
 8002b10:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002b12:	4a18      	ldr	r2, [pc, #96]	@ (8002b74 <I2C3_MspInit+0x9c>)
 8002b14:	f043 0301 	orr.w	r3, r3, #1
 8002b18:	6313      	str	r3, [r2, #48]	@ 0x30
 8002b1a:	4b16      	ldr	r3, [pc, #88]	@ (8002b74 <I2C3_MspInit+0x9c>)
 8002b1c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002b1e:	f003 0301 	and.w	r3, r3, #1
 8002b22:	607b      	str	r3, [r7, #4]
 8002b24:	687b      	ldr	r3, [r7, #4]

    /*Configure GPIO pin : I2C3_SDA_Pin */
    GPIO_InitStruct.Pin = I2C3_SDA_Pin;
 8002b26:	f44f 7300 	mov.w	r3, #512	@ 0x200
 8002b2a:	60fb      	str	r3, [r7, #12]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8002b2c:	2312      	movs	r3, #18
 8002b2e:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002b30:	2300      	movs	r3, #0
 8002b32:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002b34:	2300      	movs	r3, #0
 8002b36:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C3;
 8002b38:	2304      	movs	r3, #4
 8002b3a:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(I2C3_SDA_GPIO_Port, &GPIO_InitStruct);
 8002b3c:	f107 030c 	add.w	r3, r7, #12
 8002b40:	4619      	mov	r1, r3
 8002b42:	480d      	ldr	r0, [pc, #52]	@ (8002b78 <I2C3_MspInit+0xa0>)
 8002b44:	f000 fc42 	bl	80033cc <HAL_GPIO_Init>

    /*Configure GPIO pin : I2C3_SCL_Pin */
    GPIO_InitStruct.Pin = I2C3_SCL_Pin;
 8002b48:	f44f 7380 	mov.w	r3, #256	@ 0x100
 8002b4c:	60fb      	str	r3, [r7, #12]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8002b4e:	2312      	movs	r3, #18
 8002b50:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002b52:	2300      	movs	r3, #0
 8002b54:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002b56:	2300      	movs	r3, #0
 8002b58:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C3;
 8002b5a:	2304      	movs	r3, #4
 8002b5c:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(I2C3_SCL_GPIO_Port, &GPIO_InitStruct);
 8002b5e:	f107 030c 	add.w	r3, r7, #12
 8002b62:	4619      	mov	r1, r3
 8002b64:	4805      	ldr	r0, [pc, #20]	@ (8002b7c <I2C3_MspInit+0xa4>)
 8002b66:	f000 fc31 	bl	80033cc <HAL_GPIO_Init>
    
}
 8002b6a:	bf00      	nop
 8002b6c:	3720      	adds	r7, #32
 8002b6e:	46bd      	mov	sp, r7
 8002b70:	bd80      	pop	{r7, pc}
 8002b72:	bf00      	nop
 8002b74:	40023800 	.word	0x40023800
 8002b78:	40020800 	.word	0x40020800
 8002b7c:	40020000 	.word	0x40020000

08002b80 <I2C3_Write>:

// This function should only be used for single BYTE transfers 
void I2C3_Write(uint16_t devAddr, uint8_t reg, uint8_t data)
{
 8002b80:	b580      	push	{r7, lr}
 8002b82:	b088      	sub	sp, #32
 8002b84:	af04      	add	r7, sp, #16
 8002b86:	4603      	mov	r3, r0
 8002b88:	80fb      	strh	r3, [r7, #6]
 8002b8a:	460b      	mov	r3, r1
 8002b8c:	717b      	strb	r3, [r7, #5]
 8002b8e:	4613      	mov	r3, r2
 8002b90:	713b      	strb	r3, [r7, #4]
    uint8_t dataConversion = data; // data will be a raw hex value this is mainly for debugging...
 8002b92:	793b      	ldrb	r3, [r7, #4]
 8002b94:	73fb      	strb	r3, [r7, #15]
    // Learning topic - Is this needed? Or can I just use &data in the function call? 
    HAL_status = HAL_I2C_Mem_Write(&hI2C3, devAddr, reg, I2C_MEMADD_SIZE_8BIT, &dataConversion, ONEBYTE, DEFAULT_TESTING_TIMEOUT);
 8002b96:	797b      	ldrb	r3, [r7, #5]
 8002b98:	b29a      	uxth	r2, r3
 8002b9a:	88f9      	ldrh	r1, [r7, #6]
 8002b9c:	4b0a      	ldr	r3, [pc, #40]	@ (8002bc8 <I2C3_Write+0x48>)
 8002b9e:	9302      	str	r3, [sp, #8]
 8002ba0:	2301      	movs	r3, #1
 8002ba2:	9301      	str	r3, [sp, #4]
 8002ba4:	f107 030f 	add.w	r3, r7, #15
 8002ba8:	9300      	str	r3, [sp, #0]
 8002baa:	2301      	movs	r3, #1
 8002bac:	4807      	ldr	r0, [pc, #28]	@ (8002bcc <I2C3_Write+0x4c>)
 8002bae:	f001 f823 	bl	8003bf8 <HAL_I2C_Mem_Write>
 8002bb2:	4603      	mov	r3, r0
 8002bb4:	461a      	mov	r2, r3
 8002bb6:	4b06      	ldr	r3, [pc, #24]	@ (8002bd0 <I2C3_Write+0x50>)
 8002bb8:	701a      	strb	r2, [r3, #0]
    verifyHAL_I2C_IS_OKAY();
 8002bba:	f7ff ff3f 	bl	8002a3c <verifyHAL_I2C_IS_OKAY>
}
 8002bbe:	bf00      	nop
 8002bc0:	3710      	adds	r7, #16
 8002bc2:	46bd      	mov	sp, r7
 8002bc4:	bd80      	pop	{r7, pc}
 8002bc6:	bf00      	nop
 8002bc8:	0003d090 	.word	0x0003d090
 8002bcc:	20025c64 	.word	0x20025c64
 8002bd0:	20025cb8 	.word	0x20025cb8

08002bd4 <I2C3_Read>:

// This function should only be used for single BYTE transfers 
void I2C3_Read(uint8_t address, uint8_t reg, uint8_t * rxData)
{
 8002bd4:	b580      	push	{r7, lr}
 8002bd6:	b086      	sub	sp, #24
 8002bd8:	af04      	add	r7, sp, #16
 8002bda:	4603      	mov	r3, r0
 8002bdc:	603a      	str	r2, [r7, #0]
 8002bde:	71fb      	strb	r3, [r7, #7]
 8002be0:	460b      	mov	r3, r1
 8002be2:	71bb      	strb	r3, [r7, #6]
    // Need to use MEM functions
    HAL_status = HAL_I2C_Mem_Read(&hI2C3, address, reg, I2C_MEMADD_SIZE_8BIT, rxData, ONEBYTE, DEFAULT_TESTING_TIMEOUT);
 8002be4:	79fb      	ldrb	r3, [r7, #7]
 8002be6:	b299      	uxth	r1, r3
 8002be8:	79bb      	ldrb	r3, [r7, #6]
 8002bea:	b29a      	uxth	r2, r3
 8002bec:	4b09      	ldr	r3, [pc, #36]	@ (8002c14 <I2C3_Read+0x40>)
 8002bee:	9302      	str	r3, [sp, #8]
 8002bf0:	2301      	movs	r3, #1
 8002bf2:	9301      	str	r3, [sp, #4]
 8002bf4:	683b      	ldr	r3, [r7, #0]
 8002bf6:	9300      	str	r3, [sp, #0]
 8002bf8:	2301      	movs	r3, #1
 8002bfa:	4807      	ldr	r0, [pc, #28]	@ (8002c18 <I2C3_Read+0x44>)
 8002bfc:	f001 f8f6 	bl	8003dec <HAL_I2C_Mem_Read>
 8002c00:	4603      	mov	r3, r0
 8002c02:	461a      	mov	r2, r3
 8002c04:	4b05      	ldr	r3, [pc, #20]	@ (8002c1c <I2C3_Read+0x48>)
 8002c06:	701a      	strb	r2, [r3, #0]
    verifyHAL_I2C_IS_OKAY();
 8002c08:	f7ff ff18 	bl	8002a3c <verifyHAL_I2C_IS_OKAY>
}
 8002c0c:	bf00      	nop
 8002c0e:	3708      	adds	r7, #8
 8002c10:	46bd      	mov	sp, r7
 8002c12:	bd80      	pop	{r7, pc}
 8002c14:	0003d090 	.word	0x0003d090
 8002c18:	20025c64 	.word	0x20025c64
 8002c1c:	20025cb8 	.word	0x20025cb8

08002c20 <I2C3_MulitByteRead>:

// This function should be used for multiple byte reads from a reg
void I2C3_MulitByteRead(uint8_t address, uint8_t reg, uint8_t * rxData, uint16_t numOfBytes)
{
 8002c20:	b580      	push	{r7, lr}
 8002c22:	b086      	sub	sp, #24
 8002c24:	af04      	add	r7, sp, #16
 8002c26:	603a      	str	r2, [r7, #0]
 8002c28:	461a      	mov	r2, r3
 8002c2a:	4603      	mov	r3, r0
 8002c2c:	71fb      	strb	r3, [r7, #7]
 8002c2e:	460b      	mov	r3, r1
 8002c30:	71bb      	strb	r3, [r7, #6]
 8002c32:	4613      	mov	r3, r2
 8002c34:	80bb      	strh	r3, [r7, #4]
    HAL_I2C_Mem_Read(&hI2C3, address, reg, I2C_MEMADD_SIZE_8BIT, rxData, numOfBytes, DEFAULT_TESTING_TIMEOUT);
 8002c36:	79fb      	ldrb	r3, [r7, #7]
 8002c38:	b299      	uxth	r1, r3
 8002c3a:	79bb      	ldrb	r3, [r7, #6]
 8002c3c:	b29a      	uxth	r2, r3
 8002c3e:	4b07      	ldr	r3, [pc, #28]	@ (8002c5c <I2C3_MulitByteRead+0x3c>)
 8002c40:	9302      	str	r3, [sp, #8]
 8002c42:	88bb      	ldrh	r3, [r7, #4]
 8002c44:	9301      	str	r3, [sp, #4]
 8002c46:	683b      	ldr	r3, [r7, #0]
 8002c48:	9300      	str	r3, [sp, #0]
 8002c4a:	2301      	movs	r3, #1
 8002c4c:	4804      	ldr	r0, [pc, #16]	@ (8002c60 <I2C3_MulitByteRead+0x40>)
 8002c4e:	f001 f8cd 	bl	8003dec <HAL_I2C_Mem_Read>
}
 8002c52:	bf00      	nop
 8002c54:	3708      	adds	r7, #8
 8002c56:	46bd      	mov	sp, r7
 8002c58:	bd80      	pop	{r7, pc}
 8002c5a:	bf00      	nop
 8002c5c:	0003d090 	.word	0x0003d090
 8002c60:	20025c64 	.word	0x20025c64

08002c64 <TM_STMPE811_ReadX>:

/* The below function was created by Tilen MAJERLE but modified by Xavion */
uint16_t TM_STMPE811_ReadX(uint16_t x) { // TM FUNCTION 
 8002c64:	b580      	push	{r7, lr}
 8002c66:	b084      	sub	sp, #16
 8002c68:	af00      	add	r7, sp, #0
 8002c6a:	4603      	mov	r3, r0
 8002c6c:	80fb      	strh	r3, [r7, #6]
    uint8_t data[2];
    int16_t val, dx;
    data[1] = STMPE811_Read(STMPE811_TSC_DATA_X);
 8002c6e:	204d      	movs	r0, #77	@ 0x4d
 8002c70:	f7ff fe17 	bl	80028a2 <STMPE811_Read>
 8002c74:	4603      	mov	r3, r0
 8002c76:	727b      	strb	r3, [r7, #9]
    data[0] = STMPE811_Read(STMPE811_TSC_DATA_X + 1);
 8002c78:	204e      	movs	r0, #78	@ 0x4e
 8002c7a:	f7ff fe12 	bl	80028a2 <STMPE811_Read>
 8002c7e:	4603      	mov	r3, r0
 8002c80:	723b      	strb	r3, [r7, #8]
    val = (data[1] << 8 | (data[0] & 0xFF));
 8002c82:	7a7b      	ldrb	r3, [r7, #9]
 8002c84:	021b      	lsls	r3, r3, #8
 8002c86:	b21a      	sxth	r2, r3
 8002c88:	7a3b      	ldrb	r3, [r7, #8]
 8002c8a:	b21b      	sxth	r3, r3
 8002c8c:	4313      	orrs	r3, r2
 8002c8e:	81fb      	strh	r3, [r7, #14]

    if (val <= 3000) {
 8002c90:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
 8002c94:	f640 32b8 	movw	r2, #3000	@ 0xbb8
 8002c98:	4293      	cmp	r3, r2
 8002c9a:	dc06      	bgt.n	8002caa <TM_STMPE811_ReadX+0x46>
        val = 3900 - val;
 8002c9c:	89fb      	ldrh	r3, [r7, #14]
 8002c9e:	f5c3 6373 	rsb	r3, r3, #3888	@ 0xf30
 8002ca2:	330c      	adds	r3, #12
 8002ca4:	b29b      	uxth	r3, r3
 8002ca6:	81fb      	strh	r3, [r7, #14]
 8002ca8:	e005      	b.n	8002cb6 <TM_STMPE811_ReadX+0x52>
    } else {
        val = 3800 - val;
 8002caa:	89fb      	ldrh	r3, [r7, #14]
 8002cac:	f5c3 636d 	rsb	r3, r3, #3792	@ 0xed0
 8002cb0:	3308      	adds	r3, #8
 8002cb2:	b29b      	uxth	r3, r3
 8002cb4:	81fb      	strh	r3, [r7, #14]
    }

    val /= 15;
 8002cb6:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
 8002cba:	4a18      	ldr	r2, [pc, #96]	@ (8002d1c <TM_STMPE811_ReadX+0xb8>)
 8002cbc:	fb82 1203 	smull	r1, r2, r2, r3
 8002cc0:	441a      	add	r2, r3
 8002cc2:	10d2      	asrs	r2, r2, #3
 8002cc4:	17db      	asrs	r3, r3, #31
 8002cc6:	1ad3      	subs	r3, r2, r3
 8002cc8:	81fb      	strh	r3, [r7, #14]

    if (val > 239) {
 8002cca:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
 8002cce:	2bef      	cmp	r3, #239	@ 0xef
 8002cd0:	dd02      	ble.n	8002cd8 <TM_STMPE811_ReadX+0x74>
        val = 239;
 8002cd2:	23ef      	movs	r3, #239	@ 0xef
 8002cd4:	81fb      	strh	r3, [r7, #14]
 8002cd6:	e005      	b.n	8002ce4 <TM_STMPE811_ReadX+0x80>
    } else if (val < 0) {
 8002cd8:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
 8002cdc:	2b00      	cmp	r3, #0
 8002cde:	da01      	bge.n	8002ce4 <TM_STMPE811_ReadX+0x80>
        val = 0;
 8002ce0:	2300      	movs	r3, #0
 8002ce2:	81fb      	strh	r3, [r7, #14]
    }

    dx = (val > x) ? (val - x) : (x - val);
 8002ce4:	f9b7 200e 	ldrsh.w	r2, [r7, #14]
 8002ce8:	88fb      	ldrh	r3, [r7, #6]
 8002cea:	429a      	cmp	r2, r3
 8002cec:	dd05      	ble.n	8002cfa <TM_STMPE811_ReadX+0x96>
 8002cee:	89fa      	ldrh	r2, [r7, #14]
 8002cf0:	88fb      	ldrh	r3, [r7, #6]
 8002cf2:	1ad3      	subs	r3, r2, r3
 8002cf4:	b29b      	uxth	r3, r3
 8002cf6:	b21b      	sxth	r3, r3
 8002cf8:	e004      	b.n	8002d04 <TM_STMPE811_ReadX+0xa0>
 8002cfa:	89fb      	ldrh	r3, [r7, #14]
 8002cfc:	88fa      	ldrh	r2, [r7, #6]
 8002cfe:	1ad3      	subs	r3, r2, r3
 8002d00:	b29b      	uxth	r3, r3
 8002d02:	b21b      	sxth	r3, r3
 8002d04:	81bb      	strh	r3, [r7, #12]
    if (dx > 4) {
 8002d06:	f9b7 300c 	ldrsh.w	r3, [r7, #12]
 8002d0a:	2b04      	cmp	r3, #4
 8002d0c:	dd01      	ble.n	8002d12 <TM_STMPE811_ReadX+0xae>
        return val;
 8002d0e:	89fb      	ldrh	r3, [r7, #14]
 8002d10:	e000      	b.n	8002d14 <TM_STMPE811_ReadX+0xb0>
    }
    return x;
 8002d12:	88fb      	ldrh	r3, [r7, #6]
}
 8002d14:	4618      	mov	r0, r3
 8002d16:	3710      	adds	r7, #16
 8002d18:	46bd      	mov	sp, r7
 8002d1a:	bd80      	pop	{r7, pc}
 8002d1c:	88888889 	.word	0x88888889

08002d20 <TM_STMPE811_ReadY>:

/* The below function was created by Tilen MAJERLE but modified by Xavion */
uint16_t TM_STMPE811_ReadY(uint16_t y) { // TM FUNCTION 
 8002d20:	b580      	push	{r7, lr}
 8002d22:	b084      	sub	sp, #16
 8002d24:	af00      	add	r7, sp, #0
 8002d26:	4603      	mov	r3, r0
 8002d28:	80fb      	strh	r3, [r7, #6]
    uint8_t data[2];
    int16_t val, dy;
    data[1] = STMPE811_Read(STMPE811_TSC_DATA_Y);
 8002d2a:	204f      	movs	r0, #79	@ 0x4f
 8002d2c:	f7ff fdb9 	bl	80028a2 <STMPE811_Read>
 8002d30:	4603      	mov	r3, r0
 8002d32:	727b      	strb	r3, [r7, #9]
    data[0] = STMPE811_Read(STMPE811_TSC_DATA_Y + 1);
 8002d34:	2050      	movs	r0, #80	@ 0x50
 8002d36:	f7ff fdb4 	bl	80028a2 <STMPE811_Read>
 8002d3a:	4603      	mov	r3, r0
 8002d3c:	723b      	strb	r3, [r7, #8]
    val = (data[1] << 8 | (data[0] & 0xFF));
 8002d3e:	7a7b      	ldrb	r3, [r7, #9]
 8002d40:	021b      	lsls	r3, r3, #8
 8002d42:	b21a      	sxth	r2, r3
 8002d44:	7a3b      	ldrb	r3, [r7, #8]
 8002d46:	b21b      	sxth	r3, r3
 8002d48:	4313      	orrs	r3, r2
 8002d4a:	81fb      	strh	r3, [r7, #14]

    val -= 360;
 8002d4c:	89fb      	ldrh	r3, [r7, #14]
 8002d4e:	f5a3 73b4 	sub.w	r3, r3, #360	@ 0x168
 8002d52:	b29b      	uxth	r3, r3
 8002d54:	81fb      	strh	r3, [r7, #14]
    val = val / 11;
 8002d56:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
 8002d5a:	4a19      	ldr	r2, [pc, #100]	@ (8002dc0 <TM_STMPE811_ReadY+0xa0>)
 8002d5c:	fb82 1203 	smull	r1, r2, r2, r3
 8002d60:	1052      	asrs	r2, r2, #1
 8002d62:	17db      	asrs	r3, r3, #31
 8002d64:	1ad3      	subs	r3, r2, r3
 8002d66:	81fb      	strh	r3, [r7, #14]

    if (val <= 0) {
 8002d68:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
 8002d6c:	2b00      	cmp	r3, #0
 8002d6e:	dc02      	bgt.n	8002d76 <TM_STMPE811_ReadY+0x56>
        val = 0;
 8002d70:	2300      	movs	r3, #0
 8002d72:	81fb      	strh	r3, [r7, #14]
 8002d74:	e007      	b.n	8002d86 <TM_STMPE811_ReadY+0x66>
    } else if (val >= 320) {
 8002d76:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
 8002d7a:	f5b3 7fa0 	cmp.w	r3, #320	@ 0x140
 8002d7e:	db02      	blt.n	8002d86 <TM_STMPE811_ReadY+0x66>
        val = 319;
 8002d80:	f240 133f 	movw	r3, #319	@ 0x13f
 8002d84:	81fb      	strh	r3, [r7, #14]
    }

    dy = (val > y) ? (val - y) : (y - val);
 8002d86:	f9b7 200e 	ldrsh.w	r2, [r7, #14]
 8002d8a:	88fb      	ldrh	r3, [r7, #6]
 8002d8c:	429a      	cmp	r2, r3
 8002d8e:	dd05      	ble.n	8002d9c <TM_STMPE811_ReadY+0x7c>
 8002d90:	89fa      	ldrh	r2, [r7, #14]
 8002d92:	88fb      	ldrh	r3, [r7, #6]
 8002d94:	1ad3      	subs	r3, r2, r3
 8002d96:	b29b      	uxth	r3, r3
 8002d98:	b21b      	sxth	r3, r3
 8002d9a:	e004      	b.n	8002da6 <TM_STMPE811_ReadY+0x86>
 8002d9c:	89fb      	ldrh	r3, [r7, #14]
 8002d9e:	88fa      	ldrh	r2, [r7, #6]
 8002da0:	1ad3      	subs	r3, r2, r3
 8002da2:	b29b      	uxth	r3, r3
 8002da4:	b21b      	sxth	r3, r3
 8002da6:	81bb      	strh	r3, [r7, #12]
    if (dy > 4) {
 8002da8:	f9b7 300c 	ldrsh.w	r3, [r7, #12]
 8002dac:	2b04      	cmp	r3, #4
 8002dae:	dd01      	ble.n	8002db4 <TM_STMPE811_ReadY+0x94>
        return val;
 8002db0:	89fb      	ldrh	r3, [r7, #14]
 8002db2:	e000      	b.n	8002db6 <TM_STMPE811_ReadY+0x96>
    }
    return y;
 8002db4:	88fb      	ldrh	r3, [r7, #6]
}
 8002db6:	4618      	mov	r0, r3
 8002db8:	3710      	adds	r7, #16
 8002dba:	46bd      	mov	sp, r7
 8002dbc:	bd80      	pop	{r7, pc}
 8002dbe:	bf00      	nop
 8002dc0:	2e8ba2e9 	.word	0x2e8ba2e9

08002dc4 <initialise_monitor_handles>:
char **environ = __env;


/* Functions */
void initialise_monitor_handles()
{
 8002dc4:	b480      	push	{r7}
 8002dc6:	af00      	add	r7, sp, #0
}
 8002dc8:	bf00      	nop
 8002dca:	46bd      	mov	sp, r7
 8002dcc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002dd0:	4770      	bx	lr

08002dd2 <_read>:
  _kill(status, -1);
  while (1) {}    /* Make sure we hang here */
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 8002dd2:	b580      	push	{r7, lr}
 8002dd4:	b086      	sub	sp, #24
 8002dd6:	af00      	add	r7, sp, #0
 8002dd8:	60f8      	str	r0, [r7, #12]
 8002dda:	60b9      	str	r1, [r7, #8]
 8002ddc:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8002dde:	2300      	movs	r3, #0
 8002de0:	617b      	str	r3, [r7, #20]
 8002de2:	e00a      	b.n	8002dfa <_read+0x28>
  {
    *ptr++ = __io_getchar();
 8002de4:	f3af 8000 	nop.w
 8002de8:	4601      	mov	r1, r0
 8002dea:	68bb      	ldr	r3, [r7, #8]
 8002dec:	1c5a      	adds	r2, r3, #1
 8002dee:	60ba      	str	r2, [r7, #8]
 8002df0:	b2ca      	uxtb	r2, r1
 8002df2:	701a      	strb	r2, [r3, #0]
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8002df4:	697b      	ldr	r3, [r7, #20]
 8002df6:	3301      	adds	r3, #1
 8002df8:	617b      	str	r3, [r7, #20]
 8002dfa:	697a      	ldr	r2, [r7, #20]
 8002dfc:	687b      	ldr	r3, [r7, #4]
 8002dfe:	429a      	cmp	r2, r3
 8002e00:	dbf0      	blt.n	8002de4 <_read+0x12>
  }

  return len;
 8002e02:	687b      	ldr	r3, [r7, #4]
}
 8002e04:	4618      	mov	r0, r3
 8002e06:	3718      	adds	r7, #24
 8002e08:	46bd      	mov	sp, r7
 8002e0a:	bd80      	pop	{r7, pc}

08002e0c <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 8002e0c:	b580      	push	{r7, lr}
 8002e0e:	b086      	sub	sp, #24
 8002e10:	af00      	add	r7, sp, #0
 8002e12:	60f8      	str	r0, [r7, #12]
 8002e14:	60b9      	str	r1, [r7, #8]
 8002e16:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8002e18:	2300      	movs	r3, #0
 8002e1a:	617b      	str	r3, [r7, #20]
 8002e1c:	e009      	b.n	8002e32 <_write+0x26>
  {
    __io_putchar(*ptr++);
 8002e1e:	68bb      	ldr	r3, [r7, #8]
 8002e20:	1c5a      	adds	r2, r3, #1
 8002e22:	60ba      	str	r2, [r7, #8]
 8002e24:	781b      	ldrb	r3, [r3, #0]
 8002e26:	4618      	mov	r0, r3
 8002e28:	f3af 8000 	nop.w
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8002e2c:	697b      	ldr	r3, [r7, #20]
 8002e2e:	3301      	adds	r3, #1
 8002e30:	617b      	str	r3, [r7, #20]
 8002e32:	697a      	ldr	r2, [r7, #20]
 8002e34:	687b      	ldr	r3, [r7, #4]
 8002e36:	429a      	cmp	r2, r3
 8002e38:	dbf1      	blt.n	8002e1e <_write+0x12>
  }
  return len;
 8002e3a:	687b      	ldr	r3, [r7, #4]
}
 8002e3c:	4618      	mov	r0, r3
 8002e3e:	3718      	adds	r7, #24
 8002e40:	46bd      	mov	sp, r7
 8002e42:	bd80      	pop	{r7, pc}

08002e44 <_close>:

int _close(int file)
{
 8002e44:	b480      	push	{r7}
 8002e46:	b083      	sub	sp, #12
 8002e48:	af00      	add	r7, sp, #0
 8002e4a:	6078      	str	r0, [r7, #4]
  (void)file;
  return -1;
 8002e4c:	f04f 33ff 	mov.w	r3, #4294967295
}
 8002e50:	4618      	mov	r0, r3
 8002e52:	370c      	adds	r7, #12
 8002e54:	46bd      	mov	sp, r7
 8002e56:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002e5a:	4770      	bx	lr

08002e5c <_fstat>:


int _fstat(int file, struct stat *st)
{
 8002e5c:	b480      	push	{r7}
 8002e5e:	b083      	sub	sp, #12
 8002e60:	af00      	add	r7, sp, #0
 8002e62:	6078      	str	r0, [r7, #4]
 8002e64:	6039      	str	r1, [r7, #0]
  (void)file;
  st->st_mode = S_IFCHR;
 8002e66:	683b      	ldr	r3, [r7, #0]
 8002e68:	f44f 5200 	mov.w	r2, #8192	@ 0x2000
 8002e6c:	605a      	str	r2, [r3, #4]
  return 0;
 8002e6e:	2300      	movs	r3, #0
}
 8002e70:	4618      	mov	r0, r3
 8002e72:	370c      	adds	r7, #12
 8002e74:	46bd      	mov	sp, r7
 8002e76:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002e7a:	4770      	bx	lr

08002e7c <_isatty>:

int _isatty(int file)
{
 8002e7c:	b480      	push	{r7}
 8002e7e:	b083      	sub	sp, #12
 8002e80:	af00      	add	r7, sp, #0
 8002e82:	6078      	str	r0, [r7, #4]
  (void)file;
  return 1;
 8002e84:	2301      	movs	r3, #1
}
 8002e86:	4618      	mov	r0, r3
 8002e88:	370c      	adds	r7, #12
 8002e8a:	46bd      	mov	sp, r7
 8002e8c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002e90:	4770      	bx	lr

08002e92 <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 8002e92:	b480      	push	{r7}
 8002e94:	b085      	sub	sp, #20
 8002e96:	af00      	add	r7, sp, #0
 8002e98:	60f8      	str	r0, [r7, #12]
 8002e9a:	60b9      	str	r1, [r7, #8]
 8002e9c:	607a      	str	r2, [r7, #4]
  (void)file;
  (void)ptr;
  (void)dir;
  return 0;
 8002e9e:	2300      	movs	r3, #0
}
 8002ea0:	4618      	mov	r0, r3
 8002ea2:	3714      	adds	r7, #20
 8002ea4:	46bd      	mov	sp, r7
 8002ea6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002eaa:	4770      	bx	lr

08002eac <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8002eac:	b580      	push	{r7, lr}
 8002eae:	b086      	sub	sp, #24
 8002eb0:	af00      	add	r7, sp, #0
 8002eb2:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8002eb4:	4a14      	ldr	r2, [pc, #80]	@ (8002f08 <_sbrk+0x5c>)
 8002eb6:	4b15      	ldr	r3, [pc, #84]	@ (8002f0c <_sbrk+0x60>)
 8002eb8:	1ad3      	subs	r3, r2, r3
 8002eba:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8002ebc:	697b      	ldr	r3, [r7, #20]
 8002ebe:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8002ec0:	4b13      	ldr	r3, [pc, #76]	@ (8002f10 <_sbrk+0x64>)
 8002ec2:	681b      	ldr	r3, [r3, #0]
 8002ec4:	2b00      	cmp	r3, #0
 8002ec6:	d102      	bne.n	8002ece <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8002ec8:	4b11      	ldr	r3, [pc, #68]	@ (8002f10 <_sbrk+0x64>)
 8002eca:	4a12      	ldr	r2, [pc, #72]	@ (8002f14 <_sbrk+0x68>)
 8002ecc:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8002ece:	4b10      	ldr	r3, [pc, #64]	@ (8002f10 <_sbrk+0x64>)
 8002ed0:	681a      	ldr	r2, [r3, #0]
 8002ed2:	687b      	ldr	r3, [r7, #4]
 8002ed4:	4413      	add	r3, r2
 8002ed6:	693a      	ldr	r2, [r7, #16]
 8002ed8:	429a      	cmp	r2, r3
 8002eda:	d207      	bcs.n	8002eec <_sbrk+0x40>
  {
    errno = ENOMEM;
 8002edc:	f003 fdb8 	bl	8006a50 <__errno>
 8002ee0:	4603      	mov	r3, r0
 8002ee2:	220c      	movs	r2, #12
 8002ee4:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8002ee6:	f04f 33ff 	mov.w	r3, #4294967295
 8002eea:	e009      	b.n	8002f00 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8002eec:	4b08      	ldr	r3, [pc, #32]	@ (8002f10 <_sbrk+0x64>)
 8002eee:	681b      	ldr	r3, [r3, #0]
 8002ef0:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8002ef2:	4b07      	ldr	r3, [pc, #28]	@ (8002f10 <_sbrk+0x64>)
 8002ef4:	681a      	ldr	r2, [r3, #0]
 8002ef6:	687b      	ldr	r3, [r7, #4]
 8002ef8:	4413      	add	r3, r2
 8002efa:	4a05      	ldr	r2, [pc, #20]	@ (8002f10 <_sbrk+0x64>)
 8002efc:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8002efe:	68fb      	ldr	r3, [r7, #12]
}
 8002f00:	4618      	mov	r0, r3
 8002f02:	3718      	adds	r7, #24
 8002f04:	46bd      	mov	sp, r7
 8002f06:	bd80      	pop	{r7, pc}
 8002f08:	20030000 	.word	0x20030000
 8002f0c:	00000400 	.word	0x00000400
 8002f10:	20025cbc 	.word	0x20025cbc
 8002f14:	20025e10 	.word	0x20025e10

08002f18 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8002f18:	b480      	push	{r7}
 8002f1a:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8002f1c:	4b06      	ldr	r3, [pc, #24]	@ (8002f38 <SystemInit+0x20>)
 8002f1e:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8002f22:	4a05      	ldr	r2, [pc, #20]	@ (8002f38 <SystemInit+0x20>)
 8002f24:	f443 0370 	orr.w	r3, r3, #15728640	@ 0xf00000
 8002f28:	f8c2 3088 	str.w	r3, [r2, #136]	@ 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8002f2c:	bf00      	nop
 8002f2e:	46bd      	mov	sp, r7
 8002f30:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002f34:	4770      	bx	lr
 8002f36:	bf00      	nop
 8002f38:	e000ed00 	.word	0xe000ed00

08002f3c <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler: 
  ldr   sp, =_estack       /* set stack pointer */
 8002f3c:	f8df d034 	ldr.w	sp, [pc, #52]	@ 8002f74 <LoopFillZerobss+0xe>

/* Call the clock system initialization function.*/
  bl  SystemInit   
 8002f40:	f7ff ffea 	bl	8002f18 <SystemInit>
 
/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 8002f44:	480c      	ldr	r0, [pc, #48]	@ (8002f78 <LoopFillZerobss+0x12>)
  ldr r1, =_edata
 8002f46:	490d      	ldr	r1, [pc, #52]	@ (8002f7c <LoopFillZerobss+0x16>)
  ldr r2, =_sidata
 8002f48:	4a0d      	ldr	r2, [pc, #52]	@ (8002f80 <LoopFillZerobss+0x1a>)
  movs r3, #0
 8002f4a:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8002f4c:	e002      	b.n	8002f54 <LoopCopyDataInit>

08002f4e <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8002f4e:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8002f50:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8002f52:	3304      	adds	r3, #4

08002f54 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8002f54:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8002f56:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8002f58:	d3f9      	bcc.n	8002f4e <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8002f5a:	4a0a      	ldr	r2, [pc, #40]	@ (8002f84 <LoopFillZerobss+0x1e>)
  ldr r4, =_ebss
 8002f5c:	4c0a      	ldr	r4, [pc, #40]	@ (8002f88 <LoopFillZerobss+0x22>)
  movs r3, #0
 8002f5e:	2300      	movs	r3, #0
  b LoopFillZerobss
 8002f60:	e001      	b.n	8002f66 <LoopFillZerobss>

08002f62 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8002f62:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8002f64:	3204      	adds	r2, #4

08002f66 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8002f66:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8002f68:	d3fb      	bcc.n	8002f62 <FillZerobss>
  
/* Call static constructors */
    bl __libc_init_array
 8002f6a:	f003 fd77 	bl	8006a5c <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8002f6e:	f7fe fd3b 	bl	80019e8 <main>
  bx  lr    
 8002f72:	4770      	bx	lr
  ldr   sp, =_estack       /* set stack pointer */
 8002f74:	20030000 	.word	0x20030000
  ldr r0, =_sdata
 8002f78:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8002f7c:	20000080 	.word	0x20000080
  ldr r2, =_sidata
 8002f80:	08008744 	.word	0x08008744
  ldr r2, =_sbss
 8002f84:	20000080 	.word	0x20000080
  ldr r4, =_ebss
 8002f88:	20025e10 	.word	0x20025e10

08002f8c <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8002f8c:	e7fe      	b.n	8002f8c <ADC_IRQHandler>
	...

08002f90 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8002f90:	b580      	push	{r7, lr}
 8002f92:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 8002f94:	4b0e      	ldr	r3, [pc, #56]	@ (8002fd0 <HAL_Init+0x40>)
 8002f96:	681b      	ldr	r3, [r3, #0]
 8002f98:	4a0d      	ldr	r2, [pc, #52]	@ (8002fd0 <HAL_Init+0x40>)
 8002f9a:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 8002f9e:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 8002fa0:	4b0b      	ldr	r3, [pc, #44]	@ (8002fd0 <HAL_Init+0x40>)
 8002fa2:	681b      	ldr	r3, [r3, #0]
 8002fa4:	4a0a      	ldr	r2, [pc, #40]	@ (8002fd0 <HAL_Init+0x40>)
 8002fa6:	f443 6380 	orr.w	r3, r3, #1024	@ 0x400
 8002faa:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8002fac:	4b08      	ldr	r3, [pc, #32]	@ (8002fd0 <HAL_Init+0x40>)
 8002fae:	681b      	ldr	r3, [r3, #0]
 8002fb0:	4a07      	ldr	r2, [pc, #28]	@ (8002fd0 <HAL_Init+0x40>)
 8002fb2:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8002fb6:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8002fb8:	2003      	movs	r0, #3
 8002fba:	f000 f991 	bl	80032e0 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8002fbe:	2000      	movs	r0, #0
 8002fc0:	f000 f808 	bl	8002fd4 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8002fc4:	f7ff f8de 	bl	8002184 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8002fc8:	2300      	movs	r3, #0
}
 8002fca:	4618      	mov	r0, r3
 8002fcc:	bd80      	pop	{r7, pc}
 8002fce:	bf00      	nop
 8002fd0:	40023c00 	.word	0x40023c00

08002fd4 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8002fd4:	b580      	push	{r7, lr}
 8002fd6:	b082      	sub	sp, #8
 8002fd8:	af00      	add	r7, sp, #0
 8002fda:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8002fdc:	4b12      	ldr	r3, [pc, #72]	@ (8003028 <HAL_InitTick+0x54>)
 8002fde:	681a      	ldr	r2, [r3, #0]
 8002fe0:	4b12      	ldr	r3, [pc, #72]	@ (800302c <HAL_InitTick+0x58>)
 8002fe2:	781b      	ldrb	r3, [r3, #0]
 8002fe4:	4619      	mov	r1, r3
 8002fe6:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 8002fea:	fbb3 f3f1 	udiv	r3, r3, r1
 8002fee:	fbb2 f3f3 	udiv	r3, r2, r3
 8002ff2:	4618      	mov	r0, r3
 8002ff4:	f000 f9b7 	bl	8003366 <HAL_SYSTICK_Config>
 8002ff8:	4603      	mov	r3, r0
 8002ffa:	2b00      	cmp	r3, #0
 8002ffc:	d001      	beq.n	8003002 <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 8002ffe:	2301      	movs	r3, #1
 8003000:	e00e      	b.n	8003020 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8003002:	687b      	ldr	r3, [r7, #4]
 8003004:	2b0f      	cmp	r3, #15
 8003006:	d80a      	bhi.n	800301e <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8003008:	2200      	movs	r2, #0
 800300a:	6879      	ldr	r1, [r7, #4]
 800300c:	f04f 30ff 	mov.w	r0, #4294967295
 8003010:	f000 f971 	bl	80032f6 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8003014:	4a06      	ldr	r2, [pc, #24]	@ (8003030 <HAL_InitTick+0x5c>)
 8003016:	687b      	ldr	r3, [r7, #4]
 8003018:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 800301a:	2300      	movs	r3, #0
 800301c:	e000      	b.n	8003020 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 800301e:	2301      	movs	r3, #1
}
 8003020:	4618      	mov	r0, r3
 8003022:	3708      	adds	r7, #8
 8003024:	46bd      	mov	sp, r7
 8003026:	bd80      	pop	{r7, pc}
 8003028:	20000018 	.word	0x20000018
 800302c:	20000020 	.word	0x20000020
 8003030:	2000001c 	.word	0x2000001c

08003034 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8003034:	b480      	push	{r7}
 8003036:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8003038:	4b06      	ldr	r3, [pc, #24]	@ (8003054 <HAL_IncTick+0x20>)
 800303a:	781b      	ldrb	r3, [r3, #0]
 800303c:	461a      	mov	r2, r3
 800303e:	4b06      	ldr	r3, [pc, #24]	@ (8003058 <HAL_IncTick+0x24>)
 8003040:	681b      	ldr	r3, [r3, #0]
 8003042:	4413      	add	r3, r2
 8003044:	4a04      	ldr	r2, [pc, #16]	@ (8003058 <HAL_IncTick+0x24>)
 8003046:	6013      	str	r3, [r2, #0]
}
 8003048:	bf00      	nop
 800304a:	46bd      	mov	sp, r7
 800304c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003050:	4770      	bx	lr
 8003052:	bf00      	nop
 8003054:	20000020 	.word	0x20000020
 8003058:	20025cc0 	.word	0x20025cc0

0800305c <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 800305c:	b480      	push	{r7}
 800305e:	af00      	add	r7, sp, #0
  return uwTick;
 8003060:	4b03      	ldr	r3, [pc, #12]	@ (8003070 <HAL_GetTick+0x14>)
 8003062:	681b      	ldr	r3, [r3, #0]
}
 8003064:	4618      	mov	r0, r3
 8003066:	46bd      	mov	sp, r7
 8003068:	f85d 7b04 	ldr.w	r7, [sp], #4
 800306c:	4770      	bx	lr
 800306e:	bf00      	nop
 8003070:	20025cc0 	.word	0x20025cc0

08003074 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8003074:	b580      	push	{r7, lr}
 8003076:	b084      	sub	sp, #16
 8003078:	af00      	add	r7, sp, #0
 800307a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 800307c:	f7ff ffee 	bl	800305c <HAL_GetTick>
 8003080:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8003082:	687b      	ldr	r3, [r7, #4]
 8003084:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8003086:	68fb      	ldr	r3, [r7, #12]
 8003088:	f1b3 3fff 	cmp.w	r3, #4294967295
 800308c:	d005      	beq.n	800309a <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 800308e:	4b0a      	ldr	r3, [pc, #40]	@ (80030b8 <HAL_Delay+0x44>)
 8003090:	781b      	ldrb	r3, [r3, #0]
 8003092:	461a      	mov	r2, r3
 8003094:	68fb      	ldr	r3, [r7, #12]
 8003096:	4413      	add	r3, r2
 8003098:	60fb      	str	r3, [r7, #12]
  }

  while((HAL_GetTick() - tickstart) < wait)
 800309a:	bf00      	nop
 800309c:	f7ff ffde 	bl	800305c <HAL_GetTick>
 80030a0:	4602      	mov	r2, r0
 80030a2:	68bb      	ldr	r3, [r7, #8]
 80030a4:	1ad3      	subs	r3, r2, r3
 80030a6:	68fa      	ldr	r2, [r7, #12]
 80030a8:	429a      	cmp	r2, r3
 80030aa:	d8f7      	bhi.n	800309c <HAL_Delay+0x28>
  {
  }
}
 80030ac:	bf00      	nop
 80030ae:	bf00      	nop
 80030b0:	3710      	adds	r7, #16
 80030b2:	46bd      	mov	sp, r7
 80030b4:	bd80      	pop	{r7, pc}
 80030b6:	bf00      	nop
 80030b8:	20000020 	.word	0x20000020

080030bc <__NVIC_SetPriorityGrouping>:
{
 80030bc:	b480      	push	{r7}
 80030be:	b085      	sub	sp, #20
 80030c0:	af00      	add	r7, sp, #0
 80030c2:	6078      	str	r0, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 80030c4:	687b      	ldr	r3, [r7, #4]
 80030c6:	f003 0307 	and.w	r3, r3, #7
 80030ca:	60fb      	str	r3, [r7, #12]
  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 80030cc:	4b0c      	ldr	r3, [pc, #48]	@ (8003100 <__NVIC_SetPriorityGrouping+0x44>)
 80030ce:	68db      	ldr	r3, [r3, #12]
 80030d0:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 80030d2:	68ba      	ldr	r2, [r7, #8]
 80030d4:	f64f 03ff 	movw	r3, #63743	@ 0xf8ff
 80030d8:	4013      	ands	r3, r2
 80030da:	60bb      	str	r3, [r7, #8]
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 80030dc:	68fb      	ldr	r3, [r7, #12]
 80030de:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 80030e0:	68bb      	ldr	r3, [r7, #8]
 80030e2:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 80030e4:	f043 63bf 	orr.w	r3, r3, #100139008	@ 0x5f80000
 80030e8:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 80030ec:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 80030ee:	4a04      	ldr	r2, [pc, #16]	@ (8003100 <__NVIC_SetPriorityGrouping+0x44>)
 80030f0:	68bb      	ldr	r3, [r7, #8]
 80030f2:	60d3      	str	r3, [r2, #12]
}
 80030f4:	bf00      	nop
 80030f6:	3714      	adds	r7, #20
 80030f8:	46bd      	mov	sp, r7
 80030fa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80030fe:	4770      	bx	lr
 8003100:	e000ed00 	.word	0xe000ed00

08003104 <__NVIC_GetPriorityGrouping>:
{
 8003104:	b480      	push	{r7}
 8003106:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8003108:	4b04      	ldr	r3, [pc, #16]	@ (800311c <__NVIC_GetPriorityGrouping+0x18>)
 800310a:	68db      	ldr	r3, [r3, #12]
 800310c:	0a1b      	lsrs	r3, r3, #8
 800310e:	f003 0307 	and.w	r3, r3, #7
}
 8003112:	4618      	mov	r0, r3
 8003114:	46bd      	mov	sp, r7
 8003116:	f85d 7b04 	ldr.w	r7, [sp], #4
 800311a:	4770      	bx	lr
 800311c:	e000ed00 	.word	0xe000ed00

08003120 <__NVIC_EnableIRQ>:
{
 8003120:	b480      	push	{r7}
 8003122:	b083      	sub	sp, #12
 8003124:	af00      	add	r7, sp, #0
 8003126:	4603      	mov	r3, r0
 8003128:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 800312a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800312e:	2b00      	cmp	r3, #0
 8003130:	db0b      	blt.n	800314a <__NVIC_EnableIRQ+0x2a>
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8003132:	79fb      	ldrb	r3, [r7, #7]
 8003134:	f003 021f 	and.w	r2, r3, #31
 8003138:	4907      	ldr	r1, [pc, #28]	@ (8003158 <__NVIC_EnableIRQ+0x38>)
 800313a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800313e:	095b      	lsrs	r3, r3, #5
 8003140:	2001      	movs	r0, #1
 8003142:	fa00 f202 	lsl.w	r2, r0, r2
 8003146:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
}
 800314a:	bf00      	nop
 800314c:	370c      	adds	r7, #12
 800314e:	46bd      	mov	sp, r7
 8003150:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003154:	4770      	bx	lr
 8003156:	bf00      	nop
 8003158:	e000e100 	.word	0xe000e100

0800315c <__NVIC_DisableIRQ>:
  \details Disables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_DisableIRQ(IRQn_Type IRQn)
{
 800315c:	b480      	push	{r7}
 800315e:	b083      	sub	sp, #12
 8003160:	af00      	add	r7, sp, #0
 8003162:	4603      	mov	r3, r0
 8003164:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8003166:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800316a:	2b00      	cmp	r3, #0
 800316c:	db12      	blt.n	8003194 <__NVIC_DisableIRQ+0x38>
  {
    NVIC->ICER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 800316e:	79fb      	ldrb	r3, [r7, #7]
 8003170:	f003 021f 	and.w	r2, r3, #31
 8003174:	490a      	ldr	r1, [pc, #40]	@ (80031a0 <__NVIC_DisableIRQ+0x44>)
 8003176:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800317a:	095b      	lsrs	r3, r3, #5
 800317c:	2001      	movs	r0, #1
 800317e:	fa00 f202 	lsl.w	r2, r0, r2
 8003182:	3320      	adds	r3, #32
 8003184:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  __ASM volatile ("dsb 0xF":::"memory");
 8003188:	f3bf 8f4f 	dsb	sy
}
 800318c:	bf00      	nop
  __ASM volatile ("isb 0xF":::"memory");
 800318e:	f3bf 8f6f 	isb	sy
}
 8003192:	bf00      	nop
    __DSB();
    __ISB();
  }
}
 8003194:	bf00      	nop
 8003196:	370c      	adds	r7, #12
 8003198:	46bd      	mov	sp, r7
 800319a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800319e:	4770      	bx	lr
 80031a0:	e000e100 	.word	0xe000e100

080031a4 <__NVIC_ClearPendingIRQ>:
  \details Clears the pending bit of a device specific interrupt in the NVIC pending register.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_ClearPendingIRQ(IRQn_Type IRQn)
{
 80031a4:	b480      	push	{r7}
 80031a6:	b083      	sub	sp, #12
 80031a8:	af00      	add	r7, sp, #0
 80031aa:	4603      	mov	r3, r0
 80031ac:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80031ae:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80031b2:	2b00      	cmp	r3, #0
 80031b4:	db0c      	blt.n	80031d0 <__NVIC_ClearPendingIRQ+0x2c>
  {
    NVIC->ICPR[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 80031b6:	79fb      	ldrb	r3, [r7, #7]
 80031b8:	f003 021f 	and.w	r2, r3, #31
 80031bc:	4907      	ldr	r1, [pc, #28]	@ (80031dc <__NVIC_ClearPendingIRQ+0x38>)
 80031be:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80031c2:	095b      	lsrs	r3, r3, #5
 80031c4:	2001      	movs	r0, #1
 80031c6:	fa00 f202 	lsl.w	r2, r0, r2
 80031ca:	3360      	adds	r3, #96	@ 0x60
 80031cc:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 80031d0:	bf00      	nop
 80031d2:	370c      	adds	r7, #12
 80031d4:	46bd      	mov	sp, r7
 80031d6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80031da:	4770      	bx	lr
 80031dc:	e000e100 	.word	0xe000e100

080031e0 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 80031e0:	b480      	push	{r7}
 80031e2:	b083      	sub	sp, #12
 80031e4:	af00      	add	r7, sp, #0
 80031e6:	4603      	mov	r3, r0
 80031e8:	6039      	str	r1, [r7, #0]
 80031ea:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80031ec:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80031f0:	2b00      	cmp	r3, #0
 80031f2:	db0a      	blt.n	800320a <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80031f4:	683b      	ldr	r3, [r7, #0]
 80031f6:	b2da      	uxtb	r2, r3
 80031f8:	490c      	ldr	r1, [pc, #48]	@ (800322c <__NVIC_SetPriority+0x4c>)
 80031fa:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80031fe:	0112      	lsls	r2, r2, #4
 8003200:	b2d2      	uxtb	r2, r2
 8003202:	440b      	add	r3, r1
 8003204:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8003208:	e00a      	b.n	8003220 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800320a:	683b      	ldr	r3, [r7, #0]
 800320c:	b2da      	uxtb	r2, r3
 800320e:	4908      	ldr	r1, [pc, #32]	@ (8003230 <__NVIC_SetPriority+0x50>)
 8003210:	79fb      	ldrb	r3, [r7, #7]
 8003212:	f003 030f 	and.w	r3, r3, #15
 8003216:	3b04      	subs	r3, #4
 8003218:	0112      	lsls	r2, r2, #4
 800321a:	b2d2      	uxtb	r2, r2
 800321c:	440b      	add	r3, r1
 800321e:	761a      	strb	r2, [r3, #24]
}
 8003220:	bf00      	nop
 8003222:	370c      	adds	r7, #12
 8003224:	46bd      	mov	sp, r7
 8003226:	f85d 7b04 	ldr.w	r7, [sp], #4
 800322a:	4770      	bx	lr
 800322c:	e000e100 	.word	0xe000e100
 8003230:	e000ed00 	.word	0xe000ed00

08003234 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8003234:	b480      	push	{r7}
 8003236:	b089      	sub	sp, #36	@ 0x24
 8003238:	af00      	add	r7, sp, #0
 800323a:	60f8      	str	r0, [r7, #12]
 800323c:	60b9      	str	r1, [r7, #8]
 800323e:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8003240:	68fb      	ldr	r3, [r7, #12]
 8003242:	f003 0307 	and.w	r3, r3, #7
 8003246:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8003248:	69fb      	ldr	r3, [r7, #28]
 800324a:	f1c3 0307 	rsb	r3, r3, #7
 800324e:	2b04      	cmp	r3, #4
 8003250:	bf28      	it	cs
 8003252:	2304      	movcs	r3, #4
 8003254:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8003256:	69fb      	ldr	r3, [r7, #28]
 8003258:	3304      	adds	r3, #4
 800325a:	2b06      	cmp	r3, #6
 800325c:	d902      	bls.n	8003264 <NVIC_EncodePriority+0x30>
 800325e:	69fb      	ldr	r3, [r7, #28]
 8003260:	3b03      	subs	r3, #3
 8003262:	e000      	b.n	8003266 <NVIC_EncodePriority+0x32>
 8003264:	2300      	movs	r3, #0
 8003266:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8003268:	f04f 32ff 	mov.w	r2, #4294967295
 800326c:	69bb      	ldr	r3, [r7, #24]
 800326e:	fa02 f303 	lsl.w	r3, r2, r3
 8003272:	43da      	mvns	r2, r3
 8003274:	68bb      	ldr	r3, [r7, #8]
 8003276:	401a      	ands	r2, r3
 8003278:	697b      	ldr	r3, [r7, #20]
 800327a:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 800327c:	f04f 31ff 	mov.w	r1, #4294967295
 8003280:	697b      	ldr	r3, [r7, #20]
 8003282:	fa01 f303 	lsl.w	r3, r1, r3
 8003286:	43d9      	mvns	r1, r3
 8003288:	687b      	ldr	r3, [r7, #4]
 800328a:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 800328c:	4313      	orrs	r3, r2
         );
}
 800328e:	4618      	mov	r0, r3
 8003290:	3724      	adds	r7, #36	@ 0x24
 8003292:	46bd      	mov	sp, r7
 8003294:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003298:	4770      	bx	lr
	...

0800329c <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 800329c:	b580      	push	{r7, lr}
 800329e:	b082      	sub	sp, #8
 80032a0:	af00      	add	r7, sp, #0
 80032a2:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 80032a4:	687b      	ldr	r3, [r7, #4]
 80032a6:	3b01      	subs	r3, #1
 80032a8:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 80032ac:	d301      	bcc.n	80032b2 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 80032ae:	2301      	movs	r3, #1
 80032b0:	e00f      	b.n	80032d2 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 80032b2:	4a0a      	ldr	r2, [pc, #40]	@ (80032dc <SysTick_Config+0x40>)
 80032b4:	687b      	ldr	r3, [r7, #4]
 80032b6:	3b01      	subs	r3, #1
 80032b8:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 80032ba:	210f      	movs	r1, #15
 80032bc:	f04f 30ff 	mov.w	r0, #4294967295
 80032c0:	f7ff ff8e 	bl	80031e0 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 80032c4:	4b05      	ldr	r3, [pc, #20]	@ (80032dc <SysTick_Config+0x40>)
 80032c6:	2200      	movs	r2, #0
 80032c8:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 80032ca:	4b04      	ldr	r3, [pc, #16]	@ (80032dc <SysTick_Config+0x40>)
 80032cc:	2207      	movs	r2, #7
 80032ce:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 80032d0:	2300      	movs	r3, #0
}
 80032d2:	4618      	mov	r0, r3
 80032d4:	3708      	adds	r7, #8
 80032d6:	46bd      	mov	sp, r7
 80032d8:	bd80      	pop	{r7, pc}
 80032da:	bf00      	nop
 80032dc:	e000e010 	.word	0xe000e010

080032e0 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80032e0:	b580      	push	{r7, lr}
 80032e2:	b082      	sub	sp, #8
 80032e4:	af00      	add	r7, sp, #0
 80032e6:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 80032e8:	6878      	ldr	r0, [r7, #4]
 80032ea:	f7ff fee7 	bl	80030bc <__NVIC_SetPriorityGrouping>
}
 80032ee:	bf00      	nop
 80032f0:	3708      	adds	r7, #8
 80032f2:	46bd      	mov	sp, r7
 80032f4:	bd80      	pop	{r7, pc}

080032f6 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 80032f6:	b580      	push	{r7, lr}
 80032f8:	b086      	sub	sp, #24
 80032fa:	af00      	add	r7, sp, #0
 80032fc:	4603      	mov	r3, r0
 80032fe:	60b9      	str	r1, [r7, #8]
 8003300:	607a      	str	r2, [r7, #4]
 8003302:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8003304:	2300      	movs	r3, #0
 8003306:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8003308:	f7ff fefc 	bl	8003104 <__NVIC_GetPriorityGrouping>
 800330c:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 800330e:	687a      	ldr	r2, [r7, #4]
 8003310:	68b9      	ldr	r1, [r7, #8]
 8003312:	6978      	ldr	r0, [r7, #20]
 8003314:	f7ff ff8e 	bl	8003234 <NVIC_EncodePriority>
 8003318:	4602      	mov	r2, r0
 800331a:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800331e:	4611      	mov	r1, r2
 8003320:	4618      	mov	r0, r3
 8003322:	f7ff ff5d 	bl	80031e0 <__NVIC_SetPriority>
}
 8003326:	bf00      	nop
 8003328:	3718      	adds	r7, #24
 800332a:	46bd      	mov	sp, r7
 800332c:	bd80      	pop	{r7, pc}

0800332e <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 800332e:	b580      	push	{r7, lr}
 8003330:	b082      	sub	sp, #8
 8003332:	af00      	add	r7, sp, #0
 8003334:	4603      	mov	r3, r0
 8003336:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8003338:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800333c:	4618      	mov	r0, r3
 800333e:	f7ff feef 	bl	8003120 <__NVIC_EnableIRQ>
}
 8003342:	bf00      	nop
 8003344:	3708      	adds	r7, #8
 8003346:	46bd      	mov	sp, r7
 8003348:	bd80      	pop	{r7, pc}

0800334a <HAL_NVIC_DisableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_DisableIRQ(IRQn_Type IRQn)
{
 800334a:	b580      	push	{r7, lr}
 800334c:	b082      	sub	sp, #8
 800334e:	af00      	add	r7, sp, #0
 8003350:	4603      	mov	r3, r0
 8003352:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Disable interrupt */
  NVIC_DisableIRQ(IRQn);
 8003354:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8003358:	4618      	mov	r0, r3
 800335a:	f7ff feff 	bl	800315c <__NVIC_DisableIRQ>
}
 800335e:	bf00      	nop
 8003360:	3708      	adds	r7, #8
 8003362:	46bd      	mov	sp, r7
 8003364:	bd80      	pop	{r7, pc}

08003366 <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8003366:	b580      	push	{r7, lr}
 8003368:	b082      	sub	sp, #8
 800336a:	af00      	add	r7, sp, #0
 800336c:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 800336e:	6878      	ldr	r0, [r7, #4]
 8003370:	f7ff ff94 	bl	800329c <SysTick_Config>
 8003374:	4603      	mov	r3, r0
}
 8003376:	4618      	mov	r0, r3
 8003378:	3708      	adds	r7, #8
 800337a:	46bd      	mov	sp, r7
 800337c:	bd80      	pop	{r7, pc}

0800337e <HAL_NVIC_ClearPendingIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_ClearPendingIRQ(IRQn_Type IRQn)
{
 800337e:	b580      	push	{r7, lr}
 8003380:	b082      	sub	sp, #8
 8003382:	af00      	add	r7, sp, #0
 8003384:	4603      	mov	r3, r0
 8003386:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Clear pending interrupt */
  NVIC_ClearPendingIRQ(IRQn);
 8003388:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800338c:	4618      	mov	r0, r3
 800338e:	f7ff ff09 	bl	80031a4 <__NVIC_ClearPendingIRQ>
}
 8003392:	bf00      	nop
 8003394:	3708      	adds	r7, #8
 8003396:	46bd      	mov	sp, r7
 8003398:	bd80      	pop	{r7, pc}
	...

0800339c <HAL_EXTI_ClearPending>:
  *           @arg @ref EXTI_TRIGGER_RISING_FALLING
  *         This parameter is kept for compatibility with other series.
  * @retval None.
  */
void HAL_EXTI_ClearPending(EXTI_HandleTypeDef *hexti, uint32_t Edge)
{
 800339c:	b480      	push	{r7}
 800339e:	b085      	sub	sp, #20
 80033a0:	af00      	add	r7, sp, #0
 80033a2:	6078      	str	r0, [r7, #4]
 80033a4:	6039      	str	r1, [r7, #0]
  assert_param(IS_EXTI_LINE(hexti->Line));
  assert_param(IS_EXTI_CONFIG_LINE(hexti->Line));
  assert_param(IS_EXTI_PENDING_EDGE(Edge));

  /* Compute line mask */
  maskline = (1uL << (hexti->Line & EXTI_PIN_MASK));
 80033a6:	687b      	ldr	r3, [r7, #4]
 80033a8:	681b      	ldr	r3, [r3, #0]
 80033aa:	f003 031f 	and.w	r3, r3, #31
 80033ae:	2201      	movs	r2, #1
 80033b0:	fa02 f303 	lsl.w	r3, r2, r3
 80033b4:	60fb      	str	r3, [r7, #12]

  /* Clear Pending bit */
  EXTI->PR =  maskline;
 80033b6:	4a04      	ldr	r2, [pc, #16]	@ (80033c8 <HAL_EXTI_ClearPending+0x2c>)
 80033b8:	68fb      	ldr	r3, [r7, #12]
 80033ba:	6153      	str	r3, [r2, #20]
}
 80033bc:	bf00      	nop
 80033be:	3714      	adds	r7, #20
 80033c0:	46bd      	mov	sp, r7
 80033c2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80033c6:	4770      	bx	lr
 80033c8:	40013c00 	.word	0x40013c00

080033cc <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 80033cc:	b480      	push	{r7}
 80033ce:	b089      	sub	sp, #36	@ 0x24
 80033d0:	af00      	add	r7, sp, #0
 80033d2:	6078      	str	r0, [r7, #4]
 80033d4:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 80033d6:	2300      	movs	r3, #0
 80033d8:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 80033da:	2300      	movs	r3, #0
 80033dc:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 80033de:	2300      	movs	r3, #0
 80033e0:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 80033e2:	2300      	movs	r3, #0
 80033e4:	61fb      	str	r3, [r7, #28]
 80033e6:	e177      	b.n	80036d8 <HAL_GPIO_Init+0x30c>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 80033e8:	2201      	movs	r2, #1
 80033ea:	69fb      	ldr	r3, [r7, #28]
 80033ec:	fa02 f303 	lsl.w	r3, r2, r3
 80033f0:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 80033f2:	683b      	ldr	r3, [r7, #0]
 80033f4:	681b      	ldr	r3, [r3, #0]
 80033f6:	697a      	ldr	r2, [r7, #20]
 80033f8:	4013      	ands	r3, r2
 80033fa:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 80033fc:	693a      	ldr	r2, [r7, #16]
 80033fe:	697b      	ldr	r3, [r7, #20]
 8003400:	429a      	cmp	r2, r3
 8003402:	f040 8166 	bne.w	80036d2 <HAL_GPIO_Init+0x306>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8003406:	683b      	ldr	r3, [r7, #0]
 8003408:	685b      	ldr	r3, [r3, #4]
 800340a:	f003 0303 	and.w	r3, r3, #3
 800340e:	2b01      	cmp	r3, #1
 8003410:	d005      	beq.n	800341e <HAL_GPIO_Init+0x52>
          (GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8003412:	683b      	ldr	r3, [r7, #0]
 8003414:	685b      	ldr	r3, [r3, #4]
 8003416:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 800341a:	2b02      	cmp	r3, #2
 800341c:	d130      	bne.n	8003480 <HAL_GPIO_Init+0xb4>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 800341e:	687b      	ldr	r3, [r7, #4]
 8003420:	689b      	ldr	r3, [r3, #8]
 8003422:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 8003424:	69fb      	ldr	r3, [r7, #28]
 8003426:	005b      	lsls	r3, r3, #1
 8003428:	2203      	movs	r2, #3
 800342a:	fa02 f303 	lsl.w	r3, r2, r3
 800342e:	43db      	mvns	r3, r3
 8003430:	69ba      	ldr	r2, [r7, #24]
 8003432:	4013      	ands	r3, r2
 8003434:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 8003436:	683b      	ldr	r3, [r7, #0]
 8003438:	68da      	ldr	r2, [r3, #12]
 800343a:	69fb      	ldr	r3, [r7, #28]
 800343c:	005b      	lsls	r3, r3, #1
 800343e:	fa02 f303 	lsl.w	r3, r2, r3
 8003442:	69ba      	ldr	r2, [r7, #24]
 8003444:	4313      	orrs	r3, r2
 8003446:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 8003448:	687b      	ldr	r3, [r7, #4]
 800344a:	69ba      	ldr	r2, [r7, #24]
 800344c:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 800344e:	687b      	ldr	r3, [r7, #4]
 8003450:	685b      	ldr	r3, [r3, #4]
 8003452:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8003454:	2201      	movs	r2, #1
 8003456:	69fb      	ldr	r3, [r7, #28]
 8003458:	fa02 f303 	lsl.w	r3, r2, r3
 800345c:	43db      	mvns	r3, r3
 800345e:	69ba      	ldr	r2, [r7, #24]
 8003460:	4013      	ands	r3, r2
 8003462:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8003464:	683b      	ldr	r3, [r7, #0]
 8003466:	685b      	ldr	r3, [r3, #4]
 8003468:	091b      	lsrs	r3, r3, #4
 800346a:	f003 0201 	and.w	r2, r3, #1
 800346e:	69fb      	ldr	r3, [r7, #28]
 8003470:	fa02 f303 	lsl.w	r3, r2, r3
 8003474:	69ba      	ldr	r2, [r7, #24]
 8003476:	4313      	orrs	r3, r2
 8003478:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 800347a:	687b      	ldr	r3, [r7, #4]
 800347c:	69ba      	ldr	r2, [r7, #24]
 800347e:	605a      	str	r2, [r3, #4]
       }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8003480:	683b      	ldr	r3, [r7, #0]
 8003482:	685b      	ldr	r3, [r3, #4]
 8003484:	f003 0303 	and.w	r3, r3, #3
 8003488:	2b03      	cmp	r3, #3
 800348a:	d017      	beq.n	80034bc <HAL_GPIO_Init+0xf0>
      {
        /* Check the parameters */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));
        
        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 800348c:	687b      	ldr	r3, [r7, #4]
 800348e:	68db      	ldr	r3, [r3, #12]
 8003490:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 8003492:	69fb      	ldr	r3, [r7, #28]
 8003494:	005b      	lsls	r3, r3, #1
 8003496:	2203      	movs	r2, #3
 8003498:	fa02 f303 	lsl.w	r3, r2, r3
 800349c:	43db      	mvns	r3, r3
 800349e:	69ba      	ldr	r2, [r7, #24]
 80034a0:	4013      	ands	r3, r2
 80034a2:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 80034a4:	683b      	ldr	r3, [r7, #0]
 80034a6:	689a      	ldr	r2, [r3, #8]
 80034a8:	69fb      	ldr	r3, [r7, #28]
 80034aa:	005b      	lsls	r3, r3, #1
 80034ac:	fa02 f303 	lsl.w	r3, r2, r3
 80034b0:	69ba      	ldr	r2, [r7, #24]
 80034b2:	4313      	orrs	r3, r2
 80034b4:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 80034b6:	687b      	ldr	r3, [r7, #4]
 80034b8:	69ba      	ldr	r2, [r7, #24]
 80034ba:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 80034bc:	683b      	ldr	r3, [r7, #0]
 80034be:	685b      	ldr	r3, [r3, #4]
 80034c0:	f003 0303 	and.w	r3, r3, #3
 80034c4:	2b02      	cmp	r3, #2
 80034c6:	d123      	bne.n	8003510 <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 80034c8:	69fb      	ldr	r3, [r7, #28]
 80034ca:	08da      	lsrs	r2, r3, #3
 80034cc:	687b      	ldr	r3, [r7, #4]
 80034ce:	3208      	adds	r2, #8
 80034d0:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80034d4:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 80034d6:	69fb      	ldr	r3, [r7, #28]
 80034d8:	f003 0307 	and.w	r3, r3, #7
 80034dc:	009b      	lsls	r3, r3, #2
 80034de:	220f      	movs	r2, #15
 80034e0:	fa02 f303 	lsl.w	r3, r2, r3
 80034e4:	43db      	mvns	r3, r3
 80034e6:	69ba      	ldr	r2, [r7, #24]
 80034e8:	4013      	ands	r3, r2
 80034ea:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 80034ec:	683b      	ldr	r3, [r7, #0]
 80034ee:	691a      	ldr	r2, [r3, #16]
 80034f0:	69fb      	ldr	r3, [r7, #28]
 80034f2:	f003 0307 	and.w	r3, r3, #7
 80034f6:	009b      	lsls	r3, r3, #2
 80034f8:	fa02 f303 	lsl.w	r3, r2, r3
 80034fc:	69ba      	ldr	r2, [r7, #24]
 80034fe:	4313      	orrs	r3, r2
 8003500:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 8003502:	69fb      	ldr	r3, [r7, #28]
 8003504:	08da      	lsrs	r2, r3, #3
 8003506:	687b      	ldr	r3, [r7, #4]
 8003508:	3208      	adds	r2, #8
 800350a:	69b9      	ldr	r1, [r7, #24]
 800350c:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8003510:	687b      	ldr	r3, [r7, #4]
 8003512:	681b      	ldr	r3, [r3, #0]
 8003514:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 8003516:	69fb      	ldr	r3, [r7, #28]
 8003518:	005b      	lsls	r3, r3, #1
 800351a:	2203      	movs	r2, #3
 800351c:	fa02 f303 	lsl.w	r3, r2, r3
 8003520:	43db      	mvns	r3, r3
 8003522:	69ba      	ldr	r2, [r7, #24]
 8003524:	4013      	ands	r3, r2
 8003526:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8003528:	683b      	ldr	r3, [r7, #0]
 800352a:	685b      	ldr	r3, [r3, #4]
 800352c:	f003 0203 	and.w	r2, r3, #3
 8003530:	69fb      	ldr	r3, [r7, #28]
 8003532:	005b      	lsls	r3, r3, #1
 8003534:	fa02 f303 	lsl.w	r3, r2, r3
 8003538:	69ba      	ldr	r2, [r7, #24]
 800353a:	4313      	orrs	r3, r2
 800353c:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 800353e:	687b      	ldr	r3, [r7, #4]
 8003540:	69ba      	ldr	r2, [r7, #24]
 8003542:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 8003544:	683b      	ldr	r3, [r7, #0]
 8003546:	685b      	ldr	r3, [r3, #4]
 8003548:	f403 3340 	and.w	r3, r3, #196608	@ 0x30000
 800354c:	2b00      	cmp	r3, #0
 800354e:	f000 80c0 	beq.w	80036d2 <HAL_GPIO_Init+0x306>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8003552:	2300      	movs	r3, #0
 8003554:	60fb      	str	r3, [r7, #12]
 8003556:	4b66      	ldr	r3, [pc, #408]	@ (80036f0 <HAL_GPIO_Init+0x324>)
 8003558:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800355a:	4a65      	ldr	r2, [pc, #404]	@ (80036f0 <HAL_GPIO_Init+0x324>)
 800355c:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 8003560:	6453      	str	r3, [r2, #68]	@ 0x44
 8003562:	4b63      	ldr	r3, [pc, #396]	@ (80036f0 <HAL_GPIO_Init+0x324>)
 8003564:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8003566:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 800356a:	60fb      	str	r3, [r7, #12]
 800356c:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 800356e:	4a61      	ldr	r2, [pc, #388]	@ (80036f4 <HAL_GPIO_Init+0x328>)
 8003570:	69fb      	ldr	r3, [r7, #28]
 8003572:	089b      	lsrs	r3, r3, #2
 8003574:	3302      	adds	r3, #2
 8003576:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800357a:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 800357c:	69fb      	ldr	r3, [r7, #28]
 800357e:	f003 0303 	and.w	r3, r3, #3
 8003582:	009b      	lsls	r3, r3, #2
 8003584:	220f      	movs	r2, #15
 8003586:	fa02 f303 	lsl.w	r3, r2, r3
 800358a:	43db      	mvns	r3, r3
 800358c:	69ba      	ldr	r2, [r7, #24]
 800358e:	4013      	ands	r3, r2
 8003590:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 8003592:	687b      	ldr	r3, [r7, #4]
 8003594:	4a58      	ldr	r2, [pc, #352]	@ (80036f8 <HAL_GPIO_Init+0x32c>)
 8003596:	4293      	cmp	r3, r2
 8003598:	d037      	beq.n	800360a <HAL_GPIO_Init+0x23e>
 800359a:	687b      	ldr	r3, [r7, #4]
 800359c:	4a57      	ldr	r2, [pc, #348]	@ (80036fc <HAL_GPIO_Init+0x330>)
 800359e:	4293      	cmp	r3, r2
 80035a0:	d031      	beq.n	8003606 <HAL_GPIO_Init+0x23a>
 80035a2:	687b      	ldr	r3, [r7, #4]
 80035a4:	4a56      	ldr	r2, [pc, #344]	@ (8003700 <HAL_GPIO_Init+0x334>)
 80035a6:	4293      	cmp	r3, r2
 80035a8:	d02b      	beq.n	8003602 <HAL_GPIO_Init+0x236>
 80035aa:	687b      	ldr	r3, [r7, #4]
 80035ac:	4a55      	ldr	r2, [pc, #340]	@ (8003704 <HAL_GPIO_Init+0x338>)
 80035ae:	4293      	cmp	r3, r2
 80035b0:	d025      	beq.n	80035fe <HAL_GPIO_Init+0x232>
 80035b2:	687b      	ldr	r3, [r7, #4]
 80035b4:	4a54      	ldr	r2, [pc, #336]	@ (8003708 <HAL_GPIO_Init+0x33c>)
 80035b6:	4293      	cmp	r3, r2
 80035b8:	d01f      	beq.n	80035fa <HAL_GPIO_Init+0x22e>
 80035ba:	687b      	ldr	r3, [r7, #4]
 80035bc:	4a53      	ldr	r2, [pc, #332]	@ (800370c <HAL_GPIO_Init+0x340>)
 80035be:	4293      	cmp	r3, r2
 80035c0:	d019      	beq.n	80035f6 <HAL_GPIO_Init+0x22a>
 80035c2:	687b      	ldr	r3, [r7, #4]
 80035c4:	4a52      	ldr	r2, [pc, #328]	@ (8003710 <HAL_GPIO_Init+0x344>)
 80035c6:	4293      	cmp	r3, r2
 80035c8:	d013      	beq.n	80035f2 <HAL_GPIO_Init+0x226>
 80035ca:	687b      	ldr	r3, [r7, #4]
 80035cc:	4a51      	ldr	r2, [pc, #324]	@ (8003714 <HAL_GPIO_Init+0x348>)
 80035ce:	4293      	cmp	r3, r2
 80035d0:	d00d      	beq.n	80035ee <HAL_GPIO_Init+0x222>
 80035d2:	687b      	ldr	r3, [r7, #4]
 80035d4:	4a50      	ldr	r2, [pc, #320]	@ (8003718 <HAL_GPIO_Init+0x34c>)
 80035d6:	4293      	cmp	r3, r2
 80035d8:	d007      	beq.n	80035ea <HAL_GPIO_Init+0x21e>
 80035da:	687b      	ldr	r3, [r7, #4]
 80035dc:	4a4f      	ldr	r2, [pc, #316]	@ (800371c <HAL_GPIO_Init+0x350>)
 80035de:	4293      	cmp	r3, r2
 80035e0:	d101      	bne.n	80035e6 <HAL_GPIO_Init+0x21a>
 80035e2:	2309      	movs	r3, #9
 80035e4:	e012      	b.n	800360c <HAL_GPIO_Init+0x240>
 80035e6:	230a      	movs	r3, #10
 80035e8:	e010      	b.n	800360c <HAL_GPIO_Init+0x240>
 80035ea:	2308      	movs	r3, #8
 80035ec:	e00e      	b.n	800360c <HAL_GPIO_Init+0x240>
 80035ee:	2307      	movs	r3, #7
 80035f0:	e00c      	b.n	800360c <HAL_GPIO_Init+0x240>
 80035f2:	2306      	movs	r3, #6
 80035f4:	e00a      	b.n	800360c <HAL_GPIO_Init+0x240>
 80035f6:	2305      	movs	r3, #5
 80035f8:	e008      	b.n	800360c <HAL_GPIO_Init+0x240>
 80035fa:	2304      	movs	r3, #4
 80035fc:	e006      	b.n	800360c <HAL_GPIO_Init+0x240>
 80035fe:	2303      	movs	r3, #3
 8003600:	e004      	b.n	800360c <HAL_GPIO_Init+0x240>
 8003602:	2302      	movs	r3, #2
 8003604:	e002      	b.n	800360c <HAL_GPIO_Init+0x240>
 8003606:	2301      	movs	r3, #1
 8003608:	e000      	b.n	800360c <HAL_GPIO_Init+0x240>
 800360a:	2300      	movs	r3, #0
 800360c:	69fa      	ldr	r2, [r7, #28]
 800360e:	f002 0203 	and.w	r2, r2, #3
 8003612:	0092      	lsls	r2, r2, #2
 8003614:	4093      	lsls	r3, r2
 8003616:	69ba      	ldr	r2, [r7, #24]
 8003618:	4313      	orrs	r3, r2
 800361a:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 800361c:	4935      	ldr	r1, [pc, #212]	@ (80036f4 <HAL_GPIO_Init+0x328>)
 800361e:	69fb      	ldr	r3, [r7, #28]
 8003620:	089b      	lsrs	r3, r3, #2
 8003622:	3302      	adds	r3, #2
 8003624:	69ba      	ldr	r2, [r7, #24]
 8003626:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 800362a:	4b3d      	ldr	r3, [pc, #244]	@ (8003720 <HAL_GPIO_Init+0x354>)
 800362c:	689b      	ldr	r3, [r3, #8]
 800362e:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8003630:	693b      	ldr	r3, [r7, #16]
 8003632:	43db      	mvns	r3, r3
 8003634:	69ba      	ldr	r2, [r7, #24]
 8003636:	4013      	ands	r3, r2
 8003638:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 800363a:	683b      	ldr	r3, [r7, #0]
 800363c:	685b      	ldr	r3, [r3, #4]
 800363e:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 8003642:	2b00      	cmp	r3, #0
 8003644:	d003      	beq.n	800364e <HAL_GPIO_Init+0x282>
        {
          temp |= iocurrent;
 8003646:	69ba      	ldr	r2, [r7, #24]
 8003648:	693b      	ldr	r3, [r7, #16]
 800364a:	4313      	orrs	r3, r2
 800364c:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 800364e:	4a34      	ldr	r2, [pc, #208]	@ (8003720 <HAL_GPIO_Init+0x354>)
 8003650:	69bb      	ldr	r3, [r7, #24]
 8003652:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 8003654:	4b32      	ldr	r3, [pc, #200]	@ (8003720 <HAL_GPIO_Init+0x354>)
 8003656:	68db      	ldr	r3, [r3, #12]
 8003658:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 800365a:	693b      	ldr	r3, [r7, #16]
 800365c:	43db      	mvns	r3, r3
 800365e:	69ba      	ldr	r2, [r7, #24]
 8003660:	4013      	ands	r3, r2
 8003662:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 8003664:	683b      	ldr	r3, [r7, #0]
 8003666:	685b      	ldr	r3, [r3, #4]
 8003668:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 800366c:	2b00      	cmp	r3, #0
 800366e:	d003      	beq.n	8003678 <HAL_GPIO_Init+0x2ac>
        {
          temp |= iocurrent;
 8003670:	69ba      	ldr	r2, [r7, #24]
 8003672:	693b      	ldr	r3, [r7, #16]
 8003674:	4313      	orrs	r3, r2
 8003676:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 8003678:	4a29      	ldr	r2, [pc, #164]	@ (8003720 <HAL_GPIO_Init+0x354>)
 800367a:	69bb      	ldr	r3, [r7, #24]
 800367c:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR;
 800367e:	4b28      	ldr	r3, [pc, #160]	@ (8003720 <HAL_GPIO_Init+0x354>)
 8003680:	685b      	ldr	r3, [r3, #4]
 8003682:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8003684:	693b      	ldr	r3, [r7, #16]
 8003686:	43db      	mvns	r3, r3
 8003688:	69ba      	ldr	r2, [r7, #24]
 800368a:	4013      	ands	r3, r2
 800368c:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 800368e:	683b      	ldr	r3, [r7, #0]
 8003690:	685b      	ldr	r3, [r3, #4]
 8003692:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8003696:	2b00      	cmp	r3, #0
 8003698:	d003      	beq.n	80036a2 <HAL_GPIO_Init+0x2d6>
        {
          temp |= iocurrent;
 800369a:	69ba      	ldr	r2, [r7, #24]
 800369c:	693b      	ldr	r3, [r7, #16]
 800369e:	4313      	orrs	r3, r2
 80036a0:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 80036a2:	4a1f      	ldr	r2, [pc, #124]	@ (8003720 <HAL_GPIO_Init+0x354>)
 80036a4:	69bb      	ldr	r3, [r7, #24]
 80036a6:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 80036a8:	4b1d      	ldr	r3, [pc, #116]	@ (8003720 <HAL_GPIO_Init+0x354>)
 80036aa:	681b      	ldr	r3, [r3, #0]
 80036ac:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80036ae:	693b      	ldr	r3, [r7, #16]
 80036b0:	43db      	mvns	r3, r3
 80036b2:	69ba      	ldr	r2, [r7, #24]
 80036b4:	4013      	ands	r3, r2
 80036b6:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 80036b8:	683b      	ldr	r3, [r7, #0]
 80036ba:	685b      	ldr	r3, [r3, #4]
 80036bc:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 80036c0:	2b00      	cmp	r3, #0
 80036c2:	d003      	beq.n	80036cc <HAL_GPIO_Init+0x300>
        {
          temp |= iocurrent;
 80036c4:	69ba      	ldr	r2, [r7, #24]
 80036c6:	693b      	ldr	r3, [r7, #16]
 80036c8:	4313      	orrs	r3, r2
 80036ca:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 80036cc:	4a14      	ldr	r2, [pc, #80]	@ (8003720 <HAL_GPIO_Init+0x354>)
 80036ce:	69bb      	ldr	r3, [r7, #24]
 80036d0:	6013      	str	r3, [r2, #0]
  for(position = 0U; position < GPIO_NUMBER; position++)
 80036d2:	69fb      	ldr	r3, [r7, #28]
 80036d4:	3301      	adds	r3, #1
 80036d6:	61fb      	str	r3, [r7, #28]
 80036d8:	69fb      	ldr	r3, [r7, #28]
 80036da:	2b0f      	cmp	r3, #15
 80036dc:	f67f ae84 	bls.w	80033e8 <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 80036e0:	bf00      	nop
 80036e2:	bf00      	nop
 80036e4:	3724      	adds	r7, #36	@ 0x24
 80036e6:	46bd      	mov	sp, r7
 80036e8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80036ec:	4770      	bx	lr
 80036ee:	bf00      	nop
 80036f0:	40023800 	.word	0x40023800
 80036f4:	40013800 	.word	0x40013800
 80036f8:	40020000 	.word	0x40020000
 80036fc:	40020400 	.word	0x40020400
 8003700:	40020800 	.word	0x40020800
 8003704:	40020c00 	.word	0x40020c00
 8003708:	40021000 	.word	0x40021000
 800370c:	40021400 	.word	0x40021400
 8003710:	40021800 	.word	0x40021800
 8003714:	40021c00 	.word	0x40021c00
 8003718:	40022000 	.word	0x40022000
 800371c:	40022400 	.word	0x40022400
 8003720:	40013c00 	.word	0x40013c00

08003724 <HAL_GPIO_DeInit>:
  * @param  GPIO_Pin specifies the port bit to be written.
  *          This parameter can be one of GPIO_PIN_x where x can be (0..15).
  * @retval None
  */
void HAL_GPIO_DeInit(GPIO_TypeDef  *GPIOx, uint32_t GPIO_Pin)
{
 8003724:	b480      	push	{r7}
 8003726:	b087      	sub	sp, #28
 8003728:	af00      	add	r7, sp, #0
 800372a:	6078      	str	r0, [r7, #4]
 800372c:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 800372e:	2300      	movs	r3, #0
 8003730:	613b      	str	r3, [r7, #16]
  uint32_t iocurrent = 0x00U;
 8003732:	2300      	movs	r3, #0
 8003734:	60fb      	str	r3, [r7, #12]
  uint32_t tmp = 0x00U;
 8003736:	2300      	movs	r3, #0
 8003738:	60bb      	str	r3, [r7, #8]

  /* Check the parameters */
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  
  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 800373a:	2300      	movs	r3, #0
 800373c:	617b      	str	r3, [r7, #20]
 800373e:	e0d9      	b.n	80038f4 <HAL_GPIO_DeInit+0x1d0>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 8003740:	2201      	movs	r2, #1
 8003742:	697b      	ldr	r3, [r7, #20]
 8003744:	fa02 f303 	lsl.w	r3, r2, r3
 8003748:	613b      	str	r3, [r7, #16]
    /* Get the current IO position */
    iocurrent = (GPIO_Pin) & ioposition;
 800374a:	683a      	ldr	r2, [r7, #0]
 800374c:	693b      	ldr	r3, [r7, #16]
 800374e:	4013      	ands	r3, r2
 8003750:	60fb      	str	r3, [r7, #12]

    if(iocurrent == ioposition)
 8003752:	68fa      	ldr	r2, [r7, #12]
 8003754:	693b      	ldr	r3, [r7, #16]
 8003756:	429a      	cmp	r2, r3
 8003758:	f040 80c9 	bne.w	80038ee <HAL_GPIO_DeInit+0x1ca>
    {
      /*------------------------- EXTI Mode Configuration --------------------*/
      tmp = SYSCFG->EXTICR[position >> 2U];
 800375c:	4a6b      	ldr	r2, [pc, #428]	@ (800390c <HAL_GPIO_DeInit+0x1e8>)
 800375e:	697b      	ldr	r3, [r7, #20]
 8003760:	089b      	lsrs	r3, r3, #2
 8003762:	3302      	adds	r3, #2
 8003764:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8003768:	60bb      	str	r3, [r7, #8]
      tmp &= (0x0FU << (4U * (position & 0x03U)));
 800376a:	697b      	ldr	r3, [r7, #20]
 800376c:	f003 0303 	and.w	r3, r3, #3
 8003770:	009b      	lsls	r3, r3, #2
 8003772:	220f      	movs	r2, #15
 8003774:	fa02 f303 	lsl.w	r3, r2, r3
 8003778:	68ba      	ldr	r2, [r7, #8]
 800377a:	4013      	ands	r3, r2
 800377c:	60bb      	str	r3, [r7, #8]
      if(tmp == ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U))))
 800377e:	687b      	ldr	r3, [r7, #4]
 8003780:	4a63      	ldr	r2, [pc, #396]	@ (8003910 <HAL_GPIO_DeInit+0x1ec>)
 8003782:	4293      	cmp	r3, r2
 8003784:	d037      	beq.n	80037f6 <HAL_GPIO_DeInit+0xd2>
 8003786:	687b      	ldr	r3, [r7, #4]
 8003788:	4a62      	ldr	r2, [pc, #392]	@ (8003914 <HAL_GPIO_DeInit+0x1f0>)
 800378a:	4293      	cmp	r3, r2
 800378c:	d031      	beq.n	80037f2 <HAL_GPIO_DeInit+0xce>
 800378e:	687b      	ldr	r3, [r7, #4]
 8003790:	4a61      	ldr	r2, [pc, #388]	@ (8003918 <HAL_GPIO_DeInit+0x1f4>)
 8003792:	4293      	cmp	r3, r2
 8003794:	d02b      	beq.n	80037ee <HAL_GPIO_DeInit+0xca>
 8003796:	687b      	ldr	r3, [r7, #4]
 8003798:	4a60      	ldr	r2, [pc, #384]	@ (800391c <HAL_GPIO_DeInit+0x1f8>)
 800379a:	4293      	cmp	r3, r2
 800379c:	d025      	beq.n	80037ea <HAL_GPIO_DeInit+0xc6>
 800379e:	687b      	ldr	r3, [r7, #4]
 80037a0:	4a5f      	ldr	r2, [pc, #380]	@ (8003920 <HAL_GPIO_DeInit+0x1fc>)
 80037a2:	4293      	cmp	r3, r2
 80037a4:	d01f      	beq.n	80037e6 <HAL_GPIO_DeInit+0xc2>
 80037a6:	687b      	ldr	r3, [r7, #4]
 80037a8:	4a5e      	ldr	r2, [pc, #376]	@ (8003924 <HAL_GPIO_DeInit+0x200>)
 80037aa:	4293      	cmp	r3, r2
 80037ac:	d019      	beq.n	80037e2 <HAL_GPIO_DeInit+0xbe>
 80037ae:	687b      	ldr	r3, [r7, #4]
 80037b0:	4a5d      	ldr	r2, [pc, #372]	@ (8003928 <HAL_GPIO_DeInit+0x204>)
 80037b2:	4293      	cmp	r3, r2
 80037b4:	d013      	beq.n	80037de <HAL_GPIO_DeInit+0xba>
 80037b6:	687b      	ldr	r3, [r7, #4]
 80037b8:	4a5c      	ldr	r2, [pc, #368]	@ (800392c <HAL_GPIO_DeInit+0x208>)
 80037ba:	4293      	cmp	r3, r2
 80037bc:	d00d      	beq.n	80037da <HAL_GPIO_DeInit+0xb6>
 80037be:	687b      	ldr	r3, [r7, #4]
 80037c0:	4a5b      	ldr	r2, [pc, #364]	@ (8003930 <HAL_GPIO_DeInit+0x20c>)
 80037c2:	4293      	cmp	r3, r2
 80037c4:	d007      	beq.n	80037d6 <HAL_GPIO_DeInit+0xb2>
 80037c6:	687b      	ldr	r3, [r7, #4]
 80037c8:	4a5a      	ldr	r2, [pc, #360]	@ (8003934 <HAL_GPIO_DeInit+0x210>)
 80037ca:	4293      	cmp	r3, r2
 80037cc:	d101      	bne.n	80037d2 <HAL_GPIO_DeInit+0xae>
 80037ce:	2309      	movs	r3, #9
 80037d0:	e012      	b.n	80037f8 <HAL_GPIO_DeInit+0xd4>
 80037d2:	230a      	movs	r3, #10
 80037d4:	e010      	b.n	80037f8 <HAL_GPIO_DeInit+0xd4>
 80037d6:	2308      	movs	r3, #8
 80037d8:	e00e      	b.n	80037f8 <HAL_GPIO_DeInit+0xd4>
 80037da:	2307      	movs	r3, #7
 80037dc:	e00c      	b.n	80037f8 <HAL_GPIO_DeInit+0xd4>
 80037de:	2306      	movs	r3, #6
 80037e0:	e00a      	b.n	80037f8 <HAL_GPIO_DeInit+0xd4>
 80037e2:	2305      	movs	r3, #5
 80037e4:	e008      	b.n	80037f8 <HAL_GPIO_DeInit+0xd4>
 80037e6:	2304      	movs	r3, #4
 80037e8:	e006      	b.n	80037f8 <HAL_GPIO_DeInit+0xd4>
 80037ea:	2303      	movs	r3, #3
 80037ec:	e004      	b.n	80037f8 <HAL_GPIO_DeInit+0xd4>
 80037ee:	2302      	movs	r3, #2
 80037f0:	e002      	b.n	80037f8 <HAL_GPIO_DeInit+0xd4>
 80037f2:	2301      	movs	r3, #1
 80037f4:	e000      	b.n	80037f8 <HAL_GPIO_DeInit+0xd4>
 80037f6:	2300      	movs	r3, #0
 80037f8:	697a      	ldr	r2, [r7, #20]
 80037fa:	f002 0203 	and.w	r2, r2, #3
 80037fe:	0092      	lsls	r2, r2, #2
 8003800:	4093      	lsls	r3, r2
 8003802:	68ba      	ldr	r2, [r7, #8]
 8003804:	429a      	cmp	r2, r3
 8003806:	d132      	bne.n	800386e <HAL_GPIO_DeInit+0x14a>
      {
        /* Clear EXTI line configuration */
        EXTI->IMR &= ~((uint32_t)iocurrent);
 8003808:	4b4b      	ldr	r3, [pc, #300]	@ (8003938 <HAL_GPIO_DeInit+0x214>)
 800380a:	681a      	ldr	r2, [r3, #0]
 800380c:	68fb      	ldr	r3, [r7, #12]
 800380e:	43db      	mvns	r3, r3
 8003810:	4949      	ldr	r1, [pc, #292]	@ (8003938 <HAL_GPIO_DeInit+0x214>)
 8003812:	4013      	ands	r3, r2
 8003814:	600b      	str	r3, [r1, #0]
        EXTI->EMR &= ~((uint32_t)iocurrent);
 8003816:	4b48      	ldr	r3, [pc, #288]	@ (8003938 <HAL_GPIO_DeInit+0x214>)
 8003818:	685a      	ldr	r2, [r3, #4]
 800381a:	68fb      	ldr	r3, [r7, #12]
 800381c:	43db      	mvns	r3, r3
 800381e:	4946      	ldr	r1, [pc, #280]	@ (8003938 <HAL_GPIO_DeInit+0x214>)
 8003820:	4013      	ands	r3, r2
 8003822:	604b      	str	r3, [r1, #4]
        
        /* Clear Rising Falling edge configuration */
        EXTI->FTSR &= ~((uint32_t)iocurrent);
 8003824:	4b44      	ldr	r3, [pc, #272]	@ (8003938 <HAL_GPIO_DeInit+0x214>)
 8003826:	68da      	ldr	r2, [r3, #12]
 8003828:	68fb      	ldr	r3, [r7, #12]
 800382a:	43db      	mvns	r3, r3
 800382c:	4942      	ldr	r1, [pc, #264]	@ (8003938 <HAL_GPIO_DeInit+0x214>)
 800382e:	4013      	ands	r3, r2
 8003830:	60cb      	str	r3, [r1, #12]
        EXTI->RTSR &= ~((uint32_t)iocurrent);
 8003832:	4b41      	ldr	r3, [pc, #260]	@ (8003938 <HAL_GPIO_DeInit+0x214>)
 8003834:	689a      	ldr	r2, [r3, #8]
 8003836:	68fb      	ldr	r3, [r7, #12]
 8003838:	43db      	mvns	r3, r3
 800383a:	493f      	ldr	r1, [pc, #252]	@ (8003938 <HAL_GPIO_DeInit+0x214>)
 800383c:	4013      	ands	r3, r2
 800383e:	608b      	str	r3, [r1, #8]

        /* Configure the External Interrupt or event for the current IO */
        tmp = 0x0FU << (4U * (position & 0x03U));
 8003840:	697b      	ldr	r3, [r7, #20]
 8003842:	f003 0303 	and.w	r3, r3, #3
 8003846:	009b      	lsls	r3, r3, #2
 8003848:	220f      	movs	r2, #15
 800384a:	fa02 f303 	lsl.w	r3, r2, r3
 800384e:	60bb      	str	r3, [r7, #8]
        SYSCFG->EXTICR[position >> 2U] &= ~tmp;
 8003850:	4a2e      	ldr	r2, [pc, #184]	@ (800390c <HAL_GPIO_DeInit+0x1e8>)
 8003852:	697b      	ldr	r3, [r7, #20]
 8003854:	089b      	lsrs	r3, r3, #2
 8003856:	3302      	adds	r3, #2
 8003858:	f852 1023 	ldr.w	r1, [r2, r3, lsl #2]
 800385c:	68bb      	ldr	r3, [r7, #8]
 800385e:	43da      	mvns	r2, r3
 8003860:	482a      	ldr	r0, [pc, #168]	@ (800390c <HAL_GPIO_DeInit+0x1e8>)
 8003862:	697b      	ldr	r3, [r7, #20]
 8003864:	089b      	lsrs	r3, r3, #2
 8003866:	400a      	ands	r2, r1
 8003868:	3302      	adds	r3, #2
 800386a:	f840 2023 	str.w	r2, [r0, r3, lsl #2]
      }

      /*------------------------- GPIO Mode Configuration --------------------*/
      /* Configure IO Direction in Input Floating Mode */
      GPIOx->MODER &= ~(GPIO_MODER_MODER0 << (position * 2U));
 800386e:	687b      	ldr	r3, [r7, #4]
 8003870:	681a      	ldr	r2, [r3, #0]
 8003872:	697b      	ldr	r3, [r7, #20]
 8003874:	005b      	lsls	r3, r3, #1
 8003876:	2103      	movs	r1, #3
 8003878:	fa01 f303 	lsl.w	r3, r1, r3
 800387c:	43db      	mvns	r3, r3
 800387e:	401a      	ands	r2, r3
 8003880:	687b      	ldr	r3, [r7, #4]
 8003882:	601a      	str	r2, [r3, #0]

      /* Configure the default Alternate Function in current IO */
      GPIOx->AFR[position >> 3U] &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 8003884:	697b      	ldr	r3, [r7, #20]
 8003886:	08da      	lsrs	r2, r3, #3
 8003888:	687b      	ldr	r3, [r7, #4]
 800388a:	3208      	adds	r2, #8
 800388c:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 8003890:	697b      	ldr	r3, [r7, #20]
 8003892:	f003 0307 	and.w	r3, r3, #7
 8003896:	009b      	lsls	r3, r3, #2
 8003898:	220f      	movs	r2, #15
 800389a:	fa02 f303 	lsl.w	r3, r2, r3
 800389e:	43db      	mvns	r3, r3
 80038a0:	697a      	ldr	r2, [r7, #20]
 80038a2:	08d2      	lsrs	r2, r2, #3
 80038a4:	4019      	ands	r1, r3
 80038a6:	687b      	ldr	r3, [r7, #4]
 80038a8:	3208      	adds	r2, #8
 80038aa:	f843 1022 	str.w	r1, [r3, r2, lsl #2]

      /* Deactivate the Pull-up and Pull-down resistor for the current IO */
      GPIOx->PUPDR &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 80038ae:	687b      	ldr	r3, [r7, #4]
 80038b0:	68da      	ldr	r2, [r3, #12]
 80038b2:	697b      	ldr	r3, [r7, #20]
 80038b4:	005b      	lsls	r3, r3, #1
 80038b6:	2103      	movs	r1, #3
 80038b8:	fa01 f303 	lsl.w	r3, r1, r3
 80038bc:	43db      	mvns	r3, r3
 80038be:	401a      	ands	r2, r3
 80038c0:	687b      	ldr	r3, [r7, #4]
 80038c2:	60da      	str	r2, [r3, #12]

      /* Configure the default value IO Output Type */
      GPIOx->OTYPER  &= ~(GPIO_OTYPER_OT_0 << position) ;
 80038c4:	687b      	ldr	r3, [r7, #4]
 80038c6:	685a      	ldr	r2, [r3, #4]
 80038c8:	2101      	movs	r1, #1
 80038ca:	697b      	ldr	r3, [r7, #20]
 80038cc:	fa01 f303 	lsl.w	r3, r1, r3
 80038d0:	43db      	mvns	r3, r3
 80038d2:	401a      	ands	r2, r3
 80038d4:	687b      	ldr	r3, [r7, #4]
 80038d6:	605a      	str	r2, [r3, #4]

      /* Configure the default value for IO Speed */
      GPIOx->OSPEEDR &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 80038d8:	687b      	ldr	r3, [r7, #4]
 80038da:	689a      	ldr	r2, [r3, #8]
 80038dc:	697b      	ldr	r3, [r7, #20]
 80038de:	005b      	lsls	r3, r3, #1
 80038e0:	2103      	movs	r1, #3
 80038e2:	fa01 f303 	lsl.w	r3, r1, r3
 80038e6:	43db      	mvns	r3, r3
 80038e8:	401a      	ands	r2, r3
 80038ea:	687b      	ldr	r3, [r7, #4]
 80038ec:	609a      	str	r2, [r3, #8]
  for(position = 0U; position < GPIO_NUMBER; position++)
 80038ee:	697b      	ldr	r3, [r7, #20]
 80038f0:	3301      	adds	r3, #1
 80038f2:	617b      	str	r3, [r7, #20]
 80038f4:	697b      	ldr	r3, [r7, #20]
 80038f6:	2b0f      	cmp	r3, #15
 80038f8:	f67f af22 	bls.w	8003740 <HAL_GPIO_DeInit+0x1c>
    }
  }
}
 80038fc:	bf00      	nop
 80038fe:	bf00      	nop
 8003900:	371c      	adds	r7, #28
 8003902:	46bd      	mov	sp, r7
 8003904:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003908:	4770      	bx	lr
 800390a:	bf00      	nop
 800390c:	40013800 	.word	0x40013800
 8003910:	40020000 	.word	0x40020000
 8003914:	40020400 	.word	0x40020400
 8003918:	40020800 	.word	0x40020800
 800391c:	40020c00 	.word	0x40020c00
 8003920:	40021000 	.word	0x40021000
 8003924:	40021400 	.word	0x40021400
 8003928:	40021800 	.word	0x40021800
 800392c:	40021c00 	.word	0x40021c00
 8003930:	40022000 	.word	0x40022000
 8003934:	40022400 	.word	0x40022400
 8003938:	40013c00 	.word	0x40013c00

0800393c <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 800393c:	b480      	push	{r7}
 800393e:	b083      	sub	sp, #12
 8003940:	af00      	add	r7, sp, #0
 8003942:	6078      	str	r0, [r7, #4]
 8003944:	460b      	mov	r3, r1
 8003946:	807b      	strh	r3, [r7, #2]
 8003948:	4613      	mov	r3, r2
 800394a:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 800394c:	787b      	ldrb	r3, [r7, #1]
 800394e:	2b00      	cmp	r3, #0
 8003950:	d003      	beq.n	800395a <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8003952:	887a      	ldrh	r2, [r7, #2]
 8003954:	687b      	ldr	r3, [r7, #4]
 8003956:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
  }
}
 8003958:	e003      	b.n	8003962 <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 800395a:	887b      	ldrh	r3, [r7, #2]
 800395c:	041a      	lsls	r2, r3, #16
 800395e:	687b      	ldr	r3, [r7, #4]
 8003960:	619a      	str	r2, [r3, #24]
}
 8003962:	bf00      	nop
 8003964:	370c      	adds	r7, #12
 8003966:	46bd      	mov	sp, r7
 8003968:	f85d 7b04 	ldr.w	r7, [sp], #4
 800396c:	4770      	bx	lr
	...

08003970 <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 8003970:	b580      	push	{r7, lr}
 8003972:	b084      	sub	sp, #16
 8003974:	af00      	add	r7, sp, #0
 8003976:	6078      	str	r0, [r7, #4]
  uint32_t freqrange;
  uint32_t pclk1;

  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 8003978:	687b      	ldr	r3, [r7, #4]
 800397a:	2b00      	cmp	r3, #0
 800397c:	d101      	bne.n	8003982 <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 800397e:	2301      	movs	r3, #1
 8003980:	e12b      	b.n	8003bda <HAL_I2C_Init+0x26a>
  assert_param(IS_I2C_DUAL_ADDRESS(hi2c->Init.DualAddressMode));
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 8003982:	687b      	ldr	r3, [r7, #4]
 8003984:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8003988:	b2db      	uxtb	r3, r3
 800398a:	2b00      	cmp	r3, #0
 800398c:	d106      	bne.n	800399c <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 800398e:	687b      	ldr	r3, [r7, #4]
 8003990:	2200      	movs	r2, #0
 8003992:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_I2C_MspInit(hi2c);
 8003996:	6878      	ldr	r0, [r7, #4]
 8003998:	f7fe fc1c 	bl	80021d4 <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 800399c:	687b      	ldr	r3, [r7, #4]
 800399e:	2224      	movs	r2, #36	@ 0x24
 80039a0:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 80039a4:	687b      	ldr	r3, [r7, #4]
 80039a6:	681b      	ldr	r3, [r3, #0]
 80039a8:	681a      	ldr	r2, [r3, #0]
 80039aa:	687b      	ldr	r3, [r7, #4]
 80039ac:	681b      	ldr	r3, [r3, #0]
 80039ae:	f022 0201 	bic.w	r2, r2, #1
 80039b2:	601a      	str	r2, [r3, #0]

  /*Reset I2C*/
  hi2c->Instance->CR1 |= I2C_CR1_SWRST;
 80039b4:	687b      	ldr	r3, [r7, #4]
 80039b6:	681b      	ldr	r3, [r3, #0]
 80039b8:	681a      	ldr	r2, [r3, #0]
 80039ba:	687b      	ldr	r3, [r7, #4]
 80039bc:	681b      	ldr	r3, [r3, #0]
 80039be:	f442 4200 	orr.w	r2, r2, #32768	@ 0x8000
 80039c2:	601a      	str	r2, [r3, #0]
  hi2c->Instance->CR1 &= ~I2C_CR1_SWRST;
 80039c4:	687b      	ldr	r3, [r7, #4]
 80039c6:	681b      	ldr	r3, [r3, #0]
 80039c8:	681a      	ldr	r2, [r3, #0]
 80039ca:	687b      	ldr	r3, [r7, #4]
 80039cc:	681b      	ldr	r3, [r3, #0]
 80039ce:	f422 4200 	bic.w	r2, r2, #32768	@ 0x8000
 80039d2:	601a      	str	r2, [r3, #0]

  /* Get PCLK1 frequency */
  pclk1 = HAL_RCC_GetPCLK1Freq();
 80039d4:	f001 ff82 	bl	80058dc <HAL_RCC_GetPCLK1Freq>
 80039d8:	60f8      	str	r0, [r7, #12]

  /* Check the minimum allowed PCLK1 frequency */
  if (I2C_MIN_PCLK_FREQ(pclk1, hi2c->Init.ClockSpeed) == 1U)
 80039da:	687b      	ldr	r3, [r7, #4]
 80039dc:	685b      	ldr	r3, [r3, #4]
 80039de:	4a81      	ldr	r2, [pc, #516]	@ (8003be4 <HAL_I2C_Init+0x274>)
 80039e0:	4293      	cmp	r3, r2
 80039e2:	d807      	bhi.n	80039f4 <HAL_I2C_Init+0x84>
 80039e4:	68fb      	ldr	r3, [r7, #12]
 80039e6:	4a80      	ldr	r2, [pc, #512]	@ (8003be8 <HAL_I2C_Init+0x278>)
 80039e8:	4293      	cmp	r3, r2
 80039ea:	bf94      	ite	ls
 80039ec:	2301      	movls	r3, #1
 80039ee:	2300      	movhi	r3, #0
 80039f0:	b2db      	uxtb	r3, r3
 80039f2:	e006      	b.n	8003a02 <HAL_I2C_Init+0x92>
 80039f4:	68fb      	ldr	r3, [r7, #12]
 80039f6:	4a7d      	ldr	r2, [pc, #500]	@ (8003bec <HAL_I2C_Init+0x27c>)
 80039f8:	4293      	cmp	r3, r2
 80039fa:	bf94      	ite	ls
 80039fc:	2301      	movls	r3, #1
 80039fe:	2300      	movhi	r3, #0
 8003a00:	b2db      	uxtb	r3, r3
 8003a02:	2b00      	cmp	r3, #0
 8003a04:	d001      	beq.n	8003a0a <HAL_I2C_Init+0x9a>
  {
    return HAL_ERROR;
 8003a06:	2301      	movs	r3, #1
 8003a08:	e0e7      	b.n	8003bda <HAL_I2C_Init+0x26a>
  }

  /* Calculate frequency range */
  freqrange = I2C_FREQRANGE(pclk1);
 8003a0a:	68fb      	ldr	r3, [r7, #12]
 8003a0c:	4a78      	ldr	r2, [pc, #480]	@ (8003bf0 <HAL_I2C_Init+0x280>)
 8003a0e:	fba2 2303 	umull	r2, r3, r2, r3
 8003a12:	0c9b      	lsrs	r3, r3, #18
 8003a14:	60bb      	str	r3, [r7, #8]

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Frequency range */
  MODIFY_REG(hi2c->Instance->CR2, I2C_CR2_FREQ, freqrange);
 8003a16:	687b      	ldr	r3, [r7, #4]
 8003a18:	681b      	ldr	r3, [r3, #0]
 8003a1a:	685b      	ldr	r3, [r3, #4]
 8003a1c:	f023 013f 	bic.w	r1, r3, #63	@ 0x3f
 8003a20:	687b      	ldr	r3, [r7, #4]
 8003a22:	681b      	ldr	r3, [r3, #0]
 8003a24:	68ba      	ldr	r2, [r7, #8]
 8003a26:	430a      	orrs	r2, r1
 8003a28:	605a      	str	r2, [r3, #4]

  /*---------------------------- I2Cx TRISE Configuration --------------------*/
  /* Configure I2Cx: Rise Time */
  MODIFY_REG(hi2c->Instance->TRISE, I2C_TRISE_TRISE, I2C_RISE_TIME(freqrange, hi2c->Init.ClockSpeed));
 8003a2a:	687b      	ldr	r3, [r7, #4]
 8003a2c:	681b      	ldr	r3, [r3, #0]
 8003a2e:	6a1b      	ldr	r3, [r3, #32]
 8003a30:	f023 013f 	bic.w	r1, r3, #63	@ 0x3f
 8003a34:	687b      	ldr	r3, [r7, #4]
 8003a36:	685b      	ldr	r3, [r3, #4]
 8003a38:	4a6a      	ldr	r2, [pc, #424]	@ (8003be4 <HAL_I2C_Init+0x274>)
 8003a3a:	4293      	cmp	r3, r2
 8003a3c:	d802      	bhi.n	8003a44 <HAL_I2C_Init+0xd4>
 8003a3e:	68bb      	ldr	r3, [r7, #8]
 8003a40:	3301      	adds	r3, #1
 8003a42:	e009      	b.n	8003a58 <HAL_I2C_Init+0xe8>
 8003a44:	68bb      	ldr	r3, [r7, #8]
 8003a46:	f44f 7296 	mov.w	r2, #300	@ 0x12c
 8003a4a:	fb02 f303 	mul.w	r3, r2, r3
 8003a4e:	4a69      	ldr	r2, [pc, #420]	@ (8003bf4 <HAL_I2C_Init+0x284>)
 8003a50:	fba2 2303 	umull	r2, r3, r2, r3
 8003a54:	099b      	lsrs	r3, r3, #6
 8003a56:	3301      	adds	r3, #1
 8003a58:	687a      	ldr	r2, [r7, #4]
 8003a5a:	6812      	ldr	r2, [r2, #0]
 8003a5c:	430b      	orrs	r3, r1
 8003a5e:	6213      	str	r3, [r2, #32]

  /*---------------------------- I2Cx CCR Configuration ----------------------*/
  /* Configure I2Cx: Speed */
  MODIFY_REG(hi2c->Instance->CCR, (I2C_CCR_FS | I2C_CCR_DUTY | I2C_CCR_CCR), I2C_SPEED(pclk1, hi2c->Init.ClockSpeed, hi2c->Init.DutyCycle));
 8003a60:	687b      	ldr	r3, [r7, #4]
 8003a62:	681b      	ldr	r3, [r3, #0]
 8003a64:	69db      	ldr	r3, [r3, #28]
 8003a66:	f423 424f 	bic.w	r2, r3, #52992	@ 0xcf00
 8003a6a:	f022 02ff 	bic.w	r2, r2, #255	@ 0xff
 8003a6e:	687b      	ldr	r3, [r7, #4]
 8003a70:	685b      	ldr	r3, [r3, #4]
 8003a72:	495c      	ldr	r1, [pc, #368]	@ (8003be4 <HAL_I2C_Init+0x274>)
 8003a74:	428b      	cmp	r3, r1
 8003a76:	d819      	bhi.n	8003aac <HAL_I2C_Init+0x13c>
 8003a78:	68fb      	ldr	r3, [r7, #12]
 8003a7a:	1e59      	subs	r1, r3, #1
 8003a7c:	687b      	ldr	r3, [r7, #4]
 8003a7e:	685b      	ldr	r3, [r3, #4]
 8003a80:	005b      	lsls	r3, r3, #1
 8003a82:	fbb1 f3f3 	udiv	r3, r1, r3
 8003a86:	1c59      	adds	r1, r3, #1
 8003a88:	f640 73fc 	movw	r3, #4092	@ 0xffc
 8003a8c:	400b      	ands	r3, r1
 8003a8e:	2b00      	cmp	r3, #0
 8003a90:	d00a      	beq.n	8003aa8 <HAL_I2C_Init+0x138>
 8003a92:	68fb      	ldr	r3, [r7, #12]
 8003a94:	1e59      	subs	r1, r3, #1
 8003a96:	687b      	ldr	r3, [r7, #4]
 8003a98:	685b      	ldr	r3, [r3, #4]
 8003a9a:	005b      	lsls	r3, r3, #1
 8003a9c:	fbb1 f3f3 	udiv	r3, r1, r3
 8003aa0:	3301      	adds	r3, #1
 8003aa2:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8003aa6:	e051      	b.n	8003b4c <HAL_I2C_Init+0x1dc>
 8003aa8:	2304      	movs	r3, #4
 8003aaa:	e04f      	b.n	8003b4c <HAL_I2C_Init+0x1dc>
 8003aac:	687b      	ldr	r3, [r7, #4]
 8003aae:	689b      	ldr	r3, [r3, #8]
 8003ab0:	2b00      	cmp	r3, #0
 8003ab2:	d111      	bne.n	8003ad8 <HAL_I2C_Init+0x168>
 8003ab4:	68fb      	ldr	r3, [r7, #12]
 8003ab6:	1e58      	subs	r0, r3, #1
 8003ab8:	687b      	ldr	r3, [r7, #4]
 8003aba:	6859      	ldr	r1, [r3, #4]
 8003abc:	460b      	mov	r3, r1
 8003abe:	005b      	lsls	r3, r3, #1
 8003ac0:	440b      	add	r3, r1
 8003ac2:	fbb0 f3f3 	udiv	r3, r0, r3
 8003ac6:	3301      	adds	r3, #1
 8003ac8:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8003acc:	2b00      	cmp	r3, #0
 8003ace:	bf0c      	ite	eq
 8003ad0:	2301      	moveq	r3, #1
 8003ad2:	2300      	movne	r3, #0
 8003ad4:	b2db      	uxtb	r3, r3
 8003ad6:	e012      	b.n	8003afe <HAL_I2C_Init+0x18e>
 8003ad8:	68fb      	ldr	r3, [r7, #12]
 8003ada:	1e58      	subs	r0, r3, #1
 8003adc:	687b      	ldr	r3, [r7, #4]
 8003ade:	6859      	ldr	r1, [r3, #4]
 8003ae0:	460b      	mov	r3, r1
 8003ae2:	009b      	lsls	r3, r3, #2
 8003ae4:	440b      	add	r3, r1
 8003ae6:	0099      	lsls	r1, r3, #2
 8003ae8:	440b      	add	r3, r1
 8003aea:	fbb0 f3f3 	udiv	r3, r0, r3
 8003aee:	3301      	adds	r3, #1
 8003af0:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8003af4:	2b00      	cmp	r3, #0
 8003af6:	bf0c      	ite	eq
 8003af8:	2301      	moveq	r3, #1
 8003afa:	2300      	movne	r3, #0
 8003afc:	b2db      	uxtb	r3, r3
 8003afe:	2b00      	cmp	r3, #0
 8003b00:	d001      	beq.n	8003b06 <HAL_I2C_Init+0x196>
 8003b02:	2301      	movs	r3, #1
 8003b04:	e022      	b.n	8003b4c <HAL_I2C_Init+0x1dc>
 8003b06:	687b      	ldr	r3, [r7, #4]
 8003b08:	689b      	ldr	r3, [r3, #8]
 8003b0a:	2b00      	cmp	r3, #0
 8003b0c:	d10e      	bne.n	8003b2c <HAL_I2C_Init+0x1bc>
 8003b0e:	68fb      	ldr	r3, [r7, #12]
 8003b10:	1e58      	subs	r0, r3, #1
 8003b12:	687b      	ldr	r3, [r7, #4]
 8003b14:	6859      	ldr	r1, [r3, #4]
 8003b16:	460b      	mov	r3, r1
 8003b18:	005b      	lsls	r3, r3, #1
 8003b1a:	440b      	add	r3, r1
 8003b1c:	fbb0 f3f3 	udiv	r3, r0, r3
 8003b20:	3301      	adds	r3, #1
 8003b22:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8003b26:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8003b2a:	e00f      	b.n	8003b4c <HAL_I2C_Init+0x1dc>
 8003b2c:	68fb      	ldr	r3, [r7, #12]
 8003b2e:	1e58      	subs	r0, r3, #1
 8003b30:	687b      	ldr	r3, [r7, #4]
 8003b32:	6859      	ldr	r1, [r3, #4]
 8003b34:	460b      	mov	r3, r1
 8003b36:	009b      	lsls	r3, r3, #2
 8003b38:	440b      	add	r3, r1
 8003b3a:	0099      	lsls	r1, r3, #2
 8003b3c:	440b      	add	r3, r1
 8003b3e:	fbb0 f3f3 	udiv	r3, r0, r3
 8003b42:	3301      	adds	r3, #1
 8003b44:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8003b48:	f443 4340 	orr.w	r3, r3, #49152	@ 0xc000
 8003b4c:	6879      	ldr	r1, [r7, #4]
 8003b4e:	6809      	ldr	r1, [r1, #0]
 8003b50:	4313      	orrs	r3, r2
 8003b52:	61cb      	str	r3, [r1, #28]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  MODIFY_REG(hi2c->Instance->CR1, (I2C_CR1_ENGC | I2C_CR1_NOSTRETCH), (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode));
 8003b54:	687b      	ldr	r3, [r7, #4]
 8003b56:	681b      	ldr	r3, [r3, #0]
 8003b58:	681b      	ldr	r3, [r3, #0]
 8003b5a:	f023 01c0 	bic.w	r1, r3, #192	@ 0xc0
 8003b5e:	687b      	ldr	r3, [r7, #4]
 8003b60:	69da      	ldr	r2, [r3, #28]
 8003b62:	687b      	ldr	r3, [r7, #4]
 8003b64:	6a1b      	ldr	r3, [r3, #32]
 8003b66:	431a      	orrs	r2, r3
 8003b68:	687b      	ldr	r3, [r7, #4]
 8003b6a:	681b      	ldr	r3, [r3, #0]
 8003b6c:	430a      	orrs	r2, r1
 8003b6e:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Configure I2Cx: Own Address1 and addressing mode */
  MODIFY_REG(hi2c->Instance->OAR1, (I2C_OAR1_ADDMODE | I2C_OAR1_ADD8_9 | I2C_OAR1_ADD1_7 | I2C_OAR1_ADD0), (hi2c->Init.AddressingMode | hi2c->Init.OwnAddress1));
 8003b70:	687b      	ldr	r3, [r7, #4]
 8003b72:	681b      	ldr	r3, [r3, #0]
 8003b74:	689b      	ldr	r3, [r3, #8]
 8003b76:	f423 4303 	bic.w	r3, r3, #33536	@ 0x8300
 8003b7a:	f023 03ff 	bic.w	r3, r3, #255	@ 0xff
 8003b7e:	687a      	ldr	r2, [r7, #4]
 8003b80:	6911      	ldr	r1, [r2, #16]
 8003b82:	687a      	ldr	r2, [r7, #4]
 8003b84:	68d2      	ldr	r2, [r2, #12]
 8003b86:	4311      	orrs	r1, r2
 8003b88:	687a      	ldr	r2, [r7, #4]
 8003b8a:	6812      	ldr	r2, [r2, #0]
 8003b8c:	430b      	orrs	r3, r1
 8003b8e:	6093      	str	r3, [r2, #8]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Configure I2Cx: Dual mode and Own Address2 */
  MODIFY_REG(hi2c->Instance->OAR2, (I2C_OAR2_ENDUAL | I2C_OAR2_ADD2), (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2));
 8003b90:	687b      	ldr	r3, [r7, #4]
 8003b92:	681b      	ldr	r3, [r3, #0]
 8003b94:	68db      	ldr	r3, [r3, #12]
 8003b96:	f023 01ff 	bic.w	r1, r3, #255	@ 0xff
 8003b9a:	687b      	ldr	r3, [r7, #4]
 8003b9c:	695a      	ldr	r2, [r3, #20]
 8003b9e:	687b      	ldr	r3, [r7, #4]
 8003ba0:	699b      	ldr	r3, [r3, #24]
 8003ba2:	431a      	orrs	r2, r3
 8003ba4:	687b      	ldr	r3, [r7, #4]
 8003ba6:	681b      	ldr	r3, [r3, #0]
 8003ba8:	430a      	orrs	r2, r1
 8003baa:	60da      	str	r2, [r3, #12]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 8003bac:	687b      	ldr	r3, [r7, #4]
 8003bae:	681b      	ldr	r3, [r3, #0]
 8003bb0:	681a      	ldr	r2, [r3, #0]
 8003bb2:	687b      	ldr	r3, [r7, #4]
 8003bb4:	681b      	ldr	r3, [r3, #0]
 8003bb6:	f042 0201 	orr.w	r2, r2, #1
 8003bba:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8003bbc:	687b      	ldr	r3, [r7, #4]
 8003bbe:	2200      	movs	r2, #0
 8003bc0:	641a      	str	r2, [r3, #64]	@ 0x40
  hi2c->State = HAL_I2C_STATE_READY;
 8003bc2:	687b      	ldr	r3, [r7, #4]
 8003bc4:	2220      	movs	r2, #32
 8003bc6:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
  hi2c->PreviousState = I2C_STATE_NONE;
 8003bca:	687b      	ldr	r3, [r7, #4]
 8003bcc:	2200      	movs	r2, #0
 8003bce:	631a      	str	r2, [r3, #48]	@ 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 8003bd0:	687b      	ldr	r3, [r7, #4]
 8003bd2:	2200      	movs	r2, #0
 8003bd4:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e

  return HAL_OK;
 8003bd8:	2300      	movs	r3, #0
}
 8003bda:	4618      	mov	r0, r3
 8003bdc:	3710      	adds	r7, #16
 8003bde:	46bd      	mov	sp, r7
 8003be0:	bd80      	pop	{r7, pc}
 8003be2:	bf00      	nop
 8003be4:	000186a0 	.word	0x000186a0
 8003be8:	001e847f 	.word	0x001e847f
 8003bec:	003d08ff 	.word	0x003d08ff
 8003bf0:	431bde83 	.word	0x431bde83
 8003bf4:	10624dd3 	.word	0x10624dd3

08003bf8 <HAL_I2C_Mem_Write>:
  * @param  Size Amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Mem_Write(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8003bf8:	b580      	push	{r7, lr}
 8003bfa:	b088      	sub	sp, #32
 8003bfc:	af02      	add	r7, sp, #8
 8003bfe:	60f8      	str	r0, [r7, #12]
 8003c00:	4608      	mov	r0, r1
 8003c02:	4611      	mov	r1, r2
 8003c04:	461a      	mov	r2, r3
 8003c06:	4603      	mov	r3, r0
 8003c08:	817b      	strh	r3, [r7, #10]
 8003c0a:	460b      	mov	r3, r1
 8003c0c:	813b      	strh	r3, [r7, #8]
 8003c0e:	4613      	mov	r3, r2
 8003c10:	80fb      	strh	r3, [r7, #6]
  /* Init tickstart for timeout management*/
  uint32_t tickstart = HAL_GetTick();
 8003c12:	f7ff fa23 	bl	800305c <HAL_GetTick>
 8003c16:	6178      	str	r0, [r7, #20]

  /* Check the parameters */
  assert_param(IS_I2C_MEMADD_SIZE(MemAddSize));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8003c18:	68fb      	ldr	r3, [r7, #12]
 8003c1a:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8003c1e:	b2db      	uxtb	r3, r3
 8003c20:	2b20      	cmp	r3, #32
 8003c22:	f040 80d9 	bne.w	8003dd8 <HAL_I2C_Mem_Write+0x1e0>
  {
    /* Wait until BUSY flag is reset */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 8003c26:	697b      	ldr	r3, [r7, #20]
 8003c28:	9300      	str	r3, [sp, #0]
 8003c2a:	2319      	movs	r3, #25
 8003c2c:	2201      	movs	r2, #1
 8003c2e:	496d      	ldr	r1, [pc, #436]	@ (8003de4 <HAL_I2C_Mem_Write+0x1ec>)
 8003c30:	68f8      	ldr	r0, [r7, #12]
 8003c32:	f000 fc8b 	bl	800454c <I2C_WaitOnFlagUntilTimeout>
 8003c36:	4603      	mov	r3, r0
 8003c38:	2b00      	cmp	r3, #0
 8003c3a:	d001      	beq.n	8003c40 <HAL_I2C_Mem_Write+0x48>
    {
      return HAL_BUSY;
 8003c3c:	2302      	movs	r3, #2
 8003c3e:	e0cc      	b.n	8003dda <HAL_I2C_Mem_Write+0x1e2>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 8003c40:	68fb      	ldr	r3, [r7, #12]
 8003c42:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8003c46:	2b01      	cmp	r3, #1
 8003c48:	d101      	bne.n	8003c4e <HAL_I2C_Mem_Write+0x56>
 8003c4a:	2302      	movs	r3, #2
 8003c4c:	e0c5      	b.n	8003dda <HAL_I2C_Mem_Write+0x1e2>
 8003c4e:	68fb      	ldr	r3, [r7, #12]
 8003c50:	2201      	movs	r2, #1
 8003c52:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 8003c56:	68fb      	ldr	r3, [r7, #12]
 8003c58:	681b      	ldr	r3, [r3, #0]
 8003c5a:	681b      	ldr	r3, [r3, #0]
 8003c5c:	f003 0301 	and.w	r3, r3, #1
 8003c60:	2b01      	cmp	r3, #1
 8003c62:	d007      	beq.n	8003c74 <HAL_I2C_Mem_Write+0x7c>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 8003c64:	68fb      	ldr	r3, [r7, #12]
 8003c66:	681b      	ldr	r3, [r3, #0]
 8003c68:	681a      	ldr	r2, [r3, #0]
 8003c6a:	68fb      	ldr	r3, [r7, #12]
 8003c6c:	681b      	ldr	r3, [r3, #0]
 8003c6e:	f042 0201 	orr.w	r2, r2, #1
 8003c72:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 8003c74:	68fb      	ldr	r3, [r7, #12]
 8003c76:	681b      	ldr	r3, [r3, #0]
 8003c78:	681a      	ldr	r2, [r3, #0]
 8003c7a:	68fb      	ldr	r3, [r7, #12]
 8003c7c:	681b      	ldr	r3, [r3, #0]
 8003c7e:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 8003c82:	601a      	str	r2, [r3, #0]

    hi2c->State     = HAL_I2C_STATE_BUSY_TX;
 8003c84:	68fb      	ldr	r3, [r7, #12]
 8003c86:	2221      	movs	r2, #33	@ 0x21
 8003c88:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
    hi2c->Mode      = HAL_I2C_MODE_MEM;
 8003c8c:	68fb      	ldr	r3, [r7, #12]
 8003c8e:	2240      	movs	r2, #64	@ 0x40
 8003c90:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8003c94:	68fb      	ldr	r3, [r7, #12]
 8003c96:	2200      	movs	r2, #0
 8003c98:	641a      	str	r2, [r3, #64]	@ 0x40

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 8003c9a:	68fb      	ldr	r3, [r7, #12]
 8003c9c:	6a3a      	ldr	r2, [r7, #32]
 8003c9e:	625a      	str	r2, [r3, #36]	@ 0x24
    hi2c->XferCount   = Size;
 8003ca0:	68fb      	ldr	r3, [r7, #12]
 8003ca2:	8cba      	ldrh	r2, [r7, #36]	@ 0x24
 8003ca4:	855a      	strh	r2, [r3, #42]	@ 0x2a
    hi2c->XferSize    = hi2c->XferCount;
 8003ca6:	68fb      	ldr	r3, [r7, #12]
 8003ca8:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8003caa:	b29a      	uxth	r2, r3
 8003cac:	68fb      	ldr	r3, [r7, #12]
 8003cae:	851a      	strh	r2, [r3, #40]	@ 0x28
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 8003cb0:	68fb      	ldr	r3, [r7, #12]
 8003cb2:	4a4d      	ldr	r2, [pc, #308]	@ (8003de8 <HAL_I2C_Mem_Write+0x1f0>)
 8003cb4:	62da      	str	r2, [r3, #44]	@ 0x2c

    /* Send Slave Address and Memory Address */
    if (I2C_RequestMemoryWrite(hi2c, DevAddress, MemAddress, MemAddSize, Timeout, tickstart) != HAL_OK)
 8003cb6:	88f8      	ldrh	r0, [r7, #6]
 8003cb8:	893a      	ldrh	r2, [r7, #8]
 8003cba:	8979      	ldrh	r1, [r7, #10]
 8003cbc:	697b      	ldr	r3, [r7, #20]
 8003cbe:	9301      	str	r3, [sp, #4]
 8003cc0:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8003cc2:	9300      	str	r3, [sp, #0]
 8003cc4:	4603      	mov	r3, r0
 8003cc6:	68f8      	ldr	r0, [r7, #12]
 8003cc8:	f000 fac2 	bl	8004250 <I2C_RequestMemoryWrite>
 8003ccc:	4603      	mov	r3, r0
 8003cce:	2b00      	cmp	r3, #0
 8003cd0:	d052      	beq.n	8003d78 <HAL_I2C_Mem_Write+0x180>
    {
      return HAL_ERROR;
 8003cd2:	2301      	movs	r3, #1
 8003cd4:	e081      	b.n	8003dda <HAL_I2C_Mem_Write+0x1e2>
    }

    while (hi2c->XferSize > 0U)
    {
      /* Wait until TXE flag is set */
      if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8003cd6:	697a      	ldr	r2, [r7, #20]
 8003cd8:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 8003cda:	68f8      	ldr	r0, [r7, #12]
 8003cdc:	f000 fd50 	bl	8004780 <I2C_WaitOnTXEFlagUntilTimeout>
 8003ce0:	4603      	mov	r3, r0
 8003ce2:	2b00      	cmp	r3, #0
 8003ce4:	d00d      	beq.n	8003d02 <HAL_I2C_Mem_Write+0x10a>
      {
        if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8003ce6:	68fb      	ldr	r3, [r7, #12]
 8003ce8:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003cea:	2b04      	cmp	r3, #4
 8003cec:	d107      	bne.n	8003cfe <HAL_I2C_Mem_Write+0x106>
        {
          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8003cee:	68fb      	ldr	r3, [r7, #12]
 8003cf0:	681b      	ldr	r3, [r3, #0]
 8003cf2:	681a      	ldr	r2, [r3, #0]
 8003cf4:	68fb      	ldr	r3, [r7, #12]
 8003cf6:	681b      	ldr	r3, [r3, #0]
 8003cf8:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8003cfc:	601a      	str	r2, [r3, #0]
        }
        return HAL_ERROR;
 8003cfe:	2301      	movs	r3, #1
 8003d00:	e06b      	b.n	8003dda <HAL_I2C_Mem_Write+0x1e2>
      }

      /* Write data to DR */
      hi2c->Instance->DR = *hi2c->pBuffPtr;
 8003d02:	68fb      	ldr	r3, [r7, #12]
 8003d04:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003d06:	781a      	ldrb	r2, [r3, #0]
 8003d08:	68fb      	ldr	r3, [r7, #12]
 8003d0a:	681b      	ldr	r3, [r3, #0]
 8003d0c:	611a      	str	r2, [r3, #16]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8003d0e:	68fb      	ldr	r3, [r7, #12]
 8003d10:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003d12:	1c5a      	adds	r2, r3, #1
 8003d14:	68fb      	ldr	r3, [r7, #12]
 8003d16:	625a      	str	r2, [r3, #36]	@ 0x24

      /* Update counter */
      hi2c->XferSize--;
 8003d18:	68fb      	ldr	r3, [r7, #12]
 8003d1a:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8003d1c:	3b01      	subs	r3, #1
 8003d1e:	b29a      	uxth	r2, r3
 8003d20:	68fb      	ldr	r3, [r7, #12]
 8003d22:	851a      	strh	r2, [r3, #40]	@ 0x28
      hi2c->XferCount--;
 8003d24:	68fb      	ldr	r3, [r7, #12]
 8003d26:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8003d28:	b29b      	uxth	r3, r3
 8003d2a:	3b01      	subs	r3, #1
 8003d2c:	b29a      	uxth	r2, r3
 8003d2e:	68fb      	ldr	r3, [r7, #12]
 8003d30:	855a      	strh	r2, [r3, #42]	@ 0x2a

      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET) && (hi2c->XferSize != 0U))
 8003d32:	68fb      	ldr	r3, [r7, #12]
 8003d34:	681b      	ldr	r3, [r3, #0]
 8003d36:	695b      	ldr	r3, [r3, #20]
 8003d38:	f003 0304 	and.w	r3, r3, #4
 8003d3c:	2b04      	cmp	r3, #4
 8003d3e:	d11b      	bne.n	8003d78 <HAL_I2C_Mem_Write+0x180>
 8003d40:	68fb      	ldr	r3, [r7, #12]
 8003d42:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8003d44:	2b00      	cmp	r3, #0
 8003d46:	d017      	beq.n	8003d78 <HAL_I2C_Mem_Write+0x180>
      {
        /* Write data to DR */
        hi2c->Instance->DR = *hi2c->pBuffPtr;
 8003d48:	68fb      	ldr	r3, [r7, #12]
 8003d4a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003d4c:	781a      	ldrb	r2, [r3, #0]
 8003d4e:	68fb      	ldr	r3, [r7, #12]
 8003d50:	681b      	ldr	r3, [r3, #0]
 8003d52:	611a      	str	r2, [r3, #16]

        /* Increment Buffer pointer */
        hi2c->pBuffPtr++;
 8003d54:	68fb      	ldr	r3, [r7, #12]
 8003d56:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003d58:	1c5a      	adds	r2, r3, #1
 8003d5a:	68fb      	ldr	r3, [r7, #12]
 8003d5c:	625a      	str	r2, [r3, #36]	@ 0x24

        /* Update counter */
        hi2c->XferSize--;
 8003d5e:	68fb      	ldr	r3, [r7, #12]
 8003d60:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8003d62:	3b01      	subs	r3, #1
 8003d64:	b29a      	uxth	r2, r3
 8003d66:	68fb      	ldr	r3, [r7, #12]
 8003d68:	851a      	strh	r2, [r3, #40]	@ 0x28
        hi2c->XferCount--;
 8003d6a:	68fb      	ldr	r3, [r7, #12]
 8003d6c:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8003d6e:	b29b      	uxth	r3, r3
 8003d70:	3b01      	subs	r3, #1
 8003d72:	b29a      	uxth	r2, r3
 8003d74:	68fb      	ldr	r3, [r7, #12]
 8003d76:	855a      	strh	r2, [r3, #42]	@ 0x2a
    while (hi2c->XferSize > 0U)
 8003d78:	68fb      	ldr	r3, [r7, #12]
 8003d7a:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8003d7c:	2b00      	cmp	r3, #0
 8003d7e:	d1aa      	bne.n	8003cd6 <HAL_I2C_Mem_Write+0xde>
      }
    }

    /* Wait until BTF flag is set */
    if (I2C_WaitOnBTFFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8003d80:	697a      	ldr	r2, [r7, #20]
 8003d82:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 8003d84:	68f8      	ldr	r0, [r7, #12]
 8003d86:	f000 fd43 	bl	8004810 <I2C_WaitOnBTFFlagUntilTimeout>
 8003d8a:	4603      	mov	r3, r0
 8003d8c:	2b00      	cmp	r3, #0
 8003d8e:	d00d      	beq.n	8003dac <HAL_I2C_Mem_Write+0x1b4>
    {
      if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8003d90:	68fb      	ldr	r3, [r7, #12]
 8003d92:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003d94:	2b04      	cmp	r3, #4
 8003d96:	d107      	bne.n	8003da8 <HAL_I2C_Mem_Write+0x1b0>
      {
        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8003d98:	68fb      	ldr	r3, [r7, #12]
 8003d9a:	681b      	ldr	r3, [r3, #0]
 8003d9c:	681a      	ldr	r2, [r3, #0]
 8003d9e:	68fb      	ldr	r3, [r7, #12]
 8003da0:	681b      	ldr	r3, [r3, #0]
 8003da2:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8003da6:	601a      	str	r2, [r3, #0]
      }
      return HAL_ERROR;
 8003da8:	2301      	movs	r3, #1
 8003daa:	e016      	b.n	8003dda <HAL_I2C_Mem_Write+0x1e2>
    }

    /* Generate Stop */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8003dac:	68fb      	ldr	r3, [r7, #12]
 8003dae:	681b      	ldr	r3, [r3, #0]
 8003db0:	681a      	ldr	r2, [r3, #0]
 8003db2:	68fb      	ldr	r3, [r7, #12]
 8003db4:	681b      	ldr	r3, [r3, #0]
 8003db6:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8003dba:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8003dbc:	68fb      	ldr	r3, [r7, #12]
 8003dbe:	2220      	movs	r2, #32
 8003dc0:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
    hi2c->Mode = HAL_I2C_MODE_NONE;
 8003dc4:	68fb      	ldr	r3, [r7, #12]
 8003dc6:	2200      	movs	r2, #0
 8003dc8:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8003dcc:	68fb      	ldr	r3, [r7, #12]
 8003dce:	2200      	movs	r2, #0
 8003dd0:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    return HAL_OK;
 8003dd4:	2300      	movs	r3, #0
 8003dd6:	e000      	b.n	8003dda <HAL_I2C_Mem_Write+0x1e2>
  }
  else
  {
    return HAL_BUSY;
 8003dd8:	2302      	movs	r3, #2
  }
}
 8003dda:	4618      	mov	r0, r3
 8003ddc:	3718      	adds	r7, #24
 8003dde:	46bd      	mov	sp, r7
 8003de0:	bd80      	pop	{r7, pc}
 8003de2:	bf00      	nop
 8003de4:	00100002 	.word	0x00100002
 8003de8:	ffff0000 	.word	0xffff0000

08003dec <HAL_I2C_Mem_Read>:
  * @param  Size Amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Mem_Read(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8003dec:	b580      	push	{r7, lr}
 8003dee:	b08c      	sub	sp, #48	@ 0x30
 8003df0:	af02      	add	r7, sp, #8
 8003df2:	60f8      	str	r0, [r7, #12]
 8003df4:	4608      	mov	r0, r1
 8003df6:	4611      	mov	r1, r2
 8003df8:	461a      	mov	r2, r3
 8003dfa:	4603      	mov	r3, r0
 8003dfc:	817b      	strh	r3, [r7, #10]
 8003dfe:	460b      	mov	r3, r1
 8003e00:	813b      	strh	r3, [r7, #8]
 8003e02:	4613      	mov	r3, r2
 8003e04:	80fb      	strh	r3, [r7, #6]
  /* Init tickstart for timeout management*/
  uint32_t tickstart = HAL_GetTick();
 8003e06:	f7ff f929 	bl	800305c <HAL_GetTick>
 8003e0a:	6278      	str	r0, [r7, #36]	@ 0x24

  /* Check the parameters */
  assert_param(IS_I2C_MEMADD_SIZE(MemAddSize));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8003e0c:	68fb      	ldr	r3, [r7, #12]
 8003e0e:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8003e12:	b2db      	uxtb	r3, r3
 8003e14:	2b20      	cmp	r3, #32
 8003e16:	f040 8214 	bne.w	8004242 <HAL_I2C_Mem_Read+0x456>
  {
    /* Wait until BUSY flag is reset */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 8003e1a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003e1c:	9300      	str	r3, [sp, #0]
 8003e1e:	2319      	movs	r3, #25
 8003e20:	2201      	movs	r2, #1
 8003e22:	497b      	ldr	r1, [pc, #492]	@ (8004010 <HAL_I2C_Mem_Read+0x224>)
 8003e24:	68f8      	ldr	r0, [r7, #12]
 8003e26:	f000 fb91 	bl	800454c <I2C_WaitOnFlagUntilTimeout>
 8003e2a:	4603      	mov	r3, r0
 8003e2c:	2b00      	cmp	r3, #0
 8003e2e:	d001      	beq.n	8003e34 <HAL_I2C_Mem_Read+0x48>
    {
      return HAL_BUSY;
 8003e30:	2302      	movs	r3, #2
 8003e32:	e207      	b.n	8004244 <HAL_I2C_Mem_Read+0x458>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 8003e34:	68fb      	ldr	r3, [r7, #12]
 8003e36:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8003e3a:	2b01      	cmp	r3, #1
 8003e3c:	d101      	bne.n	8003e42 <HAL_I2C_Mem_Read+0x56>
 8003e3e:	2302      	movs	r3, #2
 8003e40:	e200      	b.n	8004244 <HAL_I2C_Mem_Read+0x458>
 8003e42:	68fb      	ldr	r3, [r7, #12]
 8003e44:	2201      	movs	r2, #1
 8003e46:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 8003e4a:	68fb      	ldr	r3, [r7, #12]
 8003e4c:	681b      	ldr	r3, [r3, #0]
 8003e4e:	681b      	ldr	r3, [r3, #0]
 8003e50:	f003 0301 	and.w	r3, r3, #1
 8003e54:	2b01      	cmp	r3, #1
 8003e56:	d007      	beq.n	8003e68 <HAL_I2C_Mem_Read+0x7c>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 8003e58:	68fb      	ldr	r3, [r7, #12]
 8003e5a:	681b      	ldr	r3, [r3, #0]
 8003e5c:	681a      	ldr	r2, [r3, #0]
 8003e5e:	68fb      	ldr	r3, [r7, #12]
 8003e60:	681b      	ldr	r3, [r3, #0]
 8003e62:	f042 0201 	orr.w	r2, r2, #1
 8003e66:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 8003e68:	68fb      	ldr	r3, [r7, #12]
 8003e6a:	681b      	ldr	r3, [r3, #0]
 8003e6c:	681a      	ldr	r2, [r3, #0]
 8003e6e:	68fb      	ldr	r3, [r7, #12]
 8003e70:	681b      	ldr	r3, [r3, #0]
 8003e72:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 8003e76:	601a      	str	r2, [r3, #0]

    hi2c->State     = HAL_I2C_STATE_BUSY_RX;
 8003e78:	68fb      	ldr	r3, [r7, #12]
 8003e7a:	2222      	movs	r2, #34	@ 0x22
 8003e7c:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
    hi2c->Mode      = HAL_I2C_MODE_MEM;
 8003e80:	68fb      	ldr	r3, [r7, #12]
 8003e82:	2240      	movs	r2, #64	@ 0x40
 8003e84:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8003e88:	68fb      	ldr	r3, [r7, #12]
 8003e8a:	2200      	movs	r2, #0
 8003e8c:	641a      	str	r2, [r3, #64]	@ 0x40

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 8003e8e:	68fb      	ldr	r3, [r7, #12]
 8003e90:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8003e92:	625a      	str	r2, [r3, #36]	@ 0x24
    hi2c->XferCount   = Size;
 8003e94:	68fb      	ldr	r3, [r7, #12]
 8003e96:	8eba      	ldrh	r2, [r7, #52]	@ 0x34
 8003e98:	855a      	strh	r2, [r3, #42]	@ 0x2a
    hi2c->XferSize    = hi2c->XferCount;
 8003e9a:	68fb      	ldr	r3, [r7, #12]
 8003e9c:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8003e9e:	b29a      	uxth	r2, r3
 8003ea0:	68fb      	ldr	r3, [r7, #12]
 8003ea2:	851a      	strh	r2, [r3, #40]	@ 0x28
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 8003ea4:	68fb      	ldr	r3, [r7, #12]
 8003ea6:	4a5b      	ldr	r2, [pc, #364]	@ (8004014 <HAL_I2C_Mem_Read+0x228>)
 8003ea8:	62da      	str	r2, [r3, #44]	@ 0x2c

    /* Send Slave Address and Memory Address */
    if (I2C_RequestMemoryRead(hi2c, DevAddress, MemAddress, MemAddSize, Timeout, tickstart) != HAL_OK)
 8003eaa:	88f8      	ldrh	r0, [r7, #6]
 8003eac:	893a      	ldrh	r2, [r7, #8]
 8003eae:	8979      	ldrh	r1, [r7, #10]
 8003eb0:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003eb2:	9301      	str	r3, [sp, #4]
 8003eb4:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8003eb6:	9300      	str	r3, [sp, #0]
 8003eb8:	4603      	mov	r3, r0
 8003eba:	68f8      	ldr	r0, [r7, #12]
 8003ebc:	f000 fa5e 	bl	800437c <I2C_RequestMemoryRead>
 8003ec0:	4603      	mov	r3, r0
 8003ec2:	2b00      	cmp	r3, #0
 8003ec4:	d001      	beq.n	8003eca <HAL_I2C_Mem_Read+0xde>
    {
      return HAL_ERROR;
 8003ec6:	2301      	movs	r3, #1
 8003ec8:	e1bc      	b.n	8004244 <HAL_I2C_Mem_Read+0x458>
    }

    if (hi2c->XferSize == 0U)
 8003eca:	68fb      	ldr	r3, [r7, #12]
 8003ecc:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8003ece:	2b00      	cmp	r3, #0
 8003ed0:	d113      	bne.n	8003efa <HAL_I2C_Mem_Read+0x10e>
    {
      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8003ed2:	2300      	movs	r3, #0
 8003ed4:	623b      	str	r3, [r7, #32]
 8003ed6:	68fb      	ldr	r3, [r7, #12]
 8003ed8:	681b      	ldr	r3, [r3, #0]
 8003eda:	695b      	ldr	r3, [r3, #20]
 8003edc:	623b      	str	r3, [r7, #32]
 8003ede:	68fb      	ldr	r3, [r7, #12]
 8003ee0:	681b      	ldr	r3, [r3, #0]
 8003ee2:	699b      	ldr	r3, [r3, #24]
 8003ee4:	623b      	str	r3, [r7, #32]
 8003ee6:	6a3b      	ldr	r3, [r7, #32]

      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8003ee8:	68fb      	ldr	r3, [r7, #12]
 8003eea:	681b      	ldr	r3, [r3, #0]
 8003eec:	681a      	ldr	r2, [r3, #0]
 8003eee:	68fb      	ldr	r3, [r7, #12]
 8003ef0:	681b      	ldr	r3, [r3, #0]
 8003ef2:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8003ef6:	601a      	str	r2, [r3, #0]
 8003ef8:	e190      	b.n	800421c <HAL_I2C_Mem_Read+0x430>
    }
    else if (hi2c->XferSize == 1U)
 8003efa:	68fb      	ldr	r3, [r7, #12]
 8003efc:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8003efe:	2b01      	cmp	r3, #1
 8003f00:	d11b      	bne.n	8003f3a <HAL_I2C_Mem_Read+0x14e>
    {
      /* Disable Acknowledge */
      CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8003f02:	68fb      	ldr	r3, [r7, #12]
 8003f04:	681b      	ldr	r3, [r3, #0]
 8003f06:	681a      	ldr	r2, [r3, #0]
 8003f08:	68fb      	ldr	r3, [r7, #12]
 8003f0a:	681b      	ldr	r3, [r3, #0]
 8003f0c:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8003f10:	601a      	str	r2, [r3, #0]

      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8003f12:	2300      	movs	r3, #0
 8003f14:	61fb      	str	r3, [r7, #28]
 8003f16:	68fb      	ldr	r3, [r7, #12]
 8003f18:	681b      	ldr	r3, [r3, #0]
 8003f1a:	695b      	ldr	r3, [r3, #20]
 8003f1c:	61fb      	str	r3, [r7, #28]
 8003f1e:	68fb      	ldr	r3, [r7, #12]
 8003f20:	681b      	ldr	r3, [r3, #0]
 8003f22:	699b      	ldr	r3, [r3, #24]
 8003f24:	61fb      	str	r3, [r7, #28]
 8003f26:	69fb      	ldr	r3, [r7, #28]

      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8003f28:	68fb      	ldr	r3, [r7, #12]
 8003f2a:	681b      	ldr	r3, [r3, #0]
 8003f2c:	681a      	ldr	r2, [r3, #0]
 8003f2e:	68fb      	ldr	r3, [r7, #12]
 8003f30:	681b      	ldr	r3, [r3, #0]
 8003f32:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8003f36:	601a      	str	r2, [r3, #0]
 8003f38:	e170      	b.n	800421c <HAL_I2C_Mem_Read+0x430>
    }
    else if (hi2c->XferSize == 2U)
 8003f3a:	68fb      	ldr	r3, [r7, #12]
 8003f3c:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8003f3e:	2b02      	cmp	r3, #2
 8003f40:	d11b      	bne.n	8003f7a <HAL_I2C_Mem_Read+0x18e>
    {
      /* Disable Acknowledge */
      CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8003f42:	68fb      	ldr	r3, [r7, #12]
 8003f44:	681b      	ldr	r3, [r3, #0]
 8003f46:	681a      	ldr	r2, [r3, #0]
 8003f48:	68fb      	ldr	r3, [r7, #12]
 8003f4a:	681b      	ldr	r3, [r3, #0]
 8003f4c:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8003f50:	601a      	str	r2, [r3, #0]

      /* Enable Pos */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 8003f52:	68fb      	ldr	r3, [r7, #12]
 8003f54:	681b      	ldr	r3, [r3, #0]
 8003f56:	681a      	ldr	r2, [r3, #0]
 8003f58:	68fb      	ldr	r3, [r7, #12]
 8003f5a:	681b      	ldr	r3, [r3, #0]
 8003f5c:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 8003f60:	601a      	str	r2, [r3, #0]

      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8003f62:	2300      	movs	r3, #0
 8003f64:	61bb      	str	r3, [r7, #24]
 8003f66:	68fb      	ldr	r3, [r7, #12]
 8003f68:	681b      	ldr	r3, [r3, #0]
 8003f6a:	695b      	ldr	r3, [r3, #20]
 8003f6c:	61bb      	str	r3, [r7, #24]
 8003f6e:	68fb      	ldr	r3, [r7, #12]
 8003f70:	681b      	ldr	r3, [r3, #0]
 8003f72:	699b      	ldr	r3, [r3, #24]
 8003f74:	61bb      	str	r3, [r7, #24]
 8003f76:	69bb      	ldr	r3, [r7, #24]
 8003f78:	e150      	b.n	800421c <HAL_I2C_Mem_Read+0x430>
    }
    else
    {
      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8003f7a:	2300      	movs	r3, #0
 8003f7c:	617b      	str	r3, [r7, #20]
 8003f7e:	68fb      	ldr	r3, [r7, #12]
 8003f80:	681b      	ldr	r3, [r3, #0]
 8003f82:	695b      	ldr	r3, [r3, #20]
 8003f84:	617b      	str	r3, [r7, #20]
 8003f86:	68fb      	ldr	r3, [r7, #12]
 8003f88:	681b      	ldr	r3, [r3, #0]
 8003f8a:	699b      	ldr	r3, [r3, #24]
 8003f8c:	617b      	str	r3, [r7, #20]
 8003f8e:	697b      	ldr	r3, [r7, #20]
    }

    while (hi2c->XferSize > 0U)
 8003f90:	e144      	b.n	800421c <HAL_I2C_Mem_Read+0x430>
    {
      if (hi2c->XferSize <= 3U)
 8003f92:	68fb      	ldr	r3, [r7, #12]
 8003f94:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8003f96:	2b03      	cmp	r3, #3
 8003f98:	f200 80f1 	bhi.w	800417e <HAL_I2C_Mem_Read+0x392>
      {
        /* One byte */
        if (hi2c->XferSize == 1U)
 8003f9c:	68fb      	ldr	r3, [r7, #12]
 8003f9e:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8003fa0:	2b01      	cmp	r3, #1
 8003fa2:	d123      	bne.n	8003fec <HAL_I2C_Mem_Read+0x200>
        {
          /* Wait until RXNE flag is set */
          if (I2C_WaitOnRXNEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8003fa4:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8003fa6:	6bb9      	ldr	r1, [r7, #56]	@ 0x38
 8003fa8:	68f8      	ldr	r0, [r7, #12]
 8003faa:	f000 fc79 	bl	80048a0 <I2C_WaitOnRXNEFlagUntilTimeout>
 8003fae:	4603      	mov	r3, r0
 8003fb0:	2b00      	cmp	r3, #0
 8003fb2:	d001      	beq.n	8003fb8 <HAL_I2C_Mem_Read+0x1cc>
          {
            return HAL_ERROR;
 8003fb4:	2301      	movs	r3, #1
 8003fb6:	e145      	b.n	8004244 <HAL_I2C_Mem_Read+0x458>
          }

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8003fb8:	68fb      	ldr	r3, [r7, #12]
 8003fba:	681b      	ldr	r3, [r3, #0]
 8003fbc:	691a      	ldr	r2, [r3, #16]
 8003fbe:	68fb      	ldr	r3, [r7, #12]
 8003fc0:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003fc2:	b2d2      	uxtb	r2, r2
 8003fc4:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8003fc6:	68fb      	ldr	r3, [r7, #12]
 8003fc8:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003fca:	1c5a      	adds	r2, r3, #1
 8003fcc:	68fb      	ldr	r3, [r7, #12]
 8003fce:	625a      	str	r2, [r3, #36]	@ 0x24

          /* Update counter */
          hi2c->XferSize--;
 8003fd0:	68fb      	ldr	r3, [r7, #12]
 8003fd2:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8003fd4:	3b01      	subs	r3, #1
 8003fd6:	b29a      	uxth	r2, r3
 8003fd8:	68fb      	ldr	r3, [r7, #12]
 8003fda:	851a      	strh	r2, [r3, #40]	@ 0x28
          hi2c->XferCount--;
 8003fdc:	68fb      	ldr	r3, [r7, #12]
 8003fde:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8003fe0:	b29b      	uxth	r3, r3
 8003fe2:	3b01      	subs	r3, #1
 8003fe4:	b29a      	uxth	r2, r3
 8003fe6:	68fb      	ldr	r3, [r7, #12]
 8003fe8:	855a      	strh	r2, [r3, #42]	@ 0x2a
 8003fea:	e117      	b.n	800421c <HAL_I2C_Mem_Read+0x430>
        }
        /* Two bytes */
        else if (hi2c->XferSize == 2U)
 8003fec:	68fb      	ldr	r3, [r7, #12]
 8003fee:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8003ff0:	2b02      	cmp	r3, #2
 8003ff2:	d14e      	bne.n	8004092 <HAL_I2C_Mem_Read+0x2a6>
        {
          /* Wait until BTF flag is set */
          if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 8003ff4:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003ff6:	9300      	str	r3, [sp, #0]
 8003ff8:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8003ffa:	2200      	movs	r2, #0
 8003ffc:	4906      	ldr	r1, [pc, #24]	@ (8004018 <HAL_I2C_Mem_Read+0x22c>)
 8003ffe:	68f8      	ldr	r0, [r7, #12]
 8004000:	f000 faa4 	bl	800454c <I2C_WaitOnFlagUntilTimeout>
 8004004:	4603      	mov	r3, r0
 8004006:	2b00      	cmp	r3, #0
 8004008:	d008      	beq.n	800401c <HAL_I2C_Mem_Read+0x230>
          {
            return HAL_ERROR;
 800400a:	2301      	movs	r3, #1
 800400c:	e11a      	b.n	8004244 <HAL_I2C_Mem_Read+0x458>
 800400e:	bf00      	nop
 8004010:	00100002 	.word	0x00100002
 8004014:	ffff0000 	.word	0xffff0000
 8004018:	00010004 	.word	0x00010004
          }

          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800401c:	68fb      	ldr	r3, [r7, #12]
 800401e:	681b      	ldr	r3, [r3, #0]
 8004020:	681a      	ldr	r2, [r3, #0]
 8004022:	68fb      	ldr	r3, [r7, #12]
 8004024:	681b      	ldr	r3, [r3, #0]
 8004026:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 800402a:	601a      	str	r2, [r3, #0]

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 800402c:	68fb      	ldr	r3, [r7, #12]
 800402e:	681b      	ldr	r3, [r3, #0]
 8004030:	691a      	ldr	r2, [r3, #16]
 8004032:	68fb      	ldr	r3, [r7, #12]
 8004034:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004036:	b2d2      	uxtb	r2, r2
 8004038:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 800403a:	68fb      	ldr	r3, [r7, #12]
 800403c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800403e:	1c5a      	adds	r2, r3, #1
 8004040:	68fb      	ldr	r3, [r7, #12]
 8004042:	625a      	str	r2, [r3, #36]	@ 0x24

          /* Update counter */
          hi2c->XferSize--;
 8004044:	68fb      	ldr	r3, [r7, #12]
 8004046:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8004048:	3b01      	subs	r3, #1
 800404a:	b29a      	uxth	r2, r3
 800404c:	68fb      	ldr	r3, [r7, #12]
 800404e:	851a      	strh	r2, [r3, #40]	@ 0x28
          hi2c->XferCount--;
 8004050:	68fb      	ldr	r3, [r7, #12]
 8004052:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8004054:	b29b      	uxth	r3, r3
 8004056:	3b01      	subs	r3, #1
 8004058:	b29a      	uxth	r2, r3
 800405a:	68fb      	ldr	r3, [r7, #12]
 800405c:	855a      	strh	r2, [r3, #42]	@ 0x2a

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 800405e:	68fb      	ldr	r3, [r7, #12]
 8004060:	681b      	ldr	r3, [r3, #0]
 8004062:	691a      	ldr	r2, [r3, #16]
 8004064:	68fb      	ldr	r3, [r7, #12]
 8004066:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004068:	b2d2      	uxtb	r2, r2
 800406a:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 800406c:	68fb      	ldr	r3, [r7, #12]
 800406e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004070:	1c5a      	adds	r2, r3, #1
 8004072:	68fb      	ldr	r3, [r7, #12]
 8004074:	625a      	str	r2, [r3, #36]	@ 0x24

          /* Update counter */
          hi2c->XferSize--;
 8004076:	68fb      	ldr	r3, [r7, #12]
 8004078:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 800407a:	3b01      	subs	r3, #1
 800407c:	b29a      	uxth	r2, r3
 800407e:	68fb      	ldr	r3, [r7, #12]
 8004080:	851a      	strh	r2, [r3, #40]	@ 0x28
          hi2c->XferCount--;
 8004082:	68fb      	ldr	r3, [r7, #12]
 8004084:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8004086:	b29b      	uxth	r3, r3
 8004088:	3b01      	subs	r3, #1
 800408a:	b29a      	uxth	r2, r3
 800408c:	68fb      	ldr	r3, [r7, #12]
 800408e:	855a      	strh	r2, [r3, #42]	@ 0x2a
 8004090:	e0c4      	b.n	800421c <HAL_I2C_Mem_Read+0x430>
        }
        /* 3 Last bytes */
        else
        {
          /* Wait until BTF flag is set */
          if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 8004092:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004094:	9300      	str	r3, [sp, #0]
 8004096:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8004098:	2200      	movs	r2, #0
 800409a:	496c      	ldr	r1, [pc, #432]	@ (800424c <HAL_I2C_Mem_Read+0x460>)
 800409c:	68f8      	ldr	r0, [r7, #12]
 800409e:	f000 fa55 	bl	800454c <I2C_WaitOnFlagUntilTimeout>
 80040a2:	4603      	mov	r3, r0
 80040a4:	2b00      	cmp	r3, #0
 80040a6:	d001      	beq.n	80040ac <HAL_I2C_Mem_Read+0x2c0>
          {
            return HAL_ERROR;
 80040a8:	2301      	movs	r3, #1
 80040aa:	e0cb      	b.n	8004244 <HAL_I2C_Mem_Read+0x458>
          }

          /* Disable Acknowledge */
          CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 80040ac:	68fb      	ldr	r3, [r7, #12]
 80040ae:	681b      	ldr	r3, [r3, #0]
 80040b0:	681a      	ldr	r2, [r3, #0]
 80040b2:	68fb      	ldr	r3, [r7, #12]
 80040b4:	681b      	ldr	r3, [r3, #0]
 80040b6:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 80040ba:	601a      	str	r2, [r3, #0]

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 80040bc:	68fb      	ldr	r3, [r7, #12]
 80040be:	681b      	ldr	r3, [r3, #0]
 80040c0:	691a      	ldr	r2, [r3, #16]
 80040c2:	68fb      	ldr	r3, [r7, #12]
 80040c4:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80040c6:	b2d2      	uxtb	r2, r2
 80040c8:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 80040ca:	68fb      	ldr	r3, [r7, #12]
 80040cc:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80040ce:	1c5a      	adds	r2, r3, #1
 80040d0:	68fb      	ldr	r3, [r7, #12]
 80040d2:	625a      	str	r2, [r3, #36]	@ 0x24

          /* Update counter */
          hi2c->XferSize--;
 80040d4:	68fb      	ldr	r3, [r7, #12]
 80040d6:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 80040d8:	3b01      	subs	r3, #1
 80040da:	b29a      	uxth	r2, r3
 80040dc:	68fb      	ldr	r3, [r7, #12]
 80040de:	851a      	strh	r2, [r3, #40]	@ 0x28
          hi2c->XferCount--;
 80040e0:	68fb      	ldr	r3, [r7, #12]
 80040e2:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80040e4:	b29b      	uxth	r3, r3
 80040e6:	3b01      	subs	r3, #1
 80040e8:	b29a      	uxth	r2, r3
 80040ea:	68fb      	ldr	r3, [r7, #12]
 80040ec:	855a      	strh	r2, [r3, #42]	@ 0x2a

          /* Wait until BTF flag is set */
          if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 80040ee:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80040f0:	9300      	str	r3, [sp, #0]
 80040f2:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80040f4:	2200      	movs	r2, #0
 80040f6:	4955      	ldr	r1, [pc, #340]	@ (800424c <HAL_I2C_Mem_Read+0x460>)
 80040f8:	68f8      	ldr	r0, [r7, #12]
 80040fa:	f000 fa27 	bl	800454c <I2C_WaitOnFlagUntilTimeout>
 80040fe:	4603      	mov	r3, r0
 8004100:	2b00      	cmp	r3, #0
 8004102:	d001      	beq.n	8004108 <HAL_I2C_Mem_Read+0x31c>
          {
            return HAL_ERROR;
 8004104:	2301      	movs	r3, #1
 8004106:	e09d      	b.n	8004244 <HAL_I2C_Mem_Read+0x458>
          }

          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8004108:	68fb      	ldr	r3, [r7, #12]
 800410a:	681b      	ldr	r3, [r3, #0]
 800410c:	681a      	ldr	r2, [r3, #0]
 800410e:	68fb      	ldr	r3, [r7, #12]
 8004110:	681b      	ldr	r3, [r3, #0]
 8004112:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8004116:	601a      	str	r2, [r3, #0]

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8004118:	68fb      	ldr	r3, [r7, #12]
 800411a:	681b      	ldr	r3, [r3, #0]
 800411c:	691a      	ldr	r2, [r3, #16]
 800411e:	68fb      	ldr	r3, [r7, #12]
 8004120:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004122:	b2d2      	uxtb	r2, r2
 8004124:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8004126:	68fb      	ldr	r3, [r7, #12]
 8004128:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800412a:	1c5a      	adds	r2, r3, #1
 800412c:	68fb      	ldr	r3, [r7, #12]
 800412e:	625a      	str	r2, [r3, #36]	@ 0x24

          /* Update counter */
          hi2c->XferSize--;
 8004130:	68fb      	ldr	r3, [r7, #12]
 8004132:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8004134:	3b01      	subs	r3, #1
 8004136:	b29a      	uxth	r2, r3
 8004138:	68fb      	ldr	r3, [r7, #12]
 800413a:	851a      	strh	r2, [r3, #40]	@ 0x28
          hi2c->XferCount--;
 800413c:	68fb      	ldr	r3, [r7, #12]
 800413e:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8004140:	b29b      	uxth	r3, r3
 8004142:	3b01      	subs	r3, #1
 8004144:	b29a      	uxth	r2, r3
 8004146:	68fb      	ldr	r3, [r7, #12]
 8004148:	855a      	strh	r2, [r3, #42]	@ 0x2a

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 800414a:	68fb      	ldr	r3, [r7, #12]
 800414c:	681b      	ldr	r3, [r3, #0]
 800414e:	691a      	ldr	r2, [r3, #16]
 8004150:	68fb      	ldr	r3, [r7, #12]
 8004152:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004154:	b2d2      	uxtb	r2, r2
 8004156:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8004158:	68fb      	ldr	r3, [r7, #12]
 800415a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800415c:	1c5a      	adds	r2, r3, #1
 800415e:	68fb      	ldr	r3, [r7, #12]
 8004160:	625a      	str	r2, [r3, #36]	@ 0x24

          /* Update counter */
          hi2c->XferSize--;
 8004162:	68fb      	ldr	r3, [r7, #12]
 8004164:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8004166:	3b01      	subs	r3, #1
 8004168:	b29a      	uxth	r2, r3
 800416a:	68fb      	ldr	r3, [r7, #12]
 800416c:	851a      	strh	r2, [r3, #40]	@ 0x28
          hi2c->XferCount--;
 800416e:	68fb      	ldr	r3, [r7, #12]
 8004170:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8004172:	b29b      	uxth	r3, r3
 8004174:	3b01      	subs	r3, #1
 8004176:	b29a      	uxth	r2, r3
 8004178:	68fb      	ldr	r3, [r7, #12]
 800417a:	855a      	strh	r2, [r3, #42]	@ 0x2a
 800417c:	e04e      	b.n	800421c <HAL_I2C_Mem_Read+0x430>
        }
      }
      else
      {
        /* Wait until RXNE flag is set */
        if (I2C_WaitOnRXNEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 800417e:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8004180:	6bb9      	ldr	r1, [r7, #56]	@ 0x38
 8004182:	68f8      	ldr	r0, [r7, #12]
 8004184:	f000 fb8c 	bl	80048a0 <I2C_WaitOnRXNEFlagUntilTimeout>
 8004188:	4603      	mov	r3, r0
 800418a:	2b00      	cmp	r3, #0
 800418c:	d001      	beq.n	8004192 <HAL_I2C_Mem_Read+0x3a6>
        {
          return HAL_ERROR;
 800418e:	2301      	movs	r3, #1
 8004190:	e058      	b.n	8004244 <HAL_I2C_Mem_Read+0x458>
        }

        /* Read data from DR */
        *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8004192:	68fb      	ldr	r3, [r7, #12]
 8004194:	681b      	ldr	r3, [r3, #0]
 8004196:	691a      	ldr	r2, [r3, #16]
 8004198:	68fb      	ldr	r3, [r7, #12]
 800419a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800419c:	b2d2      	uxtb	r2, r2
 800419e:	701a      	strb	r2, [r3, #0]

        /* Increment Buffer pointer */
        hi2c->pBuffPtr++;
 80041a0:	68fb      	ldr	r3, [r7, #12]
 80041a2:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80041a4:	1c5a      	adds	r2, r3, #1
 80041a6:	68fb      	ldr	r3, [r7, #12]
 80041a8:	625a      	str	r2, [r3, #36]	@ 0x24

        /* Update counter */
        hi2c->XferSize--;
 80041aa:	68fb      	ldr	r3, [r7, #12]
 80041ac:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 80041ae:	3b01      	subs	r3, #1
 80041b0:	b29a      	uxth	r2, r3
 80041b2:	68fb      	ldr	r3, [r7, #12]
 80041b4:	851a      	strh	r2, [r3, #40]	@ 0x28
        hi2c->XferCount--;
 80041b6:	68fb      	ldr	r3, [r7, #12]
 80041b8:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80041ba:	b29b      	uxth	r3, r3
 80041bc:	3b01      	subs	r3, #1
 80041be:	b29a      	uxth	r2, r3
 80041c0:	68fb      	ldr	r3, [r7, #12]
 80041c2:	855a      	strh	r2, [r3, #42]	@ 0x2a

        if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET)
 80041c4:	68fb      	ldr	r3, [r7, #12]
 80041c6:	681b      	ldr	r3, [r3, #0]
 80041c8:	695b      	ldr	r3, [r3, #20]
 80041ca:	f003 0304 	and.w	r3, r3, #4
 80041ce:	2b04      	cmp	r3, #4
 80041d0:	d124      	bne.n	800421c <HAL_I2C_Mem_Read+0x430>
        {
          if (hi2c->XferSize == 3U)
 80041d2:	68fb      	ldr	r3, [r7, #12]
 80041d4:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 80041d6:	2b03      	cmp	r3, #3
 80041d8:	d107      	bne.n	80041ea <HAL_I2C_Mem_Read+0x3fe>
          {
            /* Disable Acknowledge */
            CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 80041da:	68fb      	ldr	r3, [r7, #12]
 80041dc:	681b      	ldr	r3, [r3, #0]
 80041de:	681a      	ldr	r2, [r3, #0]
 80041e0:	68fb      	ldr	r3, [r7, #12]
 80041e2:	681b      	ldr	r3, [r3, #0]
 80041e4:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 80041e8:	601a      	str	r2, [r3, #0]
          }
          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 80041ea:	68fb      	ldr	r3, [r7, #12]
 80041ec:	681b      	ldr	r3, [r3, #0]
 80041ee:	691a      	ldr	r2, [r3, #16]
 80041f0:	68fb      	ldr	r3, [r7, #12]
 80041f2:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80041f4:	b2d2      	uxtb	r2, r2
 80041f6:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 80041f8:	68fb      	ldr	r3, [r7, #12]
 80041fa:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80041fc:	1c5a      	adds	r2, r3, #1
 80041fe:	68fb      	ldr	r3, [r7, #12]
 8004200:	625a      	str	r2, [r3, #36]	@ 0x24

          /* Update counter */
          hi2c->XferSize--;
 8004202:	68fb      	ldr	r3, [r7, #12]
 8004204:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8004206:	3b01      	subs	r3, #1
 8004208:	b29a      	uxth	r2, r3
 800420a:	68fb      	ldr	r3, [r7, #12]
 800420c:	851a      	strh	r2, [r3, #40]	@ 0x28
          hi2c->XferCount--;
 800420e:	68fb      	ldr	r3, [r7, #12]
 8004210:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8004212:	b29b      	uxth	r3, r3
 8004214:	3b01      	subs	r3, #1
 8004216:	b29a      	uxth	r2, r3
 8004218:	68fb      	ldr	r3, [r7, #12]
 800421a:	855a      	strh	r2, [r3, #42]	@ 0x2a
    while (hi2c->XferSize > 0U)
 800421c:	68fb      	ldr	r3, [r7, #12]
 800421e:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8004220:	2b00      	cmp	r3, #0
 8004222:	f47f aeb6 	bne.w	8003f92 <HAL_I2C_Mem_Read+0x1a6>
        }
      }
    }

    hi2c->State = HAL_I2C_STATE_READY;
 8004226:	68fb      	ldr	r3, [r7, #12]
 8004228:	2220      	movs	r2, #32
 800422a:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
    hi2c->Mode = HAL_I2C_MODE_NONE;
 800422e:	68fb      	ldr	r3, [r7, #12]
 8004230:	2200      	movs	r2, #0
 8004232:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8004236:	68fb      	ldr	r3, [r7, #12]
 8004238:	2200      	movs	r2, #0
 800423a:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    return HAL_OK;
 800423e:	2300      	movs	r3, #0
 8004240:	e000      	b.n	8004244 <HAL_I2C_Mem_Read+0x458>
  }
  else
  {
    return HAL_BUSY;
 8004242:	2302      	movs	r3, #2
  }
}
 8004244:	4618      	mov	r0, r3
 8004246:	3728      	adds	r7, #40	@ 0x28
 8004248:	46bd      	mov	sp, r7
 800424a:	bd80      	pop	{r7, pc}
 800424c:	00010004 	.word	0x00010004

08004250 <I2C_RequestMemoryWrite>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_RequestMemoryWrite(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint32_t Timeout, uint32_t Tickstart)
{
 8004250:	b580      	push	{r7, lr}
 8004252:	b088      	sub	sp, #32
 8004254:	af02      	add	r7, sp, #8
 8004256:	60f8      	str	r0, [r7, #12]
 8004258:	4608      	mov	r0, r1
 800425a:	4611      	mov	r1, r2
 800425c:	461a      	mov	r2, r3
 800425e:	4603      	mov	r3, r0
 8004260:	817b      	strh	r3, [r7, #10]
 8004262:	460b      	mov	r3, r1
 8004264:	813b      	strh	r3, [r7, #8]
 8004266:	4613      	mov	r3, r2
 8004268:	80fb      	strh	r3, [r7, #6]
  /* Generate Start */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 800426a:	68fb      	ldr	r3, [r7, #12]
 800426c:	681b      	ldr	r3, [r3, #0]
 800426e:	681a      	ldr	r2, [r3, #0]
 8004270:	68fb      	ldr	r3, [r7, #12]
 8004272:	681b      	ldr	r3, [r3, #0]
 8004274:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 8004278:	601a      	str	r2, [r3, #0]

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 800427a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800427c:	9300      	str	r3, [sp, #0]
 800427e:	6a3b      	ldr	r3, [r7, #32]
 8004280:	2200      	movs	r2, #0
 8004282:	f04f 1101 	mov.w	r1, #65537	@ 0x10001
 8004286:	68f8      	ldr	r0, [r7, #12]
 8004288:	f000 f960 	bl	800454c <I2C_WaitOnFlagUntilTimeout>
 800428c:	4603      	mov	r3, r0
 800428e:	2b00      	cmp	r3, #0
 8004290:	d00d      	beq.n	80042ae <I2C_RequestMemoryWrite+0x5e>
  {
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 8004292:	68fb      	ldr	r3, [r7, #12]
 8004294:	681b      	ldr	r3, [r3, #0]
 8004296:	681b      	ldr	r3, [r3, #0]
 8004298:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800429c:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 80042a0:	d103      	bne.n	80042aa <I2C_RequestMemoryWrite+0x5a>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 80042a2:	68fb      	ldr	r3, [r7, #12]
 80042a4:	f44f 7200 	mov.w	r2, #512	@ 0x200
 80042a8:	641a      	str	r2, [r3, #64]	@ 0x40
    }
    return HAL_TIMEOUT;
 80042aa:	2303      	movs	r3, #3
 80042ac:	e05f      	b.n	800436e <I2C_RequestMemoryWrite+0x11e>
  }

  /* Send slave address */
  hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(DevAddress);
 80042ae:	897b      	ldrh	r3, [r7, #10]
 80042b0:	b2db      	uxtb	r3, r3
 80042b2:	461a      	mov	r2, r3
 80042b4:	68fb      	ldr	r3, [r7, #12]
 80042b6:	681b      	ldr	r3, [r3, #0]
 80042b8:	f002 02fe 	and.w	r2, r2, #254	@ 0xfe
 80042bc:	611a      	str	r2, [r3, #16]

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 80042be:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80042c0:	6a3a      	ldr	r2, [r7, #32]
 80042c2:	492d      	ldr	r1, [pc, #180]	@ (8004378 <I2C_RequestMemoryWrite+0x128>)
 80042c4:	68f8      	ldr	r0, [r7, #12]
 80042c6:	f000 f9bb 	bl	8004640 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 80042ca:	4603      	mov	r3, r0
 80042cc:	2b00      	cmp	r3, #0
 80042ce:	d001      	beq.n	80042d4 <I2C_RequestMemoryWrite+0x84>
  {
    return HAL_ERROR;
 80042d0:	2301      	movs	r3, #1
 80042d2:	e04c      	b.n	800436e <I2C_RequestMemoryWrite+0x11e>
  }

  /* Clear ADDR flag */
  __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 80042d4:	2300      	movs	r3, #0
 80042d6:	617b      	str	r3, [r7, #20]
 80042d8:	68fb      	ldr	r3, [r7, #12]
 80042da:	681b      	ldr	r3, [r3, #0]
 80042dc:	695b      	ldr	r3, [r3, #20]
 80042de:	617b      	str	r3, [r7, #20]
 80042e0:	68fb      	ldr	r3, [r7, #12]
 80042e2:	681b      	ldr	r3, [r3, #0]
 80042e4:	699b      	ldr	r3, [r3, #24]
 80042e6:	617b      	str	r3, [r7, #20]
 80042e8:	697b      	ldr	r3, [r7, #20]

  /* Wait until TXE flag is set */
  if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 80042ea:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 80042ec:	6a39      	ldr	r1, [r7, #32]
 80042ee:	68f8      	ldr	r0, [r7, #12]
 80042f0:	f000 fa46 	bl	8004780 <I2C_WaitOnTXEFlagUntilTimeout>
 80042f4:	4603      	mov	r3, r0
 80042f6:	2b00      	cmp	r3, #0
 80042f8:	d00d      	beq.n	8004316 <I2C_RequestMemoryWrite+0xc6>
  {
    if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 80042fa:	68fb      	ldr	r3, [r7, #12]
 80042fc:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80042fe:	2b04      	cmp	r3, #4
 8004300:	d107      	bne.n	8004312 <I2C_RequestMemoryWrite+0xc2>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8004302:	68fb      	ldr	r3, [r7, #12]
 8004304:	681b      	ldr	r3, [r3, #0]
 8004306:	681a      	ldr	r2, [r3, #0]
 8004308:	68fb      	ldr	r3, [r7, #12]
 800430a:	681b      	ldr	r3, [r3, #0]
 800430c:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8004310:	601a      	str	r2, [r3, #0]
    }
    return HAL_ERROR;
 8004312:	2301      	movs	r3, #1
 8004314:	e02b      	b.n	800436e <I2C_RequestMemoryWrite+0x11e>
  }

  /* If Memory address size is 8Bit */
  if (MemAddSize == I2C_MEMADD_SIZE_8BIT)
 8004316:	88fb      	ldrh	r3, [r7, #6]
 8004318:	2b01      	cmp	r3, #1
 800431a:	d105      	bne.n	8004328 <I2C_RequestMemoryWrite+0xd8>
  {
    /* Send Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(MemAddress);
 800431c:	893b      	ldrh	r3, [r7, #8]
 800431e:	b2da      	uxtb	r2, r3
 8004320:	68fb      	ldr	r3, [r7, #12]
 8004322:	681b      	ldr	r3, [r3, #0]
 8004324:	611a      	str	r2, [r3, #16]
 8004326:	e021      	b.n	800436c <I2C_RequestMemoryWrite+0x11c>
  }
  /* If Memory address size is 16Bit */
  else
  {
    /* Send MSB of Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_MSB(MemAddress);
 8004328:	893b      	ldrh	r3, [r7, #8]
 800432a:	0a1b      	lsrs	r3, r3, #8
 800432c:	b29b      	uxth	r3, r3
 800432e:	b2da      	uxtb	r2, r3
 8004330:	68fb      	ldr	r3, [r7, #12]
 8004332:	681b      	ldr	r3, [r3, #0]
 8004334:	611a      	str	r2, [r3, #16]

    /* Wait until TXE flag is set */
    if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8004336:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8004338:	6a39      	ldr	r1, [r7, #32]
 800433a:	68f8      	ldr	r0, [r7, #12]
 800433c:	f000 fa20 	bl	8004780 <I2C_WaitOnTXEFlagUntilTimeout>
 8004340:	4603      	mov	r3, r0
 8004342:	2b00      	cmp	r3, #0
 8004344:	d00d      	beq.n	8004362 <I2C_RequestMemoryWrite+0x112>
    {
      if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8004346:	68fb      	ldr	r3, [r7, #12]
 8004348:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800434a:	2b04      	cmp	r3, #4
 800434c:	d107      	bne.n	800435e <I2C_RequestMemoryWrite+0x10e>
      {
        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800434e:	68fb      	ldr	r3, [r7, #12]
 8004350:	681b      	ldr	r3, [r3, #0]
 8004352:	681a      	ldr	r2, [r3, #0]
 8004354:	68fb      	ldr	r3, [r7, #12]
 8004356:	681b      	ldr	r3, [r3, #0]
 8004358:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 800435c:	601a      	str	r2, [r3, #0]
      }
      return HAL_ERROR;
 800435e:	2301      	movs	r3, #1
 8004360:	e005      	b.n	800436e <I2C_RequestMemoryWrite+0x11e>
    }

    /* Send LSB of Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(MemAddress);
 8004362:	893b      	ldrh	r3, [r7, #8]
 8004364:	b2da      	uxtb	r2, r3
 8004366:	68fb      	ldr	r3, [r7, #12]
 8004368:	681b      	ldr	r3, [r3, #0]
 800436a:	611a      	str	r2, [r3, #16]
  }

  return HAL_OK;
 800436c:	2300      	movs	r3, #0
}
 800436e:	4618      	mov	r0, r3
 8004370:	3718      	adds	r7, #24
 8004372:	46bd      	mov	sp, r7
 8004374:	bd80      	pop	{r7, pc}
 8004376:	bf00      	nop
 8004378:	00010002 	.word	0x00010002

0800437c <I2C_RequestMemoryRead>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_RequestMemoryRead(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint32_t Timeout, uint32_t Tickstart)
{
 800437c:	b580      	push	{r7, lr}
 800437e:	b088      	sub	sp, #32
 8004380:	af02      	add	r7, sp, #8
 8004382:	60f8      	str	r0, [r7, #12]
 8004384:	4608      	mov	r0, r1
 8004386:	4611      	mov	r1, r2
 8004388:	461a      	mov	r2, r3
 800438a:	4603      	mov	r3, r0
 800438c:	817b      	strh	r3, [r7, #10]
 800438e:	460b      	mov	r3, r1
 8004390:	813b      	strh	r3, [r7, #8]
 8004392:	4613      	mov	r3, r2
 8004394:	80fb      	strh	r3, [r7, #6]
  /* Enable Acknowledge */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8004396:	68fb      	ldr	r3, [r7, #12]
 8004398:	681b      	ldr	r3, [r3, #0]
 800439a:	681a      	ldr	r2, [r3, #0]
 800439c:	68fb      	ldr	r3, [r7, #12]
 800439e:	681b      	ldr	r3, [r3, #0]
 80043a0:	f442 6280 	orr.w	r2, r2, #1024	@ 0x400
 80043a4:	601a      	str	r2, [r3, #0]

  /* Generate Start */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 80043a6:	68fb      	ldr	r3, [r7, #12]
 80043a8:	681b      	ldr	r3, [r3, #0]
 80043aa:	681a      	ldr	r2, [r3, #0]
 80043ac:	68fb      	ldr	r3, [r7, #12]
 80043ae:	681b      	ldr	r3, [r3, #0]
 80043b0:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 80043b4:	601a      	str	r2, [r3, #0]

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 80043b6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80043b8:	9300      	str	r3, [sp, #0]
 80043ba:	6a3b      	ldr	r3, [r7, #32]
 80043bc:	2200      	movs	r2, #0
 80043be:	f04f 1101 	mov.w	r1, #65537	@ 0x10001
 80043c2:	68f8      	ldr	r0, [r7, #12]
 80043c4:	f000 f8c2 	bl	800454c <I2C_WaitOnFlagUntilTimeout>
 80043c8:	4603      	mov	r3, r0
 80043ca:	2b00      	cmp	r3, #0
 80043cc:	d00d      	beq.n	80043ea <I2C_RequestMemoryRead+0x6e>
  {
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 80043ce:	68fb      	ldr	r3, [r7, #12]
 80043d0:	681b      	ldr	r3, [r3, #0]
 80043d2:	681b      	ldr	r3, [r3, #0]
 80043d4:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80043d8:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 80043dc:	d103      	bne.n	80043e6 <I2C_RequestMemoryRead+0x6a>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 80043de:	68fb      	ldr	r3, [r7, #12]
 80043e0:	f44f 7200 	mov.w	r2, #512	@ 0x200
 80043e4:	641a      	str	r2, [r3, #64]	@ 0x40
    }
    return HAL_TIMEOUT;
 80043e6:	2303      	movs	r3, #3
 80043e8:	e0aa      	b.n	8004540 <I2C_RequestMemoryRead+0x1c4>
  }

  /* Send slave address */
  hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(DevAddress);
 80043ea:	897b      	ldrh	r3, [r7, #10]
 80043ec:	b2db      	uxtb	r3, r3
 80043ee:	461a      	mov	r2, r3
 80043f0:	68fb      	ldr	r3, [r7, #12]
 80043f2:	681b      	ldr	r3, [r3, #0]
 80043f4:	f002 02fe 	and.w	r2, r2, #254	@ 0xfe
 80043f8:	611a      	str	r2, [r3, #16]

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 80043fa:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80043fc:	6a3a      	ldr	r2, [r7, #32]
 80043fe:	4952      	ldr	r1, [pc, #328]	@ (8004548 <I2C_RequestMemoryRead+0x1cc>)
 8004400:	68f8      	ldr	r0, [r7, #12]
 8004402:	f000 f91d 	bl	8004640 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8004406:	4603      	mov	r3, r0
 8004408:	2b00      	cmp	r3, #0
 800440a:	d001      	beq.n	8004410 <I2C_RequestMemoryRead+0x94>
  {
    return HAL_ERROR;
 800440c:	2301      	movs	r3, #1
 800440e:	e097      	b.n	8004540 <I2C_RequestMemoryRead+0x1c4>
  }

  /* Clear ADDR flag */
  __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8004410:	2300      	movs	r3, #0
 8004412:	617b      	str	r3, [r7, #20]
 8004414:	68fb      	ldr	r3, [r7, #12]
 8004416:	681b      	ldr	r3, [r3, #0]
 8004418:	695b      	ldr	r3, [r3, #20]
 800441a:	617b      	str	r3, [r7, #20]
 800441c:	68fb      	ldr	r3, [r7, #12]
 800441e:	681b      	ldr	r3, [r3, #0]
 8004420:	699b      	ldr	r3, [r3, #24]
 8004422:	617b      	str	r3, [r7, #20]
 8004424:	697b      	ldr	r3, [r7, #20]

  /* Wait until TXE flag is set */
  if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8004426:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8004428:	6a39      	ldr	r1, [r7, #32]
 800442a:	68f8      	ldr	r0, [r7, #12]
 800442c:	f000 f9a8 	bl	8004780 <I2C_WaitOnTXEFlagUntilTimeout>
 8004430:	4603      	mov	r3, r0
 8004432:	2b00      	cmp	r3, #0
 8004434:	d00d      	beq.n	8004452 <I2C_RequestMemoryRead+0xd6>
  {
    if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8004436:	68fb      	ldr	r3, [r7, #12]
 8004438:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800443a:	2b04      	cmp	r3, #4
 800443c:	d107      	bne.n	800444e <I2C_RequestMemoryRead+0xd2>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800443e:	68fb      	ldr	r3, [r7, #12]
 8004440:	681b      	ldr	r3, [r3, #0]
 8004442:	681a      	ldr	r2, [r3, #0]
 8004444:	68fb      	ldr	r3, [r7, #12]
 8004446:	681b      	ldr	r3, [r3, #0]
 8004448:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 800444c:	601a      	str	r2, [r3, #0]
    }
    return HAL_ERROR;
 800444e:	2301      	movs	r3, #1
 8004450:	e076      	b.n	8004540 <I2C_RequestMemoryRead+0x1c4>
  }

  /* If Memory address size is 8Bit */
  if (MemAddSize == I2C_MEMADD_SIZE_8BIT)
 8004452:	88fb      	ldrh	r3, [r7, #6]
 8004454:	2b01      	cmp	r3, #1
 8004456:	d105      	bne.n	8004464 <I2C_RequestMemoryRead+0xe8>
  {
    /* Send Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(MemAddress);
 8004458:	893b      	ldrh	r3, [r7, #8]
 800445a:	b2da      	uxtb	r2, r3
 800445c:	68fb      	ldr	r3, [r7, #12]
 800445e:	681b      	ldr	r3, [r3, #0]
 8004460:	611a      	str	r2, [r3, #16]
 8004462:	e021      	b.n	80044a8 <I2C_RequestMemoryRead+0x12c>
  }
  /* If Memory address size is 16Bit */
  else
  {
    /* Send MSB of Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_MSB(MemAddress);
 8004464:	893b      	ldrh	r3, [r7, #8]
 8004466:	0a1b      	lsrs	r3, r3, #8
 8004468:	b29b      	uxth	r3, r3
 800446a:	b2da      	uxtb	r2, r3
 800446c:	68fb      	ldr	r3, [r7, #12]
 800446e:	681b      	ldr	r3, [r3, #0]
 8004470:	611a      	str	r2, [r3, #16]

    /* Wait until TXE flag is set */
    if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8004472:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8004474:	6a39      	ldr	r1, [r7, #32]
 8004476:	68f8      	ldr	r0, [r7, #12]
 8004478:	f000 f982 	bl	8004780 <I2C_WaitOnTXEFlagUntilTimeout>
 800447c:	4603      	mov	r3, r0
 800447e:	2b00      	cmp	r3, #0
 8004480:	d00d      	beq.n	800449e <I2C_RequestMemoryRead+0x122>
    {
      if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8004482:	68fb      	ldr	r3, [r7, #12]
 8004484:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004486:	2b04      	cmp	r3, #4
 8004488:	d107      	bne.n	800449a <I2C_RequestMemoryRead+0x11e>
      {
        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800448a:	68fb      	ldr	r3, [r7, #12]
 800448c:	681b      	ldr	r3, [r3, #0]
 800448e:	681a      	ldr	r2, [r3, #0]
 8004490:	68fb      	ldr	r3, [r7, #12]
 8004492:	681b      	ldr	r3, [r3, #0]
 8004494:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8004498:	601a      	str	r2, [r3, #0]
      }
      return HAL_ERROR;
 800449a:	2301      	movs	r3, #1
 800449c:	e050      	b.n	8004540 <I2C_RequestMemoryRead+0x1c4>
    }

    /* Send LSB of Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(MemAddress);
 800449e:	893b      	ldrh	r3, [r7, #8]
 80044a0:	b2da      	uxtb	r2, r3
 80044a2:	68fb      	ldr	r3, [r7, #12]
 80044a4:	681b      	ldr	r3, [r3, #0]
 80044a6:	611a      	str	r2, [r3, #16]
  }

  /* Wait until TXE flag is set */
  if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 80044a8:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 80044aa:	6a39      	ldr	r1, [r7, #32]
 80044ac:	68f8      	ldr	r0, [r7, #12]
 80044ae:	f000 f967 	bl	8004780 <I2C_WaitOnTXEFlagUntilTimeout>
 80044b2:	4603      	mov	r3, r0
 80044b4:	2b00      	cmp	r3, #0
 80044b6:	d00d      	beq.n	80044d4 <I2C_RequestMemoryRead+0x158>
  {
    if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 80044b8:	68fb      	ldr	r3, [r7, #12]
 80044ba:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80044bc:	2b04      	cmp	r3, #4
 80044be:	d107      	bne.n	80044d0 <I2C_RequestMemoryRead+0x154>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80044c0:	68fb      	ldr	r3, [r7, #12]
 80044c2:	681b      	ldr	r3, [r3, #0]
 80044c4:	681a      	ldr	r2, [r3, #0]
 80044c6:	68fb      	ldr	r3, [r7, #12]
 80044c8:	681b      	ldr	r3, [r3, #0]
 80044ca:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 80044ce:	601a      	str	r2, [r3, #0]
    }
    return HAL_ERROR;
 80044d0:	2301      	movs	r3, #1
 80044d2:	e035      	b.n	8004540 <I2C_RequestMemoryRead+0x1c4>
  }

  /* Generate Restart */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 80044d4:	68fb      	ldr	r3, [r7, #12]
 80044d6:	681b      	ldr	r3, [r3, #0]
 80044d8:	681a      	ldr	r2, [r3, #0]
 80044da:	68fb      	ldr	r3, [r7, #12]
 80044dc:	681b      	ldr	r3, [r3, #0]
 80044de:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 80044e2:	601a      	str	r2, [r3, #0]

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 80044e4:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80044e6:	9300      	str	r3, [sp, #0]
 80044e8:	6a3b      	ldr	r3, [r7, #32]
 80044ea:	2200      	movs	r2, #0
 80044ec:	f04f 1101 	mov.w	r1, #65537	@ 0x10001
 80044f0:	68f8      	ldr	r0, [r7, #12]
 80044f2:	f000 f82b 	bl	800454c <I2C_WaitOnFlagUntilTimeout>
 80044f6:	4603      	mov	r3, r0
 80044f8:	2b00      	cmp	r3, #0
 80044fa:	d00d      	beq.n	8004518 <I2C_RequestMemoryRead+0x19c>
  {
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 80044fc:	68fb      	ldr	r3, [r7, #12]
 80044fe:	681b      	ldr	r3, [r3, #0]
 8004500:	681b      	ldr	r3, [r3, #0]
 8004502:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8004506:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 800450a:	d103      	bne.n	8004514 <I2C_RequestMemoryRead+0x198>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 800450c:	68fb      	ldr	r3, [r7, #12]
 800450e:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8004512:	641a      	str	r2, [r3, #64]	@ 0x40
    }
    return HAL_TIMEOUT;
 8004514:	2303      	movs	r3, #3
 8004516:	e013      	b.n	8004540 <I2C_RequestMemoryRead+0x1c4>
  }

  /* Send slave address */
  hi2c->Instance->DR = I2C_7BIT_ADD_READ(DevAddress);
 8004518:	897b      	ldrh	r3, [r7, #10]
 800451a:	b2db      	uxtb	r3, r3
 800451c:	f043 0301 	orr.w	r3, r3, #1
 8004520:	b2da      	uxtb	r2, r3
 8004522:	68fb      	ldr	r3, [r7, #12]
 8004524:	681b      	ldr	r3, [r3, #0]
 8004526:	611a      	str	r2, [r3, #16]

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 8004528:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800452a:	6a3a      	ldr	r2, [r7, #32]
 800452c:	4906      	ldr	r1, [pc, #24]	@ (8004548 <I2C_RequestMemoryRead+0x1cc>)
 800452e:	68f8      	ldr	r0, [r7, #12]
 8004530:	f000 f886 	bl	8004640 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8004534:	4603      	mov	r3, r0
 8004536:	2b00      	cmp	r3, #0
 8004538:	d001      	beq.n	800453e <I2C_RequestMemoryRead+0x1c2>
  {
    return HAL_ERROR;
 800453a:	2301      	movs	r3, #1
 800453c:	e000      	b.n	8004540 <I2C_RequestMemoryRead+0x1c4>
  }

  return HAL_OK;
 800453e:	2300      	movs	r3, #0
}
 8004540:	4618      	mov	r0, r3
 8004542:	3718      	adds	r7, #24
 8004544:	46bd      	mov	sp, r7
 8004546:	bd80      	pop	{r7, pc}
 8004548:	00010002 	.word	0x00010002

0800454c <I2C_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, FlagStatus Status, uint32_t Timeout, uint32_t Tickstart)
{
 800454c:	b580      	push	{r7, lr}
 800454e:	b084      	sub	sp, #16
 8004550:	af00      	add	r7, sp, #0
 8004552:	60f8      	str	r0, [r7, #12]
 8004554:	60b9      	str	r1, [r7, #8]
 8004556:	603b      	str	r3, [r7, #0]
 8004558:	4613      	mov	r3, r2
 800455a:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 800455c:	e048      	b.n	80045f0 <I2C_WaitOnFlagUntilTimeout+0xa4>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 800455e:	683b      	ldr	r3, [r7, #0]
 8004560:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004564:	d044      	beq.n	80045f0 <I2C_WaitOnFlagUntilTimeout+0xa4>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8004566:	f7fe fd79 	bl	800305c <HAL_GetTick>
 800456a:	4602      	mov	r2, r0
 800456c:	69bb      	ldr	r3, [r7, #24]
 800456e:	1ad3      	subs	r3, r2, r3
 8004570:	683a      	ldr	r2, [r7, #0]
 8004572:	429a      	cmp	r2, r3
 8004574:	d302      	bcc.n	800457c <I2C_WaitOnFlagUntilTimeout+0x30>
 8004576:	683b      	ldr	r3, [r7, #0]
 8004578:	2b00      	cmp	r3, #0
 800457a:	d139      	bne.n	80045f0 <I2C_WaitOnFlagUntilTimeout+0xa4>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, Flag) == Status))
 800457c:	68bb      	ldr	r3, [r7, #8]
 800457e:	0c1b      	lsrs	r3, r3, #16
 8004580:	b2db      	uxtb	r3, r3
 8004582:	2b01      	cmp	r3, #1
 8004584:	d10d      	bne.n	80045a2 <I2C_WaitOnFlagUntilTimeout+0x56>
 8004586:	68fb      	ldr	r3, [r7, #12]
 8004588:	681b      	ldr	r3, [r3, #0]
 800458a:	695b      	ldr	r3, [r3, #20]
 800458c:	43da      	mvns	r2, r3
 800458e:	68bb      	ldr	r3, [r7, #8]
 8004590:	4013      	ands	r3, r2
 8004592:	b29b      	uxth	r3, r3
 8004594:	2b00      	cmp	r3, #0
 8004596:	bf0c      	ite	eq
 8004598:	2301      	moveq	r3, #1
 800459a:	2300      	movne	r3, #0
 800459c:	b2db      	uxtb	r3, r3
 800459e:	461a      	mov	r2, r3
 80045a0:	e00c      	b.n	80045bc <I2C_WaitOnFlagUntilTimeout+0x70>
 80045a2:	68fb      	ldr	r3, [r7, #12]
 80045a4:	681b      	ldr	r3, [r3, #0]
 80045a6:	699b      	ldr	r3, [r3, #24]
 80045a8:	43da      	mvns	r2, r3
 80045aa:	68bb      	ldr	r3, [r7, #8]
 80045ac:	4013      	ands	r3, r2
 80045ae:	b29b      	uxth	r3, r3
 80045b0:	2b00      	cmp	r3, #0
 80045b2:	bf0c      	ite	eq
 80045b4:	2301      	moveq	r3, #1
 80045b6:	2300      	movne	r3, #0
 80045b8:	b2db      	uxtb	r3, r3
 80045ba:	461a      	mov	r2, r3
 80045bc:	79fb      	ldrb	r3, [r7, #7]
 80045be:	429a      	cmp	r2, r3
 80045c0:	d116      	bne.n	80045f0 <I2C_WaitOnFlagUntilTimeout+0xa4>
        {
          hi2c->PreviousState     = I2C_STATE_NONE;
 80045c2:	68fb      	ldr	r3, [r7, #12]
 80045c4:	2200      	movs	r2, #0
 80045c6:	631a      	str	r2, [r3, #48]	@ 0x30
          hi2c->State             = HAL_I2C_STATE_READY;
 80045c8:	68fb      	ldr	r3, [r7, #12]
 80045ca:	2220      	movs	r2, #32
 80045cc:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
          hi2c->Mode              = HAL_I2C_MODE_NONE;
 80045d0:	68fb      	ldr	r3, [r7, #12]
 80045d2:	2200      	movs	r2, #0
 80045d4:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
          hi2c->ErrorCode         |= HAL_I2C_ERROR_TIMEOUT;
 80045d8:	68fb      	ldr	r3, [r7, #12]
 80045da:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80045dc:	f043 0220 	orr.w	r2, r3, #32
 80045e0:	68fb      	ldr	r3, [r7, #12]
 80045e2:	641a      	str	r2, [r3, #64]	@ 0x40

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 80045e4:	68fb      	ldr	r3, [r7, #12]
 80045e6:	2200      	movs	r2, #0
 80045e8:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

          return HAL_ERROR;
 80045ec:	2301      	movs	r3, #1
 80045ee:	e023      	b.n	8004638 <I2C_WaitOnFlagUntilTimeout+0xec>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 80045f0:	68bb      	ldr	r3, [r7, #8]
 80045f2:	0c1b      	lsrs	r3, r3, #16
 80045f4:	b2db      	uxtb	r3, r3
 80045f6:	2b01      	cmp	r3, #1
 80045f8:	d10d      	bne.n	8004616 <I2C_WaitOnFlagUntilTimeout+0xca>
 80045fa:	68fb      	ldr	r3, [r7, #12]
 80045fc:	681b      	ldr	r3, [r3, #0]
 80045fe:	695b      	ldr	r3, [r3, #20]
 8004600:	43da      	mvns	r2, r3
 8004602:	68bb      	ldr	r3, [r7, #8]
 8004604:	4013      	ands	r3, r2
 8004606:	b29b      	uxth	r3, r3
 8004608:	2b00      	cmp	r3, #0
 800460a:	bf0c      	ite	eq
 800460c:	2301      	moveq	r3, #1
 800460e:	2300      	movne	r3, #0
 8004610:	b2db      	uxtb	r3, r3
 8004612:	461a      	mov	r2, r3
 8004614:	e00c      	b.n	8004630 <I2C_WaitOnFlagUntilTimeout+0xe4>
 8004616:	68fb      	ldr	r3, [r7, #12]
 8004618:	681b      	ldr	r3, [r3, #0]
 800461a:	699b      	ldr	r3, [r3, #24]
 800461c:	43da      	mvns	r2, r3
 800461e:	68bb      	ldr	r3, [r7, #8]
 8004620:	4013      	ands	r3, r2
 8004622:	b29b      	uxth	r3, r3
 8004624:	2b00      	cmp	r3, #0
 8004626:	bf0c      	ite	eq
 8004628:	2301      	moveq	r3, #1
 800462a:	2300      	movne	r3, #0
 800462c:	b2db      	uxtb	r3, r3
 800462e:	461a      	mov	r2, r3
 8004630:	79fb      	ldrb	r3, [r7, #7]
 8004632:	429a      	cmp	r2, r3
 8004634:	d093      	beq.n	800455e <I2C_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 8004636:	2300      	movs	r3, #0
}
 8004638:	4618      	mov	r0, r3
 800463a:	3710      	adds	r7, #16
 800463c:	46bd      	mov	sp, r7
 800463e:	bd80      	pop	{r7, pc}

08004640 <I2C_WaitOnMasterAddressFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnMasterAddressFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, uint32_t Timeout, uint32_t Tickstart)
{
 8004640:	b580      	push	{r7, lr}
 8004642:	b084      	sub	sp, #16
 8004644:	af00      	add	r7, sp, #0
 8004646:	60f8      	str	r0, [r7, #12]
 8004648:	60b9      	str	r1, [r7, #8]
 800464a:	607a      	str	r2, [r7, #4]
 800464c:	603b      	str	r3, [r7, #0]
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 800464e:	e071      	b.n	8004734 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf4>
  {
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 8004650:	68fb      	ldr	r3, [r7, #12]
 8004652:	681b      	ldr	r3, [r3, #0]
 8004654:	695b      	ldr	r3, [r3, #20]
 8004656:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 800465a:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 800465e:	d123      	bne.n	80046a8 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x68>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8004660:	68fb      	ldr	r3, [r7, #12]
 8004662:	681b      	ldr	r3, [r3, #0]
 8004664:	681a      	ldr	r2, [r3, #0]
 8004666:	68fb      	ldr	r3, [r7, #12]
 8004668:	681b      	ldr	r3, [r3, #0]
 800466a:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 800466e:	601a      	str	r2, [r3, #0]

      /* Clear AF Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8004670:	68fb      	ldr	r3, [r7, #12]
 8004672:	681b      	ldr	r3, [r3, #0]
 8004674:	f46f 6280 	mvn.w	r2, #1024	@ 0x400
 8004678:	615a      	str	r2, [r3, #20]

      hi2c->PreviousState       = I2C_STATE_NONE;
 800467a:	68fb      	ldr	r3, [r7, #12]
 800467c:	2200      	movs	r2, #0
 800467e:	631a      	str	r2, [r3, #48]	@ 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 8004680:	68fb      	ldr	r3, [r7, #12]
 8004682:	2220      	movs	r2, #32
 8004684:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 8004688:	68fb      	ldr	r3, [r7, #12]
 800468a:	2200      	movs	r2, #0
 800468c:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 8004690:	68fb      	ldr	r3, [r7, #12]
 8004692:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004694:	f043 0204 	orr.w	r2, r3, #4
 8004698:	68fb      	ldr	r3, [r7, #12]
 800469a:	641a      	str	r2, [r3, #64]	@ 0x40

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 800469c:	68fb      	ldr	r3, [r7, #12]
 800469e:	2200      	movs	r2, #0
 80046a0:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

      return HAL_ERROR;
 80046a4:	2301      	movs	r3, #1
 80046a6:	e067      	b.n	8004778 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x138>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 80046a8:	687b      	ldr	r3, [r7, #4]
 80046aa:	f1b3 3fff 	cmp.w	r3, #4294967295
 80046ae:	d041      	beq.n	8004734 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf4>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80046b0:	f7fe fcd4 	bl	800305c <HAL_GetTick>
 80046b4:	4602      	mov	r2, r0
 80046b6:	683b      	ldr	r3, [r7, #0]
 80046b8:	1ad3      	subs	r3, r2, r3
 80046ba:	687a      	ldr	r2, [r7, #4]
 80046bc:	429a      	cmp	r2, r3
 80046be:	d302      	bcc.n	80046c6 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x86>
 80046c0:	687b      	ldr	r3, [r7, #4]
 80046c2:	2b00      	cmp	r3, #0
 80046c4:	d136      	bne.n	8004734 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf4>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET))
 80046c6:	68bb      	ldr	r3, [r7, #8]
 80046c8:	0c1b      	lsrs	r3, r3, #16
 80046ca:	b2db      	uxtb	r3, r3
 80046cc:	2b01      	cmp	r3, #1
 80046ce:	d10c      	bne.n	80046ea <I2C_WaitOnMasterAddressFlagUntilTimeout+0xaa>
 80046d0:	68fb      	ldr	r3, [r7, #12]
 80046d2:	681b      	ldr	r3, [r3, #0]
 80046d4:	695b      	ldr	r3, [r3, #20]
 80046d6:	43da      	mvns	r2, r3
 80046d8:	68bb      	ldr	r3, [r7, #8]
 80046da:	4013      	ands	r3, r2
 80046dc:	b29b      	uxth	r3, r3
 80046de:	2b00      	cmp	r3, #0
 80046e0:	bf14      	ite	ne
 80046e2:	2301      	movne	r3, #1
 80046e4:	2300      	moveq	r3, #0
 80046e6:	b2db      	uxtb	r3, r3
 80046e8:	e00b      	b.n	8004702 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xc2>
 80046ea:	68fb      	ldr	r3, [r7, #12]
 80046ec:	681b      	ldr	r3, [r3, #0]
 80046ee:	699b      	ldr	r3, [r3, #24]
 80046f0:	43da      	mvns	r2, r3
 80046f2:	68bb      	ldr	r3, [r7, #8]
 80046f4:	4013      	ands	r3, r2
 80046f6:	b29b      	uxth	r3, r3
 80046f8:	2b00      	cmp	r3, #0
 80046fa:	bf14      	ite	ne
 80046fc:	2301      	movne	r3, #1
 80046fe:	2300      	moveq	r3, #0
 8004700:	b2db      	uxtb	r3, r3
 8004702:	2b00      	cmp	r3, #0
 8004704:	d016      	beq.n	8004734 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf4>
        {
          hi2c->PreviousState       = I2C_STATE_NONE;
 8004706:	68fb      	ldr	r3, [r7, #12]
 8004708:	2200      	movs	r2, #0
 800470a:	631a      	str	r2, [r3, #48]	@ 0x30
          hi2c->State               = HAL_I2C_STATE_READY;
 800470c:	68fb      	ldr	r3, [r7, #12]
 800470e:	2220      	movs	r2, #32
 8004710:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
          hi2c->Mode                = HAL_I2C_MODE_NONE;
 8004714:	68fb      	ldr	r3, [r7, #12]
 8004716:	2200      	movs	r2, #0
 8004718:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
          hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 800471c:	68fb      	ldr	r3, [r7, #12]
 800471e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004720:	f043 0220 	orr.w	r2, r3, #32
 8004724:	68fb      	ldr	r3, [r7, #12]
 8004726:	641a      	str	r2, [r3, #64]	@ 0x40

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 8004728:	68fb      	ldr	r3, [r7, #12]
 800472a:	2200      	movs	r2, #0
 800472c:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

          return HAL_ERROR;
 8004730:	2301      	movs	r3, #1
 8004732:	e021      	b.n	8004778 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x138>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 8004734:	68bb      	ldr	r3, [r7, #8]
 8004736:	0c1b      	lsrs	r3, r3, #16
 8004738:	b2db      	uxtb	r3, r3
 800473a:	2b01      	cmp	r3, #1
 800473c:	d10c      	bne.n	8004758 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x118>
 800473e:	68fb      	ldr	r3, [r7, #12]
 8004740:	681b      	ldr	r3, [r3, #0]
 8004742:	695b      	ldr	r3, [r3, #20]
 8004744:	43da      	mvns	r2, r3
 8004746:	68bb      	ldr	r3, [r7, #8]
 8004748:	4013      	ands	r3, r2
 800474a:	b29b      	uxth	r3, r3
 800474c:	2b00      	cmp	r3, #0
 800474e:	bf14      	ite	ne
 8004750:	2301      	movne	r3, #1
 8004752:	2300      	moveq	r3, #0
 8004754:	b2db      	uxtb	r3, r3
 8004756:	e00b      	b.n	8004770 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x130>
 8004758:	68fb      	ldr	r3, [r7, #12]
 800475a:	681b      	ldr	r3, [r3, #0]
 800475c:	699b      	ldr	r3, [r3, #24]
 800475e:	43da      	mvns	r2, r3
 8004760:	68bb      	ldr	r3, [r7, #8]
 8004762:	4013      	ands	r3, r2
 8004764:	b29b      	uxth	r3, r3
 8004766:	2b00      	cmp	r3, #0
 8004768:	bf14      	ite	ne
 800476a:	2301      	movne	r3, #1
 800476c:	2300      	moveq	r3, #0
 800476e:	b2db      	uxtb	r3, r3
 8004770:	2b00      	cmp	r3, #0
 8004772:	f47f af6d 	bne.w	8004650 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x10>
        }
      }
    }
  }
  return HAL_OK;
 8004776:	2300      	movs	r3, #0
}
 8004778:	4618      	mov	r0, r3
 800477a:	3710      	adds	r7, #16
 800477c:	46bd      	mov	sp, r7
 800477e:	bd80      	pop	{r7, pc}

08004780 <I2C_WaitOnTXEFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnTXEFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8004780:	b580      	push	{r7, lr}
 8004782:	b084      	sub	sp, #16
 8004784:	af00      	add	r7, sp, #0
 8004786:	60f8      	str	r0, [r7, #12]
 8004788:	60b9      	str	r1, [r7, #8]
 800478a:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 800478c:	e034      	b.n	80047f8 <I2C_WaitOnTXEFlagUntilTimeout+0x78>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c) != HAL_OK)
 800478e:	68f8      	ldr	r0, [r7, #12]
 8004790:	f000 f8e3 	bl	800495a <I2C_IsAcknowledgeFailed>
 8004794:	4603      	mov	r3, r0
 8004796:	2b00      	cmp	r3, #0
 8004798:	d001      	beq.n	800479e <I2C_WaitOnTXEFlagUntilTimeout+0x1e>
    {
      return HAL_ERROR;
 800479a:	2301      	movs	r3, #1
 800479c:	e034      	b.n	8004808 <I2C_WaitOnTXEFlagUntilTimeout+0x88>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 800479e:	68bb      	ldr	r3, [r7, #8]
 80047a0:	f1b3 3fff 	cmp.w	r3, #4294967295
 80047a4:	d028      	beq.n	80047f8 <I2C_WaitOnTXEFlagUntilTimeout+0x78>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80047a6:	f7fe fc59 	bl	800305c <HAL_GetTick>
 80047aa:	4602      	mov	r2, r0
 80047ac:	687b      	ldr	r3, [r7, #4]
 80047ae:	1ad3      	subs	r3, r2, r3
 80047b0:	68ba      	ldr	r2, [r7, #8]
 80047b2:	429a      	cmp	r2, r3
 80047b4:	d302      	bcc.n	80047bc <I2C_WaitOnTXEFlagUntilTimeout+0x3c>
 80047b6:	68bb      	ldr	r3, [r7, #8]
 80047b8:	2b00      	cmp	r3, #0
 80047ba:	d11d      	bne.n	80047f8 <I2C_WaitOnTXEFlagUntilTimeout+0x78>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET))
 80047bc:	68fb      	ldr	r3, [r7, #12]
 80047be:	681b      	ldr	r3, [r3, #0]
 80047c0:	695b      	ldr	r3, [r3, #20]
 80047c2:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 80047c6:	2b80      	cmp	r3, #128	@ 0x80
 80047c8:	d016      	beq.n	80047f8 <I2C_WaitOnTXEFlagUntilTimeout+0x78>
        {
          hi2c->PreviousState       = I2C_STATE_NONE;
 80047ca:	68fb      	ldr	r3, [r7, #12]
 80047cc:	2200      	movs	r2, #0
 80047ce:	631a      	str	r2, [r3, #48]	@ 0x30
          hi2c->State               = HAL_I2C_STATE_READY;
 80047d0:	68fb      	ldr	r3, [r7, #12]
 80047d2:	2220      	movs	r2, #32
 80047d4:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
          hi2c->Mode                = HAL_I2C_MODE_NONE;
 80047d8:	68fb      	ldr	r3, [r7, #12]
 80047da:	2200      	movs	r2, #0
 80047dc:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
          hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 80047e0:	68fb      	ldr	r3, [r7, #12]
 80047e2:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80047e4:	f043 0220 	orr.w	r2, r3, #32
 80047e8:	68fb      	ldr	r3, [r7, #12]
 80047ea:	641a      	str	r2, [r3, #64]	@ 0x40

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 80047ec:	68fb      	ldr	r3, [r7, #12]
 80047ee:	2200      	movs	r2, #0
 80047f0:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

          return HAL_ERROR;
 80047f4:	2301      	movs	r3, #1
 80047f6:	e007      	b.n	8004808 <I2C_WaitOnTXEFlagUntilTimeout+0x88>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 80047f8:	68fb      	ldr	r3, [r7, #12]
 80047fa:	681b      	ldr	r3, [r3, #0]
 80047fc:	695b      	ldr	r3, [r3, #20]
 80047fe:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8004802:	2b80      	cmp	r3, #128	@ 0x80
 8004804:	d1c3      	bne.n	800478e <I2C_WaitOnTXEFlagUntilTimeout+0xe>
        }
      }
    }
  }
  return HAL_OK;
 8004806:	2300      	movs	r3, #0
}
 8004808:	4618      	mov	r0, r3
 800480a:	3710      	adds	r7, #16
 800480c:	46bd      	mov	sp, r7
 800480e:	bd80      	pop	{r7, pc}

08004810 <I2C_WaitOnBTFFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnBTFFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8004810:	b580      	push	{r7, lr}
 8004812:	b084      	sub	sp, #16
 8004814:	af00      	add	r7, sp, #0
 8004816:	60f8      	str	r0, [r7, #12]
 8004818:	60b9      	str	r1, [r7, #8]
 800481a:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET)
 800481c:	e034      	b.n	8004888 <I2C_WaitOnBTFFlagUntilTimeout+0x78>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c) != HAL_OK)
 800481e:	68f8      	ldr	r0, [r7, #12]
 8004820:	f000 f89b 	bl	800495a <I2C_IsAcknowledgeFailed>
 8004824:	4603      	mov	r3, r0
 8004826:	2b00      	cmp	r3, #0
 8004828:	d001      	beq.n	800482e <I2C_WaitOnBTFFlagUntilTimeout+0x1e>
    {
      return HAL_ERROR;
 800482a:	2301      	movs	r3, #1
 800482c:	e034      	b.n	8004898 <I2C_WaitOnBTFFlagUntilTimeout+0x88>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 800482e:	68bb      	ldr	r3, [r7, #8]
 8004830:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004834:	d028      	beq.n	8004888 <I2C_WaitOnBTFFlagUntilTimeout+0x78>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8004836:	f7fe fc11 	bl	800305c <HAL_GetTick>
 800483a:	4602      	mov	r2, r0
 800483c:	687b      	ldr	r3, [r7, #4]
 800483e:	1ad3      	subs	r3, r2, r3
 8004840:	68ba      	ldr	r2, [r7, #8]
 8004842:	429a      	cmp	r2, r3
 8004844:	d302      	bcc.n	800484c <I2C_WaitOnBTFFlagUntilTimeout+0x3c>
 8004846:	68bb      	ldr	r3, [r7, #8]
 8004848:	2b00      	cmp	r3, #0
 800484a:	d11d      	bne.n	8004888 <I2C_WaitOnBTFFlagUntilTimeout+0x78>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET))
 800484c:	68fb      	ldr	r3, [r7, #12]
 800484e:	681b      	ldr	r3, [r3, #0]
 8004850:	695b      	ldr	r3, [r3, #20]
 8004852:	f003 0304 	and.w	r3, r3, #4
 8004856:	2b04      	cmp	r3, #4
 8004858:	d016      	beq.n	8004888 <I2C_WaitOnBTFFlagUntilTimeout+0x78>
        {
          hi2c->PreviousState       = I2C_STATE_NONE;
 800485a:	68fb      	ldr	r3, [r7, #12]
 800485c:	2200      	movs	r2, #0
 800485e:	631a      	str	r2, [r3, #48]	@ 0x30
          hi2c->State               = HAL_I2C_STATE_READY;
 8004860:	68fb      	ldr	r3, [r7, #12]
 8004862:	2220      	movs	r2, #32
 8004864:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
          hi2c->Mode                = HAL_I2C_MODE_NONE;
 8004868:	68fb      	ldr	r3, [r7, #12]
 800486a:	2200      	movs	r2, #0
 800486c:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
          hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8004870:	68fb      	ldr	r3, [r7, #12]
 8004872:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004874:	f043 0220 	orr.w	r2, r3, #32
 8004878:	68fb      	ldr	r3, [r7, #12]
 800487a:	641a      	str	r2, [r3, #64]	@ 0x40

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 800487c:	68fb      	ldr	r3, [r7, #12]
 800487e:	2200      	movs	r2, #0
 8004880:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

          return HAL_ERROR;
 8004884:	2301      	movs	r3, #1
 8004886:	e007      	b.n	8004898 <I2C_WaitOnBTFFlagUntilTimeout+0x88>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET)
 8004888:	68fb      	ldr	r3, [r7, #12]
 800488a:	681b      	ldr	r3, [r3, #0]
 800488c:	695b      	ldr	r3, [r3, #20]
 800488e:	f003 0304 	and.w	r3, r3, #4
 8004892:	2b04      	cmp	r3, #4
 8004894:	d1c3      	bne.n	800481e <I2C_WaitOnBTFFlagUntilTimeout+0xe>
        }
      }
    }
  }
  return HAL_OK;
 8004896:	2300      	movs	r3, #0
}
 8004898:	4618      	mov	r0, r3
 800489a:	3710      	adds	r7, #16
 800489c:	46bd      	mov	sp, r7
 800489e:	bd80      	pop	{r7, pc}

080048a0 <I2C_WaitOnRXNEFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnRXNEFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 80048a0:	b580      	push	{r7, lr}
 80048a2:	b084      	sub	sp, #16
 80048a4:	af00      	add	r7, sp, #0
 80048a6:	60f8      	str	r0, [r7, #12]
 80048a8:	60b9      	str	r1, [r7, #8]
 80048aa:	607a      	str	r2, [r7, #4]

  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET)
 80048ac:	e049      	b.n	8004942 <I2C_WaitOnRXNEFlagUntilTimeout+0xa2>
  {
    /* Check if a STOPF is detected */
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == SET)
 80048ae:	68fb      	ldr	r3, [r7, #12]
 80048b0:	681b      	ldr	r3, [r3, #0]
 80048b2:	695b      	ldr	r3, [r3, #20]
 80048b4:	f003 0310 	and.w	r3, r3, #16
 80048b8:	2b10      	cmp	r3, #16
 80048ba:	d119      	bne.n	80048f0 <I2C_WaitOnRXNEFlagUntilTimeout+0x50>
    {
      /* Clear STOP Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 80048bc:	68fb      	ldr	r3, [r7, #12]
 80048be:	681b      	ldr	r3, [r3, #0]
 80048c0:	f06f 0210 	mvn.w	r2, #16
 80048c4:	615a      	str	r2, [r3, #20]

      hi2c->PreviousState       = I2C_STATE_NONE;
 80048c6:	68fb      	ldr	r3, [r7, #12]
 80048c8:	2200      	movs	r2, #0
 80048ca:	631a      	str	r2, [r3, #48]	@ 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 80048cc:	68fb      	ldr	r3, [r7, #12]
 80048ce:	2220      	movs	r2, #32
 80048d0:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 80048d4:	68fb      	ldr	r3, [r7, #12]
 80048d6:	2200      	movs	r2, #0
 80048d8:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_NONE;
 80048dc:	68fb      	ldr	r3, [r7, #12]
 80048de:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 80048e0:	68fb      	ldr	r3, [r7, #12]
 80048e2:	641a      	str	r2, [r3, #64]	@ 0x40

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 80048e4:	68fb      	ldr	r3, [r7, #12]
 80048e6:	2200      	movs	r2, #0
 80048e8:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

      return HAL_ERROR;
 80048ec:	2301      	movs	r3, #1
 80048ee:	e030      	b.n	8004952 <I2C_WaitOnRXNEFlagUntilTimeout+0xb2>
    }

    /* Check for the Timeout */
    if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80048f0:	f7fe fbb4 	bl	800305c <HAL_GetTick>
 80048f4:	4602      	mov	r2, r0
 80048f6:	687b      	ldr	r3, [r7, #4]
 80048f8:	1ad3      	subs	r3, r2, r3
 80048fa:	68ba      	ldr	r2, [r7, #8]
 80048fc:	429a      	cmp	r2, r3
 80048fe:	d302      	bcc.n	8004906 <I2C_WaitOnRXNEFlagUntilTimeout+0x66>
 8004900:	68bb      	ldr	r3, [r7, #8]
 8004902:	2b00      	cmp	r3, #0
 8004904:	d11d      	bne.n	8004942 <I2C_WaitOnRXNEFlagUntilTimeout+0xa2>
    {
      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET))
 8004906:	68fb      	ldr	r3, [r7, #12]
 8004908:	681b      	ldr	r3, [r3, #0]
 800490a:	695b      	ldr	r3, [r3, #20]
 800490c:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8004910:	2b40      	cmp	r3, #64	@ 0x40
 8004912:	d016      	beq.n	8004942 <I2C_WaitOnRXNEFlagUntilTimeout+0xa2>
      {
        hi2c->PreviousState       = I2C_STATE_NONE;
 8004914:	68fb      	ldr	r3, [r7, #12]
 8004916:	2200      	movs	r2, #0
 8004918:	631a      	str	r2, [r3, #48]	@ 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 800491a:	68fb      	ldr	r3, [r7, #12]
 800491c:	2220      	movs	r2, #32
 800491e:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 8004922:	68fb      	ldr	r3, [r7, #12]
 8004924:	2200      	movs	r2, #0
 8004926:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 800492a:	68fb      	ldr	r3, [r7, #12]
 800492c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800492e:	f043 0220 	orr.w	r2, r3, #32
 8004932:	68fb      	ldr	r3, [r7, #12]
 8004934:	641a      	str	r2, [r3, #64]	@ 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8004936:	68fb      	ldr	r3, [r7, #12]
 8004938:	2200      	movs	r2, #0
 800493a:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

        return HAL_ERROR;
 800493e:	2301      	movs	r3, #1
 8004940:	e007      	b.n	8004952 <I2C_WaitOnRXNEFlagUntilTimeout+0xb2>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET)
 8004942:	68fb      	ldr	r3, [r7, #12]
 8004944:	681b      	ldr	r3, [r3, #0]
 8004946:	695b      	ldr	r3, [r3, #20]
 8004948:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800494c:	2b40      	cmp	r3, #64	@ 0x40
 800494e:	d1ae      	bne.n	80048ae <I2C_WaitOnRXNEFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
 8004950:	2300      	movs	r3, #0
}
 8004952:	4618      	mov	r0, r3
 8004954:	3710      	adds	r7, #16
 8004956:	46bd      	mov	sp, r7
 8004958:	bd80      	pop	{r7, pc}

0800495a <I2C_IsAcknowledgeFailed>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_IsAcknowledgeFailed(I2C_HandleTypeDef *hi2c)
{
 800495a:	b480      	push	{r7}
 800495c:	b083      	sub	sp, #12
 800495e:	af00      	add	r7, sp, #0
 8004960:	6078      	str	r0, [r7, #4]
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 8004962:	687b      	ldr	r3, [r7, #4]
 8004964:	681b      	ldr	r3, [r3, #0]
 8004966:	695b      	ldr	r3, [r3, #20]
 8004968:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 800496c:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8004970:	d11b      	bne.n	80049aa <I2C_IsAcknowledgeFailed+0x50>
  {
    /* Clear NACKF Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8004972:	687b      	ldr	r3, [r7, #4]
 8004974:	681b      	ldr	r3, [r3, #0]
 8004976:	f46f 6280 	mvn.w	r2, #1024	@ 0x400
 800497a:	615a      	str	r2, [r3, #20]

    hi2c->PreviousState       = I2C_STATE_NONE;
 800497c:	687b      	ldr	r3, [r7, #4]
 800497e:	2200      	movs	r2, #0
 8004980:	631a      	str	r2, [r3, #48]	@ 0x30
    hi2c->State               = HAL_I2C_STATE_READY;
 8004982:	687b      	ldr	r3, [r7, #4]
 8004984:	2220      	movs	r2, #32
 8004986:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
    hi2c->Mode                = HAL_I2C_MODE_NONE;
 800498a:	687b      	ldr	r3, [r7, #4]
 800498c:	2200      	movs	r2, #0
 800498e:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
    hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 8004992:	687b      	ldr	r3, [r7, #4]
 8004994:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004996:	f043 0204 	orr.w	r2, r3, #4
 800499a:	687b      	ldr	r3, [r7, #4]
 800499c:	641a      	str	r2, [r3, #64]	@ 0x40

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 800499e:	687b      	ldr	r3, [r7, #4]
 80049a0:	2200      	movs	r2, #0
 80049a2:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    return HAL_ERROR;
 80049a6:	2301      	movs	r3, #1
 80049a8:	e000      	b.n	80049ac <I2C_IsAcknowledgeFailed+0x52>
  }
  return HAL_OK;
 80049aa:	2300      	movs	r3, #0
}
 80049ac:	4618      	mov	r0, r3
 80049ae:	370c      	adds	r7, #12
 80049b0:	46bd      	mov	sp, r7
 80049b2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80049b6:	4770      	bx	lr

080049b8 <HAL_I2CEx_ConfigAnalogFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  AnalogFilter new state of the Analog filter.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigAnalogFilter(I2C_HandleTypeDef *hi2c, uint32_t AnalogFilter)
{
 80049b8:	b480      	push	{r7}
 80049ba:	b083      	sub	sp, #12
 80049bc:	af00      	add	r7, sp, #0
 80049be:	6078      	str	r0, [r7, #4]
 80049c0:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_ANALOG_FILTER(AnalogFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 80049c2:	687b      	ldr	r3, [r7, #4]
 80049c4:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 80049c8:	b2db      	uxtb	r3, r3
 80049ca:	2b20      	cmp	r3, #32
 80049cc:	d129      	bne.n	8004a22 <HAL_I2CEx_ConfigAnalogFilter+0x6a>
  {
    hi2c->State = HAL_I2C_STATE_BUSY;
 80049ce:	687b      	ldr	r3, [r7, #4]
 80049d0:	2224      	movs	r2, #36	@ 0x24
 80049d2:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 80049d6:	687b      	ldr	r3, [r7, #4]
 80049d8:	681b      	ldr	r3, [r3, #0]
 80049da:	681a      	ldr	r2, [r3, #0]
 80049dc:	687b      	ldr	r3, [r7, #4]
 80049de:	681b      	ldr	r3, [r3, #0]
 80049e0:	f022 0201 	bic.w	r2, r2, #1
 80049e4:	601a      	str	r2, [r3, #0]

    /* Reset I2Cx ANOFF bit */
    hi2c->Instance->FLTR &= ~(I2C_FLTR_ANOFF);
 80049e6:	687b      	ldr	r3, [r7, #4]
 80049e8:	681b      	ldr	r3, [r3, #0]
 80049ea:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 80049ec:	687b      	ldr	r3, [r7, #4]
 80049ee:	681b      	ldr	r3, [r3, #0]
 80049f0:	f022 0210 	bic.w	r2, r2, #16
 80049f4:	625a      	str	r2, [r3, #36]	@ 0x24

    /* Disable the analog filter */
    hi2c->Instance->FLTR |= AnalogFilter;
 80049f6:	687b      	ldr	r3, [r7, #4]
 80049f8:	681b      	ldr	r3, [r3, #0]
 80049fa:	6a59      	ldr	r1, [r3, #36]	@ 0x24
 80049fc:	687b      	ldr	r3, [r7, #4]
 80049fe:	681b      	ldr	r3, [r3, #0]
 8004a00:	683a      	ldr	r2, [r7, #0]
 8004a02:	430a      	orrs	r2, r1
 8004a04:	625a      	str	r2, [r3, #36]	@ 0x24

    __HAL_I2C_ENABLE(hi2c);
 8004a06:	687b      	ldr	r3, [r7, #4]
 8004a08:	681b      	ldr	r3, [r3, #0]
 8004a0a:	681a      	ldr	r2, [r3, #0]
 8004a0c:	687b      	ldr	r3, [r7, #4]
 8004a0e:	681b      	ldr	r3, [r3, #0]
 8004a10:	f042 0201 	orr.w	r2, r2, #1
 8004a14:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8004a16:	687b      	ldr	r3, [r7, #4]
 8004a18:	2220      	movs	r2, #32
 8004a1a:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

    return HAL_OK;
 8004a1e:	2300      	movs	r3, #0
 8004a20:	e000      	b.n	8004a24 <HAL_I2CEx_ConfigAnalogFilter+0x6c>
  }
  else
  {
    return HAL_BUSY;
 8004a22:	2302      	movs	r3, #2
  }
}
 8004a24:	4618      	mov	r0, r3
 8004a26:	370c      	adds	r7, #12
 8004a28:	46bd      	mov	sp, r7
 8004a2a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004a2e:	4770      	bx	lr

08004a30 <HAL_I2CEx_ConfigDigitalFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  DigitalFilter Coefficient of digital noise filter between 0x00 and 0x0F.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigDigitalFilter(I2C_HandleTypeDef *hi2c, uint32_t DigitalFilter)
{
 8004a30:	b480      	push	{r7}
 8004a32:	b085      	sub	sp, #20
 8004a34:	af00      	add	r7, sp, #0
 8004a36:	6078      	str	r0, [r7, #4]
 8004a38:	6039      	str	r1, [r7, #0]
  uint16_t tmpreg = 0;
 8004a3a:	2300      	movs	r3, #0
 8004a3c:	81fb      	strh	r3, [r7, #14]

  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_DIGITAL_FILTER(DigitalFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8004a3e:	687b      	ldr	r3, [r7, #4]
 8004a40:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8004a44:	b2db      	uxtb	r3, r3
 8004a46:	2b20      	cmp	r3, #32
 8004a48:	d12a      	bne.n	8004aa0 <HAL_I2CEx_ConfigDigitalFilter+0x70>
  {
    hi2c->State = HAL_I2C_STATE_BUSY;
 8004a4a:	687b      	ldr	r3, [r7, #4]
 8004a4c:	2224      	movs	r2, #36	@ 0x24
 8004a4e:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 8004a52:	687b      	ldr	r3, [r7, #4]
 8004a54:	681b      	ldr	r3, [r3, #0]
 8004a56:	681a      	ldr	r2, [r3, #0]
 8004a58:	687b      	ldr	r3, [r7, #4]
 8004a5a:	681b      	ldr	r3, [r3, #0]
 8004a5c:	f022 0201 	bic.w	r2, r2, #1
 8004a60:	601a      	str	r2, [r3, #0]

    /* Get the old register value */
    tmpreg = hi2c->Instance->FLTR;
 8004a62:	687b      	ldr	r3, [r7, #4]
 8004a64:	681b      	ldr	r3, [r3, #0]
 8004a66:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004a68:	81fb      	strh	r3, [r7, #14]

    /* Reset I2Cx DNF bit [3:0] */
    tmpreg &= ~(I2C_FLTR_DNF);
 8004a6a:	89fb      	ldrh	r3, [r7, #14]
 8004a6c:	f023 030f 	bic.w	r3, r3, #15
 8004a70:	81fb      	strh	r3, [r7, #14]

    /* Set I2Cx DNF coefficient */
    tmpreg |= DigitalFilter;
 8004a72:	683b      	ldr	r3, [r7, #0]
 8004a74:	b29a      	uxth	r2, r3
 8004a76:	89fb      	ldrh	r3, [r7, #14]
 8004a78:	4313      	orrs	r3, r2
 8004a7a:	81fb      	strh	r3, [r7, #14]

    /* Store the new register value */
    hi2c->Instance->FLTR = tmpreg;
 8004a7c:	687b      	ldr	r3, [r7, #4]
 8004a7e:	681b      	ldr	r3, [r3, #0]
 8004a80:	89fa      	ldrh	r2, [r7, #14]
 8004a82:	625a      	str	r2, [r3, #36]	@ 0x24

    __HAL_I2C_ENABLE(hi2c);
 8004a84:	687b      	ldr	r3, [r7, #4]
 8004a86:	681b      	ldr	r3, [r3, #0]
 8004a88:	681a      	ldr	r2, [r3, #0]
 8004a8a:	687b      	ldr	r3, [r7, #4]
 8004a8c:	681b      	ldr	r3, [r3, #0]
 8004a8e:	f042 0201 	orr.w	r2, r2, #1
 8004a92:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8004a94:	687b      	ldr	r3, [r7, #4]
 8004a96:	2220      	movs	r2, #32
 8004a98:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

    return HAL_OK;
 8004a9c:	2300      	movs	r3, #0
 8004a9e:	e000      	b.n	8004aa2 <HAL_I2CEx_ConfigDigitalFilter+0x72>
  }
  else
  {
    return HAL_BUSY;
 8004aa0:	2302      	movs	r3, #2
  }
}
 8004aa2:	4618      	mov	r0, r3
 8004aa4:	3714      	adds	r7, #20
 8004aa6:	46bd      	mov	sp, r7
 8004aa8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004aac:	4770      	bx	lr
	...

08004ab0 <HAL_LTDC_Init>:
  * @param  hltdc  pointer to a LTDC_HandleTypeDef structure that contains
  *                the configuration information for the LTDC.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_LTDC_Init(LTDC_HandleTypeDef *hltdc)
{
 8004ab0:	b580      	push	{r7, lr}
 8004ab2:	b084      	sub	sp, #16
 8004ab4:	af00      	add	r7, sp, #0
 8004ab6:	6078      	str	r0, [r7, #4]
  uint32_t tmp;
  uint32_t tmp1;

  /* Check the LTDC peripheral state */
  if (hltdc == NULL)
 8004ab8:	687b      	ldr	r3, [r7, #4]
 8004aba:	2b00      	cmp	r3, #0
 8004abc:	d101      	bne.n	8004ac2 <HAL_LTDC_Init+0x12>
  {
    return HAL_ERROR;
 8004abe:	2301      	movs	r3, #1
 8004ac0:	e0bf      	b.n	8004c42 <HAL_LTDC_Init+0x192>
    }
    /* Init the low level hardware */
    hltdc->MspInitCallback(hltdc);
  }
#else
  if (hltdc->State == HAL_LTDC_STATE_RESET)
 8004ac2:	687b      	ldr	r3, [r7, #4]
 8004ac4:	f893 30a1 	ldrb.w	r3, [r3, #161]	@ 0xa1
 8004ac8:	b2db      	uxtb	r3, r3
 8004aca:	2b00      	cmp	r3, #0
 8004acc:	d106      	bne.n	8004adc <HAL_LTDC_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hltdc->Lock = HAL_UNLOCKED;
 8004ace:	687b      	ldr	r3, [r7, #4]
 8004ad0:	2200      	movs	r2, #0
 8004ad2:	f883 20a0 	strb.w	r2, [r3, #160]	@ 0xa0
    /* Init the low level hardware */
    HAL_LTDC_MspInit(hltdc);
 8004ad6:	6878      	ldr	r0, [r7, #4]
 8004ad8:	f7fd fbe6 	bl	80022a8 <HAL_LTDC_MspInit>
  }
#endif /* USE_HAL_LTDC_REGISTER_CALLBACKS */

  /* Change LTDC peripheral state */
  hltdc->State = HAL_LTDC_STATE_BUSY;
 8004adc:	687b      	ldr	r3, [r7, #4]
 8004ade:	2202      	movs	r2, #2
 8004ae0:	f883 20a1 	strb.w	r2, [r3, #161]	@ 0xa1

  /* Configure the HS, VS, DE and PC polarity */
  hltdc->Instance->GCR &= ~(LTDC_GCR_HSPOL | LTDC_GCR_VSPOL | LTDC_GCR_DEPOL | LTDC_GCR_PCPOL);
 8004ae4:	687b      	ldr	r3, [r7, #4]
 8004ae6:	681b      	ldr	r3, [r3, #0]
 8004ae8:	699a      	ldr	r2, [r3, #24]
 8004aea:	687b      	ldr	r3, [r7, #4]
 8004aec:	681b      	ldr	r3, [r3, #0]
 8004aee:	f022 4270 	bic.w	r2, r2, #4026531840	@ 0xf0000000
 8004af2:	619a      	str	r2, [r3, #24]
  hltdc->Instance->GCR |= (uint32_t)(hltdc->Init.HSPolarity | hltdc->Init.VSPolarity | \
 8004af4:	687b      	ldr	r3, [r7, #4]
 8004af6:	681b      	ldr	r3, [r3, #0]
 8004af8:	6999      	ldr	r1, [r3, #24]
 8004afa:	687b      	ldr	r3, [r7, #4]
 8004afc:	685a      	ldr	r2, [r3, #4]
 8004afe:	687b      	ldr	r3, [r7, #4]
 8004b00:	689b      	ldr	r3, [r3, #8]
 8004b02:	431a      	orrs	r2, r3
                                     hltdc->Init.DEPolarity | hltdc->Init.PCPolarity);
 8004b04:	687b      	ldr	r3, [r7, #4]
 8004b06:	68db      	ldr	r3, [r3, #12]
  hltdc->Instance->GCR |= (uint32_t)(hltdc->Init.HSPolarity | hltdc->Init.VSPolarity | \
 8004b08:	431a      	orrs	r2, r3
                                     hltdc->Init.DEPolarity | hltdc->Init.PCPolarity);
 8004b0a:	687b      	ldr	r3, [r7, #4]
 8004b0c:	691b      	ldr	r3, [r3, #16]
 8004b0e:	431a      	orrs	r2, r3
  hltdc->Instance->GCR |= (uint32_t)(hltdc->Init.HSPolarity | hltdc->Init.VSPolarity | \
 8004b10:	687b      	ldr	r3, [r7, #4]
 8004b12:	681b      	ldr	r3, [r3, #0]
 8004b14:	430a      	orrs	r2, r1
 8004b16:	619a      	str	r2, [r3, #24]

  /* Set Synchronization size */
  hltdc->Instance->SSCR &= ~(LTDC_SSCR_VSH | LTDC_SSCR_HSW);
 8004b18:	687b      	ldr	r3, [r7, #4]
 8004b1a:	681b      	ldr	r3, [r3, #0]
 8004b1c:	6899      	ldr	r1, [r3, #8]
 8004b1e:	687b      	ldr	r3, [r7, #4]
 8004b20:	681a      	ldr	r2, [r3, #0]
 8004b22:	4b4a      	ldr	r3, [pc, #296]	@ (8004c4c <HAL_LTDC_Init+0x19c>)
 8004b24:	400b      	ands	r3, r1
 8004b26:	6093      	str	r3, [r2, #8]
  tmp = (hltdc->Init.HorizontalSync << 16U);
 8004b28:	687b      	ldr	r3, [r7, #4]
 8004b2a:	695b      	ldr	r3, [r3, #20]
 8004b2c:	041b      	lsls	r3, r3, #16
 8004b2e:	60fb      	str	r3, [r7, #12]
  hltdc->Instance->SSCR |= (tmp | hltdc->Init.VerticalSync);
 8004b30:	687b      	ldr	r3, [r7, #4]
 8004b32:	681b      	ldr	r3, [r3, #0]
 8004b34:	6899      	ldr	r1, [r3, #8]
 8004b36:	687b      	ldr	r3, [r7, #4]
 8004b38:	699a      	ldr	r2, [r3, #24]
 8004b3a:	68fb      	ldr	r3, [r7, #12]
 8004b3c:	431a      	orrs	r2, r3
 8004b3e:	687b      	ldr	r3, [r7, #4]
 8004b40:	681b      	ldr	r3, [r3, #0]
 8004b42:	430a      	orrs	r2, r1
 8004b44:	609a      	str	r2, [r3, #8]

  /* Set Accumulated Back porch */
  hltdc->Instance->BPCR &= ~(LTDC_BPCR_AVBP | LTDC_BPCR_AHBP);
 8004b46:	687b      	ldr	r3, [r7, #4]
 8004b48:	681b      	ldr	r3, [r3, #0]
 8004b4a:	68d9      	ldr	r1, [r3, #12]
 8004b4c:	687b      	ldr	r3, [r7, #4]
 8004b4e:	681a      	ldr	r2, [r3, #0]
 8004b50:	4b3e      	ldr	r3, [pc, #248]	@ (8004c4c <HAL_LTDC_Init+0x19c>)
 8004b52:	400b      	ands	r3, r1
 8004b54:	60d3      	str	r3, [r2, #12]
  tmp = (hltdc->Init.AccumulatedHBP << 16U);
 8004b56:	687b      	ldr	r3, [r7, #4]
 8004b58:	69db      	ldr	r3, [r3, #28]
 8004b5a:	041b      	lsls	r3, r3, #16
 8004b5c:	60fb      	str	r3, [r7, #12]
  hltdc->Instance->BPCR |= (tmp | hltdc->Init.AccumulatedVBP);
 8004b5e:	687b      	ldr	r3, [r7, #4]
 8004b60:	681b      	ldr	r3, [r3, #0]
 8004b62:	68d9      	ldr	r1, [r3, #12]
 8004b64:	687b      	ldr	r3, [r7, #4]
 8004b66:	6a1a      	ldr	r2, [r3, #32]
 8004b68:	68fb      	ldr	r3, [r7, #12]
 8004b6a:	431a      	orrs	r2, r3
 8004b6c:	687b      	ldr	r3, [r7, #4]
 8004b6e:	681b      	ldr	r3, [r3, #0]
 8004b70:	430a      	orrs	r2, r1
 8004b72:	60da      	str	r2, [r3, #12]

  /* Set Accumulated Active Width */
  hltdc->Instance->AWCR &= ~(LTDC_AWCR_AAH | LTDC_AWCR_AAW);
 8004b74:	687b      	ldr	r3, [r7, #4]
 8004b76:	681b      	ldr	r3, [r3, #0]
 8004b78:	6919      	ldr	r1, [r3, #16]
 8004b7a:	687b      	ldr	r3, [r7, #4]
 8004b7c:	681a      	ldr	r2, [r3, #0]
 8004b7e:	4b33      	ldr	r3, [pc, #204]	@ (8004c4c <HAL_LTDC_Init+0x19c>)
 8004b80:	400b      	ands	r3, r1
 8004b82:	6113      	str	r3, [r2, #16]
  tmp = (hltdc->Init.AccumulatedActiveW << 16U);
 8004b84:	687b      	ldr	r3, [r7, #4]
 8004b86:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004b88:	041b      	lsls	r3, r3, #16
 8004b8a:	60fb      	str	r3, [r7, #12]
  hltdc->Instance->AWCR |= (tmp | hltdc->Init.AccumulatedActiveH);
 8004b8c:	687b      	ldr	r3, [r7, #4]
 8004b8e:	681b      	ldr	r3, [r3, #0]
 8004b90:	6919      	ldr	r1, [r3, #16]
 8004b92:	687b      	ldr	r3, [r7, #4]
 8004b94:	6a9a      	ldr	r2, [r3, #40]	@ 0x28
 8004b96:	68fb      	ldr	r3, [r7, #12]
 8004b98:	431a      	orrs	r2, r3
 8004b9a:	687b      	ldr	r3, [r7, #4]
 8004b9c:	681b      	ldr	r3, [r3, #0]
 8004b9e:	430a      	orrs	r2, r1
 8004ba0:	611a      	str	r2, [r3, #16]

  /* Set Total Width */
  hltdc->Instance->TWCR &= ~(LTDC_TWCR_TOTALH | LTDC_TWCR_TOTALW);
 8004ba2:	687b      	ldr	r3, [r7, #4]
 8004ba4:	681b      	ldr	r3, [r3, #0]
 8004ba6:	6959      	ldr	r1, [r3, #20]
 8004ba8:	687b      	ldr	r3, [r7, #4]
 8004baa:	681a      	ldr	r2, [r3, #0]
 8004bac:	4b27      	ldr	r3, [pc, #156]	@ (8004c4c <HAL_LTDC_Init+0x19c>)
 8004bae:	400b      	ands	r3, r1
 8004bb0:	6153      	str	r3, [r2, #20]
  tmp = (hltdc->Init.TotalWidth << 16U);
 8004bb2:	687b      	ldr	r3, [r7, #4]
 8004bb4:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8004bb6:	041b      	lsls	r3, r3, #16
 8004bb8:	60fb      	str	r3, [r7, #12]
  hltdc->Instance->TWCR |= (tmp | hltdc->Init.TotalHeigh);
 8004bba:	687b      	ldr	r3, [r7, #4]
 8004bbc:	681b      	ldr	r3, [r3, #0]
 8004bbe:	6959      	ldr	r1, [r3, #20]
 8004bc0:	687b      	ldr	r3, [r7, #4]
 8004bc2:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 8004bc4:	68fb      	ldr	r3, [r7, #12]
 8004bc6:	431a      	orrs	r2, r3
 8004bc8:	687b      	ldr	r3, [r7, #4]
 8004bca:	681b      	ldr	r3, [r3, #0]
 8004bcc:	430a      	orrs	r2, r1
 8004bce:	615a      	str	r2, [r3, #20]

  /* Set the background color value */
  tmp = ((uint32_t)(hltdc->Init.Backcolor.Green) << 8U);
 8004bd0:	687b      	ldr	r3, [r7, #4]
 8004bd2:	f893 3035 	ldrb.w	r3, [r3, #53]	@ 0x35
 8004bd6:	021b      	lsls	r3, r3, #8
 8004bd8:	60fb      	str	r3, [r7, #12]
  tmp1 = ((uint32_t)(hltdc->Init.Backcolor.Red) << 16U);
 8004bda:	687b      	ldr	r3, [r7, #4]
 8004bdc:	f893 3036 	ldrb.w	r3, [r3, #54]	@ 0x36
 8004be0:	041b      	lsls	r3, r3, #16
 8004be2:	60bb      	str	r3, [r7, #8]
  hltdc->Instance->BCCR &= ~(LTDC_BCCR_BCBLUE | LTDC_BCCR_BCGREEN | LTDC_BCCR_BCRED);
 8004be4:	687b      	ldr	r3, [r7, #4]
 8004be6:	681b      	ldr	r3, [r3, #0]
 8004be8:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8004bea:	687b      	ldr	r3, [r7, #4]
 8004bec:	681b      	ldr	r3, [r3, #0]
 8004bee:	f002 427f 	and.w	r2, r2, #4278190080	@ 0xff000000
 8004bf2:	62da      	str	r2, [r3, #44]	@ 0x2c
  hltdc->Instance->BCCR |= (tmp1 | tmp | hltdc->Init.Backcolor.Blue);
 8004bf4:	687b      	ldr	r3, [r7, #4]
 8004bf6:	681b      	ldr	r3, [r3, #0]
 8004bf8:	6ad9      	ldr	r1, [r3, #44]	@ 0x2c
 8004bfa:	68ba      	ldr	r2, [r7, #8]
 8004bfc:	68fb      	ldr	r3, [r7, #12]
 8004bfe:	4313      	orrs	r3, r2
 8004c00:	687a      	ldr	r2, [r7, #4]
 8004c02:	f892 2034 	ldrb.w	r2, [r2, #52]	@ 0x34
 8004c06:	431a      	orrs	r2, r3
 8004c08:	687b      	ldr	r3, [r7, #4]
 8004c0a:	681b      	ldr	r3, [r3, #0]
 8004c0c:	430a      	orrs	r2, r1
 8004c0e:	62da      	str	r2, [r3, #44]	@ 0x2c

  /* Enable the Transfer Error and FIFO underrun interrupts */
  __HAL_LTDC_ENABLE_IT(hltdc, LTDC_IT_TE | LTDC_IT_FU);
 8004c10:	687b      	ldr	r3, [r7, #4]
 8004c12:	681b      	ldr	r3, [r3, #0]
 8004c14:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 8004c16:	687b      	ldr	r3, [r7, #4]
 8004c18:	681b      	ldr	r3, [r3, #0]
 8004c1a:	f042 0206 	orr.w	r2, r2, #6
 8004c1e:	635a      	str	r2, [r3, #52]	@ 0x34

  /* Enable LTDC by setting LTDCEN bit */
  __HAL_LTDC_ENABLE(hltdc);
 8004c20:	687b      	ldr	r3, [r7, #4]
 8004c22:	681b      	ldr	r3, [r3, #0]
 8004c24:	699a      	ldr	r2, [r3, #24]
 8004c26:	687b      	ldr	r3, [r7, #4]
 8004c28:	681b      	ldr	r3, [r3, #0]
 8004c2a:	f042 0201 	orr.w	r2, r2, #1
 8004c2e:	619a      	str	r2, [r3, #24]

  /* Initialize the error code */
  hltdc->ErrorCode = HAL_LTDC_ERROR_NONE;
 8004c30:	687b      	ldr	r3, [r7, #4]
 8004c32:	2200      	movs	r2, #0
 8004c34:	f8c3 20a4 	str.w	r2, [r3, #164]	@ 0xa4

  /* Initialize the LTDC state*/
  hltdc->State = HAL_LTDC_STATE_READY;
 8004c38:	687b      	ldr	r3, [r7, #4]
 8004c3a:	2201      	movs	r2, #1
 8004c3c:	f883 20a1 	strb.w	r2, [r3, #161]	@ 0xa1

  return HAL_OK;
 8004c40:	2300      	movs	r3, #0
}
 8004c42:	4618      	mov	r0, r3
 8004c44:	3710      	adds	r7, #16
 8004c46:	46bd      	mov	sp, r7
 8004c48:	bd80      	pop	{r7, pc}
 8004c4a:	bf00      	nop
 8004c4c:	f000f800 	.word	0xf000f800

08004c50 <HAL_LTDC_ConfigLayer>:
  *                    This parameter can be one of the following values:
  *                    LTDC_LAYER_1 (0) or LTDC_LAYER_2 (1)
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_LTDC_ConfigLayer(LTDC_HandleTypeDef *hltdc, LTDC_LayerCfgTypeDef *pLayerCfg, uint32_t LayerIdx)
{
 8004c50:	b5b0      	push	{r4, r5, r7, lr}
 8004c52:	b084      	sub	sp, #16
 8004c54:	af00      	add	r7, sp, #0
 8004c56:	60f8      	str	r0, [r7, #12]
 8004c58:	60b9      	str	r1, [r7, #8]
 8004c5a:	607a      	str	r2, [r7, #4]
  assert_param(IS_LTDC_BLENDING_FACTOR2(pLayerCfg->BlendingFactor2));
  assert_param(IS_LTDC_CFBLL(pLayerCfg->ImageWidth));
  assert_param(IS_LTDC_CFBLNBR(pLayerCfg->ImageHeight));

  /* Process locked */
  __HAL_LOCK(hltdc);
 8004c5c:	68fb      	ldr	r3, [r7, #12]
 8004c5e:	f893 30a0 	ldrb.w	r3, [r3, #160]	@ 0xa0
 8004c62:	2b01      	cmp	r3, #1
 8004c64:	d101      	bne.n	8004c6a <HAL_LTDC_ConfigLayer+0x1a>
 8004c66:	2302      	movs	r3, #2
 8004c68:	e02c      	b.n	8004cc4 <HAL_LTDC_ConfigLayer+0x74>
 8004c6a:	68fb      	ldr	r3, [r7, #12]
 8004c6c:	2201      	movs	r2, #1
 8004c6e:	f883 20a0 	strb.w	r2, [r3, #160]	@ 0xa0

  /* Change LTDC peripheral state */
  hltdc->State = HAL_LTDC_STATE_BUSY;
 8004c72:	68fb      	ldr	r3, [r7, #12]
 8004c74:	2202      	movs	r2, #2
 8004c76:	f883 20a1 	strb.w	r2, [r3, #161]	@ 0xa1

  /* Copy new layer configuration into handle structure */
  hltdc->LayerCfg[LayerIdx] = *pLayerCfg;
 8004c7a:	68fa      	ldr	r2, [r7, #12]
 8004c7c:	687b      	ldr	r3, [r7, #4]
 8004c7e:	2134      	movs	r1, #52	@ 0x34
 8004c80:	fb01 f303 	mul.w	r3, r1, r3
 8004c84:	4413      	add	r3, r2
 8004c86:	f103 0238 	add.w	r2, r3, #56	@ 0x38
 8004c8a:	68bb      	ldr	r3, [r7, #8]
 8004c8c:	4614      	mov	r4, r2
 8004c8e:	461d      	mov	r5, r3
 8004c90:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8004c92:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8004c94:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8004c96:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8004c98:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8004c9a:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8004c9c:	682b      	ldr	r3, [r5, #0]
 8004c9e:	6023      	str	r3, [r4, #0]

  /* Configure the LTDC Layer */
  LTDC_SetConfig(hltdc, pLayerCfg, LayerIdx);
 8004ca0:	687a      	ldr	r2, [r7, #4]
 8004ca2:	68b9      	ldr	r1, [r7, #8]
 8004ca4:	68f8      	ldr	r0, [r7, #12]
 8004ca6:	f000 f811 	bl	8004ccc <LTDC_SetConfig>

  /* Set the Immediate Reload type */
  hltdc->Instance->SRCR = LTDC_SRCR_IMR;
 8004caa:	68fb      	ldr	r3, [r7, #12]
 8004cac:	681b      	ldr	r3, [r3, #0]
 8004cae:	2201      	movs	r2, #1
 8004cb0:	625a      	str	r2, [r3, #36]	@ 0x24

  /* Initialize the LTDC state*/
  hltdc->State  = HAL_LTDC_STATE_READY;
 8004cb2:	68fb      	ldr	r3, [r7, #12]
 8004cb4:	2201      	movs	r2, #1
 8004cb6:	f883 20a1 	strb.w	r2, [r3, #161]	@ 0xa1

  /* Process unlocked */
  __HAL_UNLOCK(hltdc);
 8004cba:	68fb      	ldr	r3, [r7, #12]
 8004cbc:	2200      	movs	r2, #0
 8004cbe:	f883 20a0 	strb.w	r2, [r3, #160]	@ 0xa0

  return HAL_OK;
 8004cc2:	2300      	movs	r3, #0
}
 8004cc4:	4618      	mov	r0, r3
 8004cc6:	3710      	adds	r7, #16
 8004cc8:	46bd      	mov	sp, r7
 8004cca:	bdb0      	pop	{r4, r5, r7, pc}

08004ccc <LTDC_SetConfig>:
  * @param  LayerIdx  LTDC Layer index.
  *                   This parameter can be one of the following values: LTDC_LAYER_1 (0) or LTDC_LAYER_2 (1)
  * @retval None
  */
static void LTDC_SetConfig(LTDC_HandleTypeDef *hltdc, LTDC_LayerCfgTypeDef *pLayerCfg, uint32_t LayerIdx)
{
 8004ccc:	b480      	push	{r7}
 8004cce:	b089      	sub	sp, #36	@ 0x24
 8004cd0:	af00      	add	r7, sp, #0
 8004cd2:	60f8      	str	r0, [r7, #12]
 8004cd4:	60b9      	str	r1, [r7, #8]
 8004cd6:	607a      	str	r2, [r7, #4]
  uint32_t tmp;
  uint32_t tmp1;
  uint32_t tmp2;

  /* Configure the horizontal start and stop position */
  tmp = ((pLayerCfg->WindowX1 + ((hltdc->Instance->BPCR & LTDC_BPCR_AHBP) >> 16U)) << 16U);
 8004cd8:	68bb      	ldr	r3, [r7, #8]
 8004cda:	685a      	ldr	r2, [r3, #4]
 8004cdc:	68fb      	ldr	r3, [r7, #12]
 8004cde:	681b      	ldr	r3, [r3, #0]
 8004ce0:	68db      	ldr	r3, [r3, #12]
 8004ce2:	0c1b      	lsrs	r3, r3, #16
 8004ce4:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8004ce8:	4413      	add	r3, r2
 8004cea:	041b      	lsls	r3, r3, #16
 8004cec:	61fb      	str	r3, [r7, #28]
  LTDC_LAYER(hltdc, LayerIdx)->WHPCR &= ~(LTDC_LxWHPCR_WHSTPOS | LTDC_LxWHPCR_WHSPPOS);
 8004cee:	68fb      	ldr	r3, [r7, #12]
 8004cf0:	681b      	ldr	r3, [r3, #0]
 8004cf2:	461a      	mov	r2, r3
 8004cf4:	687b      	ldr	r3, [r7, #4]
 8004cf6:	01db      	lsls	r3, r3, #7
 8004cf8:	4413      	add	r3, r2
 8004cfa:	3384      	adds	r3, #132	@ 0x84
 8004cfc:	685b      	ldr	r3, [r3, #4]
 8004cfe:	68fa      	ldr	r2, [r7, #12]
 8004d00:	6812      	ldr	r2, [r2, #0]
 8004d02:	4611      	mov	r1, r2
 8004d04:	687a      	ldr	r2, [r7, #4]
 8004d06:	01d2      	lsls	r2, r2, #7
 8004d08:	440a      	add	r2, r1
 8004d0a:	3284      	adds	r2, #132	@ 0x84
 8004d0c:	f403 4370 	and.w	r3, r3, #61440	@ 0xf000
 8004d10:	6053      	str	r3, [r2, #4]
  LTDC_LAYER(hltdc, LayerIdx)->WHPCR = ((pLayerCfg->WindowX0 + \
 8004d12:	68bb      	ldr	r3, [r7, #8]
 8004d14:	681a      	ldr	r2, [r3, #0]
                                         ((hltdc->Instance->BPCR & LTDC_BPCR_AHBP) >> 16U) + 1U) | tmp);
 8004d16:	68fb      	ldr	r3, [r7, #12]
 8004d18:	681b      	ldr	r3, [r3, #0]
 8004d1a:	68db      	ldr	r3, [r3, #12]
 8004d1c:	0c1b      	lsrs	r3, r3, #16
 8004d1e:	f3c3 030b 	ubfx	r3, r3, #0, #12
  LTDC_LAYER(hltdc, LayerIdx)->WHPCR = ((pLayerCfg->WindowX0 + \
 8004d22:	4413      	add	r3, r2
                                         ((hltdc->Instance->BPCR & LTDC_BPCR_AHBP) >> 16U) + 1U) | tmp);
 8004d24:	1c5a      	adds	r2, r3, #1
  LTDC_LAYER(hltdc, LayerIdx)->WHPCR = ((pLayerCfg->WindowX0 + \
 8004d26:	68fb      	ldr	r3, [r7, #12]
 8004d28:	681b      	ldr	r3, [r3, #0]
 8004d2a:	4619      	mov	r1, r3
 8004d2c:	687b      	ldr	r3, [r7, #4]
 8004d2e:	01db      	lsls	r3, r3, #7
 8004d30:	440b      	add	r3, r1
 8004d32:	3384      	adds	r3, #132	@ 0x84
 8004d34:	4619      	mov	r1, r3
                                         ((hltdc->Instance->BPCR & LTDC_BPCR_AHBP) >> 16U) + 1U) | tmp);
 8004d36:	69fb      	ldr	r3, [r7, #28]
 8004d38:	4313      	orrs	r3, r2
  LTDC_LAYER(hltdc, LayerIdx)->WHPCR = ((pLayerCfg->WindowX0 + \
 8004d3a:	604b      	str	r3, [r1, #4]

  /* Configure the vertical start and stop position */
  tmp = ((pLayerCfg->WindowY1 + (hltdc->Instance->BPCR & LTDC_BPCR_AVBP)) << 16U);
 8004d3c:	68bb      	ldr	r3, [r7, #8]
 8004d3e:	68da      	ldr	r2, [r3, #12]
 8004d40:	68fb      	ldr	r3, [r7, #12]
 8004d42:	681b      	ldr	r3, [r3, #0]
 8004d44:	68db      	ldr	r3, [r3, #12]
 8004d46:	f3c3 030a 	ubfx	r3, r3, #0, #11
 8004d4a:	4413      	add	r3, r2
 8004d4c:	041b      	lsls	r3, r3, #16
 8004d4e:	61fb      	str	r3, [r7, #28]
  LTDC_LAYER(hltdc, LayerIdx)->WVPCR &= ~(LTDC_LxWVPCR_WVSTPOS | LTDC_LxWVPCR_WVSPPOS);
 8004d50:	68fb      	ldr	r3, [r7, #12]
 8004d52:	681b      	ldr	r3, [r3, #0]
 8004d54:	461a      	mov	r2, r3
 8004d56:	687b      	ldr	r3, [r7, #4]
 8004d58:	01db      	lsls	r3, r3, #7
 8004d5a:	4413      	add	r3, r2
 8004d5c:	3384      	adds	r3, #132	@ 0x84
 8004d5e:	689b      	ldr	r3, [r3, #8]
 8004d60:	68fa      	ldr	r2, [r7, #12]
 8004d62:	6812      	ldr	r2, [r2, #0]
 8004d64:	4611      	mov	r1, r2
 8004d66:	687a      	ldr	r2, [r7, #4]
 8004d68:	01d2      	lsls	r2, r2, #7
 8004d6a:	440a      	add	r2, r1
 8004d6c:	3284      	adds	r2, #132	@ 0x84
 8004d6e:	f403 4370 	and.w	r3, r3, #61440	@ 0xf000
 8004d72:	6093      	str	r3, [r2, #8]
  LTDC_LAYER(hltdc, LayerIdx)->WVPCR  = ((pLayerCfg->WindowY0 + (hltdc->Instance->BPCR & LTDC_BPCR_AVBP) + 1U) | tmp);
 8004d74:	68bb      	ldr	r3, [r7, #8]
 8004d76:	689a      	ldr	r2, [r3, #8]
 8004d78:	68fb      	ldr	r3, [r7, #12]
 8004d7a:	681b      	ldr	r3, [r3, #0]
 8004d7c:	68db      	ldr	r3, [r3, #12]
 8004d7e:	f3c3 030a 	ubfx	r3, r3, #0, #11
 8004d82:	4413      	add	r3, r2
 8004d84:	1c5a      	adds	r2, r3, #1
 8004d86:	68fb      	ldr	r3, [r7, #12]
 8004d88:	681b      	ldr	r3, [r3, #0]
 8004d8a:	4619      	mov	r1, r3
 8004d8c:	687b      	ldr	r3, [r7, #4]
 8004d8e:	01db      	lsls	r3, r3, #7
 8004d90:	440b      	add	r3, r1
 8004d92:	3384      	adds	r3, #132	@ 0x84
 8004d94:	4619      	mov	r1, r3
 8004d96:	69fb      	ldr	r3, [r7, #28]
 8004d98:	4313      	orrs	r3, r2
 8004d9a:	608b      	str	r3, [r1, #8]

  /* Specifies the pixel format */
  LTDC_LAYER(hltdc, LayerIdx)->PFCR &= ~(LTDC_LxPFCR_PF);
 8004d9c:	68fb      	ldr	r3, [r7, #12]
 8004d9e:	681b      	ldr	r3, [r3, #0]
 8004da0:	461a      	mov	r2, r3
 8004da2:	687b      	ldr	r3, [r7, #4]
 8004da4:	01db      	lsls	r3, r3, #7
 8004da6:	4413      	add	r3, r2
 8004da8:	3384      	adds	r3, #132	@ 0x84
 8004daa:	691b      	ldr	r3, [r3, #16]
 8004dac:	68fa      	ldr	r2, [r7, #12]
 8004dae:	6812      	ldr	r2, [r2, #0]
 8004db0:	4611      	mov	r1, r2
 8004db2:	687a      	ldr	r2, [r7, #4]
 8004db4:	01d2      	lsls	r2, r2, #7
 8004db6:	440a      	add	r2, r1
 8004db8:	3284      	adds	r2, #132	@ 0x84
 8004dba:	f023 0307 	bic.w	r3, r3, #7
 8004dbe:	6113      	str	r3, [r2, #16]
  LTDC_LAYER(hltdc, LayerIdx)->PFCR = (pLayerCfg->PixelFormat);
 8004dc0:	68fb      	ldr	r3, [r7, #12]
 8004dc2:	681b      	ldr	r3, [r3, #0]
 8004dc4:	461a      	mov	r2, r3
 8004dc6:	687b      	ldr	r3, [r7, #4]
 8004dc8:	01db      	lsls	r3, r3, #7
 8004dca:	4413      	add	r3, r2
 8004dcc:	3384      	adds	r3, #132	@ 0x84
 8004dce:	461a      	mov	r2, r3
 8004dd0:	68bb      	ldr	r3, [r7, #8]
 8004dd2:	691b      	ldr	r3, [r3, #16]
 8004dd4:	6113      	str	r3, [r2, #16]

  /* Configure the default color values */
  tmp = ((uint32_t)(pLayerCfg->Backcolor.Green) << 8U);
 8004dd6:	68bb      	ldr	r3, [r7, #8]
 8004dd8:	f893 3031 	ldrb.w	r3, [r3, #49]	@ 0x31
 8004ddc:	021b      	lsls	r3, r3, #8
 8004dde:	61fb      	str	r3, [r7, #28]
  tmp1 = ((uint32_t)(pLayerCfg->Backcolor.Red) << 16U);
 8004de0:	68bb      	ldr	r3, [r7, #8]
 8004de2:	f893 3032 	ldrb.w	r3, [r3, #50]	@ 0x32
 8004de6:	041b      	lsls	r3, r3, #16
 8004de8:	61bb      	str	r3, [r7, #24]
  tmp2 = (pLayerCfg->Alpha0 << 24U);
 8004dea:	68bb      	ldr	r3, [r7, #8]
 8004dec:	699b      	ldr	r3, [r3, #24]
 8004dee:	061b      	lsls	r3, r3, #24
 8004df0:	617b      	str	r3, [r7, #20]
  LTDC_LAYER(hltdc, LayerIdx)->DCCR &= ~(LTDC_LxDCCR_DCBLUE | LTDC_LxDCCR_DCGREEN | LTDC_LxDCCR_DCRED |
 8004df2:	68fb      	ldr	r3, [r7, #12]
 8004df4:	681b      	ldr	r3, [r3, #0]
 8004df6:	461a      	mov	r2, r3
 8004df8:	687b      	ldr	r3, [r7, #4]
 8004dfa:	01db      	lsls	r3, r3, #7
 8004dfc:	4413      	add	r3, r2
 8004dfe:	3384      	adds	r3, #132	@ 0x84
 8004e00:	699b      	ldr	r3, [r3, #24]
 8004e02:	68fb      	ldr	r3, [r7, #12]
 8004e04:	681b      	ldr	r3, [r3, #0]
 8004e06:	461a      	mov	r2, r3
 8004e08:	687b      	ldr	r3, [r7, #4]
 8004e0a:	01db      	lsls	r3, r3, #7
 8004e0c:	4413      	add	r3, r2
 8004e0e:	3384      	adds	r3, #132	@ 0x84
 8004e10:	461a      	mov	r2, r3
 8004e12:	2300      	movs	r3, #0
 8004e14:	6193      	str	r3, [r2, #24]
                                         LTDC_LxDCCR_DCALPHA);
  LTDC_LAYER(hltdc, LayerIdx)->DCCR = (pLayerCfg->Backcolor.Blue | tmp | tmp1 | tmp2);
 8004e16:	68bb      	ldr	r3, [r7, #8]
 8004e18:	f893 3030 	ldrb.w	r3, [r3, #48]	@ 0x30
 8004e1c:	461a      	mov	r2, r3
 8004e1e:	69fb      	ldr	r3, [r7, #28]
 8004e20:	431a      	orrs	r2, r3
 8004e22:	69bb      	ldr	r3, [r7, #24]
 8004e24:	431a      	orrs	r2, r3
 8004e26:	68fb      	ldr	r3, [r7, #12]
 8004e28:	681b      	ldr	r3, [r3, #0]
 8004e2a:	4619      	mov	r1, r3
 8004e2c:	687b      	ldr	r3, [r7, #4]
 8004e2e:	01db      	lsls	r3, r3, #7
 8004e30:	440b      	add	r3, r1
 8004e32:	3384      	adds	r3, #132	@ 0x84
 8004e34:	4619      	mov	r1, r3
 8004e36:	697b      	ldr	r3, [r7, #20]
 8004e38:	4313      	orrs	r3, r2
 8004e3a:	618b      	str	r3, [r1, #24]

  /* Specifies the constant alpha value */
  LTDC_LAYER(hltdc, LayerIdx)->CACR &= ~(LTDC_LxCACR_CONSTA);
 8004e3c:	68fb      	ldr	r3, [r7, #12]
 8004e3e:	681b      	ldr	r3, [r3, #0]
 8004e40:	461a      	mov	r2, r3
 8004e42:	687b      	ldr	r3, [r7, #4]
 8004e44:	01db      	lsls	r3, r3, #7
 8004e46:	4413      	add	r3, r2
 8004e48:	3384      	adds	r3, #132	@ 0x84
 8004e4a:	695b      	ldr	r3, [r3, #20]
 8004e4c:	68fa      	ldr	r2, [r7, #12]
 8004e4e:	6812      	ldr	r2, [r2, #0]
 8004e50:	4611      	mov	r1, r2
 8004e52:	687a      	ldr	r2, [r7, #4]
 8004e54:	01d2      	lsls	r2, r2, #7
 8004e56:	440a      	add	r2, r1
 8004e58:	3284      	adds	r2, #132	@ 0x84
 8004e5a:	f023 03ff 	bic.w	r3, r3, #255	@ 0xff
 8004e5e:	6153      	str	r3, [r2, #20]
  LTDC_LAYER(hltdc, LayerIdx)->CACR = (pLayerCfg->Alpha);
 8004e60:	68fb      	ldr	r3, [r7, #12]
 8004e62:	681b      	ldr	r3, [r3, #0]
 8004e64:	461a      	mov	r2, r3
 8004e66:	687b      	ldr	r3, [r7, #4]
 8004e68:	01db      	lsls	r3, r3, #7
 8004e6a:	4413      	add	r3, r2
 8004e6c:	3384      	adds	r3, #132	@ 0x84
 8004e6e:	461a      	mov	r2, r3
 8004e70:	68bb      	ldr	r3, [r7, #8]
 8004e72:	695b      	ldr	r3, [r3, #20]
 8004e74:	6153      	str	r3, [r2, #20]

  /* Specifies the blending factors */
  LTDC_LAYER(hltdc, LayerIdx)->BFCR &= ~(LTDC_LxBFCR_BF2 | LTDC_LxBFCR_BF1);
 8004e76:	68fb      	ldr	r3, [r7, #12]
 8004e78:	681b      	ldr	r3, [r3, #0]
 8004e7a:	461a      	mov	r2, r3
 8004e7c:	687b      	ldr	r3, [r7, #4]
 8004e7e:	01db      	lsls	r3, r3, #7
 8004e80:	4413      	add	r3, r2
 8004e82:	3384      	adds	r3, #132	@ 0x84
 8004e84:	69db      	ldr	r3, [r3, #28]
 8004e86:	68fa      	ldr	r2, [r7, #12]
 8004e88:	6812      	ldr	r2, [r2, #0]
 8004e8a:	4611      	mov	r1, r2
 8004e8c:	687a      	ldr	r2, [r7, #4]
 8004e8e:	01d2      	lsls	r2, r2, #7
 8004e90:	440a      	add	r2, r1
 8004e92:	3284      	adds	r2, #132	@ 0x84
 8004e94:	f423 63e0 	bic.w	r3, r3, #1792	@ 0x700
 8004e98:	f023 0307 	bic.w	r3, r3, #7
 8004e9c:	61d3      	str	r3, [r2, #28]
  LTDC_LAYER(hltdc, LayerIdx)->BFCR = (pLayerCfg->BlendingFactor1 | pLayerCfg->BlendingFactor2);
 8004e9e:	68bb      	ldr	r3, [r7, #8]
 8004ea0:	69da      	ldr	r2, [r3, #28]
 8004ea2:	68bb      	ldr	r3, [r7, #8]
 8004ea4:	6a1b      	ldr	r3, [r3, #32]
 8004ea6:	68f9      	ldr	r1, [r7, #12]
 8004ea8:	6809      	ldr	r1, [r1, #0]
 8004eaa:	4608      	mov	r0, r1
 8004eac:	6879      	ldr	r1, [r7, #4]
 8004eae:	01c9      	lsls	r1, r1, #7
 8004eb0:	4401      	add	r1, r0
 8004eb2:	3184      	adds	r1, #132	@ 0x84
 8004eb4:	4313      	orrs	r3, r2
 8004eb6:	61cb      	str	r3, [r1, #28]

  /* Configure the color frame buffer start address */
  LTDC_LAYER(hltdc, LayerIdx)->CFBAR &= ~(LTDC_LxCFBAR_CFBADD);
 8004eb8:	68fb      	ldr	r3, [r7, #12]
 8004eba:	681b      	ldr	r3, [r3, #0]
 8004ebc:	461a      	mov	r2, r3
 8004ebe:	687b      	ldr	r3, [r7, #4]
 8004ec0:	01db      	lsls	r3, r3, #7
 8004ec2:	4413      	add	r3, r2
 8004ec4:	3384      	adds	r3, #132	@ 0x84
 8004ec6:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8004ec8:	68fb      	ldr	r3, [r7, #12]
 8004eca:	681b      	ldr	r3, [r3, #0]
 8004ecc:	461a      	mov	r2, r3
 8004ece:	687b      	ldr	r3, [r7, #4]
 8004ed0:	01db      	lsls	r3, r3, #7
 8004ed2:	4413      	add	r3, r2
 8004ed4:	3384      	adds	r3, #132	@ 0x84
 8004ed6:	461a      	mov	r2, r3
 8004ed8:	2300      	movs	r3, #0
 8004eda:	6293      	str	r3, [r2, #40]	@ 0x28
  LTDC_LAYER(hltdc, LayerIdx)->CFBAR = (pLayerCfg->FBStartAdress);
 8004edc:	68fb      	ldr	r3, [r7, #12]
 8004ede:	681b      	ldr	r3, [r3, #0]
 8004ee0:	461a      	mov	r2, r3
 8004ee2:	687b      	ldr	r3, [r7, #4]
 8004ee4:	01db      	lsls	r3, r3, #7
 8004ee6:	4413      	add	r3, r2
 8004ee8:	3384      	adds	r3, #132	@ 0x84
 8004eea:	461a      	mov	r2, r3
 8004eec:	68bb      	ldr	r3, [r7, #8]
 8004eee:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004ef0:	6293      	str	r3, [r2, #40]	@ 0x28

  if (pLayerCfg->PixelFormat == LTDC_PIXEL_FORMAT_ARGB8888)
 8004ef2:	68bb      	ldr	r3, [r7, #8]
 8004ef4:	691b      	ldr	r3, [r3, #16]
 8004ef6:	2b00      	cmp	r3, #0
 8004ef8:	d102      	bne.n	8004f00 <LTDC_SetConfig+0x234>
  {
    tmp = 4U;
 8004efa:	2304      	movs	r3, #4
 8004efc:	61fb      	str	r3, [r7, #28]
 8004efe:	e01b      	b.n	8004f38 <LTDC_SetConfig+0x26c>
  }
  else if (pLayerCfg->PixelFormat == LTDC_PIXEL_FORMAT_RGB888)
 8004f00:	68bb      	ldr	r3, [r7, #8]
 8004f02:	691b      	ldr	r3, [r3, #16]
 8004f04:	2b01      	cmp	r3, #1
 8004f06:	d102      	bne.n	8004f0e <LTDC_SetConfig+0x242>
  {
    tmp = 3U;
 8004f08:	2303      	movs	r3, #3
 8004f0a:	61fb      	str	r3, [r7, #28]
 8004f0c:	e014      	b.n	8004f38 <LTDC_SetConfig+0x26c>
  }
  else if ((pLayerCfg->PixelFormat == LTDC_PIXEL_FORMAT_ARGB4444) || \
 8004f0e:	68bb      	ldr	r3, [r7, #8]
 8004f10:	691b      	ldr	r3, [r3, #16]
 8004f12:	2b04      	cmp	r3, #4
 8004f14:	d00b      	beq.n	8004f2e <LTDC_SetConfig+0x262>
           (pLayerCfg->PixelFormat == LTDC_PIXEL_FORMAT_RGB565)   || \
 8004f16:	68bb      	ldr	r3, [r7, #8]
 8004f18:	691b      	ldr	r3, [r3, #16]
  else if ((pLayerCfg->PixelFormat == LTDC_PIXEL_FORMAT_ARGB4444) || \
 8004f1a:	2b02      	cmp	r3, #2
 8004f1c:	d007      	beq.n	8004f2e <LTDC_SetConfig+0x262>
           (pLayerCfg->PixelFormat == LTDC_PIXEL_FORMAT_ARGB1555) || \
 8004f1e:	68bb      	ldr	r3, [r7, #8]
 8004f20:	691b      	ldr	r3, [r3, #16]
           (pLayerCfg->PixelFormat == LTDC_PIXEL_FORMAT_RGB565)   || \
 8004f22:	2b03      	cmp	r3, #3
 8004f24:	d003      	beq.n	8004f2e <LTDC_SetConfig+0x262>
           (pLayerCfg->PixelFormat == LTDC_PIXEL_FORMAT_AL88))
 8004f26:	68bb      	ldr	r3, [r7, #8]
 8004f28:	691b      	ldr	r3, [r3, #16]
           (pLayerCfg->PixelFormat == LTDC_PIXEL_FORMAT_ARGB1555) || \
 8004f2a:	2b07      	cmp	r3, #7
 8004f2c:	d102      	bne.n	8004f34 <LTDC_SetConfig+0x268>
  {
    tmp = 2U;
 8004f2e:	2302      	movs	r3, #2
 8004f30:	61fb      	str	r3, [r7, #28]
 8004f32:	e001      	b.n	8004f38 <LTDC_SetConfig+0x26c>
  }
  else
  {
    tmp = 1U;
 8004f34:	2301      	movs	r3, #1
 8004f36:	61fb      	str	r3, [r7, #28]
  }

  /* Configure the color frame buffer pitch in byte */
  LTDC_LAYER(hltdc, LayerIdx)->CFBLR  &= ~(LTDC_LxCFBLR_CFBLL | LTDC_LxCFBLR_CFBP);
 8004f38:	68fb      	ldr	r3, [r7, #12]
 8004f3a:	681b      	ldr	r3, [r3, #0]
 8004f3c:	461a      	mov	r2, r3
 8004f3e:	687b      	ldr	r3, [r7, #4]
 8004f40:	01db      	lsls	r3, r3, #7
 8004f42:	4413      	add	r3, r2
 8004f44:	3384      	adds	r3, #132	@ 0x84
 8004f46:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8004f48:	68fa      	ldr	r2, [r7, #12]
 8004f4a:	6812      	ldr	r2, [r2, #0]
 8004f4c:	4611      	mov	r1, r2
 8004f4e:	687a      	ldr	r2, [r7, #4]
 8004f50:	01d2      	lsls	r2, r2, #7
 8004f52:	440a      	add	r2, r1
 8004f54:	3284      	adds	r2, #132	@ 0x84
 8004f56:	f003 23e0 	and.w	r3, r3, #3758153728	@ 0xe000e000
 8004f5a:	62d3      	str	r3, [r2, #44]	@ 0x2c
  LTDC_LAYER(hltdc, LayerIdx)->CFBLR  = (((pLayerCfg->ImageWidth * tmp) << 16U) | \
 8004f5c:	68bb      	ldr	r3, [r7, #8]
 8004f5e:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8004f60:	69fa      	ldr	r2, [r7, #28]
 8004f62:	fb02 f303 	mul.w	r3, r2, r3
 8004f66:	041a      	lsls	r2, r3, #16
                                         (((pLayerCfg->WindowX1 - pLayerCfg->WindowX0) * tmp)  + 3U));
 8004f68:	68bb      	ldr	r3, [r7, #8]
 8004f6a:	6859      	ldr	r1, [r3, #4]
 8004f6c:	68bb      	ldr	r3, [r7, #8]
 8004f6e:	681b      	ldr	r3, [r3, #0]
 8004f70:	1acb      	subs	r3, r1, r3
 8004f72:	69f9      	ldr	r1, [r7, #28]
 8004f74:	fb01 f303 	mul.w	r3, r1, r3
 8004f78:	3303      	adds	r3, #3
  LTDC_LAYER(hltdc, LayerIdx)->CFBLR  = (((pLayerCfg->ImageWidth * tmp) << 16U) | \
 8004f7a:	68f9      	ldr	r1, [r7, #12]
 8004f7c:	6809      	ldr	r1, [r1, #0]
 8004f7e:	4608      	mov	r0, r1
 8004f80:	6879      	ldr	r1, [r7, #4]
 8004f82:	01c9      	lsls	r1, r1, #7
 8004f84:	4401      	add	r1, r0
 8004f86:	3184      	adds	r1, #132	@ 0x84
 8004f88:	4313      	orrs	r3, r2
 8004f8a:	62cb      	str	r3, [r1, #44]	@ 0x2c
  /* Configure the frame buffer line number */
  LTDC_LAYER(hltdc, LayerIdx)->CFBLNR  &= ~(LTDC_LxCFBLNR_CFBLNBR);
 8004f8c:	68fb      	ldr	r3, [r7, #12]
 8004f8e:	681b      	ldr	r3, [r3, #0]
 8004f90:	461a      	mov	r2, r3
 8004f92:	687b      	ldr	r3, [r7, #4]
 8004f94:	01db      	lsls	r3, r3, #7
 8004f96:	4413      	add	r3, r2
 8004f98:	3384      	adds	r3, #132	@ 0x84
 8004f9a:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8004f9c:	68fa      	ldr	r2, [r7, #12]
 8004f9e:	6812      	ldr	r2, [r2, #0]
 8004fa0:	4611      	mov	r1, r2
 8004fa2:	687a      	ldr	r2, [r7, #4]
 8004fa4:	01d2      	lsls	r2, r2, #7
 8004fa6:	440a      	add	r2, r1
 8004fa8:	3284      	adds	r2, #132	@ 0x84
 8004faa:	f423 63ff 	bic.w	r3, r3, #2040	@ 0x7f8
 8004fae:	f023 0307 	bic.w	r3, r3, #7
 8004fb2:	6313      	str	r3, [r2, #48]	@ 0x30
  LTDC_LAYER(hltdc, LayerIdx)->CFBLNR  = (pLayerCfg->ImageHeight);
 8004fb4:	68fb      	ldr	r3, [r7, #12]
 8004fb6:	681b      	ldr	r3, [r3, #0]
 8004fb8:	461a      	mov	r2, r3
 8004fba:	687b      	ldr	r3, [r7, #4]
 8004fbc:	01db      	lsls	r3, r3, #7
 8004fbe:	4413      	add	r3, r2
 8004fc0:	3384      	adds	r3, #132	@ 0x84
 8004fc2:	461a      	mov	r2, r3
 8004fc4:	68bb      	ldr	r3, [r7, #8]
 8004fc6:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8004fc8:	6313      	str	r3, [r2, #48]	@ 0x30

  /* Enable LTDC_Layer by setting LEN bit */
  LTDC_LAYER(hltdc, LayerIdx)->CR |= (uint32_t)LTDC_LxCR_LEN;
 8004fca:	68fb      	ldr	r3, [r7, #12]
 8004fcc:	681b      	ldr	r3, [r3, #0]
 8004fce:	461a      	mov	r2, r3
 8004fd0:	687b      	ldr	r3, [r7, #4]
 8004fd2:	01db      	lsls	r3, r3, #7
 8004fd4:	4413      	add	r3, r2
 8004fd6:	3384      	adds	r3, #132	@ 0x84
 8004fd8:	681b      	ldr	r3, [r3, #0]
 8004fda:	68fa      	ldr	r2, [r7, #12]
 8004fdc:	6812      	ldr	r2, [r2, #0]
 8004fde:	4611      	mov	r1, r2
 8004fe0:	687a      	ldr	r2, [r7, #4]
 8004fe2:	01d2      	lsls	r2, r2, #7
 8004fe4:	440a      	add	r2, r1
 8004fe6:	3284      	adds	r2, #132	@ 0x84
 8004fe8:	f043 0301 	orr.w	r3, r3, #1
 8004fec:	6013      	str	r3, [r2, #0]
}
 8004fee:	bf00      	nop
 8004ff0:	3724      	adds	r7, #36	@ 0x24
 8004ff2:	46bd      	mov	sp, r7
 8004ff4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004ff8:	4770      	bx	lr
	...

08004ffc <HAL_RCC_OscConfig>:
  *         supported by this API. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8004ffc:	b580      	push	{r7, lr}
 8004ffe:	b086      	sub	sp, #24
 8005000:	af00      	add	r7, sp, #0
 8005002:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;
  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 8005004:	687b      	ldr	r3, [r7, #4]
 8005006:	2b00      	cmp	r3, #0
 8005008:	d101      	bne.n	800500e <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 800500a:	2301      	movs	r3, #1
 800500c:	e267      	b.n	80054de <HAL_RCC_OscConfig+0x4e2>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 800500e:	687b      	ldr	r3, [r7, #4]
 8005010:	681b      	ldr	r3, [r3, #0]
 8005012:	f003 0301 	and.w	r3, r3, #1
 8005016:	2b00      	cmp	r3, #0
 8005018:	d075      	beq.n	8005106 <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) || \
 800501a:	4b88      	ldr	r3, [pc, #544]	@ (800523c <HAL_RCC_OscConfig+0x240>)
 800501c:	689b      	ldr	r3, [r3, #8]
 800501e:	f003 030c 	and.w	r3, r3, #12
 8005022:	2b04      	cmp	r3, #4
 8005024:	d00c      	beq.n	8005040 <HAL_RCC_OscConfig+0x44>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8005026:	4b85      	ldr	r3, [pc, #532]	@ (800523c <HAL_RCC_OscConfig+0x240>)
 8005028:	689b      	ldr	r3, [r3, #8]
 800502a:	f003 030c 	and.w	r3, r3, #12
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) || \
 800502e:	2b08      	cmp	r3, #8
 8005030:	d112      	bne.n	8005058 <HAL_RCC_OscConfig+0x5c>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8005032:	4b82      	ldr	r3, [pc, #520]	@ (800523c <HAL_RCC_OscConfig+0x240>)
 8005034:	685b      	ldr	r3, [r3, #4]
 8005036:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 800503a:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 800503e:	d10b      	bne.n	8005058 <HAL_RCC_OscConfig+0x5c>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8005040:	4b7e      	ldr	r3, [pc, #504]	@ (800523c <HAL_RCC_OscConfig+0x240>)
 8005042:	681b      	ldr	r3, [r3, #0]
 8005044:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8005048:	2b00      	cmp	r3, #0
 800504a:	d05b      	beq.n	8005104 <HAL_RCC_OscConfig+0x108>
 800504c:	687b      	ldr	r3, [r7, #4]
 800504e:	685b      	ldr	r3, [r3, #4]
 8005050:	2b00      	cmp	r3, #0
 8005052:	d157      	bne.n	8005104 <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 8005054:	2301      	movs	r3, #1
 8005056:	e242      	b.n	80054de <HAL_RCC_OscConfig+0x4e2>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8005058:	687b      	ldr	r3, [r7, #4]
 800505a:	685b      	ldr	r3, [r3, #4]
 800505c:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8005060:	d106      	bne.n	8005070 <HAL_RCC_OscConfig+0x74>
 8005062:	4b76      	ldr	r3, [pc, #472]	@ (800523c <HAL_RCC_OscConfig+0x240>)
 8005064:	681b      	ldr	r3, [r3, #0]
 8005066:	4a75      	ldr	r2, [pc, #468]	@ (800523c <HAL_RCC_OscConfig+0x240>)
 8005068:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 800506c:	6013      	str	r3, [r2, #0]
 800506e:	e01d      	b.n	80050ac <HAL_RCC_OscConfig+0xb0>
 8005070:	687b      	ldr	r3, [r7, #4]
 8005072:	685b      	ldr	r3, [r3, #4]
 8005074:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 8005078:	d10c      	bne.n	8005094 <HAL_RCC_OscConfig+0x98>
 800507a:	4b70      	ldr	r3, [pc, #448]	@ (800523c <HAL_RCC_OscConfig+0x240>)
 800507c:	681b      	ldr	r3, [r3, #0]
 800507e:	4a6f      	ldr	r2, [pc, #444]	@ (800523c <HAL_RCC_OscConfig+0x240>)
 8005080:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 8005084:	6013      	str	r3, [r2, #0]
 8005086:	4b6d      	ldr	r3, [pc, #436]	@ (800523c <HAL_RCC_OscConfig+0x240>)
 8005088:	681b      	ldr	r3, [r3, #0]
 800508a:	4a6c      	ldr	r2, [pc, #432]	@ (800523c <HAL_RCC_OscConfig+0x240>)
 800508c:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8005090:	6013      	str	r3, [r2, #0]
 8005092:	e00b      	b.n	80050ac <HAL_RCC_OscConfig+0xb0>
 8005094:	4b69      	ldr	r3, [pc, #420]	@ (800523c <HAL_RCC_OscConfig+0x240>)
 8005096:	681b      	ldr	r3, [r3, #0]
 8005098:	4a68      	ldr	r2, [pc, #416]	@ (800523c <HAL_RCC_OscConfig+0x240>)
 800509a:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 800509e:	6013      	str	r3, [r2, #0]
 80050a0:	4b66      	ldr	r3, [pc, #408]	@ (800523c <HAL_RCC_OscConfig+0x240>)
 80050a2:	681b      	ldr	r3, [r3, #0]
 80050a4:	4a65      	ldr	r2, [pc, #404]	@ (800523c <HAL_RCC_OscConfig+0x240>)
 80050a6:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 80050aa:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if ((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 80050ac:	687b      	ldr	r3, [r7, #4]
 80050ae:	685b      	ldr	r3, [r3, #4]
 80050b0:	2b00      	cmp	r3, #0
 80050b2:	d013      	beq.n	80050dc <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80050b4:	f7fd ffd2 	bl	800305c <HAL_GetTick>
 80050b8:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80050ba:	e008      	b.n	80050ce <HAL_RCC_OscConfig+0xd2>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 80050bc:	f7fd ffce 	bl	800305c <HAL_GetTick>
 80050c0:	4602      	mov	r2, r0
 80050c2:	693b      	ldr	r3, [r7, #16]
 80050c4:	1ad3      	subs	r3, r2, r3
 80050c6:	2b64      	cmp	r3, #100	@ 0x64
 80050c8:	d901      	bls.n	80050ce <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 80050ca:	2303      	movs	r3, #3
 80050cc:	e207      	b.n	80054de <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80050ce:	4b5b      	ldr	r3, [pc, #364]	@ (800523c <HAL_RCC_OscConfig+0x240>)
 80050d0:	681b      	ldr	r3, [r3, #0]
 80050d2:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80050d6:	2b00      	cmp	r3, #0
 80050d8:	d0f0      	beq.n	80050bc <HAL_RCC_OscConfig+0xc0>
 80050da:	e014      	b.n	8005106 <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80050dc:	f7fd ffbe 	bl	800305c <HAL_GetTick>
 80050e0:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 80050e2:	e008      	b.n	80050f6 <HAL_RCC_OscConfig+0xfa>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 80050e4:	f7fd ffba 	bl	800305c <HAL_GetTick>
 80050e8:	4602      	mov	r2, r0
 80050ea:	693b      	ldr	r3, [r7, #16]
 80050ec:	1ad3      	subs	r3, r2, r3
 80050ee:	2b64      	cmp	r3, #100	@ 0x64
 80050f0:	d901      	bls.n	80050f6 <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 80050f2:	2303      	movs	r3, #3
 80050f4:	e1f3      	b.n	80054de <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 80050f6:	4b51      	ldr	r3, [pc, #324]	@ (800523c <HAL_RCC_OscConfig+0x240>)
 80050f8:	681b      	ldr	r3, [r3, #0]
 80050fa:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80050fe:	2b00      	cmp	r3, #0
 8005100:	d1f0      	bne.n	80050e4 <HAL_RCC_OscConfig+0xe8>
 8005102:	e000      	b.n	8005106 <HAL_RCC_OscConfig+0x10a>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8005104:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8005106:	687b      	ldr	r3, [r7, #4]
 8005108:	681b      	ldr	r3, [r3, #0]
 800510a:	f003 0302 	and.w	r3, r3, #2
 800510e:	2b00      	cmp	r3, #0
 8005110:	d063      	beq.n	80051da <HAL_RCC_OscConfig+0x1de>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) || \
 8005112:	4b4a      	ldr	r3, [pc, #296]	@ (800523c <HAL_RCC_OscConfig+0x240>)
 8005114:	689b      	ldr	r3, [r3, #8]
 8005116:	f003 030c 	and.w	r3, r3, #12
 800511a:	2b00      	cmp	r3, #0
 800511c:	d00b      	beq.n	8005136 <HAL_RCC_OscConfig+0x13a>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 800511e:	4b47      	ldr	r3, [pc, #284]	@ (800523c <HAL_RCC_OscConfig+0x240>)
 8005120:	689b      	ldr	r3, [r3, #8]
 8005122:	f003 030c 	and.w	r3, r3, #12
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) || \
 8005126:	2b08      	cmp	r3, #8
 8005128:	d11c      	bne.n	8005164 <HAL_RCC_OscConfig+0x168>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 800512a:	4b44      	ldr	r3, [pc, #272]	@ (800523c <HAL_RCC_OscConfig+0x240>)
 800512c:	685b      	ldr	r3, [r3, #4]
 800512e:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8005132:	2b00      	cmp	r3, #0
 8005134:	d116      	bne.n	8005164 <HAL_RCC_OscConfig+0x168>
    {
      /* When HSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8005136:	4b41      	ldr	r3, [pc, #260]	@ (800523c <HAL_RCC_OscConfig+0x240>)
 8005138:	681b      	ldr	r3, [r3, #0]
 800513a:	f003 0302 	and.w	r3, r3, #2
 800513e:	2b00      	cmp	r3, #0
 8005140:	d005      	beq.n	800514e <HAL_RCC_OscConfig+0x152>
 8005142:	687b      	ldr	r3, [r7, #4]
 8005144:	68db      	ldr	r3, [r3, #12]
 8005146:	2b01      	cmp	r3, #1
 8005148:	d001      	beq.n	800514e <HAL_RCC_OscConfig+0x152>
      {
        return HAL_ERROR;
 800514a:	2301      	movs	r3, #1
 800514c:	e1c7      	b.n	80054de <HAL_RCC_OscConfig+0x4e2>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800514e:	4b3b      	ldr	r3, [pc, #236]	@ (800523c <HAL_RCC_OscConfig+0x240>)
 8005150:	681b      	ldr	r3, [r3, #0]
 8005152:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 8005156:	687b      	ldr	r3, [r7, #4]
 8005158:	691b      	ldr	r3, [r3, #16]
 800515a:	00db      	lsls	r3, r3, #3
 800515c:	4937      	ldr	r1, [pc, #220]	@ (800523c <HAL_RCC_OscConfig+0x240>)
 800515e:	4313      	orrs	r3, r2
 8005160:	600b      	str	r3, [r1, #0]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8005162:	e03a      	b.n	80051da <HAL_RCC_OscConfig+0x1de>
      }
    }
    else
    {
      /* Check the HSI State */
      if ((RCC_OscInitStruct->HSIState) != RCC_HSI_OFF)
 8005164:	687b      	ldr	r3, [r7, #4]
 8005166:	68db      	ldr	r3, [r3, #12]
 8005168:	2b00      	cmp	r3, #0
 800516a:	d020      	beq.n	80051ae <HAL_RCC_OscConfig+0x1b2>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 800516c:	4b34      	ldr	r3, [pc, #208]	@ (8005240 <HAL_RCC_OscConfig+0x244>)
 800516e:	2201      	movs	r2, #1
 8005170:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8005172:	f7fd ff73 	bl	800305c <HAL_GetTick>
 8005176:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8005178:	e008      	b.n	800518c <HAL_RCC_OscConfig+0x190>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 800517a:	f7fd ff6f 	bl	800305c <HAL_GetTick>
 800517e:	4602      	mov	r2, r0
 8005180:	693b      	ldr	r3, [r7, #16]
 8005182:	1ad3      	subs	r3, r2, r3
 8005184:	2b02      	cmp	r3, #2
 8005186:	d901      	bls.n	800518c <HAL_RCC_OscConfig+0x190>
          {
            return HAL_TIMEOUT;
 8005188:	2303      	movs	r3, #3
 800518a:	e1a8      	b.n	80054de <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800518c:	4b2b      	ldr	r3, [pc, #172]	@ (800523c <HAL_RCC_OscConfig+0x240>)
 800518e:	681b      	ldr	r3, [r3, #0]
 8005190:	f003 0302 	and.w	r3, r3, #2
 8005194:	2b00      	cmp	r3, #0
 8005196:	d0f0      	beq.n	800517a <HAL_RCC_OscConfig+0x17e>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value. */
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8005198:	4b28      	ldr	r3, [pc, #160]	@ (800523c <HAL_RCC_OscConfig+0x240>)
 800519a:	681b      	ldr	r3, [r3, #0]
 800519c:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 80051a0:	687b      	ldr	r3, [r7, #4]
 80051a2:	691b      	ldr	r3, [r3, #16]
 80051a4:	00db      	lsls	r3, r3, #3
 80051a6:	4925      	ldr	r1, [pc, #148]	@ (800523c <HAL_RCC_OscConfig+0x240>)
 80051a8:	4313      	orrs	r3, r2
 80051aa:	600b      	str	r3, [r1, #0]
 80051ac:	e015      	b.n	80051da <HAL_RCC_OscConfig+0x1de>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 80051ae:	4b24      	ldr	r3, [pc, #144]	@ (8005240 <HAL_RCC_OscConfig+0x244>)
 80051b0:	2200      	movs	r2, #0
 80051b2:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80051b4:	f7fd ff52 	bl	800305c <HAL_GetTick>
 80051b8:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80051ba:	e008      	b.n	80051ce <HAL_RCC_OscConfig+0x1d2>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 80051bc:	f7fd ff4e 	bl	800305c <HAL_GetTick>
 80051c0:	4602      	mov	r2, r0
 80051c2:	693b      	ldr	r3, [r7, #16]
 80051c4:	1ad3      	subs	r3, r2, r3
 80051c6:	2b02      	cmp	r3, #2
 80051c8:	d901      	bls.n	80051ce <HAL_RCC_OscConfig+0x1d2>
          {
            return HAL_TIMEOUT;
 80051ca:	2303      	movs	r3, #3
 80051cc:	e187      	b.n	80054de <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80051ce:	4b1b      	ldr	r3, [pc, #108]	@ (800523c <HAL_RCC_OscConfig+0x240>)
 80051d0:	681b      	ldr	r3, [r3, #0]
 80051d2:	f003 0302 	and.w	r3, r3, #2
 80051d6:	2b00      	cmp	r3, #0
 80051d8:	d1f0      	bne.n	80051bc <HAL_RCC_OscConfig+0x1c0>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 80051da:	687b      	ldr	r3, [r7, #4]
 80051dc:	681b      	ldr	r3, [r3, #0]
 80051de:	f003 0308 	and.w	r3, r3, #8
 80051e2:	2b00      	cmp	r3, #0
 80051e4:	d036      	beq.n	8005254 <HAL_RCC_OscConfig+0x258>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if ((RCC_OscInitStruct->LSIState) != RCC_LSI_OFF)
 80051e6:	687b      	ldr	r3, [r7, #4]
 80051e8:	695b      	ldr	r3, [r3, #20]
 80051ea:	2b00      	cmp	r3, #0
 80051ec:	d016      	beq.n	800521c <HAL_RCC_OscConfig+0x220>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 80051ee:	4b15      	ldr	r3, [pc, #84]	@ (8005244 <HAL_RCC_OscConfig+0x248>)
 80051f0:	2201      	movs	r2, #1
 80051f2:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80051f4:	f7fd ff32 	bl	800305c <HAL_GetTick>
 80051f8:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 80051fa:	e008      	b.n	800520e <HAL_RCC_OscConfig+0x212>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 80051fc:	f7fd ff2e 	bl	800305c <HAL_GetTick>
 8005200:	4602      	mov	r2, r0
 8005202:	693b      	ldr	r3, [r7, #16]
 8005204:	1ad3      	subs	r3, r2, r3
 8005206:	2b02      	cmp	r3, #2
 8005208:	d901      	bls.n	800520e <HAL_RCC_OscConfig+0x212>
        {
          return HAL_TIMEOUT;
 800520a:	2303      	movs	r3, #3
 800520c:	e167      	b.n	80054de <HAL_RCC_OscConfig+0x4e2>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 800520e:	4b0b      	ldr	r3, [pc, #44]	@ (800523c <HAL_RCC_OscConfig+0x240>)
 8005210:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8005212:	f003 0302 	and.w	r3, r3, #2
 8005216:	2b00      	cmp	r3, #0
 8005218:	d0f0      	beq.n	80051fc <HAL_RCC_OscConfig+0x200>
 800521a:	e01b      	b.n	8005254 <HAL_RCC_OscConfig+0x258>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 800521c:	4b09      	ldr	r3, [pc, #36]	@ (8005244 <HAL_RCC_OscConfig+0x248>)
 800521e:	2200      	movs	r2, #0
 8005220:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8005222:	f7fd ff1b 	bl	800305c <HAL_GetTick>
 8005226:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8005228:	e00e      	b.n	8005248 <HAL_RCC_OscConfig+0x24c>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 800522a:	f7fd ff17 	bl	800305c <HAL_GetTick>
 800522e:	4602      	mov	r2, r0
 8005230:	693b      	ldr	r3, [r7, #16]
 8005232:	1ad3      	subs	r3, r2, r3
 8005234:	2b02      	cmp	r3, #2
 8005236:	d907      	bls.n	8005248 <HAL_RCC_OscConfig+0x24c>
        {
          return HAL_TIMEOUT;
 8005238:	2303      	movs	r3, #3
 800523a:	e150      	b.n	80054de <HAL_RCC_OscConfig+0x4e2>
 800523c:	40023800 	.word	0x40023800
 8005240:	42470000 	.word	0x42470000
 8005244:	42470e80 	.word	0x42470e80
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8005248:	4b88      	ldr	r3, [pc, #544]	@ (800546c <HAL_RCC_OscConfig+0x470>)
 800524a:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 800524c:	f003 0302 	and.w	r3, r3, #2
 8005250:	2b00      	cmp	r3, #0
 8005252:	d1ea      	bne.n	800522a <HAL_RCC_OscConfig+0x22e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8005254:	687b      	ldr	r3, [r7, #4]
 8005256:	681b      	ldr	r3, [r3, #0]
 8005258:	f003 0304 	and.w	r3, r3, #4
 800525c:	2b00      	cmp	r3, #0
 800525e:	f000 8097 	beq.w	8005390 <HAL_RCC_OscConfig+0x394>
  {
    FlagStatus       pwrclkchanged = RESET;
 8005262:	2300      	movs	r3, #0
 8005264:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 8005266:	4b81      	ldr	r3, [pc, #516]	@ (800546c <HAL_RCC_OscConfig+0x470>)
 8005268:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800526a:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 800526e:	2b00      	cmp	r3, #0
 8005270:	d10f      	bne.n	8005292 <HAL_RCC_OscConfig+0x296>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8005272:	2300      	movs	r3, #0
 8005274:	60bb      	str	r3, [r7, #8]
 8005276:	4b7d      	ldr	r3, [pc, #500]	@ (800546c <HAL_RCC_OscConfig+0x470>)
 8005278:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800527a:	4a7c      	ldr	r2, [pc, #496]	@ (800546c <HAL_RCC_OscConfig+0x470>)
 800527c:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8005280:	6413      	str	r3, [r2, #64]	@ 0x40
 8005282:	4b7a      	ldr	r3, [pc, #488]	@ (800546c <HAL_RCC_OscConfig+0x470>)
 8005284:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8005286:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 800528a:	60bb      	str	r3, [r7, #8]
 800528c:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 800528e:	2301      	movs	r3, #1
 8005290:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8005292:	4b77      	ldr	r3, [pc, #476]	@ (8005470 <HAL_RCC_OscConfig+0x474>)
 8005294:	681b      	ldr	r3, [r3, #0]
 8005296:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800529a:	2b00      	cmp	r3, #0
 800529c:	d118      	bne.n	80052d0 <HAL_RCC_OscConfig+0x2d4>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 800529e:	4b74      	ldr	r3, [pc, #464]	@ (8005470 <HAL_RCC_OscConfig+0x474>)
 80052a0:	681b      	ldr	r3, [r3, #0]
 80052a2:	4a73      	ldr	r2, [pc, #460]	@ (8005470 <HAL_RCC_OscConfig+0x474>)
 80052a4:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 80052a8:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 80052aa:	f7fd fed7 	bl	800305c <HAL_GetTick>
 80052ae:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80052b0:	e008      	b.n	80052c4 <HAL_RCC_OscConfig+0x2c8>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80052b2:	f7fd fed3 	bl	800305c <HAL_GetTick>
 80052b6:	4602      	mov	r2, r0
 80052b8:	693b      	ldr	r3, [r7, #16]
 80052ba:	1ad3      	subs	r3, r2, r3
 80052bc:	2b02      	cmp	r3, #2
 80052be:	d901      	bls.n	80052c4 <HAL_RCC_OscConfig+0x2c8>
        {
          return HAL_TIMEOUT;
 80052c0:	2303      	movs	r3, #3
 80052c2:	e10c      	b.n	80054de <HAL_RCC_OscConfig+0x4e2>
      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80052c4:	4b6a      	ldr	r3, [pc, #424]	@ (8005470 <HAL_RCC_OscConfig+0x474>)
 80052c6:	681b      	ldr	r3, [r3, #0]
 80052c8:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80052cc:	2b00      	cmp	r3, #0
 80052ce:	d0f0      	beq.n	80052b2 <HAL_RCC_OscConfig+0x2b6>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 80052d0:	687b      	ldr	r3, [r7, #4]
 80052d2:	689b      	ldr	r3, [r3, #8]
 80052d4:	2b01      	cmp	r3, #1
 80052d6:	d106      	bne.n	80052e6 <HAL_RCC_OscConfig+0x2ea>
 80052d8:	4b64      	ldr	r3, [pc, #400]	@ (800546c <HAL_RCC_OscConfig+0x470>)
 80052da:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80052dc:	4a63      	ldr	r2, [pc, #396]	@ (800546c <HAL_RCC_OscConfig+0x470>)
 80052de:	f043 0301 	orr.w	r3, r3, #1
 80052e2:	6713      	str	r3, [r2, #112]	@ 0x70
 80052e4:	e01c      	b.n	8005320 <HAL_RCC_OscConfig+0x324>
 80052e6:	687b      	ldr	r3, [r7, #4]
 80052e8:	689b      	ldr	r3, [r3, #8]
 80052ea:	2b05      	cmp	r3, #5
 80052ec:	d10c      	bne.n	8005308 <HAL_RCC_OscConfig+0x30c>
 80052ee:	4b5f      	ldr	r3, [pc, #380]	@ (800546c <HAL_RCC_OscConfig+0x470>)
 80052f0:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80052f2:	4a5e      	ldr	r2, [pc, #376]	@ (800546c <HAL_RCC_OscConfig+0x470>)
 80052f4:	f043 0304 	orr.w	r3, r3, #4
 80052f8:	6713      	str	r3, [r2, #112]	@ 0x70
 80052fa:	4b5c      	ldr	r3, [pc, #368]	@ (800546c <HAL_RCC_OscConfig+0x470>)
 80052fc:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80052fe:	4a5b      	ldr	r2, [pc, #364]	@ (800546c <HAL_RCC_OscConfig+0x470>)
 8005300:	f043 0301 	orr.w	r3, r3, #1
 8005304:	6713      	str	r3, [r2, #112]	@ 0x70
 8005306:	e00b      	b.n	8005320 <HAL_RCC_OscConfig+0x324>
 8005308:	4b58      	ldr	r3, [pc, #352]	@ (800546c <HAL_RCC_OscConfig+0x470>)
 800530a:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800530c:	4a57      	ldr	r2, [pc, #348]	@ (800546c <HAL_RCC_OscConfig+0x470>)
 800530e:	f023 0301 	bic.w	r3, r3, #1
 8005312:	6713      	str	r3, [r2, #112]	@ 0x70
 8005314:	4b55      	ldr	r3, [pc, #340]	@ (800546c <HAL_RCC_OscConfig+0x470>)
 8005316:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8005318:	4a54      	ldr	r2, [pc, #336]	@ (800546c <HAL_RCC_OscConfig+0x470>)
 800531a:	f023 0304 	bic.w	r3, r3, #4
 800531e:	6713      	str	r3, [r2, #112]	@ 0x70
    /* Check the LSE State */
    if ((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 8005320:	687b      	ldr	r3, [r7, #4]
 8005322:	689b      	ldr	r3, [r3, #8]
 8005324:	2b00      	cmp	r3, #0
 8005326:	d015      	beq.n	8005354 <HAL_RCC_OscConfig+0x358>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8005328:	f7fd fe98 	bl	800305c <HAL_GetTick>
 800532c:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 800532e:	e00a      	b.n	8005346 <HAL_RCC_OscConfig+0x34a>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8005330:	f7fd fe94 	bl	800305c <HAL_GetTick>
 8005334:	4602      	mov	r2, r0
 8005336:	693b      	ldr	r3, [r7, #16]
 8005338:	1ad3      	subs	r3, r2, r3
 800533a:	f241 3288 	movw	r2, #5000	@ 0x1388
 800533e:	4293      	cmp	r3, r2
 8005340:	d901      	bls.n	8005346 <HAL_RCC_OscConfig+0x34a>
        {
          return HAL_TIMEOUT;
 8005342:	2303      	movs	r3, #3
 8005344:	e0cb      	b.n	80054de <HAL_RCC_OscConfig+0x4e2>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8005346:	4b49      	ldr	r3, [pc, #292]	@ (800546c <HAL_RCC_OscConfig+0x470>)
 8005348:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800534a:	f003 0302 	and.w	r3, r3, #2
 800534e:	2b00      	cmp	r3, #0
 8005350:	d0ee      	beq.n	8005330 <HAL_RCC_OscConfig+0x334>
 8005352:	e014      	b.n	800537e <HAL_RCC_OscConfig+0x382>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8005354:	f7fd fe82 	bl	800305c <HAL_GetTick>
 8005358:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 800535a:	e00a      	b.n	8005372 <HAL_RCC_OscConfig+0x376>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800535c:	f7fd fe7e 	bl	800305c <HAL_GetTick>
 8005360:	4602      	mov	r2, r0
 8005362:	693b      	ldr	r3, [r7, #16]
 8005364:	1ad3      	subs	r3, r2, r3
 8005366:	f241 3288 	movw	r2, #5000	@ 0x1388
 800536a:	4293      	cmp	r3, r2
 800536c:	d901      	bls.n	8005372 <HAL_RCC_OscConfig+0x376>
        {
          return HAL_TIMEOUT;
 800536e:	2303      	movs	r3, #3
 8005370:	e0b5      	b.n	80054de <HAL_RCC_OscConfig+0x4e2>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8005372:	4b3e      	ldr	r3, [pc, #248]	@ (800546c <HAL_RCC_OscConfig+0x470>)
 8005374:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8005376:	f003 0302 	and.w	r3, r3, #2
 800537a:	2b00      	cmp	r3, #0
 800537c:	d1ee      	bne.n	800535c <HAL_RCC_OscConfig+0x360>
        }
      }
    }

    /* Restore clock configuration if changed */
    if (pwrclkchanged == SET)
 800537e:	7dfb      	ldrb	r3, [r7, #23]
 8005380:	2b01      	cmp	r3, #1
 8005382:	d105      	bne.n	8005390 <HAL_RCC_OscConfig+0x394>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8005384:	4b39      	ldr	r3, [pc, #228]	@ (800546c <HAL_RCC_OscConfig+0x470>)
 8005386:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8005388:	4a38      	ldr	r2, [pc, #224]	@ (800546c <HAL_RCC_OscConfig+0x470>)
 800538a:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 800538e:	6413      	str	r3, [r2, #64]	@ 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8005390:	687b      	ldr	r3, [r7, #4]
 8005392:	699b      	ldr	r3, [r3, #24]
 8005394:	2b00      	cmp	r3, #0
 8005396:	f000 80a1 	beq.w	80054dc <HAL_RCC_OscConfig+0x4e0>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 800539a:	4b34      	ldr	r3, [pc, #208]	@ (800546c <HAL_RCC_OscConfig+0x470>)
 800539c:	689b      	ldr	r3, [r3, #8]
 800539e:	f003 030c 	and.w	r3, r3, #12
 80053a2:	2b08      	cmp	r3, #8
 80053a4:	d05c      	beq.n	8005460 <HAL_RCC_OscConfig+0x464>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 80053a6:	687b      	ldr	r3, [r7, #4]
 80053a8:	699b      	ldr	r3, [r3, #24]
 80053aa:	2b02      	cmp	r3, #2
 80053ac:	d141      	bne.n	8005432 <HAL_RCC_OscConfig+0x436>
        assert_param(IS_RCC_PLLN_VALUE(RCC_OscInitStruct->PLL.PLLN));
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80053ae:	4b31      	ldr	r3, [pc, #196]	@ (8005474 <HAL_RCC_OscConfig+0x478>)
 80053b0:	2200      	movs	r2, #0
 80053b2:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80053b4:	f7fd fe52 	bl	800305c <HAL_GetTick>
 80053b8:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80053ba:	e008      	b.n	80053ce <HAL_RCC_OscConfig+0x3d2>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80053bc:	f7fd fe4e 	bl	800305c <HAL_GetTick>
 80053c0:	4602      	mov	r2, r0
 80053c2:	693b      	ldr	r3, [r7, #16]
 80053c4:	1ad3      	subs	r3, r2, r3
 80053c6:	2b02      	cmp	r3, #2
 80053c8:	d901      	bls.n	80053ce <HAL_RCC_OscConfig+0x3d2>
          {
            return HAL_TIMEOUT;
 80053ca:	2303      	movs	r3, #3
 80053cc:	e087      	b.n	80054de <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80053ce:	4b27      	ldr	r3, [pc, #156]	@ (800546c <HAL_RCC_OscConfig+0x470>)
 80053d0:	681b      	ldr	r3, [r3, #0]
 80053d2:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 80053d6:	2b00      	cmp	r3, #0
 80053d8:	d1f0      	bne.n	80053bc <HAL_RCC_OscConfig+0x3c0>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 80053da:	687b      	ldr	r3, [r7, #4]
 80053dc:	69da      	ldr	r2, [r3, #28]
 80053de:	687b      	ldr	r3, [r7, #4]
 80053e0:	6a1b      	ldr	r3, [r3, #32]
 80053e2:	431a      	orrs	r2, r3
 80053e4:	687b      	ldr	r3, [r7, #4]
 80053e6:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80053e8:	019b      	lsls	r3, r3, #6
 80053ea:	431a      	orrs	r2, r3
 80053ec:	687b      	ldr	r3, [r7, #4]
 80053ee:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80053f0:	085b      	lsrs	r3, r3, #1
 80053f2:	3b01      	subs	r3, #1
 80053f4:	041b      	lsls	r3, r3, #16
 80053f6:	431a      	orrs	r2, r3
 80053f8:	687b      	ldr	r3, [r7, #4]
 80053fa:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80053fc:	061b      	lsls	r3, r3, #24
 80053fe:	491b      	ldr	r1, [pc, #108]	@ (800546c <HAL_RCC_OscConfig+0x470>)
 8005400:	4313      	orrs	r3, r2
 8005402:	604b      	str	r3, [r1, #4]
                                 RCC_OscInitStruct->PLL.PLLM                                                 | \
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)             | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos) | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8005404:	4b1b      	ldr	r3, [pc, #108]	@ (8005474 <HAL_RCC_OscConfig+0x478>)
 8005406:	2201      	movs	r2, #1
 8005408:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800540a:	f7fd fe27 	bl	800305c <HAL_GetTick>
 800540e:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8005410:	e008      	b.n	8005424 <HAL_RCC_OscConfig+0x428>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8005412:	f7fd fe23 	bl	800305c <HAL_GetTick>
 8005416:	4602      	mov	r2, r0
 8005418:	693b      	ldr	r3, [r7, #16]
 800541a:	1ad3      	subs	r3, r2, r3
 800541c:	2b02      	cmp	r3, #2
 800541e:	d901      	bls.n	8005424 <HAL_RCC_OscConfig+0x428>
          {
            return HAL_TIMEOUT;
 8005420:	2303      	movs	r3, #3
 8005422:	e05c      	b.n	80054de <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8005424:	4b11      	ldr	r3, [pc, #68]	@ (800546c <HAL_RCC_OscConfig+0x470>)
 8005426:	681b      	ldr	r3, [r3, #0]
 8005428:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 800542c:	2b00      	cmp	r3, #0
 800542e:	d0f0      	beq.n	8005412 <HAL_RCC_OscConfig+0x416>
 8005430:	e054      	b.n	80054dc <HAL_RCC_OscConfig+0x4e0>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8005432:	4b10      	ldr	r3, [pc, #64]	@ (8005474 <HAL_RCC_OscConfig+0x478>)
 8005434:	2200      	movs	r2, #0
 8005436:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8005438:	f7fd fe10 	bl	800305c <HAL_GetTick>
 800543c:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800543e:	e008      	b.n	8005452 <HAL_RCC_OscConfig+0x456>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8005440:	f7fd fe0c 	bl	800305c <HAL_GetTick>
 8005444:	4602      	mov	r2, r0
 8005446:	693b      	ldr	r3, [r7, #16]
 8005448:	1ad3      	subs	r3, r2, r3
 800544a:	2b02      	cmp	r3, #2
 800544c:	d901      	bls.n	8005452 <HAL_RCC_OscConfig+0x456>
          {
            return HAL_TIMEOUT;
 800544e:	2303      	movs	r3, #3
 8005450:	e045      	b.n	80054de <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8005452:	4b06      	ldr	r3, [pc, #24]	@ (800546c <HAL_RCC_OscConfig+0x470>)
 8005454:	681b      	ldr	r3, [r3, #0]
 8005456:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 800545a:	2b00      	cmp	r3, #0
 800545c:	d1f0      	bne.n	8005440 <HAL_RCC_OscConfig+0x444>
 800545e:	e03d      	b.n	80054dc <HAL_RCC_OscConfig+0x4e0>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8005460:	687b      	ldr	r3, [r7, #4]
 8005462:	699b      	ldr	r3, [r3, #24]
 8005464:	2b01      	cmp	r3, #1
 8005466:	d107      	bne.n	8005478 <HAL_RCC_OscConfig+0x47c>
      {
        return HAL_ERROR;
 8005468:	2301      	movs	r3, #1
 800546a:	e038      	b.n	80054de <HAL_RCC_OscConfig+0x4e2>
 800546c:	40023800 	.word	0x40023800
 8005470:	40007000 	.word	0x40007000
 8005474:	42470060 	.word	0x42470060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 8005478:	4b1b      	ldr	r3, [pc, #108]	@ (80054e8 <HAL_RCC_OscConfig+0x4ec>)
 800547a:	685b      	ldr	r3, [r3, #4]
 800547c:	60fb      	str	r3, [r7, #12]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
#else
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 800547e:	687b      	ldr	r3, [r7, #4]
 8005480:	699b      	ldr	r3, [r3, #24]
 8005482:	2b01      	cmp	r3, #1
 8005484:	d028      	beq.n	80054d8 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8005486:	68fb      	ldr	r3, [r7, #12]
 8005488:	f403 0280 	and.w	r2, r3, #4194304	@ 0x400000
 800548c:	687b      	ldr	r3, [r7, #4]
 800548e:	69db      	ldr	r3, [r3, #28]
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8005490:	429a      	cmp	r2, r3
 8005492:	d121      	bne.n	80054d8 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8005494:	68fb      	ldr	r3, [r7, #12]
 8005496:	f003 023f 	and.w	r2, r3, #63	@ 0x3f
 800549a:	687b      	ldr	r3, [r7, #4]
 800549c:	6a1b      	ldr	r3, [r3, #32]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800549e:	429a      	cmp	r2, r3
 80054a0:	d11a      	bne.n	80054d8 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 80054a2:	68fa      	ldr	r2, [r7, #12]
 80054a4:	f647 73c0 	movw	r3, #32704	@ 0x7fc0
 80054a8:	4013      	ands	r3, r2
 80054aa:	687a      	ldr	r2, [r7, #4]
 80054ac:	6a52      	ldr	r2, [r2, #36]	@ 0x24
 80054ae:	0192      	lsls	r2, r2, #6
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 80054b0:	4293      	cmp	r3, r2
 80054b2:	d111      	bne.n	80054d8 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 80054b4:	68fb      	ldr	r3, [r7, #12]
 80054b6:	f403 3240 	and.w	r2, r3, #196608	@ 0x30000
 80054ba:	687b      	ldr	r3, [r7, #4]
 80054bc:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80054be:	085b      	lsrs	r3, r3, #1
 80054c0:	3b01      	subs	r3, #1
 80054c2:	041b      	lsls	r3, r3, #16
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 80054c4:	429a      	cmp	r2, r3
 80054c6:	d107      	bne.n	80054d8 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
 80054c8:	68fb      	ldr	r3, [r7, #12]
 80054ca:	f003 6270 	and.w	r2, r3, #251658240	@ 0xf000000
 80054ce:	687b      	ldr	r3, [r7, #4]
 80054d0:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80054d2:	061b      	lsls	r3, r3, #24
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 80054d4:	429a      	cmp	r2, r3
 80054d6:	d001      	beq.n	80054dc <HAL_RCC_OscConfig+0x4e0>
#endif /* RCC_PLLCFGR_PLLR */
        {
          return HAL_ERROR;
 80054d8:	2301      	movs	r3, #1
 80054da:	e000      	b.n	80054de <HAL_RCC_OscConfig+0x4e2>
        }
      }
    }
  }
  return HAL_OK;
 80054dc:	2300      	movs	r3, #0
}
 80054de:	4618      	mov	r0, r3
 80054e0:	3718      	adds	r7, #24
 80054e2:	46bd      	mov	sp, r7
 80054e4:	bd80      	pop	{r7, pc}
 80054e6:	bf00      	nop
 80054e8:	40023800 	.word	0x40023800

080054ec <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 80054ec:	b580      	push	{r7, lr}
 80054ee:	b084      	sub	sp, #16
 80054f0:	af00      	add	r7, sp, #0
 80054f2:	6078      	str	r0, [r7, #4]
 80054f4:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 80054f6:	687b      	ldr	r3, [r7, #4]
 80054f8:	2b00      	cmp	r3, #0
 80054fa:	d101      	bne.n	8005500 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 80054fc:	2301      	movs	r3, #1
 80054fe:	e0cc      	b.n	800569a <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 8005500:	4b68      	ldr	r3, [pc, #416]	@ (80056a4 <HAL_RCC_ClockConfig+0x1b8>)
 8005502:	681b      	ldr	r3, [r3, #0]
 8005504:	f003 030f 	and.w	r3, r3, #15
 8005508:	683a      	ldr	r2, [r7, #0]
 800550a:	429a      	cmp	r2, r3
 800550c:	d90c      	bls.n	8005528 <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800550e:	4b65      	ldr	r3, [pc, #404]	@ (80056a4 <HAL_RCC_ClockConfig+0x1b8>)
 8005510:	683a      	ldr	r2, [r7, #0]
 8005512:	b2d2      	uxtb	r2, r2
 8005514:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8005516:	4b63      	ldr	r3, [pc, #396]	@ (80056a4 <HAL_RCC_ClockConfig+0x1b8>)
 8005518:	681b      	ldr	r3, [r3, #0]
 800551a:	f003 030f 	and.w	r3, r3, #15
 800551e:	683a      	ldr	r2, [r7, #0]
 8005520:	429a      	cmp	r2, r3
 8005522:	d001      	beq.n	8005528 <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 8005524:	2301      	movs	r3, #1
 8005526:	e0b8      	b.n	800569a <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8005528:	687b      	ldr	r3, [r7, #4]
 800552a:	681b      	ldr	r3, [r3, #0]
 800552c:	f003 0302 	and.w	r3, r3, #2
 8005530:	2b00      	cmp	r3, #0
 8005532:	d020      	beq.n	8005576 <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8005534:	687b      	ldr	r3, [r7, #4]
 8005536:	681b      	ldr	r3, [r3, #0]
 8005538:	f003 0304 	and.w	r3, r3, #4
 800553c:	2b00      	cmp	r3, #0
 800553e:	d005      	beq.n	800554c <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8005540:	4b59      	ldr	r3, [pc, #356]	@ (80056a8 <HAL_RCC_ClockConfig+0x1bc>)
 8005542:	689b      	ldr	r3, [r3, #8]
 8005544:	4a58      	ldr	r2, [pc, #352]	@ (80056a8 <HAL_RCC_ClockConfig+0x1bc>)
 8005546:	f443 53e0 	orr.w	r3, r3, #7168	@ 0x1c00
 800554a:	6093      	str	r3, [r2, #8]
    }

    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 800554c:	687b      	ldr	r3, [r7, #4]
 800554e:	681b      	ldr	r3, [r3, #0]
 8005550:	f003 0308 	and.w	r3, r3, #8
 8005554:	2b00      	cmp	r3, #0
 8005556:	d005      	beq.n	8005564 <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8005558:	4b53      	ldr	r3, [pc, #332]	@ (80056a8 <HAL_RCC_ClockConfig+0x1bc>)
 800555a:	689b      	ldr	r3, [r3, #8]
 800555c:	4a52      	ldr	r2, [pc, #328]	@ (80056a8 <HAL_RCC_ClockConfig+0x1bc>)
 800555e:	f443 4360 	orr.w	r3, r3, #57344	@ 0xe000
 8005562:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8005564:	4b50      	ldr	r3, [pc, #320]	@ (80056a8 <HAL_RCC_ClockConfig+0x1bc>)
 8005566:	689b      	ldr	r3, [r3, #8]
 8005568:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 800556c:	687b      	ldr	r3, [r7, #4]
 800556e:	689b      	ldr	r3, [r3, #8]
 8005570:	494d      	ldr	r1, [pc, #308]	@ (80056a8 <HAL_RCC_ClockConfig+0x1bc>)
 8005572:	4313      	orrs	r3, r2
 8005574:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8005576:	687b      	ldr	r3, [r7, #4]
 8005578:	681b      	ldr	r3, [r3, #0]
 800557a:	f003 0301 	and.w	r3, r3, #1
 800557e:	2b00      	cmp	r3, #0
 8005580:	d044      	beq.n	800560c <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8005582:	687b      	ldr	r3, [r7, #4]
 8005584:	685b      	ldr	r3, [r3, #4]
 8005586:	2b01      	cmp	r3, #1
 8005588:	d107      	bne.n	800559a <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800558a:	4b47      	ldr	r3, [pc, #284]	@ (80056a8 <HAL_RCC_ClockConfig+0x1bc>)
 800558c:	681b      	ldr	r3, [r3, #0]
 800558e:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8005592:	2b00      	cmp	r3, #0
 8005594:	d119      	bne.n	80055ca <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8005596:	2301      	movs	r3, #1
 8005598:	e07f      	b.n	800569a <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if ((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 800559a:	687b      	ldr	r3, [r7, #4]
 800559c:	685b      	ldr	r3, [r3, #4]
 800559e:	2b02      	cmp	r3, #2
 80055a0:	d003      	beq.n	80055aa <HAL_RCC_ClockConfig+0xbe>
             (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 80055a2:	687b      	ldr	r3, [r7, #4]
 80055a4:	685b      	ldr	r3, [r3, #4]
    else if ((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 80055a6:	2b03      	cmp	r3, #3
 80055a8:	d107      	bne.n	80055ba <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80055aa:	4b3f      	ldr	r3, [pc, #252]	@ (80056a8 <HAL_RCC_ClockConfig+0x1bc>)
 80055ac:	681b      	ldr	r3, [r3, #0]
 80055ae:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 80055b2:	2b00      	cmp	r3, #0
 80055b4:	d109      	bne.n	80055ca <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80055b6:	2301      	movs	r3, #1
 80055b8:	e06f      	b.n	800569a <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80055ba:	4b3b      	ldr	r3, [pc, #236]	@ (80056a8 <HAL_RCC_ClockConfig+0x1bc>)
 80055bc:	681b      	ldr	r3, [r3, #0]
 80055be:	f003 0302 	and.w	r3, r3, #2
 80055c2:	2b00      	cmp	r3, #0
 80055c4:	d101      	bne.n	80055ca <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80055c6:	2301      	movs	r3, #1
 80055c8:	e067      	b.n	800569a <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 80055ca:	4b37      	ldr	r3, [pc, #220]	@ (80056a8 <HAL_RCC_ClockConfig+0x1bc>)
 80055cc:	689b      	ldr	r3, [r3, #8]
 80055ce:	f023 0203 	bic.w	r2, r3, #3
 80055d2:	687b      	ldr	r3, [r7, #4]
 80055d4:	685b      	ldr	r3, [r3, #4]
 80055d6:	4934      	ldr	r1, [pc, #208]	@ (80056a8 <HAL_RCC_ClockConfig+0x1bc>)
 80055d8:	4313      	orrs	r3, r2
 80055da:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 80055dc:	f7fd fd3e 	bl	800305c <HAL_GetTick>
 80055e0:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80055e2:	e00a      	b.n	80055fa <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 80055e4:	f7fd fd3a 	bl	800305c <HAL_GetTick>
 80055e8:	4602      	mov	r2, r0
 80055ea:	68fb      	ldr	r3, [r7, #12]
 80055ec:	1ad3      	subs	r3, r2, r3
 80055ee:	f241 3288 	movw	r2, #5000	@ 0x1388
 80055f2:	4293      	cmp	r3, r2
 80055f4:	d901      	bls.n	80055fa <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 80055f6:	2303      	movs	r3, #3
 80055f8:	e04f      	b.n	800569a <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80055fa:	4b2b      	ldr	r3, [pc, #172]	@ (80056a8 <HAL_RCC_ClockConfig+0x1bc>)
 80055fc:	689b      	ldr	r3, [r3, #8]
 80055fe:	f003 020c 	and.w	r2, r3, #12
 8005602:	687b      	ldr	r3, [r7, #4]
 8005604:	685b      	ldr	r3, [r3, #4]
 8005606:	009b      	lsls	r3, r3, #2
 8005608:	429a      	cmp	r2, r3
 800560a:	d1eb      	bne.n	80055e4 <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 800560c:	4b25      	ldr	r3, [pc, #148]	@ (80056a4 <HAL_RCC_ClockConfig+0x1b8>)
 800560e:	681b      	ldr	r3, [r3, #0]
 8005610:	f003 030f 	and.w	r3, r3, #15
 8005614:	683a      	ldr	r2, [r7, #0]
 8005616:	429a      	cmp	r2, r3
 8005618:	d20c      	bcs.n	8005634 <HAL_RCC_ClockConfig+0x148>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800561a:	4b22      	ldr	r3, [pc, #136]	@ (80056a4 <HAL_RCC_ClockConfig+0x1b8>)
 800561c:	683a      	ldr	r2, [r7, #0]
 800561e:	b2d2      	uxtb	r2, r2
 8005620:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8005622:	4b20      	ldr	r3, [pc, #128]	@ (80056a4 <HAL_RCC_ClockConfig+0x1b8>)
 8005624:	681b      	ldr	r3, [r3, #0]
 8005626:	f003 030f 	and.w	r3, r3, #15
 800562a:	683a      	ldr	r2, [r7, #0]
 800562c:	429a      	cmp	r2, r3
 800562e:	d001      	beq.n	8005634 <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 8005630:	2301      	movs	r3, #1
 8005632:	e032      	b.n	800569a <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8005634:	687b      	ldr	r3, [r7, #4]
 8005636:	681b      	ldr	r3, [r3, #0]
 8005638:	f003 0304 	and.w	r3, r3, #4
 800563c:	2b00      	cmp	r3, #0
 800563e:	d008      	beq.n	8005652 <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8005640:	4b19      	ldr	r3, [pc, #100]	@ (80056a8 <HAL_RCC_ClockConfig+0x1bc>)
 8005642:	689b      	ldr	r3, [r3, #8]
 8005644:	f423 52e0 	bic.w	r2, r3, #7168	@ 0x1c00
 8005648:	687b      	ldr	r3, [r7, #4]
 800564a:	68db      	ldr	r3, [r3, #12]
 800564c:	4916      	ldr	r1, [pc, #88]	@ (80056a8 <HAL_RCC_ClockConfig+0x1bc>)
 800564e:	4313      	orrs	r3, r2
 8005650:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8005652:	687b      	ldr	r3, [r7, #4]
 8005654:	681b      	ldr	r3, [r3, #0]
 8005656:	f003 0308 	and.w	r3, r3, #8
 800565a:	2b00      	cmp	r3, #0
 800565c:	d009      	beq.n	8005672 <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 800565e:	4b12      	ldr	r3, [pc, #72]	@ (80056a8 <HAL_RCC_ClockConfig+0x1bc>)
 8005660:	689b      	ldr	r3, [r3, #8]
 8005662:	f423 4260 	bic.w	r2, r3, #57344	@ 0xe000
 8005666:	687b      	ldr	r3, [r7, #4]
 8005668:	691b      	ldr	r3, [r3, #16]
 800566a:	00db      	lsls	r3, r3, #3
 800566c:	490e      	ldr	r1, [pc, #56]	@ (80056a8 <HAL_RCC_ClockConfig+0x1bc>)
 800566e:	4313      	orrs	r3, r2
 8005670:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 8005672:	f000 f821 	bl	80056b8 <HAL_RCC_GetSysClockFreq>
 8005676:	4602      	mov	r2, r0
 8005678:	4b0b      	ldr	r3, [pc, #44]	@ (80056a8 <HAL_RCC_ClockConfig+0x1bc>)
 800567a:	689b      	ldr	r3, [r3, #8]
 800567c:	091b      	lsrs	r3, r3, #4
 800567e:	f003 030f 	and.w	r3, r3, #15
 8005682:	490a      	ldr	r1, [pc, #40]	@ (80056ac <HAL_RCC_ClockConfig+0x1c0>)
 8005684:	5ccb      	ldrb	r3, [r1, r3]
 8005686:	fa22 f303 	lsr.w	r3, r2, r3
 800568a:	4a09      	ldr	r2, [pc, #36]	@ (80056b0 <HAL_RCC_ClockConfig+0x1c4>)
 800568c:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick(uwTickPrio);
 800568e:	4b09      	ldr	r3, [pc, #36]	@ (80056b4 <HAL_RCC_ClockConfig+0x1c8>)
 8005690:	681b      	ldr	r3, [r3, #0]
 8005692:	4618      	mov	r0, r3
 8005694:	f7fd fc9e 	bl	8002fd4 <HAL_InitTick>

  return HAL_OK;
 8005698:	2300      	movs	r3, #0
}
 800569a:	4618      	mov	r0, r3
 800569c:	3710      	adds	r7, #16
 800569e:	46bd      	mov	sp, r7
 80056a0:	bd80      	pop	{r7, pc}
 80056a2:	bf00      	nop
 80056a4:	40023c00 	.word	0x40023c00
 80056a8:	40023800 	.word	0x40023800
 80056ac:	080086e8 	.word	0x080086e8
 80056b0:	20000018 	.word	0x20000018
 80056b4:	2000001c 	.word	0x2000001c

080056b8 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
__weak uint32_t HAL_RCC_GetSysClockFreq(void)
{
 80056b8:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 80056bc:	b094      	sub	sp, #80	@ 0x50
 80056be:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U;
 80056c0:	2300      	movs	r3, #0
 80056c2:	647b      	str	r3, [r7, #68]	@ 0x44
  uint32_t pllvco = 0U;
 80056c4:	2300      	movs	r3, #0
 80056c6:	64fb      	str	r3, [r7, #76]	@ 0x4c
  uint32_t pllp = 0U;
 80056c8:	2300      	movs	r3, #0
 80056ca:	643b      	str	r3, [r7, #64]	@ 0x40
  uint32_t sysclockfreq = 0U;
 80056cc:	2300      	movs	r3, #0
 80056ce:	64bb      	str	r3, [r7, #72]	@ 0x48

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 80056d0:	4b79      	ldr	r3, [pc, #484]	@ (80058b8 <HAL_RCC_GetSysClockFreq+0x200>)
 80056d2:	689b      	ldr	r3, [r3, #8]
 80056d4:	f003 030c 	and.w	r3, r3, #12
 80056d8:	2b08      	cmp	r3, #8
 80056da:	d00d      	beq.n	80056f8 <HAL_RCC_GetSysClockFreq+0x40>
 80056dc:	2b08      	cmp	r3, #8
 80056de:	f200 80e1 	bhi.w	80058a4 <HAL_RCC_GetSysClockFreq+0x1ec>
 80056e2:	2b00      	cmp	r3, #0
 80056e4:	d002      	beq.n	80056ec <HAL_RCC_GetSysClockFreq+0x34>
 80056e6:	2b04      	cmp	r3, #4
 80056e8:	d003      	beq.n	80056f2 <HAL_RCC_GetSysClockFreq+0x3a>
 80056ea:	e0db      	b.n	80058a4 <HAL_RCC_GetSysClockFreq+0x1ec>
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 80056ec:	4b73      	ldr	r3, [pc, #460]	@ (80058bc <HAL_RCC_GetSysClockFreq+0x204>)
 80056ee:	64bb      	str	r3, [r7, #72]	@ 0x48
      break;
 80056f0:	e0db      	b.n	80058aa <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 80056f2:	4b73      	ldr	r3, [pc, #460]	@ (80058c0 <HAL_RCC_GetSysClockFreq+0x208>)
 80056f4:	64bb      	str	r3, [r7, #72]	@ 0x48
      break;
 80056f6:	e0d8      	b.n	80058aa <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 80056f8:	4b6f      	ldr	r3, [pc, #444]	@ (80058b8 <HAL_RCC_GetSysClockFreq+0x200>)
 80056fa:	685b      	ldr	r3, [r3, #4]
 80056fc:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 8005700:	647b      	str	r3, [r7, #68]	@ 0x44
      if (__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 8005702:	4b6d      	ldr	r3, [pc, #436]	@ (80058b8 <HAL_RCC_GetSysClockFreq+0x200>)
 8005704:	685b      	ldr	r3, [r3, #4]
 8005706:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 800570a:	2b00      	cmp	r3, #0
 800570c:	d063      	beq.n	80057d6 <HAL_RCC_GetSysClockFreq+0x11e>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t)((((uint64_t) HSE_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 800570e:	4b6a      	ldr	r3, [pc, #424]	@ (80058b8 <HAL_RCC_GetSysClockFreq+0x200>)
 8005710:	685b      	ldr	r3, [r3, #4]
 8005712:	099b      	lsrs	r3, r3, #6
 8005714:	2200      	movs	r2, #0
 8005716:	63bb      	str	r3, [r7, #56]	@ 0x38
 8005718:	63fa      	str	r2, [r7, #60]	@ 0x3c
 800571a:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800571c:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8005720:	633b      	str	r3, [r7, #48]	@ 0x30
 8005722:	2300      	movs	r3, #0
 8005724:	637b      	str	r3, [r7, #52]	@ 0x34
 8005726:	e9d7 450c 	ldrd	r4, r5, [r7, #48]	@ 0x30
 800572a:	4622      	mov	r2, r4
 800572c:	462b      	mov	r3, r5
 800572e:	f04f 0000 	mov.w	r0, #0
 8005732:	f04f 0100 	mov.w	r1, #0
 8005736:	0159      	lsls	r1, r3, #5
 8005738:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 800573c:	0150      	lsls	r0, r2, #5
 800573e:	4602      	mov	r2, r0
 8005740:	460b      	mov	r3, r1
 8005742:	4621      	mov	r1, r4
 8005744:	1a51      	subs	r1, r2, r1
 8005746:	6139      	str	r1, [r7, #16]
 8005748:	4629      	mov	r1, r5
 800574a:	eb63 0301 	sbc.w	r3, r3, r1
 800574e:	617b      	str	r3, [r7, #20]
 8005750:	f04f 0200 	mov.w	r2, #0
 8005754:	f04f 0300 	mov.w	r3, #0
 8005758:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 800575c:	4659      	mov	r1, fp
 800575e:	018b      	lsls	r3, r1, #6
 8005760:	4651      	mov	r1, sl
 8005762:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 8005766:	4651      	mov	r1, sl
 8005768:	018a      	lsls	r2, r1, #6
 800576a:	4651      	mov	r1, sl
 800576c:	ebb2 0801 	subs.w	r8, r2, r1
 8005770:	4659      	mov	r1, fp
 8005772:	eb63 0901 	sbc.w	r9, r3, r1
 8005776:	f04f 0200 	mov.w	r2, #0
 800577a:	f04f 0300 	mov.w	r3, #0
 800577e:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 8005782:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 8005786:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 800578a:	4690      	mov	r8, r2
 800578c:	4699      	mov	r9, r3
 800578e:	4623      	mov	r3, r4
 8005790:	eb18 0303 	adds.w	r3, r8, r3
 8005794:	60bb      	str	r3, [r7, #8]
 8005796:	462b      	mov	r3, r5
 8005798:	eb49 0303 	adc.w	r3, r9, r3
 800579c:	60fb      	str	r3, [r7, #12]
 800579e:	f04f 0200 	mov.w	r2, #0
 80057a2:	f04f 0300 	mov.w	r3, #0
 80057a6:	e9d7 4502 	ldrd	r4, r5, [r7, #8]
 80057aa:	4629      	mov	r1, r5
 80057ac:	024b      	lsls	r3, r1, #9
 80057ae:	4621      	mov	r1, r4
 80057b0:	ea43 53d1 	orr.w	r3, r3, r1, lsr #23
 80057b4:	4621      	mov	r1, r4
 80057b6:	024a      	lsls	r2, r1, #9
 80057b8:	4610      	mov	r0, r2
 80057ba:	4619      	mov	r1, r3
 80057bc:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 80057be:	2200      	movs	r2, #0
 80057c0:	62bb      	str	r3, [r7, #40]	@ 0x28
 80057c2:	62fa      	str	r2, [r7, #44]	@ 0x2c
 80057c4:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	@ 0x28
 80057c8:	f7fa fd62 	bl	8000290 <__aeabi_uldivmod>
 80057cc:	4602      	mov	r2, r0
 80057ce:	460b      	mov	r3, r1
 80057d0:	4613      	mov	r3, r2
 80057d2:	64fb      	str	r3, [r7, #76]	@ 0x4c
 80057d4:	e058      	b.n	8005888 <HAL_RCC_GetSysClockFreq+0x1d0>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t)((((uint64_t) HSI_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 80057d6:	4b38      	ldr	r3, [pc, #224]	@ (80058b8 <HAL_RCC_GetSysClockFreq+0x200>)
 80057d8:	685b      	ldr	r3, [r3, #4]
 80057da:	099b      	lsrs	r3, r3, #6
 80057dc:	2200      	movs	r2, #0
 80057de:	4618      	mov	r0, r3
 80057e0:	4611      	mov	r1, r2
 80057e2:	f3c0 0308 	ubfx	r3, r0, #0, #9
 80057e6:	623b      	str	r3, [r7, #32]
 80057e8:	2300      	movs	r3, #0
 80057ea:	627b      	str	r3, [r7, #36]	@ 0x24
 80057ec:	e9d7 8908 	ldrd	r8, r9, [r7, #32]
 80057f0:	4642      	mov	r2, r8
 80057f2:	464b      	mov	r3, r9
 80057f4:	f04f 0000 	mov.w	r0, #0
 80057f8:	f04f 0100 	mov.w	r1, #0
 80057fc:	0159      	lsls	r1, r3, #5
 80057fe:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8005802:	0150      	lsls	r0, r2, #5
 8005804:	4602      	mov	r2, r0
 8005806:	460b      	mov	r3, r1
 8005808:	4641      	mov	r1, r8
 800580a:	ebb2 0a01 	subs.w	sl, r2, r1
 800580e:	4649      	mov	r1, r9
 8005810:	eb63 0b01 	sbc.w	fp, r3, r1
 8005814:	f04f 0200 	mov.w	r2, #0
 8005818:	f04f 0300 	mov.w	r3, #0
 800581c:	ea4f 138b 	mov.w	r3, fp, lsl #6
 8005820:	ea43 639a 	orr.w	r3, r3, sl, lsr #26
 8005824:	ea4f 128a 	mov.w	r2, sl, lsl #6
 8005828:	ebb2 040a 	subs.w	r4, r2, sl
 800582c:	eb63 050b 	sbc.w	r5, r3, fp
 8005830:	f04f 0200 	mov.w	r2, #0
 8005834:	f04f 0300 	mov.w	r3, #0
 8005838:	00eb      	lsls	r3, r5, #3
 800583a:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 800583e:	00e2      	lsls	r2, r4, #3
 8005840:	4614      	mov	r4, r2
 8005842:	461d      	mov	r5, r3
 8005844:	4643      	mov	r3, r8
 8005846:	18e3      	adds	r3, r4, r3
 8005848:	603b      	str	r3, [r7, #0]
 800584a:	464b      	mov	r3, r9
 800584c:	eb45 0303 	adc.w	r3, r5, r3
 8005850:	607b      	str	r3, [r7, #4]
 8005852:	f04f 0200 	mov.w	r2, #0
 8005856:	f04f 0300 	mov.w	r3, #0
 800585a:	e9d7 4500 	ldrd	r4, r5, [r7]
 800585e:	4629      	mov	r1, r5
 8005860:	028b      	lsls	r3, r1, #10
 8005862:	4621      	mov	r1, r4
 8005864:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 8005868:	4621      	mov	r1, r4
 800586a:	028a      	lsls	r2, r1, #10
 800586c:	4610      	mov	r0, r2
 800586e:	4619      	mov	r1, r3
 8005870:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8005872:	2200      	movs	r2, #0
 8005874:	61bb      	str	r3, [r7, #24]
 8005876:	61fa      	str	r2, [r7, #28]
 8005878:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 800587c:	f7fa fd08 	bl	8000290 <__aeabi_uldivmod>
 8005880:	4602      	mov	r2, r0
 8005882:	460b      	mov	r3, r1
 8005884:	4613      	mov	r3, r2
 8005886:	64fb      	str	r3, [r7, #76]	@ 0x4c
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) * 2U);
 8005888:	4b0b      	ldr	r3, [pc, #44]	@ (80058b8 <HAL_RCC_GetSysClockFreq+0x200>)
 800588a:	685b      	ldr	r3, [r3, #4]
 800588c:	0c1b      	lsrs	r3, r3, #16
 800588e:	f003 0303 	and.w	r3, r3, #3
 8005892:	3301      	adds	r3, #1
 8005894:	005b      	lsls	r3, r3, #1
 8005896:	643b      	str	r3, [r7, #64]	@ 0x40

      sysclockfreq = pllvco / pllp;
 8005898:	6cfa      	ldr	r2, [r7, #76]	@ 0x4c
 800589a:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 800589c:	fbb2 f3f3 	udiv	r3, r2, r3
 80058a0:	64bb      	str	r3, [r7, #72]	@ 0x48
      break;
 80058a2:	e002      	b.n	80058aa <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 80058a4:	4b05      	ldr	r3, [pc, #20]	@ (80058bc <HAL_RCC_GetSysClockFreq+0x204>)
 80058a6:	64bb      	str	r3, [r7, #72]	@ 0x48
      break;
 80058a8:	bf00      	nop
    }
  }
  return sysclockfreq;
 80058aa:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
}
 80058ac:	4618      	mov	r0, r3
 80058ae:	3750      	adds	r7, #80	@ 0x50
 80058b0:	46bd      	mov	sp, r7
 80058b2:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 80058b6:	bf00      	nop
 80058b8:	40023800 	.word	0x40023800
 80058bc:	00f42400 	.word	0x00f42400
 80058c0:	007a1200 	.word	0x007a1200

080058c4 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 80058c4:	b480      	push	{r7}
 80058c6:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 80058c8:	4b03      	ldr	r3, [pc, #12]	@ (80058d8 <HAL_RCC_GetHCLKFreq+0x14>)
 80058ca:	681b      	ldr	r3, [r3, #0]
}
 80058cc:	4618      	mov	r0, r3
 80058ce:	46bd      	mov	sp, r7
 80058d0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80058d4:	4770      	bx	lr
 80058d6:	bf00      	nop
 80058d8:	20000018 	.word	0x20000018

080058dc <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 80058dc:	b580      	push	{r7, lr}
 80058de:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos]);
 80058e0:	f7ff fff0 	bl	80058c4 <HAL_RCC_GetHCLKFreq>
 80058e4:	4602      	mov	r2, r0
 80058e6:	4b05      	ldr	r3, [pc, #20]	@ (80058fc <HAL_RCC_GetPCLK1Freq+0x20>)
 80058e8:	689b      	ldr	r3, [r3, #8]
 80058ea:	0a9b      	lsrs	r3, r3, #10
 80058ec:	f003 0307 	and.w	r3, r3, #7
 80058f0:	4903      	ldr	r1, [pc, #12]	@ (8005900 <HAL_RCC_GetPCLK1Freq+0x24>)
 80058f2:	5ccb      	ldrb	r3, [r1, r3]
 80058f4:	fa22 f303 	lsr.w	r3, r2, r3
}
 80058f8:	4618      	mov	r0, r3
 80058fa:	bd80      	pop	{r7, pc}
 80058fc:	40023800 	.word	0x40023800
 8005900:	080086f8 	.word	0x080086f8

08005904 <HAL_RCCEx_PeriphCLKConfig>:
  *         the backup registers) and RCC_BDCR register are set to their reset values.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8005904:	b580      	push	{r7, lr}
 8005906:	b086      	sub	sp, #24
 8005908:	af00      	add	r7, sp, #0
 800590a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 800590c:	2300      	movs	r3, #0
 800590e:	617b      	str	r3, [r7, #20]
  uint32_t tmpreg1 = 0U;
 8005910:	2300      	movs	r3, #0
 8005912:	613b      	str	r3, [r7, #16]

  /*----------------------- SAI/I2S Configuration (PLLI2S) -------------------*/
  /*----------------------- Common configuration SAI/I2S ---------------------*/
  /* In Case of SAI or I2S Clock Configuration through PLLI2S, PLLI2SN division
     factor is common parameters for both peripherals */
  if ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == RCC_PERIPHCLK_I2S) ||
 8005914:	687b      	ldr	r3, [r7, #4]
 8005916:	681b      	ldr	r3, [r3, #0]
 8005918:	f003 0301 	and.w	r3, r3, #1
 800591c:	2b00      	cmp	r3, #0
 800591e:	d10b      	bne.n	8005938 <HAL_RCCEx_PeriphCLKConfig+0x34>
      (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI_PLLI2S) == RCC_PERIPHCLK_SAI_PLLI2S) ||
 8005920:	687b      	ldr	r3, [r7, #4]
 8005922:	681b      	ldr	r3, [r3, #0]
 8005924:	f003 0302 	and.w	r3, r3, #2
  if ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == RCC_PERIPHCLK_I2S) ||
 8005928:	2b00      	cmp	r3, #0
 800592a:	d105      	bne.n	8005938 <HAL_RCCEx_PeriphCLKConfig+0x34>
      (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLLI2S) == RCC_PERIPHCLK_PLLI2S))
 800592c:	687b      	ldr	r3, [r7, #4]
 800592e:	681b      	ldr	r3, [r3, #0]
 8005930:	f003 0340 	and.w	r3, r3, #64	@ 0x40
      (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI_PLLI2S) == RCC_PERIPHCLK_SAI_PLLI2S) ||
 8005934:	2b00      	cmp	r3, #0
 8005936:	d075      	beq.n	8005a24 <HAL_RCCEx_PeriphCLKConfig+0x120>
  {
    /* check for Parameters */
    assert_param(IS_RCC_PLLI2SN_VALUE(PeriphClkInit->PLLI2S.PLLI2SN));

    /* Disable the PLLI2S */
    __HAL_RCC_PLLI2S_DISABLE();
 8005938:	4b91      	ldr	r3, [pc, #580]	@ (8005b80 <HAL_RCCEx_PeriphCLKConfig+0x27c>)
 800593a:	2200      	movs	r2, #0
 800593c:	601a      	str	r2, [r3, #0]
    /* Get tick */
    tickstart = HAL_GetTick();
 800593e:	f7fd fb8d 	bl	800305c <HAL_GetTick>
 8005942:	6178      	str	r0, [r7, #20]
    /* Wait till PLLI2S is disabled */
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  != RESET)
 8005944:	e008      	b.n	8005958 <HAL_RCCEx_PeriphCLKConfig+0x54>
    {
      if ((HAL_GetTick() - tickstart) > PLLI2S_TIMEOUT_VALUE)
 8005946:	f7fd fb89 	bl	800305c <HAL_GetTick>
 800594a:	4602      	mov	r2, r0
 800594c:	697b      	ldr	r3, [r7, #20]
 800594e:	1ad3      	subs	r3, r2, r3
 8005950:	2b02      	cmp	r3, #2
 8005952:	d901      	bls.n	8005958 <HAL_RCCEx_PeriphCLKConfig+0x54>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 8005954:	2303      	movs	r3, #3
 8005956:	e189      	b.n	8005c6c <HAL_RCCEx_PeriphCLKConfig+0x368>
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  != RESET)
 8005958:	4b8a      	ldr	r3, [pc, #552]	@ (8005b84 <HAL_RCCEx_PeriphCLKConfig+0x280>)
 800595a:	681b      	ldr	r3, [r3, #0]
 800595c:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 8005960:	2b00      	cmp	r3, #0
 8005962:	d1f0      	bne.n	8005946 <HAL_RCCEx_PeriphCLKConfig+0x42>
    }

    /*---------------------------- I2S configuration -------------------------*/
    /* In Case of I2S Clock Configuration through PLLI2S, PLLI2SR must be added
      only for I2S configuration */
    if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == (RCC_PERIPHCLK_I2S))
 8005964:	687b      	ldr	r3, [r7, #4]
 8005966:	681b      	ldr	r3, [r3, #0]
 8005968:	f003 0301 	and.w	r3, r3, #1
 800596c:	2b00      	cmp	r3, #0
 800596e:	d009      	beq.n	8005984 <HAL_RCCEx_PeriphCLKConfig+0x80>
      /* check for Parameters */
      assert_param(IS_RCC_PLLI2SR_VALUE(PeriphClkInit->PLLI2S.PLLI2SR));
      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO = f(VCO clock) = f(PLLI2S clock input) * (PLLI2SN/PLLM) */
      /* I2SCLK = f(PLLI2S clock output) = f(VCO clock) / PLLI2SR */
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN, PeriphClkInit->PLLI2S.PLLI2SR);
 8005970:	687b      	ldr	r3, [r7, #4]
 8005972:	685b      	ldr	r3, [r3, #4]
 8005974:	019a      	lsls	r2, r3, #6
 8005976:	687b      	ldr	r3, [r7, #4]
 8005978:	689b      	ldr	r3, [r3, #8]
 800597a:	071b      	lsls	r3, r3, #28
 800597c:	4981      	ldr	r1, [pc, #516]	@ (8005b84 <HAL_RCCEx_PeriphCLKConfig+0x280>)
 800597e:	4313      	orrs	r3, r2
 8005980:	f8c1 3084 	str.w	r3, [r1, #132]	@ 0x84
    }

    /*---------------------------- SAI configuration -------------------------*/
    /* In Case of SAI Clock Configuration through PLLI2S, PLLI2SQ and PLLI2S_DIVQ must
       be added only for SAI configuration */
    if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI_PLLI2S) == (RCC_PERIPHCLK_SAI_PLLI2S))
 8005984:	687b      	ldr	r3, [r7, #4]
 8005986:	681b      	ldr	r3, [r3, #0]
 8005988:	f003 0302 	and.w	r3, r3, #2
 800598c:	2b00      	cmp	r3, #0
 800598e:	d01f      	beq.n	80059d0 <HAL_RCCEx_PeriphCLKConfig+0xcc>
      /* Check the PLLI2S division factors */
      assert_param(IS_RCC_PLLI2SQ_VALUE(PeriphClkInit->PLLI2S.PLLI2SQ));
      assert_param(IS_RCC_PLLI2S_DIVQ_VALUE(PeriphClkInit->PLLI2SDivQ));

      /* Read PLLI2SR value from PLLI2SCFGR register (this value is not need for SAI configuration) */
      tmpreg1 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SR) >> RCC_PLLI2SCFGR_PLLI2SR_Pos);
 8005990:	4b7c      	ldr	r3, [pc, #496]	@ (8005b84 <HAL_RCCEx_PeriphCLKConfig+0x280>)
 8005992:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 8005996:	0f1b      	lsrs	r3, r3, #28
 8005998:	f003 0307 	and.w	r3, r3, #7
 800599c:	613b      	str	r3, [r7, #16]
      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO Input  = PLL_SOURCE/PLLM */
      /* PLLI2S_VCO Output = PLLI2S_VCO Input * PLLI2SN */
      /* SAI_CLK(first level) = PLLI2S_VCO Output/PLLI2SQ */
      __HAL_RCC_PLLI2S_SAICLK_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN, PeriphClkInit->PLLI2S.PLLI2SQ, tmpreg1);
 800599e:	687b      	ldr	r3, [r7, #4]
 80059a0:	685b      	ldr	r3, [r3, #4]
 80059a2:	019a      	lsls	r2, r3, #6
 80059a4:	687b      	ldr	r3, [r7, #4]
 80059a6:	68db      	ldr	r3, [r3, #12]
 80059a8:	061b      	lsls	r3, r3, #24
 80059aa:	431a      	orrs	r2, r3
 80059ac:	693b      	ldr	r3, [r7, #16]
 80059ae:	071b      	lsls	r3, r3, #28
 80059b0:	4974      	ldr	r1, [pc, #464]	@ (8005b84 <HAL_RCCEx_PeriphCLKConfig+0x280>)
 80059b2:	4313      	orrs	r3, r2
 80059b4:	f8c1 3084 	str.w	r3, [r1, #132]	@ 0x84
      /* SAI_CLK_x = SAI_CLK(first level)/PLLI2SDIVQ */
      __HAL_RCC_PLLI2S_PLLSAICLKDIVQ_CONFIG(PeriphClkInit->PLLI2SDivQ);
 80059b8:	4b72      	ldr	r3, [pc, #456]	@ (8005b84 <HAL_RCCEx_PeriphCLKConfig+0x280>)
 80059ba:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 80059be:	f023 021f 	bic.w	r2, r3, #31
 80059c2:	687b      	ldr	r3, [r7, #4]
 80059c4:	69db      	ldr	r3, [r3, #28]
 80059c6:	3b01      	subs	r3, #1
 80059c8:	496e      	ldr	r1, [pc, #440]	@ (8005b84 <HAL_RCCEx_PeriphCLKConfig+0x280>)
 80059ca:	4313      	orrs	r3, r2
 80059cc:	f8c1 308c 	str.w	r3, [r1, #140]	@ 0x8c
    }

    /*----------------- In Case of PLLI2S is just selected  -----------------*/
    if ((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_PLLI2S) == RCC_PERIPHCLK_PLLI2S)
 80059d0:	687b      	ldr	r3, [r7, #4]
 80059d2:	681b      	ldr	r3, [r3, #0]
 80059d4:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80059d8:	2b00      	cmp	r3, #0
 80059da:	d00d      	beq.n	80059f8 <HAL_RCCEx_PeriphCLKConfig+0xf4>
      /* Check for Parameters */
      assert_param(IS_RCC_PLLI2SQ_VALUE(PeriphClkInit->PLLI2S.PLLI2SQ));
      assert_param(IS_RCC_PLLI2SR_VALUE(PeriphClkInit->PLLI2S.PLLI2SR));

      /* Configure the PLLI2S multiplication and division factors */
      __HAL_RCC_PLLI2S_SAICLK_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN, PeriphClkInit->PLLI2S.PLLI2SQ,
 80059dc:	687b      	ldr	r3, [r7, #4]
 80059de:	685b      	ldr	r3, [r3, #4]
 80059e0:	019a      	lsls	r2, r3, #6
 80059e2:	687b      	ldr	r3, [r7, #4]
 80059e4:	68db      	ldr	r3, [r3, #12]
 80059e6:	061b      	lsls	r3, r3, #24
 80059e8:	431a      	orrs	r2, r3
 80059ea:	687b      	ldr	r3, [r7, #4]
 80059ec:	689b      	ldr	r3, [r3, #8]
 80059ee:	071b      	lsls	r3, r3, #28
 80059f0:	4964      	ldr	r1, [pc, #400]	@ (8005b84 <HAL_RCCEx_PeriphCLKConfig+0x280>)
 80059f2:	4313      	orrs	r3, r2
 80059f4:	f8c1 3084 	str.w	r3, [r1, #132]	@ 0x84
                                     PeriphClkInit->PLLI2S.PLLI2SR);
    }

    /* Enable the PLLI2S */
    __HAL_RCC_PLLI2S_ENABLE();
 80059f8:	4b61      	ldr	r3, [pc, #388]	@ (8005b80 <HAL_RCCEx_PeriphCLKConfig+0x27c>)
 80059fa:	2201      	movs	r2, #1
 80059fc:	601a      	str	r2, [r3, #0]
    /* Get tick */
    tickstart = HAL_GetTick();
 80059fe:	f7fd fb2d 	bl	800305c <HAL_GetTick>
 8005a02:	6178      	str	r0, [r7, #20]
    /* Wait till PLLI2S is ready */
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  == RESET)
 8005a04:	e008      	b.n	8005a18 <HAL_RCCEx_PeriphCLKConfig+0x114>
    {
      if ((HAL_GetTick() - tickstart) > PLLI2S_TIMEOUT_VALUE)
 8005a06:	f7fd fb29 	bl	800305c <HAL_GetTick>
 8005a0a:	4602      	mov	r2, r0
 8005a0c:	697b      	ldr	r3, [r7, #20]
 8005a0e:	1ad3      	subs	r3, r2, r3
 8005a10:	2b02      	cmp	r3, #2
 8005a12:	d901      	bls.n	8005a18 <HAL_RCCEx_PeriphCLKConfig+0x114>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 8005a14:	2303      	movs	r3, #3
 8005a16:	e129      	b.n	8005c6c <HAL_RCCEx_PeriphCLKConfig+0x368>
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  == RESET)
 8005a18:	4b5a      	ldr	r3, [pc, #360]	@ (8005b84 <HAL_RCCEx_PeriphCLKConfig+0x280>)
 8005a1a:	681b      	ldr	r3, [r3, #0]
 8005a1c:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 8005a20:	2b00      	cmp	r3, #0
 8005a22:	d0f0      	beq.n	8005a06 <HAL_RCCEx_PeriphCLKConfig+0x102>

  /*----------------------- SAI/LTDC Configuration (PLLSAI) ------------------*/
  /*----------------------- Common configuration SAI/LTDC --------------------*/
  /* In Case of SAI or LTDC Clock Configuration through PLLSAI, PLLSAIN division
     factor is common parameters for both peripherals */
  if ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI_PLLSAI) == RCC_PERIPHCLK_SAI_PLLSAI) ||
 8005a24:	687b      	ldr	r3, [r7, #4]
 8005a26:	681b      	ldr	r3, [r3, #0]
 8005a28:	f003 0304 	and.w	r3, r3, #4
 8005a2c:	2b00      	cmp	r3, #0
 8005a2e:	d105      	bne.n	8005a3c <HAL_RCCEx_PeriphCLKConfig+0x138>
      (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LTDC) == RCC_PERIPHCLK_LTDC))
 8005a30:	687b      	ldr	r3, [r7, #4]
 8005a32:	681b      	ldr	r3, [r3, #0]
 8005a34:	f003 0308 	and.w	r3, r3, #8
  if ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI_PLLSAI) == RCC_PERIPHCLK_SAI_PLLSAI) ||
 8005a38:	2b00      	cmp	r3, #0
 8005a3a:	d079      	beq.n	8005b30 <HAL_RCCEx_PeriphCLKConfig+0x22c>
  {
    /* Check the PLLSAI division factors */
    assert_param(IS_RCC_PLLSAIN_VALUE(PeriphClkInit->PLLSAI.PLLSAIN));

    /* Disable PLLSAI Clock */
    __HAL_RCC_PLLSAI_DISABLE();
 8005a3c:	4b52      	ldr	r3, [pc, #328]	@ (8005b88 <HAL_RCCEx_PeriphCLKConfig+0x284>)
 8005a3e:	2200      	movs	r2, #0
 8005a40:	601a      	str	r2, [r3, #0]
    /* Get tick */
    tickstart = HAL_GetTick();
 8005a42:	f7fd fb0b 	bl	800305c <HAL_GetTick>
 8005a46:	6178      	str	r0, [r7, #20]
    /* Wait till PLLSAI is disabled */
    while (__HAL_RCC_PLLSAI_GET_FLAG() != RESET)
 8005a48:	e008      	b.n	8005a5c <HAL_RCCEx_PeriphCLKConfig+0x158>
    {
      if ((HAL_GetTick() - tickstart) > PLLSAI_TIMEOUT_VALUE)
 8005a4a:	f7fd fb07 	bl	800305c <HAL_GetTick>
 8005a4e:	4602      	mov	r2, r0
 8005a50:	697b      	ldr	r3, [r7, #20]
 8005a52:	1ad3      	subs	r3, r2, r3
 8005a54:	2b02      	cmp	r3, #2
 8005a56:	d901      	bls.n	8005a5c <HAL_RCCEx_PeriphCLKConfig+0x158>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 8005a58:	2303      	movs	r3, #3
 8005a5a:	e107      	b.n	8005c6c <HAL_RCCEx_PeriphCLKConfig+0x368>
    while (__HAL_RCC_PLLSAI_GET_FLAG() != RESET)
 8005a5c:	4b49      	ldr	r3, [pc, #292]	@ (8005b84 <HAL_RCCEx_PeriphCLKConfig+0x280>)
 8005a5e:	681b      	ldr	r3, [r3, #0]
 8005a60:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 8005a64:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 8005a68:	d0ef      	beq.n	8005a4a <HAL_RCCEx_PeriphCLKConfig+0x146>
    }

    /*---------------------------- SAI configuration -------------------------*/
    /* In Case of SAI Clock Configuration through PLLSAI, PLLSAIQ and PLLSAI_DIVQ must
       be added only for SAI configuration */
    if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI_PLLSAI) == (RCC_PERIPHCLK_SAI_PLLSAI))
 8005a6a:	687b      	ldr	r3, [r7, #4]
 8005a6c:	681b      	ldr	r3, [r3, #0]
 8005a6e:	f003 0304 	and.w	r3, r3, #4
 8005a72:	2b00      	cmp	r3, #0
 8005a74:	d020      	beq.n	8005ab8 <HAL_RCCEx_PeriphCLKConfig+0x1b4>
    {
      assert_param(IS_RCC_PLLSAIQ_VALUE(PeriphClkInit->PLLSAI.PLLSAIQ));
      assert_param(IS_RCC_PLLSAI_DIVQ_VALUE(PeriphClkInit->PLLSAIDivQ));

      /* Read PLLSAIR value from PLLSAICFGR register (this value is not need for SAI configuration) */
      tmpreg1 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIR) >> RCC_PLLSAICFGR_PLLSAIR_Pos);
 8005a76:	4b43      	ldr	r3, [pc, #268]	@ (8005b84 <HAL_RCCEx_PeriphCLKConfig+0x280>)
 8005a78:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8005a7c:	0f1b      	lsrs	r3, r3, #28
 8005a7e:	f003 0307 	and.w	r3, r3, #7
 8005a82:	613b      	str	r3, [r7, #16]
      /* PLLSAI_VCO Input  = PLL_SOURCE/PLLM */
      /* PLLSAI_VCO Output = PLLSAI_VCO Input * PLLSAIN */
      /* SAI_CLK(first level) = PLLSAI_VCO Output/PLLSAIQ */
      __HAL_RCC_PLLSAI_CONFIG(PeriphClkInit->PLLSAI.PLLSAIN, PeriphClkInit->PLLSAI.PLLSAIQ, tmpreg1);
 8005a84:	687b      	ldr	r3, [r7, #4]
 8005a86:	691b      	ldr	r3, [r3, #16]
 8005a88:	019a      	lsls	r2, r3, #6
 8005a8a:	687b      	ldr	r3, [r7, #4]
 8005a8c:	695b      	ldr	r3, [r3, #20]
 8005a8e:	061b      	lsls	r3, r3, #24
 8005a90:	431a      	orrs	r2, r3
 8005a92:	693b      	ldr	r3, [r7, #16]
 8005a94:	071b      	lsls	r3, r3, #28
 8005a96:	493b      	ldr	r1, [pc, #236]	@ (8005b84 <HAL_RCCEx_PeriphCLKConfig+0x280>)
 8005a98:	4313      	orrs	r3, r2
 8005a9a:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
      /* SAI_CLK_x = SAI_CLK(first level)/PLLSAIDIVQ */
      __HAL_RCC_PLLSAI_PLLSAICLKDIVQ_CONFIG(PeriphClkInit->PLLSAIDivQ);
 8005a9e:	4b39      	ldr	r3, [pc, #228]	@ (8005b84 <HAL_RCCEx_PeriphCLKConfig+0x280>)
 8005aa0:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 8005aa4:	f423 52f8 	bic.w	r2, r3, #7936	@ 0x1f00
 8005aa8:	687b      	ldr	r3, [r7, #4]
 8005aaa:	6a1b      	ldr	r3, [r3, #32]
 8005aac:	3b01      	subs	r3, #1
 8005aae:	021b      	lsls	r3, r3, #8
 8005ab0:	4934      	ldr	r1, [pc, #208]	@ (8005b84 <HAL_RCCEx_PeriphCLKConfig+0x280>)
 8005ab2:	4313      	orrs	r3, r2
 8005ab4:	f8c1 308c 	str.w	r3, [r1, #140]	@ 0x8c
    }

    /*---------------------------- LTDC configuration ------------------------*/
    if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LTDC) == (RCC_PERIPHCLK_LTDC))
 8005ab8:	687b      	ldr	r3, [r7, #4]
 8005aba:	681b      	ldr	r3, [r3, #0]
 8005abc:	f003 0308 	and.w	r3, r3, #8
 8005ac0:	2b00      	cmp	r3, #0
 8005ac2:	d01e      	beq.n	8005b02 <HAL_RCCEx_PeriphCLKConfig+0x1fe>
    {
      assert_param(IS_RCC_PLLSAIR_VALUE(PeriphClkInit->PLLSAI.PLLSAIR));
      assert_param(IS_RCC_PLLSAI_DIVR_VALUE(PeriphClkInit->PLLSAIDivR));

      /* Read PLLSAIR value from PLLSAICFGR register (this value is not need for SAI configuration) */
      tmpreg1 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIQ) >> RCC_PLLSAICFGR_PLLSAIQ_Pos);
 8005ac4:	4b2f      	ldr	r3, [pc, #188]	@ (8005b84 <HAL_RCCEx_PeriphCLKConfig+0x280>)
 8005ac6:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8005aca:	0e1b      	lsrs	r3, r3, #24
 8005acc:	f003 030f 	and.w	r3, r3, #15
 8005ad0:	613b      	str	r3, [r7, #16]
      /* PLLSAI_VCO Input  = PLL_SOURCE/PLLM */
      /* PLLSAI_VCO Output = PLLSAI_VCO Input * PLLSAIN */
      /* LTDC_CLK(first level) = PLLSAI_VCO Output/PLLSAIR */
      __HAL_RCC_PLLSAI_CONFIG(PeriphClkInit->PLLSAI.PLLSAIN, tmpreg1, PeriphClkInit->PLLSAI.PLLSAIR);
 8005ad2:	687b      	ldr	r3, [r7, #4]
 8005ad4:	691b      	ldr	r3, [r3, #16]
 8005ad6:	019a      	lsls	r2, r3, #6
 8005ad8:	693b      	ldr	r3, [r7, #16]
 8005ada:	061b      	lsls	r3, r3, #24
 8005adc:	431a      	orrs	r2, r3
 8005ade:	687b      	ldr	r3, [r7, #4]
 8005ae0:	699b      	ldr	r3, [r3, #24]
 8005ae2:	071b      	lsls	r3, r3, #28
 8005ae4:	4927      	ldr	r1, [pc, #156]	@ (8005b84 <HAL_RCCEx_PeriphCLKConfig+0x280>)
 8005ae6:	4313      	orrs	r3, r2
 8005ae8:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
      /* LTDC_CLK = LTDC_CLK(first level)/PLLSAIDIVR */
      __HAL_RCC_PLLSAI_PLLSAICLKDIVR_CONFIG(PeriphClkInit->PLLSAIDivR);
 8005aec:	4b25      	ldr	r3, [pc, #148]	@ (8005b84 <HAL_RCCEx_PeriphCLKConfig+0x280>)
 8005aee:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 8005af2:	f423 3240 	bic.w	r2, r3, #196608	@ 0x30000
 8005af6:	687b      	ldr	r3, [r7, #4]
 8005af8:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8005afa:	4922      	ldr	r1, [pc, #136]	@ (8005b84 <HAL_RCCEx_PeriphCLKConfig+0x280>)
 8005afc:	4313      	orrs	r3, r2
 8005afe:	f8c1 308c 	str.w	r3, [r1, #140]	@ 0x8c
    }
    /* Enable PLLSAI Clock */
    __HAL_RCC_PLLSAI_ENABLE();
 8005b02:	4b21      	ldr	r3, [pc, #132]	@ (8005b88 <HAL_RCCEx_PeriphCLKConfig+0x284>)
 8005b04:	2201      	movs	r2, #1
 8005b06:	601a      	str	r2, [r3, #0]
    /* Get tick */
    tickstart = HAL_GetTick();
 8005b08:	f7fd faa8 	bl	800305c <HAL_GetTick>
 8005b0c:	6178      	str	r0, [r7, #20]
    /* Wait till PLLSAI is ready */
    while (__HAL_RCC_PLLSAI_GET_FLAG() == RESET)
 8005b0e:	e008      	b.n	8005b22 <HAL_RCCEx_PeriphCLKConfig+0x21e>
    {
      if ((HAL_GetTick() - tickstart) > PLLSAI_TIMEOUT_VALUE)
 8005b10:	f7fd faa4 	bl	800305c <HAL_GetTick>
 8005b14:	4602      	mov	r2, r0
 8005b16:	697b      	ldr	r3, [r7, #20]
 8005b18:	1ad3      	subs	r3, r2, r3
 8005b1a:	2b02      	cmp	r3, #2
 8005b1c:	d901      	bls.n	8005b22 <HAL_RCCEx_PeriphCLKConfig+0x21e>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 8005b1e:	2303      	movs	r3, #3
 8005b20:	e0a4      	b.n	8005c6c <HAL_RCCEx_PeriphCLKConfig+0x368>
    while (__HAL_RCC_PLLSAI_GET_FLAG() == RESET)
 8005b22:	4b18      	ldr	r3, [pc, #96]	@ (8005b84 <HAL_RCCEx_PeriphCLKConfig+0x280>)
 8005b24:	681b      	ldr	r3, [r3, #0]
 8005b26:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 8005b2a:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 8005b2e:	d1ef      	bne.n	8005b10 <HAL_RCCEx_PeriphCLKConfig+0x20c>
    }
  }
  /*--------------------------------------------------------------------------*/

  /*---------------------------- RTC configuration ---------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == (RCC_PERIPHCLK_RTC))
 8005b30:	687b      	ldr	r3, [r7, #4]
 8005b32:	681b      	ldr	r3, [r3, #0]
 8005b34:	f003 0320 	and.w	r3, r3, #32
 8005b38:	2b00      	cmp	r3, #0
 8005b3a:	f000 808b 	beq.w	8005c54 <HAL_RCCEx_PeriphCLKConfig+0x350>
  {
    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable Power Clock*/
    __HAL_RCC_PWR_CLK_ENABLE();
 8005b3e:	2300      	movs	r3, #0
 8005b40:	60fb      	str	r3, [r7, #12]
 8005b42:	4b10      	ldr	r3, [pc, #64]	@ (8005b84 <HAL_RCCEx_PeriphCLKConfig+0x280>)
 8005b44:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8005b46:	4a0f      	ldr	r2, [pc, #60]	@ (8005b84 <HAL_RCCEx_PeriphCLKConfig+0x280>)
 8005b48:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8005b4c:	6413      	str	r3, [r2, #64]	@ 0x40
 8005b4e:	4b0d      	ldr	r3, [pc, #52]	@ (8005b84 <HAL_RCCEx_PeriphCLKConfig+0x280>)
 8005b50:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8005b52:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8005b56:	60fb      	str	r3, [r7, #12]
 8005b58:	68fb      	ldr	r3, [r7, #12]

    /* Enable write access to Backup domain */
    PWR->CR |= PWR_CR_DBP;
 8005b5a:	4b0c      	ldr	r3, [pc, #48]	@ (8005b8c <HAL_RCCEx_PeriphCLKConfig+0x288>)
 8005b5c:	681b      	ldr	r3, [r3, #0]
 8005b5e:	4a0b      	ldr	r2, [pc, #44]	@ (8005b8c <HAL_RCCEx_PeriphCLKConfig+0x288>)
 8005b60:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8005b64:	6013      	str	r3, [r2, #0]

    /* Get tick */
    tickstart = HAL_GetTick();
 8005b66:	f7fd fa79 	bl	800305c <HAL_GetTick>
 8005b6a:	6178      	str	r0, [r7, #20]

    while ((PWR->CR & PWR_CR_DBP) == RESET)
 8005b6c:	e010      	b.n	8005b90 <HAL_RCCEx_PeriphCLKConfig+0x28c>
    {
      if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8005b6e:	f7fd fa75 	bl	800305c <HAL_GetTick>
 8005b72:	4602      	mov	r2, r0
 8005b74:	697b      	ldr	r3, [r7, #20]
 8005b76:	1ad3      	subs	r3, r2, r3
 8005b78:	2b02      	cmp	r3, #2
 8005b7a:	d909      	bls.n	8005b90 <HAL_RCCEx_PeriphCLKConfig+0x28c>
      {
        return HAL_TIMEOUT;
 8005b7c:	2303      	movs	r3, #3
 8005b7e:	e075      	b.n	8005c6c <HAL_RCCEx_PeriphCLKConfig+0x368>
 8005b80:	42470068 	.word	0x42470068
 8005b84:	40023800 	.word	0x40023800
 8005b88:	42470070 	.word	0x42470070
 8005b8c:	40007000 	.word	0x40007000
    while ((PWR->CR & PWR_CR_DBP) == RESET)
 8005b90:	4b38      	ldr	r3, [pc, #224]	@ (8005c74 <HAL_RCCEx_PeriphCLKConfig+0x370>)
 8005b92:	681b      	ldr	r3, [r3, #0]
 8005b94:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8005b98:	2b00      	cmp	r3, #0
 8005b9a:	d0e8      	beq.n	8005b6e <HAL_RCCEx_PeriphCLKConfig+0x26a>
      }
    }
    /* Reset the Backup domain only if the RTC Clock source selection is modified from reset value */
    tmpreg1 = (RCC->BDCR & RCC_BDCR_RTCSEL);
 8005b9c:	4b36      	ldr	r3, [pc, #216]	@ (8005c78 <HAL_RCCEx_PeriphCLKConfig+0x374>)
 8005b9e:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8005ba0:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8005ba4:	613b      	str	r3, [r7, #16]
    if ((tmpreg1 != 0x00000000U) && ((tmpreg1) != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL)))
 8005ba6:	693b      	ldr	r3, [r7, #16]
 8005ba8:	2b00      	cmp	r3, #0
 8005baa:	d02f      	beq.n	8005c0c <HAL_RCCEx_PeriphCLKConfig+0x308>
 8005bac:	687b      	ldr	r3, [r7, #4]
 8005bae:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8005bb0:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8005bb4:	693a      	ldr	r2, [r7, #16]
 8005bb6:	429a      	cmp	r2, r3
 8005bb8:	d028      	beq.n	8005c0c <HAL_RCCEx_PeriphCLKConfig+0x308>
    {
      /* Store the content of BDCR register before the reset of Backup Domain */
      tmpreg1 = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 8005bba:	4b2f      	ldr	r3, [pc, #188]	@ (8005c78 <HAL_RCCEx_PeriphCLKConfig+0x374>)
 8005bbc:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8005bbe:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8005bc2:	613b      	str	r3, [r7, #16]
      /* RTC Clock selection can be changed only if the Backup Domain is reset */
      __HAL_RCC_BACKUPRESET_FORCE();
 8005bc4:	4b2d      	ldr	r3, [pc, #180]	@ (8005c7c <HAL_RCCEx_PeriphCLKConfig+0x378>)
 8005bc6:	2201      	movs	r2, #1
 8005bc8:	601a      	str	r2, [r3, #0]
      __HAL_RCC_BACKUPRESET_RELEASE();
 8005bca:	4b2c      	ldr	r3, [pc, #176]	@ (8005c7c <HAL_RCCEx_PeriphCLKConfig+0x378>)
 8005bcc:	2200      	movs	r2, #0
 8005bce:	601a      	str	r2, [r3, #0]
      /* Restore the Content of BDCR register */
      RCC->BDCR = tmpreg1;
 8005bd0:	4a29      	ldr	r2, [pc, #164]	@ (8005c78 <HAL_RCCEx_PeriphCLKConfig+0x374>)
 8005bd2:	693b      	ldr	r3, [r7, #16]
 8005bd4:	6713      	str	r3, [r2, #112]	@ 0x70

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if (HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSEON))
 8005bd6:	4b28      	ldr	r3, [pc, #160]	@ (8005c78 <HAL_RCCEx_PeriphCLKConfig+0x374>)
 8005bd8:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8005bda:	f003 0301 	and.w	r3, r3, #1
 8005bde:	2b01      	cmp	r3, #1
 8005be0:	d114      	bne.n	8005c0c <HAL_RCCEx_PeriphCLKConfig+0x308>
      {
        /* Get tick */
        tickstart = HAL_GetTick();
 8005be2:	f7fd fa3b 	bl	800305c <HAL_GetTick>
 8005be6:	6178      	str	r0, [r7, #20]

        /* Wait till LSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8005be8:	e00a      	b.n	8005c00 <HAL_RCCEx_PeriphCLKConfig+0x2fc>
        {
          if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8005bea:	f7fd fa37 	bl	800305c <HAL_GetTick>
 8005bee:	4602      	mov	r2, r0
 8005bf0:	697b      	ldr	r3, [r7, #20]
 8005bf2:	1ad3      	subs	r3, r2, r3
 8005bf4:	f241 3288 	movw	r2, #5000	@ 0x1388
 8005bf8:	4293      	cmp	r3, r2
 8005bfa:	d901      	bls.n	8005c00 <HAL_RCCEx_PeriphCLKConfig+0x2fc>
          {
            return HAL_TIMEOUT;
 8005bfc:	2303      	movs	r3, #3
 8005bfe:	e035      	b.n	8005c6c <HAL_RCCEx_PeriphCLKConfig+0x368>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8005c00:	4b1d      	ldr	r3, [pc, #116]	@ (8005c78 <HAL_RCCEx_PeriphCLKConfig+0x374>)
 8005c02:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8005c04:	f003 0302 	and.w	r3, r3, #2
 8005c08:	2b00      	cmp	r3, #0
 8005c0a:	d0ee      	beq.n	8005bea <HAL_RCCEx_PeriphCLKConfig+0x2e6>
          }
        }
      }
    }
    __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 8005c0c:	687b      	ldr	r3, [r7, #4]
 8005c0e:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8005c10:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8005c14:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 8005c18:	d10d      	bne.n	8005c36 <HAL_RCCEx_PeriphCLKConfig+0x332>
 8005c1a:	4b17      	ldr	r3, [pc, #92]	@ (8005c78 <HAL_RCCEx_PeriphCLKConfig+0x374>)
 8005c1c:	689b      	ldr	r3, [r3, #8]
 8005c1e:	f423 12f8 	bic.w	r2, r3, #2031616	@ 0x1f0000
 8005c22:	687b      	ldr	r3, [r7, #4]
 8005c24:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8005c26:	f023 4370 	bic.w	r3, r3, #4026531840	@ 0xf0000000
 8005c2a:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8005c2e:	4912      	ldr	r1, [pc, #72]	@ (8005c78 <HAL_RCCEx_PeriphCLKConfig+0x374>)
 8005c30:	4313      	orrs	r3, r2
 8005c32:	608b      	str	r3, [r1, #8]
 8005c34:	e005      	b.n	8005c42 <HAL_RCCEx_PeriphCLKConfig+0x33e>
 8005c36:	4b10      	ldr	r3, [pc, #64]	@ (8005c78 <HAL_RCCEx_PeriphCLKConfig+0x374>)
 8005c38:	689b      	ldr	r3, [r3, #8]
 8005c3a:	4a0f      	ldr	r2, [pc, #60]	@ (8005c78 <HAL_RCCEx_PeriphCLKConfig+0x374>)
 8005c3c:	f423 13f8 	bic.w	r3, r3, #2031616	@ 0x1f0000
 8005c40:	6093      	str	r3, [r2, #8]
 8005c42:	4b0d      	ldr	r3, [pc, #52]	@ (8005c78 <HAL_RCCEx_PeriphCLKConfig+0x374>)
 8005c44:	6f1a      	ldr	r2, [r3, #112]	@ 0x70
 8005c46:	687b      	ldr	r3, [r7, #4]
 8005c48:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8005c4a:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8005c4e:	490a      	ldr	r1, [pc, #40]	@ (8005c78 <HAL_RCCEx_PeriphCLKConfig+0x374>)
 8005c50:	4313      	orrs	r3, r2
 8005c52:	670b      	str	r3, [r1, #112]	@ 0x70
  }
  /*--------------------------------------------------------------------------*/

  /*---------------------------- TIM configuration ---------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM) == (RCC_PERIPHCLK_TIM))
 8005c54:	687b      	ldr	r3, [r7, #4]
 8005c56:	681b      	ldr	r3, [r3, #0]
 8005c58:	f003 0310 	and.w	r3, r3, #16
 8005c5c:	2b00      	cmp	r3, #0
 8005c5e:	d004      	beq.n	8005c6a <HAL_RCCEx_PeriphCLKConfig+0x366>
  {
    __HAL_RCC_TIMCLKPRESCALER(PeriphClkInit->TIMPresSelection);
 8005c60:	687b      	ldr	r3, [r7, #4]
 8005c62:	f893 202c 	ldrb.w	r2, [r3, #44]	@ 0x2c
 8005c66:	4b06      	ldr	r3, [pc, #24]	@ (8005c80 <HAL_RCCEx_PeriphCLKConfig+0x37c>)
 8005c68:	601a      	str	r2, [r3, #0]
  }
  return HAL_OK;
 8005c6a:	2300      	movs	r3, #0
}
 8005c6c:	4618      	mov	r0, r3
 8005c6e:	3718      	adds	r7, #24
 8005c70:	46bd      	mov	sp, r7
 8005c72:	bd80      	pop	{r7, pc}
 8005c74:	40007000 	.word	0x40007000
 8005c78:	40023800 	.word	0x40023800
 8005c7c:	42470e40 	.word	0x42470e40
 8005c80:	424711e0 	.word	0x424711e0

08005c84 <HAL_RNG_Init>:
  * @param  hrng pointer to a RNG_HandleTypeDef structure that contains
  *                the configuration information for RNG.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RNG_Init(RNG_HandleTypeDef *hrng)
{
 8005c84:	b580      	push	{r7, lr}
 8005c86:	b082      	sub	sp, #8
 8005c88:	af00      	add	r7, sp, #0
 8005c8a:	6078      	str	r0, [r7, #4]
  /* Check the RNG handle allocation */
  if (hrng == NULL)
 8005c8c:	687b      	ldr	r3, [r7, #4]
 8005c8e:	2b00      	cmp	r3, #0
 8005c90:	d101      	bne.n	8005c96 <HAL_RNG_Init+0x12>
  {
    return HAL_ERROR;
 8005c92:	2301      	movs	r3, #1
 8005c94:	e01c      	b.n	8005cd0 <HAL_RNG_Init+0x4c>

    /* Init the low level hardware */
    hrng->MspInitCallback(hrng);
  }
#else
  if (hrng->State == HAL_RNG_STATE_RESET)
 8005c96:	687b      	ldr	r3, [r7, #4]
 8005c98:	795b      	ldrb	r3, [r3, #5]
 8005c9a:	b2db      	uxtb	r3, r3
 8005c9c:	2b00      	cmp	r3, #0
 8005c9e:	d105      	bne.n	8005cac <HAL_RNG_Init+0x28>
  {
    /* Allocate lock resource and initialize it */
    hrng->Lock = HAL_UNLOCKED;
 8005ca0:	687b      	ldr	r3, [r7, #4]
 8005ca2:	2200      	movs	r2, #0
 8005ca4:	711a      	strb	r2, [r3, #4]

    /* Init the low level hardware */
    HAL_RNG_MspInit(hrng);
 8005ca6:	6878      	ldr	r0, [r7, #4]
 8005ca8:	f7fc fc26 	bl	80024f8 <HAL_RNG_MspInit>
  }
#endif /* USE_HAL_RNG_REGISTER_CALLBACKS */

  /* Change RNG peripheral state */
  hrng->State = HAL_RNG_STATE_BUSY;
 8005cac:	687b      	ldr	r3, [r7, #4]
 8005cae:	2202      	movs	r2, #2
 8005cb0:	715a      	strb	r2, [r3, #5]


  /* Enable the RNG Peripheral */
  __HAL_RNG_ENABLE(hrng);
 8005cb2:	687b      	ldr	r3, [r7, #4]
 8005cb4:	681b      	ldr	r3, [r3, #0]
 8005cb6:	681a      	ldr	r2, [r3, #0]
 8005cb8:	687b      	ldr	r3, [r7, #4]
 8005cba:	681b      	ldr	r3, [r3, #0]
 8005cbc:	f042 0204 	orr.w	r2, r2, #4
 8005cc0:	601a      	str	r2, [r3, #0]

  /* Initialize the RNG state */
  hrng->State = HAL_RNG_STATE_READY;
 8005cc2:	687b      	ldr	r3, [r7, #4]
 8005cc4:	2201      	movs	r2, #1
 8005cc6:	715a      	strb	r2, [r3, #5]

  /* Initialise the error code */
  hrng->ErrorCode = HAL_RNG_ERROR_NONE;
 8005cc8:	687b      	ldr	r3, [r7, #4]
 8005cca:	2200      	movs	r2, #0
 8005ccc:	609a      	str	r2, [r3, #8]

  /* Return function status */
  return HAL_OK;
 8005cce:	2300      	movs	r3, #0
}
 8005cd0:	4618      	mov	r0, r3
 8005cd2:	3708      	adds	r7, #8
 8005cd4:	46bd      	mov	sp, r7
 8005cd6:	bd80      	pop	{r7, pc}

08005cd8 <HAL_RNG_GenerateRandomNumber>:
  * @param  random32bit pointer to generated random number variable if successful.
  * @retval HAL status
  */

HAL_StatusTypeDef HAL_RNG_GenerateRandomNumber(RNG_HandleTypeDef *hrng, uint32_t *random32bit)
{
 8005cd8:	b580      	push	{r7, lr}
 8005cda:	b084      	sub	sp, #16
 8005cdc:	af00      	add	r7, sp, #0
 8005cde:	6078      	str	r0, [r7, #4]
 8005ce0:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 8005ce2:	2300      	movs	r3, #0
 8005ce4:	73fb      	strb	r3, [r7, #15]

  /* Process Locked */
  __HAL_LOCK(hrng);
 8005ce6:	687b      	ldr	r3, [r7, #4]
 8005ce8:	791b      	ldrb	r3, [r3, #4]
 8005cea:	2b01      	cmp	r3, #1
 8005cec:	d101      	bne.n	8005cf2 <HAL_RNG_GenerateRandomNumber+0x1a>
 8005cee:	2302      	movs	r3, #2
 8005cf0:	e044      	b.n	8005d7c <HAL_RNG_GenerateRandomNumber+0xa4>
 8005cf2:	687b      	ldr	r3, [r7, #4]
 8005cf4:	2201      	movs	r2, #1
 8005cf6:	711a      	strb	r2, [r3, #4]

  /* Check RNG peripheral state */
  if (hrng->State == HAL_RNG_STATE_READY)
 8005cf8:	687b      	ldr	r3, [r7, #4]
 8005cfa:	795b      	ldrb	r3, [r3, #5]
 8005cfc:	b2db      	uxtb	r3, r3
 8005cfe:	2b01      	cmp	r3, #1
 8005d00:	d133      	bne.n	8005d6a <HAL_RNG_GenerateRandomNumber+0x92>
  {
    /* Change RNG peripheral state */
    hrng->State = HAL_RNG_STATE_BUSY;
 8005d02:	687b      	ldr	r3, [r7, #4]
 8005d04:	2202      	movs	r2, #2
 8005d06:	715a      	strb	r2, [r3, #5]

    /* Get tick */
    tickstart = HAL_GetTick();
 8005d08:	f7fd f9a8 	bl	800305c <HAL_GetTick>
 8005d0c:	60b8      	str	r0, [r7, #8]

    /* Check if data register contains valid random data */
    while (__HAL_RNG_GET_FLAG(hrng, RNG_FLAG_DRDY) == RESET)
 8005d0e:	e018      	b.n	8005d42 <HAL_RNG_GenerateRandomNumber+0x6a>
    {
      if ((HAL_GetTick() - tickstart) > RNG_TIMEOUT_VALUE)
 8005d10:	f7fd f9a4 	bl	800305c <HAL_GetTick>
 8005d14:	4602      	mov	r2, r0
 8005d16:	68bb      	ldr	r3, [r7, #8]
 8005d18:	1ad3      	subs	r3, r2, r3
 8005d1a:	2b02      	cmp	r3, #2
 8005d1c:	d911      	bls.n	8005d42 <HAL_RNG_GenerateRandomNumber+0x6a>
      {
        /* New check to avoid false timeout detection in case of preemption */
        if (__HAL_RNG_GET_FLAG(hrng, RNG_FLAG_DRDY) == RESET)
 8005d1e:	687b      	ldr	r3, [r7, #4]
 8005d20:	681b      	ldr	r3, [r3, #0]
 8005d22:	685b      	ldr	r3, [r3, #4]
 8005d24:	f003 0301 	and.w	r3, r3, #1
 8005d28:	2b01      	cmp	r3, #1
 8005d2a:	d00a      	beq.n	8005d42 <HAL_RNG_GenerateRandomNumber+0x6a>
        {
          hrng->State = HAL_RNG_STATE_READY;
 8005d2c:	687b      	ldr	r3, [r7, #4]
 8005d2e:	2201      	movs	r2, #1
 8005d30:	715a      	strb	r2, [r3, #5]
          hrng->ErrorCode = HAL_RNG_ERROR_TIMEOUT;
 8005d32:	687b      	ldr	r3, [r7, #4]
 8005d34:	2202      	movs	r2, #2
 8005d36:	609a      	str	r2, [r3, #8]
          /* Process Unlocked */
          __HAL_UNLOCK(hrng);
 8005d38:	687b      	ldr	r3, [r7, #4]
 8005d3a:	2200      	movs	r2, #0
 8005d3c:	711a      	strb	r2, [r3, #4]
          return HAL_ERROR;
 8005d3e:	2301      	movs	r3, #1
 8005d40:	e01c      	b.n	8005d7c <HAL_RNG_GenerateRandomNumber+0xa4>
    while (__HAL_RNG_GET_FLAG(hrng, RNG_FLAG_DRDY) == RESET)
 8005d42:	687b      	ldr	r3, [r7, #4]
 8005d44:	681b      	ldr	r3, [r3, #0]
 8005d46:	685b      	ldr	r3, [r3, #4]
 8005d48:	f003 0301 	and.w	r3, r3, #1
 8005d4c:	2b01      	cmp	r3, #1
 8005d4e:	d1df      	bne.n	8005d10 <HAL_RNG_GenerateRandomNumber+0x38>
        }
      }
    }

    /* Get a 32bit Random number */
    hrng->RandomNumber = hrng->Instance->DR;
 8005d50:	687b      	ldr	r3, [r7, #4]
 8005d52:	681b      	ldr	r3, [r3, #0]
 8005d54:	689a      	ldr	r2, [r3, #8]
 8005d56:	687b      	ldr	r3, [r7, #4]
 8005d58:	60da      	str	r2, [r3, #12]
    *random32bit = hrng->RandomNumber;
 8005d5a:	687b      	ldr	r3, [r7, #4]
 8005d5c:	68da      	ldr	r2, [r3, #12]
 8005d5e:	683b      	ldr	r3, [r7, #0]
 8005d60:	601a      	str	r2, [r3, #0]

    hrng->State = HAL_RNG_STATE_READY;
 8005d62:	687b      	ldr	r3, [r7, #4]
 8005d64:	2201      	movs	r2, #1
 8005d66:	715a      	strb	r2, [r3, #5]
 8005d68:	e004      	b.n	8005d74 <HAL_RNG_GenerateRandomNumber+0x9c>
  }
  else
  {
    hrng->ErrorCode = HAL_RNG_ERROR_BUSY;
 8005d6a:	687b      	ldr	r3, [r7, #4]
 8005d6c:	2204      	movs	r2, #4
 8005d6e:	609a      	str	r2, [r3, #8]
    status = HAL_ERROR;
 8005d70:	2301      	movs	r3, #1
 8005d72:	73fb      	strb	r3, [r7, #15]
  }

  /* Process Unlocked */
  __HAL_UNLOCK(hrng);
 8005d74:	687b      	ldr	r3, [r7, #4]
 8005d76:	2200      	movs	r2, #0
 8005d78:	711a      	strb	r2, [r3, #4]

  return status;
 8005d7a:	7bfb      	ldrb	r3, [r7, #15]
}
 8005d7c:	4618      	mov	r0, r3
 8005d7e:	3710      	adds	r7, #16
 8005d80:	46bd      	mov	sp, r7
 8005d82:	bd80      	pop	{r7, pc}

08005d84 <HAL_RNG_GetRandomNumber>:
  * @param  hrng pointer to a RNG_HandleTypeDef structure that contains
  *                the configuration information for RNG.
  * @retval Random value
  */
uint32_t HAL_RNG_GetRandomNumber(RNG_HandleTypeDef *hrng)
{
 8005d84:	b580      	push	{r7, lr}
 8005d86:	b082      	sub	sp, #8
 8005d88:	af00      	add	r7, sp, #0
 8005d8a:	6078      	str	r0, [r7, #4]
  if (HAL_RNG_GenerateRandomNumber(hrng, &(hrng->RandomNumber)) == HAL_OK)
 8005d8c:	687b      	ldr	r3, [r7, #4]
 8005d8e:	330c      	adds	r3, #12
 8005d90:	4619      	mov	r1, r3
 8005d92:	6878      	ldr	r0, [r7, #4]
 8005d94:	f7ff ffa0 	bl	8005cd8 <HAL_RNG_GenerateRandomNumber>
 8005d98:	4603      	mov	r3, r0
 8005d9a:	2b00      	cmp	r3, #0
 8005d9c:	d102      	bne.n	8005da4 <HAL_RNG_GetRandomNumber+0x20>
  {
    return hrng->RandomNumber;
 8005d9e:	687b      	ldr	r3, [r7, #4]
 8005da0:	68db      	ldr	r3, [r3, #12]
 8005da2:	e000      	b.n	8005da6 <HAL_RNG_GetRandomNumber+0x22>
  }
  else
  {
    return 0U;
 8005da4:	2300      	movs	r3, #0
  }
}
 8005da6:	4618      	mov	r0, r3
 8005da8:	3708      	adds	r7, #8
 8005daa:	46bd      	mov	sp, r7
 8005dac:	bd80      	pop	{r7, pc}

08005dae <HAL_SPI_Init>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi)
{
 8005dae:	b580      	push	{r7, lr}
 8005db0:	b082      	sub	sp, #8
 8005db2:	af00      	add	r7, sp, #0
 8005db4:	6078      	str	r0, [r7, #4]
  /* Check the SPI handle allocation */
  if (hspi == NULL)
 8005db6:	687b      	ldr	r3, [r7, #4]
 8005db8:	2b00      	cmp	r3, #0
 8005dba:	d101      	bne.n	8005dc0 <HAL_SPI_Init+0x12>
  {
    return HAL_ERROR;
 8005dbc:	2301      	movs	r3, #1
 8005dbe:	e07b      	b.n	8005eb8 <HAL_SPI_Init+0x10a>
  assert_param(IS_SPI_DATASIZE(hspi->Init.DataSize));
  assert_param(IS_SPI_NSS(hspi->Init.NSS));
  assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
  assert_param(IS_SPI_FIRST_BIT(hspi->Init.FirstBit));
  assert_param(IS_SPI_TIMODE(hspi->Init.TIMode));
  if (hspi->Init.TIMode == SPI_TIMODE_DISABLE)
 8005dc0:	687b      	ldr	r3, [r7, #4]
 8005dc2:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8005dc4:	2b00      	cmp	r3, #0
 8005dc6:	d108      	bne.n	8005dda <HAL_SPI_Init+0x2c>
  {
    assert_param(IS_SPI_CPOL(hspi->Init.CLKPolarity));
    assert_param(IS_SPI_CPHA(hspi->Init.CLKPhase));

    if (hspi->Init.Mode == SPI_MODE_MASTER)
 8005dc8:	687b      	ldr	r3, [r7, #4]
 8005dca:	685b      	ldr	r3, [r3, #4]
 8005dcc:	f5b3 7f82 	cmp.w	r3, #260	@ 0x104
 8005dd0:	d009      	beq.n	8005de6 <HAL_SPI_Init+0x38>
      assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
    }
    else
    {
      /* Baudrate prescaler not use in Motoraola Slave mode. force to default value */
      hspi->Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 8005dd2:	687b      	ldr	r3, [r7, #4]
 8005dd4:	2200      	movs	r2, #0
 8005dd6:	61da      	str	r2, [r3, #28]
 8005dd8:	e005      	b.n	8005de6 <HAL_SPI_Init+0x38>
  else
  {
    assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));

    /* Force polarity and phase to TI protocaol requirements */
    hspi->Init.CLKPolarity = SPI_POLARITY_LOW;
 8005dda:	687b      	ldr	r3, [r7, #4]
 8005ddc:	2200      	movs	r2, #0
 8005dde:	611a      	str	r2, [r3, #16]
    hspi->Init.CLKPhase    = SPI_PHASE_1EDGE;
 8005de0:	687b      	ldr	r3, [r7, #4]
 8005de2:	2200      	movs	r2, #0
 8005de4:	615a      	str	r2, [r3, #20]
  if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
  {
    assert_param(IS_SPI_CRC_POLYNOMIAL(hspi->Init.CRCPolynomial));
  }
#else
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8005de6:	687b      	ldr	r3, [r7, #4]
 8005de8:	2200      	movs	r2, #0
 8005dea:	629a      	str	r2, [r3, #40]	@ 0x28
#endif /* USE_SPI_CRC */

  if (hspi->State == HAL_SPI_STATE_RESET)
 8005dec:	687b      	ldr	r3, [r7, #4]
 8005dee:	f893 3051 	ldrb.w	r3, [r3, #81]	@ 0x51
 8005df2:	b2db      	uxtb	r3, r3
 8005df4:	2b00      	cmp	r3, #0
 8005df6:	d106      	bne.n	8005e06 <HAL_SPI_Init+0x58>
  {
    /* Allocate lock resource and initialize it */
    hspi->Lock = HAL_UNLOCKED;
 8005df8:	687b      	ldr	r3, [r7, #4]
 8005dfa:	2200      	movs	r2, #0
 8005dfc:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hspi->MspInitCallback(hspi);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SPI_MspInit(hspi);
 8005e00:	6878      	ldr	r0, [r7, #4]
 8005e02:	f7fc fb9b 	bl	800253c <HAL_SPI_MspInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }

  hspi->State = HAL_SPI_STATE_BUSY;
 8005e06:	687b      	ldr	r3, [r7, #4]
 8005e08:	2202      	movs	r2, #2
 8005e0a:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51

  /* Disable the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 8005e0e:	687b      	ldr	r3, [r7, #4]
 8005e10:	681b      	ldr	r3, [r3, #0]
 8005e12:	681a      	ldr	r2, [r3, #0]
 8005e14:	687b      	ldr	r3, [r7, #4]
 8005e16:	681b      	ldr	r3, [r3, #0]
 8005e18:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 8005e1c:	601a      	str	r2, [r3, #0]

  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Data size, Clock polarity and phase, NSS management,
  Communication speed, First bit and CRC calculation state */
  WRITE_REG(hspi->Instance->CR1, ((hspi->Init.Mode & (SPI_CR1_MSTR | SPI_CR1_SSI)) |
 8005e1e:	687b      	ldr	r3, [r7, #4]
 8005e20:	685b      	ldr	r3, [r3, #4]
 8005e22:	f403 7282 	and.w	r2, r3, #260	@ 0x104
 8005e26:	687b      	ldr	r3, [r7, #4]
 8005e28:	689b      	ldr	r3, [r3, #8]
 8005e2a:	f403 4304 	and.w	r3, r3, #33792	@ 0x8400
 8005e2e:	431a      	orrs	r2, r3
 8005e30:	687b      	ldr	r3, [r7, #4]
 8005e32:	68db      	ldr	r3, [r3, #12]
 8005e34:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 8005e38:	431a      	orrs	r2, r3
 8005e3a:	687b      	ldr	r3, [r7, #4]
 8005e3c:	691b      	ldr	r3, [r3, #16]
 8005e3e:	f003 0302 	and.w	r3, r3, #2
 8005e42:	431a      	orrs	r2, r3
 8005e44:	687b      	ldr	r3, [r7, #4]
 8005e46:	695b      	ldr	r3, [r3, #20]
 8005e48:	f003 0301 	and.w	r3, r3, #1
 8005e4c:	431a      	orrs	r2, r3
 8005e4e:	687b      	ldr	r3, [r7, #4]
 8005e50:	699b      	ldr	r3, [r3, #24]
 8005e52:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 8005e56:	431a      	orrs	r2, r3
 8005e58:	687b      	ldr	r3, [r7, #4]
 8005e5a:	69db      	ldr	r3, [r3, #28]
 8005e5c:	f003 0338 	and.w	r3, r3, #56	@ 0x38
 8005e60:	431a      	orrs	r2, r3
 8005e62:	687b      	ldr	r3, [r7, #4]
 8005e64:	6a1b      	ldr	r3, [r3, #32]
 8005e66:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8005e6a:	ea42 0103 	orr.w	r1, r2, r3
 8005e6e:	687b      	ldr	r3, [r7, #4]
 8005e70:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8005e72:	f403 5200 	and.w	r2, r3, #8192	@ 0x2000
 8005e76:	687b      	ldr	r3, [r7, #4]
 8005e78:	681b      	ldr	r3, [r3, #0]
 8005e7a:	430a      	orrs	r2, r1
 8005e7c:	601a      	str	r2, [r3, #0]
                                  (hspi->Init.BaudRatePrescaler & SPI_CR1_BR_Msk) |
                                  (hspi->Init.FirstBit  & SPI_CR1_LSBFIRST) |
                                  (hspi->Init.CRCCalculation & SPI_CR1_CRCEN)));

  /* Configure : NSS management, TI Mode */
  WRITE_REG(hspi->Instance->CR2, (((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE) | (hspi->Init.TIMode & SPI_CR2_FRF)));
 8005e7e:	687b      	ldr	r3, [r7, #4]
 8005e80:	699b      	ldr	r3, [r3, #24]
 8005e82:	0c1b      	lsrs	r3, r3, #16
 8005e84:	f003 0104 	and.w	r1, r3, #4
 8005e88:	687b      	ldr	r3, [r7, #4]
 8005e8a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8005e8c:	f003 0210 	and.w	r2, r3, #16
 8005e90:	687b      	ldr	r3, [r7, #4]
 8005e92:	681b      	ldr	r3, [r3, #0]
 8005e94:	430a      	orrs	r2, r1
 8005e96:	605a      	str	r2, [r3, #4]
  }
#endif /* USE_SPI_CRC */

#if defined(SPI_I2SCFGR_I2SMOD)
  /* Activate the SPI mode (Make sure that I2SMOD bit in I2SCFGR register is reset) */
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
 8005e98:	687b      	ldr	r3, [r7, #4]
 8005e9a:	681b      	ldr	r3, [r3, #0]
 8005e9c:	69da      	ldr	r2, [r3, #28]
 8005e9e:	687b      	ldr	r3, [r7, #4]
 8005ea0:	681b      	ldr	r3, [r3, #0]
 8005ea2:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 8005ea6:	61da      	str	r2, [r3, #28]
#endif /* SPI_I2SCFGR_I2SMOD */

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 8005ea8:	687b      	ldr	r3, [r7, #4]
 8005eaa:	2200      	movs	r2, #0
 8005eac:	655a      	str	r2, [r3, #84]	@ 0x54
  hspi->State     = HAL_SPI_STATE_READY;
 8005eae:	687b      	ldr	r3, [r7, #4]
 8005eb0:	2201      	movs	r2, #1
 8005eb2:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51

  return HAL_OK;
 8005eb6:	2300      	movs	r3, #0
}
 8005eb8:	4618      	mov	r0, r3
 8005eba:	3708      	adds	r7, #8
 8005ebc:	46bd      	mov	sp, r7
 8005ebe:	bd80      	pop	{r7, pc}

08005ec0 <HAL_SPI_DeInit>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_DeInit(SPI_HandleTypeDef *hspi)
{
 8005ec0:	b580      	push	{r7, lr}
 8005ec2:	b082      	sub	sp, #8
 8005ec4:	af00      	add	r7, sp, #0
 8005ec6:	6078      	str	r0, [r7, #4]
  /* Check the SPI handle allocation */
  if (hspi == NULL)
 8005ec8:	687b      	ldr	r3, [r7, #4]
 8005eca:	2b00      	cmp	r3, #0
 8005ecc:	d101      	bne.n	8005ed2 <HAL_SPI_DeInit+0x12>
  {
    return HAL_ERROR;
 8005ece:	2301      	movs	r3, #1
 8005ed0:	e01a      	b.n	8005f08 <HAL_SPI_DeInit+0x48>
  }

  /* Check SPI Instance parameter */
  assert_param(IS_SPI_ALL_INSTANCE(hspi->Instance));

  hspi->State = HAL_SPI_STATE_BUSY;
 8005ed2:	687b      	ldr	r3, [r7, #4]
 8005ed4:	2202      	movs	r2, #2
 8005ed6:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51

  /* Disable the SPI Peripheral Clock */
  __HAL_SPI_DISABLE(hspi);
 8005eda:	687b      	ldr	r3, [r7, #4]
 8005edc:	681b      	ldr	r3, [r3, #0]
 8005ede:	681a      	ldr	r2, [r3, #0]
 8005ee0:	687b      	ldr	r3, [r7, #4]
 8005ee2:	681b      	ldr	r3, [r3, #0]
 8005ee4:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 8005ee8:	601a      	str	r2, [r3, #0]

  /* DeInit the low level hardware: GPIO, CLOCK, NVIC... */
  hspi->MspDeInitCallback(hspi);
#else
  /* DeInit the low level hardware: GPIO, CLOCK, NVIC... */
  HAL_SPI_MspDeInit(hspi);
 8005eea:	6878      	ldr	r0, [r7, #4]
 8005eec:	f7fc fb6e 	bl	80025cc <HAL_SPI_MspDeInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 8005ef0:	687b      	ldr	r3, [r7, #4]
 8005ef2:	2200      	movs	r2, #0
 8005ef4:	655a      	str	r2, [r3, #84]	@ 0x54
  hspi->State = HAL_SPI_STATE_RESET;
 8005ef6:	687b      	ldr	r3, [r7, #4]
 8005ef8:	2200      	movs	r2, #0
 8005efa:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51

  /* Release Lock */
  __HAL_UNLOCK(hspi);
 8005efe:	687b      	ldr	r3, [r7, #4]
 8005f00:	2200      	movs	r2, #0
 8005f02:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50

  return HAL_OK;
 8005f06:	2300      	movs	r3, #0
}
 8005f08:	4618      	mov	r0, r3
 8005f0a:	3708      	adds	r7, #8
 8005f0c:	46bd      	mov	sp, r7
 8005f0e:	bd80      	pop	{r7, pc}

08005f10 <HAL_SPI_Transmit>:
  * @param  Size amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Transmit(SPI_HandleTypeDef *hspi, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8005f10:	b580      	push	{r7, lr}
 8005f12:	b088      	sub	sp, #32
 8005f14:	af00      	add	r7, sp, #0
 8005f16:	60f8      	str	r0, [r7, #12]
 8005f18:	60b9      	str	r1, [r7, #8]
 8005f1a:	603b      	str	r3, [r7, #0]
 8005f1c:	4613      	mov	r3, r2
 8005f1e:	80fb      	strh	r3, [r7, #6]

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES_OR_1LINE(hspi->Init.Direction));

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 8005f20:	f7fd f89c 	bl	800305c <HAL_GetTick>
 8005f24:	61f8      	str	r0, [r7, #28]
  initial_TxXferCount = Size;
 8005f26:	88fb      	ldrh	r3, [r7, #6]
 8005f28:	837b      	strh	r3, [r7, #26]

  if (hspi->State != HAL_SPI_STATE_READY)
 8005f2a:	68fb      	ldr	r3, [r7, #12]
 8005f2c:	f893 3051 	ldrb.w	r3, [r3, #81]	@ 0x51
 8005f30:	b2db      	uxtb	r3, r3
 8005f32:	2b01      	cmp	r3, #1
 8005f34:	d001      	beq.n	8005f3a <HAL_SPI_Transmit+0x2a>
  {
    return HAL_BUSY;
 8005f36:	2302      	movs	r3, #2
 8005f38:	e12a      	b.n	8006190 <HAL_SPI_Transmit+0x280>
  }

  if ((pData == NULL) || (Size == 0U))
 8005f3a:	68bb      	ldr	r3, [r7, #8]
 8005f3c:	2b00      	cmp	r3, #0
 8005f3e:	d002      	beq.n	8005f46 <HAL_SPI_Transmit+0x36>
 8005f40:	88fb      	ldrh	r3, [r7, #6]
 8005f42:	2b00      	cmp	r3, #0
 8005f44:	d101      	bne.n	8005f4a <HAL_SPI_Transmit+0x3a>
  {
    return HAL_ERROR;
 8005f46:	2301      	movs	r3, #1
 8005f48:	e122      	b.n	8006190 <HAL_SPI_Transmit+0x280>
  }

  /* Process Locked */
  __HAL_LOCK(hspi);
 8005f4a:	68fb      	ldr	r3, [r7, #12]
 8005f4c:	f893 3050 	ldrb.w	r3, [r3, #80]	@ 0x50
 8005f50:	2b01      	cmp	r3, #1
 8005f52:	d101      	bne.n	8005f58 <HAL_SPI_Transmit+0x48>
 8005f54:	2302      	movs	r3, #2
 8005f56:	e11b      	b.n	8006190 <HAL_SPI_Transmit+0x280>
 8005f58:	68fb      	ldr	r3, [r7, #12]
 8005f5a:	2201      	movs	r2, #1
 8005f5c:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50

  /* Set the transaction information */
  hspi->State       = HAL_SPI_STATE_BUSY_TX;
 8005f60:	68fb      	ldr	r3, [r7, #12]
 8005f62:	2203      	movs	r2, #3
 8005f64:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 8005f68:	68fb      	ldr	r3, [r7, #12]
 8005f6a:	2200      	movs	r2, #0
 8005f6c:	655a      	str	r2, [r3, #84]	@ 0x54
  hspi->pTxBuffPtr  = (const uint8_t *)pData;
 8005f6e:	68fb      	ldr	r3, [r7, #12]
 8005f70:	68ba      	ldr	r2, [r7, #8]
 8005f72:	631a      	str	r2, [r3, #48]	@ 0x30
  hspi->TxXferSize  = Size;
 8005f74:	68fb      	ldr	r3, [r7, #12]
 8005f76:	88fa      	ldrh	r2, [r7, #6]
 8005f78:	869a      	strh	r2, [r3, #52]	@ 0x34
  hspi->TxXferCount = Size;
 8005f7a:	68fb      	ldr	r3, [r7, #12]
 8005f7c:	88fa      	ldrh	r2, [r7, #6]
 8005f7e:	86da      	strh	r2, [r3, #54]	@ 0x36

  /*Init field not used in handle to zero */
  hspi->pRxBuffPtr  = (uint8_t *)NULL;
 8005f80:	68fb      	ldr	r3, [r7, #12]
 8005f82:	2200      	movs	r2, #0
 8005f84:	639a      	str	r2, [r3, #56]	@ 0x38
  hspi->RxXferSize  = 0U;
 8005f86:	68fb      	ldr	r3, [r7, #12]
 8005f88:	2200      	movs	r2, #0
 8005f8a:	879a      	strh	r2, [r3, #60]	@ 0x3c
  hspi->RxXferCount = 0U;
 8005f8c:	68fb      	ldr	r3, [r7, #12]
 8005f8e:	2200      	movs	r2, #0
 8005f90:	87da      	strh	r2, [r3, #62]	@ 0x3e
  hspi->TxISR       = NULL;
 8005f92:	68fb      	ldr	r3, [r7, #12]
 8005f94:	2200      	movs	r2, #0
 8005f96:	645a      	str	r2, [r3, #68]	@ 0x44
  hspi->RxISR       = NULL;
 8005f98:	68fb      	ldr	r3, [r7, #12]
 8005f9a:	2200      	movs	r2, #0
 8005f9c:	641a      	str	r2, [r3, #64]	@ 0x40

  /* Configure communication direction : 1Line */
  if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8005f9e:	68fb      	ldr	r3, [r7, #12]
 8005fa0:	689b      	ldr	r3, [r3, #8]
 8005fa2:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 8005fa6:	d10f      	bne.n	8005fc8 <HAL_SPI_Transmit+0xb8>
  {
    /* Disable SPI Peripheral before set 1Line direction (BIDIOE bit) */
    __HAL_SPI_DISABLE(hspi);
 8005fa8:	68fb      	ldr	r3, [r7, #12]
 8005faa:	681b      	ldr	r3, [r3, #0]
 8005fac:	681a      	ldr	r2, [r3, #0]
 8005fae:	68fb      	ldr	r3, [r7, #12]
 8005fb0:	681b      	ldr	r3, [r3, #0]
 8005fb2:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 8005fb6:	601a      	str	r2, [r3, #0]
    SPI_1LINE_TX(hspi);
 8005fb8:	68fb      	ldr	r3, [r7, #12]
 8005fba:	681b      	ldr	r3, [r3, #0]
 8005fbc:	681a      	ldr	r2, [r3, #0]
 8005fbe:	68fb      	ldr	r3, [r7, #12]
 8005fc0:	681b      	ldr	r3, [r3, #0]
 8005fc2:	f442 4280 	orr.w	r2, r2, #16384	@ 0x4000
 8005fc6:	601a      	str	r2, [r3, #0]
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 8005fc8:	68fb      	ldr	r3, [r7, #12]
 8005fca:	681b      	ldr	r3, [r3, #0]
 8005fcc:	681b      	ldr	r3, [r3, #0]
 8005fce:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8005fd2:	2b40      	cmp	r3, #64	@ 0x40
 8005fd4:	d007      	beq.n	8005fe6 <HAL_SPI_Transmit+0xd6>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 8005fd6:	68fb      	ldr	r3, [r7, #12]
 8005fd8:	681b      	ldr	r3, [r3, #0]
 8005fda:	681a      	ldr	r2, [r3, #0]
 8005fdc:	68fb      	ldr	r3, [r7, #12]
 8005fde:	681b      	ldr	r3, [r3, #0]
 8005fe0:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 8005fe4:	601a      	str	r2, [r3, #0]
  }

  /* Transmit data in 16 Bit mode */
  if (hspi->Init.DataSize == SPI_DATASIZE_16BIT)
 8005fe6:	68fb      	ldr	r3, [r7, #12]
 8005fe8:	68db      	ldr	r3, [r3, #12]
 8005fea:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 8005fee:	d152      	bne.n	8006096 <HAL_SPI_Transmit+0x186>
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8005ff0:	68fb      	ldr	r3, [r7, #12]
 8005ff2:	685b      	ldr	r3, [r3, #4]
 8005ff4:	2b00      	cmp	r3, #0
 8005ff6:	d002      	beq.n	8005ffe <HAL_SPI_Transmit+0xee>
 8005ff8:	8b7b      	ldrh	r3, [r7, #26]
 8005ffa:	2b01      	cmp	r3, #1
 8005ffc:	d145      	bne.n	800608a <HAL_SPI_Transmit+0x17a>
    {
      hspi->Instance->DR = *((const uint16_t *)hspi->pTxBuffPtr);
 8005ffe:	68fb      	ldr	r3, [r7, #12]
 8006000:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8006002:	881a      	ldrh	r2, [r3, #0]
 8006004:	68fb      	ldr	r3, [r7, #12]
 8006006:	681b      	ldr	r3, [r3, #0]
 8006008:	60da      	str	r2, [r3, #12]
      hspi->pTxBuffPtr += sizeof(uint16_t);
 800600a:	68fb      	ldr	r3, [r7, #12]
 800600c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800600e:	1c9a      	adds	r2, r3, #2
 8006010:	68fb      	ldr	r3, [r7, #12]
 8006012:	631a      	str	r2, [r3, #48]	@ 0x30
      hspi->TxXferCount--;
 8006014:	68fb      	ldr	r3, [r7, #12]
 8006016:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 8006018:	b29b      	uxth	r3, r3
 800601a:	3b01      	subs	r3, #1
 800601c:	b29a      	uxth	r2, r3
 800601e:	68fb      	ldr	r3, [r7, #12]
 8006020:	86da      	strh	r2, [r3, #54]	@ 0x36
    }
    /* Transmit data in 16 Bit mode */
    while (hspi->TxXferCount > 0U)
 8006022:	e032      	b.n	800608a <HAL_SPI_Transmit+0x17a>
    {
      /* Wait until TXE flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 8006024:	68fb      	ldr	r3, [r7, #12]
 8006026:	681b      	ldr	r3, [r3, #0]
 8006028:	689b      	ldr	r3, [r3, #8]
 800602a:	f003 0302 	and.w	r3, r3, #2
 800602e:	2b02      	cmp	r3, #2
 8006030:	d112      	bne.n	8006058 <HAL_SPI_Transmit+0x148>
      {
        hspi->Instance->DR = *((const uint16_t *)hspi->pTxBuffPtr);
 8006032:	68fb      	ldr	r3, [r7, #12]
 8006034:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8006036:	881a      	ldrh	r2, [r3, #0]
 8006038:	68fb      	ldr	r3, [r7, #12]
 800603a:	681b      	ldr	r3, [r3, #0]
 800603c:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 800603e:	68fb      	ldr	r3, [r7, #12]
 8006040:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8006042:	1c9a      	adds	r2, r3, #2
 8006044:	68fb      	ldr	r3, [r7, #12]
 8006046:	631a      	str	r2, [r3, #48]	@ 0x30
        hspi->TxXferCount--;
 8006048:	68fb      	ldr	r3, [r7, #12]
 800604a:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 800604c:	b29b      	uxth	r3, r3
 800604e:	3b01      	subs	r3, #1
 8006050:	b29a      	uxth	r2, r3
 8006052:	68fb      	ldr	r3, [r7, #12]
 8006054:	86da      	strh	r2, [r3, #54]	@ 0x36
 8006056:	e018      	b.n	800608a <HAL_SPI_Transmit+0x17a>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 8006058:	f7fd f800 	bl	800305c <HAL_GetTick>
 800605c:	4602      	mov	r2, r0
 800605e:	69fb      	ldr	r3, [r7, #28]
 8006060:	1ad3      	subs	r3, r2, r3
 8006062:	683a      	ldr	r2, [r7, #0]
 8006064:	429a      	cmp	r2, r3
 8006066:	d803      	bhi.n	8006070 <HAL_SPI_Transmit+0x160>
 8006068:	683b      	ldr	r3, [r7, #0]
 800606a:	f1b3 3fff 	cmp.w	r3, #4294967295
 800606e:	d102      	bne.n	8006076 <HAL_SPI_Transmit+0x166>
 8006070:	683b      	ldr	r3, [r7, #0]
 8006072:	2b00      	cmp	r3, #0
 8006074:	d109      	bne.n	800608a <HAL_SPI_Transmit+0x17a>
        {
          hspi->State = HAL_SPI_STATE_READY;
 8006076:	68fb      	ldr	r3, [r7, #12]
 8006078:	2201      	movs	r2, #1
 800607a:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51
          __HAL_UNLOCK(hspi);
 800607e:	68fb      	ldr	r3, [r7, #12]
 8006080:	2200      	movs	r2, #0
 8006082:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50
          return HAL_TIMEOUT;
 8006086:	2303      	movs	r3, #3
 8006088:	e082      	b.n	8006190 <HAL_SPI_Transmit+0x280>
    while (hspi->TxXferCount > 0U)
 800608a:	68fb      	ldr	r3, [r7, #12]
 800608c:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 800608e:	b29b      	uxth	r3, r3
 8006090:	2b00      	cmp	r3, #0
 8006092:	d1c7      	bne.n	8006024 <HAL_SPI_Transmit+0x114>
 8006094:	e053      	b.n	800613e <HAL_SPI_Transmit+0x22e>
    }
  }
  /* Transmit data in 8 Bit mode */
  else
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8006096:	68fb      	ldr	r3, [r7, #12]
 8006098:	685b      	ldr	r3, [r3, #4]
 800609a:	2b00      	cmp	r3, #0
 800609c:	d002      	beq.n	80060a4 <HAL_SPI_Transmit+0x194>
 800609e:	8b7b      	ldrh	r3, [r7, #26]
 80060a0:	2b01      	cmp	r3, #1
 80060a2:	d147      	bne.n	8006134 <HAL_SPI_Transmit+0x224>
    {
      *((__IO uint8_t *)&hspi->Instance->DR) = *((const uint8_t *)hspi->pTxBuffPtr);
 80060a4:	68fb      	ldr	r3, [r7, #12]
 80060a6:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 80060a8:	68fb      	ldr	r3, [r7, #12]
 80060aa:	681b      	ldr	r3, [r3, #0]
 80060ac:	330c      	adds	r3, #12
 80060ae:	7812      	ldrb	r2, [r2, #0]
 80060b0:	701a      	strb	r2, [r3, #0]
      hspi->pTxBuffPtr += sizeof(uint8_t);
 80060b2:	68fb      	ldr	r3, [r7, #12]
 80060b4:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80060b6:	1c5a      	adds	r2, r3, #1
 80060b8:	68fb      	ldr	r3, [r7, #12]
 80060ba:	631a      	str	r2, [r3, #48]	@ 0x30
      hspi->TxXferCount--;
 80060bc:	68fb      	ldr	r3, [r7, #12]
 80060be:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 80060c0:	b29b      	uxth	r3, r3
 80060c2:	3b01      	subs	r3, #1
 80060c4:	b29a      	uxth	r2, r3
 80060c6:	68fb      	ldr	r3, [r7, #12]
 80060c8:	86da      	strh	r2, [r3, #54]	@ 0x36
    }
    while (hspi->TxXferCount > 0U)
 80060ca:	e033      	b.n	8006134 <HAL_SPI_Transmit+0x224>
    {
      /* Wait until TXE flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 80060cc:	68fb      	ldr	r3, [r7, #12]
 80060ce:	681b      	ldr	r3, [r3, #0]
 80060d0:	689b      	ldr	r3, [r3, #8]
 80060d2:	f003 0302 	and.w	r3, r3, #2
 80060d6:	2b02      	cmp	r3, #2
 80060d8:	d113      	bne.n	8006102 <HAL_SPI_Transmit+0x1f2>
      {
        *((__IO uint8_t *)&hspi->Instance->DR) = *((const uint8_t *)hspi->pTxBuffPtr);
 80060da:	68fb      	ldr	r3, [r7, #12]
 80060dc:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 80060de:	68fb      	ldr	r3, [r7, #12]
 80060e0:	681b      	ldr	r3, [r3, #0]
 80060e2:	330c      	adds	r3, #12
 80060e4:	7812      	ldrb	r2, [r2, #0]
 80060e6:	701a      	strb	r2, [r3, #0]
        hspi->pTxBuffPtr += sizeof(uint8_t);
 80060e8:	68fb      	ldr	r3, [r7, #12]
 80060ea:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80060ec:	1c5a      	adds	r2, r3, #1
 80060ee:	68fb      	ldr	r3, [r7, #12]
 80060f0:	631a      	str	r2, [r3, #48]	@ 0x30
        hspi->TxXferCount--;
 80060f2:	68fb      	ldr	r3, [r7, #12]
 80060f4:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 80060f6:	b29b      	uxth	r3, r3
 80060f8:	3b01      	subs	r3, #1
 80060fa:	b29a      	uxth	r2, r3
 80060fc:	68fb      	ldr	r3, [r7, #12]
 80060fe:	86da      	strh	r2, [r3, #54]	@ 0x36
 8006100:	e018      	b.n	8006134 <HAL_SPI_Transmit+0x224>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 8006102:	f7fc ffab 	bl	800305c <HAL_GetTick>
 8006106:	4602      	mov	r2, r0
 8006108:	69fb      	ldr	r3, [r7, #28]
 800610a:	1ad3      	subs	r3, r2, r3
 800610c:	683a      	ldr	r2, [r7, #0]
 800610e:	429a      	cmp	r2, r3
 8006110:	d803      	bhi.n	800611a <HAL_SPI_Transmit+0x20a>
 8006112:	683b      	ldr	r3, [r7, #0]
 8006114:	f1b3 3fff 	cmp.w	r3, #4294967295
 8006118:	d102      	bne.n	8006120 <HAL_SPI_Transmit+0x210>
 800611a:	683b      	ldr	r3, [r7, #0]
 800611c:	2b00      	cmp	r3, #0
 800611e:	d109      	bne.n	8006134 <HAL_SPI_Transmit+0x224>
        {
          hspi->State = HAL_SPI_STATE_READY;
 8006120:	68fb      	ldr	r3, [r7, #12]
 8006122:	2201      	movs	r2, #1
 8006124:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51
          __HAL_UNLOCK(hspi);
 8006128:	68fb      	ldr	r3, [r7, #12]
 800612a:	2200      	movs	r2, #0
 800612c:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50
          return HAL_TIMEOUT;
 8006130:	2303      	movs	r3, #3
 8006132:	e02d      	b.n	8006190 <HAL_SPI_Transmit+0x280>
    while (hspi->TxXferCount > 0U)
 8006134:	68fb      	ldr	r3, [r7, #12]
 8006136:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 8006138:	b29b      	uxth	r3, r3
 800613a:	2b00      	cmp	r3, #0
 800613c:	d1c6      	bne.n	80060cc <HAL_SPI_Transmit+0x1bc>
    SET_BIT(hspi->Instance->CR1, SPI_CR1_CRCNEXT);
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 800613e:	69fa      	ldr	r2, [r7, #28]
 8006140:	6839      	ldr	r1, [r7, #0]
 8006142:	68f8      	ldr	r0, [r7, #12]
 8006144:	f000 f8be 	bl	80062c4 <SPI_EndRxTxTransaction>
 8006148:	4603      	mov	r3, r0
 800614a:	2b00      	cmp	r3, #0
 800614c:	d002      	beq.n	8006154 <HAL_SPI_Transmit+0x244>
  {
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 800614e:	68fb      	ldr	r3, [r7, #12]
 8006150:	2220      	movs	r2, #32
 8006152:	655a      	str	r2, [r3, #84]	@ 0x54
  }

  /* Clear overrun flag in 2 Lines communication mode because received is not read */
  if (hspi->Init.Direction == SPI_DIRECTION_2LINES)
 8006154:	68fb      	ldr	r3, [r7, #12]
 8006156:	689b      	ldr	r3, [r3, #8]
 8006158:	2b00      	cmp	r3, #0
 800615a:	d10a      	bne.n	8006172 <HAL_SPI_Transmit+0x262>
  {
    __HAL_SPI_CLEAR_OVRFLAG(hspi);
 800615c:	2300      	movs	r3, #0
 800615e:	617b      	str	r3, [r7, #20]
 8006160:	68fb      	ldr	r3, [r7, #12]
 8006162:	681b      	ldr	r3, [r3, #0]
 8006164:	68db      	ldr	r3, [r3, #12]
 8006166:	617b      	str	r3, [r7, #20]
 8006168:	68fb      	ldr	r3, [r7, #12]
 800616a:	681b      	ldr	r3, [r3, #0]
 800616c:	689b      	ldr	r3, [r3, #8]
 800616e:	617b      	str	r3, [r7, #20]
 8006170:	697b      	ldr	r3, [r7, #20]
  }

  hspi->State = HAL_SPI_STATE_READY;
 8006172:	68fb      	ldr	r3, [r7, #12]
 8006174:	2201      	movs	r2, #1
 8006176:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51
  /* Process Unlocked */
  __HAL_UNLOCK(hspi);
 800617a:	68fb      	ldr	r3, [r7, #12]
 800617c:	2200      	movs	r2, #0
 800617e:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50

  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 8006182:	68fb      	ldr	r3, [r7, #12]
 8006184:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8006186:	2b00      	cmp	r3, #0
 8006188:	d001      	beq.n	800618e <HAL_SPI_Transmit+0x27e>
  {
    return HAL_ERROR;
 800618a:	2301      	movs	r3, #1
 800618c:	e000      	b.n	8006190 <HAL_SPI_Transmit+0x280>
  }
  else
  {
    return HAL_OK;
 800618e:	2300      	movs	r3, #0
  }
}
 8006190:	4618      	mov	r0, r3
 8006192:	3720      	adds	r7, #32
 8006194:	46bd      	mov	sp, r7
 8006196:	bd80      	pop	{r7, pc}

08006198 <HAL_SPI_GetState>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval SPI state
  */
HAL_SPI_StateTypeDef HAL_SPI_GetState(const SPI_HandleTypeDef *hspi)
{
 8006198:	b480      	push	{r7}
 800619a:	b083      	sub	sp, #12
 800619c:	af00      	add	r7, sp, #0
 800619e:	6078      	str	r0, [r7, #4]
  /* Return SPI handle state */
  return hspi->State;
 80061a0:	687b      	ldr	r3, [r7, #4]
 80061a2:	f893 3051 	ldrb.w	r3, [r3, #81]	@ 0x51
 80061a6:	b2db      	uxtb	r3, r3
}
 80061a8:	4618      	mov	r0, r3
 80061aa:	370c      	adds	r7, #12
 80061ac:	46bd      	mov	sp, r7
 80061ae:	f85d 7b04 	ldr.w	r7, [sp], #4
 80061b2:	4770      	bx	lr

080061b4 <SPI_WaitFlagStateUntilTimeout>:
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_WaitFlagStateUntilTimeout(SPI_HandleTypeDef *hspi, uint32_t Flag, FlagStatus State,
                                                       uint32_t Timeout, uint32_t Tickstart)
{
 80061b4:	b580      	push	{r7, lr}
 80061b6:	b088      	sub	sp, #32
 80061b8:	af00      	add	r7, sp, #0
 80061ba:	60f8      	str	r0, [r7, #12]
 80061bc:	60b9      	str	r1, [r7, #8]
 80061be:	603b      	str	r3, [r7, #0]
 80061c0:	4613      	mov	r3, r2
 80061c2:	71fb      	strb	r3, [r7, #7]
  __IO uint32_t count;
  uint32_t tmp_timeout;
  uint32_t tmp_tickstart;

  /* Adjust Timeout value  in case of end of transfer */
  tmp_timeout   = Timeout - (HAL_GetTick() - Tickstart);
 80061c4:	f7fc ff4a 	bl	800305c <HAL_GetTick>
 80061c8:	4602      	mov	r2, r0
 80061ca:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80061cc:	1a9b      	subs	r3, r3, r2
 80061ce:	683a      	ldr	r2, [r7, #0]
 80061d0:	4413      	add	r3, r2
 80061d2:	61fb      	str	r3, [r7, #28]
  tmp_tickstart = HAL_GetTick();
 80061d4:	f7fc ff42 	bl	800305c <HAL_GetTick>
 80061d8:	61b8      	str	r0, [r7, #24]

  /* Calculate Timeout based on a software loop to avoid blocking issue if Systick is disabled */
  count = tmp_timeout * ((SystemCoreClock * 32U) >> 20U);
 80061da:	4b39      	ldr	r3, [pc, #228]	@ (80062c0 <SPI_WaitFlagStateUntilTimeout+0x10c>)
 80061dc:	681b      	ldr	r3, [r3, #0]
 80061de:	015b      	lsls	r3, r3, #5
 80061e0:	0d1b      	lsrs	r3, r3, #20
 80061e2:	69fa      	ldr	r2, [r7, #28]
 80061e4:	fb02 f303 	mul.w	r3, r2, r3
 80061e8:	617b      	str	r3, [r7, #20]

  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 80061ea:	e054      	b.n	8006296 <SPI_WaitFlagStateUntilTimeout+0xe2>
  {
    if (Timeout != HAL_MAX_DELAY)
 80061ec:	683b      	ldr	r3, [r7, #0]
 80061ee:	f1b3 3fff 	cmp.w	r3, #4294967295
 80061f2:	d050      	beq.n	8006296 <SPI_WaitFlagStateUntilTimeout+0xe2>
    {
      if (((HAL_GetTick() - tmp_tickstart) >= tmp_timeout) || (tmp_timeout == 0U))
 80061f4:	f7fc ff32 	bl	800305c <HAL_GetTick>
 80061f8:	4602      	mov	r2, r0
 80061fa:	69bb      	ldr	r3, [r7, #24]
 80061fc:	1ad3      	subs	r3, r2, r3
 80061fe:	69fa      	ldr	r2, [r7, #28]
 8006200:	429a      	cmp	r2, r3
 8006202:	d902      	bls.n	800620a <SPI_WaitFlagStateUntilTimeout+0x56>
 8006204:	69fb      	ldr	r3, [r7, #28]
 8006206:	2b00      	cmp	r3, #0
 8006208:	d13d      	bne.n	8006286 <SPI_WaitFlagStateUntilTimeout+0xd2>
        /* Disable the SPI and reset the CRC: the CRC value should be cleared
           on both master and slave sides in order to resynchronize the master
           and slave for their respective CRC calculation */

        /* Disable TXE, RXNE and ERR interrupts for the interrupt process */
        __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_RXNE | SPI_IT_ERR));
 800620a:	68fb      	ldr	r3, [r7, #12]
 800620c:	681b      	ldr	r3, [r3, #0]
 800620e:	685a      	ldr	r2, [r3, #4]
 8006210:	68fb      	ldr	r3, [r7, #12]
 8006212:	681b      	ldr	r3, [r3, #0]
 8006214:	f022 02e0 	bic.w	r2, r2, #224	@ 0xe0
 8006218:	605a      	str	r2, [r3, #4]

        if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 800621a:	68fb      	ldr	r3, [r7, #12]
 800621c:	685b      	ldr	r3, [r3, #4]
 800621e:	f5b3 7f82 	cmp.w	r3, #260	@ 0x104
 8006222:	d111      	bne.n	8006248 <SPI_WaitFlagStateUntilTimeout+0x94>
 8006224:	68fb      	ldr	r3, [r7, #12]
 8006226:	689b      	ldr	r3, [r3, #8]
 8006228:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 800622c:	d004      	beq.n	8006238 <SPI_WaitFlagStateUntilTimeout+0x84>
                                                     || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 800622e:	68fb      	ldr	r3, [r7, #12]
 8006230:	689b      	ldr	r3, [r3, #8]
 8006232:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8006236:	d107      	bne.n	8006248 <SPI_WaitFlagStateUntilTimeout+0x94>
        {
          /* Disable SPI peripheral */
          __HAL_SPI_DISABLE(hspi);
 8006238:	68fb      	ldr	r3, [r7, #12]
 800623a:	681b      	ldr	r3, [r3, #0]
 800623c:	681a      	ldr	r2, [r3, #0]
 800623e:	68fb      	ldr	r3, [r7, #12]
 8006240:	681b      	ldr	r3, [r3, #0]
 8006242:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 8006246:	601a      	str	r2, [r3, #0]
        }

        /* Reset CRC Calculation */
        if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 8006248:	68fb      	ldr	r3, [r7, #12]
 800624a:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800624c:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8006250:	d10f      	bne.n	8006272 <SPI_WaitFlagStateUntilTimeout+0xbe>
        {
          SPI_RESET_CRC(hspi);
 8006252:	68fb      	ldr	r3, [r7, #12]
 8006254:	681b      	ldr	r3, [r3, #0]
 8006256:	681a      	ldr	r2, [r3, #0]
 8006258:	68fb      	ldr	r3, [r7, #12]
 800625a:	681b      	ldr	r3, [r3, #0]
 800625c:	f422 5200 	bic.w	r2, r2, #8192	@ 0x2000
 8006260:	601a      	str	r2, [r3, #0]
 8006262:	68fb      	ldr	r3, [r7, #12]
 8006264:	681b      	ldr	r3, [r3, #0]
 8006266:	681a      	ldr	r2, [r3, #0]
 8006268:	68fb      	ldr	r3, [r7, #12]
 800626a:	681b      	ldr	r3, [r3, #0]
 800626c:	f442 5200 	orr.w	r2, r2, #8192	@ 0x2000
 8006270:	601a      	str	r2, [r3, #0]
        }

        hspi->State = HAL_SPI_STATE_READY;
 8006272:	68fb      	ldr	r3, [r7, #12]
 8006274:	2201      	movs	r2, #1
 8006276:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51

        /* Process Unlocked */
        __HAL_UNLOCK(hspi);
 800627a:	68fb      	ldr	r3, [r7, #12]
 800627c:	2200      	movs	r2, #0
 800627e:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50

        return HAL_TIMEOUT;
 8006282:	2303      	movs	r3, #3
 8006284:	e017      	b.n	80062b6 <SPI_WaitFlagStateUntilTimeout+0x102>
      }
      /* If Systick is disabled or not incremented, deactivate timeout to go in disable loop procedure */
      if (count == 0U)
 8006286:	697b      	ldr	r3, [r7, #20]
 8006288:	2b00      	cmp	r3, #0
 800628a:	d101      	bne.n	8006290 <SPI_WaitFlagStateUntilTimeout+0xdc>
      {
        tmp_timeout = 0U;
 800628c:	2300      	movs	r3, #0
 800628e:	61fb      	str	r3, [r7, #28]
      }
      count--;
 8006290:	697b      	ldr	r3, [r7, #20]
 8006292:	3b01      	subs	r3, #1
 8006294:	617b      	str	r3, [r7, #20]
  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 8006296:	68fb      	ldr	r3, [r7, #12]
 8006298:	681b      	ldr	r3, [r3, #0]
 800629a:	689a      	ldr	r2, [r3, #8]
 800629c:	68bb      	ldr	r3, [r7, #8]
 800629e:	4013      	ands	r3, r2
 80062a0:	68ba      	ldr	r2, [r7, #8]
 80062a2:	429a      	cmp	r2, r3
 80062a4:	bf0c      	ite	eq
 80062a6:	2301      	moveq	r3, #1
 80062a8:	2300      	movne	r3, #0
 80062aa:	b2db      	uxtb	r3, r3
 80062ac:	461a      	mov	r2, r3
 80062ae:	79fb      	ldrb	r3, [r7, #7]
 80062b0:	429a      	cmp	r2, r3
 80062b2:	d19b      	bne.n	80061ec <SPI_WaitFlagStateUntilTimeout+0x38>
    }
  }

  return HAL_OK;
 80062b4:	2300      	movs	r3, #0
}
 80062b6:	4618      	mov	r0, r3
 80062b8:	3720      	adds	r7, #32
 80062ba:	46bd      	mov	sp, r7
 80062bc:	bd80      	pop	{r7, pc}
 80062be:	bf00      	nop
 80062c0:	20000018 	.word	0x20000018

080062c4 <SPI_EndRxTxTransaction>:
  * @param  Timeout Timeout duration
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_EndRxTxTransaction(SPI_HandleTypeDef *hspi, uint32_t Timeout, uint32_t Tickstart)
{
 80062c4:	b580      	push	{r7, lr}
 80062c6:	b088      	sub	sp, #32
 80062c8:	af02      	add	r7, sp, #8
 80062ca:	60f8      	str	r0, [r7, #12]
 80062cc:	60b9      	str	r1, [r7, #8]
 80062ce:	607a      	str	r2, [r7, #4]
  /* Wait until TXE flag */
  if(SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_TXE, SET, Timeout, Tickstart) != HAL_OK)
 80062d0:	687b      	ldr	r3, [r7, #4]
 80062d2:	9300      	str	r3, [sp, #0]
 80062d4:	68bb      	ldr	r3, [r7, #8]
 80062d6:	2201      	movs	r2, #1
 80062d8:	2102      	movs	r1, #2
 80062da:	68f8      	ldr	r0, [r7, #12]
 80062dc:	f7ff ff6a 	bl	80061b4 <SPI_WaitFlagStateUntilTimeout>
 80062e0:	4603      	mov	r3, r0
 80062e2:	2b00      	cmp	r3, #0
 80062e4:	d007      	beq.n	80062f6 <SPI_EndRxTxTransaction+0x32>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 80062e6:	68fb      	ldr	r3, [r7, #12]
 80062e8:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80062ea:	f043 0220 	orr.w	r2, r3, #32
 80062ee:	68fb      	ldr	r3, [r7, #12]
 80062f0:	655a      	str	r2, [r3, #84]	@ 0x54
    return HAL_TIMEOUT;
 80062f2:	2303      	movs	r3, #3
 80062f4:	e032      	b.n	800635c <SPI_EndRxTxTransaction+0x98>
  }

  /* Timeout in µs */
  __IO uint32_t count = SPI_BSY_FLAG_WORKAROUND_TIMEOUT * (SystemCoreClock / 24U / 1000000U);
 80062f6:	4b1b      	ldr	r3, [pc, #108]	@ (8006364 <SPI_EndRxTxTransaction+0xa0>)
 80062f8:	681b      	ldr	r3, [r3, #0]
 80062fa:	4a1b      	ldr	r2, [pc, #108]	@ (8006368 <SPI_EndRxTxTransaction+0xa4>)
 80062fc:	fba2 2303 	umull	r2, r3, r2, r3
 8006300:	0d5b      	lsrs	r3, r3, #21
 8006302:	f44f 727a 	mov.w	r2, #1000	@ 0x3e8
 8006306:	fb02 f303 	mul.w	r3, r2, r3
 800630a:	617b      	str	r3, [r7, #20]
  /* Erratasheet: BSY bit may stay high at the end of a data transfer in Slave mode */
  if (hspi->Init.Mode == SPI_MODE_MASTER)
 800630c:	68fb      	ldr	r3, [r7, #12]
 800630e:	685b      	ldr	r3, [r3, #4]
 8006310:	f5b3 7f82 	cmp.w	r3, #260	@ 0x104
 8006314:	d112      	bne.n	800633c <SPI_EndRxTxTransaction+0x78>
  {
    /* Control the BSY flag */
    if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_BSY, RESET, Timeout, Tickstart) != HAL_OK)
 8006316:	687b      	ldr	r3, [r7, #4]
 8006318:	9300      	str	r3, [sp, #0]
 800631a:	68bb      	ldr	r3, [r7, #8]
 800631c:	2200      	movs	r2, #0
 800631e:	2180      	movs	r1, #128	@ 0x80
 8006320:	68f8      	ldr	r0, [r7, #12]
 8006322:	f7ff ff47 	bl	80061b4 <SPI_WaitFlagStateUntilTimeout>
 8006326:	4603      	mov	r3, r0
 8006328:	2b00      	cmp	r3, #0
 800632a:	d016      	beq.n	800635a <SPI_EndRxTxTransaction+0x96>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 800632c:	68fb      	ldr	r3, [r7, #12]
 800632e:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8006330:	f043 0220 	orr.w	r2, r3, #32
 8006334:	68fb      	ldr	r3, [r7, #12]
 8006336:	655a      	str	r2, [r3, #84]	@ 0x54
      return HAL_TIMEOUT;
 8006338:	2303      	movs	r3, #3
 800633a:	e00f      	b.n	800635c <SPI_EndRxTxTransaction+0x98>
    * User have to calculate the timeout value to fit with the time of 1 byte transfer.
    * This time is directly link with the SPI clock from Master device.
    */
    do
    {
      if (count == 0U)
 800633c:	697b      	ldr	r3, [r7, #20]
 800633e:	2b00      	cmp	r3, #0
 8006340:	d00a      	beq.n	8006358 <SPI_EndRxTxTransaction+0x94>
      {
        break;
      }
      count--;
 8006342:	697b      	ldr	r3, [r7, #20]
 8006344:	3b01      	subs	r3, #1
 8006346:	617b      	str	r3, [r7, #20]
    } while (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_BSY) != RESET);
 8006348:	68fb      	ldr	r3, [r7, #12]
 800634a:	681b      	ldr	r3, [r3, #0]
 800634c:	689b      	ldr	r3, [r3, #8]
 800634e:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8006352:	2b80      	cmp	r3, #128	@ 0x80
 8006354:	d0f2      	beq.n	800633c <SPI_EndRxTxTransaction+0x78>
 8006356:	e000      	b.n	800635a <SPI_EndRxTxTransaction+0x96>
        break;
 8006358:	bf00      	nop
  }

  return HAL_OK;
 800635a:	2300      	movs	r3, #0
}
 800635c:	4618      	mov	r0, r3
 800635e:	3718      	adds	r7, #24
 8006360:	46bd      	mov	sp, r7
 8006362:	bd80      	pop	{r7, pc}
 8006364:	20000018 	.word	0x20000018
 8006368:	165e9f81 	.word	0x165e9f81

0800636c <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 800636c:	b580      	push	{r7, lr}
 800636e:	b082      	sub	sp, #8
 8006370:	af00      	add	r7, sp, #0
 8006372:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8006374:	687b      	ldr	r3, [r7, #4]
 8006376:	2b00      	cmp	r3, #0
 8006378:	d101      	bne.n	800637e <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 800637a:	2301      	movs	r3, #1
 800637c:	e041      	b.n	8006402 <HAL_TIM_Base_Init+0x96>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 800637e:	687b      	ldr	r3, [r7, #4]
 8006380:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8006384:	b2db      	uxtb	r3, r3
 8006386:	2b00      	cmp	r3, #0
 8006388:	d106      	bne.n	8006398 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 800638a:	687b      	ldr	r3, [r7, #4]
 800638c:	2200      	movs	r2, #0
 800638e:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 8006392:	6878      	ldr	r0, [r7, #4]
 8006394:	f7fc f938 	bl	8002608 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8006398:	687b      	ldr	r3, [r7, #4]
 800639a:	2202      	movs	r2, #2
 800639c:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 80063a0:	687b      	ldr	r3, [r7, #4]
 80063a2:	681a      	ldr	r2, [r3, #0]
 80063a4:	687b      	ldr	r3, [r7, #4]
 80063a6:	3304      	adds	r3, #4
 80063a8:	4619      	mov	r1, r3
 80063aa:	4610      	mov	r0, r2
 80063ac:	f000 f82e 	bl	800640c <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 80063b0:	687b      	ldr	r3, [r7, #4]
 80063b2:	2201      	movs	r2, #1
 80063b4:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80063b8:	687b      	ldr	r3, [r7, #4]
 80063ba:	2201      	movs	r2, #1
 80063bc:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 80063c0:	687b      	ldr	r3, [r7, #4]
 80063c2:	2201      	movs	r2, #1
 80063c4:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 80063c8:	687b      	ldr	r3, [r7, #4]
 80063ca:	2201      	movs	r2, #1
 80063cc:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 80063d0:	687b      	ldr	r3, [r7, #4]
 80063d2:	2201      	movs	r2, #1
 80063d4:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80063d8:	687b      	ldr	r3, [r7, #4]
 80063da:	2201      	movs	r2, #1
 80063dc:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 80063e0:	687b      	ldr	r3, [r7, #4]
 80063e2:	2201      	movs	r2, #1
 80063e4:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
 80063e8:	687b      	ldr	r3, [r7, #4]
 80063ea:	2201      	movs	r2, #1
 80063ec:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 80063f0:	687b      	ldr	r3, [r7, #4]
 80063f2:	2201      	movs	r2, #1
 80063f4:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 80063f8:	687b      	ldr	r3, [r7, #4]
 80063fa:	2201      	movs	r2, #1
 80063fc:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  return HAL_OK;
 8006400:	2300      	movs	r3, #0
}
 8006402:	4618      	mov	r0, r3
 8006404:	3708      	adds	r7, #8
 8006406:	46bd      	mov	sp, r7
 8006408:	bd80      	pop	{r7, pc}
	...

0800640c <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, const TIM_Base_InitTypeDef *Structure)
{
 800640c:	b480      	push	{r7}
 800640e:	b085      	sub	sp, #20
 8006410:	af00      	add	r7, sp, #0
 8006412:	6078      	str	r0, [r7, #4]
 8006414:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8006416:	687b      	ldr	r3, [r7, #4]
 8006418:	681b      	ldr	r3, [r3, #0]
 800641a:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 800641c:	687b      	ldr	r3, [r7, #4]
 800641e:	4a46      	ldr	r2, [pc, #280]	@ (8006538 <TIM_Base_SetConfig+0x12c>)
 8006420:	4293      	cmp	r3, r2
 8006422:	d013      	beq.n	800644c <TIM_Base_SetConfig+0x40>
 8006424:	687b      	ldr	r3, [r7, #4]
 8006426:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 800642a:	d00f      	beq.n	800644c <TIM_Base_SetConfig+0x40>
 800642c:	687b      	ldr	r3, [r7, #4]
 800642e:	4a43      	ldr	r2, [pc, #268]	@ (800653c <TIM_Base_SetConfig+0x130>)
 8006430:	4293      	cmp	r3, r2
 8006432:	d00b      	beq.n	800644c <TIM_Base_SetConfig+0x40>
 8006434:	687b      	ldr	r3, [r7, #4]
 8006436:	4a42      	ldr	r2, [pc, #264]	@ (8006540 <TIM_Base_SetConfig+0x134>)
 8006438:	4293      	cmp	r3, r2
 800643a:	d007      	beq.n	800644c <TIM_Base_SetConfig+0x40>
 800643c:	687b      	ldr	r3, [r7, #4]
 800643e:	4a41      	ldr	r2, [pc, #260]	@ (8006544 <TIM_Base_SetConfig+0x138>)
 8006440:	4293      	cmp	r3, r2
 8006442:	d003      	beq.n	800644c <TIM_Base_SetConfig+0x40>
 8006444:	687b      	ldr	r3, [r7, #4]
 8006446:	4a40      	ldr	r2, [pc, #256]	@ (8006548 <TIM_Base_SetConfig+0x13c>)
 8006448:	4293      	cmp	r3, r2
 800644a:	d108      	bne.n	800645e <TIM_Base_SetConfig+0x52>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 800644c:	68fb      	ldr	r3, [r7, #12]
 800644e:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8006452:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8006454:	683b      	ldr	r3, [r7, #0]
 8006456:	685b      	ldr	r3, [r3, #4]
 8006458:	68fa      	ldr	r2, [r7, #12]
 800645a:	4313      	orrs	r3, r2
 800645c:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 800645e:	687b      	ldr	r3, [r7, #4]
 8006460:	4a35      	ldr	r2, [pc, #212]	@ (8006538 <TIM_Base_SetConfig+0x12c>)
 8006462:	4293      	cmp	r3, r2
 8006464:	d02b      	beq.n	80064be <TIM_Base_SetConfig+0xb2>
 8006466:	687b      	ldr	r3, [r7, #4]
 8006468:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 800646c:	d027      	beq.n	80064be <TIM_Base_SetConfig+0xb2>
 800646e:	687b      	ldr	r3, [r7, #4]
 8006470:	4a32      	ldr	r2, [pc, #200]	@ (800653c <TIM_Base_SetConfig+0x130>)
 8006472:	4293      	cmp	r3, r2
 8006474:	d023      	beq.n	80064be <TIM_Base_SetConfig+0xb2>
 8006476:	687b      	ldr	r3, [r7, #4]
 8006478:	4a31      	ldr	r2, [pc, #196]	@ (8006540 <TIM_Base_SetConfig+0x134>)
 800647a:	4293      	cmp	r3, r2
 800647c:	d01f      	beq.n	80064be <TIM_Base_SetConfig+0xb2>
 800647e:	687b      	ldr	r3, [r7, #4]
 8006480:	4a30      	ldr	r2, [pc, #192]	@ (8006544 <TIM_Base_SetConfig+0x138>)
 8006482:	4293      	cmp	r3, r2
 8006484:	d01b      	beq.n	80064be <TIM_Base_SetConfig+0xb2>
 8006486:	687b      	ldr	r3, [r7, #4]
 8006488:	4a2f      	ldr	r2, [pc, #188]	@ (8006548 <TIM_Base_SetConfig+0x13c>)
 800648a:	4293      	cmp	r3, r2
 800648c:	d017      	beq.n	80064be <TIM_Base_SetConfig+0xb2>
 800648e:	687b      	ldr	r3, [r7, #4]
 8006490:	4a2e      	ldr	r2, [pc, #184]	@ (800654c <TIM_Base_SetConfig+0x140>)
 8006492:	4293      	cmp	r3, r2
 8006494:	d013      	beq.n	80064be <TIM_Base_SetConfig+0xb2>
 8006496:	687b      	ldr	r3, [r7, #4]
 8006498:	4a2d      	ldr	r2, [pc, #180]	@ (8006550 <TIM_Base_SetConfig+0x144>)
 800649a:	4293      	cmp	r3, r2
 800649c:	d00f      	beq.n	80064be <TIM_Base_SetConfig+0xb2>
 800649e:	687b      	ldr	r3, [r7, #4]
 80064a0:	4a2c      	ldr	r2, [pc, #176]	@ (8006554 <TIM_Base_SetConfig+0x148>)
 80064a2:	4293      	cmp	r3, r2
 80064a4:	d00b      	beq.n	80064be <TIM_Base_SetConfig+0xb2>
 80064a6:	687b      	ldr	r3, [r7, #4]
 80064a8:	4a2b      	ldr	r2, [pc, #172]	@ (8006558 <TIM_Base_SetConfig+0x14c>)
 80064aa:	4293      	cmp	r3, r2
 80064ac:	d007      	beq.n	80064be <TIM_Base_SetConfig+0xb2>
 80064ae:	687b      	ldr	r3, [r7, #4]
 80064b0:	4a2a      	ldr	r2, [pc, #168]	@ (800655c <TIM_Base_SetConfig+0x150>)
 80064b2:	4293      	cmp	r3, r2
 80064b4:	d003      	beq.n	80064be <TIM_Base_SetConfig+0xb2>
 80064b6:	687b      	ldr	r3, [r7, #4]
 80064b8:	4a29      	ldr	r2, [pc, #164]	@ (8006560 <TIM_Base_SetConfig+0x154>)
 80064ba:	4293      	cmp	r3, r2
 80064bc:	d108      	bne.n	80064d0 <TIM_Base_SetConfig+0xc4>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 80064be:	68fb      	ldr	r3, [r7, #12]
 80064c0:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 80064c4:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 80064c6:	683b      	ldr	r3, [r7, #0]
 80064c8:	68db      	ldr	r3, [r3, #12]
 80064ca:	68fa      	ldr	r2, [r7, #12]
 80064cc:	4313      	orrs	r3, r2
 80064ce:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 80064d0:	68fb      	ldr	r3, [r7, #12]
 80064d2:	f023 0280 	bic.w	r2, r3, #128	@ 0x80
 80064d6:	683b      	ldr	r3, [r7, #0]
 80064d8:	695b      	ldr	r3, [r3, #20]
 80064da:	4313      	orrs	r3, r2
 80064dc:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 80064de:	687b      	ldr	r3, [r7, #4]
 80064e0:	68fa      	ldr	r2, [r7, #12]
 80064e2:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 80064e4:	683b      	ldr	r3, [r7, #0]
 80064e6:	689a      	ldr	r2, [r3, #8]
 80064e8:	687b      	ldr	r3, [r7, #4]
 80064ea:	62da      	str	r2, [r3, #44]	@ 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 80064ec:	683b      	ldr	r3, [r7, #0]
 80064ee:	681a      	ldr	r2, [r3, #0]
 80064f0:	687b      	ldr	r3, [r7, #4]
 80064f2:	629a      	str	r2, [r3, #40]	@ 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 80064f4:	687b      	ldr	r3, [r7, #4]
 80064f6:	4a10      	ldr	r2, [pc, #64]	@ (8006538 <TIM_Base_SetConfig+0x12c>)
 80064f8:	4293      	cmp	r3, r2
 80064fa:	d003      	beq.n	8006504 <TIM_Base_SetConfig+0xf8>
 80064fc:	687b      	ldr	r3, [r7, #4]
 80064fe:	4a12      	ldr	r2, [pc, #72]	@ (8006548 <TIM_Base_SetConfig+0x13c>)
 8006500:	4293      	cmp	r3, r2
 8006502:	d103      	bne.n	800650c <TIM_Base_SetConfig+0x100>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8006504:	683b      	ldr	r3, [r7, #0]
 8006506:	691a      	ldr	r2, [r3, #16]
 8006508:	687b      	ldr	r3, [r7, #4]
 800650a:	631a      	str	r2, [r3, #48]	@ 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 800650c:	687b      	ldr	r3, [r7, #4]
 800650e:	2201      	movs	r2, #1
 8006510:	615a      	str	r2, [r3, #20]

  /* Check if the update flag is set after the Update Generation, if so clear the UIF flag */
  if (HAL_IS_BIT_SET(TIMx->SR, TIM_FLAG_UPDATE))
 8006512:	687b      	ldr	r3, [r7, #4]
 8006514:	691b      	ldr	r3, [r3, #16]
 8006516:	f003 0301 	and.w	r3, r3, #1
 800651a:	2b01      	cmp	r3, #1
 800651c:	d105      	bne.n	800652a <TIM_Base_SetConfig+0x11e>
  {
    /* Clear the update flag */
    CLEAR_BIT(TIMx->SR, TIM_FLAG_UPDATE);
 800651e:	687b      	ldr	r3, [r7, #4]
 8006520:	691b      	ldr	r3, [r3, #16]
 8006522:	f023 0201 	bic.w	r2, r3, #1
 8006526:	687b      	ldr	r3, [r7, #4]
 8006528:	611a      	str	r2, [r3, #16]
  }
}
 800652a:	bf00      	nop
 800652c:	3714      	adds	r7, #20
 800652e:	46bd      	mov	sp, r7
 8006530:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006534:	4770      	bx	lr
 8006536:	bf00      	nop
 8006538:	40010000 	.word	0x40010000
 800653c:	40000400 	.word	0x40000400
 8006540:	40000800 	.word	0x40000800
 8006544:	40000c00 	.word	0x40000c00
 8006548:	40010400 	.word	0x40010400
 800654c:	40014000 	.word	0x40014000
 8006550:	40014400 	.word	0x40014400
 8006554:	40014800 	.word	0x40014800
 8006558:	40001800 	.word	0x40001800
 800655c:	40001c00 	.word	0x40001c00
 8006560:	40002000 	.word	0x40002000

08006564 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        const TIM_MasterConfigTypeDef *sMasterConfig)
{
 8006564:	b480      	push	{r7}
 8006566:	b085      	sub	sp, #20
 8006568:	af00      	add	r7, sp, #0
 800656a:	6078      	str	r0, [r7, #4]
 800656c:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 800656e:	687b      	ldr	r3, [r7, #4]
 8006570:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8006574:	2b01      	cmp	r3, #1
 8006576:	d101      	bne.n	800657c <HAL_TIMEx_MasterConfigSynchronization+0x18>
 8006578:	2302      	movs	r3, #2
 800657a:	e05a      	b.n	8006632 <HAL_TIMEx_MasterConfigSynchronization+0xce>
 800657c:	687b      	ldr	r3, [r7, #4]
 800657e:	2201      	movs	r2, #1
 8006580:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 8006584:	687b      	ldr	r3, [r7, #4]
 8006586:	2202      	movs	r2, #2
 8006588:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 800658c:	687b      	ldr	r3, [r7, #4]
 800658e:	681b      	ldr	r3, [r3, #0]
 8006590:	685b      	ldr	r3, [r3, #4]
 8006592:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8006594:	687b      	ldr	r3, [r7, #4]
 8006596:	681b      	ldr	r3, [r3, #0]
 8006598:	689b      	ldr	r3, [r3, #8]
 800659a:	60bb      	str	r3, [r7, #8]

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 800659c:	68fb      	ldr	r3, [r7, #12]
 800659e:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 80065a2:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 80065a4:	683b      	ldr	r3, [r7, #0]
 80065a6:	681b      	ldr	r3, [r3, #0]
 80065a8:	68fa      	ldr	r2, [r7, #12]
 80065aa:	4313      	orrs	r3, r2
 80065ac:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 80065ae:	687b      	ldr	r3, [r7, #4]
 80065b0:	681b      	ldr	r3, [r3, #0]
 80065b2:	68fa      	ldr	r2, [r7, #12]
 80065b4:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 80065b6:	687b      	ldr	r3, [r7, #4]
 80065b8:	681b      	ldr	r3, [r3, #0]
 80065ba:	4a21      	ldr	r2, [pc, #132]	@ (8006640 <HAL_TIMEx_MasterConfigSynchronization+0xdc>)
 80065bc:	4293      	cmp	r3, r2
 80065be:	d022      	beq.n	8006606 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 80065c0:	687b      	ldr	r3, [r7, #4]
 80065c2:	681b      	ldr	r3, [r3, #0]
 80065c4:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 80065c8:	d01d      	beq.n	8006606 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 80065ca:	687b      	ldr	r3, [r7, #4]
 80065cc:	681b      	ldr	r3, [r3, #0]
 80065ce:	4a1d      	ldr	r2, [pc, #116]	@ (8006644 <HAL_TIMEx_MasterConfigSynchronization+0xe0>)
 80065d0:	4293      	cmp	r3, r2
 80065d2:	d018      	beq.n	8006606 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 80065d4:	687b      	ldr	r3, [r7, #4]
 80065d6:	681b      	ldr	r3, [r3, #0]
 80065d8:	4a1b      	ldr	r2, [pc, #108]	@ (8006648 <HAL_TIMEx_MasterConfigSynchronization+0xe4>)
 80065da:	4293      	cmp	r3, r2
 80065dc:	d013      	beq.n	8006606 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 80065de:	687b      	ldr	r3, [r7, #4]
 80065e0:	681b      	ldr	r3, [r3, #0]
 80065e2:	4a1a      	ldr	r2, [pc, #104]	@ (800664c <HAL_TIMEx_MasterConfigSynchronization+0xe8>)
 80065e4:	4293      	cmp	r3, r2
 80065e6:	d00e      	beq.n	8006606 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 80065e8:	687b      	ldr	r3, [r7, #4]
 80065ea:	681b      	ldr	r3, [r3, #0]
 80065ec:	4a18      	ldr	r2, [pc, #96]	@ (8006650 <HAL_TIMEx_MasterConfigSynchronization+0xec>)
 80065ee:	4293      	cmp	r3, r2
 80065f0:	d009      	beq.n	8006606 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 80065f2:	687b      	ldr	r3, [r7, #4]
 80065f4:	681b      	ldr	r3, [r3, #0]
 80065f6:	4a17      	ldr	r2, [pc, #92]	@ (8006654 <HAL_TIMEx_MasterConfigSynchronization+0xf0>)
 80065f8:	4293      	cmp	r3, r2
 80065fa:	d004      	beq.n	8006606 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 80065fc:	687b      	ldr	r3, [r7, #4]
 80065fe:	681b      	ldr	r3, [r3, #0]
 8006600:	4a15      	ldr	r2, [pc, #84]	@ (8006658 <HAL_TIMEx_MasterConfigSynchronization+0xf4>)
 8006602:	4293      	cmp	r3, r2
 8006604:	d10c      	bne.n	8006620 <HAL_TIMEx_MasterConfigSynchronization+0xbc>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 8006606:	68bb      	ldr	r3, [r7, #8]
 8006608:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 800660c:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 800660e:	683b      	ldr	r3, [r7, #0]
 8006610:	685b      	ldr	r3, [r3, #4]
 8006612:	68ba      	ldr	r2, [r7, #8]
 8006614:	4313      	orrs	r3, r2
 8006616:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 8006618:	687b      	ldr	r3, [r7, #4]
 800661a:	681b      	ldr	r3, [r3, #0]
 800661c:	68ba      	ldr	r2, [r7, #8]
 800661e:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 8006620:	687b      	ldr	r3, [r7, #4]
 8006622:	2201      	movs	r2, #1
 8006624:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  __HAL_UNLOCK(htim);
 8006628:	687b      	ldr	r3, [r7, #4]
 800662a:	2200      	movs	r2, #0
 800662c:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return HAL_OK;
 8006630:	2300      	movs	r3, #0
}
 8006632:	4618      	mov	r0, r3
 8006634:	3714      	adds	r7, #20
 8006636:	46bd      	mov	sp, r7
 8006638:	f85d 7b04 	ldr.w	r7, [sp], #4
 800663c:	4770      	bx	lr
 800663e:	bf00      	nop
 8006640:	40010000 	.word	0x40010000
 8006644:	40000400 	.word	0x40000400
 8006648:	40000800 	.word	0x40000800
 800664c:	40000c00 	.word	0x40000c00
 8006650:	40010400 	.word	0x40010400
 8006654:	40014000 	.word	0x40014000
 8006658:	40001800 	.word	0x40001800

0800665c <std>:
 800665c:	2300      	movs	r3, #0
 800665e:	b510      	push	{r4, lr}
 8006660:	4604      	mov	r4, r0
 8006662:	e9c0 3300 	strd	r3, r3, [r0]
 8006666:	e9c0 3304 	strd	r3, r3, [r0, #16]
 800666a:	6083      	str	r3, [r0, #8]
 800666c:	8181      	strh	r1, [r0, #12]
 800666e:	6643      	str	r3, [r0, #100]	@ 0x64
 8006670:	81c2      	strh	r2, [r0, #14]
 8006672:	6183      	str	r3, [r0, #24]
 8006674:	4619      	mov	r1, r3
 8006676:	2208      	movs	r2, #8
 8006678:	305c      	adds	r0, #92	@ 0x5c
 800667a:	f000 f99b 	bl	80069b4 <memset>
 800667e:	4b0d      	ldr	r3, [pc, #52]	@ (80066b4 <std+0x58>)
 8006680:	6263      	str	r3, [r4, #36]	@ 0x24
 8006682:	4b0d      	ldr	r3, [pc, #52]	@ (80066b8 <std+0x5c>)
 8006684:	62a3      	str	r3, [r4, #40]	@ 0x28
 8006686:	4b0d      	ldr	r3, [pc, #52]	@ (80066bc <std+0x60>)
 8006688:	62e3      	str	r3, [r4, #44]	@ 0x2c
 800668a:	4b0d      	ldr	r3, [pc, #52]	@ (80066c0 <std+0x64>)
 800668c:	6323      	str	r3, [r4, #48]	@ 0x30
 800668e:	4b0d      	ldr	r3, [pc, #52]	@ (80066c4 <std+0x68>)
 8006690:	6224      	str	r4, [r4, #32]
 8006692:	429c      	cmp	r4, r3
 8006694:	d006      	beq.n	80066a4 <std+0x48>
 8006696:	f103 0268 	add.w	r2, r3, #104	@ 0x68
 800669a:	4294      	cmp	r4, r2
 800669c:	d002      	beq.n	80066a4 <std+0x48>
 800669e:	33d0      	adds	r3, #208	@ 0xd0
 80066a0:	429c      	cmp	r4, r3
 80066a2:	d105      	bne.n	80066b0 <std+0x54>
 80066a4:	f104 0058 	add.w	r0, r4, #88	@ 0x58
 80066a8:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 80066ac:	f000 b9fa 	b.w	8006aa4 <__retarget_lock_init_recursive>
 80066b0:	bd10      	pop	{r4, pc}
 80066b2:	bf00      	nop
 80066b4:	08006805 	.word	0x08006805
 80066b8:	08006827 	.word	0x08006827
 80066bc:	0800685f 	.word	0x0800685f
 80066c0:	08006883 	.word	0x08006883
 80066c4:	20025cc4 	.word	0x20025cc4

080066c8 <stdio_exit_handler>:
 80066c8:	4a02      	ldr	r2, [pc, #8]	@ (80066d4 <stdio_exit_handler+0xc>)
 80066ca:	4903      	ldr	r1, [pc, #12]	@ (80066d8 <stdio_exit_handler+0x10>)
 80066cc:	4803      	ldr	r0, [pc, #12]	@ (80066dc <stdio_exit_handler+0x14>)
 80066ce:	f000 b869 	b.w	80067a4 <_fwalk_sglue>
 80066d2:	bf00      	nop
 80066d4:	20000024 	.word	0x20000024
 80066d8:	08007345 	.word	0x08007345
 80066dc:	20000034 	.word	0x20000034

080066e0 <cleanup_stdio>:
 80066e0:	6841      	ldr	r1, [r0, #4]
 80066e2:	4b0c      	ldr	r3, [pc, #48]	@ (8006714 <cleanup_stdio+0x34>)
 80066e4:	4299      	cmp	r1, r3
 80066e6:	b510      	push	{r4, lr}
 80066e8:	4604      	mov	r4, r0
 80066ea:	d001      	beq.n	80066f0 <cleanup_stdio+0x10>
 80066ec:	f000 fe2a 	bl	8007344 <_fflush_r>
 80066f0:	68a1      	ldr	r1, [r4, #8]
 80066f2:	4b09      	ldr	r3, [pc, #36]	@ (8006718 <cleanup_stdio+0x38>)
 80066f4:	4299      	cmp	r1, r3
 80066f6:	d002      	beq.n	80066fe <cleanup_stdio+0x1e>
 80066f8:	4620      	mov	r0, r4
 80066fa:	f000 fe23 	bl	8007344 <_fflush_r>
 80066fe:	68e1      	ldr	r1, [r4, #12]
 8006700:	4b06      	ldr	r3, [pc, #24]	@ (800671c <cleanup_stdio+0x3c>)
 8006702:	4299      	cmp	r1, r3
 8006704:	d004      	beq.n	8006710 <cleanup_stdio+0x30>
 8006706:	4620      	mov	r0, r4
 8006708:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800670c:	f000 be1a 	b.w	8007344 <_fflush_r>
 8006710:	bd10      	pop	{r4, pc}
 8006712:	bf00      	nop
 8006714:	20025cc4 	.word	0x20025cc4
 8006718:	20025d2c 	.word	0x20025d2c
 800671c:	20025d94 	.word	0x20025d94

08006720 <global_stdio_init.part.0>:
 8006720:	b510      	push	{r4, lr}
 8006722:	4b0b      	ldr	r3, [pc, #44]	@ (8006750 <global_stdio_init.part.0+0x30>)
 8006724:	4c0b      	ldr	r4, [pc, #44]	@ (8006754 <global_stdio_init.part.0+0x34>)
 8006726:	4a0c      	ldr	r2, [pc, #48]	@ (8006758 <global_stdio_init.part.0+0x38>)
 8006728:	601a      	str	r2, [r3, #0]
 800672a:	4620      	mov	r0, r4
 800672c:	2200      	movs	r2, #0
 800672e:	2104      	movs	r1, #4
 8006730:	f7ff ff94 	bl	800665c <std>
 8006734:	f104 0068 	add.w	r0, r4, #104	@ 0x68
 8006738:	2201      	movs	r2, #1
 800673a:	2109      	movs	r1, #9
 800673c:	f7ff ff8e 	bl	800665c <std>
 8006740:	f104 00d0 	add.w	r0, r4, #208	@ 0xd0
 8006744:	2202      	movs	r2, #2
 8006746:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800674a:	2112      	movs	r1, #18
 800674c:	f7ff bf86 	b.w	800665c <std>
 8006750:	20025dfc 	.word	0x20025dfc
 8006754:	20025cc4 	.word	0x20025cc4
 8006758:	080066c9 	.word	0x080066c9

0800675c <__sfp_lock_acquire>:
 800675c:	4801      	ldr	r0, [pc, #4]	@ (8006764 <__sfp_lock_acquire+0x8>)
 800675e:	f000 b9a2 	b.w	8006aa6 <__retarget_lock_acquire_recursive>
 8006762:	bf00      	nop
 8006764:	20025e05 	.word	0x20025e05

08006768 <__sfp_lock_release>:
 8006768:	4801      	ldr	r0, [pc, #4]	@ (8006770 <__sfp_lock_release+0x8>)
 800676a:	f000 b99d 	b.w	8006aa8 <__retarget_lock_release_recursive>
 800676e:	bf00      	nop
 8006770:	20025e05 	.word	0x20025e05

08006774 <__sinit>:
 8006774:	b510      	push	{r4, lr}
 8006776:	4604      	mov	r4, r0
 8006778:	f7ff fff0 	bl	800675c <__sfp_lock_acquire>
 800677c:	6a23      	ldr	r3, [r4, #32]
 800677e:	b11b      	cbz	r3, 8006788 <__sinit+0x14>
 8006780:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8006784:	f7ff bff0 	b.w	8006768 <__sfp_lock_release>
 8006788:	4b04      	ldr	r3, [pc, #16]	@ (800679c <__sinit+0x28>)
 800678a:	6223      	str	r3, [r4, #32]
 800678c:	4b04      	ldr	r3, [pc, #16]	@ (80067a0 <__sinit+0x2c>)
 800678e:	681b      	ldr	r3, [r3, #0]
 8006790:	2b00      	cmp	r3, #0
 8006792:	d1f5      	bne.n	8006780 <__sinit+0xc>
 8006794:	f7ff ffc4 	bl	8006720 <global_stdio_init.part.0>
 8006798:	e7f2      	b.n	8006780 <__sinit+0xc>
 800679a:	bf00      	nop
 800679c:	080066e1 	.word	0x080066e1
 80067a0:	20025dfc 	.word	0x20025dfc

080067a4 <_fwalk_sglue>:
 80067a4:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 80067a8:	4607      	mov	r7, r0
 80067aa:	4688      	mov	r8, r1
 80067ac:	4614      	mov	r4, r2
 80067ae:	2600      	movs	r6, #0
 80067b0:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 80067b4:	f1b9 0901 	subs.w	r9, r9, #1
 80067b8:	d505      	bpl.n	80067c6 <_fwalk_sglue+0x22>
 80067ba:	6824      	ldr	r4, [r4, #0]
 80067bc:	2c00      	cmp	r4, #0
 80067be:	d1f7      	bne.n	80067b0 <_fwalk_sglue+0xc>
 80067c0:	4630      	mov	r0, r6
 80067c2:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 80067c6:	89ab      	ldrh	r3, [r5, #12]
 80067c8:	2b01      	cmp	r3, #1
 80067ca:	d907      	bls.n	80067dc <_fwalk_sglue+0x38>
 80067cc:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 80067d0:	3301      	adds	r3, #1
 80067d2:	d003      	beq.n	80067dc <_fwalk_sglue+0x38>
 80067d4:	4629      	mov	r1, r5
 80067d6:	4638      	mov	r0, r7
 80067d8:	47c0      	blx	r8
 80067da:	4306      	orrs	r6, r0
 80067dc:	3568      	adds	r5, #104	@ 0x68
 80067de:	e7e9      	b.n	80067b4 <_fwalk_sglue+0x10>

080067e0 <iprintf>:
 80067e0:	b40f      	push	{r0, r1, r2, r3}
 80067e2:	b507      	push	{r0, r1, r2, lr}
 80067e4:	4906      	ldr	r1, [pc, #24]	@ (8006800 <iprintf+0x20>)
 80067e6:	ab04      	add	r3, sp, #16
 80067e8:	6808      	ldr	r0, [r1, #0]
 80067ea:	f853 2b04 	ldr.w	r2, [r3], #4
 80067ee:	6881      	ldr	r1, [r0, #8]
 80067f0:	9301      	str	r3, [sp, #4]
 80067f2:	f000 fa7d 	bl	8006cf0 <_vfiprintf_r>
 80067f6:	b003      	add	sp, #12
 80067f8:	f85d eb04 	ldr.w	lr, [sp], #4
 80067fc:	b004      	add	sp, #16
 80067fe:	4770      	bx	lr
 8006800:	20000030 	.word	0x20000030

08006804 <__sread>:
 8006804:	b510      	push	{r4, lr}
 8006806:	460c      	mov	r4, r1
 8006808:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800680c:	f000 f8fc 	bl	8006a08 <_read_r>
 8006810:	2800      	cmp	r0, #0
 8006812:	bfab      	itete	ge
 8006814:	6d63      	ldrge	r3, [r4, #84]	@ 0x54
 8006816:	89a3      	ldrhlt	r3, [r4, #12]
 8006818:	181b      	addge	r3, r3, r0
 800681a:	f423 5380 	biclt.w	r3, r3, #4096	@ 0x1000
 800681e:	bfac      	ite	ge
 8006820:	6563      	strge	r3, [r4, #84]	@ 0x54
 8006822:	81a3      	strhlt	r3, [r4, #12]
 8006824:	bd10      	pop	{r4, pc}

08006826 <__swrite>:
 8006826:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800682a:	461f      	mov	r7, r3
 800682c:	898b      	ldrh	r3, [r1, #12]
 800682e:	05db      	lsls	r3, r3, #23
 8006830:	4605      	mov	r5, r0
 8006832:	460c      	mov	r4, r1
 8006834:	4616      	mov	r6, r2
 8006836:	d505      	bpl.n	8006844 <__swrite+0x1e>
 8006838:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800683c:	2302      	movs	r3, #2
 800683e:	2200      	movs	r2, #0
 8006840:	f000 f8d0 	bl	80069e4 <_lseek_r>
 8006844:	89a3      	ldrh	r3, [r4, #12]
 8006846:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 800684a:	f423 5380 	bic.w	r3, r3, #4096	@ 0x1000
 800684e:	81a3      	strh	r3, [r4, #12]
 8006850:	4632      	mov	r2, r6
 8006852:	463b      	mov	r3, r7
 8006854:	4628      	mov	r0, r5
 8006856:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 800685a:	f000 b8e7 	b.w	8006a2c <_write_r>

0800685e <__sseek>:
 800685e:	b510      	push	{r4, lr}
 8006860:	460c      	mov	r4, r1
 8006862:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8006866:	f000 f8bd 	bl	80069e4 <_lseek_r>
 800686a:	1c43      	adds	r3, r0, #1
 800686c:	89a3      	ldrh	r3, [r4, #12]
 800686e:	bf15      	itete	ne
 8006870:	6560      	strne	r0, [r4, #84]	@ 0x54
 8006872:	f423 5380 	biceq.w	r3, r3, #4096	@ 0x1000
 8006876:	f443 5380 	orrne.w	r3, r3, #4096	@ 0x1000
 800687a:	81a3      	strheq	r3, [r4, #12]
 800687c:	bf18      	it	ne
 800687e:	81a3      	strhne	r3, [r4, #12]
 8006880:	bd10      	pop	{r4, pc}

08006882 <__sclose>:
 8006882:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8006886:	f000 b89d 	b.w	80069c4 <_close_r>

0800688a <__swbuf_r>:
 800688a:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800688c:	460e      	mov	r6, r1
 800688e:	4614      	mov	r4, r2
 8006890:	4605      	mov	r5, r0
 8006892:	b118      	cbz	r0, 800689c <__swbuf_r+0x12>
 8006894:	6a03      	ldr	r3, [r0, #32]
 8006896:	b90b      	cbnz	r3, 800689c <__swbuf_r+0x12>
 8006898:	f7ff ff6c 	bl	8006774 <__sinit>
 800689c:	69a3      	ldr	r3, [r4, #24]
 800689e:	60a3      	str	r3, [r4, #8]
 80068a0:	89a3      	ldrh	r3, [r4, #12]
 80068a2:	071a      	lsls	r2, r3, #28
 80068a4:	d501      	bpl.n	80068aa <__swbuf_r+0x20>
 80068a6:	6923      	ldr	r3, [r4, #16]
 80068a8:	b943      	cbnz	r3, 80068bc <__swbuf_r+0x32>
 80068aa:	4621      	mov	r1, r4
 80068ac:	4628      	mov	r0, r5
 80068ae:	f000 f82b 	bl	8006908 <__swsetup_r>
 80068b2:	b118      	cbz	r0, 80068bc <__swbuf_r+0x32>
 80068b4:	f04f 37ff 	mov.w	r7, #4294967295
 80068b8:	4638      	mov	r0, r7
 80068ba:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 80068bc:	6823      	ldr	r3, [r4, #0]
 80068be:	6922      	ldr	r2, [r4, #16]
 80068c0:	1a98      	subs	r0, r3, r2
 80068c2:	6963      	ldr	r3, [r4, #20]
 80068c4:	b2f6      	uxtb	r6, r6
 80068c6:	4283      	cmp	r3, r0
 80068c8:	4637      	mov	r7, r6
 80068ca:	dc05      	bgt.n	80068d8 <__swbuf_r+0x4e>
 80068cc:	4621      	mov	r1, r4
 80068ce:	4628      	mov	r0, r5
 80068d0:	f000 fd38 	bl	8007344 <_fflush_r>
 80068d4:	2800      	cmp	r0, #0
 80068d6:	d1ed      	bne.n	80068b4 <__swbuf_r+0x2a>
 80068d8:	68a3      	ldr	r3, [r4, #8]
 80068da:	3b01      	subs	r3, #1
 80068dc:	60a3      	str	r3, [r4, #8]
 80068de:	6823      	ldr	r3, [r4, #0]
 80068e0:	1c5a      	adds	r2, r3, #1
 80068e2:	6022      	str	r2, [r4, #0]
 80068e4:	701e      	strb	r6, [r3, #0]
 80068e6:	6962      	ldr	r2, [r4, #20]
 80068e8:	1c43      	adds	r3, r0, #1
 80068ea:	429a      	cmp	r2, r3
 80068ec:	d004      	beq.n	80068f8 <__swbuf_r+0x6e>
 80068ee:	89a3      	ldrh	r3, [r4, #12]
 80068f0:	07db      	lsls	r3, r3, #31
 80068f2:	d5e1      	bpl.n	80068b8 <__swbuf_r+0x2e>
 80068f4:	2e0a      	cmp	r6, #10
 80068f6:	d1df      	bne.n	80068b8 <__swbuf_r+0x2e>
 80068f8:	4621      	mov	r1, r4
 80068fa:	4628      	mov	r0, r5
 80068fc:	f000 fd22 	bl	8007344 <_fflush_r>
 8006900:	2800      	cmp	r0, #0
 8006902:	d0d9      	beq.n	80068b8 <__swbuf_r+0x2e>
 8006904:	e7d6      	b.n	80068b4 <__swbuf_r+0x2a>
	...

08006908 <__swsetup_r>:
 8006908:	b538      	push	{r3, r4, r5, lr}
 800690a:	4b29      	ldr	r3, [pc, #164]	@ (80069b0 <__swsetup_r+0xa8>)
 800690c:	4605      	mov	r5, r0
 800690e:	6818      	ldr	r0, [r3, #0]
 8006910:	460c      	mov	r4, r1
 8006912:	b118      	cbz	r0, 800691c <__swsetup_r+0x14>
 8006914:	6a03      	ldr	r3, [r0, #32]
 8006916:	b90b      	cbnz	r3, 800691c <__swsetup_r+0x14>
 8006918:	f7ff ff2c 	bl	8006774 <__sinit>
 800691c:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8006920:	0719      	lsls	r1, r3, #28
 8006922:	d422      	bmi.n	800696a <__swsetup_r+0x62>
 8006924:	06da      	lsls	r2, r3, #27
 8006926:	d407      	bmi.n	8006938 <__swsetup_r+0x30>
 8006928:	2209      	movs	r2, #9
 800692a:	602a      	str	r2, [r5, #0]
 800692c:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8006930:	81a3      	strh	r3, [r4, #12]
 8006932:	f04f 30ff 	mov.w	r0, #4294967295
 8006936:	e033      	b.n	80069a0 <__swsetup_r+0x98>
 8006938:	0758      	lsls	r0, r3, #29
 800693a:	d512      	bpl.n	8006962 <__swsetup_r+0x5a>
 800693c:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 800693e:	b141      	cbz	r1, 8006952 <__swsetup_r+0x4a>
 8006940:	f104 0344 	add.w	r3, r4, #68	@ 0x44
 8006944:	4299      	cmp	r1, r3
 8006946:	d002      	beq.n	800694e <__swsetup_r+0x46>
 8006948:	4628      	mov	r0, r5
 800694a:	f000 f8af 	bl	8006aac <_free_r>
 800694e:	2300      	movs	r3, #0
 8006950:	6363      	str	r3, [r4, #52]	@ 0x34
 8006952:	89a3      	ldrh	r3, [r4, #12]
 8006954:	f023 0324 	bic.w	r3, r3, #36	@ 0x24
 8006958:	81a3      	strh	r3, [r4, #12]
 800695a:	2300      	movs	r3, #0
 800695c:	6063      	str	r3, [r4, #4]
 800695e:	6923      	ldr	r3, [r4, #16]
 8006960:	6023      	str	r3, [r4, #0]
 8006962:	89a3      	ldrh	r3, [r4, #12]
 8006964:	f043 0308 	orr.w	r3, r3, #8
 8006968:	81a3      	strh	r3, [r4, #12]
 800696a:	6923      	ldr	r3, [r4, #16]
 800696c:	b94b      	cbnz	r3, 8006982 <__swsetup_r+0x7a>
 800696e:	89a3      	ldrh	r3, [r4, #12]
 8006970:	f403 7320 	and.w	r3, r3, #640	@ 0x280
 8006974:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8006978:	d003      	beq.n	8006982 <__swsetup_r+0x7a>
 800697a:	4621      	mov	r1, r4
 800697c:	4628      	mov	r0, r5
 800697e:	f000 fd2f 	bl	80073e0 <__smakebuf_r>
 8006982:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8006986:	f013 0201 	ands.w	r2, r3, #1
 800698a:	d00a      	beq.n	80069a2 <__swsetup_r+0x9a>
 800698c:	2200      	movs	r2, #0
 800698e:	60a2      	str	r2, [r4, #8]
 8006990:	6962      	ldr	r2, [r4, #20]
 8006992:	4252      	negs	r2, r2
 8006994:	61a2      	str	r2, [r4, #24]
 8006996:	6922      	ldr	r2, [r4, #16]
 8006998:	b942      	cbnz	r2, 80069ac <__swsetup_r+0xa4>
 800699a:	f013 0080 	ands.w	r0, r3, #128	@ 0x80
 800699e:	d1c5      	bne.n	800692c <__swsetup_r+0x24>
 80069a0:	bd38      	pop	{r3, r4, r5, pc}
 80069a2:	0799      	lsls	r1, r3, #30
 80069a4:	bf58      	it	pl
 80069a6:	6962      	ldrpl	r2, [r4, #20]
 80069a8:	60a2      	str	r2, [r4, #8]
 80069aa:	e7f4      	b.n	8006996 <__swsetup_r+0x8e>
 80069ac:	2000      	movs	r0, #0
 80069ae:	e7f7      	b.n	80069a0 <__swsetup_r+0x98>
 80069b0:	20000030 	.word	0x20000030

080069b4 <memset>:
 80069b4:	4402      	add	r2, r0
 80069b6:	4603      	mov	r3, r0
 80069b8:	4293      	cmp	r3, r2
 80069ba:	d100      	bne.n	80069be <memset+0xa>
 80069bc:	4770      	bx	lr
 80069be:	f803 1b01 	strb.w	r1, [r3], #1
 80069c2:	e7f9      	b.n	80069b8 <memset+0x4>

080069c4 <_close_r>:
 80069c4:	b538      	push	{r3, r4, r5, lr}
 80069c6:	4d06      	ldr	r5, [pc, #24]	@ (80069e0 <_close_r+0x1c>)
 80069c8:	2300      	movs	r3, #0
 80069ca:	4604      	mov	r4, r0
 80069cc:	4608      	mov	r0, r1
 80069ce:	602b      	str	r3, [r5, #0]
 80069d0:	f7fc fa38 	bl	8002e44 <_close>
 80069d4:	1c43      	adds	r3, r0, #1
 80069d6:	d102      	bne.n	80069de <_close_r+0x1a>
 80069d8:	682b      	ldr	r3, [r5, #0]
 80069da:	b103      	cbz	r3, 80069de <_close_r+0x1a>
 80069dc:	6023      	str	r3, [r4, #0]
 80069de:	bd38      	pop	{r3, r4, r5, pc}
 80069e0:	20025e00 	.word	0x20025e00

080069e4 <_lseek_r>:
 80069e4:	b538      	push	{r3, r4, r5, lr}
 80069e6:	4d07      	ldr	r5, [pc, #28]	@ (8006a04 <_lseek_r+0x20>)
 80069e8:	4604      	mov	r4, r0
 80069ea:	4608      	mov	r0, r1
 80069ec:	4611      	mov	r1, r2
 80069ee:	2200      	movs	r2, #0
 80069f0:	602a      	str	r2, [r5, #0]
 80069f2:	461a      	mov	r2, r3
 80069f4:	f7fc fa4d 	bl	8002e92 <_lseek>
 80069f8:	1c43      	adds	r3, r0, #1
 80069fa:	d102      	bne.n	8006a02 <_lseek_r+0x1e>
 80069fc:	682b      	ldr	r3, [r5, #0]
 80069fe:	b103      	cbz	r3, 8006a02 <_lseek_r+0x1e>
 8006a00:	6023      	str	r3, [r4, #0]
 8006a02:	bd38      	pop	{r3, r4, r5, pc}
 8006a04:	20025e00 	.word	0x20025e00

08006a08 <_read_r>:
 8006a08:	b538      	push	{r3, r4, r5, lr}
 8006a0a:	4d07      	ldr	r5, [pc, #28]	@ (8006a28 <_read_r+0x20>)
 8006a0c:	4604      	mov	r4, r0
 8006a0e:	4608      	mov	r0, r1
 8006a10:	4611      	mov	r1, r2
 8006a12:	2200      	movs	r2, #0
 8006a14:	602a      	str	r2, [r5, #0]
 8006a16:	461a      	mov	r2, r3
 8006a18:	f7fc f9db 	bl	8002dd2 <_read>
 8006a1c:	1c43      	adds	r3, r0, #1
 8006a1e:	d102      	bne.n	8006a26 <_read_r+0x1e>
 8006a20:	682b      	ldr	r3, [r5, #0]
 8006a22:	b103      	cbz	r3, 8006a26 <_read_r+0x1e>
 8006a24:	6023      	str	r3, [r4, #0]
 8006a26:	bd38      	pop	{r3, r4, r5, pc}
 8006a28:	20025e00 	.word	0x20025e00

08006a2c <_write_r>:
 8006a2c:	b538      	push	{r3, r4, r5, lr}
 8006a2e:	4d07      	ldr	r5, [pc, #28]	@ (8006a4c <_write_r+0x20>)
 8006a30:	4604      	mov	r4, r0
 8006a32:	4608      	mov	r0, r1
 8006a34:	4611      	mov	r1, r2
 8006a36:	2200      	movs	r2, #0
 8006a38:	602a      	str	r2, [r5, #0]
 8006a3a:	461a      	mov	r2, r3
 8006a3c:	f7fc f9e6 	bl	8002e0c <_write>
 8006a40:	1c43      	adds	r3, r0, #1
 8006a42:	d102      	bne.n	8006a4a <_write_r+0x1e>
 8006a44:	682b      	ldr	r3, [r5, #0]
 8006a46:	b103      	cbz	r3, 8006a4a <_write_r+0x1e>
 8006a48:	6023      	str	r3, [r4, #0]
 8006a4a:	bd38      	pop	{r3, r4, r5, pc}
 8006a4c:	20025e00 	.word	0x20025e00

08006a50 <__errno>:
 8006a50:	4b01      	ldr	r3, [pc, #4]	@ (8006a58 <__errno+0x8>)
 8006a52:	6818      	ldr	r0, [r3, #0]
 8006a54:	4770      	bx	lr
 8006a56:	bf00      	nop
 8006a58:	20000030 	.word	0x20000030

08006a5c <__libc_init_array>:
 8006a5c:	b570      	push	{r4, r5, r6, lr}
 8006a5e:	4d0d      	ldr	r5, [pc, #52]	@ (8006a94 <__libc_init_array+0x38>)
 8006a60:	4c0d      	ldr	r4, [pc, #52]	@ (8006a98 <__libc_init_array+0x3c>)
 8006a62:	1b64      	subs	r4, r4, r5
 8006a64:	10a4      	asrs	r4, r4, #2
 8006a66:	2600      	movs	r6, #0
 8006a68:	42a6      	cmp	r6, r4
 8006a6a:	d109      	bne.n	8006a80 <__libc_init_array+0x24>
 8006a6c:	4d0b      	ldr	r5, [pc, #44]	@ (8006a9c <__libc_init_array+0x40>)
 8006a6e:	4c0c      	ldr	r4, [pc, #48]	@ (8006aa0 <__libc_init_array+0x44>)
 8006a70:	f000 fd24 	bl	80074bc <_init>
 8006a74:	1b64      	subs	r4, r4, r5
 8006a76:	10a4      	asrs	r4, r4, #2
 8006a78:	2600      	movs	r6, #0
 8006a7a:	42a6      	cmp	r6, r4
 8006a7c:	d105      	bne.n	8006a8a <__libc_init_array+0x2e>
 8006a7e:	bd70      	pop	{r4, r5, r6, pc}
 8006a80:	f855 3b04 	ldr.w	r3, [r5], #4
 8006a84:	4798      	blx	r3
 8006a86:	3601      	adds	r6, #1
 8006a88:	e7ee      	b.n	8006a68 <__libc_init_array+0xc>
 8006a8a:	f855 3b04 	ldr.w	r3, [r5], #4
 8006a8e:	4798      	blx	r3
 8006a90:	3601      	adds	r6, #1
 8006a92:	e7f2      	b.n	8006a7a <__libc_init_array+0x1e>
 8006a94:	0800873c 	.word	0x0800873c
 8006a98:	0800873c 	.word	0x0800873c
 8006a9c:	0800873c 	.word	0x0800873c
 8006aa0:	08008740 	.word	0x08008740

08006aa4 <__retarget_lock_init_recursive>:
 8006aa4:	4770      	bx	lr

08006aa6 <__retarget_lock_acquire_recursive>:
 8006aa6:	4770      	bx	lr

08006aa8 <__retarget_lock_release_recursive>:
 8006aa8:	4770      	bx	lr
	...

08006aac <_free_r>:
 8006aac:	b538      	push	{r3, r4, r5, lr}
 8006aae:	4605      	mov	r5, r0
 8006ab0:	2900      	cmp	r1, #0
 8006ab2:	d041      	beq.n	8006b38 <_free_r+0x8c>
 8006ab4:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8006ab8:	1f0c      	subs	r4, r1, #4
 8006aba:	2b00      	cmp	r3, #0
 8006abc:	bfb8      	it	lt
 8006abe:	18e4      	addlt	r4, r4, r3
 8006ac0:	f000 f8e0 	bl	8006c84 <__malloc_lock>
 8006ac4:	4a1d      	ldr	r2, [pc, #116]	@ (8006b3c <_free_r+0x90>)
 8006ac6:	6813      	ldr	r3, [r2, #0]
 8006ac8:	b933      	cbnz	r3, 8006ad8 <_free_r+0x2c>
 8006aca:	6063      	str	r3, [r4, #4]
 8006acc:	6014      	str	r4, [r2, #0]
 8006ace:	4628      	mov	r0, r5
 8006ad0:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8006ad4:	f000 b8dc 	b.w	8006c90 <__malloc_unlock>
 8006ad8:	42a3      	cmp	r3, r4
 8006ada:	d908      	bls.n	8006aee <_free_r+0x42>
 8006adc:	6820      	ldr	r0, [r4, #0]
 8006ade:	1821      	adds	r1, r4, r0
 8006ae0:	428b      	cmp	r3, r1
 8006ae2:	bf01      	itttt	eq
 8006ae4:	6819      	ldreq	r1, [r3, #0]
 8006ae6:	685b      	ldreq	r3, [r3, #4]
 8006ae8:	1809      	addeq	r1, r1, r0
 8006aea:	6021      	streq	r1, [r4, #0]
 8006aec:	e7ed      	b.n	8006aca <_free_r+0x1e>
 8006aee:	461a      	mov	r2, r3
 8006af0:	685b      	ldr	r3, [r3, #4]
 8006af2:	b10b      	cbz	r3, 8006af8 <_free_r+0x4c>
 8006af4:	42a3      	cmp	r3, r4
 8006af6:	d9fa      	bls.n	8006aee <_free_r+0x42>
 8006af8:	6811      	ldr	r1, [r2, #0]
 8006afa:	1850      	adds	r0, r2, r1
 8006afc:	42a0      	cmp	r0, r4
 8006afe:	d10b      	bne.n	8006b18 <_free_r+0x6c>
 8006b00:	6820      	ldr	r0, [r4, #0]
 8006b02:	4401      	add	r1, r0
 8006b04:	1850      	adds	r0, r2, r1
 8006b06:	4283      	cmp	r3, r0
 8006b08:	6011      	str	r1, [r2, #0]
 8006b0a:	d1e0      	bne.n	8006ace <_free_r+0x22>
 8006b0c:	6818      	ldr	r0, [r3, #0]
 8006b0e:	685b      	ldr	r3, [r3, #4]
 8006b10:	6053      	str	r3, [r2, #4]
 8006b12:	4408      	add	r0, r1
 8006b14:	6010      	str	r0, [r2, #0]
 8006b16:	e7da      	b.n	8006ace <_free_r+0x22>
 8006b18:	d902      	bls.n	8006b20 <_free_r+0x74>
 8006b1a:	230c      	movs	r3, #12
 8006b1c:	602b      	str	r3, [r5, #0]
 8006b1e:	e7d6      	b.n	8006ace <_free_r+0x22>
 8006b20:	6820      	ldr	r0, [r4, #0]
 8006b22:	1821      	adds	r1, r4, r0
 8006b24:	428b      	cmp	r3, r1
 8006b26:	bf04      	itt	eq
 8006b28:	6819      	ldreq	r1, [r3, #0]
 8006b2a:	685b      	ldreq	r3, [r3, #4]
 8006b2c:	6063      	str	r3, [r4, #4]
 8006b2e:	bf04      	itt	eq
 8006b30:	1809      	addeq	r1, r1, r0
 8006b32:	6021      	streq	r1, [r4, #0]
 8006b34:	6054      	str	r4, [r2, #4]
 8006b36:	e7ca      	b.n	8006ace <_free_r+0x22>
 8006b38:	bd38      	pop	{r3, r4, r5, pc}
 8006b3a:	bf00      	nop
 8006b3c:	20025e0c 	.word	0x20025e0c

08006b40 <sbrk_aligned>:
 8006b40:	b570      	push	{r4, r5, r6, lr}
 8006b42:	4e0f      	ldr	r6, [pc, #60]	@ (8006b80 <sbrk_aligned+0x40>)
 8006b44:	460c      	mov	r4, r1
 8006b46:	6831      	ldr	r1, [r6, #0]
 8006b48:	4605      	mov	r5, r0
 8006b4a:	b911      	cbnz	r1, 8006b52 <sbrk_aligned+0x12>
 8006b4c:	f000 fca6 	bl	800749c <_sbrk_r>
 8006b50:	6030      	str	r0, [r6, #0]
 8006b52:	4621      	mov	r1, r4
 8006b54:	4628      	mov	r0, r5
 8006b56:	f000 fca1 	bl	800749c <_sbrk_r>
 8006b5a:	1c43      	adds	r3, r0, #1
 8006b5c:	d103      	bne.n	8006b66 <sbrk_aligned+0x26>
 8006b5e:	f04f 34ff 	mov.w	r4, #4294967295
 8006b62:	4620      	mov	r0, r4
 8006b64:	bd70      	pop	{r4, r5, r6, pc}
 8006b66:	1cc4      	adds	r4, r0, #3
 8006b68:	f024 0403 	bic.w	r4, r4, #3
 8006b6c:	42a0      	cmp	r0, r4
 8006b6e:	d0f8      	beq.n	8006b62 <sbrk_aligned+0x22>
 8006b70:	1a21      	subs	r1, r4, r0
 8006b72:	4628      	mov	r0, r5
 8006b74:	f000 fc92 	bl	800749c <_sbrk_r>
 8006b78:	3001      	adds	r0, #1
 8006b7a:	d1f2      	bne.n	8006b62 <sbrk_aligned+0x22>
 8006b7c:	e7ef      	b.n	8006b5e <sbrk_aligned+0x1e>
 8006b7e:	bf00      	nop
 8006b80:	20025e08 	.word	0x20025e08

08006b84 <_malloc_r>:
 8006b84:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8006b88:	1ccd      	adds	r5, r1, #3
 8006b8a:	f025 0503 	bic.w	r5, r5, #3
 8006b8e:	3508      	adds	r5, #8
 8006b90:	2d0c      	cmp	r5, #12
 8006b92:	bf38      	it	cc
 8006b94:	250c      	movcc	r5, #12
 8006b96:	2d00      	cmp	r5, #0
 8006b98:	4606      	mov	r6, r0
 8006b9a:	db01      	blt.n	8006ba0 <_malloc_r+0x1c>
 8006b9c:	42a9      	cmp	r1, r5
 8006b9e:	d904      	bls.n	8006baa <_malloc_r+0x26>
 8006ba0:	230c      	movs	r3, #12
 8006ba2:	6033      	str	r3, [r6, #0]
 8006ba4:	2000      	movs	r0, #0
 8006ba6:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8006baa:	f8df 80d4 	ldr.w	r8, [pc, #212]	@ 8006c80 <_malloc_r+0xfc>
 8006bae:	f000 f869 	bl	8006c84 <__malloc_lock>
 8006bb2:	f8d8 3000 	ldr.w	r3, [r8]
 8006bb6:	461c      	mov	r4, r3
 8006bb8:	bb44      	cbnz	r4, 8006c0c <_malloc_r+0x88>
 8006bba:	4629      	mov	r1, r5
 8006bbc:	4630      	mov	r0, r6
 8006bbe:	f7ff ffbf 	bl	8006b40 <sbrk_aligned>
 8006bc2:	1c43      	adds	r3, r0, #1
 8006bc4:	4604      	mov	r4, r0
 8006bc6:	d158      	bne.n	8006c7a <_malloc_r+0xf6>
 8006bc8:	f8d8 4000 	ldr.w	r4, [r8]
 8006bcc:	4627      	mov	r7, r4
 8006bce:	2f00      	cmp	r7, #0
 8006bd0:	d143      	bne.n	8006c5a <_malloc_r+0xd6>
 8006bd2:	2c00      	cmp	r4, #0
 8006bd4:	d04b      	beq.n	8006c6e <_malloc_r+0xea>
 8006bd6:	6823      	ldr	r3, [r4, #0]
 8006bd8:	4639      	mov	r1, r7
 8006bda:	4630      	mov	r0, r6
 8006bdc:	eb04 0903 	add.w	r9, r4, r3
 8006be0:	f000 fc5c 	bl	800749c <_sbrk_r>
 8006be4:	4581      	cmp	r9, r0
 8006be6:	d142      	bne.n	8006c6e <_malloc_r+0xea>
 8006be8:	6821      	ldr	r1, [r4, #0]
 8006bea:	1a6d      	subs	r5, r5, r1
 8006bec:	4629      	mov	r1, r5
 8006bee:	4630      	mov	r0, r6
 8006bf0:	f7ff ffa6 	bl	8006b40 <sbrk_aligned>
 8006bf4:	3001      	adds	r0, #1
 8006bf6:	d03a      	beq.n	8006c6e <_malloc_r+0xea>
 8006bf8:	6823      	ldr	r3, [r4, #0]
 8006bfa:	442b      	add	r3, r5
 8006bfc:	6023      	str	r3, [r4, #0]
 8006bfe:	f8d8 3000 	ldr.w	r3, [r8]
 8006c02:	685a      	ldr	r2, [r3, #4]
 8006c04:	bb62      	cbnz	r2, 8006c60 <_malloc_r+0xdc>
 8006c06:	f8c8 7000 	str.w	r7, [r8]
 8006c0a:	e00f      	b.n	8006c2c <_malloc_r+0xa8>
 8006c0c:	6822      	ldr	r2, [r4, #0]
 8006c0e:	1b52      	subs	r2, r2, r5
 8006c10:	d420      	bmi.n	8006c54 <_malloc_r+0xd0>
 8006c12:	2a0b      	cmp	r2, #11
 8006c14:	d917      	bls.n	8006c46 <_malloc_r+0xc2>
 8006c16:	1961      	adds	r1, r4, r5
 8006c18:	42a3      	cmp	r3, r4
 8006c1a:	6025      	str	r5, [r4, #0]
 8006c1c:	bf18      	it	ne
 8006c1e:	6059      	strne	r1, [r3, #4]
 8006c20:	6863      	ldr	r3, [r4, #4]
 8006c22:	bf08      	it	eq
 8006c24:	f8c8 1000 	streq.w	r1, [r8]
 8006c28:	5162      	str	r2, [r4, r5]
 8006c2a:	604b      	str	r3, [r1, #4]
 8006c2c:	4630      	mov	r0, r6
 8006c2e:	f000 f82f 	bl	8006c90 <__malloc_unlock>
 8006c32:	f104 000b 	add.w	r0, r4, #11
 8006c36:	1d23      	adds	r3, r4, #4
 8006c38:	f020 0007 	bic.w	r0, r0, #7
 8006c3c:	1ac2      	subs	r2, r0, r3
 8006c3e:	bf1c      	itt	ne
 8006c40:	1a1b      	subne	r3, r3, r0
 8006c42:	50a3      	strne	r3, [r4, r2]
 8006c44:	e7af      	b.n	8006ba6 <_malloc_r+0x22>
 8006c46:	6862      	ldr	r2, [r4, #4]
 8006c48:	42a3      	cmp	r3, r4
 8006c4a:	bf0c      	ite	eq
 8006c4c:	f8c8 2000 	streq.w	r2, [r8]
 8006c50:	605a      	strne	r2, [r3, #4]
 8006c52:	e7eb      	b.n	8006c2c <_malloc_r+0xa8>
 8006c54:	4623      	mov	r3, r4
 8006c56:	6864      	ldr	r4, [r4, #4]
 8006c58:	e7ae      	b.n	8006bb8 <_malloc_r+0x34>
 8006c5a:	463c      	mov	r4, r7
 8006c5c:	687f      	ldr	r7, [r7, #4]
 8006c5e:	e7b6      	b.n	8006bce <_malloc_r+0x4a>
 8006c60:	461a      	mov	r2, r3
 8006c62:	685b      	ldr	r3, [r3, #4]
 8006c64:	42a3      	cmp	r3, r4
 8006c66:	d1fb      	bne.n	8006c60 <_malloc_r+0xdc>
 8006c68:	2300      	movs	r3, #0
 8006c6a:	6053      	str	r3, [r2, #4]
 8006c6c:	e7de      	b.n	8006c2c <_malloc_r+0xa8>
 8006c6e:	230c      	movs	r3, #12
 8006c70:	6033      	str	r3, [r6, #0]
 8006c72:	4630      	mov	r0, r6
 8006c74:	f000 f80c 	bl	8006c90 <__malloc_unlock>
 8006c78:	e794      	b.n	8006ba4 <_malloc_r+0x20>
 8006c7a:	6005      	str	r5, [r0, #0]
 8006c7c:	e7d6      	b.n	8006c2c <_malloc_r+0xa8>
 8006c7e:	bf00      	nop
 8006c80:	20025e0c 	.word	0x20025e0c

08006c84 <__malloc_lock>:
 8006c84:	4801      	ldr	r0, [pc, #4]	@ (8006c8c <__malloc_lock+0x8>)
 8006c86:	f7ff bf0e 	b.w	8006aa6 <__retarget_lock_acquire_recursive>
 8006c8a:	bf00      	nop
 8006c8c:	20025e04 	.word	0x20025e04

08006c90 <__malloc_unlock>:
 8006c90:	4801      	ldr	r0, [pc, #4]	@ (8006c98 <__malloc_unlock+0x8>)
 8006c92:	f7ff bf09 	b.w	8006aa8 <__retarget_lock_release_recursive>
 8006c96:	bf00      	nop
 8006c98:	20025e04 	.word	0x20025e04

08006c9c <__sfputc_r>:
 8006c9c:	6893      	ldr	r3, [r2, #8]
 8006c9e:	3b01      	subs	r3, #1
 8006ca0:	2b00      	cmp	r3, #0
 8006ca2:	b410      	push	{r4}
 8006ca4:	6093      	str	r3, [r2, #8]
 8006ca6:	da08      	bge.n	8006cba <__sfputc_r+0x1e>
 8006ca8:	6994      	ldr	r4, [r2, #24]
 8006caa:	42a3      	cmp	r3, r4
 8006cac:	db01      	blt.n	8006cb2 <__sfputc_r+0x16>
 8006cae:	290a      	cmp	r1, #10
 8006cb0:	d103      	bne.n	8006cba <__sfputc_r+0x1e>
 8006cb2:	f85d 4b04 	ldr.w	r4, [sp], #4
 8006cb6:	f7ff bde8 	b.w	800688a <__swbuf_r>
 8006cba:	6813      	ldr	r3, [r2, #0]
 8006cbc:	1c58      	adds	r0, r3, #1
 8006cbe:	6010      	str	r0, [r2, #0]
 8006cc0:	7019      	strb	r1, [r3, #0]
 8006cc2:	4608      	mov	r0, r1
 8006cc4:	f85d 4b04 	ldr.w	r4, [sp], #4
 8006cc8:	4770      	bx	lr

08006cca <__sfputs_r>:
 8006cca:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8006ccc:	4606      	mov	r6, r0
 8006cce:	460f      	mov	r7, r1
 8006cd0:	4614      	mov	r4, r2
 8006cd2:	18d5      	adds	r5, r2, r3
 8006cd4:	42ac      	cmp	r4, r5
 8006cd6:	d101      	bne.n	8006cdc <__sfputs_r+0x12>
 8006cd8:	2000      	movs	r0, #0
 8006cda:	e007      	b.n	8006cec <__sfputs_r+0x22>
 8006cdc:	f814 1b01 	ldrb.w	r1, [r4], #1
 8006ce0:	463a      	mov	r2, r7
 8006ce2:	4630      	mov	r0, r6
 8006ce4:	f7ff ffda 	bl	8006c9c <__sfputc_r>
 8006ce8:	1c43      	adds	r3, r0, #1
 8006cea:	d1f3      	bne.n	8006cd4 <__sfputs_r+0xa>
 8006cec:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

08006cf0 <_vfiprintf_r>:
 8006cf0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8006cf4:	460d      	mov	r5, r1
 8006cf6:	b09d      	sub	sp, #116	@ 0x74
 8006cf8:	4614      	mov	r4, r2
 8006cfa:	4698      	mov	r8, r3
 8006cfc:	4606      	mov	r6, r0
 8006cfe:	b118      	cbz	r0, 8006d08 <_vfiprintf_r+0x18>
 8006d00:	6a03      	ldr	r3, [r0, #32]
 8006d02:	b90b      	cbnz	r3, 8006d08 <_vfiprintf_r+0x18>
 8006d04:	f7ff fd36 	bl	8006774 <__sinit>
 8006d08:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 8006d0a:	07d9      	lsls	r1, r3, #31
 8006d0c:	d405      	bmi.n	8006d1a <_vfiprintf_r+0x2a>
 8006d0e:	89ab      	ldrh	r3, [r5, #12]
 8006d10:	059a      	lsls	r2, r3, #22
 8006d12:	d402      	bmi.n	8006d1a <_vfiprintf_r+0x2a>
 8006d14:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 8006d16:	f7ff fec6 	bl	8006aa6 <__retarget_lock_acquire_recursive>
 8006d1a:	89ab      	ldrh	r3, [r5, #12]
 8006d1c:	071b      	lsls	r3, r3, #28
 8006d1e:	d501      	bpl.n	8006d24 <_vfiprintf_r+0x34>
 8006d20:	692b      	ldr	r3, [r5, #16]
 8006d22:	b99b      	cbnz	r3, 8006d4c <_vfiprintf_r+0x5c>
 8006d24:	4629      	mov	r1, r5
 8006d26:	4630      	mov	r0, r6
 8006d28:	f7ff fdee 	bl	8006908 <__swsetup_r>
 8006d2c:	b170      	cbz	r0, 8006d4c <_vfiprintf_r+0x5c>
 8006d2e:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 8006d30:	07dc      	lsls	r4, r3, #31
 8006d32:	d504      	bpl.n	8006d3e <_vfiprintf_r+0x4e>
 8006d34:	f04f 30ff 	mov.w	r0, #4294967295
 8006d38:	b01d      	add	sp, #116	@ 0x74
 8006d3a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8006d3e:	89ab      	ldrh	r3, [r5, #12]
 8006d40:	0598      	lsls	r0, r3, #22
 8006d42:	d4f7      	bmi.n	8006d34 <_vfiprintf_r+0x44>
 8006d44:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 8006d46:	f7ff feaf 	bl	8006aa8 <__retarget_lock_release_recursive>
 8006d4a:	e7f3      	b.n	8006d34 <_vfiprintf_r+0x44>
 8006d4c:	2300      	movs	r3, #0
 8006d4e:	9309      	str	r3, [sp, #36]	@ 0x24
 8006d50:	2320      	movs	r3, #32
 8006d52:	f88d 3029 	strb.w	r3, [sp, #41]	@ 0x29
 8006d56:	f8cd 800c 	str.w	r8, [sp, #12]
 8006d5a:	2330      	movs	r3, #48	@ 0x30
 8006d5c:	f8df 81ac 	ldr.w	r8, [pc, #428]	@ 8006f0c <_vfiprintf_r+0x21c>
 8006d60:	f88d 302a 	strb.w	r3, [sp, #42]	@ 0x2a
 8006d64:	f04f 0901 	mov.w	r9, #1
 8006d68:	4623      	mov	r3, r4
 8006d6a:	469a      	mov	sl, r3
 8006d6c:	f813 2b01 	ldrb.w	r2, [r3], #1
 8006d70:	b10a      	cbz	r2, 8006d76 <_vfiprintf_r+0x86>
 8006d72:	2a25      	cmp	r2, #37	@ 0x25
 8006d74:	d1f9      	bne.n	8006d6a <_vfiprintf_r+0x7a>
 8006d76:	ebba 0b04 	subs.w	fp, sl, r4
 8006d7a:	d00b      	beq.n	8006d94 <_vfiprintf_r+0xa4>
 8006d7c:	465b      	mov	r3, fp
 8006d7e:	4622      	mov	r2, r4
 8006d80:	4629      	mov	r1, r5
 8006d82:	4630      	mov	r0, r6
 8006d84:	f7ff ffa1 	bl	8006cca <__sfputs_r>
 8006d88:	3001      	adds	r0, #1
 8006d8a:	f000 80a7 	beq.w	8006edc <_vfiprintf_r+0x1ec>
 8006d8e:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 8006d90:	445a      	add	r2, fp
 8006d92:	9209      	str	r2, [sp, #36]	@ 0x24
 8006d94:	f89a 3000 	ldrb.w	r3, [sl]
 8006d98:	2b00      	cmp	r3, #0
 8006d9a:	f000 809f 	beq.w	8006edc <_vfiprintf_r+0x1ec>
 8006d9e:	2300      	movs	r3, #0
 8006da0:	f04f 32ff 	mov.w	r2, #4294967295
 8006da4:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8006da8:	f10a 0a01 	add.w	sl, sl, #1
 8006dac:	9304      	str	r3, [sp, #16]
 8006dae:	9307      	str	r3, [sp, #28]
 8006db0:	f88d 3053 	strb.w	r3, [sp, #83]	@ 0x53
 8006db4:	931a      	str	r3, [sp, #104]	@ 0x68
 8006db6:	4654      	mov	r4, sl
 8006db8:	2205      	movs	r2, #5
 8006dba:	f814 1b01 	ldrb.w	r1, [r4], #1
 8006dbe:	4853      	ldr	r0, [pc, #332]	@ (8006f0c <_vfiprintf_r+0x21c>)
 8006dc0:	f7f9 fa16 	bl	80001f0 <memchr>
 8006dc4:	9a04      	ldr	r2, [sp, #16]
 8006dc6:	b9d8      	cbnz	r0, 8006e00 <_vfiprintf_r+0x110>
 8006dc8:	06d1      	lsls	r1, r2, #27
 8006dca:	bf44      	itt	mi
 8006dcc:	2320      	movmi	r3, #32
 8006dce:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 8006dd2:	0713      	lsls	r3, r2, #28
 8006dd4:	bf44      	itt	mi
 8006dd6:	232b      	movmi	r3, #43	@ 0x2b
 8006dd8:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 8006ddc:	f89a 3000 	ldrb.w	r3, [sl]
 8006de0:	2b2a      	cmp	r3, #42	@ 0x2a
 8006de2:	d015      	beq.n	8006e10 <_vfiprintf_r+0x120>
 8006de4:	9a07      	ldr	r2, [sp, #28]
 8006de6:	4654      	mov	r4, sl
 8006de8:	2000      	movs	r0, #0
 8006dea:	f04f 0c0a 	mov.w	ip, #10
 8006dee:	4621      	mov	r1, r4
 8006df0:	f811 3b01 	ldrb.w	r3, [r1], #1
 8006df4:	3b30      	subs	r3, #48	@ 0x30
 8006df6:	2b09      	cmp	r3, #9
 8006df8:	d94b      	bls.n	8006e92 <_vfiprintf_r+0x1a2>
 8006dfa:	b1b0      	cbz	r0, 8006e2a <_vfiprintf_r+0x13a>
 8006dfc:	9207      	str	r2, [sp, #28]
 8006dfe:	e014      	b.n	8006e2a <_vfiprintf_r+0x13a>
 8006e00:	eba0 0308 	sub.w	r3, r0, r8
 8006e04:	fa09 f303 	lsl.w	r3, r9, r3
 8006e08:	4313      	orrs	r3, r2
 8006e0a:	9304      	str	r3, [sp, #16]
 8006e0c:	46a2      	mov	sl, r4
 8006e0e:	e7d2      	b.n	8006db6 <_vfiprintf_r+0xc6>
 8006e10:	9b03      	ldr	r3, [sp, #12]
 8006e12:	1d19      	adds	r1, r3, #4
 8006e14:	681b      	ldr	r3, [r3, #0]
 8006e16:	9103      	str	r1, [sp, #12]
 8006e18:	2b00      	cmp	r3, #0
 8006e1a:	bfbb      	ittet	lt
 8006e1c:	425b      	neglt	r3, r3
 8006e1e:	f042 0202 	orrlt.w	r2, r2, #2
 8006e22:	9307      	strge	r3, [sp, #28]
 8006e24:	9307      	strlt	r3, [sp, #28]
 8006e26:	bfb8      	it	lt
 8006e28:	9204      	strlt	r2, [sp, #16]
 8006e2a:	7823      	ldrb	r3, [r4, #0]
 8006e2c:	2b2e      	cmp	r3, #46	@ 0x2e
 8006e2e:	d10a      	bne.n	8006e46 <_vfiprintf_r+0x156>
 8006e30:	7863      	ldrb	r3, [r4, #1]
 8006e32:	2b2a      	cmp	r3, #42	@ 0x2a
 8006e34:	d132      	bne.n	8006e9c <_vfiprintf_r+0x1ac>
 8006e36:	9b03      	ldr	r3, [sp, #12]
 8006e38:	1d1a      	adds	r2, r3, #4
 8006e3a:	681b      	ldr	r3, [r3, #0]
 8006e3c:	9203      	str	r2, [sp, #12]
 8006e3e:	ea43 73e3 	orr.w	r3, r3, r3, asr #31
 8006e42:	3402      	adds	r4, #2
 8006e44:	9305      	str	r3, [sp, #20]
 8006e46:	f8df a0d4 	ldr.w	sl, [pc, #212]	@ 8006f1c <_vfiprintf_r+0x22c>
 8006e4a:	7821      	ldrb	r1, [r4, #0]
 8006e4c:	2203      	movs	r2, #3
 8006e4e:	4650      	mov	r0, sl
 8006e50:	f7f9 f9ce 	bl	80001f0 <memchr>
 8006e54:	b138      	cbz	r0, 8006e66 <_vfiprintf_r+0x176>
 8006e56:	9b04      	ldr	r3, [sp, #16]
 8006e58:	eba0 000a 	sub.w	r0, r0, sl
 8006e5c:	2240      	movs	r2, #64	@ 0x40
 8006e5e:	4082      	lsls	r2, r0
 8006e60:	4313      	orrs	r3, r2
 8006e62:	3401      	adds	r4, #1
 8006e64:	9304      	str	r3, [sp, #16]
 8006e66:	f814 1b01 	ldrb.w	r1, [r4], #1
 8006e6a:	4829      	ldr	r0, [pc, #164]	@ (8006f10 <_vfiprintf_r+0x220>)
 8006e6c:	f88d 1028 	strb.w	r1, [sp, #40]	@ 0x28
 8006e70:	2206      	movs	r2, #6
 8006e72:	f7f9 f9bd 	bl	80001f0 <memchr>
 8006e76:	2800      	cmp	r0, #0
 8006e78:	d03f      	beq.n	8006efa <_vfiprintf_r+0x20a>
 8006e7a:	4b26      	ldr	r3, [pc, #152]	@ (8006f14 <_vfiprintf_r+0x224>)
 8006e7c:	bb1b      	cbnz	r3, 8006ec6 <_vfiprintf_r+0x1d6>
 8006e7e:	9b03      	ldr	r3, [sp, #12]
 8006e80:	3307      	adds	r3, #7
 8006e82:	f023 0307 	bic.w	r3, r3, #7
 8006e86:	3308      	adds	r3, #8
 8006e88:	9303      	str	r3, [sp, #12]
 8006e8a:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8006e8c:	443b      	add	r3, r7
 8006e8e:	9309      	str	r3, [sp, #36]	@ 0x24
 8006e90:	e76a      	b.n	8006d68 <_vfiprintf_r+0x78>
 8006e92:	fb0c 3202 	mla	r2, ip, r2, r3
 8006e96:	460c      	mov	r4, r1
 8006e98:	2001      	movs	r0, #1
 8006e9a:	e7a8      	b.n	8006dee <_vfiprintf_r+0xfe>
 8006e9c:	2300      	movs	r3, #0
 8006e9e:	3401      	adds	r4, #1
 8006ea0:	9305      	str	r3, [sp, #20]
 8006ea2:	4619      	mov	r1, r3
 8006ea4:	f04f 0c0a 	mov.w	ip, #10
 8006ea8:	4620      	mov	r0, r4
 8006eaa:	f810 2b01 	ldrb.w	r2, [r0], #1
 8006eae:	3a30      	subs	r2, #48	@ 0x30
 8006eb0:	2a09      	cmp	r2, #9
 8006eb2:	d903      	bls.n	8006ebc <_vfiprintf_r+0x1cc>
 8006eb4:	2b00      	cmp	r3, #0
 8006eb6:	d0c6      	beq.n	8006e46 <_vfiprintf_r+0x156>
 8006eb8:	9105      	str	r1, [sp, #20]
 8006eba:	e7c4      	b.n	8006e46 <_vfiprintf_r+0x156>
 8006ebc:	fb0c 2101 	mla	r1, ip, r1, r2
 8006ec0:	4604      	mov	r4, r0
 8006ec2:	2301      	movs	r3, #1
 8006ec4:	e7f0      	b.n	8006ea8 <_vfiprintf_r+0x1b8>
 8006ec6:	ab03      	add	r3, sp, #12
 8006ec8:	9300      	str	r3, [sp, #0]
 8006eca:	462a      	mov	r2, r5
 8006ecc:	4b12      	ldr	r3, [pc, #72]	@ (8006f18 <_vfiprintf_r+0x228>)
 8006ece:	a904      	add	r1, sp, #16
 8006ed0:	4630      	mov	r0, r6
 8006ed2:	f3af 8000 	nop.w
 8006ed6:	4607      	mov	r7, r0
 8006ed8:	1c78      	adds	r0, r7, #1
 8006eda:	d1d6      	bne.n	8006e8a <_vfiprintf_r+0x19a>
 8006edc:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 8006ede:	07d9      	lsls	r1, r3, #31
 8006ee0:	d405      	bmi.n	8006eee <_vfiprintf_r+0x1fe>
 8006ee2:	89ab      	ldrh	r3, [r5, #12]
 8006ee4:	059a      	lsls	r2, r3, #22
 8006ee6:	d402      	bmi.n	8006eee <_vfiprintf_r+0x1fe>
 8006ee8:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 8006eea:	f7ff fddd 	bl	8006aa8 <__retarget_lock_release_recursive>
 8006eee:	89ab      	ldrh	r3, [r5, #12]
 8006ef0:	065b      	lsls	r3, r3, #25
 8006ef2:	f53f af1f 	bmi.w	8006d34 <_vfiprintf_r+0x44>
 8006ef6:	9809      	ldr	r0, [sp, #36]	@ 0x24
 8006ef8:	e71e      	b.n	8006d38 <_vfiprintf_r+0x48>
 8006efa:	ab03      	add	r3, sp, #12
 8006efc:	9300      	str	r3, [sp, #0]
 8006efe:	462a      	mov	r2, r5
 8006f00:	4b05      	ldr	r3, [pc, #20]	@ (8006f18 <_vfiprintf_r+0x228>)
 8006f02:	a904      	add	r1, sp, #16
 8006f04:	4630      	mov	r0, r6
 8006f06:	f000 f879 	bl	8006ffc <_printf_i>
 8006f0a:	e7e4      	b.n	8006ed6 <_vfiprintf_r+0x1e6>
 8006f0c:	08008700 	.word	0x08008700
 8006f10:	0800870a 	.word	0x0800870a
 8006f14:	00000000 	.word	0x00000000
 8006f18:	08006ccb 	.word	0x08006ccb
 8006f1c:	08008706 	.word	0x08008706

08006f20 <_printf_common>:
 8006f20:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8006f24:	4616      	mov	r6, r2
 8006f26:	4698      	mov	r8, r3
 8006f28:	688a      	ldr	r2, [r1, #8]
 8006f2a:	690b      	ldr	r3, [r1, #16]
 8006f2c:	f8dd 9020 	ldr.w	r9, [sp, #32]
 8006f30:	4293      	cmp	r3, r2
 8006f32:	bfb8      	it	lt
 8006f34:	4613      	movlt	r3, r2
 8006f36:	6033      	str	r3, [r6, #0]
 8006f38:	f891 2043 	ldrb.w	r2, [r1, #67]	@ 0x43
 8006f3c:	4607      	mov	r7, r0
 8006f3e:	460c      	mov	r4, r1
 8006f40:	b10a      	cbz	r2, 8006f46 <_printf_common+0x26>
 8006f42:	3301      	adds	r3, #1
 8006f44:	6033      	str	r3, [r6, #0]
 8006f46:	6823      	ldr	r3, [r4, #0]
 8006f48:	0699      	lsls	r1, r3, #26
 8006f4a:	bf42      	ittt	mi
 8006f4c:	6833      	ldrmi	r3, [r6, #0]
 8006f4e:	3302      	addmi	r3, #2
 8006f50:	6033      	strmi	r3, [r6, #0]
 8006f52:	6825      	ldr	r5, [r4, #0]
 8006f54:	f015 0506 	ands.w	r5, r5, #6
 8006f58:	d106      	bne.n	8006f68 <_printf_common+0x48>
 8006f5a:	f104 0a19 	add.w	sl, r4, #25
 8006f5e:	68e3      	ldr	r3, [r4, #12]
 8006f60:	6832      	ldr	r2, [r6, #0]
 8006f62:	1a9b      	subs	r3, r3, r2
 8006f64:	42ab      	cmp	r3, r5
 8006f66:	dc26      	bgt.n	8006fb6 <_printf_common+0x96>
 8006f68:	f894 3043 	ldrb.w	r3, [r4, #67]	@ 0x43
 8006f6c:	6822      	ldr	r2, [r4, #0]
 8006f6e:	3b00      	subs	r3, #0
 8006f70:	bf18      	it	ne
 8006f72:	2301      	movne	r3, #1
 8006f74:	0692      	lsls	r2, r2, #26
 8006f76:	d42b      	bmi.n	8006fd0 <_printf_common+0xb0>
 8006f78:	f104 0243 	add.w	r2, r4, #67	@ 0x43
 8006f7c:	4641      	mov	r1, r8
 8006f7e:	4638      	mov	r0, r7
 8006f80:	47c8      	blx	r9
 8006f82:	3001      	adds	r0, #1
 8006f84:	d01e      	beq.n	8006fc4 <_printf_common+0xa4>
 8006f86:	6823      	ldr	r3, [r4, #0]
 8006f88:	6922      	ldr	r2, [r4, #16]
 8006f8a:	f003 0306 	and.w	r3, r3, #6
 8006f8e:	2b04      	cmp	r3, #4
 8006f90:	bf02      	ittt	eq
 8006f92:	68e5      	ldreq	r5, [r4, #12]
 8006f94:	6833      	ldreq	r3, [r6, #0]
 8006f96:	1aed      	subeq	r5, r5, r3
 8006f98:	68a3      	ldr	r3, [r4, #8]
 8006f9a:	bf0c      	ite	eq
 8006f9c:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 8006fa0:	2500      	movne	r5, #0
 8006fa2:	4293      	cmp	r3, r2
 8006fa4:	bfc4      	itt	gt
 8006fa6:	1a9b      	subgt	r3, r3, r2
 8006fa8:	18ed      	addgt	r5, r5, r3
 8006faa:	2600      	movs	r6, #0
 8006fac:	341a      	adds	r4, #26
 8006fae:	42b5      	cmp	r5, r6
 8006fb0:	d11a      	bne.n	8006fe8 <_printf_common+0xc8>
 8006fb2:	2000      	movs	r0, #0
 8006fb4:	e008      	b.n	8006fc8 <_printf_common+0xa8>
 8006fb6:	2301      	movs	r3, #1
 8006fb8:	4652      	mov	r2, sl
 8006fba:	4641      	mov	r1, r8
 8006fbc:	4638      	mov	r0, r7
 8006fbe:	47c8      	blx	r9
 8006fc0:	3001      	adds	r0, #1
 8006fc2:	d103      	bne.n	8006fcc <_printf_common+0xac>
 8006fc4:	f04f 30ff 	mov.w	r0, #4294967295
 8006fc8:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8006fcc:	3501      	adds	r5, #1
 8006fce:	e7c6      	b.n	8006f5e <_printf_common+0x3e>
 8006fd0:	18e1      	adds	r1, r4, r3
 8006fd2:	1c5a      	adds	r2, r3, #1
 8006fd4:	2030      	movs	r0, #48	@ 0x30
 8006fd6:	f881 0043 	strb.w	r0, [r1, #67]	@ 0x43
 8006fda:	4422      	add	r2, r4
 8006fdc:	f894 1045 	ldrb.w	r1, [r4, #69]	@ 0x45
 8006fe0:	f882 1043 	strb.w	r1, [r2, #67]	@ 0x43
 8006fe4:	3302      	adds	r3, #2
 8006fe6:	e7c7      	b.n	8006f78 <_printf_common+0x58>
 8006fe8:	2301      	movs	r3, #1
 8006fea:	4622      	mov	r2, r4
 8006fec:	4641      	mov	r1, r8
 8006fee:	4638      	mov	r0, r7
 8006ff0:	47c8      	blx	r9
 8006ff2:	3001      	adds	r0, #1
 8006ff4:	d0e6      	beq.n	8006fc4 <_printf_common+0xa4>
 8006ff6:	3601      	adds	r6, #1
 8006ff8:	e7d9      	b.n	8006fae <_printf_common+0x8e>
	...

08006ffc <_printf_i>:
 8006ffc:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8007000:	7e0f      	ldrb	r7, [r1, #24]
 8007002:	9e0c      	ldr	r6, [sp, #48]	@ 0x30
 8007004:	2f78      	cmp	r7, #120	@ 0x78
 8007006:	4691      	mov	r9, r2
 8007008:	4680      	mov	r8, r0
 800700a:	460c      	mov	r4, r1
 800700c:	469a      	mov	sl, r3
 800700e:	f101 0243 	add.w	r2, r1, #67	@ 0x43
 8007012:	d807      	bhi.n	8007024 <_printf_i+0x28>
 8007014:	2f62      	cmp	r7, #98	@ 0x62
 8007016:	d80a      	bhi.n	800702e <_printf_i+0x32>
 8007018:	2f00      	cmp	r7, #0
 800701a:	f000 80d2 	beq.w	80071c2 <_printf_i+0x1c6>
 800701e:	2f58      	cmp	r7, #88	@ 0x58
 8007020:	f000 80b9 	beq.w	8007196 <_printf_i+0x19a>
 8007024:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 8007028:	f884 7042 	strb.w	r7, [r4, #66]	@ 0x42
 800702c:	e03a      	b.n	80070a4 <_printf_i+0xa8>
 800702e:	f1a7 0363 	sub.w	r3, r7, #99	@ 0x63
 8007032:	2b15      	cmp	r3, #21
 8007034:	d8f6      	bhi.n	8007024 <_printf_i+0x28>
 8007036:	a101      	add	r1, pc, #4	@ (adr r1, 800703c <_printf_i+0x40>)
 8007038:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 800703c:	08007095 	.word	0x08007095
 8007040:	080070a9 	.word	0x080070a9
 8007044:	08007025 	.word	0x08007025
 8007048:	08007025 	.word	0x08007025
 800704c:	08007025 	.word	0x08007025
 8007050:	08007025 	.word	0x08007025
 8007054:	080070a9 	.word	0x080070a9
 8007058:	08007025 	.word	0x08007025
 800705c:	08007025 	.word	0x08007025
 8007060:	08007025 	.word	0x08007025
 8007064:	08007025 	.word	0x08007025
 8007068:	080071a9 	.word	0x080071a9
 800706c:	080070d3 	.word	0x080070d3
 8007070:	08007163 	.word	0x08007163
 8007074:	08007025 	.word	0x08007025
 8007078:	08007025 	.word	0x08007025
 800707c:	080071cb 	.word	0x080071cb
 8007080:	08007025 	.word	0x08007025
 8007084:	080070d3 	.word	0x080070d3
 8007088:	08007025 	.word	0x08007025
 800708c:	08007025 	.word	0x08007025
 8007090:	0800716b 	.word	0x0800716b
 8007094:	6833      	ldr	r3, [r6, #0]
 8007096:	1d1a      	adds	r2, r3, #4
 8007098:	681b      	ldr	r3, [r3, #0]
 800709a:	6032      	str	r2, [r6, #0]
 800709c:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 80070a0:	f884 3042 	strb.w	r3, [r4, #66]	@ 0x42
 80070a4:	2301      	movs	r3, #1
 80070a6:	e09d      	b.n	80071e4 <_printf_i+0x1e8>
 80070a8:	6833      	ldr	r3, [r6, #0]
 80070aa:	6820      	ldr	r0, [r4, #0]
 80070ac:	1d19      	adds	r1, r3, #4
 80070ae:	6031      	str	r1, [r6, #0]
 80070b0:	0606      	lsls	r6, r0, #24
 80070b2:	d501      	bpl.n	80070b8 <_printf_i+0xbc>
 80070b4:	681d      	ldr	r5, [r3, #0]
 80070b6:	e003      	b.n	80070c0 <_printf_i+0xc4>
 80070b8:	0645      	lsls	r5, r0, #25
 80070ba:	d5fb      	bpl.n	80070b4 <_printf_i+0xb8>
 80070bc:	f9b3 5000 	ldrsh.w	r5, [r3]
 80070c0:	2d00      	cmp	r5, #0
 80070c2:	da03      	bge.n	80070cc <_printf_i+0xd0>
 80070c4:	232d      	movs	r3, #45	@ 0x2d
 80070c6:	426d      	negs	r5, r5
 80070c8:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 80070cc:	4859      	ldr	r0, [pc, #356]	@ (8007234 <_printf_i+0x238>)
 80070ce:	230a      	movs	r3, #10
 80070d0:	e011      	b.n	80070f6 <_printf_i+0xfa>
 80070d2:	6821      	ldr	r1, [r4, #0]
 80070d4:	6833      	ldr	r3, [r6, #0]
 80070d6:	0608      	lsls	r0, r1, #24
 80070d8:	f853 5b04 	ldr.w	r5, [r3], #4
 80070dc:	d402      	bmi.n	80070e4 <_printf_i+0xe8>
 80070de:	0649      	lsls	r1, r1, #25
 80070e0:	bf48      	it	mi
 80070e2:	b2ad      	uxthmi	r5, r5
 80070e4:	2f6f      	cmp	r7, #111	@ 0x6f
 80070e6:	4853      	ldr	r0, [pc, #332]	@ (8007234 <_printf_i+0x238>)
 80070e8:	6033      	str	r3, [r6, #0]
 80070ea:	bf14      	ite	ne
 80070ec:	230a      	movne	r3, #10
 80070ee:	2308      	moveq	r3, #8
 80070f0:	2100      	movs	r1, #0
 80070f2:	f884 1043 	strb.w	r1, [r4, #67]	@ 0x43
 80070f6:	6866      	ldr	r6, [r4, #4]
 80070f8:	60a6      	str	r6, [r4, #8]
 80070fa:	2e00      	cmp	r6, #0
 80070fc:	bfa2      	ittt	ge
 80070fe:	6821      	ldrge	r1, [r4, #0]
 8007100:	f021 0104 	bicge.w	r1, r1, #4
 8007104:	6021      	strge	r1, [r4, #0]
 8007106:	b90d      	cbnz	r5, 800710c <_printf_i+0x110>
 8007108:	2e00      	cmp	r6, #0
 800710a:	d04b      	beq.n	80071a4 <_printf_i+0x1a8>
 800710c:	4616      	mov	r6, r2
 800710e:	fbb5 f1f3 	udiv	r1, r5, r3
 8007112:	fb03 5711 	mls	r7, r3, r1, r5
 8007116:	5dc7      	ldrb	r7, [r0, r7]
 8007118:	f806 7d01 	strb.w	r7, [r6, #-1]!
 800711c:	462f      	mov	r7, r5
 800711e:	42bb      	cmp	r3, r7
 8007120:	460d      	mov	r5, r1
 8007122:	d9f4      	bls.n	800710e <_printf_i+0x112>
 8007124:	2b08      	cmp	r3, #8
 8007126:	d10b      	bne.n	8007140 <_printf_i+0x144>
 8007128:	6823      	ldr	r3, [r4, #0]
 800712a:	07df      	lsls	r7, r3, #31
 800712c:	d508      	bpl.n	8007140 <_printf_i+0x144>
 800712e:	6923      	ldr	r3, [r4, #16]
 8007130:	6861      	ldr	r1, [r4, #4]
 8007132:	4299      	cmp	r1, r3
 8007134:	bfde      	ittt	le
 8007136:	2330      	movle	r3, #48	@ 0x30
 8007138:	f806 3c01 	strble.w	r3, [r6, #-1]
 800713c:	f106 36ff 	addle.w	r6, r6, #4294967295
 8007140:	1b92      	subs	r2, r2, r6
 8007142:	6122      	str	r2, [r4, #16]
 8007144:	f8cd a000 	str.w	sl, [sp]
 8007148:	464b      	mov	r3, r9
 800714a:	aa03      	add	r2, sp, #12
 800714c:	4621      	mov	r1, r4
 800714e:	4640      	mov	r0, r8
 8007150:	f7ff fee6 	bl	8006f20 <_printf_common>
 8007154:	3001      	adds	r0, #1
 8007156:	d14a      	bne.n	80071ee <_printf_i+0x1f2>
 8007158:	f04f 30ff 	mov.w	r0, #4294967295
 800715c:	b004      	add	sp, #16
 800715e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8007162:	6823      	ldr	r3, [r4, #0]
 8007164:	f043 0320 	orr.w	r3, r3, #32
 8007168:	6023      	str	r3, [r4, #0]
 800716a:	4833      	ldr	r0, [pc, #204]	@ (8007238 <_printf_i+0x23c>)
 800716c:	2778      	movs	r7, #120	@ 0x78
 800716e:	f884 7045 	strb.w	r7, [r4, #69]	@ 0x45
 8007172:	6823      	ldr	r3, [r4, #0]
 8007174:	6831      	ldr	r1, [r6, #0]
 8007176:	061f      	lsls	r7, r3, #24
 8007178:	f851 5b04 	ldr.w	r5, [r1], #4
 800717c:	d402      	bmi.n	8007184 <_printf_i+0x188>
 800717e:	065f      	lsls	r7, r3, #25
 8007180:	bf48      	it	mi
 8007182:	b2ad      	uxthmi	r5, r5
 8007184:	6031      	str	r1, [r6, #0]
 8007186:	07d9      	lsls	r1, r3, #31
 8007188:	bf44      	itt	mi
 800718a:	f043 0320 	orrmi.w	r3, r3, #32
 800718e:	6023      	strmi	r3, [r4, #0]
 8007190:	b11d      	cbz	r5, 800719a <_printf_i+0x19e>
 8007192:	2310      	movs	r3, #16
 8007194:	e7ac      	b.n	80070f0 <_printf_i+0xf4>
 8007196:	4827      	ldr	r0, [pc, #156]	@ (8007234 <_printf_i+0x238>)
 8007198:	e7e9      	b.n	800716e <_printf_i+0x172>
 800719a:	6823      	ldr	r3, [r4, #0]
 800719c:	f023 0320 	bic.w	r3, r3, #32
 80071a0:	6023      	str	r3, [r4, #0]
 80071a2:	e7f6      	b.n	8007192 <_printf_i+0x196>
 80071a4:	4616      	mov	r6, r2
 80071a6:	e7bd      	b.n	8007124 <_printf_i+0x128>
 80071a8:	6833      	ldr	r3, [r6, #0]
 80071aa:	6825      	ldr	r5, [r4, #0]
 80071ac:	6961      	ldr	r1, [r4, #20]
 80071ae:	1d18      	adds	r0, r3, #4
 80071b0:	6030      	str	r0, [r6, #0]
 80071b2:	062e      	lsls	r6, r5, #24
 80071b4:	681b      	ldr	r3, [r3, #0]
 80071b6:	d501      	bpl.n	80071bc <_printf_i+0x1c0>
 80071b8:	6019      	str	r1, [r3, #0]
 80071ba:	e002      	b.n	80071c2 <_printf_i+0x1c6>
 80071bc:	0668      	lsls	r0, r5, #25
 80071be:	d5fb      	bpl.n	80071b8 <_printf_i+0x1bc>
 80071c0:	8019      	strh	r1, [r3, #0]
 80071c2:	2300      	movs	r3, #0
 80071c4:	6123      	str	r3, [r4, #16]
 80071c6:	4616      	mov	r6, r2
 80071c8:	e7bc      	b.n	8007144 <_printf_i+0x148>
 80071ca:	6833      	ldr	r3, [r6, #0]
 80071cc:	1d1a      	adds	r2, r3, #4
 80071ce:	6032      	str	r2, [r6, #0]
 80071d0:	681e      	ldr	r6, [r3, #0]
 80071d2:	6862      	ldr	r2, [r4, #4]
 80071d4:	2100      	movs	r1, #0
 80071d6:	4630      	mov	r0, r6
 80071d8:	f7f9 f80a 	bl	80001f0 <memchr>
 80071dc:	b108      	cbz	r0, 80071e2 <_printf_i+0x1e6>
 80071de:	1b80      	subs	r0, r0, r6
 80071e0:	6060      	str	r0, [r4, #4]
 80071e2:	6863      	ldr	r3, [r4, #4]
 80071e4:	6123      	str	r3, [r4, #16]
 80071e6:	2300      	movs	r3, #0
 80071e8:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 80071ec:	e7aa      	b.n	8007144 <_printf_i+0x148>
 80071ee:	6923      	ldr	r3, [r4, #16]
 80071f0:	4632      	mov	r2, r6
 80071f2:	4649      	mov	r1, r9
 80071f4:	4640      	mov	r0, r8
 80071f6:	47d0      	blx	sl
 80071f8:	3001      	adds	r0, #1
 80071fa:	d0ad      	beq.n	8007158 <_printf_i+0x15c>
 80071fc:	6823      	ldr	r3, [r4, #0]
 80071fe:	079b      	lsls	r3, r3, #30
 8007200:	d413      	bmi.n	800722a <_printf_i+0x22e>
 8007202:	68e0      	ldr	r0, [r4, #12]
 8007204:	9b03      	ldr	r3, [sp, #12]
 8007206:	4298      	cmp	r0, r3
 8007208:	bfb8      	it	lt
 800720a:	4618      	movlt	r0, r3
 800720c:	e7a6      	b.n	800715c <_printf_i+0x160>
 800720e:	2301      	movs	r3, #1
 8007210:	4632      	mov	r2, r6
 8007212:	4649      	mov	r1, r9
 8007214:	4640      	mov	r0, r8
 8007216:	47d0      	blx	sl
 8007218:	3001      	adds	r0, #1
 800721a:	d09d      	beq.n	8007158 <_printf_i+0x15c>
 800721c:	3501      	adds	r5, #1
 800721e:	68e3      	ldr	r3, [r4, #12]
 8007220:	9903      	ldr	r1, [sp, #12]
 8007222:	1a5b      	subs	r3, r3, r1
 8007224:	42ab      	cmp	r3, r5
 8007226:	dcf2      	bgt.n	800720e <_printf_i+0x212>
 8007228:	e7eb      	b.n	8007202 <_printf_i+0x206>
 800722a:	2500      	movs	r5, #0
 800722c:	f104 0619 	add.w	r6, r4, #25
 8007230:	e7f5      	b.n	800721e <_printf_i+0x222>
 8007232:	bf00      	nop
 8007234:	08008711 	.word	0x08008711
 8007238:	08008722 	.word	0x08008722

0800723c <__sflush_r>:
 800723c:	f9b1 200c 	ldrsh.w	r2, [r1, #12]
 8007240:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8007244:	0716      	lsls	r6, r2, #28
 8007246:	4605      	mov	r5, r0
 8007248:	460c      	mov	r4, r1
 800724a:	d454      	bmi.n	80072f6 <__sflush_r+0xba>
 800724c:	684b      	ldr	r3, [r1, #4]
 800724e:	2b00      	cmp	r3, #0
 8007250:	dc02      	bgt.n	8007258 <__sflush_r+0x1c>
 8007252:	6c0b      	ldr	r3, [r1, #64]	@ 0x40
 8007254:	2b00      	cmp	r3, #0
 8007256:	dd48      	ble.n	80072ea <__sflush_r+0xae>
 8007258:	6ae6      	ldr	r6, [r4, #44]	@ 0x2c
 800725a:	2e00      	cmp	r6, #0
 800725c:	d045      	beq.n	80072ea <__sflush_r+0xae>
 800725e:	2300      	movs	r3, #0
 8007260:	f412 5280 	ands.w	r2, r2, #4096	@ 0x1000
 8007264:	682f      	ldr	r7, [r5, #0]
 8007266:	6a21      	ldr	r1, [r4, #32]
 8007268:	602b      	str	r3, [r5, #0]
 800726a:	d030      	beq.n	80072ce <__sflush_r+0x92>
 800726c:	6d62      	ldr	r2, [r4, #84]	@ 0x54
 800726e:	89a3      	ldrh	r3, [r4, #12]
 8007270:	0759      	lsls	r1, r3, #29
 8007272:	d505      	bpl.n	8007280 <__sflush_r+0x44>
 8007274:	6863      	ldr	r3, [r4, #4]
 8007276:	1ad2      	subs	r2, r2, r3
 8007278:	6b63      	ldr	r3, [r4, #52]	@ 0x34
 800727a:	b10b      	cbz	r3, 8007280 <__sflush_r+0x44>
 800727c:	6c23      	ldr	r3, [r4, #64]	@ 0x40
 800727e:	1ad2      	subs	r2, r2, r3
 8007280:	2300      	movs	r3, #0
 8007282:	6ae6      	ldr	r6, [r4, #44]	@ 0x2c
 8007284:	6a21      	ldr	r1, [r4, #32]
 8007286:	4628      	mov	r0, r5
 8007288:	47b0      	blx	r6
 800728a:	1c43      	adds	r3, r0, #1
 800728c:	89a3      	ldrh	r3, [r4, #12]
 800728e:	d106      	bne.n	800729e <__sflush_r+0x62>
 8007290:	6829      	ldr	r1, [r5, #0]
 8007292:	291d      	cmp	r1, #29
 8007294:	d82b      	bhi.n	80072ee <__sflush_r+0xb2>
 8007296:	4a2a      	ldr	r2, [pc, #168]	@ (8007340 <__sflush_r+0x104>)
 8007298:	410a      	asrs	r2, r1
 800729a:	07d6      	lsls	r6, r2, #31
 800729c:	d427      	bmi.n	80072ee <__sflush_r+0xb2>
 800729e:	2200      	movs	r2, #0
 80072a0:	6062      	str	r2, [r4, #4]
 80072a2:	04d9      	lsls	r1, r3, #19
 80072a4:	6922      	ldr	r2, [r4, #16]
 80072a6:	6022      	str	r2, [r4, #0]
 80072a8:	d504      	bpl.n	80072b4 <__sflush_r+0x78>
 80072aa:	1c42      	adds	r2, r0, #1
 80072ac:	d101      	bne.n	80072b2 <__sflush_r+0x76>
 80072ae:	682b      	ldr	r3, [r5, #0]
 80072b0:	b903      	cbnz	r3, 80072b4 <__sflush_r+0x78>
 80072b2:	6560      	str	r0, [r4, #84]	@ 0x54
 80072b4:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 80072b6:	602f      	str	r7, [r5, #0]
 80072b8:	b1b9      	cbz	r1, 80072ea <__sflush_r+0xae>
 80072ba:	f104 0344 	add.w	r3, r4, #68	@ 0x44
 80072be:	4299      	cmp	r1, r3
 80072c0:	d002      	beq.n	80072c8 <__sflush_r+0x8c>
 80072c2:	4628      	mov	r0, r5
 80072c4:	f7ff fbf2 	bl	8006aac <_free_r>
 80072c8:	2300      	movs	r3, #0
 80072ca:	6363      	str	r3, [r4, #52]	@ 0x34
 80072cc:	e00d      	b.n	80072ea <__sflush_r+0xae>
 80072ce:	2301      	movs	r3, #1
 80072d0:	4628      	mov	r0, r5
 80072d2:	47b0      	blx	r6
 80072d4:	4602      	mov	r2, r0
 80072d6:	1c50      	adds	r0, r2, #1
 80072d8:	d1c9      	bne.n	800726e <__sflush_r+0x32>
 80072da:	682b      	ldr	r3, [r5, #0]
 80072dc:	2b00      	cmp	r3, #0
 80072de:	d0c6      	beq.n	800726e <__sflush_r+0x32>
 80072e0:	2b1d      	cmp	r3, #29
 80072e2:	d001      	beq.n	80072e8 <__sflush_r+0xac>
 80072e4:	2b16      	cmp	r3, #22
 80072e6:	d11e      	bne.n	8007326 <__sflush_r+0xea>
 80072e8:	602f      	str	r7, [r5, #0]
 80072ea:	2000      	movs	r0, #0
 80072ec:	e022      	b.n	8007334 <__sflush_r+0xf8>
 80072ee:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 80072f2:	b21b      	sxth	r3, r3
 80072f4:	e01b      	b.n	800732e <__sflush_r+0xf2>
 80072f6:	690f      	ldr	r7, [r1, #16]
 80072f8:	2f00      	cmp	r7, #0
 80072fa:	d0f6      	beq.n	80072ea <__sflush_r+0xae>
 80072fc:	0793      	lsls	r3, r2, #30
 80072fe:	680e      	ldr	r6, [r1, #0]
 8007300:	bf08      	it	eq
 8007302:	694b      	ldreq	r3, [r1, #20]
 8007304:	600f      	str	r7, [r1, #0]
 8007306:	bf18      	it	ne
 8007308:	2300      	movne	r3, #0
 800730a:	eba6 0807 	sub.w	r8, r6, r7
 800730e:	608b      	str	r3, [r1, #8]
 8007310:	f1b8 0f00 	cmp.w	r8, #0
 8007314:	dde9      	ble.n	80072ea <__sflush_r+0xae>
 8007316:	6a21      	ldr	r1, [r4, #32]
 8007318:	6aa6      	ldr	r6, [r4, #40]	@ 0x28
 800731a:	4643      	mov	r3, r8
 800731c:	463a      	mov	r2, r7
 800731e:	4628      	mov	r0, r5
 8007320:	47b0      	blx	r6
 8007322:	2800      	cmp	r0, #0
 8007324:	dc08      	bgt.n	8007338 <__sflush_r+0xfc>
 8007326:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800732a:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 800732e:	81a3      	strh	r3, [r4, #12]
 8007330:	f04f 30ff 	mov.w	r0, #4294967295
 8007334:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8007338:	4407      	add	r7, r0
 800733a:	eba8 0800 	sub.w	r8, r8, r0
 800733e:	e7e7      	b.n	8007310 <__sflush_r+0xd4>
 8007340:	dfbffffe 	.word	0xdfbffffe

08007344 <_fflush_r>:
 8007344:	b538      	push	{r3, r4, r5, lr}
 8007346:	690b      	ldr	r3, [r1, #16]
 8007348:	4605      	mov	r5, r0
 800734a:	460c      	mov	r4, r1
 800734c:	b913      	cbnz	r3, 8007354 <_fflush_r+0x10>
 800734e:	2500      	movs	r5, #0
 8007350:	4628      	mov	r0, r5
 8007352:	bd38      	pop	{r3, r4, r5, pc}
 8007354:	b118      	cbz	r0, 800735e <_fflush_r+0x1a>
 8007356:	6a03      	ldr	r3, [r0, #32]
 8007358:	b90b      	cbnz	r3, 800735e <_fflush_r+0x1a>
 800735a:	f7ff fa0b 	bl	8006774 <__sinit>
 800735e:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8007362:	2b00      	cmp	r3, #0
 8007364:	d0f3      	beq.n	800734e <_fflush_r+0xa>
 8007366:	6e62      	ldr	r2, [r4, #100]	@ 0x64
 8007368:	07d0      	lsls	r0, r2, #31
 800736a:	d404      	bmi.n	8007376 <_fflush_r+0x32>
 800736c:	0599      	lsls	r1, r3, #22
 800736e:	d402      	bmi.n	8007376 <_fflush_r+0x32>
 8007370:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 8007372:	f7ff fb98 	bl	8006aa6 <__retarget_lock_acquire_recursive>
 8007376:	4628      	mov	r0, r5
 8007378:	4621      	mov	r1, r4
 800737a:	f7ff ff5f 	bl	800723c <__sflush_r>
 800737e:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 8007380:	07da      	lsls	r2, r3, #31
 8007382:	4605      	mov	r5, r0
 8007384:	d4e4      	bmi.n	8007350 <_fflush_r+0xc>
 8007386:	89a3      	ldrh	r3, [r4, #12]
 8007388:	059b      	lsls	r3, r3, #22
 800738a:	d4e1      	bmi.n	8007350 <_fflush_r+0xc>
 800738c:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 800738e:	f7ff fb8b 	bl	8006aa8 <__retarget_lock_release_recursive>
 8007392:	e7dd      	b.n	8007350 <_fflush_r+0xc>

08007394 <__swhatbuf_r>:
 8007394:	b570      	push	{r4, r5, r6, lr}
 8007396:	460c      	mov	r4, r1
 8007398:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800739c:	2900      	cmp	r1, #0
 800739e:	b096      	sub	sp, #88	@ 0x58
 80073a0:	4615      	mov	r5, r2
 80073a2:	461e      	mov	r6, r3
 80073a4:	da0d      	bge.n	80073c2 <__swhatbuf_r+0x2e>
 80073a6:	89a3      	ldrh	r3, [r4, #12]
 80073a8:	f013 0f80 	tst.w	r3, #128	@ 0x80
 80073ac:	f04f 0100 	mov.w	r1, #0
 80073b0:	bf14      	ite	ne
 80073b2:	2340      	movne	r3, #64	@ 0x40
 80073b4:	f44f 6380 	moveq.w	r3, #1024	@ 0x400
 80073b8:	2000      	movs	r0, #0
 80073ba:	6031      	str	r1, [r6, #0]
 80073bc:	602b      	str	r3, [r5, #0]
 80073be:	b016      	add	sp, #88	@ 0x58
 80073c0:	bd70      	pop	{r4, r5, r6, pc}
 80073c2:	466a      	mov	r2, sp
 80073c4:	f000 f848 	bl	8007458 <_fstat_r>
 80073c8:	2800      	cmp	r0, #0
 80073ca:	dbec      	blt.n	80073a6 <__swhatbuf_r+0x12>
 80073cc:	9901      	ldr	r1, [sp, #4]
 80073ce:	f401 4170 	and.w	r1, r1, #61440	@ 0xf000
 80073d2:	f5a1 5300 	sub.w	r3, r1, #8192	@ 0x2000
 80073d6:	4259      	negs	r1, r3
 80073d8:	4159      	adcs	r1, r3
 80073da:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 80073de:	e7eb      	b.n	80073b8 <__swhatbuf_r+0x24>

080073e0 <__smakebuf_r>:
 80073e0:	898b      	ldrh	r3, [r1, #12]
 80073e2:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 80073e4:	079d      	lsls	r5, r3, #30
 80073e6:	4606      	mov	r6, r0
 80073e8:	460c      	mov	r4, r1
 80073ea:	d507      	bpl.n	80073fc <__smakebuf_r+0x1c>
 80073ec:	f104 0347 	add.w	r3, r4, #71	@ 0x47
 80073f0:	6023      	str	r3, [r4, #0]
 80073f2:	6123      	str	r3, [r4, #16]
 80073f4:	2301      	movs	r3, #1
 80073f6:	6163      	str	r3, [r4, #20]
 80073f8:	b003      	add	sp, #12
 80073fa:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80073fc:	ab01      	add	r3, sp, #4
 80073fe:	466a      	mov	r2, sp
 8007400:	f7ff ffc8 	bl	8007394 <__swhatbuf_r>
 8007404:	9f00      	ldr	r7, [sp, #0]
 8007406:	4605      	mov	r5, r0
 8007408:	4639      	mov	r1, r7
 800740a:	4630      	mov	r0, r6
 800740c:	f7ff fbba 	bl	8006b84 <_malloc_r>
 8007410:	b948      	cbnz	r0, 8007426 <__smakebuf_r+0x46>
 8007412:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8007416:	059a      	lsls	r2, r3, #22
 8007418:	d4ee      	bmi.n	80073f8 <__smakebuf_r+0x18>
 800741a:	f023 0303 	bic.w	r3, r3, #3
 800741e:	f043 0302 	orr.w	r3, r3, #2
 8007422:	81a3      	strh	r3, [r4, #12]
 8007424:	e7e2      	b.n	80073ec <__smakebuf_r+0xc>
 8007426:	89a3      	ldrh	r3, [r4, #12]
 8007428:	6020      	str	r0, [r4, #0]
 800742a:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 800742e:	81a3      	strh	r3, [r4, #12]
 8007430:	9b01      	ldr	r3, [sp, #4]
 8007432:	e9c4 0704 	strd	r0, r7, [r4, #16]
 8007436:	b15b      	cbz	r3, 8007450 <__smakebuf_r+0x70>
 8007438:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 800743c:	4630      	mov	r0, r6
 800743e:	f000 f81d 	bl	800747c <_isatty_r>
 8007442:	b128      	cbz	r0, 8007450 <__smakebuf_r+0x70>
 8007444:	89a3      	ldrh	r3, [r4, #12]
 8007446:	f023 0303 	bic.w	r3, r3, #3
 800744a:	f043 0301 	orr.w	r3, r3, #1
 800744e:	81a3      	strh	r3, [r4, #12]
 8007450:	89a3      	ldrh	r3, [r4, #12]
 8007452:	431d      	orrs	r5, r3
 8007454:	81a5      	strh	r5, [r4, #12]
 8007456:	e7cf      	b.n	80073f8 <__smakebuf_r+0x18>

08007458 <_fstat_r>:
 8007458:	b538      	push	{r3, r4, r5, lr}
 800745a:	4d07      	ldr	r5, [pc, #28]	@ (8007478 <_fstat_r+0x20>)
 800745c:	2300      	movs	r3, #0
 800745e:	4604      	mov	r4, r0
 8007460:	4608      	mov	r0, r1
 8007462:	4611      	mov	r1, r2
 8007464:	602b      	str	r3, [r5, #0]
 8007466:	f7fb fcf9 	bl	8002e5c <_fstat>
 800746a:	1c43      	adds	r3, r0, #1
 800746c:	d102      	bne.n	8007474 <_fstat_r+0x1c>
 800746e:	682b      	ldr	r3, [r5, #0]
 8007470:	b103      	cbz	r3, 8007474 <_fstat_r+0x1c>
 8007472:	6023      	str	r3, [r4, #0]
 8007474:	bd38      	pop	{r3, r4, r5, pc}
 8007476:	bf00      	nop
 8007478:	20025e00 	.word	0x20025e00

0800747c <_isatty_r>:
 800747c:	b538      	push	{r3, r4, r5, lr}
 800747e:	4d06      	ldr	r5, [pc, #24]	@ (8007498 <_isatty_r+0x1c>)
 8007480:	2300      	movs	r3, #0
 8007482:	4604      	mov	r4, r0
 8007484:	4608      	mov	r0, r1
 8007486:	602b      	str	r3, [r5, #0]
 8007488:	f7fb fcf8 	bl	8002e7c <_isatty>
 800748c:	1c43      	adds	r3, r0, #1
 800748e:	d102      	bne.n	8007496 <_isatty_r+0x1a>
 8007490:	682b      	ldr	r3, [r5, #0]
 8007492:	b103      	cbz	r3, 8007496 <_isatty_r+0x1a>
 8007494:	6023      	str	r3, [r4, #0]
 8007496:	bd38      	pop	{r3, r4, r5, pc}
 8007498:	20025e00 	.word	0x20025e00

0800749c <_sbrk_r>:
 800749c:	b538      	push	{r3, r4, r5, lr}
 800749e:	4d06      	ldr	r5, [pc, #24]	@ (80074b8 <_sbrk_r+0x1c>)
 80074a0:	2300      	movs	r3, #0
 80074a2:	4604      	mov	r4, r0
 80074a4:	4608      	mov	r0, r1
 80074a6:	602b      	str	r3, [r5, #0]
 80074a8:	f7fb fd00 	bl	8002eac <_sbrk>
 80074ac:	1c43      	adds	r3, r0, #1
 80074ae:	d102      	bne.n	80074b6 <_sbrk_r+0x1a>
 80074b0:	682b      	ldr	r3, [r5, #0]
 80074b2:	b103      	cbz	r3, 80074b6 <_sbrk_r+0x1a>
 80074b4:	6023      	str	r3, [r4, #0]
 80074b6:	bd38      	pop	{r3, r4, r5, pc}
 80074b8:	20025e00 	.word	0x20025e00

080074bc <_init>:
 80074bc:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80074be:	bf00      	nop
 80074c0:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80074c2:	bc08      	pop	{r3}
 80074c4:	469e      	mov	lr, r3
 80074c6:	4770      	bx	lr

080074c8 <_fini>:
 80074c8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80074ca:	bf00      	nop
 80074cc:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80074ce:	bc08      	pop	{r3}
 80074d0:	469e      	mov	lr, r3
 80074d2:	4770      	bx	lr
