
DJeungFinalProject.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001ac  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0000352c  080001ac  080001ac  000011ac  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000008  080036d8  080036d8  000046d8  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  080036e0  080036e0  00005010  2**0
                  CONTENTS
  4 .ARM          00000000  080036e0  080036e0  00005010  2**0
                  CONTENTS
  5 .preinit_array 00000000  080036e0  080036e0  00005010  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  080036e0  080036e0  000046e0  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  7 .fini_array   00000004  080036e4  080036e4  000046e4  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  8 .data         00000010  20000000  080036e8  00005000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .ccmram       00000000  10000000  10000000  00005010  2**0
                  CONTENTS
 10 .bss          00025b48  20000010  20000010  00005010  2**2
                  ALLOC
 11 ._user_heap_stack 00000600  20025b58  20025b58  00005010  2**0
                  ALLOC
 12 .ARM.attributes 00000030  00000000  00000000  00005010  2**0
                  CONTENTS, READONLY
 13 .debug_info   00011a7b  00000000  00000000  00005040  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_abbrev 0000299c  00000000  00000000  00016abb  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_aranges 000012a8  00000000  00000000  00019458  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_rnglists 00000e7e  00000000  00000000  0001a700  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_macro  0002685f  00000000  00000000  0001b57e  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_line   00016b2f  00000000  00000000  00041ddd  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_str    000e2525  00000000  00000000  0005890c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .comment      00000043  00000000  00000000  0013ae31  2**0
                  CONTENTS, READONLY
 21 .debug_frame  00004e98  00000000  00000000  0013ae74  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 22 .debug_line_str 0000006e  00000000  00000000  0013fd0c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001ac <__do_global_dtors_aux>:
 80001ac:	b510      	push	{r4, lr}
 80001ae:	4c05      	ldr	r4, [pc, #20]	@ (80001c4 <__do_global_dtors_aux+0x18>)
 80001b0:	7823      	ldrb	r3, [r4, #0]
 80001b2:	b933      	cbnz	r3, 80001c2 <__do_global_dtors_aux+0x16>
 80001b4:	4b04      	ldr	r3, [pc, #16]	@ (80001c8 <__do_global_dtors_aux+0x1c>)
 80001b6:	b113      	cbz	r3, 80001be <__do_global_dtors_aux+0x12>
 80001b8:	4804      	ldr	r0, [pc, #16]	@ (80001cc <__do_global_dtors_aux+0x20>)
 80001ba:	f3af 8000 	nop.w
 80001be:	2301      	movs	r3, #1
 80001c0:	7023      	strb	r3, [r4, #0]
 80001c2:	bd10      	pop	{r4, pc}
 80001c4:	20000010 	.word	0x20000010
 80001c8:	00000000 	.word	0x00000000
 80001cc:	080036c0 	.word	0x080036c0

080001d0 <frame_dummy>:
 80001d0:	b508      	push	{r3, lr}
 80001d2:	4b03      	ldr	r3, [pc, #12]	@ (80001e0 <frame_dummy+0x10>)
 80001d4:	b11b      	cbz	r3, 80001de <frame_dummy+0xe>
 80001d6:	4903      	ldr	r1, [pc, #12]	@ (80001e4 <frame_dummy+0x14>)
 80001d8:	4803      	ldr	r0, [pc, #12]	@ (80001e8 <frame_dummy+0x18>)
 80001da:	f3af 8000 	nop.w
 80001de:	bd08      	pop	{r3, pc}
 80001e0:	00000000 	.word	0x00000000
 80001e4:	20000014 	.word	0x20000014
 80001e8:	080036c0 	.word	0x080036c0

080001ec <ApplicationInit>:
void LCDTouchScreenInterruptGPIOInit(void);
#endif // TOUCH_INTERRUPT_ENABLED
#endif // COMPILE_TOUCH_FUNCTIONS

void ApplicationInit(void)
{
 80001ec:	b580      	push	{r7, lr}
 80001ee:	af00      	add	r7, sp, #0
	initialise_monitor_handles(); // Allows printf functionality
 80001f0:	f001 fae1 	bl	80017b6 <initialise_monitor_handles>
    LTCD__Init();
 80001f4:	f000 f912 	bl	800041c <LTCD__Init>
    LTCD_Layer_Init(0);
 80001f8:	2000      	movs	r0, #0
 80001fa:	f000 f8cf 	bl	800039c <LTCD_Layer_Init>
    LCD_Clear(0,LCD_COLOR_WHITE);
 80001fe:	f64f 71ff 	movw	r1, #65535	@ 0xffff
 8000202:	2000      	movs	r0, #0
 8000204:	f000 f9c0 	bl	8000588 <LCD_Clear>
	#if TOUCH_INTERRUPT_ENABLED == 1
	LCDTouchScreenInterruptGPIOInit();
	#endif // TOUCH_INTERRUPT_ENABLED

	#endif // COMPILE_TOUCH_FUNCTIONS
}
 8000208:	bf00      	nop
 800020a:	bd80      	pop	{r7, pc}

0800020c <LCD_GPIO_Init>:
//Someone from STM said it was "often accessed" a 1-dim array, and not a 2d array. However you still access it like a 2dim array,  using fb[y*W+x] instead of fb[y][x].
uint16_t frameBuffer[LCD_PIXEL_WIDTH*LCD_PIXEL_HEIGHT] = {0};			//16bpp pixel format.


void LCD_GPIO_Init(void)
{
 800020c:	b580      	push	{r7, lr}
 800020e:	b08c      	sub	sp, #48	@ 0x30
 8000210:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStructure;

  /* Enable the LTDC clock */
  __HAL_RCC_LTDC_CLK_ENABLE();
 8000212:	2300      	movs	r3, #0
 8000214:	61bb      	str	r3, [r7, #24]
 8000216:	4b5a      	ldr	r3, [pc, #360]	@ (8000380 <LCD_GPIO_Init+0x174>)
 8000218:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800021a:	4a59      	ldr	r2, [pc, #356]	@ (8000380 <LCD_GPIO_Init+0x174>)
 800021c:	f043 6380 	orr.w	r3, r3, #67108864	@ 0x4000000
 8000220:	6453      	str	r3, [r2, #68]	@ 0x44
 8000222:	4b57      	ldr	r3, [pc, #348]	@ (8000380 <LCD_GPIO_Init+0x174>)
 8000224:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8000226:	f003 6380 	and.w	r3, r3, #67108864	@ 0x4000000
 800022a:	61bb      	str	r3, [r7, #24]
 800022c:	69bb      	ldr	r3, [r7, #24]

  /* Enable GPIO clock */
  __HAL_RCC_GPIOA_CLK_ENABLE();
 800022e:	2300      	movs	r3, #0
 8000230:	617b      	str	r3, [r7, #20]
 8000232:	4b53      	ldr	r3, [pc, #332]	@ (8000380 <LCD_GPIO_Init+0x174>)
 8000234:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000236:	4a52      	ldr	r2, [pc, #328]	@ (8000380 <LCD_GPIO_Init+0x174>)
 8000238:	f043 0301 	orr.w	r3, r3, #1
 800023c:	6313      	str	r3, [r2, #48]	@ 0x30
 800023e:	4b50      	ldr	r3, [pc, #320]	@ (8000380 <LCD_GPIO_Init+0x174>)
 8000240:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000242:	f003 0301 	and.w	r3, r3, #1
 8000246:	617b      	str	r3, [r7, #20]
 8000248:	697b      	ldr	r3, [r7, #20]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 800024a:	2300      	movs	r3, #0
 800024c:	613b      	str	r3, [r7, #16]
 800024e:	4b4c      	ldr	r3, [pc, #304]	@ (8000380 <LCD_GPIO_Init+0x174>)
 8000250:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000252:	4a4b      	ldr	r2, [pc, #300]	@ (8000380 <LCD_GPIO_Init+0x174>)
 8000254:	f043 0302 	orr.w	r3, r3, #2
 8000258:	6313      	str	r3, [r2, #48]	@ 0x30
 800025a:	4b49      	ldr	r3, [pc, #292]	@ (8000380 <LCD_GPIO_Init+0x174>)
 800025c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800025e:	f003 0302 	and.w	r3, r3, #2
 8000262:	613b      	str	r3, [r7, #16]
 8000264:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8000266:	2300      	movs	r3, #0
 8000268:	60fb      	str	r3, [r7, #12]
 800026a:	4b45      	ldr	r3, [pc, #276]	@ (8000380 <LCD_GPIO_Init+0x174>)
 800026c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800026e:	4a44      	ldr	r2, [pc, #272]	@ (8000380 <LCD_GPIO_Init+0x174>)
 8000270:	f043 0304 	orr.w	r3, r3, #4
 8000274:	6313      	str	r3, [r2, #48]	@ 0x30
 8000276:	4b42      	ldr	r3, [pc, #264]	@ (8000380 <LCD_GPIO_Init+0x174>)
 8000278:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800027a:	f003 0304 	and.w	r3, r3, #4
 800027e:	60fb      	str	r3, [r7, #12]
 8000280:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 8000282:	2300      	movs	r3, #0
 8000284:	60bb      	str	r3, [r7, #8]
 8000286:	4b3e      	ldr	r3, [pc, #248]	@ (8000380 <LCD_GPIO_Init+0x174>)
 8000288:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800028a:	4a3d      	ldr	r2, [pc, #244]	@ (8000380 <LCD_GPIO_Init+0x174>)
 800028c:	f043 0308 	orr.w	r3, r3, #8
 8000290:	6313      	str	r3, [r2, #48]	@ 0x30
 8000292:	4b3b      	ldr	r3, [pc, #236]	@ (8000380 <LCD_GPIO_Init+0x174>)
 8000294:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000296:	f003 0308 	and.w	r3, r3, #8
 800029a:	60bb      	str	r3, [r7, #8]
 800029c:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOF_CLK_ENABLE();
 800029e:	2300      	movs	r3, #0
 80002a0:	607b      	str	r3, [r7, #4]
 80002a2:	4b37      	ldr	r3, [pc, #220]	@ (8000380 <LCD_GPIO_Init+0x174>)
 80002a4:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80002a6:	4a36      	ldr	r2, [pc, #216]	@ (8000380 <LCD_GPIO_Init+0x174>)
 80002a8:	f043 0320 	orr.w	r3, r3, #32
 80002ac:	6313      	str	r3, [r2, #48]	@ 0x30
 80002ae:	4b34      	ldr	r3, [pc, #208]	@ (8000380 <LCD_GPIO_Init+0x174>)
 80002b0:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80002b2:	f003 0320 	and.w	r3, r3, #32
 80002b6:	607b      	str	r3, [r7, #4]
 80002b8:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOG_CLK_ENABLE();
 80002ba:	2300      	movs	r3, #0
 80002bc:	603b      	str	r3, [r7, #0]
 80002be:	4b30      	ldr	r3, [pc, #192]	@ (8000380 <LCD_GPIO_Init+0x174>)
 80002c0:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80002c2:	4a2f      	ldr	r2, [pc, #188]	@ (8000380 <LCD_GPIO_Init+0x174>)
 80002c4:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 80002c8:	6313      	str	r3, [r2, #48]	@ 0x30
 80002ca:	4b2d      	ldr	r3, [pc, #180]	@ (8000380 <LCD_GPIO_Init+0x174>)
 80002cc:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80002ce:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80002d2:	603b      	str	r3, [r7, #0]
 80002d4:	683b      	ldr	r3, [r7, #0]
   LCD_TFT CLK   <-> PG.07
   LCD_TFT DE   <->  PF.10
  */

  /* GPIOA configuration */
  GPIO_InitStructure.Pin = GPIO_PIN_3 | GPIO_PIN_4 | GPIO_PIN_6 |
 80002d6:	f641 0358 	movw	r3, #6232	@ 0x1858
 80002da:	61fb      	str	r3, [r7, #28]
                           GPIO_PIN_11 | GPIO_PIN_12;
  GPIO_InitStructure.Mode = GPIO_MODE_AF_PP;
 80002dc:	2302      	movs	r3, #2
 80002de:	623b      	str	r3, [r7, #32]
  GPIO_InitStructure.Pull = GPIO_NOPULL;
 80002e0:	2300      	movs	r3, #0
 80002e2:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStructure.Speed = GPIO_SPEED_FAST;
 80002e4:	2302      	movs	r3, #2
 80002e6:	62bb      	str	r3, [r7, #40]	@ 0x28
  GPIO_InitStructure.Alternate= GPIO_AF14_LTDC;
 80002e8:	230e      	movs	r3, #14
 80002ea:	62fb      	str	r3, [r7, #44]	@ 0x2c
  HAL_GPIO_Init(GPIOA, &GPIO_InitStructure);
 80002ec:	f107 031c 	add.w	r3, r7, #28
 80002f0:	4619      	mov	r1, r3
 80002f2:	4824      	ldr	r0, [pc, #144]	@ (8000384 <LCD_GPIO_Init+0x178>)
 80002f4:	f001 fc1e 	bl	8001b34 <HAL_GPIO_Init>

 /* GPIOB configuration */
  GPIO_InitStructure.Pin = GPIO_PIN_8 | \
 80002f8:	f44f 6370 	mov.w	r3, #3840	@ 0xf00
 80002fc:	61fb      	str	r3, [r7, #28]
                           GPIO_PIN_9 | GPIO_PIN_10 | GPIO_PIN_11;
  HAL_GPIO_Init(GPIOB, &GPIO_InitStructure);
 80002fe:	f107 031c 	add.w	r3, r7, #28
 8000302:	4619      	mov	r1, r3
 8000304:	4820      	ldr	r0, [pc, #128]	@ (8000388 <LCD_GPIO_Init+0x17c>)
 8000306:	f001 fc15 	bl	8001b34 <HAL_GPIO_Init>

 /* GPIOC configuration */
  GPIO_InitStructure.Pin = GPIO_PIN_6 | GPIO_PIN_7 | GPIO_PIN_10;
 800030a:	f44f 6398 	mov.w	r3, #1216	@ 0x4c0
 800030e:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOC, &GPIO_InitStructure);
 8000310:	f107 031c 	add.w	r3, r7, #28
 8000314:	4619      	mov	r1, r3
 8000316:	481d      	ldr	r0, [pc, #116]	@ (800038c <LCD_GPIO_Init+0x180>)
 8000318:	f001 fc0c 	bl	8001b34 <HAL_GPIO_Init>

 /* GPIOD configuration */
  GPIO_InitStructure.Pin = GPIO_PIN_3 | GPIO_PIN_6;
 800031c:	2348      	movs	r3, #72	@ 0x48
 800031e:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOD, &GPIO_InitStructure);
 8000320:	f107 031c 	add.w	r3, r7, #28
 8000324:	4619      	mov	r1, r3
 8000326:	481a      	ldr	r0, [pc, #104]	@ (8000390 <LCD_GPIO_Init+0x184>)
 8000328:	f001 fc04 	bl	8001b34 <HAL_GPIO_Init>

 /* GPIOF configuration */
  GPIO_InitStructure.Pin = GPIO_PIN_10;
 800032c:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 8000330:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOF, &GPIO_InitStructure);
 8000332:	f107 031c 	add.w	r3, r7, #28
 8000336:	4619      	mov	r1, r3
 8000338:	4816      	ldr	r0, [pc, #88]	@ (8000394 <LCD_GPIO_Init+0x188>)
 800033a:	f001 fbfb 	bl	8001b34 <HAL_GPIO_Init>

 /* GPIOG configuration */
  GPIO_InitStructure.Pin = GPIO_PIN_6 | GPIO_PIN_7 | \
 800033e:	f44f 630c 	mov.w	r3, #2240	@ 0x8c0
 8000342:	61fb      	str	r3, [r7, #28]
                           GPIO_PIN_11;
  HAL_GPIO_Init(GPIOG, &GPIO_InitStructure);
 8000344:	f107 031c 	add.w	r3, r7, #28
 8000348:	4619      	mov	r1, r3
 800034a:	4813      	ldr	r0, [pc, #76]	@ (8000398 <LCD_GPIO_Init+0x18c>)
 800034c:	f001 fbf2 	bl	8001b34 <HAL_GPIO_Init>

  /* GPIOB configuration */
  GPIO_InitStructure.Pin = GPIO_PIN_0 | GPIO_PIN_1;
 8000350:	2303      	movs	r3, #3
 8000352:	61fb      	str	r3, [r7, #28]
  GPIO_InitStructure.Alternate= GPIO_AF9_LTDC;
 8000354:	2309      	movs	r3, #9
 8000356:	62fb      	str	r3, [r7, #44]	@ 0x2c
  HAL_GPIO_Init(GPIOB, &GPIO_InitStructure);
 8000358:	f107 031c 	add.w	r3, r7, #28
 800035c:	4619      	mov	r1, r3
 800035e:	480a      	ldr	r0, [pc, #40]	@ (8000388 <LCD_GPIO_Init+0x17c>)
 8000360:	f001 fbe8 	bl	8001b34 <HAL_GPIO_Init>

  /* GPIOG configuration */
  GPIO_InitStructure.Pin = GPIO_PIN_10 | GPIO_PIN_12;
 8000364:	f44f 53a0 	mov.w	r3, #5120	@ 0x1400
 8000368:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOG, &GPIO_InitStructure);
 800036a:	f107 031c 	add.w	r3, r7, #28
 800036e:	4619      	mov	r1, r3
 8000370:	4809      	ldr	r0, [pc, #36]	@ (8000398 <LCD_GPIO_Init+0x18c>)
 8000372:	f001 fbdf 	bl	8001b34 <HAL_GPIO_Init>
}
 8000376:	bf00      	nop
 8000378:	3730      	adds	r7, #48	@ 0x30
 800037a:	46bd      	mov	sp, r7
 800037c:	bd80      	pop	{r7, pc}
 800037e:	bf00      	nop
 8000380:	40023800 	.word	0x40023800
 8000384:	40020000 	.word	0x40020000
 8000388:	40020400 	.word	0x40020400
 800038c:	40020800 	.word	0x40020800
 8000390:	40020c00 	.word	0x40020c00
 8000394:	40021400 	.word	0x40021400
 8000398:	40021800 	.word	0x40021800

0800039c <LTCD_Layer_Init>:

void LTCD_Layer_Init(uint8_t LayerIndex)
{
 800039c:	b580      	push	{r7, lr}
 800039e:	b090      	sub	sp, #64	@ 0x40
 80003a0:	af00      	add	r7, sp, #0
 80003a2:	4603      	mov	r3, r0
 80003a4:	71fb      	strb	r3, [r7, #7]
	LTDC_LayerCfgTypeDef  pLayerCfg;

	pLayerCfg.WindowX0 = 0;	//Configures the Window HORZ START Position.
 80003a6:	2300      	movs	r3, #0
 80003a8:	60fb      	str	r3, [r7, #12]
	pLayerCfg.WindowX1 = LCD_PIXEL_WIDTH;	//Configures the Window HORZ Stop Position.
 80003aa:	23f0      	movs	r3, #240	@ 0xf0
 80003ac:	613b      	str	r3, [r7, #16]
	pLayerCfg.WindowY0 = 0;	//Configures the Window vertical START Position.
 80003ae:	2300      	movs	r3, #0
 80003b0:	617b      	str	r3, [r7, #20]
	pLayerCfg.WindowY1 = LCD_PIXEL_HEIGHT;	//Configures the Window vertical Stop Position.
 80003b2:	f44f 73a0 	mov.w	r3, #320	@ 0x140
 80003b6:	61bb      	str	r3, [r7, #24]
	pLayerCfg.PixelFormat = LCD_PIXEL_FORMAT_1;  //INCORRECT PIXEL FORMAT WILL GIVE WEIRD RESULTS!! IT MAY STILL WORK FOR 1/2 THE DISPLAY!!! //This is our buffers pixel format. 2 bytes for each pixel
 80003b8:	2302      	movs	r3, #2
 80003ba:	61fb      	str	r3, [r7, #28]
	pLayerCfg.Alpha = 255;
 80003bc:	23ff      	movs	r3, #255	@ 0xff
 80003be:	623b      	str	r3, [r7, #32]
	pLayerCfg.Alpha0 = 0;
 80003c0:	2300      	movs	r3, #0
 80003c2:	627b      	str	r3, [r7, #36]	@ 0x24
	pLayerCfg.BlendingFactor1 = LTDC_BLENDING_FACTOR1_CA;
 80003c4:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 80003c8:	62bb      	str	r3, [r7, #40]	@ 0x28
	pLayerCfg.BlendingFactor2 = LTDC_BLENDING_FACTOR2_CA;
 80003ca:	2305      	movs	r3, #5
 80003cc:	62fb      	str	r3, [r7, #44]	@ 0x2c
	if (LayerIndex == 0){
 80003ce:	79fb      	ldrb	r3, [r7, #7]
 80003d0:	2b00      	cmp	r3, #0
 80003d2:	d101      	bne.n	80003d8 <LTCD_Layer_Init+0x3c>
		pLayerCfg.FBStartAdress = (uintptr_t)frameBuffer;
 80003d4:	4b0f      	ldr	r3, [pc, #60]	@ (8000414 <LTCD_Layer_Init+0x78>)
 80003d6:	633b      	str	r3, [r7, #48]	@ 0x30
	}
	pLayerCfg.ImageWidth = LCD_PIXEL_WIDTH;
 80003d8:	23f0      	movs	r3, #240	@ 0xf0
 80003da:	637b      	str	r3, [r7, #52]	@ 0x34
	pLayerCfg.ImageHeight = LCD_PIXEL_HEIGHT;
 80003dc:	f44f 73a0 	mov.w	r3, #320	@ 0x140
 80003e0:	63bb      	str	r3, [r7, #56]	@ 0x38
	pLayerCfg.Backcolor.Blue = 0;
 80003e2:	2300      	movs	r3, #0
 80003e4:	f887 303c 	strb.w	r3, [r7, #60]	@ 0x3c
	pLayerCfg.Backcolor.Green = 0;
 80003e8:	2300      	movs	r3, #0
 80003ea:	f887 303d 	strb.w	r3, [r7, #61]	@ 0x3d
	pLayerCfg.Backcolor.Red = 0;
 80003ee:	2300      	movs	r3, #0
 80003f0:	f887 303e 	strb.w	r3, [r7, #62]	@ 0x3e
	if (HAL_LTDC_ConfigLayer(&hltdc, &pLayerCfg, LayerIndex) != HAL_OK)
 80003f4:	79fa      	ldrb	r2, [r7, #7]
 80003f6:	f107 030c 	add.w	r3, r7, #12
 80003fa:	4619      	mov	r1, r3
 80003fc:	4806      	ldr	r0, [pc, #24]	@ (8000418 <LTCD_Layer_Init+0x7c>)
 80003fe:	f002 f8fb 	bl	80025f8 <HAL_LTDC_ConfigLayer>
 8000402:	4603      	mov	r3, r0
 8000404:	2b00      	cmp	r3, #0
 8000406:	d001      	beq.n	800040c <LTCD_Layer_Init+0x70>
	{
		LCD_Error_Handler();
 8000408:	f000 f8e0 	bl	80005cc <LCD_Error_Handler>
	}
}
 800040c:	bf00      	nop
 800040e:	3740      	adds	r7, #64	@ 0x40
 8000410:	46bd      	mov	sp, r7
 8000412:	bd80      	pop	{r7, pc}
 8000414:	20000104 	.word	0x20000104
 8000418:	2000002c 	.word	0x2000002c

0800041c <LTCD__Init>:
{
  LCD_Clear(0,LCD_COLOR_WHITE);
}

void LTCD__Init(void)
{
 800041c:	b580      	push	{r7, lr}
 800041e:	af00      	add	r7, sp, #0
	hltdc.Instance = LTDC;
 8000420:	4b2a      	ldr	r3, [pc, #168]	@ (80004cc <LTCD__Init+0xb0>)
 8000422:	4a2b      	ldr	r2, [pc, #172]	@ (80004d0 <LTCD__Init+0xb4>)
 8000424:	601a      	str	r2, [r3, #0]
	/* Configure horizontal synchronization width */
	hltdc.Init.HorizontalSync = ILI9341_HSYNC;
 8000426:	4b29      	ldr	r3, [pc, #164]	@ (80004cc <LTCD__Init+0xb0>)
 8000428:	2209      	movs	r2, #9
 800042a:	615a      	str	r2, [r3, #20]
	/* Configure vertical synchronization height */
	hltdc.Init.VerticalSync = ILI9341_VSYNC;
 800042c:	4b27      	ldr	r3, [pc, #156]	@ (80004cc <LTCD__Init+0xb0>)
 800042e:	2201      	movs	r2, #1
 8000430:	619a      	str	r2, [r3, #24]
	/* Configure accumulated horizontal back porch */
	hltdc.Init.AccumulatedHBP = ILI9341_HBP;
 8000432:	4b26      	ldr	r3, [pc, #152]	@ (80004cc <LTCD__Init+0xb0>)
 8000434:	221d      	movs	r2, #29
 8000436:	61da      	str	r2, [r3, #28]
	/* Configure accumulated vertical back porch */
	hltdc.Init.AccumulatedVBP = ILI9341_VBP;
 8000438:	4b24      	ldr	r3, [pc, #144]	@ (80004cc <LTCD__Init+0xb0>)
 800043a:	2203      	movs	r2, #3
 800043c:	621a      	str	r2, [r3, #32]
	/* Configure accumulated active width */
	hltdc.Init.AccumulatedActiveW = 269;
 800043e:	4b23      	ldr	r3, [pc, #140]	@ (80004cc <LTCD__Init+0xb0>)
 8000440:	f240 120d 	movw	r2, #269	@ 0x10d
 8000444:	625a      	str	r2, [r3, #36]	@ 0x24
	/* Configure accumulated active height */
	hltdc.Init.AccumulatedActiveH = 323;
 8000446:	4b21      	ldr	r3, [pc, #132]	@ (80004cc <LTCD__Init+0xb0>)
 8000448:	f240 1243 	movw	r2, #323	@ 0x143
 800044c:	629a      	str	r2, [r3, #40]	@ 0x28
	/* Configure total width */
	hltdc.Init.TotalWidth = 279;
 800044e:	4b1f      	ldr	r3, [pc, #124]	@ (80004cc <LTCD__Init+0xb0>)
 8000450:	f240 1217 	movw	r2, #279	@ 0x117
 8000454:	62da      	str	r2, [r3, #44]	@ 0x2c
	/* Configure total height */
	hltdc.Init.TotalHeigh = 327;
 8000456:	4b1d      	ldr	r3, [pc, #116]	@ (80004cc <LTCD__Init+0xb0>)
 8000458:	f240 1247 	movw	r2, #327	@ 0x147
 800045c:	631a      	str	r2, [r3, #48]	@ 0x30
	/* Configure R,G,B component values for LCD background color */
	hltdc.Init.Backcolor.Red = 0;
 800045e:	4b1b      	ldr	r3, [pc, #108]	@ (80004cc <LTCD__Init+0xb0>)
 8000460:	2200      	movs	r2, #0
 8000462:	f883 2036 	strb.w	r2, [r3, #54]	@ 0x36
	hltdc.Init.Backcolor.Blue = 0;
 8000466:	4b19      	ldr	r3, [pc, #100]	@ (80004cc <LTCD__Init+0xb0>)
 8000468:	2200      	movs	r2, #0
 800046a:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
	hltdc.Init.Backcolor.Green = 0;
 800046e:	4b17      	ldr	r3, [pc, #92]	@ (80004cc <LTCD__Init+0xb0>)
 8000470:	2200      	movs	r2, #0
 8000472:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35
	/* PLLSAI_VCO Input = HSE_VALUE/PLL_M = 1 Mhz */
	/* PLLSAI_VCO Output = PLLSAI_VCO Input * PLLSAIN = 192 Mhz */
	/* PLLLCDCLK = PLLSAI_VCO Output/PLLSAIR = 192/4 = 48 Mhz */
	/* LTDC clock frequency = PLLLCDCLK / LTDC_PLLSAI_DIVR_8 = 48/4 = 6Mhz */

	PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_LTDC;
 8000476:	4b17      	ldr	r3, [pc, #92]	@ (80004d4 <LTCD__Init+0xb8>)
 8000478:	2208      	movs	r2, #8
 800047a:	601a      	str	r2, [r3, #0]
	PeriphClkInitStruct.PLLSAI.PLLSAIN = 192;
 800047c:	4b15      	ldr	r3, [pc, #84]	@ (80004d4 <LTCD__Init+0xb8>)
 800047e:	22c0      	movs	r2, #192	@ 0xc0
 8000480:	611a      	str	r2, [r3, #16]
	PeriphClkInitStruct.PLLSAI.PLLSAIR = 4;
 8000482:	4b14      	ldr	r3, [pc, #80]	@ (80004d4 <LTCD__Init+0xb8>)
 8000484:	2204      	movs	r2, #4
 8000486:	619a      	str	r2, [r3, #24]
	PeriphClkInitStruct.PLLSAIDivR = RCC_PLLSAIDIVR_8;
 8000488:	4b12      	ldr	r3, [pc, #72]	@ (80004d4 <LTCD__Init+0xb8>)
 800048a:	f44f 3200 	mov.w	r2, #131072	@ 0x20000
 800048e:	625a      	str	r2, [r3, #36]	@ 0x24
	HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct);
 8000490:	4810      	ldr	r0, [pc, #64]	@ (80004d4 <LTCD__Init+0xb8>)
 8000492:	f002 faa7 	bl	80029e4 <HAL_RCCEx_PeriphCLKConfig>
	/* Polarity */
	hltdc.Init.HSPolarity = LTDC_HSPOLARITY_AL;
 8000496:	4b0d      	ldr	r3, [pc, #52]	@ (80004cc <LTCD__Init+0xb0>)
 8000498:	2200      	movs	r2, #0
 800049a:	605a      	str	r2, [r3, #4]
	hltdc.Init.VSPolarity = LTDC_VSPOLARITY_AL;
 800049c:	4b0b      	ldr	r3, [pc, #44]	@ (80004cc <LTCD__Init+0xb0>)
 800049e:	2200      	movs	r2, #0
 80004a0:	609a      	str	r2, [r3, #8]
	hltdc.Init.DEPolarity = LTDC_DEPOLARITY_AL;
 80004a2:	4b0a      	ldr	r3, [pc, #40]	@ (80004cc <LTCD__Init+0xb0>)
 80004a4:	2200      	movs	r2, #0
 80004a6:	60da      	str	r2, [r3, #12]
	hltdc.Init.PCPolarity = LTDC_PCPOLARITY_IPC;
 80004a8:	4b08      	ldr	r3, [pc, #32]	@ (80004cc <LTCD__Init+0xb0>)
 80004aa:	2200      	movs	r2, #0
 80004ac:	611a      	str	r2, [r3, #16]

	LCD_GPIO_Init();
 80004ae:	f7ff fead 	bl	800020c <LCD_GPIO_Init>

	if (HAL_LTDC_Init(&hltdc) != HAL_OK)
 80004b2:	4806      	ldr	r0, [pc, #24]	@ (80004cc <LTCD__Init+0xb0>)
 80004b4:	f001 ffd0 	bl	8002458 <HAL_LTDC_Init>
 80004b8:	4603      	mov	r3, r0
 80004ba:	2b00      	cmp	r3, #0
 80004bc:	d001      	beq.n	80004c2 <LTCD__Init+0xa6>
	 {
	   LCD_Error_Handler();
 80004be:	f000 f885 	bl	80005cc <LCD_Error_Handler>
	 }

	ili9341_Init();
 80004c2:	f000 f889 	bl	80005d8 <ili9341_Init>
}
 80004c6:	bf00      	nop
 80004c8:	bd80      	pop	{r7, pc}
 80004ca:	bf00      	nop
 80004cc:	2000002c 	.word	0x2000002c
 80004d0:	40016800 	.word	0x40016800
 80004d4:	200000d4 	.word	0x200000d4

080004d8 <LCD_Draw_Pixel>:
 * This is really the only function needed.
 * All drawing consists of is manipulating the array.
 * Adding input sanitation should probably be done.
 */
void LCD_Draw_Pixel(uint16_t x, uint16_t y, uint16_t color)
{
 80004d8:	b480      	push	{r7}
 80004da:	b083      	sub	sp, #12
 80004dc:	af00      	add	r7, sp, #0
 80004de:	4603      	mov	r3, r0
 80004e0:	80fb      	strh	r3, [r7, #6]
 80004e2:	460b      	mov	r3, r1
 80004e4:	80bb      	strh	r3, [r7, #4]
 80004e6:	4613      	mov	r3, r2
 80004e8:	807b      	strh	r3, [r7, #2]
	frameBuffer[y*LCD_PIXEL_WIDTH+x] = color;  //You cannot do x*y to set the pixel.
 80004ea:	88ba      	ldrh	r2, [r7, #4]
 80004ec:	4613      	mov	r3, r2
 80004ee:	011b      	lsls	r3, r3, #4
 80004f0:	1a9b      	subs	r3, r3, r2
 80004f2:	011b      	lsls	r3, r3, #4
 80004f4:	461a      	mov	r2, r3
 80004f6:	88fb      	ldrh	r3, [r7, #6]
 80004f8:	4413      	add	r3, r2
 80004fa:	4905      	ldr	r1, [pc, #20]	@ (8000510 <LCD_Draw_Pixel+0x38>)
 80004fc:	887a      	ldrh	r2, [r7, #2]
 80004fe:	f821 2013 	strh.w	r2, [r1, r3, lsl #1]
}
 8000502:	bf00      	nop
 8000504:	370c      	adds	r7, #12
 8000506:	46bd      	mov	sp, r7
 8000508:	f85d 7b04 	ldr.w	r7, [sp], #4
 800050c:	4770      	bx	lr
 800050e:	bf00      	nop
 8000510:	20000104 	.word	0x20000104

08000514 <LCD_Draw_Square_Fill>:
        }
    }
}

void LCD_Draw_Square_Fill(uint16_t Xpos, uint16_t Ypos, uint16_t length, uint16_t color)
{
 8000514:	b590      	push	{r4, r7, lr}
 8000516:	b085      	sub	sp, #20
 8000518:	af00      	add	r7, sp, #0
 800051a:	4604      	mov	r4, r0
 800051c:	4608      	mov	r0, r1
 800051e:	4611      	mov	r1, r2
 8000520:	461a      	mov	r2, r3
 8000522:	4623      	mov	r3, r4
 8000524:	80fb      	strh	r3, [r7, #6]
 8000526:	4603      	mov	r3, r0
 8000528:	80bb      	strh	r3, [r7, #4]
 800052a:	460b      	mov	r3, r1
 800052c:	807b      	strh	r3, [r7, #2]
 800052e:	4613      	mov	r3, r2
 8000530:	803b      	strh	r3, [r7, #0]
	for (int16_t y = Ypos ; y <= (Ypos+length); y++)
 8000532:	88bb      	ldrh	r3, [r7, #4]
 8000534:	81fb      	strh	r3, [r7, #14]
 8000536:	e01b      	b.n	8000570 <LCD_Draw_Square_Fill+0x5c>
	{
		for (int16_t x = Xpos; x<= (Xpos+length); x++)
 8000538:	88fb      	ldrh	r3, [r7, #6]
 800053a:	81bb      	strh	r3, [r7, #12]
 800053c:	e00b      	b.n	8000556 <LCD_Draw_Square_Fill+0x42>
		{
			LCD_Draw_Pixel(x, y, color);
 800053e:	89bb      	ldrh	r3, [r7, #12]
 8000540:	89f9      	ldrh	r1, [r7, #14]
 8000542:	883a      	ldrh	r2, [r7, #0]
 8000544:	4618      	mov	r0, r3
 8000546:	f7ff ffc7 	bl	80004d8 <LCD_Draw_Pixel>
		for (int16_t x = Xpos; x<= (Xpos+length); x++)
 800054a:	f9b7 300c 	ldrsh.w	r3, [r7, #12]
 800054e:	b29b      	uxth	r3, r3
 8000550:	3301      	adds	r3, #1
 8000552:	b29b      	uxth	r3, r3
 8000554:	81bb      	strh	r3, [r7, #12]
 8000556:	f9b7 200c 	ldrsh.w	r2, [r7, #12]
 800055a:	88f9      	ldrh	r1, [r7, #6]
 800055c:	887b      	ldrh	r3, [r7, #2]
 800055e:	440b      	add	r3, r1
 8000560:	429a      	cmp	r2, r3
 8000562:	ddec      	ble.n	800053e <LCD_Draw_Square_Fill+0x2a>
	for (int16_t y = Ypos ; y <= (Ypos+length); y++)
 8000564:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
 8000568:	b29b      	uxth	r3, r3
 800056a:	3301      	adds	r3, #1
 800056c:	b29b      	uxth	r3, r3
 800056e:	81fb      	strh	r3, [r7, #14]
 8000570:	f9b7 200e 	ldrsh.w	r2, [r7, #14]
 8000574:	88b9      	ldrh	r1, [r7, #4]
 8000576:	887b      	ldrh	r3, [r7, #2]
 8000578:	440b      	add	r3, r1
 800057a:	429a      	cmp	r2, r3
 800057c:	dddc      	ble.n	8000538 <LCD_Draw_Square_Fill+0x24>
		}
	}
}
 800057e:	bf00      	nop
 8000580:	bf00      	nop
 8000582:	3714      	adds	r7, #20
 8000584:	46bd      	mov	sp, r7
 8000586:	bd90      	pop	{r4, r7, pc}

08000588 <LCD_Clear>:
	  LCD_Draw_Pixel(x, i+y, color);
  }
}

void LCD_Clear(uint8_t LayerIndex, uint16_t Color)
{
 8000588:	b480      	push	{r7}
 800058a:	b085      	sub	sp, #20
 800058c:	af00      	add	r7, sp, #0
 800058e:	4603      	mov	r3, r0
 8000590:	460a      	mov	r2, r1
 8000592:	71fb      	strb	r3, [r7, #7]
 8000594:	4613      	mov	r3, r2
 8000596:	80bb      	strh	r3, [r7, #4]
	if (LayerIndex == 0){
 8000598:	79fb      	ldrb	r3, [r7, #7]
 800059a:	2b00      	cmp	r3, #0
 800059c:	d10e      	bne.n	80005bc <LCD_Clear+0x34>
		for (uint32_t i = 0; i < LCD_PIXEL_WIDTH * LCD_PIXEL_HEIGHT; i++){
 800059e:	2300      	movs	r3, #0
 80005a0:	60fb      	str	r3, [r7, #12]
 80005a2:	e007      	b.n	80005b4 <LCD_Clear+0x2c>
			frameBuffer[i] = Color;
 80005a4:	4908      	ldr	r1, [pc, #32]	@ (80005c8 <LCD_Clear+0x40>)
 80005a6:	68fb      	ldr	r3, [r7, #12]
 80005a8:	88ba      	ldrh	r2, [r7, #4]
 80005aa:	f821 2013 	strh.w	r2, [r1, r3, lsl #1]
		for (uint32_t i = 0; i < LCD_PIXEL_WIDTH * LCD_PIXEL_HEIGHT; i++){
 80005ae:	68fb      	ldr	r3, [r7, #12]
 80005b0:	3301      	adds	r3, #1
 80005b2:	60fb      	str	r3, [r7, #12]
 80005b4:	68fb      	ldr	r3, [r7, #12]
 80005b6:	f5b3 3f96 	cmp.w	r3, #76800	@ 0x12c00
 80005ba:	d3f3      	bcc.n	80005a4 <LCD_Clear+0x1c>
		}
	}
  // TODO: Add more Layers if needed
}
 80005bc:	bf00      	nop
 80005be:	3714      	adds	r7, #20
 80005c0:	46bd      	mov	sp, r7
 80005c2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80005c6:	4770      	bx	lr
 80005c8:	20000104 	.word	0x20000104

080005cc <LCD_Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void LCD_Error_Handler(void)
{
 80005cc:	b480      	push	{r7}
 80005ce:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting special-purpose register PRIMASK.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 80005d0:	b672      	cpsid	i
}
 80005d2:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 80005d4:	bf00      	nop
 80005d6:	e7fd      	b.n	80005d4 <LCD_Error_Handler+0x8>

080005d8 <ili9341_Init>:
  * @brief  Power on the LCD.
  * @param  None
  * @retval None
  */
void ili9341_Init(void)
{
 80005d8:	b580      	push	{r7, lr}
 80005da:	af00      	add	r7, sp, #0
  /* Initialize ILI9341 low level bus layer ----------------------------------*/
  LCD_IO_Init();
 80005dc:	f000 f9fe 	bl	80009dc <LCD_IO_Init>

  /* Configure LCD */
  ili9341_Write_Reg(0xCA);
 80005e0:	20ca      	movs	r0, #202	@ 0xca
 80005e2:	f000 f943 	bl	800086c <ili9341_Write_Reg>
  ili9341_Send_Data(0xC3);				//param 1
 80005e6:	20c3      	movs	r0, #195	@ 0xc3
 80005e8:	f000 f94d 	bl	8000886 <ili9341_Send_Data>
  ili9341_Send_Data(0x08);				//param 2
 80005ec:	2008      	movs	r0, #8
 80005ee:	f000 f94a 	bl	8000886 <ili9341_Send_Data>
  ili9341_Send_Data(0x50);				//param 3
 80005f2:	2050      	movs	r0, #80	@ 0x50
 80005f4:	f000 f947 	bl	8000886 <ili9341_Send_Data>
  ili9341_Write_Reg(LCD_POWERB); //CF
 80005f8:	20cf      	movs	r0, #207	@ 0xcf
 80005fa:	f000 f937 	bl	800086c <ili9341_Write_Reg>
  ili9341_Send_Data(0x00);				//param 1
 80005fe:	2000      	movs	r0, #0
 8000600:	f000 f941 	bl	8000886 <ili9341_Send_Data>
  ili9341_Send_Data(0xC1);				//param 2
 8000604:	20c1      	movs	r0, #193	@ 0xc1
 8000606:	f000 f93e 	bl	8000886 <ili9341_Send_Data>
  ili9341_Send_Data(0x30);				//param 3
 800060a:	2030      	movs	r0, #48	@ 0x30
 800060c:	f000 f93b 	bl	8000886 <ili9341_Send_Data>
  ili9341_Write_Reg(LCD_POWER_SEQ); //ED
 8000610:	20ed      	movs	r0, #237	@ 0xed
 8000612:	f000 f92b 	bl	800086c <ili9341_Write_Reg>
  ili9341_Send_Data(0x64);
 8000616:	2064      	movs	r0, #100	@ 0x64
 8000618:	f000 f935 	bl	8000886 <ili9341_Send_Data>
  ili9341_Send_Data(0x03);
 800061c:	2003      	movs	r0, #3
 800061e:	f000 f932 	bl	8000886 <ili9341_Send_Data>
  ili9341_Send_Data(0x12);
 8000622:	2012      	movs	r0, #18
 8000624:	f000 f92f 	bl	8000886 <ili9341_Send_Data>
  ili9341_Send_Data(0x81);
 8000628:	2081      	movs	r0, #129	@ 0x81
 800062a:	f000 f92c 	bl	8000886 <ili9341_Send_Data>
  ili9341_Write_Reg(LCD_DTCA);
 800062e:	20e8      	movs	r0, #232	@ 0xe8
 8000630:	f000 f91c 	bl	800086c <ili9341_Write_Reg>
  ili9341_Send_Data(0x85);
 8000634:	2085      	movs	r0, #133	@ 0x85
 8000636:	f000 f926 	bl	8000886 <ili9341_Send_Data>
  ili9341_Send_Data(0x00);
 800063a:	2000      	movs	r0, #0
 800063c:	f000 f923 	bl	8000886 <ili9341_Send_Data>
  ili9341_Send_Data(0x78);
 8000640:	2078      	movs	r0, #120	@ 0x78
 8000642:	f000 f920 	bl	8000886 <ili9341_Send_Data>
  ili9341_Write_Reg(LCD_POWERA);
 8000646:	20cb      	movs	r0, #203	@ 0xcb
 8000648:	f000 f910 	bl	800086c <ili9341_Write_Reg>
  ili9341_Send_Data(0x39);
 800064c:	2039      	movs	r0, #57	@ 0x39
 800064e:	f000 f91a 	bl	8000886 <ili9341_Send_Data>
  ili9341_Send_Data(0x2C);
 8000652:	202c      	movs	r0, #44	@ 0x2c
 8000654:	f000 f917 	bl	8000886 <ili9341_Send_Data>
  ili9341_Send_Data(0x00);
 8000658:	2000      	movs	r0, #0
 800065a:	f000 f914 	bl	8000886 <ili9341_Send_Data>
  ili9341_Send_Data(0x34);
 800065e:	2034      	movs	r0, #52	@ 0x34
 8000660:	f000 f911 	bl	8000886 <ili9341_Send_Data>
  ili9341_Send_Data(0x02);
 8000664:	2002      	movs	r0, #2
 8000666:	f000 f90e 	bl	8000886 <ili9341_Send_Data>
  ili9341_Write_Reg(LCD_PRC);
 800066a:	20f7      	movs	r0, #247	@ 0xf7
 800066c:	f000 f8fe 	bl	800086c <ili9341_Write_Reg>
  ili9341_Send_Data(0x20);
 8000670:	2020      	movs	r0, #32
 8000672:	f000 f908 	bl	8000886 <ili9341_Send_Data>
  ili9341_Write_Reg(LCD_DTCB);
 8000676:	20ea      	movs	r0, #234	@ 0xea
 8000678:	f000 f8f8 	bl	800086c <ili9341_Write_Reg>
  ili9341_Send_Data(0x00);
 800067c:	2000      	movs	r0, #0
 800067e:	f000 f902 	bl	8000886 <ili9341_Send_Data>
  ili9341_Send_Data(0x00);
 8000682:	2000      	movs	r0, #0
 8000684:	f000 f8ff 	bl	8000886 <ili9341_Send_Data>
  ili9341_Write_Reg(LCD_FRMCTR1);
 8000688:	20b1      	movs	r0, #177	@ 0xb1
 800068a:	f000 f8ef 	bl	800086c <ili9341_Write_Reg>
  ili9341_Send_Data(0x00);
 800068e:	2000      	movs	r0, #0
 8000690:	f000 f8f9 	bl	8000886 <ili9341_Send_Data>
  ili9341_Send_Data(0x1B);
 8000694:	201b      	movs	r0, #27
 8000696:	f000 f8f6 	bl	8000886 <ili9341_Send_Data>
  ili9341_Write_Reg(LCD_DFC);
 800069a:	20b6      	movs	r0, #182	@ 0xb6
 800069c:	f000 f8e6 	bl	800086c <ili9341_Write_Reg>
  ili9341_Send_Data(0x0A);
 80006a0:	200a      	movs	r0, #10
 80006a2:	f000 f8f0 	bl	8000886 <ili9341_Send_Data>
  ili9341_Send_Data(0xA2);
 80006a6:	20a2      	movs	r0, #162	@ 0xa2
 80006a8:	f000 f8ed 	bl	8000886 <ili9341_Send_Data>
  ili9341_Write_Reg(LCD_POWER1);
 80006ac:	20c0      	movs	r0, #192	@ 0xc0
 80006ae:	f000 f8dd 	bl	800086c <ili9341_Write_Reg>
  ili9341_Send_Data(0x10);
 80006b2:	2010      	movs	r0, #16
 80006b4:	f000 f8e7 	bl	8000886 <ili9341_Send_Data>
  ili9341_Write_Reg(LCD_POWER2);
 80006b8:	20c1      	movs	r0, #193	@ 0xc1
 80006ba:	f000 f8d7 	bl	800086c <ili9341_Write_Reg>
  ili9341_Send_Data(0x10);
 80006be:	2010      	movs	r0, #16
 80006c0:	f000 f8e1 	bl	8000886 <ili9341_Send_Data>
  ili9341_Write_Reg(LCD_VCOM1);
 80006c4:	20c5      	movs	r0, #197	@ 0xc5
 80006c6:	f000 f8d1 	bl	800086c <ili9341_Write_Reg>
  ili9341_Send_Data(0x45);
 80006ca:	2045      	movs	r0, #69	@ 0x45
 80006cc:	f000 f8db 	bl	8000886 <ili9341_Send_Data>
  ili9341_Send_Data(0x15);
 80006d0:	2015      	movs	r0, #21
 80006d2:	f000 f8d8 	bl	8000886 <ili9341_Send_Data>
  ili9341_Write_Reg(LCD_VCOM2);
 80006d6:	20c7      	movs	r0, #199	@ 0xc7
 80006d8:	f000 f8c8 	bl	800086c <ili9341_Write_Reg>
  ili9341_Send_Data(0x90);
 80006dc:	2090      	movs	r0, #144	@ 0x90
 80006de:	f000 f8d2 	bl	8000886 <ili9341_Send_Data>
  ili9341_Write_Reg(LCD_MAC);
 80006e2:	2036      	movs	r0, #54	@ 0x36
 80006e4:	f000 f8c2 	bl	800086c <ili9341_Write_Reg>
  ili9341_Send_Data(0xC8);
 80006e8:	20c8      	movs	r0, #200	@ 0xc8
 80006ea:	f000 f8cc 	bl	8000886 <ili9341_Send_Data>
  ili9341_Write_Reg(LCD_3GAMMA_EN);
 80006ee:	20f2      	movs	r0, #242	@ 0xf2
 80006f0:	f000 f8bc 	bl	800086c <ili9341_Write_Reg>
  ili9341_Send_Data(0x00);
 80006f4:	2000      	movs	r0, #0
 80006f6:	f000 f8c6 	bl	8000886 <ili9341_Send_Data>
  ili9341_Write_Reg(LCD_RGB_INTERFACE);
 80006fa:	20b0      	movs	r0, #176	@ 0xb0
 80006fc:	f000 f8b6 	bl	800086c <ili9341_Write_Reg>
  ili9341_Send_Data(0xC2);
 8000700:	20c2      	movs	r0, #194	@ 0xc2
 8000702:	f000 f8c0 	bl	8000886 <ili9341_Send_Data>
  ili9341_Write_Reg(LCD_DFC);
 8000706:	20b6      	movs	r0, #182	@ 0xb6
 8000708:	f000 f8b0 	bl	800086c <ili9341_Write_Reg>
  ili9341_Send_Data(0x0A);
 800070c:	200a      	movs	r0, #10
 800070e:	f000 f8ba 	bl	8000886 <ili9341_Send_Data>
  ili9341_Send_Data(0xA7);
 8000712:	20a7      	movs	r0, #167	@ 0xa7
 8000714:	f000 f8b7 	bl	8000886 <ili9341_Send_Data>
  ili9341_Send_Data(0x27);
 8000718:	2027      	movs	r0, #39	@ 0x27
 800071a:	f000 f8b4 	bl	8000886 <ili9341_Send_Data>
  ili9341_Send_Data(0x04);
 800071e:	2004      	movs	r0, #4
 8000720:	f000 f8b1 	bl	8000886 <ili9341_Send_Data>

  /* Colomn address set */
  ili9341_Write_Reg(LCD_COLUMN_ADDR);
 8000724:	202a      	movs	r0, #42	@ 0x2a
 8000726:	f000 f8a1 	bl	800086c <ili9341_Write_Reg>
  ili9341_Send_Data(0x00);
 800072a:	2000      	movs	r0, #0
 800072c:	f000 f8ab 	bl	8000886 <ili9341_Send_Data>
  ili9341_Send_Data(0x00);
 8000730:	2000      	movs	r0, #0
 8000732:	f000 f8a8 	bl	8000886 <ili9341_Send_Data>
  ili9341_Send_Data(0x00);
 8000736:	2000      	movs	r0, #0
 8000738:	f000 f8a5 	bl	8000886 <ili9341_Send_Data>
  ili9341_Send_Data(0xEF);
 800073c:	20ef      	movs	r0, #239	@ 0xef
 800073e:	f000 f8a2 	bl	8000886 <ili9341_Send_Data>

  /* Page address set */
  ili9341_Write_Reg(LCD_PAGE_ADDR);
 8000742:	202b      	movs	r0, #43	@ 0x2b
 8000744:	f000 f892 	bl	800086c <ili9341_Write_Reg>
  ili9341_Send_Data(0x00);
 8000748:	2000      	movs	r0, #0
 800074a:	f000 f89c 	bl	8000886 <ili9341_Send_Data>
  ili9341_Send_Data(0x00);
 800074e:	2000      	movs	r0, #0
 8000750:	f000 f899 	bl	8000886 <ili9341_Send_Data>
  ili9341_Send_Data(0x01);
 8000754:	2001      	movs	r0, #1
 8000756:	f000 f896 	bl	8000886 <ili9341_Send_Data>
  ili9341_Send_Data(0x3F);
 800075a:	203f      	movs	r0, #63	@ 0x3f
 800075c:	f000 f893 	bl	8000886 <ili9341_Send_Data>
  ili9341_Write_Reg(LCD_INTERFACE);
 8000760:	20f6      	movs	r0, #246	@ 0xf6
 8000762:	f000 f883 	bl	800086c <ili9341_Write_Reg>
  ili9341_Send_Data(0x01);
 8000766:	2001      	movs	r0, #1
 8000768:	f000 f88d 	bl	8000886 <ili9341_Send_Data>
  ili9341_Send_Data(0x00);
 800076c:	2000      	movs	r0, #0
 800076e:	f000 f88a 	bl	8000886 <ili9341_Send_Data>
  ili9341_Send_Data(0x06);
 8000772:	2006      	movs	r0, #6
 8000774:	f000 f887 	bl	8000886 <ili9341_Send_Data>

  ili9341_Write_Reg(LCD_GRAM);
 8000778:	202c      	movs	r0, #44	@ 0x2c
 800077a:	f000 f877 	bl	800086c <ili9341_Write_Reg>
  LCD_Delay(200);
 800077e:	20c8      	movs	r0, #200	@ 0xc8
 8000780:	f000 f9e8 	bl	8000b54 <LCD_Delay>

  ili9341_Write_Reg(LCD_GAMMA);
 8000784:	2026      	movs	r0, #38	@ 0x26
 8000786:	f000 f871 	bl	800086c <ili9341_Write_Reg>
  ili9341_Send_Data(0x01);
 800078a:	2001      	movs	r0, #1
 800078c:	f000 f87b 	bl	8000886 <ili9341_Send_Data>

  ili9341_Write_Reg(LCD_PGAMMA);
 8000790:	20e0      	movs	r0, #224	@ 0xe0
 8000792:	f000 f86b 	bl	800086c <ili9341_Write_Reg>
  ili9341_Send_Data(0x0F);
 8000796:	200f      	movs	r0, #15
 8000798:	f000 f875 	bl	8000886 <ili9341_Send_Data>
  ili9341_Send_Data(0x29);
 800079c:	2029      	movs	r0, #41	@ 0x29
 800079e:	f000 f872 	bl	8000886 <ili9341_Send_Data>
  ili9341_Send_Data(0x24);
 80007a2:	2024      	movs	r0, #36	@ 0x24
 80007a4:	f000 f86f 	bl	8000886 <ili9341_Send_Data>
  ili9341_Send_Data(0x0C);
 80007a8:	200c      	movs	r0, #12
 80007aa:	f000 f86c 	bl	8000886 <ili9341_Send_Data>
  ili9341_Send_Data(0x0E);
 80007ae:	200e      	movs	r0, #14
 80007b0:	f000 f869 	bl	8000886 <ili9341_Send_Data>
  ili9341_Send_Data(0x09);
 80007b4:	2009      	movs	r0, #9
 80007b6:	f000 f866 	bl	8000886 <ili9341_Send_Data>
  ili9341_Send_Data(0x4E);
 80007ba:	204e      	movs	r0, #78	@ 0x4e
 80007bc:	f000 f863 	bl	8000886 <ili9341_Send_Data>
  ili9341_Send_Data(0x78);
 80007c0:	2078      	movs	r0, #120	@ 0x78
 80007c2:	f000 f860 	bl	8000886 <ili9341_Send_Data>
  ili9341_Send_Data(0x3C);
 80007c6:	203c      	movs	r0, #60	@ 0x3c
 80007c8:	f000 f85d 	bl	8000886 <ili9341_Send_Data>
  ili9341_Send_Data(0x09);
 80007cc:	2009      	movs	r0, #9
 80007ce:	f000 f85a 	bl	8000886 <ili9341_Send_Data>
  ili9341_Send_Data(0x13);
 80007d2:	2013      	movs	r0, #19
 80007d4:	f000 f857 	bl	8000886 <ili9341_Send_Data>
  ili9341_Send_Data(0x05);
 80007d8:	2005      	movs	r0, #5
 80007da:	f000 f854 	bl	8000886 <ili9341_Send_Data>
  ili9341_Send_Data(0x17);
 80007de:	2017      	movs	r0, #23
 80007e0:	f000 f851 	bl	8000886 <ili9341_Send_Data>
  ili9341_Send_Data(0x11);
 80007e4:	2011      	movs	r0, #17
 80007e6:	f000 f84e 	bl	8000886 <ili9341_Send_Data>
  ili9341_Send_Data(0x00);
 80007ea:	2000      	movs	r0, #0
 80007ec:	f000 f84b 	bl	8000886 <ili9341_Send_Data>
  ili9341_Write_Reg(LCD_NGAMMA);
 80007f0:	20e1      	movs	r0, #225	@ 0xe1
 80007f2:	f000 f83b 	bl	800086c <ili9341_Write_Reg>
  ili9341_Send_Data(0x00);
 80007f6:	2000      	movs	r0, #0
 80007f8:	f000 f845 	bl	8000886 <ili9341_Send_Data>
  ili9341_Send_Data(0x16);
 80007fc:	2016      	movs	r0, #22
 80007fe:	f000 f842 	bl	8000886 <ili9341_Send_Data>
  ili9341_Send_Data(0x1B);
 8000802:	201b      	movs	r0, #27
 8000804:	f000 f83f 	bl	8000886 <ili9341_Send_Data>
  ili9341_Send_Data(0x04);
 8000808:	2004      	movs	r0, #4
 800080a:	f000 f83c 	bl	8000886 <ili9341_Send_Data>
  ili9341_Send_Data(0x11);
 800080e:	2011      	movs	r0, #17
 8000810:	f000 f839 	bl	8000886 <ili9341_Send_Data>
  ili9341_Send_Data(0x07);
 8000814:	2007      	movs	r0, #7
 8000816:	f000 f836 	bl	8000886 <ili9341_Send_Data>
  ili9341_Send_Data(0x31);
 800081a:	2031      	movs	r0, #49	@ 0x31
 800081c:	f000 f833 	bl	8000886 <ili9341_Send_Data>
  ili9341_Send_Data(0x33);
 8000820:	2033      	movs	r0, #51	@ 0x33
 8000822:	f000 f830 	bl	8000886 <ili9341_Send_Data>
  ili9341_Send_Data(0x42);
 8000826:	2042      	movs	r0, #66	@ 0x42
 8000828:	f000 f82d 	bl	8000886 <ili9341_Send_Data>
  ili9341_Send_Data(0x05);
 800082c:	2005      	movs	r0, #5
 800082e:	f000 f82a 	bl	8000886 <ili9341_Send_Data>
  ili9341_Send_Data(0x0C);
 8000832:	200c      	movs	r0, #12
 8000834:	f000 f827 	bl	8000886 <ili9341_Send_Data>
  ili9341_Send_Data(0x0A);
 8000838:	200a      	movs	r0, #10
 800083a:	f000 f824 	bl	8000886 <ili9341_Send_Data>
  ili9341_Send_Data(0x28);
 800083e:	2028      	movs	r0, #40	@ 0x28
 8000840:	f000 f821 	bl	8000886 <ili9341_Send_Data>
  ili9341_Send_Data(0x2F);
 8000844:	202f      	movs	r0, #47	@ 0x2f
 8000846:	f000 f81e 	bl	8000886 <ili9341_Send_Data>
  ili9341_Send_Data(0x0F);
 800084a:	200f      	movs	r0, #15
 800084c:	f000 f81b 	bl	8000886 <ili9341_Send_Data>

  ili9341_Write_Reg(LCD_SLEEP_OUT);
 8000850:	2011      	movs	r0, #17
 8000852:	f000 f80b 	bl	800086c <ili9341_Write_Reg>
  LCD_Delay(200);
 8000856:	20c8      	movs	r0, #200	@ 0xc8
 8000858:	f000 f97c 	bl	8000b54 <LCD_Delay>
  ili9341_Write_Reg(LCD_DISPLAY_ON);
 800085c:	2029      	movs	r0, #41	@ 0x29
 800085e:	f000 f805 	bl	800086c <ili9341_Write_Reg>
  /* GRAM start writing */
  ili9341_Write_Reg(LCD_GRAM);
 8000862:	202c      	movs	r0, #44	@ 0x2c
 8000864:	f000 f802 	bl	800086c <ili9341_Write_Reg>
}
 8000868:	bf00      	nop
 800086a:	bd80      	pop	{r7, pc}

0800086c <ili9341_Write_Reg>:
  * @brief  Writes  to the selected LCD register.
  * @param  LCD_Reg: address of the selected register.
  * @retval None
  */
void ili9341_Write_Reg(uint8_t LCD_Reg)
{
 800086c:	b580      	push	{r7, lr}
 800086e:	b082      	sub	sp, #8
 8000870:	af00      	add	r7, sp, #0
 8000872:	4603      	mov	r3, r0
 8000874:	71fb      	strb	r3, [r7, #7]
  LCD_IO_WriteReg(LCD_Reg);
 8000876:	79fb      	ldrb	r3, [r7, #7]
 8000878:	4618      	mov	r0, r3
 800087a:	f000 f949 	bl	8000b10 <LCD_IO_WriteReg>
}
 800087e:	bf00      	nop
 8000880:	3708      	adds	r7, #8
 8000882:	46bd      	mov	sp, r7
 8000884:	bd80      	pop	{r7, pc}

08000886 <ili9341_Send_Data>:
  * @brief  Writes data to the selected LCD register.
  * @param  LCD_Reg: address of the selected register.
  * @retval None
  */
void ili9341_Send_Data(uint16_t RegValue)
{
 8000886:	b580      	push	{r7, lr}
 8000888:	b082      	sub	sp, #8
 800088a:	af00      	add	r7, sp, #0
 800088c:	4603      	mov	r3, r0
 800088e:	80fb      	strh	r3, [r7, #6]
  LCD_IO_WriteData(RegValue);
 8000890:	88fb      	ldrh	r3, [r7, #6]
 8000892:	4618      	mov	r0, r3
 8000894:	f000 f91a 	bl	8000acc <LCD_IO_WriteData>
}
 8000898:	bf00      	nop
 800089a:	3708      	adds	r7, #8
 800089c:	46bd      	mov	sp, r7
 800089e:	bd80      	pop	{r7, pc}

080008a0 <SPI_Init>:

/**
  * @brief  SPI Bus initialization
  */
static void SPI_Init(void)
{
 80008a0:	b580      	push	{r7, lr}
 80008a2:	af00      	add	r7, sp, #0
  if(HAL_SPI_GetState(&SpiHandle) == HAL_SPI_STATE_RESET)
 80008a4:	4819      	ldr	r0, [pc, #100]	@ (800090c <SPI_Init+0x6c>)
 80008a6:	f002 fc7c 	bl	80031a2 <HAL_SPI_GetState>
 80008aa:	4603      	mov	r3, r0
 80008ac:	2b00      	cmp	r3, #0
 80008ae:	d12b      	bne.n	8000908 <SPI_Init+0x68>
  {
    /* SPI configuration -----------------------------------------------------*/
    SpiHandle.Instance = DISCOVERY_SPI;
 80008b0:	4b16      	ldr	r3, [pc, #88]	@ (800090c <SPI_Init+0x6c>)
 80008b2:	4a17      	ldr	r2, [pc, #92]	@ (8000910 <SPI_Init+0x70>)
 80008b4:	601a      	str	r2, [r3, #0]
       to verify these constraints:
       - ILI9341 LCD SPI interface max baudrate is 10MHz for write and 6.66MHz for read
       - l3gd20 SPI interface max baudrate is 10MHz for write/read
       - PCLK2 frequency is set to 90 MHz
    */
    SpiHandle.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_16;
 80008b6:	4b15      	ldr	r3, [pc, #84]	@ (800090c <SPI_Init+0x6c>)
 80008b8:	2218      	movs	r2, #24
 80008ba:	61da      	str	r2, [r3, #28]

    /* On STM32F429I-Discovery, LCD ID cannot be read then keep a common configuration */
    /* for LCD and GYRO (SPI_DIRECTION_2LINES) */
    /* Note: To read a register a LCD, SPI_DIRECTION_1LINE should be set */
    SpiHandle.Init.Direction      = SPI_DIRECTION_2LINES;
 80008bc:	4b13      	ldr	r3, [pc, #76]	@ (800090c <SPI_Init+0x6c>)
 80008be:	2200      	movs	r2, #0
 80008c0:	609a      	str	r2, [r3, #8]
    SpiHandle.Init.CLKPhase       = SPI_PHASE_1EDGE;
 80008c2:	4b12      	ldr	r3, [pc, #72]	@ (800090c <SPI_Init+0x6c>)
 80008c4:	2200      	movs	r2, #0
 80008c6:	615a      	str	r2, [r3, #20]
    SpiHandle.Init.CLKPolarity    = SPI_POLARITY_LOW;
 80008c8:	4b10      	ldr	r3, [pc, #64]	@ (800090c <SPI_Init+0x6c>)
 80008ca:	2200      	movs	r2, #0
 80008cc:	611a      	str	r2, [r3, #16]
    SpiHandle.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLED;
 80008ce:	4b0f      	ldr	r3, [pc, #60]	@ (800090c <SPI_Init+0x6c>)
 80008d0:	2200      	movs	r2, #0
 80008d2:	629a      	str	r2, [r3, #40]	@ 0x28
    SpiHandle.Init.CRCPolynomial  = 7;
 80008d4:	4b0d      	ldr	r3, [pc, #52]	@ (800090c <SPI_Init+0x6c>)
 80008d6:	2207      	movs	r2, #7
 80008d8:	62da      	str	r2, [r3, #44]	@ 0x2c
    SpiHandle.Init.DataSize       = SPI_DATASIZE_8BIT;
 80008da:	4b0c      	ldr	r3, [pc, #48]	@ (800090c <SPI_Init+0x6c>)
 80008dc:	2200      	movs	r2, #0
 80008de:	60da      	str	r2, [r3, #12]
    SpiHandle.Init.FirstBit       = SPI_FIRSTBIT_MSB;
 80008e0:	4b0a      	ldr	r3, [pc, #40]	@ (800090c <SPI_Init+0x6c>)
 80008e2:	2200      	movs	r2, #0
 80008e4:	621a      	str	r2, [r3, #32]
    SpiHandle.Init.NSS            = SPI_NSS_SOFT;
 80008e6:	4b09      	ldr	r3, [pc, #36]	@ (800090c <SPI_Init+0x6c>)
 80008e8:	f44f 7200 	mov.w	r2, #512	@ 0x200
 80008ec:	619a      	str	r2, [r3, #24]
    SpiHandle.Init.TIMode         = SPI_TIMODE_DISABLED;
 80008ee:	4b07      	ldr	r3, [pc, #28]	@ (800090c <SPI_Init+0x6c>)
 80008f0:	2200      	movs	r2, #0
 80008f2:	625a      	str	r2, [r3, #36]	@ 0x24
    SpiHandle.Init.Mode           = SPI_MODE_MASTER;
 80008f4:	4b05      	ldr	r3, [pc, #20]	@ (800090c <SPI_Init+0x6c>)
 80008f6:	f44f 7282 	mov.w	r2, #260	@ 0x104
 80008fa:	605a      	str	r2, [r3, #4]

    SPI_MspInit(&SpiHandle);
 80008fc:	4803      	ldr	r0, [pc, #12]	@ (800090c <SPI_Init+0x6c>)
 80008fe:	f000 f833 	bl	8000968 <SPI_MspInit>
    HAL_SPI_Init(&SpiHandle);
 8000902:	4802      	ldr	r0, [pc, #8]	@ (800090c <SPI_Init+0x6c>)
 8000904:	f002 fa58 	bl	8002db8 <HAL_SPI_Init>
  }
}
 8000908:	bf00      	nop
 800090a:	bd80      	pop	{r7, pc}
 800090c:	20025904 	.word	0x20025904
 8000910:	40015000 	.word	0x40015000

08000914 <SPI_Write>:
/**
  * @brief  Writes a byte to device.
  * @param  Value: value to be written
  */
static void SPI_Write(uint16_t Value)
{
 8000914:	b580      	push	{r7, lr}
 8000916:	b084      	sub	sp, #16
 8000918:	af00      	add	r7, sp, #0
 800091a:	4603      	mov	r3, r0
 800091c:	80fb      	strh	r3, [r7, #6]
  HAL_StatusTypeDef status = HAL_OK;
 800091e:	2300      	movs	r3, #0
 8000920:	73fb      	strb	r3, [r7, #15]

  status = HAL_SPI_Transmit(&SpiHandle, (uint8_t*) &Value, 1, SpiTimeout);
 8000922:	4b09      	ldr	r3, [pc, #36]	@ (8000948 <SPI_Write+0x34>)
 8000924:	681b      	ldr	r3, [r3, #0]
 8000926:	1db9      	adds	r1, r7, #6
 8000928:	2201      	movs	r2, #1
 800092a:	4808      	ldr	r0, [pc, #32]	@ (800094c <SPI_Write+0x38>)
 800092c:	f002 faf5 	bl	8002f1a <HAL_SPI_Transmit>
 8000930:	4603      	mov	r3, r0
 8000932:	73fb      	strb	r3, [r7, #15]

  /* Check the communication status */
  if(status != HAL_OK)
 8000934:	7bfb      	ldrb	r3, [r7, #15]
 8000936:	2b00      	cmp	r3, #0
 8000938:	d001      	beq.n	800093e <SPI_Write+0x2a>
  {
    /* Re-Initialize the BUS */
    SPI_Error();
 800093a:	f000 f809 	bl	8000950 <SPI_Error>
  }
}
 800093e:	bf00      	nop
 8000940:	3710      	adds	r7, #16
 8000942:	46bd      	mov	sp, r7
 8000944:	bd80      	pop	{r7, pc}
 8000946:	bf00      	nop
 8000948:	20000000 	.word	0x20000000
 800094c:	20025904 	.word	0x20025904

08000950 <SPI_Error>:

/**
  * @brief  SPI error treatment function.
  */
static void SPI_Error(void)
{
 8000950:	b580      	push	{r7, lr}
 8000952:	af00      	add	r7, sp, #0
  /* De-initialize the SPI communication BUS */
  HAL_SPI_DeInit(&SpiHandle);
 8000954:	4803      	ldr	r0, [pc, #12]	@ (8000964 <SPI_Error+0x14>)
 8000956:	f002 fab8 	bl	8002eca <HAL_SPI_DeInit>

  /* Re- Initialize the SPI communication BUS */
  SPI_Init();
 800095a:	f7ff ffa1 	bl	80008a0 <SPI_Init>
}
 800095e:	bf00      	nop
 8000960:	bd80      	pop	{r7, pc}
 8000962:	bf00      	nop
 8000964:	20025904 	.word	0x20025904

08000968 <SPI_MspInit>:
/**
  * @brief  SPI MSP Init.
  * @param  hspi: SPI handle
  */
static void SPI_MspInit(SPI_HandleTypeDef *hspi)
{
 8000968:	b580      	push	{r7, lr}
 800096a:	b08a      	sub	sp, #40	@ 0x28
 800096c:	af00      	add	r7, sp, #0
 800096e:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef   GPIO_InitStructure;

  /* Enable SPI clock */
  DISCOVERY_SPI_CLK_ENABLE();
 8000970:	2300      	movs	r3, #0
 8000972:	613b      	str	r3, [r7, #16]
 8000974:	4b17      	ldr	r3, [pc, #92]	@ (80009d4 <SPI_MspInit+0x6c>)
 8000976:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8000978:	4a16      	ldr	r2, [pc, #88]	@ (80009d4 <SPI_MspInit+0x6c>)
 800097a:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 800097e:	6453      	str	r3, [r2, #68]	@ 0x44
 8000980:	4b14      	ldr	r3, [pc, #80]	@ (80009d4 <SPI_MspInit+0x6c>)
 8000982:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8000984:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 8000988:	613b      	str	r3, [r7, #16]
 800098a:	693b      	ldr	r3, [r7, #16]

  /* Enable DISCOVERY_SPI GPIO clock */
  DISCOVERY_SPI_GPIO_CLK_ENABLE();
 800098c:	2300      	movs	r3, #0
 800098e:	60fb      	str	r3, [r7, #12]
 8000990:	4b10      	ldr	r3, [pc, #64]	@ (80009d4 <SPI_MspInit+0x6c>)
 8000992:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000994:	4a0f      	ldr	r2, [pc, #60]	@ (80009d4 <SPI_MspInit+0x6c>)
 8000996:	f043 0320 	orr.w	r3, r3, #32
 800099a:	6313      	str	r3, [r2, #48]	@ 0x30
 800099c:	4b0d      	ldr	r3, [pc, #52]	@ (80009d4 <SPI_MspInit+0x6c>)
 800099e:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80009a0:	f003 0320 	and.w	r3, r3, #32
 80009a4:	60fb      	str	r3, [r7, #12]
 80009a6:	68fb      	ldr	r3, [r7, #12]

  /* configure SPI SCK, MOSI and MISO */
  GPIO_InitStructure.Pin    = (DISCOVERY_SPI_SCK_PIN | DISCOVERY_SPI_MOSI_PIN | DISCOVERY_SPI_MISO_PIN);
 80009a8:	f44f 7360 	mov.w	r3, #896	@ 0x380
 80009ac:	617b      	str	r3, [r7, #20]
  GPIO_InitStructure.Mode   = GPIO_MODE_AF_PP;
 80009ae:	2302      	movs	r3, #2
 80009b0:	61bb      	str	r3, [r7, #24]
  GPIO_InitStructure.Pull   = GPIO_PULLDOWN;
 80009b2:	2302      	movs	r3, #2
 80009b4:	61fb      	str	r3, [r7, #28]
  GPIO_InitStructure.Speed  = GPIO_SPEED_MEDIUM;
 80009b6:	2301      	movs	r3, #1
 80009b8:	623b      	str	r3, [r7, #32]
  GPIO_InitStructure.Alternate = DISCOVERY_SPI_AF;
 80009ba:	2305      	movs	r3, #5
 80009bc:	627b      	str	r3, [r7, #36]	@ 0x24
  HAL_GPIO_Init(DISCOVERY_SPI_GPIO_PORT, &GPIO_InitStructure);
 80009be:	f107 0314 	add.w	r3, r7, #20
 80009c2:	4619      	mov	r1, r3
 80009c4:	4804      	ldr	r0, [pc, #16]	@ (80009d8 <SPI_MspInit+0x70>)
 80009c6:	f001 f8b5 	bl	8001b34 <HAL_GPIO_Init>
}
 80009ca:	bf00      	nop
 80009cc:	3728      	adds	r7, #40	@ 0x28
 80009ce:	46bd      	mov	sp, r7
 80009d0:	bd80      	pop	{r7, pc}
 80009d2:	bf00      	nop
 80009d4:	40023800 	.word	0x40023800
 80009d8:	40021400 	.word	0x40021400

080009dc <LCD_IO_Init>:

/**
  * @brief  Configures the LCD_SPI interface.
  */
void LCD_IO_Init(void)
{
 80009dc:	b580      	push	{r7, lr}
 80009de:	b088      	sub	sp, #32
 80009e0:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStructure;

  if(Is_LCD_IO_Initialized == 0)
 80009e2:	4b36      	ldr	r3, [pc, #216]	@ (8000abc <LCD_IO_Init+0xe0>)
 80009e4:	781b      	ldrb	r3, [r3, #0]
 80009e6:	2b00      	cmp	r3, #0
 80009e8:	d164      	bne.n	8000ab4 <LCD_IO_Init+0xd8>
  {
    Is_LCD_IO_Initialized = 1;
 80009ea:	4b34      	ldr	r3, [pc, #208]	@ (8000abc <LCD_IO_Init+0xe0>)
 80009ec:	2201      	movs	r2, #1
 80009ee:	701a      	strb	r2, [r3, #0]

    /* Configure in Output Push-Pull mode */
    LCD_WRX_GPIO_CLK_ENABLE();
 80009f0:	2300      	movs	r3, #0
 80009f2:	60bb      	str	r3, [r7, #8]
 80009f4:	4b32      	ldr	r3, [pc, #200]	@ (8000ac0 <LCD_IO_Init+0xe4>)
 80009f6:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80009f8:	4a31      	ldr	r2, [pc, #196]	@ (8000ac0 <LCD_IO_Init+0xe4>)
 80009fa:	f043 0308 	orr.w	r3, r3, #8
 80009fe:	6313      	str	r3, [r2, #48]	@ 0x30
 8000a00:	4b2f      	ldr	r3, [pc, #188]	@ (8000ac0 <LCD_IO_Init+0xe4>)
 8000a02:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000a04:	f003 0308 	and.w	r3, r3, #8
 8000a08:	60bb      	str	r3, [r7, #8]
 8000a0a:	68bb      	ldr	r3, [r7, #8]
    GPIO_InitStructure.Pin     = LCD_WRX_PIN;
 8000a0c:	f44f 5300 	mov.w	r3, #8192	@ 0x2000
 8000a10:	60fb      	str	r3, [r7, #12]
    GPIO_InitStructure.Mode    = GPIO_MODE_OUTPUT_PP;
 8000a12:	2301      	movs	r3, #1
 8000a14:	613b      	str	r3, [r7, #16]
    GPIO_InitStructure.Pull    = GPIO_NOPULL;
 8000a16:	2300      	movs	r3, #0
 8000a18:	617b      	str	r3, [r7, #20]
    GPIO_InitStructure.Speed   = GPIO_SPEED_FAST;
 8000a1a:	2302      	movs	r3, #2
 8000a1c:	61bb      	str	r3, [r7, #24]
    HAL_GPIO_Init(LCD_WRX_GPIO_PORT, &GPIO_InitStructure);
 8000a1e:	f107 030c 	add.w	r3, r7, #12
 8000a22:	4619      	mov	r1, r3
 8000a24:	4827      	ldr	r0, [pc, #156]	@ (8000ac4 <LCD_IO_Init+0xe8>)
 8000a26:	f001 f885 	bl	8001b34 <HAL_GPIO_Init>

    LCD_RDX_GPIO_CLK_ENABLE();
 8000a2a:	2300      	movs	r3, #0
 8000a2c:	607b      	str	r3, [r7, #4]
 8000a2e:	4b24      	ldr	r3, [pc, #144]	@ (8000ac0 <LCD_IO_Init+0xe4>)
 8000a30:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000a32:	4a23      	ldr	r2, [pc, #140]	@ (8000ac0 <LCD_IO_Init+0xe4>)
 8000a34:	f043 0308 	orr.w	r3, r3, #8
 8000a38:	6313      	str	r3, [r2, #48]	@ 0x30
 8000a3a:	4b21      	ldr	r3, [pc, #132]	@ (8000ac0 <LCD_IO_Init+0xe4>)
 8000a3c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000a3e:	f003 0308 	and.w	r3, r3, #8
 8000a42:	607b      	str	r3, [r7, #4]
 8000a44:	687b      	ldr	r3, [r7, #4]
    GPIO_InitStructure.Pin     = LCD_RDX_PIN;
 8000a46:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 8000a4a:	60fb      	str	r3, [r7, #12]
    GPIO_InitStructure.Mode    = GPIO_MODE_OUTPUT_PP;
 8000a4c:	2301      	movs	r3, #1
 8000a4e:	613b      	str	r3, [r7, #16]
    GPIO_InitStructure.Pull    = GPIO_NOPULL;
 8000a50:	2300      	movs	r3, #0
 8000a52:	617b      	str	r3, [r7, #20]
    GPIO_InitStructure.Speed   = GPIO_SPEED_FAST;
 8000a54:	2302      	movs	r3, #2
 8000a56:	61bb      	str	r3, [r7, #24]
    HAL_GPIO_Init(LCD_RDX_GPIO_PORT, &GPIO_InitStructure);
 8000a58:	f107 030c 	add.w	r3, r7, #12
 8000a5c:	4619      	mov	r1, r3
 8000a5e:	4819      	ldr	r0, [pc, #100]	@ (8000ac4 <LCD_IO_Init+0xe8>)
 8000a60:	f001 f868 	bl	8001b34 <HAL_GPIO_Init>

    /* Configure the LCD Control pins ----------------------------------------*/
    LCD_NCS_GPIO_CLK_ENABLE();
 8000a64:	2300      	movs	r3, #0
 8000a66:	603b      	str	r3, [r7, #0]
 8000a68:	4b15      	ldr	r3, [pc, #84]	@ (8000ac0 <LCD_IO_Init+0xe4>)
 8000a6a:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000a6c:	4a14      	ldr	r2, [pc, #80]	@ (8000ac0 <LCD_IO_Init+0xe4>)
 8000a6e:	f043 0304 	orr.w	r3, r3, #4
 8000a72:	6313      	str	r3, [r2, #48]	@ 0x30
 8000a74:	4b12      	ldr	r3, [pc, #72]	@ (8000ac0 <LCD_IO_Init+0xe4>)
 8000a76:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000a78:	f003 0304 	and.w	r3, r3, #4
 8000a7c:	603b      	str	r3, [r7, #0]
 8000a7e:	683b      	ldr	r3, [r7, #0]

    /* Configure NCS in Output Push-Pull mode */
    GPIO_InitStructure.Pin     = LCD_NCS_PIN;
 8000a80:	2304      	movs	r3, #4
 8000a82:	60fb      	str	r3, [r7, #12]
    GPIO_InitStructure.Mode    = GPIO_MODE_OUTPUT_PP;
 8000a84:	2301      	movs	r3, #1
 8000a86:	613b      	str	r3, [r7, #16]
    GPIO_InitStructure.Pull    = GPIO_NOPULL;
 8000a88:	2300      	movs	r3, #0
 8000a8a:	617b      	str	r3, [r7, #20]
    GPIO_InitStructure.Speed   = GPIO_SPEED_FAST;
 8000a8c:	2302      	movs	r3, #2
 8000a8e:	61bb      	str	r3, [r7, #24]
    HAL_GPIO_Init(LCD_NCS_GPIO_PORT, &GPIO_InitStructure);
 8000a90:	f107 030c 	add.w	r3, r7, #12
 8000a94:	4619      	mov	r1, r3
 8000a96:	480c      	ldr	r0, [pc, #48]	@ (8000ac8 <LCD_IO_Init+0xec>)
 8000a98:	f001 f84c 	bl	8001b34 <HAL_GPIO_Init>

    /* Set or Reset the control line */
    LCD_CS_LOW();
 8000a9c:	2200      	movs	r2, #0
 8000a9e:	2104      	movs	r1, #4
 8000aa0:	4809      	ldr	r0, [pc, #36]	@ (8000ac8 <LCD_IO_Init+0xec>)
 8000aa2:	f001 faff 	bl	80020a4 <HAL_GPIO_WritePin>
    LCD_CS_HIGH();
 8000aa6:	2201      	movs	r2, #1
 8000aa8:	2104      	movs	r1, #4
 8000aaa:	4807      	ldr	r0, [pc, #28]	@ (8000ac8 <LCD_IO_Init+0xec>)
 8000aac:	f001 fafa 	bl	80020a4 <HAL_GPIO_WritePin>

    SPI_Init();
 8000ab0:	f7ff fef6 	bl	80008a0 <SPI_Init>
  }
}
 8000ab4:	bf00      	nop
 8000ab6:	3720      	adds	r7, #32
 8000ab8:	46bd      	mov	sp, r7
 8000aba:	bd80      	pop	{r7, pc}
 8000abc:	2002595c 	.word	0x2002595c
 8000ac0:	40023800 	.word	0x40023800
 8000ac4:	40020c00 	.word	0x40020c00
 8000ac8:	40020800 	.word	0x40020800

08000acc <LCD_IO_WriteData>:

/**
  * @brief  Writes register value.
  */
void LCD_IO_WriteData(uint16_t RegValue)
{
 8000acc:	b580      	push	{r7, lr}
 8000ace:	b082      	sub	sp, #8
 8000ad0:	af00      	add	r7, sp, #0
 8000ad2:	4603      	mov	r3, r0
 8000ad4:	80fb      	strh	r3, [r7, #6]
  /* Set WRX to send data */
  LCD_WRX_HIGH();
 8000ad6:	2201      	movs	r2, #1
 8000ad8:	f44f 5100 	mov.w	r1, #8192	@ 0x2000
 8000adc:	480a      	ldr	r0, [pc, #40]	@ (8000b08 <LCD_IO_WriteData+0x3c>)
 8000ade:	f001 fae1 	bl	80020a4 <HAL_GPIO_WritePin>

  /* Reset LCD control line(/CS) and Send data */
  LCD_CS_LOW();
 8000ae2:	2200      	movs	r2, #0
 8000ae4:	2104      	movs	r1, #4
 8000ae6:	4809      	ldr	r0, [pc, #36]	@ (8000b0c <LCD_IO_WriteData+0x40>)
 8000ae8:	f001 fadc 	bl	80020a4 <HAL_GPIO_WritePin>
  SPI_Write(RegValue);
 8000aec:	88fb      	ldrh	r3, [r7, #6]
 8000aee:	4618      	mov	r0, r3
 8000af0:	f7ff ff10 	bl	8000914 <SPI_Write>

  /* Deselect: Chip Select high */
  LCD_CS_HIGH();
 8000af4:	2201      	movs	r2, #1
 8000af6:	2104      	movs	r1, #4
 8000af8:	4804      	ldr	r0, [pc, #16]	@ (8000b0c <LCD_IO_WriteData+0x40>)
 8000afa:	f001 fad3 	bl	80020a4 <HAL_GPIO_WritePin>
}
 8000afe:	bf00      	nop
 8000b00:	3708      	adds	r7, #8
 8000b02:	46bd      	mov	sp, r7
 8000b04:	bd80      	pop	{r7, pc}
 8000b06:	bf00      	nop
 8000b08:	40020c00 	.word	0x40020c00
 8000b0c:	40020800 	.word	0x40020800

08000b10 <LCD_IO_WriteReg>:

/**
  * @brief  Writes register address.
  */
void LCD_IO_WriteReg(uint8_t Reg)
{
 8000b10:	b580      	push	{r7, lr}
 8000b12:	b082      	sub	sp, #8
 8000b14:	af00      	add	r7, sp, #0
 8000b16:	4603      	mov	r3, r0
 8000b18:	71fb      	strb	r3, [r7, #7]
  /* Reset WRX to send command */
  LCD_WRX_LOW();
 8000b1a:	2200      	movs	r2, #0
 8000b1c:	f44f 5100 	mov.w	r1, #8192	@ 0x2000
 8000b20:	480a      	ldr	r0, [pc, #40]	@ (8000b4c <LCD_IO_WriteReg+0x3c>)
 8000b22:	f001 fabf 	bl	80020a4 <HAL_GPIO_WritePin>

  /* Reset LCD control line(/CS) and Send command */
  LCD_CS_LOW();
 8000b26:	2200      	movs	r2, #0
 8000b28:	2104      	movs	r1, #4
 8000b2a:	4809      	ldr	r0, [pc, #36]	@ (8000b50 <LCD_IO_WriteReg+0x40>)
 8000b2c:	f001 faba 	bl	80020a4 <HAL_GPIO_WritePin>
  SPI_Write(Reg);
 8000b30:	79fb      	ldrb	r3, [r7, #7]
 8000b32:	b29b      	uxth	r3, r3
 8000b34:	4618      	mov	r0, r3
 8000b36:	f7ff feed 	bl	8000914 <SPI_Write>

  /* Deselect: Chip Select high */
  LCD_CS_HIGH();
 8000b3a:	2201      	movs	r2, #1
 8000b3c:	2104      	movs	r1, #4
 8000b3e:	4804      	ldr	r0, [pc, #16]	@ (8000b50 <LCD_IO_WriteReg+0x40>)
 8000b40:	f001 fab0 	bl	80020a4 <HAL_GPIO_WritePin>
}
 8000b44:	bf00      	nop
 8000b46:	3708      	adds	r7, #8
 8000b48:	46bd      	mov	sp, r7
 8000b4a:	bd80      	pop	{r7, pc}
 8000b4c:	40020c00 	.word	0x40020c00
 8000b50:	40020800 	.word	0x40020800

08000b54 <LCD_Delay>:
/**
  * @brief  Wait for loop in ms.
  * @param  Delay in ms.
  */
void LCD_Delay(uint32_t Delay)
{
 8000b54:	b580      	push	{r7, lr}
 8000b56:	b082      	sub	sp, #8
 8000b58:	af00      	add	r7, sp, #0
 8000b5a:	6078      	str	r0, [r7, #4]
  HAL_Delay(Delay);
 8000b5c:	6878      	ldr	r0, [r7, #4]
 8000b5e:	f000 fedf 	bl	8001920 <HAL_Delay>
}
 8000b62:	bf00      	nop
 8000b64:	3708      	adds	r7, #8
 8000b66:	46bd      	mov	sp, r7
 8000b68:	bd80      	pop	{r7, pc}

08000b6a <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8000b6a:	b580      	push	{r7, lr}
 8000b6c:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8000b6e:	f000 fe65 	bl	800183c <HAL_Init>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8000b72:	f000 f9c3 	bl	8000efc <MX_GPIO_Init>
  MX_I2C3_Init();
 8000b76:	f000 f819 	bl	8000bac <MX_I2C3_Init>
  MX_LTDC_Init();
 8000b7a:	f000 f857 	bl	8000c2c <MX_LTDC_Init>
  MX_RNG_Init();
 8000b7e:	f000 f907 	bl	8000d90 <MX_RNG_Init>
  MX_SPI5_Init();
 8000b82:	f000 f919 	bl	8000db8 <MX_SPI5_Init>
  MX_TIM6_Init();
 8000b86:	f000 f94d 	bl	8000e24 <MX_TIM6_Init>
  MX_TIM7_Init();
 8000b8a:	f000 f981 	bl	8000e90 <MX_TIM7_Init>
  /* USER CODE BEGIN 2 */
  ApplicationInit(); // Initializes the LCD functionality
 8000b8e:	f7ff fb2d 	bl	80001ec <ApplicationInit>

  //LCD_Visual_Demo();
  LCD_Draw_Square_Fill(120, 120, 50, LCD_COLOR_BLUE);
 8000b92:	231f      	movs	r3, #31
 8000b94:	2232      	movs	r2, #50	@ 0x32
 8000b96:	2178      	movs	r1, #120	@ 0x78
 8000b98:	2078      	movs	r0, #120	@ 0x78
 8000b9a:	f7ff fcbb 	bl	8000514 <LCD_Draw_Square_Fill>
  HAL_Delay(5000);
 8000b9e:	f241 3088 	movw	r0, #5000	@ 0x1388
 8000ba2:	f000 febd 	bl	8001920 <HAL_Delay>
  /* USER CODE END 2 */

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
 8000ba6:	bf00      	nop
 8000ba8:	e7fd      	b.n	8000ba6 <main+0x3c>
	...

08000bac <MX_I2C3_Init>:
  * @brief I2C3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_I2C3_Init(void)
{
 8000bac:	b580      	push	{r7, lr}
 8000bae:	af00      	add	r7, sp, #0
  /* USER CODE END I2C3_Init 0 */

  /* USER CODE BEGIN I2C3_Init 1 */

  /* USER CODE END I2C3_Init 1 */
  hi2c3.Instance = I2C3;
 8000bb0:	4b1b      	ldr	r3, [pc, #108]	@ (8000c20 <MX_I2C3_Init+0x74>)
 8000bb2:	4a1c      	ldr	r2, [pc, #112]	@ (8000c24 <MX_I2C3_Init+0x78>)
 8000bb4:	601a      	str	r2, [r3, #0]
  hi2c3.Init.ClockSpeed = 100000;
 8000bb6:	4b1a      	ldr	r3, [pc, #104]	@ (8000c20 <MX_I2C3_Init+0x74>)
 8000bb8:	4a1b      	ldr	r2, [pc, #108]	@ (8000c28 <MX_I2C3_Init+0x7c>)
 8000bba:	605a      	str	r2, [r3, #4]
  hi2c3.Init.DutyCycle = I2C_DUTYCYCLE_2;
 8000bbc:	4b18      	ldr	r3, [pc, #96]	@ (8000c20 <MX_I2C3_Init+0x74>)
 8000bbe:	2200      	movs	r2, #0
 8000bc0:	609a      	str	r2, [r3, #8]
  hi2c3.Init.OwnAddress1 = 0;
 8000bc2:	4b17      	ldr	r3, [pc, #92]	@ (8000c20 <MX_I2C3_Init+0x74>)
 8000bc4:	2200      	movs	r2, #0
 8000bc6:	60da      	str	r2, [r3, #12]
  hi2c3.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 8000bc8:	4b15      	ldr	r3, [pc, #84]	@ (8000c20 <MX_I2C3_Init+0x74>)
 8000bca:	f44f 4280 	mov.w	r2, #16384	@ 0x4000
 8000bce:	611a      	str	r2, [r3, #16]
  hi2c3.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 8000bd0:	4b13      	ldr	r3, [pc, #76]	@ (8000c20 <MX_I2C3_Init+0x74>)
 8000bd2:	2200      	movs	r2, #0
 8000bd4:	615a      	str	r2, [r3, #20]
  hi2c3.Init.OwnAddress2 = 0;
 8000bd6:	4b12      	ldr	r3, [pc, #72]	@ (8000c20 <MX_I2C3_Init+0x74>)
 8000bd8:	2200      	movs	r2, #0
 8000bda:	619a      	str	r2, [r3, #24]
  hi2c3.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 8000bdc:	4b10      	ldr	r3, [pc, #64]	@ (8000c20 <MX_I2C3_Init+0x74>)
 8000bde:	2200      	movs	r2, #0
 8000be0:	61da      	str	r2, [r3, #28]
  hi2c3.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 8000be2:	4b0f      	ldr	r3, [pc, #60]	@ (8000c20 <MX_I2C3_Init+0x74>)
 8000be4:	2200      	movs	r2, #0
 8000be6:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c3) != HAL_OK)
 8000be8:	480d      	ldr	r0, [pc, #52]	@ (8000c20 <MX_I2C3_Init+0x74>)
 8000bea:	f001 fa75 	bl	80020d8 <HAL_I2C_Init>
 8000bee:	4603      	mov	r3, r0
 8000bf0:	2b00      	cmp	r3, #0
 8000bf2:	d001      	beq.n	8000bf8 <MX_I2C3_Init+0x4c>
  {
    Error_Handler();
 8000bf4:	f000 fb30 	bl	8001258 <Error_Handler>
  }

  /** Configure Analogue filter
  */
  if (HAL_I2CEx_ConfigAnalogFilter(&hi2c3, I2C_ANALOGFILTER_ENABLE) != HAL_OK)
 8000bf8:	2100      	movs	r1, #0
 8000bfa:	4809      	ldr	r0, [pc, #36]	@ (8000c20 <MX_I2C3_Init+0x74>)
 8000bfc:	f001 fbb0 	bl	8002360 <HAL_I2CEx_ConfigAnalogFilter>
 8000c00:	4603      	mov	r3, r0
 8000c02:	2b00      	cmp	r3, #0
 8000c04:	d001      	beq.n	8000c0a <MX_I2C3_Init+0x5e>
  {
    Error_Handler();
 8000c06:	f000 fb27 	bl	8001258 <Error_Handler>
  }

  /** Configure Digital filter
  */
  if (HAL_I2CEx_ConfigDigitalFilter(&hi2c3, 0) != HAL_OK)
 8000c0a:	2100      	movs	r1, #0
 8000c0c:	4804      	ldr	r0, [pc, #16]	@ (8000c20 <MX_I2C3_Init+0x74>)
 8000c0e:	f001 fbe3 	bl	80023d8 <HAL_I2CEx_ConfigDigitalFilter>
 8000c12:	4603      	mov	r3, r0
 8000c14:	2b00      	cmp	r3, #0
 8000c16:	d001      	beq.n	8000c1c <MX_I2C3_Init+0x70>
  {
    Error_Handler();
 8000c18:	f000 fb1e 	bl	8001258 <Error_Handler>
  }
  /* USER CODE BEGIN I2C3_Init 2 */

  /* USER CODE END I2C3_Init 2 */

}
 8000c1c:	bf00      	nop
 8000c1e:	bd80      	pop	{r7, pc}
 8000c20:	20025960 	.word	0x20025960
 8000c24:	40005c00 	.word	0x40005c00
 8000c28:	000186a0 	.word	0x000186a0

08000c2c <MX_LTDC_Init>:
  * @brief LTDC Initialization Function
  * @param None
  * @retval None
  */
static void MX_LTDC_Init(void)
{
 8000c2c:	b580      	push	{r7, lr}
 8000c2e:	b09a      	sub	sp, #104	@ 0x68
 8000c30:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN LTDC_Init 0 */

  /* USER CODE END LTDC_Init 0 */

  LTDC_LayerCfgTypeDef pLayerCfg = {0};
 8000c32:	f107 0334 	add.w	r3, r7, #52	@ 0x34
 8000c36:	2234      	movs	r2, #52	@ 0x34
 8000c38:	2100      	movs	r1, #0
 8000c3a:	4618      	mov	r0, r3
 8000c3c:	f002 fd14 	bl	8003668 <memset>
  LTDC_LayerCfgTypeDef pLayerCfg1 = {0};
 8000c40:	463b      	mov	r3, r7
 8000c42:	2234      	movs	r2, #52	@ 0x34
 8000c44:	2100      	movs	r1, #0
 8000c46:	4618      	mov	r0, r3
 8000c48:	f002 fd0e 	bl	8003668 <memset>

  /* USER CODE BEGIN LTDC_Init 1 */

  /* USER CODE END LTDC_Init 1 */
  hltdc.Instance = LTDC;
 8000c4c:	4b4e      	ldr	r3, [pc, #312]	@ (8000d88 <MX_LTDC_Init+0x15c>)
 8000c4e:	4a4f      	ldr	r2, [pc, #316]	@ (8000d8c <MX_LTDC_Init+0x160>)
 8000c50:	601a      	str	r2, [r3, #0]
  hltdc.Init.HSPolarity = LTDC_HSPOLARITY_AL;
 8000c52:	4b4d      	ldr	r3, [pc, #308]	@ (8000d88 <MX_LTDC_Init+0x15c>)
 8000c54:	2200      	movs	r2, #0
 8000c56:	605a      	str	r2, [r3, #4]
  hltdc.Init.VSPolarity = LTDC_VSPOLARITY_AL;
 8000c58:	4b4b      	ldr	r3, [pc, #300]	@ (8000d88 <MX_LTDC_Init+0x15c>)
 8000c5a:	2200      	movs	r2, #0
 8000c5c:	609a      	str	r2, [r3, #8]
  hltdc.Init.DEPolarity = LTDC_DEPOLARITY_AL;
 8000c5e:	4b4a      	ldr	r3, [pc, #296]	@ (8000d88 <MX_LTDC_Init+0x15c>)
 8000c60:	2200      	movs	r2, #0
 8000c62:	60da      	str	r2, [r3, #12]
  hltdc.Init.PCPolarity = LTDC_PCPOLARITY_IPC;
 8000c64:	4b48      	ldr	r3, [pc, #288]	@ (8000d88 <MX_LTDC_Init+0x15c>)
 8000c66:	2200      	movs	r2, #0
 8000c68:	611a      	str	r2, [r3, #16]
  hltdc.Init.HorizontalSync = 7;
 8000c6a:	4b47      	ldr	r3, [pc, #284]	@ (8000d88 <MX_LTDC_Init+0x15c>)
 8000c6c:	2207      	movs	r2, #7
 8000c6e:	615a      	str	r2, [r3, #20]
  hltdc.Init.VerticalSync = 3;
 8000c70:	4b45      	ldr	r3, [pc, #276]	@ (8000d88 <MX_LTDC_Init+0x15c>)
 8000c72:	2203      	movs	r2, #3
 8000c74:	619a      	str	r2, [r3, #24]
  hltdc.Init.AccumulatedHBP = 14;
 8000c76:	4b44      	ldr	r3, [pc, #272]	@ (8000d88 <MX_LTDC_Init+0x15c>)
 8000c78:	220e      	movs	r2, #14
 8000c7a:	61da      	str	r2, [r3, #28]
  hltdc.Init.AccumulatedVBP = 5;
 8000c7c:	4b42      	ldr	r3, [pc, #264]	@ (8000d88 <MX_LTDC_Init+0x15c>)
 8000c7e:	2205      	movs	r2, #5
 8000c80:	621a      	str	r2, [r3, #32]
  hltdc.Init.AccumulatedActiveW = 654;
 8000c82:	4b41      	ldr	r3, [pc, #260]	@ (8000d88 <MX_LTDC_Init+0x15c>)
 8000c84:	f240 228e 	movw	r2, #654	@ 0x28e
 8000c88:	625a      	str	r2, [r3, #36]	@ 0x24
  hltdc.Init.AccumulatedActiveH = 485;
 8000c8a:	4b3f      	ldr	r3, [pc, #252]	@ (8000d88 <MX_LTDC_Init+0x15c>)
 8000c8c:	f240 12e5 	movw	r2, #485	@ 0x1e5
 8000c90:	629a      	str	r2, [r3, #40]	@ 0x28
  hltdc.Init.TotalWidth = 660;
 8000c92:	4b3d      	ldr	r3, [pc, #244]	@ (8000d88 <MX_LTDC_Init+0x15c>)
 8000c94:	f44f 7225 	mov.w	r2, #660	@ 0x294
 8000c98:	62da      	str	r2, [r3, #44]	@ 0x2c
  hltdc.Init.TotalHeigh = 487;
 8000c9a:	4b3b      	ldr	r3, [pc, #236]	@ (8000d88 <MX_LTDC_Init+0x15c>)
 8000c9c:	f240 12e7 	movw	r2, #487	@ 0x1e7
 8000ca0:	631a      	str	r2, [r3, #48]	@ 0x30
  hltdc.Init.Backcolor.Blue = 0;
 8000ca2:	4b39      	ldr	r3, [pc, #228]	@ (8000d88 <MX_LTDC_Init+0x15c>)
 8000ca4:	2200      	movs	r2, #0
 8000ca6:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
  hltdc.Init.Backcolor.Green = 0;
 8000caa:	4b37      	ldr	r3, [pc, #220]	@ (8000d88 <MX_LTDC_Init+0x15c>)
 8000cac:	2200      	movs	r2, #0
 8000cae:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35
  hltdc.Init.Backcolor.Red = 0;
 8000cb2:	4b35      	ldr	r3, [pc, #212]	@ (8000d88 <MX_LTDC_Init+0x15c>)
 8000cb4:	2200      	movs	r2, #0
 8000cb6:	f883 2036 	strb.w	r2, [r3, #54]	@ 0x36
  if (HAL_LTDC_Init(&hltdc) != HAL_OK)
 8000cba:	4833      	ldr	r0, [pc, #204]	@ (8000d88 <MX_LTDC_Init+0x15c>)
 8000cbc:	f001 fbcc 	bl	8002458 <HAL_LTDC_Init>
 8000cc0:	4603      	mov	r3, r0
 8000cc2:	2b00      	cmp	r3, #0
 8000cc4:	d001      	beq.n	8000cca <MX_LTDC_Init+0x9e>
  {
    Error_Handler();
 8000cc6:	f000 fac7 	bl	8001258 <Error_Handler>
  }
  pLayerCfg.WindowX0 = 0;
 8000cca:	2300      	movs	r3, #0
 8000ccc:	637b      	str	r3, [r7, #52]	@ 0x34
  pLayerCfg.WindowX1 = 0;
 8000cce:	2300      	movs	r3, #0
 8000cd0:	63bb      	str	r3, [r7, #56]	@ 0x38
  pLayerCfg.WindowY0 = 0;
 8000cd2:	2300      	movs	r3, #0
 8000cd4:	63fb      	str	r3, [r7, #60]	@ 0x3c
  pLayerCfg.WindowY1 = 0;
 8000cd6:	2300      	movs	r3, #0
 8000cd8:	643b      	str	r3, [r7, #64]	@ 0x40
  pLayerCfg.PixelFormat = LTDC_PIXEL_FORMAT_ARGB8888;
 8000cda:	2300      	movs	r3, #0
 8000cdc:	647b      	str	r3, [r7, #68]	@ 0x44
  pLayerCfg.Alpha = 0;
 8000cde:	2300      	movs	r3, #0
 8000ce0:	64bb      	str	r3, [r7, #72]	@ 0x48
  pLayerCfg.Alpha0 = 0;
 8000ce2:	2300      	movs	r3, #0
 8000ce4:	64fb      	str	r3, [r7, #76]	@ 0x4c
  pLayerCfg.BlendingFactor1 = LTDC_BLENDING_FACTOR1_CA;
 8000ce6:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 8000cea:	653b      	str	r3, [r7, #80]	@ 0x50
  pLayerCfg.BlendingFactor2 = LTDC_BLENDING_FACTOR2_CA;
 8000cec:	2305      	movs	r3, #5
 8000cee:	657b      	str	r3, [r7, #84]	@ 0x54
  pLayerCfg.FBStartAdress = 0;
 8000cf0:	2300      	movs	r3, #0
 8000cf2:	65bb      	str	r3, [r7, #88]	@ 0x58
  pLayerCfg.ImageWidth = 0;
 8000cf4:	2300      	movs	r3, #0
 8000cf6:	65fb      	str	r3, [r7, #92]	@ 0x5c
  pLayerCfg.ImageHeight = 0;
 8000cf8:	2300      	movs	r3, #0
 8000cfa:	663b      	str	r3, [r7, #96]	@ 0x60
  pLayerCfg.Backcolor.Blue = 0;
 8000cfc:	2300      	movs	r3, #0
 8000cfe:	f887 3064 	strb.w	r3, [r7, #100]	@ 0x64
  pLayerCfg.Backcolor.Green = 0;
 8000d02:	2300      	movs	r3, #0
 8000d04:	f887 3065 	strb.w	r3, [r7, #101]	@ 0x65
  pLayerCfg.Backcolor.Red = 0;
 8000d08:	2300      	movs	r3, #0
 8000d0a:	f887 3066 	strb.w	r3, [r7, #102]	@ 0x66
  if (HAL_LTDC_ConfigLayer(&hltdc, &pLayerCfg, 0) != HAL_OK)
 8000d0e:	f107 0334 	add.w	r3, r7, #52	@ 0x34
 8000d12:	2200      	movs	r2, #0
 8000d14:	4619      	mov	r1, r3
 8000d16:	481c      	ldr	r0, [pc, #112]	@ (8000d88 <MX_LTDC_Init+0x15c>)
 8000d18:	f001 fc6e 	bl	80025f8 <HAL_LTDC_ConfigLayer>
 8000d1c:	4603      	mov	r3, r0
 8000d1e:	2b00      	cmp	r3, #0
 8000d20:	d001      	beq.n	8000d26 <MX_LTDC_Init+0xfa>
  {
    Error_Handler();
 8000d22:	f000 fa99 	bl	8001258 <Error_Handler>
  }
  pLayerCfg1.WindowX0 = 0;
 8000d26:	2300      	movs	r3, #0
 8000d28:	603b      	str	r3, [r7, #0]
  pLayerCfg1.WindowX1 = 0;
 8000d2a:	2300      	movs	r3, #0
 8000d2c:	607b      	str	r3, [r7, #4]
  pLayerCfg1.WindowY0 = 0;
 8000d2e:	2300      	movs	r3, #0
 8000d30:	60bb      	str	r3, [r7, #8]
  pLayerCfg1.WindowY1 = 0;
 8000d32:	2300      	movs	r3, #0
 8000d34:	60fb      	str	r3, [r7, #12]
  pLayerCfg1.PixelFormat = LTDC_PIXEL_FORMAT_ARGB8888;
 8000d36:	2300      	movs	r3, #0
 8000d38:	613b      	str	r3, [r7, #16]
  pLayerCfg1.Alpha = 0;
 8000d3a:	2300      	movs	r3, #0
 8000d3c:	617b      	str	r3, [r7, #20]
  pLayerCfg1.Alpha0 = 0;
 8000d3e:	2300      	movs	r3, #0
 8000d40:	61bb      	str	r3, [r7, #24]
  pLayerCfg1.BlendingFactor1 = LTDC_BLENDING_FACTOR1_CA;
 8000d42:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 8000d46:	61fb      	str	r3, [r7, #28]
  pLayerCfg1.BlendingFactor2 = LTDC_BLENDING_FACTOR2_CA;
 8000d48:	2305      	movs	r3, #5
 8000d4a:	623b      	str	r3, [r7, #32]
  pLayerCfg1.FBStartAdress = 0;
 8000d4c:	2300      	movs	r3, #0
 8000d4e:	627b      	str	r3, [r7, #36]	@ 0x24
  pLayerCfg1.ImageWidth = 0;
 8000d50:	2300      	movs	r3, #0
 8000d52:	62bb      	str	r3, [r7, #40]	@ 0x28
  pLayerCfg1.ImageHeight = 0;
 8000d54:	2300      	movs	r3, #0
 8000d56:	62fb      	str	r3, [r7, #44]	@ 0x2c
  pLayerCfg1.Backcolor.Blue = 0;
 8000d58:	2300      	movs	r3, #0
 8000d5a:	f887 3030 	strb.w	r3, [r7, #48]	@ 0x30
  pLayerCfg1.Backcolor.Green = 0;
 8000d5e:	2300      	movs	r3, #0
 8000d60:	f887 3031 	strb.w	r3, [r7, #49]	@ 0x31
  pLayerCfg1.Backcolor.Red = 0;
 8000d64:	2300      	movs	r3, #0
 8000d66:	f887 3032 	strb.w	r3, [r7, #50]	@ 0x32
  if (HAL_LTDC_ConfigLayer(&hltdc, &pLayerCfg1, 1) != HAL_OK)
 8000d6a:	463b      	mov	r3, r7
 8000d6c:	2201      	movs	r2, #1
 8000d6e:	4619      	mov	r1, r3
 8000d70:	4805      	ldr	r0, [pc, #20]	@ (8000d88 <MX_LTDC_Init+0x15c>)
 8000d72:	f001 fc41 	bl	80025f8 <HAL_LTDC_ConfigLayer>
 8000d76:	4603      	mov	r3, r0
 8000d78:	2b00      	cmp	r3, #0
 8000d7a:	d001      	beq.n	8000d80 <MX_LTDC_Init+0x154>
  {
    Error_Handler();
 8000d7c:	f000 fa6c 	bl	8001258 <Error_Handler>
  }
  /* USER CODE BEGIN LTDC_Init 2 */

  /* USER CODE END LTDC_Init 2 */

}
 8000d80:	bf00      	nop
 8000d82:	3768      	adds	r7, #104	@ 0x68
 8000d84:	46bd      	mov	sp, r7
 8000d86:	bd80      	pop	{r7, pc}
 8000d88:	200259b4 	.word	0x200259b4
 8000d8c:	40016800 	.word	0x40016800

08000d90 <MX_RNG_Init>:
  * @brief RNG Initialization Function
  * @param None
  * @retval None
  */
static void MX_RNG_Init(void)
{
 8000d90:	b580      	push	{r7, lr}
 8000d92:	af00      	add	r7, sp, #0
  /* USER CODE END RNG_Init 0 */

  /* USER CODE BEGIN RNG_Init 1 */

  /* USER CODE END RNG_Init 1 */
  hrng.Instance = RNG;
 8000d94:	4b06      	ldr	r3, [pc, #24]	@ (8000db0 <MX_RNG_Init+0x20>)
 8000d96:	4a07      	ldr	r2, [pc, #28]	@ (8000db4 <MX_RNG_Init+0x24>)
 8000d98:	601a      	str	r2, [r3, #0]
  if (HAL_RNG_Init(&hrng) != HAL_OK)
 8000d9a:	4805      	ldr	r0, [pc, #20]	@ (8000db0 <MX_RNG_Init+0x20>)
 8000d9c:	f001 ffe2 	bl	8002d64 <HAL_RNG_Init>
 8000da0:	4603      	mov	r3, r0
 8000da2:	2b00      	cmp	r3, #0
 8000da4:	d001      	beq.n	8000daa <MX_RNG_Init+0x1a>
  {
    Error_Handler();
 8000da6:	f000 fa57 	bl	8001258 <Error_Handler>
  }
  /* USER CODE BEGIN RNG_Init 2 */

  /* USER CODE END RNG_Init 2 */

}
 8000daa:	bf00      	nop
 8000dac:	bd80      	pop	{r7, pc}
 8000dae:	bf00      	nop
 8000db0:	20025a5c 	.word	0x20025a5c
 8000db4:	50060800 	.word	0x50060800

08000db8 <MX_SPI5_Init>:
  * @brief SPI5 Initialization Function
  * @param None
  * @retval None
  */
static void MX_SPI5_Init(void)
{
 8000db8:	b580      	push	{r7, lr}
 8000dba:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN SPI5_Init 1 */

  /* USER CODE END SPI5_Init 1 */
  /* SPI5 parameter configuration*/
  hspi5.Instance = SPI5;
 8000dbc:	4b17      	ldr	r3, [pc, #92]	@ (8000e1c <MX_SPI5_Init+0x64>)
 8000dbe:	4a18      	ldr	r2, [pc, #96]	@ (8000e20 <MX_SPI5_Init+0x68>)
 8000dc0:	601a      	str	r2, [r3, #0]
  hspi5.Init.Mode = SPI_MODE_MASTER;
 8000dc2:	4b16      	ldr	r3, [pc, #88]	@ (8000e1c <MX_SPI5_Init+0x64>)
 8000dc4:	f44f 7282 	mov.w	r2, #260	@ 0x104
 8000dc8:	605a      	str	r2, [r3, #4]
  hspi5.Init.Direction = SPI_DIRECTION_2LINES;
 8000dca:	4b14      	ldr	r3, [pc, #80]	@ (8000e1c <MX_SPI5_Init+0x64>)
 8000dcc:	2200      	movs	r2, #0
 8000dce:	609a      	str	r2, [r3, #8]
  hspi5.Init.DataSize = SPI_DATASIZE_8BIT;
 8000dd0:	4b12      	ldr	r3, [pc, #72]	@ (8000e1c <MX_SPI5_Init+0x64>)
 8000dd2:	2200      	movs	r2, #0
 8000dd4:	60da      	str	r2, [r3, #12]
  hspi5.Init.CLKPolarity = SPI_POLARITY_LOW;
 8000dd6:	4b11      	ldr	r3, [pc, #68]	@ (8000e1c <MX_SPI5_Init+0x64>)
 8000dd8:	2200      	movs	r2, #0
 8000dda:	611a      	str	r2, [r3, #16]
  hspi5.Init.CLKPhase = SPI_PHASE_1EDGE;
 8000ddc:	4b0f      	ldr	r3, [pc, #60]	@ (8000e1c <MX_SPI5_Init+0x64>)
 8000dde:	2200      	movs	r2, #0
 8000de0:	615a      	str	r2, [r3, #20]
  hspi5.Init.NSS = SPI_NSS_SOFT;
 8000de2:	4b0e      	ldr	r3, [pc, #56]	@ (8000e1c <MX_SPI5_Init+0x64>)
 8000de4:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8000de8:	619a      	str	r2, [r3, #24]
  hspi5.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 8000dea:	4b0c      	ldr	r3, [pc, #48]	@ (8000e1c <MX_SPI5_Init+0x64>)
 8000dec:	2200      	movs	r2, #0
 8000dee:	61da      	str	r2, [r3, #28]
  hspi5.Init.FirstBit = SPI_FIRSTBIT_MSB;
 8000df0:	4b0a      	ldr	r3, [pc, #40]	@ (8000e1c <MX_SPI5_Init+0x64>)
 8000df2:	2200      	movs	r2, #0
 8000df4:	621a      	str	r2, [r3, #32]
  hspi5.Init.TIMode = SPI_TIMODE_DISABLE;
 8000df6:	4b09      	ldr	r3, [pc, #36]	@ (8000e1c <MX_SPI5_Init+0x64>)
 8000df8:	2200      	movs	r2, #0
 8000dfa:	625a      	str	r2, [r3, #36]	@ 0x24
  hspi5.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8000dfc:	4b07      	ldr	r3, [pc, #28]	@ (8000e1c <MX_SPI5_Init+0x64>)
 8000dfe:	2200      	movs	r2, #0
 8000e00:	629a      	str	r2, [r3, #40]	@ 0x28
  hspi5.Init.CRCPolynomial = 10;
 8000e02:	4b06      	ldr	r3, [pc, #24]	@ (8000e1c <MX_SPI5_Init+0x64>)
 8000e04:	220a      	movs	r2, #10
 8000e06:	62da      	str	r2, [r3, #44]	@ 0x2c
  if (HAL_SPI_Init(&hspi5) != HAL_OK)
 8000e08:	4804      	ldr	r0, [pc, #16]	@ (8000e1c <MX_SPI5_Init+0x64>)
 8000e0a:	f001 ffd5 	bl	8002db8 <HAL_SPI_Init>
 8000e0e:	4603      	mov	r3, r0
 8000e10:	2b00      	cmp	r3, #0
 8000e12:	d001      	beq.n	8000e18 <MX_SPI5_Init+0x60>
  {
    Error_Handler();
 8000e14:	f000 fa20 	bl	8001258 <Error_Handler>
  }
  /* USER CODE BEGIN SPI5_Init 2 */

  /* USER CODE END SPI5_Init 2 */

}
 8000e18:	bf00      	nop
 8000e1a:	bd80      	pop	{r7, pc}
 8000e1c:	20025a6c 	.word	0x20025a6c
 8000e20:	40015000 	.word	0x40015000

08000e24 <MX_TIM6_Init>:
  * @brief TIM6 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM6_Init(void)
{
 8000e24:	b580      	push	{r7, lr}
 8000e26:	b082      	sub	sp, #8
 8000e28:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM6_Init 0 */

  /* USER CODE END TIM6_Init 0 */

  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8000e2a:	463b      	mov	r3, r7
 8000e2c:	2200      	movs	r2, #0
 8000e2e:	601a      	str	r2, [r3, #0]
 8000e30:	605a      	str	r2, [r3, #4]

  /* USER CODE BEGIN TIM6_Init 1 */

  /* USER CODE END TIM6_Init 1 */
  htim6.Instance = TIM6;
 8000e32:	4b15      	ldr	r3, [pc, #84]	@ (8000e88 <MX_TIM6_Init+0x64>)
 8000e34:	4a15      	ldr	r2, [pc, #84]	@ (8000e8c <MX_TIM6_Init+0x68>)
 8000e36:	601a      	str	r2, [r3, #0]
  htim6.Init.Prescaler = 0;
 8000e38:	4b13      	ldr	r3, [pc, #76]	@ (8000e88 <MX_TIM6_Init+0x64>)
 8000e3a:	2200      	movs	r2, #0
 8000e3c:	605a      	str	r2, [r3, #4]
  htim6.Init.CounterMode = TIM_COUNTERMODE_UP;
 8000e3e:	4b12      	ldr	r3, [pc, #72]	@ (8000e88 <MX_TIM6_Init+0x64>)
 8000e40:	2200      	movs	r2, #0
 8000e42:	609a      	str	r2, [r3, #8]
  htim6.Init.Period = 65535;
 8000e44:	4b10      	ldr	r3, [pc, #64]	@ (8000e88 <MX_TIM6_Init+0x64>)
 8000e46:	f64f 72ff 	movw	r2, #65535	@ 0xffff
 8000e4a:	60da      	str	r2, [r3, #12]
  htim6.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8000e4c:	4b0e      	ldr	r3, [pc, #56]	@ (8000e88 <MX_TIM6_Init+0x64>)
 8000e4e:	2200      	movs	r2, #0
 8000e50:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim6) != HAL_OK)
 8000e52:	480d      	ldr	r0, [pc, #52]	@ (8000e88 <MX_TIM6_Init+0x64>)
 8000e54:	f002 fa90 	bl	8003378 <HAL_TIM_Base_Init>
 8000e58:	4603      	mov	r3, r0
 8000e5a:	2b00      	cmp	r3, #0
 8000e5c:	d001      	beq.n	8000e62 <MX_TIM6_Init+0x3e>
  {
    Error_Handler();
 8000e5e:	f000 f9fb 	bl	8001258 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8000e62:	2300      	movs	r3, #0
 8000e64:	603b      	str	r3, [r7, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8000e66:	2300      	movs	r3, #0
 8000e68:	607b      	str	r3, [r7, #4]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim6, &sMasterConfig) != HAL_OK)
 8000e6a:	463b      	mov	r3, r7
 8000e6c:	4619      	mov	r1, r3
 8000e6e:	4806      	ldr	r0, [pc, #24]	@ (8000e88 <MX_TIM6_Init+0x64>)
 8000e70:	f002 fb7e 	bl	8003570 <HAL_TIMEx_MasterConfigSynchronization>
 8000e74:	4603      	mov	r3, r0
 8000e76:	2b00      	cmp	r3, #0
 8000e78:	d001      	beq.n	8000e7e <MX_TIM6_Init+0x5a>
  {
    Error_Handler();
 8000e7a:	f000 f9ed 	bl	8001258 <Error_Handler>
  }
  /* USER CODE BEGIN TIM6_Init 2 */

  /* USER CODE END TIM6_Init 2 */

}
 8000e7e:	bf00      	nop
 8000e80:	3708      	adds	r7, #8
 8000e82:	46bd      	mov	sp, r7
 8000e84:	bd80      	pop	{r7, pc}
 8000e86:	bf00      	nop
 8000e88:	20025ac4 	.word	0x20025ac4
 8000e8c:	40001000 	.word	0x40001000

08000e90 <MX_TIM7_Init>:
  * @brief TIM7 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM7_Init(void)
{
 8000e90:	b580      	push	{r7, lr}
 8000e92:	b082      	sub	sp, #8
 8000e94:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM7_Init 0 */

  /* USER CODE END TIM7_Init 0 */

  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8000e96:	463b      	mov	r3, r7
 8000e98:	2200      	movs	r2, #0
 8000e9a:	601a      	str	r2, [r3, #0]
 8000e9c:	605a      	str	r2, [r3, #4]

  /* USER CODE BEGIN TIM7_Init 1 */

  /* USER CODE END TIM7_Init 1 */
  htim7.Instance = TIM7;
 8000e9e:	4b15      	ldr	r3, [pc, #84]	@ (8000ef4 <MX_TIM7_Init+0x64>)
 8000ea0:	4a15      	ldr	r2, [pc, #84]	@ (8000ef8 <MX_TIM7_Init+0x68>)
 8000ea2:	601a      	str	r2, [r3, #0]
  htim7.Init.Prescaler = 0;
 8000ea4:	4b13      	ldr	r3, [pc, #76]	@ (8000ef4 <MX_TIM7_Init+0x64>)
 8000ea6:	2200      	movs	r2, #0
 8000ea8:	605a      	str	r2, [r3, #4]
  htim7.Init.CounterMode = TIM_COUNTERMODE_UP;
 8000eaa:	4b12      	ldr	r3, [pc, #72]	@ (8000ef4 <MX_TIM7_Init+0x64>)
 8000eac:	2200      	movs	r2, #0
 8000eae:	609a      	str	r2, [r3, #8]
  htim7.Init.Period = 65535;
 8000eb0:	4b10      	ldr	r3, [pc, #64]	@ (8000ef4 <MX_TIM7_Init+0x64>)
 8000eb2:	f64f 72ff 	movw	r2, #65535	@ 0xffff
 8000eb6:	60da      	str	r2, [r3, #12]
  htim7.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8000eb8:	4b0e      	ldr	r3, [pc, #56]	@ (8000ef4 <MX_TIM7_Init+0x64>)
 8000eba:	2200      	movs	r2, #0
 8000ebc:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim7) != HAL_OK)
 8000ebe:	480d      	ldr	r0, [pc, #52]	@ (8000ef4 <MX_TIM7_Init+0x64>)
 8000ec0:	f002 fa5a 	bl	8003378 <HAL_TIM_Base_Init>
 8000ec4:	4603      	mov	r3, r0
 8000ec6:	2b00      	cmp	r3, #0
 8000ec8:	d001      	beq.n	8000ece <MX_TIM7_Init+0x3e>
  {
    Error_Handler();
 8000eca:	f000 f9c5 	bl	8001258 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8000ece:	2300      	movs	r3, #0
 8000ed0:	603b      	str	r3, [r7, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8000ed2:	2300      	movs	r3, #0
 8000ed4:	607b      	str	r3, [r7, #4]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim7, &sMasterConfig) != HAL_OK)
 8000ed6:	463b      	mov	r3, r7
 8000ed8:	4619      	mov	r1, r3
 8000eda:	4806      	ldr	r0, [pc, #24]	@ (8000ef4 <MX_TIM7_Init+0x64>)
 8000edc:	f002 fb48 	bl	8003570 <HAL_TIMEx_MasterConfigSynchronization>
 8000ee0:	4603      	mov	r3, r0
 8000ee2:	2b00      	cmp	r3, #0
 8000ee4:	d001      	beq.n	8000eea <MX_TIM7_Init+0x5a>
  {
    Error_Handler();
 8000ee6:	f000 f9b7 	bl	8001258 <Error_Handler>
  }
  /* USER CODE BEGIN TIM7_Init 2 */

  /* USER CODE END TIM7_Init 2 */

}
 8000eea:	bf00      	nop
 8000eec:	3708      	adds	r7, #8
 8000eee:	46bd      	mov	sp, r7
 8000ef0:	bd80      	pop	{r7, pc}
 8000ef2:	bf00      	nop
 8000ef4:	20025b0c 	.word	0x20025b0c
 8000ef8:	40001400 	.word	0x40001400

08000efc <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8000efc:	b580      	push	{r7, lr}
 8000efe:	b08e      	sub	sp, #56	@ 0x38
 8000f00:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000f02:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8000f06:	2200      	movs	r2, #0
 8000f08:	601a      	str	r2, [r3, #0]
 8000f0a:	605a      	str	r2, [r3, #4]
 8000f0c:	609a      	str	r2, [r3, #8]
 8000f0e:	60da      	str	r2, [r3, #12]
 8000f10:	611a      	str	r2, [r3, #16]
/* USER CODE BEGIN MX_GPIO_Init_1 */
/* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8000f12:	2300      	movs	r3, #0
 8000f14:	623b      	str	r3, [r7, #32]
 8000f16:	4bb2      	ldr	r3, [pc, #712]	@ (80011e0 <MX_GPIO_Init+0x2e4>)
 8000f18:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000f1a:	4ab1      	ldr	r2, [pc, #708]	@ (80011e0 <MX_GPIO_Init+0x2e4>)
 8000f1c:	f043 0304 	orr.w	r3, r3, #4
 8000f20:	6313      	str	r3, [r2, #48]	@ 0x30
 8000f22:	4baf      	ldr	r3, [pc, #700]	@ (80011e0 <MX_GPIO_Init+0x2e4>)
 8000f24:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000f26:	f003 0304 	and.w	r3, r3, #4
 8000f2a:	623b      	str	r3, [r7, #32]
 8000f2c:	6a3b      	ldr	r3, [r7, #32]
  __HAL_RCC_GPIOF_CLK_ENABLE();
 8000f2e:	2300      	movs	r3, #0
 8000f30:	61fb      	str	r3, [r7, #28]
 8000f32:	4bab      	ldr	r3, [pc, #684]	@ (80011e0 <MX_GPIO_Init+0x2e4>)
 8000f34:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000f36:	4aaa      	ldr	r2, [pc, #680]	@ (80011e0 <MX_GPIO_Init+0x2e4>)
 8000f38:	f043 0320 	orr.w	r3, r3, #32
 8000f3c:	6313      	str	r3, [r2, #48]	@ 0x30
 8000f3e:	4ba8      	ldr	r3, [pc, #672]	@ (80011e0 <MX_GPIO_Init+0x2e4>)
 8000f40:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000f42:	f003 0320 	and.w	r3, r3, #32
 8000f46:	61fb      	str	r3, [r7, #28]
 8000f48:	69fb      	ldr	r3, [r7, #28]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 8000f4a:	2300      	movs	r3, #0
 8000f4c:	61bb      	str	r3, [r7, #24]
 8000f4e:	4ba4      	ldr	r3, [pc, #656]	@ (80011e0 <MX_GPIO_Init+0x2e4>)
 8000f50:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000f52:	4aa3      	ldr	r2, [pc, #652]	@ (80011e0 <MX_GPIO_Init+0x2e4>)
 8000f54:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8000f58:	6313      	str	r3, [r2, #48]	@ 0x30
 8000f5a:	4ba1      	ldr	r3, [pc, #644]	@ (80011e0 <MX_GPIO_Init+0x2e4>)
 8000f5c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000f5e:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8000f62:	61bb      	str	r3, [r7, #24]
 8000f64:	69bb      	ldr	r3, [r7, #24]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8000f66:	2300      	movs	r3, #0
 8000f68:	617b      	str	r3, [r7, #20]
 8000f6a:	4b9d      	ldr	r3, [pc, #628]	@ (80011e0 <MX_GPIO_Init+0x2e4>)
 8000f6c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000f6e:	4a9c      	ldr	r2, [pc, #624]	@ (80011e0 <MX_GPIO_Init+0x2e4>)
 8000f70:	f043 0301 	orr.w	r3, r3, #1
 8000f74:	6313      	str	r3, [r2, #48]	@ 0x30
 8000f76:	4b9a      	ldr	r3, [pc, #616]	@ (80011e0 <MX_GPIO_Init+0x2e4>)
 8000f78:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000f7a:	f003 0301 	and.w	r3, r3, #1
 8000f7e:	617b      	str	r3, [r7, #20]
 8000f80:	697b      	ldr	r3, [r7, #20]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8000f82:	2300      	movs	r3, #0
 8000f84:	613b      	str	r3, [r7, #16]
 8000f86:	4b96      	ldr	r3, [pc, #600]	@ (80011e0 <MX_GPIO_Init+0x2e4>)
 8000f88:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000f8a:	4a95      	ldr	r2, [pc, #596]	@ (80011e0 <MX_GPIO_Init+0x2e4>)
 8000f8c:	f043 0302 	orr.w	r3, r3, #2
 8000f90:	6313      	str	r3, [r2, #48]	@ 0x30
 8000f92:	4b93      	ldr	r3, [pc, #588]	@ (80011e0 <MX_GPIO_Init+0x2e4>)
 8000f94:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000f96:	f003 0302 	and.w	r3, r3, #2
 8000f9a:	613b      	str	r3, [r7, #16]
 8000f9c:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOG_CLK_ENABLE();
 8000f9e:	2300      	movs	r3, #0
 8000fa0:	60fb      	str	r3, [r7, #12]
 8000fa2:	4b8f      	ldr	r3, [pc, #572]	@ (80011e0 <MX_GPIO_Init+0x2e4>)
 8000fa4:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000fa6:	4a8e      	ldr	r2, [pc, #568]	@ (80011e0 <MX_GPIO_Init+0x2e4>)
 8000fa8:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8000fac:	6313      	str	r3, [r2, #48]	@ 0x30
 8000fae:	4b8c      	ldr	r3, [pc, #560]	@ (80011e0 <MX_GPIO_Init+0x2e4>)
 8000fb0:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000fb2:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8000fb6:	60fb      	str	r3, [r7, #12]
 8000fb8:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOE_CLK_ENABLE();
 8000fba:	2300      	movs	r3, #0
 8000fbc:	60bb      	str	r3, [r7, #8]
 8000fbe:	4b88      	ldr	r3, [pc, #544]	@ (80011e0 <MX_GPIO_Init+0x2e4>)
 8000fc0:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000fc2:	4a87      	ldr	r2, [pc, #540]	@ (80011e0 <MX_GPIO_Init+0x2e4>)
 8000fc4:	f043 0310 	orr.w	r3, r3, #16
 8000fc8:	6313      	str	r3, [r2, #48]	@ 0x30
 8000fca:	4b85      	ldr	r3, [pc, #532]	@ (80011e0 <MX_GPIO_Init+0x2e4>)
 8000fcc:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000fce:	f003 0310 	and.w	r3, r3, #16
 8000fd2:	60bb      	str	r3, [r7, #8]
 8000fd4:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 8000fd6:	2300      	movs	r3, #0
 8000fd8:	607b      	str	r3, [r7, #4]
 8000fda:	4b81      	ldr	r3, [pc, #516]	@ (80011e0 <MX_GPIO_Init+0x2e4>)
 8000fdc:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000fde:	4a80      	ldr	r2, [pc, #512]	@ (80011e0 <MX_GPIO_Init+0x2e4>)
 8000fe0:	f043 0308 	orr.w	r3, r3, #8
 8000fe4:	6313      	str	r3, [r2, #48]	@ 0x30
 8000fe6:	4b7e      	ldr	r3, [pc, #504]	@ (80011e0 <MX_GPIO_Init+0x2e4>)
 8000fe8:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000fea:	f003 0308 	and.w	r3, r3, #8
 8000fee:	607b      	str	r3, [r7, #4]
 8000ff0:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOC, NCS_MEMS_SPI_Pin|CSX_Pin|OTG_FS_PSO_Pin, GPIO_PIN_RESET);
 8000ff2:	2200      	movs	r2, #0
 8000ff4:	2116      	movs	r1, #22
 8000ff6:	487b      	ldr	r0, [pc, #492]	@ (80011e4 <MX_GPIO_Init+0x2e8>)
 8000ff8:	f001 f854 	bl	80020a4 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(ACP_RST_GPIO_Port, ACP_RST_Pin, GPIO_PIN_RESET);
 8000ffc:	2200      	movs	r2, #0
 8000ffe:	2180      	movs	r1, #128	@ 0x80
 8001000:	4879      	ldr	r0, [pc, #484]	@ (80011e8 <MX_GPIO_Init+0x2ec>)
 8001002:	f001 f84f 	bl	80020a4 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOD, RDX_Pin|WRX_DCX_Pin, GPIO_PIN_RESET);
 8001006:	2200      	movs	r2, #0
 8001008:	f44f 5140 	mov.w	r1, #12288	@ 0x3000
 800100c:	4877      	ldr	r0, [pc, #476]	@ (80011ec <MX_GPIO_Init+0x2f0>)
 800100e:	f001 f849 	bl	80020a4 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOG, LD3_Pin|LD4_Pin, GPIO_PIN_RESET);
 8001012:	2200      	movs	r2, #0
 8001014:	f44f 41c0 	mov.w	r1, #24576	@ 0x6000
 8001018:	4875      	ldr	r0, [pc, #468]	@ (80011f0 <MX_GPIO_Init+0x2f4>)
 800101a:	f001 f843 	bl	80020a4 <HAL_GPIO_WritePin>

  /*Configure GPIO pins : A0_Pin A1_Pin A2_Pin A3_Pin
                           A4_Pin A5_Pin SDNRAS_Pin A6_Pin
                           A7_Pin A8_Pin A9_Pin */
  GPIO_InitStruct.Pin = A0_Pin|A1_Pin|A2_Pin|A3_Pin
 800101e:	f64f 033f 	movw	r3, #63551	@ 0xf83f
 8001022:	627b      	str	r3, [r7, #36]	@ 0x24
                          |A4_Pin|A5_Pin|SDNRAS_Pin|A6_Pin
                          |A7_Pin|A8_Pin|A9_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001024:	2302      	movs	r3, #2
 8001026:	62bb      	str	r3, [r7, #40]	@ 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001028:	2300      	movs	r3, #0
 800102a:	62fb      	str	r3, [r7, #44]	@ 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800102c:	2303      	movs	r3, #3
 800102e:	633b      	str	r3, [r7, #48]	@ 0x30
  GPIO_InitStruct.Alternate = GPIO_AF12_FMC;
 8001030:	230c      	movs	r3, #12
 8001032:	637b      	str	r3, [r7, #52]	@ 0x34
  HAL_GPIO_Init(GPIOF, &GPIO_InitStruct);
 8001034:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8001038:	4619      	mov	r1, r3
 800103a:	486e      	ldr	r0, [pc, #440]	@ (80011f4 <MX_GPIO_Init+0x2f8>)
 800103c:	f000 fd7a 	bl	8001b34 <HAL_GPIO_Init>

  /*Configure GPIO pin : SDNWE_Pin */
  GPIO_InitStruct.Pin = SDNWE_Pin;
 8001040:	2301      	movs	r3, #1
 8001042:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001044:	2302      	movs	r3, #2
 8001046:	62bb      	str	r3, [r7, #40]	@ 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001048:	2300      	movs	r3, #0
 800104a:	62fb      	str	r3, [r7, #44]	@ 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800104c:	2303      	movs	r3, #3
 800104e:	633b      	str	r3, [r7, #48]	@ 0x30
  GPIO_InitStruct.Alternate = GPIO_AF12_FMC;
 8001050:	230c      	movs	r3, #12
 8001052:	637b      	str	r3, [r7, #52]	@ 0x34
  HAL_GPIO_Init(SDNWE_GPIO_Port, &GPIO_InitStruct);
 8001054:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8001058:	4619      	mov	r1, r3
 800105a:	4862      	ldr	r0, [pc, #392]	@ (80011e4 <MX_GPIO_Init+0x2e8>)
 800105c:	f000 fd6a 	bl	8001b34 <HAL_GPIO_Init>

  /*Configure GPIO pins : NCS_MEMS_SPI_Pin CSX_Pin OTG_FS_PSO_Pin */
  GPIO_InitStruct.Pin = NCS_MEMS_SPI_Pin|CSX_Pin|OTG_FS_PSO_Pin;
 8001060:	2316      	movs	r3, #22
 8001062:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001064:	2301      	movs	r3, #1
 8001066:	62bb      	str	r3, [r7, #40]	@ 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001068:	2300      	movs	r3, #0
 800106a:	62fb      	str	r3, [r7, #44]	@ 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800106c:	2300      	movs	r3, #0
 800106e:	633b      	str	r3, [r7, #48]	@ 0x30
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8001070:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8001074:	4619      	mov	r1, r3
 8001076:	485b      	ldr	r0, [pc, #364]	@ (80011e4 <MX_GPIO_Init+0x2e8>)
 8001078:	f000 fd5c 	bl	8001b34 <HAL_GPIO_Init>

  /*Configure GPIO pins : B1_Pin MEMS_INT1_Pin MEMS_INT2_Pin TP_INT1_Pin */
  GPIO_InitStruct.Pin = B1_Pin|MEMS_INT1_Pin|MEMS_INT2_Pin|TP_INT1_Pin;
 800107c:	f248 0307 	movw	r3, #32775	@ 0x8007
 8001080:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_EVT_RISING;
 8001082:	f44f 1390 	mov.w	r3, #1179648	@ 0x120000
 8001086:	62bb      	str	r3, [r7, #40]	@ 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001088:	2300      	movs	r3, #0
 800108a:	62fb      	str	r3, [r7, #44]	@ 0x2c
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800108c:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8001090:	4619      	mov	r1, r3
 8001092:	4855      	ldr	r0, [pc, #340]	@ (80011e8 <MX_GPIO_Init+0x2ec>)
 8001094:	f000 fd4e 	bl	8001b34 <HAL_GPIO_Init>

  /*Configure GPIO pin : ACP_RST_Pin */
  GPIO_InitStruct.Pin = ACP_RST_Pin;
 8001098:	2380      	movs	r3, #128	@ 0x80
 800109a:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800109c:	2301      	movs	r3, #1
 800109e:	62bb      	str	r3, [r7, #40]	@ 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80010a0:	2300      	movs	r3, #0
 80010a2:	62fb      	str	r3, [r7, #44]	@ 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80010a4:	2300      	movs	r3, #0
 80010a6:	633b      	str	r3, [r7, #48]	@ 0x30
  HAL_GPIO_Init(ACP_RST_GPIO_Port, &GPIO_InitStruct);
 80010a8:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 80010ac:	4619      	mov	r1, r3
 80010ae:	484e      	ldr	r0, [pc, #312]	@ (80011e8 <MX_GPIO_Init+0x2ec>)
 80010b0:	f000 fd40 	bl	8001b34 <HAL_GPIO_Init>

  /*Configure GPIO pin : OTG_FS_OC_Pin */
  GPIO_InitStruct.Pin = OTG_FS_OC_Pin;
 80010b4:	2320      	movs	r3, #32
 80010b6:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_EVT_RISING;
 80010b8:	f44f 1390 	mov.w	r3, #1179648	@ 0x120000
 80010bc:	62bb      	str	r3, [r7, #40]	@ 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80010be:	2300      	movs	r3, #0
 80010c0:	62fb      	str	r3, [r7, #44]	@ 0x2c
  HAL_GPIO_Init(OTG_FS_OC_GPIO_Port, &GPIO_InitStruct);
 80010c2:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 80010c6:	4619      	mov	r1, r3
 80010c8:	4846      	ldr	r0, [pc, #280]	@ (80011e4 <MX_GPIO_Init+0x2e8>)
 80010ca:	f000 fd33 	bl	8001b34 <HAL_GPIO_Init>

  /*Configure GPIO pin : BOOT1_Pin */
  GPIO_InitStruct.Pin = BOOT1_Pin;
 80010ce:	2304      	movs	r3, #4
 80010d0:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 80010d2:	2300      	movs	r3, #0
 80010d4:	62bb      	str	r3, [r7, #40]	@ 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80010d6:	2300      	movs	r3, #0
 80010d8:	62fb      	str	r3, [r7, #44]	@ 0x2c
  HAL_GPIO_Init(BOOT1_GPIO_Port, &GPIO_InitStruct);
 80010da:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 80010de:	4619      	mov	r1, r3
 80010e0:	4845      	ldr	r0, [pc, #276]	@ (80011f8 <MX_GPIO_Init+0x2fc>)
 80010e2:	f000 fd27 	bl	8001b34 <HAL_GPIO_Init>

  /*Configure GPIO pins : A10_Pin A11_Pin BA0_Pin BA1_Pin
                           SDCLK_Pin SDNCAS_Pin */
  GPIO_InitStruct.Pin = A10_Pin|A11_Pin|BA0_Pin|BA1_Pin
 80010e6:	f248 1333 	movw	r3, #33075	@ 0x8133
 80010ea:	627b      	str	r3, [r7, #36]	@ 0x24
                          |SDCLK_Pin|SDNCAS_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80010ec:	2302      	movs	r3, #2
 80010ee:	62bb      	str	r3, [r7, #40]	@ 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80010f0:	2300      	movs	r3, #0
 80010f2:	62fb      	str	r3, [r7, #44]	@ 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80010f4:	2303      	movs	r3, #3
 80010f6:	633b      	str	r3, [r7, #48]	@ 0x30
  GPIO_InitStruct.Alternate = GPIO_AF12_FMC;
 80010f8:	230c      	movs	r3, #12
 80010fa:	637b      	str	r3, [r7, #52]	@ 0x34
  HAL_GPIO_Init(GPIOG, &GPIO_InitStruct);
 80010fc:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8001100:	4619      	mov	r1, r3
 8001102:	483b      	ldr	r0, [pc, #236]	@ (80011f0 <MX_GPIO_Init+0x2f4>)
 8001104:	f000 fd16 	bl	8001b34 <HAL_GPIO_Init>

  /*Configure GPIO pins : D4_Pin D5_Pin D6_Pin D7_Pin
                           D8_Pin D9_Pin D10_Pin D11_Pin
                           D12_Pin NBL0_Pin NBL1_Pin */
  GPIO_InitStruct.Pin = D4_Pin|D5_Pin|D6_Pin|D7_Pin
 8001108:	f64f 7383 	movw	r3, #65411	@ 0xff83
 800110c:	627b      	str	r3, [r7, #36]	@ 0x24
                          |D8_Pin|D9_Pin|D10_Pin|D11_Pin
                          |D12_Pin|NBL0_Pin|NBL1_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800110e:	2302      	movs	r3, #2
 8001110:	62bb      	str	r3, [r7, #40]	@ 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001112:	2300      	movs	r3, #0
 8001114:	62fb      	str	r3, [r7, #44]	@ 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001116:	2303      	movs	r3, #3
 8001118:	633b      	str	r3, [r7, #48]	@ 0x30
  GPIO_InitStruct.Alternate = GPIO_AF12_FMC;
 800111a:	230c      	movs	r3, #12
 800111c:	637b      	str	r3, [r7, #52]	@ 0x34
  HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 800111e:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8001122:	4619      	mov	r1, r3
 8001124:	4835      	ldr	r0, [pc, #212]	@ (80011fc <MX_GPIO_Init+0x300>)
 8001126:	f000 fd05 	bl	8001b34 <HAL_GPIO_Init>

  /*Configure GPIO pins : OTG_HS_ID_Pin OTG_HS_DM_Pin OTG_HS_DP_Pin */
  GPIO_InitStruct.Pin = OTG_HS_ID_Pin|OTG_HS_DM_Pin|OTG_HS_DP_Pin;
 800112a:	f44f 4350 	mov.w	r3, #53248	@ 0xd000
 800112e:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001130:	2302      	movs	r3, #2
 8001132:	62bb      	str	r3, [r7, #40]	@ 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001134:	2300      	movs	r3, #0
 8001136:	62fb      	str	r3, [r7, #44]	@ 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001138:	2300      	movs	r3, #0
 800113a:	633b      	str	r3, [r7, #48]	@ 0x30
  GPIO_InitStruct.Alternate = GPIO_AF12_OTG_HS_FS;
 800113c:	230c      	movs	r3, #12
 800113e:	637b      	str	r3, [r7, #52]	@ 0x34
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001140:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8001144:	4619      	mov	r1, r3
 8001146:	482c      	ldr	r0, [pc, #176]	@ (80011f8 <MX_GPIO_Init+0x2fc>)
 8001148:	f000 fcf4 	bl	8001b34 <HAL_GPIO_Init>

  /*Configure GPIO pin : VBUS_HS_Pin */
  GPIO_InitStruct.Pin = VBUS_HS_Pin;
 800114c:	f44f 5300 	mov.w	r3, #8192	@ 0x2000
 8001150:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8001152:	2300      	movs	r3, #0
 8001154:	62bb      	str	r3, [r7, #40]	@ 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001156:	2300      	movs	r3, #0
 8001158:	62fb      	str	r3, [r7, #44]	@ 0x2c
  HAL_GPIO_Init(VBUS_HS_GPIO_Port, &GPIO_InitStruct);
 800115a:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 800115e:	4619      	mov	r1, r3
 8001160:	4825      	ldr	r0, [pc, #148]	@ (80011f8 <MX_GPIO_Init+0x2fc>)
 8001162:	f000 fce7 	bl	8001b34 <HAL_GPIO_Init>

  /*Configure GPIO pins : D13_Pin D14_Pin D15_Pin D0_Pin
                           D1_Pin D2_Pin D3_Pin */
  GPIO_InitStruct.Pin = D13_Pin|D14_Pin|D15_Pin|D0_Pin
 8001166:	f24c 7303 	movw	r3, #50947	@ 0xc703
 800116a:	627b      	str	r3, [r7, #36]	@ 0x24
                          |D1_Pin|D2_Pin|D3_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800116c:	2302      	movs	r3, #2
 800116e:	62bb      	str	r3, [r7, #40]	@ 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001170:	2300      	movs	r3, #0
 8001172:	62fb      	str	r3, [r7, #44]	@ 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001174:	2303      	movs	r3, #3
 8001176:	633b      	str	r3, [r7, #48]	@ 0x30
  GPIO_InitStruct.Alternate = GPIO_AF12_FMC;
 8001178:	230c      	movs	r3, #12
 800117a:	637b      	str	r3, [r7, #52]	@ 0x34
  HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 800117c:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8001180:	4619      	mov	r1, r3
 8001182:	481a      	ldr	r0, [pc, #104]	@ (80011ec <MX_GPIO_Init+0x2f0>)
 8001184:	f000 fcd6 	bl	8001b34 <HAL_GPIO_Init>

  /*Configure GPIO pin : TE_Pin */
  GPIO_InitStruct.Pin = TE_Pin;
 8001188:	f44f 6300 	mov.w	r3, #2048	@ 0x800
 800118c:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 800118e:	2300      	movs	r3, #0
 8001190:	62bb      	str	r3, [r7, #40]	@ 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001192:	2300      	movs	r3, #0
 8001194:	62fb      	str	r3, [r7, #44]	@ 0x2c
  HAL_GPIO_Init(TE_GPIO_Port, &GPIO_InitStruct);
 8001196:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 800119a:	4619      	mov	r1, r3
 800119c:	4813      	ldr	r0, [pc, #76]	@ (80011ec <MX_GPIO_Init+0x2f0>)
 800119e:	f000 fcc9 	bl	8001b34 <HAL_GPIO_Init>

  /*Configure GPIO pins : RDX_Pin WRX_DCX_Pin */
  GPIO_InitStruct.Pin = RDX_Pin|WRX_DCX_Pin;
 80011a2:	f44f 5340 	mov.w	r3, #12288	@ 0x3000
 80011a6:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80011a8:	2301      	movs	r3, #1
 80011aa:	62bb      	str	r3, [r7, #40]	@ 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80011ac:	2300      	movs	r3, #0
 80011ae:	62fb      	str	r3, [r7, #44]	@ 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80011b0:	2300      	movs	r3, #0
 80011b2:	633b      	str	r3, [r7, #48]	@ 0x30
  HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 80011b4:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 80011b8:	4619      	mov	r1, r3
 80011ba:	480c      	ldr	r0, [pc, #48]	@ (80011ec <MX_GPIO_Init+0x2f0>)
 80011bc:	f000 fcba 	bl	8001b34 <HAL_GPIO_Init>

  /*Configure GPIO pins : STLINK_RX_Pin STLINK_TX_Pin */
  GPIO_InitStruct.Pin = STLINK_RX_Pin|STLINK_TX_Pin;
 80011c0:	f44f 63c0 	mov.w	r3, #1536	@ 0x600
 80011c4:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80011c6:	2302      	movs	r3, #2
 80011c8:	62bb      	str	r3, [r7, #40]	@ 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80011ca:	2300      	movs	r3, #0
 80011cc:	62fb      	str	r3, [r7, #44]	@ 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80011ce:	2303      	movs	r3, #3
 80011d0:	633b      	str	r3, [r7, #48]	@ 0x30
  GPIO_InitStruct.Alternate = GPIO_AF7_USART1;
 80011d2:	2307      	movs	r3, #7
 80011d4:	637b      	str	r3, [r7, #52]	@ 0x34
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80011d6:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 80011da:	4619      	mov	r1, r3
 80011dc:	e010      	b.n	8001200 <MX_GPIO_Init+0x304>
 80011de:	bf00      	nop
 80011e0:	40023800 	.word	0x40023800
 80011e4:	40020800 	.word	0x40020800
 80011e8:	40020000 	.word	0x40020000
 80011ec:	40020c00 	.word	0x40020c00
 80011f0:	40021800 	.word	0x40021800
 80011f4:	40021400 	.word	0x40021400
 80011f8:	40020400 	.word	0x40020400
 80011fc:	40021000 	.word	0x40021000
 8001200:	4812      	ldr	r0, [pc, #72]	@ (800124c <MX_GPIO_Init+0x350>)
 8001202:	f000 fc97 	bl	8001b34 <HAL_GPIO_Init>

  /*Configure GPIO pins : LD3_Pin LD4_Pin */
  GPIO_InitStruct.Pin = LD3_Pin|LD4_Pin;
 8001206:	f44f 43c0 	mov.w	r3, #24576	@ 0x6000
 800120a:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800120c:	2301      	movs	r3, #1
 800120e:	62bb      	str	r3, [r7, #40]	@ 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001210:	2300      	movs	r3, #0
 8001212:	62fb      	str	r3, [r7, #44]	@ 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001214:	2300      	movs	r3, #0
 8001216:	633b      	str	r3, [r7, #48]	@ 0x30
  HAL_GPIO_Init(GPIOG, &GPIO_InitStruct);
 8001218:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 800121c:	4619      	mov	r1, r3
 800121e:	480c      	ldr	r0, [pc, #48]	@ (8001250 <MX_GPIO_Init+0x354>)
 8001220:	f000 fc88 	bl	8001b34 <HAL_GPIO_Init>

  /*Configure GPIO pins : SDCKE1_Pin SDNE1_Pin */
  GPIO_InitStruct.Pin = SDCKE1_Pin|SDNE1_Pin;
 8001224:	2360      	movs	r3, #96	@ 0x60
 8001226:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001228:	2302      	movs	r3, #2
 800122a:	62bb      	str	r3, [r7, #40]	@ 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800122c:	2300      	movs	r3, #0
 800122e:	62fb      	str	r3, [r7, #44]	@ 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001230:	2303      	movs	r3, #3
 8001232:	633b      	str	r3, [r7, #48]	@ 0x30
  GPIO_InitStruct.Alternate = GPIO_AF12_FMC;
 8001234:	230c      	movs	r3, #12
 8001236:	637b      	str	r3, [r7, #52]	@ 0x34
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001238:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 800123c:	4619      	mov	r1, r3
 800123e:	4805      	ldr	r0, [pc, #20]	@ (8001254 <MX_GPIO_Init+0x358>)
 8001240:	f000 fc78 	bl	8001b34 <HAL_GPIO_Init>

/* USER CODE BEGIN MX_GPIO_Init_2 */
/* USER CODE END MX_GPIO_Init_2 */
}
 8001244:	bf00      	nop
 8001246:	3738      	adds	r7, #56	@ 0x38
 8001248:	46bd      	mov	sp, r7
 800124a:	bd80      	pop	{r7, pc}
 800124c:	40020000 	.word	0x40020000
 8001250:	40021800 	.word	0x40021800
 8001254:	40020400 	.word	0x40020400

08001258 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8001258:	b480      	push	{r7}
 800125a:	af00      	add	r7, sp, #0
  __ASM volatile ("cpsid i" : : : "memory");
 800125c:	b672      	cpsid	i
}
 800125e:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8001260:	bf00      	nop
 8001262:	e7fd      	b.n	8001260 <Error_Handler+0x8>

08001264 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8001264:	b580      	push	{r7, lr}
 8001266:	b082      	sub	sp, #8
 8001268:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 800126a:	2300      	movs	r3, #0
 800126c:	607b      	str	r3, [r7, #4]
 800126e:	4b10      	ldr	r3, [pc, #64]	@ (80012b0 <HAL_MspInit+0x4c>)
 8001270:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8001272:	4a0f      	ldr	r2, [pc, #60]	@ (80012b0 <HAL_MspInit+0x4c>)
 8001274:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 8001278:	6453      	str	r3, [r2, #68]	@ 0x44
 800127a:	4b0d      	ldr	r3, [pc, #52]	@ (80012b0 <HAL_MspInit+0x4c>)
 800127c:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800127e:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8001282:	607b      	str	r3, [r7, #4]
 8001284:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8001286:	2300      	movs	r3, #0
 8001288:	603b      	str	r3, [r7, #0]
 800128a:	4b09      	ldr	r3, [pc, #36]	@ (80012b0 <HAL_MspInit+0x4c>)
 800128c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800128e:	4a08      	ldr	r2, [pc, #32]	@ (80012b0 <HAL_MspInit+0x4c>)
 8001290:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8001294:	6413      	str	r3, [r2, #64]	@ 0x40
 8001296:	4b06      	ldr	r3, [pc, #24]	@ (80012b0 <HAL_MspInit+0x4c>)
 8001298:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800129a:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 800129e:	603b      	str	r3, [r7, #0]
 80012a0:	683b      	ldr	r3, [r7, #0]

  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_0);
 80012a2:	2007      	movs	r0, #7
 80012a4:	f000 fc12 	bl	8001acc <HAL_NVIC_SetPriorityGrouping>
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 80012a8:	bf00      	nop
 80012aa:	3708      	adds	r7, #8
 80012ac:	46bd      	mov	sp, r7
 80012ae:	bd80      	pop	{r7, pc}
 80012b0:	40023800 	.word	0x40023800

080012b4 <HAL_I2C_MspInit>:
* This function configures the hardware resources used in this example
* @param hi2c: I2C handle pointer
* @retval None
*/
void HAL_I2C_MspInit(I2C_HandleTypeDef* hi2c)
{
 80012b4:	b580      	push	{r7, lr}
 80012b6:	b08a      	sub	sp, #40	@ 0x28
 80012b8:	af00      	add	r7, sp, #0
 80012ba:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80012bc:	f107 0314 	add.w	r3, r7, #20
 80012c0:	2200      	movs	r2, #0
 80012c2:	601a      	str	r2, [r3, #0]
 80012c4:	605a      	str	r2, [r3, #4]
 80012c6:	609a      	str	r2, [r3, #8]
 80012c8:	60da      	str	r2, [r3, #12]
 80012ca:	611a      	str	r2, [r3, #16]
  if(hi2c->Instance==I2C3)
 80012cc:	687b      	ldr	r3, [r7, #4]
 80012ce:	681b      	ldr	r3, [r3, #0]
 80012d0:	4a29      	ldr	r2, [pc, #164]	@ (8001378 <HAL_I2C_MspInit+0xc4>)
 80012d2:	4293      	cmp	r3, r2
 80012d4:	d14b      	bne.n	800136e <HAL_I2C_MspInit+0xba>
  {
  /* USER CODE BEGIN I2C3_MspInit 0 */

  /* USER CODE END I2C3_MspInit 0 */

    __HAL_RCC_GPIOC_CLK_ENABLE();
 80012d6:	2300      	movs	r3, #0
 80012d8:	613b      	str	r3, [r7, #16]
 80012da:	4b28      	ldr	r3, [pc, #160]	@ (800137c <HAL_I2C_MspInit+0xc8>)
 80012dc:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80012de:	4a27      	ldr	r2, [pc, #156]	@ (800137c <HAL_I2C_MspInit+0xc8>)
 80012e0:	f043 0304 	orr.w	r3, r3, #4
 80012e4:	6313      	str	r3, [r2, #48]	@ 0x30
 80012e6:	4b25      	ldr	r3, [pc, #148]	@ (800137c <HAL_I2C_MspInit+0xc8>)
 80012e8:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80012ea:	f003 0304 	and.w	r3, r3, #4
 80012ee:	613b      	str	r3, [r7, #16]
 80012f0:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 80012f2:	2300      	movs	r3, #0
 80012f4:	60fb      	str	r3, [r7, #12]
 80012f6:	4b21      	ldr	r3, [pc, #132]	@ (800137c <HAL_I2C_MspInit+0xc8>)
 80012f8:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80012fa:	4a20      	ldr	r2, [pc, #128]	@ (800137c <HAL_I2C_MspInit+0xc8>)
 80012fc:	f043 0301 	orr.w	r3, r3, #1
 8001300:	6313      	str	r3, [r2, #48]	@ 0x30
 8001302:	4b1e      	ldr	r3, [pc, #120]	@ (800137c <HAL_I2C_MspInit+0xc8>)
 8001304:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001306:	f003 0301 	and.w	r3, r3, #1
 800130a:	60fb      	str	r3, [r7, #12]
 800130c:	68fb      	ldr	r3, [r7, #12]
    /**I2C3 GPIO Configuration
    PC9     ------> I2C3_SDA
    PA8     ------> I2C3_SCL
    */
    GPIO_InitStruct.Pin = I2C3_SDA_Pin;
 800130e:	f44f 7300 	mov.w	r3, #512	@ 0x200
 8001312:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8001314:	2312      	movs	r3, #18
 8001316:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001318:	2300      	movs	r3, #0
 800131a:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800131c:	2300      	movs	r3, #0
 800131e:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C3;
 8001320:	2304      	movs	r3, #4
 8001322:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(I2C3_SDA_GPIO_Port, &GPIO_InitStruct);
 8001324:	f107 0314 	add.w	r3, r7, #20
 8001328:	4619      	mov	r1, r3
 800132a:	4815      	ldr	r0, [pc, #84]	@ (8001380 <HAL_I2C_MspInit+0xcc>)
 800132c:	f000 fc02 	bl	8001b34 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = I2C3_SCL_Pin;
 8001330:	f44f 7380 	mov.w	r3, #256	@ 0x100
 8001334:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8001336:	2312      	movs	r3, #18
 8001338:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800133a:	2300      	movs	r3, #0
 800133c:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800133e:	2300      	movs	r3, #0
 8001340:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C3;
 8001342:	2304      	movs	r3, #4
 8001344:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(I2C3_SCL_GPIO_Port, &GPIO_InitStruct);
 8001346:	f107 0314 	add.w	r3, r7, #20
 800134a:	4619      	mov	r1, r3
 800134c:	480d      	ldr	r0, [pc, #52]	@ (8001384 <HAL_I2C_MspInit+0xd0>)
 800134e:	f000 fbf1 	bl	8001b34 <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_I2C3_CLK_ENABLE();
 8001352:	2300      	movs	r3, #0
 8001354:	60bb      	str	r3, [r7, #8]
 8001356:	4b09      	ldr	r3, [pc, #36]	@ (800137c <HAL_I2C_MspInit+0xc8>)
 8001358:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800135a:	4a08      	ldr	r2, [pc, #32]	@ (800137c <HAL_I2C_MspInit+0xc8>)
 800135c:	f443 0300 	orr.w	r3, r3, #8388608	@ 0x800000
 8001360:	6413      	str	r3, [r2, #64]	@ 0x40
 8001362:	4b06      	ldr	r3, [pc, #24]	@ (800137c <HAL_I2C_MspInit+0xc8>)
 8001364:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001366:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 800136a:	60bb      	str	r3, [r7, #8]
 800136c:	68bb      	ldr	r3, [r7, #8]

  /* USER CODE END I2C3_MspInit 1 */

  }

}
 800136e:	bf00      	nop
 8001370:	3728      	adds	r7, #40	@ 0x28
 8001372:	46bd      	mov	sp, r7
 8001374:	bd80      	pop	{r7, pc}
 8001376:	bf00      	nop
 8001378:	40005c00 	.word	0x40005c00
 800137c:	40023800 	.word	0x40023800
 8001380:	40020800 	.word	0x40020800
 8001384:	40020000 	.word	0x40020000

08001388 <HAL_LTDC_MspInit>:
* This function configures the hardware resources used in this example
* @param hltdc: LTDC handle pointer
* @retval None
*/
void HAL_LTDC_MspInit(LTDC_HandleTypeDef* hltdc)
{
 8001388:	b580      	push	{r7, lr}
 800138a:	b09a      	sub	sp, #104	@ 0x68
 800138c:	af00      	add	r7, sp, #0
 800138e:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001390:	f107 0354 	add.w	r3, r7, #84	@ 0x54
 8001394:	2200      	movs	r2, #0
 8001396:	601a      	str	r2, [r3, #0]
 8001398:	605a      	str	r2, [r3, #4]
 800139a:	609a      	str	r2, [r3, #8]
 800139c:	60da      	str	r2, [r3, #12]
 800139e:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 80013a0:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 80013a4:	2230      	movs	r2, #48	@ 0x30
 80013a6:	2100      	movs	r1, #0
 80013a8:	4618      	mov	r0, r3
 80013aa:	f002 f95d 	bl	8003668 <memset>
  if(hltdc->Instance==LTDC)
 80013ae:	687b      	ldr	r3, [r7, #4]
 80013b0:	681b      	ldr	r3, [r3, #0]
 80013b2:	4a81      	ldr	r2, [pc, #516]	@ (80015b8 <HAL_LTDC_MspInit+0x230>)
 80013b4:	4293      	cmp	r3, r2
 80013b6:	f040 80fa 	bne.w	80015ae <HAL_LTDC_MspInit+0x226>

  /* USER CODE END LTDC_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_LTDC;
 80013ba:	2308      	movs	r3, #8
 80013bc:	627b      	str	r3, [r7, #36]	@ 0x24
    PeriphClkInitStruct.PLLSAI.PLLSAIN = 50;
 80013be:	2332      	movs	r3, #50	@ 0x32
 80013c0:	637b      	str	r3, [r7, #52]	@ 0x34
    PeriphClkInitStruct.PLLSAI.PLLSAIR = 2;
 80013c2:	2302      	movs	r3, #2
 80013c4:	63fb      	str	r3, [r7, #60]	@ 0x3c
    PeriphClkInitStruct.PLLSAIDivR = RCC_PLLSAIDIVR_2;
 80013c6:	2300      	movs	r3, #0
 80013c8:	64bb      	str	r3, [r7, #72]	@ 0x48
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 80013ca:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 80013ce:	4618      	mov	r0, r3
 80013d0:	f001 fb08 	bl	80029e4 <HAL_RCCEx_PeriphCLKConfig>
 80013d4:	4603      	mov	r3, r0
 80013d6:	2b00      	cmp	r3, #0
 80013d8:	d001      	beq.n	80013de <HAL_LTDC_MspInit+0x56>
    {
      Error_Handler();
 80013da:	f7ff ff3d 	bl	8001258 <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_LTDC_CLK_ENABLE();
 80013de:	2300      	movs	r3, #0
 80013e0:	623b      	str	r3, [r7, #32]
 80013e2:	4b76      	ldr	r3, [pc, #472]	@ (80015bc <HAL_LTDC_MspInit+0x234>)
 80013e4:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80013e6:	4a75      	ldr	r2, [pc, #468]	@ (80015bc <HAL_LTDC_MspInit+0x234>)
 80013e8:	f043 6380 	orr.w	r3, r3, #67108864	@ 0x4000000
 80013ec:	6453      	str	r3, [r2, #68]	@ 0x44
 80013ee:	4b73      	ldr	r3, [pc, #460]	@ (80015bc <HAL_LTDC_MspInit+0x234>)
 80013f0:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80013f2:	f003 6380 	and.w	r3, r3, #67108864	@ 0x4000000
 80013f6:	623b      	str	r3, [r7, #32]
 80013f8:	6a3b      	ldr	r3, [r7, #32]

    __HAL_RCC_GPIOF_CLK_ENABLE();
 80013fa:	2300      	movs	r3, #0
 80013fc:	61fb      	str	r3, [r7, #28]
 80013fe:	4b6f      	ldr	r3, [pc, #444]	@ (80015bc <HAL_LTDC_MspInit+0x234>)
 8001400:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001402:	4a6e      	ldr	r2, [pc, #440]	@ (80015bc <HAL_LTDC_MspInit+0x234>)
 8001404:	f043 0320 	orr.w	r3, r3, #32
 8001408:	6313      	str	r3, [r2, #48]	@ 0x30
 800140a:	4b6c      	ldr	r3, [pc, #432]	@ (80015bc <HAL_LTDC_MspInit+0x234>)
 800140c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800140e:	f003 0320 	and.w	r3, r3, #32
 8001412:	61fb      	str	r3, [r7, #28]
 8001414:	69fb      	ldr	r3, [r7, #28]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001416:	2300      	movs	r3, #0
 8001418:	61bb      	str	r3, [r7, #24]
 800141a:	4b68      	ldr	r3, [pc, #416]	@ (80015bc <HAL_LTDC_MspInit+0x234>)
 800141c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800141e:	4a67      	ldr	r2, [pc, #412]	@ (80015bc <HAL_LTDC_MspInit+0x234>)
 8001420:	f043 0301 	orr.w	r3, r3, #1
 8001424:	6313      	str	r3, [r2, #48]	@ 0x30
 8001426:	4b65      	ldr	r3, [pc, #404]	@ (80015bc <HAL_LTDC_MspInit+0x234>)
 8001428:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800142a:	f003 0301 	and.w	r3, r3, #1
 800142e:	61bb      	str	r3, [r7, #24]
 8001430:	69bb      	ldr	r3, [r7, #24]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8001432:	2300      	movs	r3, #0
 8001434:	617b      	str	r3, [r7, #20]
 8001436:	4b61      	ldr	r3, [pc, #388]	@ (80015bc <HAL_LTDC_MspInit+0x234>)
 8001438:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800143a:	4a60      	ldr	r2, [pc, #384]	@ (80015bc <HAL_LTDC_MspInit+0x234>)
 800143c:	f043 0302 	orr.w	r3, r3, #2
 8001440:	6313      	str	r3, [r2, #48]	@ 0x30
 8001442:	4b5e      	ldr	r3, [pc, #376]	@ (80015bc <HAL_LTDC_MspInit+0x234>)
 8001444:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001446:	f003 0302 	and.w	r3, r3, #2
 800144a:	617b      	str	r3, [r7, #20]
 800144c:	697b      	ldr	r3, [r7, #20]
    __HAL_RCC_GPIOG_CLK_ENABLE();
 800144e:	2300      	movs	r3, #0
 8001450:	613b      	str	r3, [r7, #16]
 8001452:	4b5a      	ldr	r3, [pc, #360]	@ (80015bc <HAL_LTDC_MspInit+0x234>)
 8001454:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001456:	4a59      	ldr	r2, [pc, #356]	@ (80015bc <HAL_LTDC_MspInit+0x234>)
 8001458:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 800145c:	6313      	str	r3, [r2, #48]	@ 0x30
 800145e:	4b57      	ldr	r3, [pc, #348]	@ (80015bc <HAL_LTDC_MspInit+0x234>)
 8001460:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001462:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8001466:	613b      	str	r3, [r7, #16]
 8001468:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOC_CLK_ENABLE();
 800146a:	2300      	movs	r3, #0
 800146c:	60fb      	str	r3, [r7, #12]
 800146e:	4b53      	ldr	r3, [pc, #332]	@ (80015bc <HAL_LTDC_MspInit+0x234>)
 8001470:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001472:	4a52      	ldr	r2, [pc, #328]	@ (80015bc <HAL_LTDC_MspInit+0x234>)
 8001474:	f043 0304 	orr.w	r3, r3, #4
 8001478:	6313      	str	r3, [r2, #48]	@ 0x30
 800147a:	4b50      	ldr	r3, [pc, #320]	@ (80015bc <HAL_LTDC_MspInit+0x234>)
 800147c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800147e:	f003 0304 	and.w	r3, r3, #4
 8001482:	60fb      	str	r3, [r7, #12]
 8001484:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOD_CLK_ENABLE();
 8001486:	2300      	movs	r3, #0
 8001488:	60bb      	str	r3, [r7, #8]
 800148a:	4b4c      	ldr	r3, [pc, #304]	@ (80015bc <HAL_LTDC_MspInit+0x234>)
 800148c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800148e:	4a4b      	ldr	r2, [pc, #300]	@ (80015bc <HAL_LTDC_MspInit+0x234>)
 8001490:	f043 0308 	orr.w	r3, r3, #8
 8001494:	6313      	str	r3, [r2, #48]	@ 0x30
 8001496:	4b49      	ldr	r3, [pc, #292]	@ (80015bc <HAL_LTDC_MspInit+0x234>)
 8001498:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800149a:	f003 0308 	and.w	r3, r3, #8
 800149e:	60bb      	str	r3, [r7, #8]
 80014a0:	68bb      	ldr	r3, [r7, #8]
    PG11     ------> LTDC_B3
    PG12     ------> LTDC_B4
    PB8     ------> LTDC_B6
    PB9     ------> LTDC_B7
    */
    GPIO_InitStruct.Pin = ENABLE_Pin;
 80014a2:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 80014a6:	657b      	str	r3, [r7, #84]	@ 0x54
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80014a8:	2302      	movs	r3, #2
 80014aa:	65bb      	str	r3, [r7, #88]	@ 0x58
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80014ac:	2300      	movs	r3, #0
 80014ae:	65fb      	str	r3, [r7, #92]	@ 0x5c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80014b0:	2300      	movs	r3, #0
 80014b2:	663b      	str	r3, [r7, #96]	@ 0x60
    GPIO_InitStruct.Alternate = GPIO_AF14_LTDC;
 80014b4:	230e      	movs	r3, #14
 80014b6:	667b      	str	r3, [r7, #100]	@ 0x64
    HAL_GPIO_Init(ENABLE_GPIO_Port, &GPIO_InitStruct);
 80014b8:	f107 0354 	add.w	r3, r7, #84	@ 0x54
 80014bc:	4619      	mov	r1, r3
 80014be:	4840      	ldr	r0, [pc, #256]	@ (80015c0 <HAL_LTDC_MspInit+0x238>)
 80014c0:	f000 fb38 	bl	8001b34 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = B5_Pin|VSYNC_Pin|G2_Pin|R4_Pin
 80014c4:	f641 0358 	movw	r3, #6232	@ 0x1858
 80014c8:	657b      	str	r3, [r7, #84]	@ 0x54
                          |R5_Pin;
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80014ca:	2302      	movs	r3, #2
 80014cc:	65bb      	str	r3, [r7, #88]	@ 0x58
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80014ce:	2300      	movs	r3, #0
 80014d0:	65fb      	str	r3, [r7, #92]	@ 0x5c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80014d2:	2300      	movs	r3, #0
 80014d4:	663b      	str	r3, [r7, #96]	@ 0x60
    GPIO_InitStruct.Alternate = GPIO_AF14_LTDC;
 80014d6:	230e      	movs	r3, #14
 80014d8:	667b      	str	r3, [r7, #100]	@ 0x64
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80014da:	f107 0354 	add.w	r3, r7, #84	@ 0x54
 80014de:	4619      	mov	r1, r3
 80014e0:	4838      	ldr	r0, [pc, #224]	@ (80015c4 <HAL_LTDC_MspInit+0x23c>)
 80014e2:	f000 fb27 	bl	8001b34 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = R3_Pin|R6_Pin;
 80014e6:	2303      	movs	r3, #3
 80014e8:	657b      	str	r3, [r7, #84]	@ 0x54
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80014ea:	2302      	movs	r3, #2
 80014ec:	65bb      	str	r3, [r7, #88]	@ 0x58
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80014ee:	2300      	movs	r3, #0
 80014f0:	65fb      	str	r3, [r7, #92]	@ 0x5c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80014f2:	2300      	movs	r3, #0
 80014f4:	663b      	str	r3, [r7, #96]	@ 0x60
    GPIO_InitStruct.Alternate = GPIO_AF9_LTDC;
 80014f6:	2309      	movs	r3, #9
 80014f8:	667b      	str	r3, [r7, #100]	@ 0x64
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80014fa:	f107 0354 	add.w	r3, r7, #84	@ 0x54
 80014fe:	4619      	mov	r1, r3
 8001500:	4831      	ldr	r0, [pc, #196]	@ (80015c8 <HAL_LTDC_MspInit+0x240>)
 8001502:	f000 fb17 	bl	8001b34 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = G4_Pin|G5_Pin|B6_Pin|B7_Pin;
 8001506:	f44f 6370 	mov.w	r3, #3840	@ 0xf00
 800150a:	657b      	str	r3, [r7, #84]	@ 0x54
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800150c:	2302      	movs	r3, #2
 800150e:	65bb      	str	r3, [r7, #88]	@ 0x58
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001510:	2300      	movs	r3, #0
 8001512:	65fb      	str	r3, [r7, #92]	@ 0x5c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001514:	2300      	movs	r3, #0
 8001516:	663b      	str	r3, [r7, #96]	@ 0x60
    GPIO_InitStruct.Alternate = GPIO_AF14_LTDC;
 8001518:	230e      	movs	r3, #14
 800151a:	667b      	str	r3, [r7, #100]	@ 0x64
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800151c:	f107 0354 	add.w	r3, r7, #84	@ 0x54
 8001520:	4619      	mov	r1, r3
 8001522:	4829      	ldr	r0, [pc, #164]	@ (80015c8 <HAL_LTDC_MspInit+0x240>)
 8001524:	f000 fb06 	bl	8001b34 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = R7_Pin|DOTCLK_Pin|B3_Pin;
 8001528:	f44f 630c 	mov.w	r3, #2240	@ 0x8c0
 800152c:	657b      	str	r3, [r7, #84]	@ 0x54
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800152e:	2302      	movs	r3, #2
 8001530:	65bb      	str	r3, [r7, #88]	@ 0x58
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001532:	2300      	movs	r3, #0
 8001534:	65fb      	str	r3, [r7, #92]	@ 0x5c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001536:	2300      	movs	r3, #0
 8001538:	663b      	str	r3, [r7, #96]	@ 0x60
    GPIO_InitStruct.Alternate = GPIO_AF14_LTDC;
 800153a:	230e      	movs	r3, #14
 800153c:	667b      	str	r3, [r7, #100]	@ 0x64
    HAL_GPIO_Init(GPIOG, &GPIO_InitStruct);
 800153e:	f107 0354 	add.w	r3, r7, #84	@ 0x54
 8001542:	4619      	mov	r1, r3
 8001544:	4821      	ldr	r0, [pc, #132]	@ (80015cc <HAL_LTDC_MspInit+0x244>)
 8001546:	f000 faf5 	bl	8001b34 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = HSYNC_Pin|G6_Pin|R2_Pin;
 800154a:	f44f 6398 	mov.w	r3, #1216	@ 0x4c0
 800154e:	657b      	str	r3, [r7, #84]	@ 0x54
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001550:	2302      	movs	r3, #2
 8001552:	65bb      	str	r3, [r7, #88]	@ 0x58
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001554:	2300      	movs	r3, #0
 8001556:	65fb      	str	r3, [r7, #92]	@ 0x5c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001558:	2300      	movs	r3, #0
 800155a:	663b      	str	r3, [r7, #96]	@ 0x60
    GPIO_InitStruct.Alternate = GPIO_AF14_LTDC;
 800155c:	230e      	movs	r3, #14
 800155e:	667b      	str	r3, [r7, #100]	@ 0x64
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8001560:	f107 0354 	add.w	r3, r7, #84	@ 0x54
 8001564:	4619      	mov	r1, r3
 8001566:	481a      	ldr	r0, [pc, #104]	@ (80015d0 <HAL_LTDC_MspInit+0x248>)
 8001568:	f000 fae4 	bl	8001b34 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = G7_Pin|B2_Pin;
 800156c:	2348      	movs	r3, #72	@ 0x48
 800156e:	657b      	str	r3, [r7, #84]	@ 0x54
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001570:	2302      	movs	r3, #2
 8001572:	65bb      	str	r3, [r7, #88]	@ 0x58
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001574:	2300      	movs	r3, #0
 8001576:	65fb      	str	r3, [r7, #92]	@ 0x5c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001578:	2300      	movs	r3, #0
 800157a:	663b      	str	r3, [r7, #96]	@ 0x60
    GPIO_InitStruct.Alternate = GPIO_AF14_LTDC;
 800157c:	230e      	movs	r3, #14
 800157e:	667b      	str	r3, [r7, #100]	@ 0x64
    HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8001580:	f107 0354 	add.w	r3, r7, #84	@ 0x54
 8001584:	4619      	mov	r1, r3
 8001586:	4813      	ldr	r0, [pc, #76]	@ (80015d4 <HAL_LTDC_MspInit+0x24c>)
 8001588:	f000 fad4 	bl	8001b34 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = G3_Pin|B4_Pin;
 800158c:	f44f 53a0 	mov.w	r3, #5120	@ 0x1400
 8001590:	657b      	str	r3, [r7, #84]	@ 0x54
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001592:	2302      	movs	r3, #2
 8001594:	65bb      	str	r3, [r7, #88]	@ 0x58
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001596:	2300      	movs	r3, #0
 8001598:	65fb      	str	r3, [r7, #92]	@ 0x5c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800159a:	2300      	movs	r3, #0
 800159c:	663b      	str	r3, [r7, #96]	@ 0x60
    GPIO_InitStruct.Alternate = GPIO_AF9_LTDC;
 800159e:	2309      	movs	r3, #9
 80015a0:	667b      	str	r3, [r7, #100]	@ 0x64
    HAL_GPIO_Init(GPIOG, &GPIO_InitStruct);
 80015a2:	f107 0354 	add.w	r3, r7, #84	@ 0x54
 80015a6:	4619      	mov	r1, r3
 80015a8:	4808      	ldr	r0, [pc, #32]	@ (80015cc <HAL_LTDC_MspInit+0x244>)
 80015aa:	f000 fac3 	bl	8001b34 <HAL_GPIO_Init>

  /* USER CODE END LTDC_MspInit 1 */

  }

}
 80015ae:	bf00      	nop
 80015b0:	3768      	adds	r7, #104	@ 0x68
 80015b2:	46bd      	mov	sp, r7
 80015b4:	bd80      	pop	{r7, pc}
 80015b6:	bf00      	nop
 80015b8:	40016800 	.word	0x40016800
 80015bc:	40023800 	.word	0x40023800
 80015c0:	40021400 	.word	0x40021400
 80015c4:	40020000 	.word	0x40020000
 80015c8:	40020400 	.word	0x40020400
 80015cc:	40021800 	.word	0x40021800
 80015d0:	40020800 	.word	0x40020800
 80015d4:	40020c00 	.word	0x40020c00

080015d8 <HAL_RNG_MspInit>:
* This function configures the hardware resources used in this example
* @param hrng: RNG handle pointer
* @retval None
*/
void HAL_RNG_MspInit(RNG_HandleTypeDef* hrng)
{
 80015d8:	b480      	push	{r7}
 80015da:	b085      	sub	sp, #20
 80015dc:	af00      	add	r7, sp, #0
 80015de:	6078      	str	r0, [r7, #4]
  if(hrng->Instance==RNG)
 80015e0:	687b      	ldr	r3, [r7, #4]
 80015e2:	681b      	ldr	r3, [r3, #0]
 80015e4:	4a0b      	ldr	r2, [pc, #44]	@ (8001614 <HAL_RNG_MspInit+0x3c>)
 80015e6:	4293      	cmp	r3, r2
 80015e8:	d10d      	bne.n	8001606 <HAL_RNG_MspInit+0x2e>
  {
  /* USER CODE BEGIN RNG_MspInit 0 */

  /* USER CODE END RNG_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_RNG_CLK_ENABLE();
 80015ea:	2300      	movs	r3, #0
 80015ec:	60fb      	str	r3, [r7, #12]
 80015ee:	4b0a      	ldr	r3, [pc, #40]	@ (8001618 <HAL_RNG_MspInit+0x40>)
 80015f0:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 80015f2:	4a09      	ldr	r2, [pc, #36]	@ (8001618 <HAL_RNG_MspInit+0x40>)
 80015f4:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 80015f8:	6353      	str	r3, [r2, #52]	@ 0x34
 80015fa:	4b07      	ldr	r3, [pc, #28]	@ (8001618 <HAL_RNG_MspInit+0x40>)
 80015fc:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 80015fe:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8001602:	60fb      	str	r3, [r7, #12]
 8001604:	68fb      	ldr	r3, [r7, #12]

  /* USER CODE END RNG_MspInit 1 */

  }

}
 8001606:	bf00      	nop
 8001608:	3714      	adds	r7, #20
 800160a:	46bd      	mov	sp, r7
 800160c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001610:	4770      	bx	lr
 8001612:	bf00      	nop
 8001614:	50060800 	.word	0x50060800
 8001618:	40023800 	.word	0x40023800

0800161c <HAL_SPI_MspInit>:
* This function configures the hardware resources used in this example
* @param hspi: SPI handle pointer
* @retval None
*/
void HAL_SPI_MspInit(SPI_HandleTypeDef* hspi)
{
 800161c:	b580      	push	{r7, lr}
 800161e:	b08a      	sub	sp, #40	@ 0x28
 8001620:	af00      	add	r7, sp, #0
 8001622:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001624:	f107 0314 	add.w	r3, r7, #20
 8001628:	2200      	movs	r2, #0
 800162a:	601a      	str	r2, [r3, #0]
 800162c:	605a      	str	r2, [r3, #4]
 800162e:	609a      	str	r2, [r3, #8]
 8001630:	60da      	str	r2, [r3, #12]
 8001632:	611a      	str	r2, [r3, #16]
  if(hspi->Instance==SPI5)
 8001634:	687b      	ldr	r3, [r7, #4]
 8001636:	681b      	ldr	r3, [r3, #0]
 8001638:	4a19      	ldr	r2, [pc, #100]	@ (80016a0 <HAL_SPI_MspInit+0x84>)
 800163a:	4293      	cmp	r3, r2
 800163c:	d12c      	bne.n	8001698 <HAL_SPI_MspInit+0x7c>
  {
  /* USER CODE BEGIN SPI5_MspInit 0 */

  /* USER CODE END SPI5_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_SPI5_CLK_ENABLE();
 800163e:	2300      	movs	r3, #0
 8001640:	613b      	str	r3, [r7, #16]
 8001642:	4b18      	ldr	r3, [pc, #96]	@ (80016a4 <HAL_SPI_MspInit+0x88>)
 8001644:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8001646:	4a17      	ldr	r2, [pc, #92]	@ (80016a4 <HAL_SPI_MspInit+0x88>)
 8001648:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 800164c:	6453      	str	r3, [r2, #68]	@ 0x44
 800164e:	4b15      	ldr	r3, [pc, #84]	@ (80016a4 <HAL_SPI_MspInit+0x88>)
 8001650:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8001652:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 8001656:	613b      	str	r3, [r7, #16]
 8001658:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOF_CLK_ENABLE();
 800165a:	2300      	movs	r3, #0
 800165c:	60fb      	str	r3, [r7, #12]
 800165e:	4b11      	ldr	r3, [pc, #68]	@ (80016a4 <HAL_SPI_MspInit+0x88>)
 8001660:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001662:	4a10      	ldr	r2, [pc, #64]	@ (80016a4 <HAL_SPI_MspInit+0x88>)
 8001664:	f043 0320 	orr.w	r3, r3, #32
 8001668:	6313      	str	r3, [r2, #48]	@ 0x30
 800166a:	4b0e      	ldr	r3, [pc, #56]	@ (80016a4 <HAL_SPI_MspInit+0x88>)
 800166c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800166e:	f003 0320 	and.w	r3, r3, #32
 8001672:	60fb      	str	r3, [r7, #12]
 8001674:	68fb      	ldr	r3, [r7, #12]
    /**SPI5 GPIO Configuration
    PF7     ------> SPI5_SCK
    PF8     ------> SPI5_MISO
    PF9     ------> SPI5_MOSI
    */
    GPIO_InitStruct.Pin = SPI5_SCK_Pin|SPI5_MISO_Pin|SPI5_MOSI_Pin;
 8001676:	f44f 7360 	mov.w	r3, #896	@ 0x380
 800167a:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800167c:	2302      	movs	r3, #2
 800167e:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001680:	2300      	movs	r3, #0
 8001682:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001684:	2300      	movs	r3, #0
 8001686:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI5;
 8001688:	2305      	movs	r3, #5
 800168a:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(GPIOF, &GPIO_InitStruct);
 800168c:	f107 0314 	add.w	r3, r7, #20
 8001690:	4619      	mov	r1, r3
 8001692:	4805      	ldr	r0, [pc, #20]	@ (80016a8 <HAL_SPI_MspInit+0x8c>)
 8001694:	f000 fa4e 	bl	8001b34 <HAL_GPIO_Init>

  /* USER CODE END SPI5_MspInit 1 */

  }

}
 8001698:	bf00      	nop
 800169a:	3728      	adds	r7, #40	@ 0x28
 800169c:	46bd      	mov	sp, r7
 800169e:	bd80      	pop	{r7, pc}
 80016a0:	40015000 	.word	0x40015000
 80016a4:	40023800 	.word	0x40023800
 80016a8:	40021400 	.word	0x40021400

080016ac <HAL_SPI_MspDeInit>:
* This function freeze the hardware resources used in this example
* @param hspi: SPI handle pointer
* @retval None
*/
void HAL_SPI_MspDeInit(SPI_HandleTypeDef* hspi)
{
 80016ac:	b580      	push	{r7, lr}
 80016ae:	b082      	sub	sp, #8
 80016b0:	af00      	add	r7, sp, #0
 80016b2:	6078      	str	r0, [r7, #4]
  if(hspi->Instance==SPI5)
 80016b4:	687b      	ldr	r3, [r7, #4]
 80016b6:	681b      	ldr	r3, [r3, #0]
 80016b8:	4a08      	ldr	r2, [pc, #32]	@ (80016dc <HAL_SPI_MspDeInit+0x30>)
 80016ba:	4293      	cmp	r3, r2
 80016bc:	d10a      	bne.n	80016d4 <HAL_SPI_MspDeInit+0x28>
  {
  /* USER CODE BEGIN SPI5_MspDeInit 0 */

  /* USER CODE END SPI5_MspDeInit 0 */
    /* Peripheral clock disable */
    __HAL_RCC_SPI5_CLK_DISABLE();
 80016be:	4b08      	ldr	r3, [pc, #32]	@ (80016e0 <HAL_SPI_MspDeInit+0x34>)
 80016c0:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80016c2:	4a07      	ldr	r2, [pc, #28]	@ (80016e0 <HAL_SPI_MspDeInit+0x34>)
 80016c4:	f423 1380 	bic.w	r3, r3, #1048576	@ 0x100000
 80016c8:	6453      	str	r3, [r2, #68]	@ 0x44
    /**SPI5 GPIO Configuration
    PF7     ------> SPI5_SCK
    PF8     ------> SPI5_MISO
    PF9     ------> SPI5_MOSI
    */
    HAL_GPIO_DeInit(GPIOF, SPI5_SCK_Pin|SPI5_MISO_Pin|SPI5_MOSI_Pin);
 80016ca:	f44f 7160 	mov.w	r1, #896	@ 0x380
 80016ce:	4805      	ldr	r0, [pc, #20]	@ (80016e4 <HAL_SPI_MspDeInit+0x38>)
 80016d0:	f000 fbdc 	bl	8001e8c <HAL_GPIO_DeInit>
  /* USER CODE BEGIN SPI5_MspDeInit 1 */

  /* USER CODE END SPI5_MspDeInit 1 */
  }

}
 80016d4:	bf00      	nop
 80016d6:	3708      	adds	r7, #8
 80016d8:	46bd      	mov	sp, r7
 80016da:	bd80      	pop	{r7, pc}
 80016dc:	40015000 	.word	0x40015000
 80016e0:	40023800 	.word	0x40023800
 80016e4:	40021400 	.word	0x40021400

080016e8 <HAL_TIM_Base_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 80016e8:	b480      	push	{r7}
 80016ea:	b085      	sub	sp, #20
 80016ec:	af00      	add	r7, sp, #0
 80016ee:	6078      	str	r0, [r7, #4]
  if(htim_base->Instance==TIM6)
 80016f0:	687b      	ldr	r3, [r7, #4]
 80016f2:	681b      	ldr	r3, [r3, #0]
 80016f4:	4a15      	ldr	r2, [pc, #84]	@ (800174c <HAL_TIM_Base_MspInit+0x64>)
 80016f6:	4293      	cmp	r3, r2
 80016f8:	d10e      	bne.n	8001718 <HAL_TIM_Base_MspInit+0x30>
  {
  /* USER CODE BEGIN TIM6_MspInit 0 */

  /* USER CODE END TIM6_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM6_CLK_ENABLE();
 80016fa:	2300      	movs	r3, #0
 80016fc:	60fb      	str	r3, [r7, #12]
 80016fe:	4b14      	ldr	r3, [pc, #80]	@ (8001750 <HAL_TIM_Base_MspInit+0x68>)
 8001700:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001702:	4a13      	ldr	r2, [pc, #76]	@ (8001750 <HAL_TIM_Base_MspInit+0x68>)
 8001704:	f043 0310 	orr.w	r3, r3, #16
 8001708:	6413      	str	r3, [r2, #64]	@ 0x40
 800170a:	4b11      	ldr	r3, [pc, #68]	@ (8001750 <HAL_TIM_Base_MspInit+0x68>)
 800170c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800170e:	f003 0310 	and.w	r3, r3, #16
 8001712:	60fb      	str	r3, [r7, #12]
 8001714:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN TIM7_MspInit 1 */

  /* USER CODE END TIM7_MspInit 1 */
  }

}
 8001716:	e012      	b.n	800173e <HAL_TIM_Base_MspInit+0x56>
  else if(htim_base->Instance==TIM7)
 8001718:	687b      	ldr	r3, [r7, #4]
 800171a:	681b      	ldr	r3, [r3, #0]
 800171c:	4a0d      	ldr	r2, [pc, #52]	@ (8001754 <HAL_TIM_Base_MspInit+0x6c>)
 800171e:	4293      	cmp	r3, r2
 8001720:	d10d      	bne.n	800173e <HAL_TIM_Base_MspInit+0x56>
    __HAL_RCC_TIM7_CLK_ENABLE();
 8001722:	2300      	movs	r3, #0
 8001724:	60bb      	str	r3, [r7, #8]
 8001726:	4b0a      	ldr	r3, [pc, #40]	@ (8001750 <HAL_TIM_Base_MspInit+0x68>)
 8001728:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800172a:	4a09      	ldr	r2, [pc, #36]	@ (8001750 <HAL_TIM_Base_MspInit+0x68>)
 800172c:	f043 0320 	orr.w	r3, r3, #32
 8001730:	6413      	str	r3, [r2, #64]	@ 0x40
 8001732:	4b07      	ldr	r3, [pc, #28]	@ (8001750 <HAL_TIM_Base_MspInit+0x68>)
 8001734:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001736:	f003 0320 	and.w	r3, r3, #32
 800173a:	60bb      	str	r3, [r7, #8]
 800173c:	68bb      	ldr	r3, [r7, #8]
}
 800173e:	bf00      	nop
 8001740:	3714      	adds	r7, #20
 8001742:	46bd      	mov	sp, r7
 8001744:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001748:	4770      	bx	lr
 800174a:	bf00      	nop
 800174c:	40001000 	.word	0x40001000
 8001750:	40023800 	.word	0x40023800
 8001754:	40001400 	.word	0x40001400

08001758 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8001758:	b480      	push	{r7}
 800175a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 800175c:	bf00      	nop
 800175e:	e7fd      	b.n	800175c <NMI_Handler+0x4>

08001760 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8001760:	b480      	push	{r7}
 8001762:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8001764:	bf00      	nop
 8001766:	e7fd      	b.n	8001764 <HardFault_Handler+0x4>

08001768 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8001768:	b480      	push	{r7}
 800176a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 800176c:	bf00      	nop
 800176e:	e7fd      	b.n	800176c <MemManage_Handler+0x4>

08001770 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8001770:	b480      	push	{r7}
 8001772:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8001774:	bf00      	nop
 8001776:	e7fd      	b.n	8001774 <BusFault_Handler+0x4>

08001778 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8001778:	b480      	push	{r7}
 800177a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 800177c:	bf00      	nop
 800177e:	e7fd      	b.n	800177c <UsageFault_Handler+0x4>

08001780 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8001780:	b480      	push	{r7}
 8001782:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8001784:	bf00      	nop
 8001786:	46bd      	mov	sp, r7
 8001788:	f85d 7b04 	ldr.w	r7, [sp], #4
 800178c:	4770      	bx	lr

0800178e <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 800178e:	b480      	push	{r7}
 8001790:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8001792:	bf00      	nop
 8001794:	46bd      	mov	sp, r7
 8001796:	f85d 7b04 	ldr.w	r7, [sp], #4
 800179a:	4770      	bx	lr

0800179c <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 800179c:	b480      	push	{r7}
 800179e:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 80017a0:	bf00      	nop
 80017a2:	46bd      	mov	sp, r7
 80017a4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80017a8:	4770      	bx	lr

080017aa <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 80017aa:	b580      	push	{r7, lr}
 80017ac:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 80017ae:	f000 f897 	bl	80018e0 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 80017b2:	bf00      	nop
 80017b4:	bd80      	pop	{r7, pc}

080017b6 <initialise_monitor_handles>:
char **environ = __env;


/* Functions */
void initialise_monitor_handles()
{
 80017b6:	b480      	push	{r7}
 80017b8:	af00      	add	r7, sp, #0
}
 80017ba:	bf00      	nop
 80017bc:	46bd      	mov	sp, r7
 80017be:	f85d 7b04 	ldr.w	r7, [sp], #4
 80017c2:	4770      	bx	lr

080017c4 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 80017c4:	b480      	push	{r7}
 80017c6:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 80017c8:	4b06      	ldr	r3, [pc, #24]	@ (80017e4 <SystemInit+0x20>)
 80017ca:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80017ce:	4a05      	ldr	r2, [pc, #20]	@ (80017e4 <SystemInit+0x20>)
 80017d0:	f443 0370 	orr.w	r3, r3, #15728640	@ 0xf00000
 80017d4:	f8c2 3088 	str.w	r3, [r2, #136]	@ 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 80017d8:	bf00      	nop
 80017da:	46bd      	mov	sp, r7
 80017dc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80017e0:	4770      	bx	lr
 80017e2:	bf00      	nop
 80017e4:	e000ed00 	.word	0xe000ed00

080017e8 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler: 
  ldr   sp, =_estack       /* set stack pointer */
 80017e8:	f8df d034 	ldr.w	sp, [pc, #52]	@ 8001820 <LoopFillZerobss+0xe>

/* Call the clock system initialization function.*/
  bl  SystemInit   
 80017ec:	f7ff ffea 	bl	80017c4 <SystemInit>
 
/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 80017f0:	480c      	ldr	r0, [pc, #48]	@ (8001824 <LoopFillZerobss+0x12>)
  ldr r1, =_edata
 80017f2:	490d      	ldr	r1, [pc, #52]	@ (8001828 <LoopFillZerobss+0x16>)
  ldr r2, =_sidata
 80017f4:	4a0d      	ldr	r2, [pc, #52]	@ (800182c <LoopFillZerobss+0x1a>)
  movs r3, #0
 80017f6:	2300      	movs	r3, #0
  b LoopCopyDataInit
 80017f8:	e002      	b.n	8001800 <LoopCopyDataInit>

080017fa <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 80017fa:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 80017fc:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 80017fe:	3304      	adds	r3, #4

08001800 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8001800:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8001802:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8001804:	d3f9      	bcc.n	80017fa <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8001806:	4a0a      	ldr	r2, [pc, #40]	@ (8001830 <LoopFillZerobss+0x1e>)
  ldr r4, =_ebss
 8001808:	4c0a      	ldr	r4, [pc, #40]	@ (8001834 <LoopFillZerobss+0x22>)
  movs r3, #0
 800180a:	2300      	movs	r3, #0
  b LoopFillZerobss
 800180c:	e001      	b.n	8001812 <LoopFillZerobss>

0800180e <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 800180e:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8001810:	3204      	adds	r2, #4

08001812 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8001812:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8001814:	d3fb      	bcc.n	800180e <FillZerobss>
  
/* Call static constructors */
    bl __libc_init_array
 8001816:	f001 ff2f 	bl	8003678 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 800181a:	f7ff f9a6 	bl	8000b6a <main>
  bx  lr    
 800181e:	4770      	bx	lr
  ldr   sp, =_estack       /* set stack pointer */
 8001820:	20030000 	.word	0x20030000
  ldr r0, =_sdata
 8001824:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8001828:	20000010 	.word	0x20000010
  ldr r2, =_sidata
 800182c:	080036e8 	.word	0x080036e8
  ldr r2, =_sbss
 8001830:	20000010 	.word	0x20000010
  ldr r4, =_ebss
 8001834:	20025b58 	.word	0x20025b58

08001838 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8001838:	e7fe      	b.n	8001838 <ADC_IRQHandler>
	...

0800183c <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 800183c:	b580      	push	{r7, lr}
 800183e:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 8001840:	4b0e      	ldr	r3, [pc, #56]	@ (800187c <HAL_Init+0x40>)
 8001842:	681b      	ldr	r3, [r3, #0]
 8001844:	4a0d      	ldr	r2, [pc, #52]	@ (800187c <HAL_Init+0x40>)
 8001846:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 800184a:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 800184c:	4b0b      	ldr	r3, [pc, #44]	@ (800187c <HAL_Init+0x40>)
 800184e:	681b      	ldr	r3, [r3, #0]
 8001850:	4a0a      	ldr	r2, [pc, #40]	@ (800187c <HAL_Init+0x40>)
 8001852:	f443 6380 	orr.w	r3, r3, #1024	@ 0x400
 8001856:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8001858:	4b08      	ldr	r3, [pc, #32]	@ (800187c <HAL_Init+0x40>)
 800185a:	681b      	ldr	r3, [r3, #0]
 800185c:	4a07      	ldr	r2, [pc, #28]	@ (800187c <HAL_Init+0x40>)
 800185e:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8001862:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8001864:	2003      	movs	r0, #3
 8001866:	f000 f931 	bl	8001acc <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 800186a:	2000      	movs	r0, #0
 800186c:	f000 f808 	bl	8001880 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8001870:	f7ff fcf8 	bl	8001264 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8001874:	2300      	movs	r3, #0
}
 8001876:	4618      	mov	r0, r3
 8001878:	bd80      	pop	{r7, pc}
 800187a:	bf00      	nop
 800187c:	40023c00 	.word	0x40023c00

08001880 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8001880:	b580      	push	{r7, lr}
 8001882:	b082      	sub	sp, #8
 8001884:	af00      	add	r7, sp, #0
 8001886:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8001888:	4b12      	ldr	r3, [pc, #72]	@ (80018d4 <HAL_InitTick+0x54>)
 800188a:	681a      	ldr	r2, [r3, #0]
 800188c:	4b12      	ldr	r3, [pc, #72]	@ (80018d8 <HAL_InitTick+0x58>)
 800188e:	781b      	ldrb	r3, [r3, #0]
 8001890:	4619      	mov	r1, r3
 8001892:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 8001896:	fbb3 f3f1 	udiv	r3, r3, r1
 800189a:	fbb2 f3f3 	udiv	r3, r2, r3
 800189e:	4618      	mov	r0, r3
 80018a0:	f000 f93b 	bl	8001b1a <HAL_SYSTICK_Config>
 80018a4:	4603      	mov	r3, r0
 80018a6:	2b00      	cmp	r3, #0
 80018a8:	d001      	beq.n	80018ae <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 80018aa:	2301      	movs	r3, #1
 80018ac:	e00e      	b.n	80018cc <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 80018ae:	687b      	ldr	r3, [r7, #4]
 80018b0:	2b0f      	cmp	r3, #15
 80018b2:	d80a      	bhi.n	80018ca <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 80018b4:	2200      	movs	r2, #0
 80018b6:	6879      	ldr	r1, [r7, #4]
 80018b8:	f04f 30ff 	mov.w	r0, #4294967295
 80018bc:	f000 f911 	bl	8001ae2 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 80018c0:	4a06      	ldr	r2, [pc, #24]	@ (80018dc <HAL_InitTick+0x5c>)
 80018c2:	687b      	ldr	r3, [r7, #4]
 80018c4:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 80018c6:	2300      	movs	r3, #0
 80018c8:	e000      	b.n	80018cc <HAL_InitTick+0x4c>
    return HAL_ERROR;
 80018ca:	2301      	movs	r3, #1
}
 80018cc:	4618      	mov	r0, r3
 80018ce:	3708      	adds	r7, #8
 80018d0:	46bd      	mov	sp, r7
 80018d2:	bd80      	pop	{r7, pc}
 80018d4:	20000004 	.word	0x20000004
 80018d8:	2000000c 	.word	0x2000000c
 80018dc:	20000008 	.word	0x20000008

080018e0 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 80018e0:	b480      	push	{r7}
 80018e2:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 80018e4:	4b06      	ldr	r3, [pc, #24]	@ (8001900 <HAL_IncTick+0x20>)
 80018e6:	781b      	ldrb	r3, [r3, #0]
 80018e8:	461a      	mov	r2, r3
 80018ea:	4b06      	ldr	r3, [pc, #24]	@ (8001904 <HAL_IncTick+0x24>)
 80018ec:	681b      	ldr	r3, [r3, #0]
 80018ee:	4413      	add	r3, r2
 80018f0:	4a04      	ldr	r2, [pc, #16]	@ (8001904 <HAL_IncTick+0x24>)
 80018f2:	6013      	str	r3, [r2, #0]
}
 80018f4:	bf00      	nop
 80018f6:	46bd      	mov	sp, r7
 80018f8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80018fc:	4770      	bx	lr
 80018fe:	bf00      	nop
 8001900:	2000000c 	.word	0x2000000c
 8001904:	20025b54 	.word	0x20025b54

08001908 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8001908:	b480      	push	{r7}
 800190a:	af00      	add	r7, sp, #0
  return uwTick;
 800190c:	4b03      	ldr	r3, [pc, #12]	@ (800191c <HAL_GetTick+0x14>)
 800190e:	681b      	ldr	r3, [r3, #0]
}
 8001910:	4618      	mov	r0, r3
 8001912:	46bd      	mov	sp, r7
 8001914:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001918:	4770      	bx	lr
 800191a:	bf00      	nop
 800191c:	20025b54 	.word	0x20025b54

08001920 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8001920:	b580      	push	{r7, lr}
 8001922:	b084      	sub	sp, #16
 8001924:	af00      	add	r7, sp, #0
 8001926:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8001928:	f7ff ffee 	bl	8001908 <HAL_GetTick>
 800192c:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 800192e:	687b      	ldr	r3, [r7, #4]
 8001930:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8001932:	68fb      	ldr	r3, [r7, #12]
 8001934:	f1b3 3fff 	cmp.w	r3, #4294967295
 8001938:	d005      	beq.n	8001946 <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 800193a:	4b0a      	ldr	r3, [pc, #40]	@ (8001964 <HAL_Delay+0x44>)
 800193c:	781b      	ldrb	r3, [r3, #0]
 800193e:	461a      	mov	r2, r3
 8001940:	68fb      	ldr	r3, [r7, #12]
 8001942:	4413      	add	r3, r2
 8001944:	60fb      	str	r3, [r7, #12]
  }

  while((HAL_GetTick() - tickstart) < wait)
 8001946:	bf00      	nop
 8001948:	f7ff ffde 	bl	8001908 <HAL_GetTick>
 800194c:	4602      	mov	r2, r0
 800194e:	68bb      	ldr	r3, [r7, #8]
 8001950:	1ad3      	subs	r3, r2, r3
 8001952:	68fa      	ldr	r2, [r7, #12]
 8001954:	429a      	cmp	r2, r3
 8001956:	d8f7      	bhi.n	8001948 <HAL_Delay+0x28>
  {
  }
}
 8001958:	bf00      	nop
 800195a:	bf00      	nop
 800195c:	3710      	adds	r7, #16
 800195e:	46bd      	mov	sp, r7
 8001960:	bd80      	pop	{r7, pc}
 8001962:	bf00      	nop
 8001964:	2000000c 	.word	0x2000000c

08001968 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001968:	b480      	push	{r7}
 800196a:	b085      	sub	sp, #20
 800196c:	af00      	add	r7, sp, #0
 800196e:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8001970:	687b      	ldr	r3, [r7, #4]
 8001972:	f003 0307 	and.w	r3, r3, #7
 8001976:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8001978:	4b0c      	ldr	r3, [pc, #48]	@ (80019ac <__NVIC_SetPriorityGrouping+0x44>)
 800197a:	68db      	ldr	r3, [r3, #12]
 800197c:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 800197e:	68ba      	ldr	r2, [r7, #8]
 8001980:	f64f 03ff 	movw	r3, #63743	@ 0xf8ff
 8001984:	4013      	ands	r3, r2
 8001986:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8001988:	68fb      	ldr	r3, [r7, #12]
 800198a:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 800198c:	68bb      	ldr	r3, [r7, #8]
 800198e:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8001990:	f043 63bf 	orr.w	r3, r3, #100139008	@ 0x5f80000
 8001994:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8001998:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 800199a:	4a04      	ldr	r2, [pc, #16]	@ (80019ac <__NVIC_SetPriorityGrouping+0x44>)
 800199c:	68bb      	ldr	r3, [r7, #8]
 800199e:	60d3      	str	r3, [r2, #12]
}
 80019a0:	bf00      	nop
 80019a2:	3714      	adds	r7, #20
 80019a4:	46bd      	mov	sp, r7
 80019a6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80019aa:	4770      	bx	lr
 80019ac:	e000ed00 	.word	0xe000ed00

080019b0 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 80019b0:	b480      	push	{r7}
 80019b2:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 80019b4:	4b04      	ldr	r3, [pc, #16]	@ (80019c8 <__NVIC_GetPriorityGrouping+0x18>)
 80019b6:	68db      	ldr	r3, [r3, #12]
 80019b8:	0a1b      	lsrs	r3, r3, #8
 80019ba:	f003 0307 	and.w	r3, r3, #7
}
 80019be:	4618      	mov	r0, r3
 80019c0:	46bd      	mov	sp, r7
 80019c2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80019c6:	4770      	bx	lr
 80019c8:	e000ed00 	.word	0xe000ed00

080019cc <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 80019cc:	b480      	push	{r7}
 80019ce:	b083      	sub	sp, #12
 80019d0:	af00      	add	r7, sp, #0
 80019d2:	4603      	mov	r3, r0
 80019d4:	6039      	str	r1, [r7, #0]
 80019d6:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80019d8:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80019dc:	2b00      	cmp	r3, #0
 80019de:	db0a      	blt.n	80019f6 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80019e0:	683b      	ldr	r3, [r7, #0]
 80019e2:	b2da      	uxtb	r2, r3
 80019e4:	490c      	ldr	r1, [pc, #48]	@ (8001a18 <__NVIC_SetPriority+0x4c>)
 80019e6:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80019ea:	0112      	lsls	r2, r2, #4
 80019ec:	b2d2      	uxtb	r2, r2
 80019ee:	440b      	add	r3, r1
 80019f0:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 80019f4:	e00a      	b.n	8001a0c <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80019f6:	683b      	ldr	r3, [r7, #0]
 80019f8:	b2da      	uxtb	r2, r3
 80019fa:	4908      	ldr	r1, [pc, #32]	@ (8001a1c <__NVIC_SetPriority+0x50>)
 80019fc:	79fb      	ldrb	r3, [r7, #7]
 80019fe:	f003 030f 	and.w	r3, r3, #15
 8001a02:	3b04      	subs	r3, #4
 8001a04:	0112      	lsls	r2, r2, #4
 8001a06:	b2d2      	uxtb	r2, r2
 8001a08:	440b      	add	r3, r1
 8001a0a:	761a      	strb	r2, [r3, #24]
}
 8001a0c:	bf00      	nop
 8001a0e:	370c      	adds	r7, #12
 8001a10:	46bd      	mov	sp, r7
 8001a12:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001a16:	4770      	bx	lr
 8001a18:	e000e100 	.word	0xe000e100
 8001a1c:	e000ed00 	.word	0xe000ed00

08001a20 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8001a20:	b480      	push	{r7}
 8001a22:	b089      	sub	sp, #36	@ 0x24
 8001a24:	af00      	add	r7, sp, #0
 8001a26:	60f8      	str	r0, [r7, #12]
 8001a28:	60b9      	str	r1, [r7, #8]
 8001a2a:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8001a2c:	68fb      	ldr	r3, [r7, #12]
 8001a2e:	f003 0307 	and.w	r3, r3, #7
 8001a32:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8001a34:	69fb      	ldr	r3, [r7, #28]
 8001a36:	f1c3 0307 	rsb	r3, r3, #7
 8001a3a:	2b04      	cmp	r3, #4
 8001a3c:	bf28      	it	cs
 8001a3e:	2304      	movcs	r3, #4
 8001a40:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8001a42:	69fb      	ldr	r3, [r7, #28]
 8001a44:	3304      	adds	r3, #4
 8001a46:	2b06      	cmp	r3, #6
 8001a48:	d902      	bls.n	8001a50 <NVIC_EncodePriority+0x30>
 8001a4a:	69fb      	ldr	r3, [r7, #28]
 8001a4c:	3b03      	subs	r3, #3
 8001a4e:	e000      	b.n	8001a52 <NVIC_EncodePriority+0x32>
 8001a50:	2300      	movs	r3, #0
 8001a52:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001a54:	f04f 32ff 	mov.w	r2, #4294967295
 8001a58:	69bb      	ldr	r3, [r7, #24]
 8001a5a:	fa02 f303 	lsl.w	r3, r2, r3
 8001a5e:	43da      	mvns	r2, r3
 8001a60:	68bb      	ldr	r3, [r7, #8]
 8001a62:	401a      	ands	r2, r3
 8001a64:	697b      	ldr	r3, [r7, #20]
 8001a66:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8001a68:	f04f 31ff 	mov.w	r1, #4294967295
 8001a6c:	697b      	ldr	r3, [r7, #20]
 8001a6e:	fa01 f303 	lsl.w	r3, r1, r3
 8001a72:	43d9      	mvns	r1, r3
 8001a74:	687b      	ldr	r3, [r7, #4]
 8001a76:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001a78:	4313      	orrs	r3, r2
         );
}
 8001a7a:	4618      	mov	r0, r3
 8001a7c:	3724      	adds	r7, #36	@ 0x24
 8001a7e:	46bd      	mov	sp, r7
 8001a80:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001a84:	4770      	bx	lr
	...

08001a88 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8001a88:	b580      	push	{r7, lr}
 8001a8a:	b082      	sub	sp, #8
 8001a8c:	af00      	add	r7, sp, #0
 8001a8e:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8001a90:	687b      	ldr	r3, [r7, #4]
 8001a92:	3b01      	subs	r3, #1
 8001a94:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 8001a98:	d301      	bcc.n	8001a9e <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8001a9a:	2301      	movs	r3, #1
 8001a9c:	e00f      	b.n	8001abe <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8001a9e:	4a0a      	ldr	r2, [pc, #40]	@ (8001ac8 <SysTick_Config+0x40>)
 8001aa0:	687b      	ldr	r3, [r7, #4]
 8001aa2:	3b01      	subs	r3, #1
 8001aa4:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8001aa6:	210f      	movs	r1, #15
 8001aa8:	f04f 30ff 	mov.w	r0, #4294967295
 8001aac:	f7ff ff8e 	bl	80019cc <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8001ab0:	4b05      	ldr	r3, [pc, #20]	@ (8001ac8 <SysTick_Config+0x40>)
 8001ab2:	2200      	movs	r2, #0
 8001ab4:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8001ab6:	4b04      	ldr	r3, [pc, #16]	@ (8001ac8 <SysTick_Config+0x40>)
 8001ab8:	2207      	movs	r2, #7
 8001aba:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8001abc:	2300      	movs	r3, #0
}
 8001abe:	4618      	mov	r0, r3
 8001ac0:	3708      	adds	r7, #8
 8001ac2:	46bd      	mov	sp, r7
 8001ac4:	bd80      	pop	{r7, pc}
 8001ac6:	bf00      	nop
 8001ac8:	e000e010 	.word	0xe000e010

08001acc <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001acc:	b580      	push	{r7, lr}
 8001ace:	b082      	sub	sp, #8
 8001ad0:	af00      	add	r7, sp, #0
 8001ad2:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8001ad4:	6878      	ldr	r0, [r7, #4]
 8001ad6:	f7ff ff47 	bl	8001968 <__NVIC_SetPriorityGrouping>
}
 8001ada:	bf00      	nop
 8001adc:	3708      	adds	r7, #8
 8001ade:	46bd      	mov	sp, r7
 8001ae0:	bd80      	pop	{r7, pc}

08001ae2 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8001ae2:	b580      	push	{r7, lr}
 8001ae4:	b086      	sub	sp, #24
 8001ae6:	af00      	add	r7, sp, #0
 8001ae8:	4603      	mov	r3, r0
 8001aea:	60b9      	str	r1, [r7, #8]
 8001aec:	607a      	str	r2, [r7, #4]
 8001aee:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8001af0:	2300      	movs	r3, #0
 8001af2:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8001af4:	f7ff ff5c 	bl	80019b0 <__NVIC_GetPriorityGrouping>
 8001af8:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8001afa:	687a      	ldr	r2, [r7, #4]
 8001afc:	68b9      	ldr	r1, [r7, #8]
 8001afe:	6978      	ldr	r0, [r7, #20]
 8001b00:	f7ff ff8e 	bl	8001a20 <NVIC_EncodePriority>
 8001b04:	4602      	mov	r2, r0
 8001b06:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8001b0a:	4611      	mov	r1, r2
 8001b0c:	4618      	mov	r0, r3
 8001b0e:	f7ff ff5d 	bl	80019cc <__NVIC_SetPriority>
}
 8001b12:	bf00      	nop
 8001b14:	3718      	adds	r7, #24
 8001b16:	46bd      	mov	sp, r7
 8001b18:	bd80      	pop	{r7, pc}

08001b1a <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8001b1a:	b580      	push	{r7, lr}
 8001b1c:	b082      	sub	sp, #8
 8001b1e:	af00      	add	r7, sp, #0
 8001b20:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8001b22:	6878      	ldr	r0, [r7, #4]
 8001b24:	f7ff ffb0 	bl	8001a88 <SysTick_Config>
 8001b28:	4603      	mov	r3, r0
}
 8001b2a:	4618      	mov	r0, r3
 8001b2c:	3708      	adds	r7, #8
 8001b2e:	46bd      	mov	sp, r7
 8001b30:	bd80      	pop	{r7, pc}
	...

08001b34 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8001b34:	b480      	push	{r7}
 8001b36:	b089      	sub	sp, #36	@ 0x24
 8001b38:	af00      	add	r7, sp, #0
 8001b3a:	6078      	str	r0, [r7, #4]
 8001b3c:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 8001b3e:	2300      	movs	r3, #0
 8001b40:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 8001b42:	2300      	movs	r3, #0
 8001b44:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 8001b46:	2300      	movs	r3, #0
 8001b48:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 8001b4a:	2300      	movs	r3, #0
 8001b4c:	61fb      	str	r3, [r7, #28]
 8001b4e:	e177      	b.n	8001e40 <HAL_GPIO_Init+0x30c>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 8001b50:	2201      	movs	r2, #1
 8001b52:	69fb      	ldr	r3, [r7, #28]
 8001b54:	fa02 f303 	lsl.w	r3, r2, r3
 8001b58:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8001b5a:	683b      	ldr	r3, [r7, #0]
 8001b5c:	681b      	ldr	r3, [r3, #0]
 8001b5e:	697a      	ldr	r2, [r7, #20]
 8001b60:	4013      	ands	r3, r2
 8001b62:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 8001b64:	693a      	ldr	r2, [r7, #16]
 8001b66:	697b      	ldr	r3, [r7, #20]
 8001b68:	429a      	cmp	r2, r3
 8001b6a:	f040 8166 	bne.w	8001e3a <HAL_GPIO_Init+0x306>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8001b6e:	683b      	ldr	r3, [r7, #0]
 8001b70:	685b      	ldr	r3, [r3, #4]
 8001b72:	f003 0303 	and.w	r3, r3, #3
 8001b76:	2b01      	cmp	r3, #1
 8001b78:	d005      	beq.n	8001b86 <HAL_GPIO_Init+0x52>
          (GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8001b7a:	683b      	ldr	r3, [r7, #0]
 8001b7c:	685b      	ldr	r3, [r3, #4]
 8001b7e:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8001b82:	2b02      	cmp	r3, #2
 8001b84:	d130      	bne.n	8001be8 <HAL_GPIO_Init+0xb4>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 8001b86:	687b      	ldr	r3, [r7, #4]
 8001b88:	689b      	ldr	r3, [r3, #8]
 8001b8a:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 8001b8c:	69fb      	ldr	r3, [r7, #28]
 8001b8e:	005b      	lsls	r3, r3, #1
 8001b90:	2203      	movs	r2, #3
 8001b92:	fa02 f303 	lsl.w	r3, r2, r3
 8001b96:	43db      	mvns	r3, r3
 8001b98:	69ba      	ldr	r2, [r7, #24]
 8001b9a:	4013      	ands	r3, r2
 8001b9c:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 8001b9e:	683b      	ldr	r3, [r7, #0]
 8001ba0:	68da      	ldr	r2, [r3, #12]
 8001ba2:	69fb      	ldr	r3, [r7, #28]
 8001ba4:	005b      	lsls	r3, r3, #1
 8001ba6:	fa02 f303 	lsl.w	r3, r2, r3
 8001baa:	69ba      	ldr	r2, [r7, #24]
 8001bac:	4313      	orrs	r3, r2
 8001bae:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 8001bb0:	687b      	ldr	r3, [r7, #4]
 8001bb2:	69ba      	ldr	r2, [r7, #24]
 8001bb4:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8001bb6:	687b      	ldr	r3, [r7, #4]
 8001bb8:	685b      	ldr	r3, [r3, #4]
 8001bba:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8001bbc:	2201      	movs	r2, #1
 8001bbe:	69fb      	ldr	r3, [r7, #28]
 8001bc0:	fa02 f303 	lsl.w	r3, r2, r3
 8001bc4:	43db      	mvns	r3, r3
 8001bc6:	69ba      	ldr	r2, [r7, #24]
 8001bc8:	4013      	ands	r3, r2
 8001bca:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8001bcc:	683b      	ldr	r3, [r7, #0]
 8001bce:	685b      	ldr	r3, [r3, #4]
 8001bd0:	091b      	lsrs	r3, r3, #4
 8001bd2:	f003 0201 	and.w	r2, r3, #1
 8001bd6:	69fb      	ldr	r3, [r7, #28]
 8001bd8:	fa02 f303 	lsl.w	r3, r2, r3
 8001bdc:	69ba      	ldr	r2, [r7, #24]
 8001bde:	4313      	orrs	r3, r2
 8001be0:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 8001be2:	687b      	ldr	r3, [r7, #4]
 8001be4:	69ba      	ldr	r2, [r7, #24]
 8001be6:	605a      	str	r2, [r3, #4]
       }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8001be8:	683b      	ldr	r3, [r7, #0]
 8001bea:	685b      	ldr	r3, [r3, #4]
 8001bec:	f003 0303 	and.w	r3, r3, #3
 8001bf0:	2b03      	cmp	r3, #3
 8001bf2:	d017      	beq.n	8001c24 <HAL_GPIO_Init+0xf0>
      {
        /* Check the parameters */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));
        
        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 8001bf4:	687b      	ldr	r3, [r7, #4]
 8001bf6:	68db      	ldr	r3, [r3, #12]
 8001bf8:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 8001bfa:	69fb      	ldr	r3, [r7, #28]
 8001bfc:	005b      	lsls	r3, r3, #1
 8001bfe:	2203      	movs	r2, #3
 8001c00:	fa02 f303 	lsl.w	r3, r2, r3
 8001c04:	43db      	mvns	r3, r3
 8001c06:	69ba      	ldr	r2, [r7, #24]
 8001c08:	4013      	ands	r3, r2
 8001c0a:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 8001c0c:	683b      	ldr	r3, [r7, #0]
 8001c0e:	689a      	ldr	r2, [r3, #8]
 8001c10:	69fb      	ldr	r3, [r7, #28]
 8001c12:	005b      	lsls	r3, r3, #1
 8001c14:	fa02 f303 	lsl.w	r3, r2, r3
 8001c18:	69ba      	ldr	r2, [r7, #24]
 8001c1a:	4313      	orrs	r3, r2
 8001c1c:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 8001c1e:	687b      	ldr	r3, [r7, #4]
 8001c20:	69ba      	ldr	r2, [r7, #24]
 8001c22:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8001c24:	683b      	ldr	r3, [r7, #0]
 8001c26:	685b      	ldr	r3, [r3, #4]
 8001c28:	f003 0303 	and.w	r3, r3, #3
 8001c2c:	2b02      	cmp	r3, #2
 8001c2e:	d123      	bne.n	8001c78 <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8001c30:	69fb      	ldr	r3, [r7, #28]
 8001c32:	08da      	lsrs	r2, r3, #3
 8001c34:	687b      	ldr	r3, [r7, #4]
 8001c36:	3208      	adds	r2, #8
 8001c38:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8001c3c:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 8001c3e:	69fb      	ldr	r3, [r7, #28]
 8001c40:	f003 0307 	and.w	r3, r3, #7
 8001c44:	009b      	lsls	r3, r3, #2
 8001c46:	220f      	movs	r2, #15
 8001c48:	fa02 f303 	lsl.w	r3, r2, r3
 8001c4c:	43db      	mvns	r3, r3
 8001c4e:	69ba      	ldr	r2, [r7, #24]
 8001c50:	4013      	ands	r3, r2
 8001c52:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 8001c54:	683b      	ldr	r3, [r7, #0]
 8001c56:	691a      	ldr	r2, [r3, #16]
 8001c58:	69fb      	ldr	r3, [r7, #28]
 8001c5a:	f003 0307 	and.w	r3, r3, #7
 8001c5e:	009b      	lsls	r3, r3, #2
 8001c60:	fa02 f303 	lsl.w	r3, r2, r3
 8001c64:	69ba      	ldr	r2, [r7, #24]
 8001c66:	4313      	orrs	r3, r2
 8001c68:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 8001c6a:	69fb      	ldr	r3, [r7, #28]
 8001c6c:	08da      	lsrs	r2, r3, #3
 8001c6e:	687b      	ldr	r3, [r7, #4]
 8001c70:	3208      	adds	r2, #8
 8001c72:	69b9      	ldr	r1, [r7, #24]
 8001c74:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8001c78:	687b      	ldr	r3, [r7, #4]
 8001c7a:	681b      	ldr	r3, [r3, #0]
 8001c7c:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 8001c7e:	69fb      	ldr	r3, [r7, #28]
 8001c80:	005b      	lsls	r3, r3, #1
 8001c82:	2203      	movs	r2, #3
 8001c84:	fa02 f303 	lsl.w	r3, r2, r3
 8001c88:	43db      	mvns	r3, r3
 8001c8a:	69ba      	ldr	r2, [r7, #24]
 8001c8c:	4013      	ands	r3, r2
 8001c8e:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8001c90:	683b      	ldr	r3, [r7, #0]
 8001c92:	685b      	ldr	r3, [r3, #4]
 8001c94:	f003 0203 	and.w	r2, r3, #3
 8001c98:	69fb      	ldr	r3, [r7, #28]
 8001c9a:	005b      	lsls	r3, r3, #1
 8001c9c:	fa02 f303 	lsl.w	r3, r2, r3
 8001ca0:	69ba      	ldr	r2, [r7, #24]
 8001ca2:	4313      	orrs	r3, r2
 8001ca4:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 8001ca6:	687b      	ldr	r3, [r7, #4]
 8001ca8:	69ba      	ldr	r2, [r7, #24]
 8001caa:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 8001cac:	683b      	ldr	r3, [r7, #0]
 8001cae:	685b      	ldr	r3, [r3, #4]
 8001cb0:	f403 3340 	and.w	r3, r3, #196608	@ 0x30000
 8001cb4:	2b00      	cmp	r3, #0
 8001cb6:	f000 80c0 	beq.w	8001e3a <HAL_GPIO_Init+0x306>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8001cba:	2300      	movs	r3, #0
 8001cbc:	60fb      	str	r3, [r7, #12]
 8001cbe:	4b66      	ldr	r3, [pc, #408]	@ (8001e58 <HAL_GPIO_Init+0x324>)
 8001cc0:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8001cc2:	4a65      	ldr	r2, [pc, #404]	@ (8001e58 <HAL_GPIO_Init+0x324>)
 8001cc4:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 8001cc8:	6453      	str	r3, [r2, #68]	@ 0x44
 8001cca:	4b63      	ldr	r3, [pc, #396]	@ (8001e58 <HAL_GPIO_Init+0x324>)
 8001ccc:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8001cce:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8001cd2:	60fb      	str	r3, [r7, #12]
 8001cd4:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 8001cd6:	4a61      	ldr	r2, [pc, #388]	@ (8001e5c <HAL_GPIO_Init+0x328>)
 8001cd8:	69fb      	ldr	r3, [r7, #28]
 8001cda:	089b      	lsrs	r3, r3, #2
 8001cdc:	3302      	adds	r3, #2
 8001cde:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8001ce2:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 8001ce4:	69fb      	ldr	r3, [r7, #28]
 8001ce6:	f003 0303 	and.w	r3, r3, #3
 8001cea:	009b      	lsls	r3, r3, #2
 8001cec:	220f      	movs	r2, #15
 8001cee:	fa02 f303 	lsl.w	r3, r2, r3
 8001cf2:	43db      	mvns	r3, r3
 8001cf4:	69ba      	ldr	r2, [r7, #24]
 8001cf6:	4013      	ands	r3, r2
 8001cf8:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 8001cfa:	687b      	ldr	r3, [r7, #4]
 8001cfc:	4a58      	ldr	r2, [pc, #352]	@ (8001e60 <HAL_GPIO_Init+0x32c>)
 8001cfe:	4293      	cmp	r3, r2
 8001d00:	d037      	beq.n	8001d72 <HAL_GPIO_Init+0x23e>
 8001d02:	687b      	ldr	r3, [r7, #4]
 8001d04:	4a57      	ldr	r2, [pc, #348]	@ (8001e64 <HAL_GPIO_Init+0x330>)
 8001d06:	4293      	cmp	r3, r2
 8001d08:	d031      	beq.n	8001d6e <HAL_GPIO_Init+0x23a>
 8001d0a:	687b      	ldr	r3, [r7, #4]
 8001d0c:	4a56      	ldr	r2, [pc, #344]	@ (8001e68 <HAL_GPIO_Init+0x334>)
 8001d0e:	4293      	cmp	r3, r2
 8001d10:	d02b      	beq.n	8001d6a <HAL_GPIO_Init+0x236>
 8001d12:	687b      	ldr	r3, [r7, #4]
 8001d14:	4a55      	ldr	r2, [pc, #340]	@ (8001e6c <HAL_GPIO_Init+0x338>)
 8001d16:	4293      	cmp	r3, r2
 8001d18:	d025      	beq.n	8001d66 <HAL_GPIO_Init+0x232>
 8001d1a:	687b      	ldr	r3, [r7, #4]
 8001d1c:	4a54      	ldr	r2, [pc, #336]	@ (8001e70 <HAL_GPIO_Init+0x33c>)
 8001d1e:	4293      	cmp	r3, r2
 8001d20:	d01f      	beq.n	8001d62 <HAL_GPIO_Init+0x22e>
 8001d22:	687b      	ldr	r3, [r7, #4]
 8001d24:	4a53      	ldr	r2, [pc, #332]	@ (8001e74 <HAL_GPIO_Init+0x340>)
 8001d26:	4293      	cmp	r3, r2
 8001d28:	d019      	beq.n	8001d5e <HAL_GPIO_Init+0x22a>
 8001d2a:	687b      	ldr	r3, [r7, #4]
 8001d2c:	4a52      	ldr	r2, [pc, #328]	@ (8001e78 <HAL_GPIO_Init+0x344>)
 8001d2e:	4293      	cmp	r3, r2
 8001d30:	d013      	beq.n	8001d5a <HAL_GPIO_Init+0x226>
 8001d32:	687b      	ldr	r3, [r7, #4]
 8001d34:	4a51      	ldr	r2, [pc, #324]	@ (8001e7c <HAL_GPIO_Init+0x348>)
 8001d36:	4293      	cmp	r3, r2
 8001d38:	d00d      	beq.n	8001d56 <HAL_GPIO_Init+0x222>
 8001d3a:	687b      	ldr	r3, [r7, #4]
 8001d3c:	4a50      	ldr	r2, [pc, #320]	@ (8001e80 <HAL_GPIO_Init+0x34c>)
 8001d3e:	4293      	cmp	r3, r2
 8001d40:	d007      	beq.n	8001d52 <HAL_GPIO_Init+0x21e>
 8001d42:	687b      	ldr	r3, [r7, #4]
 8001d44:	4a4f      	ldr	r2, [pc, #316]	@ (8001e84 <HAL_GPIO_Init+0x350>)
 8001d46:	4293      	cmp	r3, r2
 8001d48:	d101      	bne.n	8001d4e <HAL_GPIO_Init+0x21a>
 8001d4a:	2309      	movs	r3, #9
 8001d4c:	e012      	b.n	8001d74 <HAL_GPIO_Init+0x240>
 8001d4e:	230a      	movs	r3, #10
 8001d50:	e010      	b.n	8001d74 <HAL_GPIO_Init+0x240>
 8001d52:	2308      	movs	r3, #8
 8001d54:	e00e      	b.n	8001d74 <HAL_GPIO_Init+0x240>
 8001d56:	2307      	movs	r3, #7
 8001d58:	e00c      	b.n	8001d74 <HAL_GPIO_Init+0x240>
 8001d5a:	2306      	movs	r3, #6
 8001d5c:	e00a      	b.n	8001d74 <HAL_GPIO_Init+0x240>
 8001d5e:	2305      	movs	r3, #5
 8001d60:	e008      	b.n	8001d74 <HAL_GPIO_Init+0x240>
 8001d62:	2304      	movs	r3, #4
 8001d64:	e006      	b.n	8001d74 <HAL_GPIO_Init+0x240>
 8001d66:	2303      	movs	r3, #3
 8001d68:	e004      	b.n	8001d74 <HAL_GPIO_Init+0x240>
 8001d6a:	2302      	movs	r3, #2
 8001d6c:	e002      	b.n	8001d74 <HAL_GPIO_Init+0x240>
 8001d6e:	2301      	movs	r3, #1
 8001d70:	e000      	b.n	8001d74 <HAL_GPIO_Init+0x240>
 8001d72:	2300      	movs	r3, #0
 8001d74:	69fa      	ldr	r2, [r7, #28]
 8001d76:	f002 0203 	and.w	r2, r2, #3
 8001d7a:	0092      	lsls	r2, r2, #2
 8001d7c:	4093      	lsls	r3, r2
 8001d7e:	69ba      	ldr	r2, [r7, #24]
 8001d80:	4313      	orrs	r3, r2
 8001d82:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 8001d84:	4935      	ldr	r1, [pc, #212]	@ (8001e5c <HAL_GPIO_Init+0x328>)
 8001d86:	69fb      	ldr	r3, [r7, #28]
 8001d88:	089b      	lsrs	r3, r3, #2
 8001d8a:	3302      	adds	r3, #2
 8001d8c:	69ba      	ldr	r2, [r7, #24]
 8001d8e:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 8001d92:	4b3d      	ldr	r3, [pc, #244]	@ (8001e88 <HAL_GPIO_Init+0x354>)
 8001d94:	689b      	ldr	r3, [r3, #8]
 8001d96:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8001d98:	693b      	ldr	r3, [r7, #16]
 8001d9a:	43db      	mvns	r3, r3
 8001d9c:	69ba      	ldr	r2, [r7, #24]
 8001d9e:	4013      	ands	r3, r2
 8001da0:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 8001da2:	683b      	ldr	r3, [r7, #0]
 8001da4:	685b      	ldr	r3, [r3, #4]
 8001da6:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 8001daa:	2b00      	cmp	r3, #0
 8001dac:	d003      	beq.n	8001db6 <HAL_GPIO_Init+0x282>
        {
          temp |= iocurrent;
 8001dae:	69ba      	ldr	r2, [r7, #24]
 8001db0:	693b      	ldr	r3, [r7, #16]
 8001db2:	4313      	orrs	r3, r2
 8001db4:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 8001db6:	4a34      	ldr	r2, [pc, #208]	@ (8001e88 <HAL_GPIO_Init+0x354>)
 8001db8:	69bb      	ldr	r3, [r7, #24]
 8001dba:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 8001dbc:	4b32      	ldr	r3, [pc, #200]	@ (8001e88 <HAL_GPIO_Init+0x354>)
 8001dbe:	68db      	ldr	r3, [r3, #12]
 8001dc0:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8001dc2:	693b      	ldr	r3, [r7, #16]
 8001dc4:	43db      	mvns	r3, r3
 8001dc6:	69ba      	ldr	r2, [r7, #24]
 8001dc8:	4013      	ands	r3, r2
 8001dca:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 8001dcc:	683b      	ldr	r3, [r7, #0]
 8001dce:	685b      	ldr	r3, [r3, #4]
 8001dd0:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 8001dd4:	2b00      	cmp	r3, #0
 8001dd6:	d003      	beq.n	8001de0 <HAL_GPIO_Init+0x2ac>
        {
          temp |= iocurrent;
 8001dd8:	69ba      	ldr	r2, [r7, #24]
 8001dda:	693b      	ldr	r3, [r7, #16]
 8001ddc:	4313      	orrs	r3, r2
 8001dde:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 8001de0:	4a29      	ldr	r2, [pc, #164]	@ (8001e88 <HAL_GPIO_Init+0x354>)
 8001de2:	69bb      	ldr	r3, [r7, #24]
 8001de4:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR;
 8001de6:	4b28      	ldr	r3, [pc, #160]	@ (8001e88 <HAL_GPIO_Init+0x354>)
 8001de8:	685b      	ldr	r3, [r3, #4]
 8001dea:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8001dec:	693b      	ldr	r3, [r7, #16]
 8001dee:	43db      	mvns	r3, r3
 8001df0:	69ba      	ldr	r2, [r7, #24]
 8001df2:	4013      	ands	r3, r2
 8001df4:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 8001df6:	683b      	ldr	r3, [r7, #0]
 8001df8:	685b      	ldr	r3, [r3, #4]
 8001dfa:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8001dfe:	2b00      	cmp	r3, #0
 8001e00:	d003      	beq.n	8001e0a <HAL_GPIO_Init+0x2d6>
        {
          temp |= iocurrent;
 8001e02:	69ba      	ldr	r2, [r7, #24]
 8001e04:	693b      	ldr	r3, [r7, #16]
 8001e06:	4313      	orrs	r3, r2
 8001e08:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 8001e0a:	4a1f      	ldr	r2, [pc, #124]	@ (8001e88 <HAL_GPIO_Init+0x354>)
 8001e0c:	69bb      	ldr	r3, [r7, #24]
 8001e0e:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8001e10:	4b1d      	ldr	r3, [pc, #116]	@ (8001e88 <HAL_GPIO_Init+0x354>)
 8001e12:	681b      	ldr	r3, [r3, #0]
 8001e14:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8001e16:	693b      	ldr	r3, [r7, #16]
 8001e18:	43db      	mvns	r3, r3
 8001e1a:	69ba      	ldr	r2, [r7, #24]
 8001e1c:	4013      	ands	r3, r2
 8001e1e:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 8001e20:	683b      	ldr	r3, [r7, #0]
 8001e22:	685b      	ldr	r3, [r3, #4]
 8001e24:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8001e28:	2b00      	cmp	r3, #0
 8001e2a:	d003      	beq.n	8001e34 <HAL_GPIO_Init+0x300>
        {
          temp |= iocurrent;
 8001e2c:	69ba      	ldr	r2, [r7, #24]
 8001e2e:	693b      	ldr	r3, [r7, #16]
 8001e30:	4313      	orrs	r3, r2
 8001e32:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 8001e34:	4a14      	ldr	r2, [pc, #80]	@ (8001e88 <HAL_GPIO_Init+0x354>)
 8001e36:	69bb      	ldr	r3, [r7, #24]
 8001e38:	6013      	str	r3, [r2, #0]
  for(position = 0U; position < GPIO_NUMBER; position++)
 8001e3a:	69fb      	ldr	r3, [r7, #28]
 8001e3c:	3301      	adds	r3, #1
 8001e3e:	61fb      	str	r3, [r7, #28]
 8001e40:	69fb      	ldr	r3, [r7, #28]
 8001e42:	2b0f      	cmp	r3, #15
 8001e44:	f67f ae84 	bls.w	8001b50 <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 8001e48:	bf00      	nop
 8001e4a:	bf00      	nop
 8001e4c:	3724      	adds	r7, #36	@ 0x24
 8001e4e:	46bd      	mov	sp, r7
 8001e50:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001e54:	4770      	bx	lr
 8001e56:	bf00      	nop
 8001e58:	40023800 	.word	0x40023800
 8001e5c:	40013800 	.word	0x40013800
 8001e60:	40020000 	.word	0x40020000
 8001e64:	40020400 	.word	0x40020400
 8001e68:	40020800 	.word	0x40020800
 8001e6c:	40020c00 	.word	0x40020c00
 8001e70:	40021000 	.word	0x40021000
 8001e74:	40021400 	.word	0x40021400
 8001e78:	40021800 	.word	0x40021800
 8001e7c:	40021c00 	.word	0x40021c00
 8001e80:	40022000 	.word	0x40022000
 8001e84:	40022400 	.word	0x40022400
 8001e88:	40013c00 	.word	0x40013c00

08001e8c <HAL_GPIO_DeInit>:
  * @param  GPIO_Pin specifies the port bit to be written.
  *          This parameter can be one of GPIO_PIN_x where x can be (0..15).
  * @retval None
  */
void HAL_GPIO_DeInit(GPIO_TypeDef  *GPIOx, uint32_t GPIO_Pin)
{
 8001e8c:	b480      	push	{r7}
 8001e8e:	b087      	sub	sp, #28
 8001e90:	af00      	add	r7, sp, #0
 8001e92:	6078      	str	r0, [r7, #4]
 8001e94:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 8001e96:	2300      	movs	r3, #0
 8001e98:	613b      	str	r3, [r7, #16]
  uint32_t iocurrent = 0x00U;
 8001e9a:	2300      	movs	r3, #0
 8001e9c:	60fb      	str	r3, [r7, #12]
  uint32_t tmp = 0x00U;
 8001e9e:	2300      	movs	r3, #0
 8001ea0:	60bb      	str	r3, [r7, #8]

  /* Check the parameters */
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  
  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 8001ea2:	2300      	movs	r3, #0
 8001ea4:	617b      	str	r3, [r7, #20]
 8001ea6:	e0d9      	b.n	800205c <HAL_GPIO_DeInit+0x1d0>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 8001ea8:	2201      	movs	r2, #1
 8001eaa:	697b      	ldr	r3, [r7, #20]
 8001eac:	fa02 f303 	lsl.w	r3, r2, r3
 8001eb0:	613b      	str	r3, [r7, #16]
    /* Get the current IO position */
    iocurrent = (GPIO_Pin) & ioposition;
 8001eb2:	683a      	ldr	r2, [r7, #0]
 8001eb4:	693b      	ldr	r3, [r7, #16]
 8001eb6:	4013      	ands	r3, r2
 8001eb8:	60fb      	str	r3, [r7, #12]

    if(iocurrent == ioposition)
 8001eba:	68fa      	ldr	r2, [r7, #12]
 8001ebc:	693b      	ldr	r3, [r7, #16]
 8001ebe:	429a      	cmp	r2, r3
 8001ec0:	f040 80c9 	bne.w	8002056 <HAL_GPIO_DeInit+0x1ca>
    {
      /*------------------------- EXTI Mode Configuration --------------------*/
      tmp = SYSCFG->EXTICR[position >> 2U];
 8001ec4:	4a6b      	ldr	r2, [pc, #428]	@ (8002074 <HAL_GPIO_DeInit+0x1e8>)
 8001ec6:	697b      	ldr	r3, [r7, #20]
 8001ec8:	089b      	lsrs	r3, r3, #2
 8001eca:	3302      	adds	r3, #2
 8001ecc:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8001ed0:	60bb      	str	r3, [r7, #8]
      tmp &= (0x0FU << (4U * (position & 0x03U)));
 8001ed2:	697b      	ldr	r3, [r7, #20]
 8001ed4:	f003 0303 	and.w	r3, r3, #3
 8001ed8:	009b      	lsls	r3, r3, #2
 8001eda:	220f      	movs	r2, #15
 8001edc:	fa02 f303 	lsl.w	r3, r2, r3
 8001ee0:	68ba      	ldr	r2, [r7, #8]
 8001ee2:	4013      	ands	r3, r2
 8001ee4:	60bb      	str	r3, [r7, #8]
      if(tmp == ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U))))
 8001ee6:	687b      	ldr	r3, [r7, #4]
 8001ee8:	4a63      	ldr	r2, [pc, #396]	@ (8002078 <HAL_GPIO_DeInit+0x1ec>)
 8001eea:	4293      	cmp	r3, r2
 8001eec:	d037      	beq.n	8001f5e <HAL_GPIO_DeInit+0xd2>
 8001eee:	687b      	ldr	r3, [r7, #4]
 8001ef0:	4a62      	ldr	r2, [pc, #392]	@ (800207c <HAL_GPIO_DeInit+0x1f0>)
 8001ef2:	4293      	cmp	r3, r2
 8001ef4:	d031      	beq.n	8001f5a <HAL_GPIO_DeInit+0xce>
 8001ef6:	687b      	ldr	r3, [r7, #4]
 8001ef8:	4a61      	ldr	r2, [pc, #388]	@ (8002080 <HAL_GPIO_DeInit+0x1f4>)
 8001efa:	4293      	cmp	r3, r2
 8001efc:	d02b      	beq.n	8001f56 <HAL_GPIO_DeInit+0xca>
 8001efe:	687b      	ldr	r3, [r7, #4]
 8001f00:	4a60      	ldr	r2, [pc, #384]	@ (8002084 <HAL_GPIO_DeInit+0x1f8>)
 8001f02:	4293      	cmp	r3, r2
 8001f04:	d025      	beq.n	8001f52 <HAL_GPIO_DeInit+0xc6>
 8001f06:	687b      	ldr	r3, [r7, #4]
 8001f08:	4a5f      	ldr	r2, [pc, #380]	@ (8002088 <HAL_GPIO_DeInit+0x1fc>)
 8001f0a:	4293      	cmp	r3, r2
 8001f0c:	d01f      	beq.n	8001f4e <HAL_GPIO_DeInit+0xc2>
 8001f0e:	687b      	ldr	r3, [r7, #4]
 8001f10:	4a5e      	ldr	r2, [pc, #376]	@ (800208c <HAL_GPIO_DeInit+0x200>)
 8001f12:	4293      	cmp	r3, r2
 8001f14:	d019      	beq.n	8001f4a <HAL_GPIO_DeInit+0xbe>
 8001f16:	687b      	ldr	r3, [r7, #4]
 8001f18:	4a5d      	ldr	r2, [pc, #372]	@ (8002090 <HAL_GPIO_DeInit+0x204>)
 8001f1a:	4293      	cmp	r3, r2
 8001f1c:	d013      	beq.n	8001f46 <HAL_GPIO_DeInit+0xba>
 8001f1e:	687b      	ldr	r3, [r7, #4]
 8001f20:	4a5c      	ldr	r2, [pc, #368]	@ (8002094 <HAL_GPIO_DeInit+0x208>)
 8001f22:	4293      	cmp	r3, r2
 8001f24:	d00d      	beq.n	8001f42 <HAL_GPIO_DeInit+0xb6>
 8001f26:	687b      	ldr	r3, [r7, #4]
 8001f28:	4a5b      	ldr	r2, [pc, #364]	@ (8002098 <HAL_GPIO_DeInit+0x20c>)
 8001f2a:	4293      	cmp	r3, r2
 8001f2c:	d007      	beq.n	8001f3e <HAL_GPIO_DeInit+0xb2>
 8001f2e:	687b      	ldr	r3, [r7, #4]
 8001f30:	4a5a      	ldr	r2, [pc, #360]	@ (800209c <HAL_GPIO_DeInit+0x210>)
 8001f32:	4293      	cmp	r3, r2
 8001f34:	d101      	bne.n	8001f3a <HAL_GPIO_DeInit+0xae>
 8001f36:	2309      	movs	r3, #9
 8001f38:	e012      	b.n	8001f60 <HAL_GPIO_DeInit+0xd4>
 8001f3a:	230a      	movs	r3, #10
 8001f3c:	e010      	b.n	8001f60 <HAL_GPIO_DeInit+0xd4>
 8001f3e:	2308      	movs	r3, #8
 8001f40:	e00e      	b.n	8001f60 <HAL_GPIO_DeInit+0xd4>
 8001f42:	2307      	movs	r3, #7
 8001f44:	e00c      	b.n	8001f60 <HAL_GPIO_DeInit+0xd4>
 8001f46:	2306      	movs	r3, #6
 8001f48:	e00a      	b.n	8001f60 <HAL_GPIO_DeInit+0xd4>
 8001f4a:	2305      	movs	r3, #5
 8001f4c:	e008      	b.n	8001f60 <HAL_GPIO_DeInit+0xd4>
 8001f4e:	2304      	movs	r3, #4
 8001f50:	e006      	b.n	8001f60 <HAL_GPIO_DeInit+0xd4>
 8001f52:	2303      	movs	r3, #3
 8001f54:	e004      	b.n	8001f60 <HAL_GPIO_DeInit+0xd4>
 8001f56:	2302      	movs	r3, #2
 8001f58:	e002      	b.n	8001f60 <HAL_GPIO_DeInit+0xd4>
 8001f5a:	2301      	movs	r3, #1
 8001f5c:	e000      	b.n	8001f60 <HAL_GPIO_DeInit+0xd4>
 8001f5e:	2300      	movs	r3, #0
 8001f60:	697a      	ldr	r2, [r7, #20]
 8001f62:	f002 0203 	and.w	r2, r2, #3
 8001f66:	0092      	lsls	r2, r2, #2
 8001f68:	4093      	lsls	r3, r2
 8001f6a:	68ba      	ldr	r2, [r7, #8]
 8001f6c:	429a      	cmp	r2, r3
 8001f6e:	d132      	bne.n	8001fd6 <HAL_GPIO_DeInit+0x14a>
      {
        /* Clear EXTI line configuration */
        EXTI->IMR &= ~((uint32_t)iocurrent);
 8001f70:	4b4b      	ldr	r3, [pc, #300]	@ (80020a0 <HAL_GPIO_DeInit+0x214>)
 8001f72:	681a      	ldr	r2, [r3, #0]
 8001f74:	68fb      	ldr	r3, [r7, #12]
 8001f76:	43db      	mvns	r3, r3
 8001f78:	4949      	ldr	r1, [pc, #292]	@ (80020a0 <HAL_GPIO_DeInit+0x214>)
 8001f7a:	4013      	ands	r3, r2
 8001f7c:	600b      	str	r3, [r1, #0]
        EXTI->EMR &= ~((uint32_t)iocurrent);
 8001f7e:	4b48      	ldr	r3, [pc, #288]	@ (80020a0 <HAL_GPIO_DeInit+0x214>)
 8001f80:	685a      	ldr	r2, [r3, #4]
 8001f82:	68fb      	ldr	r3, [r7, #12]
 8001f84:	43db      	mvns	r3, r3
 8001f86:	4946      	ldr	r1, [pc, #280]	@ (80020a0 <HAL_GPIO_DeInit+0x214>)
 8001f88:	4013      	ands	r3, r2
 8001f8a:	604b      	str	r3, [r1, #4]
        
        /* Clear Rising Falling edge configuration */
        EXTI->FTSR &= ~((uint32_t)iocurrent);
 8001f8c:	4b44      	ldr	r3, [pc, #272]	@ (80020a0 <HAL_GPIO_DeInit+0x214>)
 8001f8e:	68da      	ldr	r2, [r3, #12]
 8001f90:	68fb      	ldr	r3, [r7, #12]
 8001f92:	43db      	mvns	r3, r3
 8001f94:	4942      	ldr	r1, [pc, #264]	@ (80020a0 <HAL_GPIO_DeInit+0x214>)
 8001f96:	4013      	ands	r3, r2
 8001f98:	60cb      	str	r3, [r1, #12]
        EXTI->RTSR &= ~((uint32_t)iocurrent);
 8001f9a:	4b41      	ldr	r3, [pc, #260]	@ (80020a0 <HAL_GPIO_DeInit+0x214>)
 8001f9c:	689a      	ldr	r2, [r3, #8]
 8001f9e:	68fb      	ldr	r3, [r7, #12]
 8001fa0:	43db      	mvns	r3, r3
 8001fa2:	493f      	ldr	r1, [pc, #252]	@ (80020a0 <HAL_GPIO_DeInit+0x214>)
 8001fa4:	4013      	ands	r3, r2
 8001fa6:	608b      	str	r3, [r1, #8]

        /* Configure the External Interrupt or event for the current IO */
        tmp = 0x0FU << (4U * (position & 0x03U));
 8001fa8:	697b      	ldr	r3, [r7, #20]
 8001faa:	f003 0303 	and.w	r3, r3, #3
 8001fae:	009b      	lsls	r3, r3, #2
 8001fb0:	220f      	movs	r2, #15
 8001fb2:	fa02 f303 	lsl.w	r3, r2, r3
 8001fb6:	60bb      	str	r3, [r7, #8]
        SYSCFG->EXTICR[position >> 2U] &= ~tmp;
 8001fb8:	4a2e      	ldr	r2, [pc, #184]	@ (8002074 <HAL_GPIO_DeInit+0x1e8>)
 8001fba:	697b      	ldr	r3, [r7, #20]
 8001fbc:	089b      	lsrs	r3, r3, #2
 8001fbe:	3302      	adds	r3, #2
 8001fc0:	f852 1023 	ldr.w	r1, [r2, r3, lsl #2]
 8001fc4:	68bb      	ldr	r3, [r7, #8]
 8001fc6:	43da      	mvns	r2, r3
 8001fc8:	482a      	ldr	r0, [pc, #168]	@ (8002074 <HAL_GPIO_DeInit+0x1e8>)
 8001fca:	697b      	ldr	r3, [r7, #20]
 8001fcc:	089b      	lsrs	r3, r3, #2
 8001fce:	400a      	ands	r2, r1
 8001fd0:	3302      	adds	r3, #2
 8001fd2:	f840 2023 	str.w	r2, [r0, r3, lsl #2]
      }

      /*------------------------- GPIO Mode Configuration --------------------*/
      /* Configure IO Direction in Input Floating Mode */
      GPIOx->MODER &= ~(GPIO_MODER_MODER0 << (position * 2U));
 8001fd6:	687b      	ldr	r3, [r7, #4]
 8001fd8:	681a      	ldr	r2, [r3, #0]
 8001fda:	697b      	ldr	r3, [r7, #20]
 8001fdc:	005b      	lsls	r3, r3, #1
 8001fde:	2103      	movs	r1, #3
 8001fe0:	fa01 f303 	lsl.w	r3, r1, r3
 8001fe4:	43db      	mvns	r3, r3
 8001fe6:	401a      	ands	r2, r3
 8001fe8:	687b      	ldr	r3, [r7, #4]
 8001fea:	601a      	str	r2, [r3, #0]

      /* Configure the default Alternate Function in current IO */
      GPIOx->AFR[position >> 3U] &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 8001fec:	697b      	ldr	r3, [r7, #20]
 8001fee:	08da      	lsrs	r2, r3, #3
 8001ff0:	687b      	ldr	r3, [r7, #4]
 8001ff2:	3208      	adds	r2, #8
 8001ff4:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 8001ff8:	697b      	ldr	r3, [r7, #20]
 8001ffa:	f003 0307 	and.w	r3, r3, #7
 8001ffe:	009b      	lsls	r3, r3, #2
 8002000:	220f      	movs	r2, #15
 8002002:	fa02 f303 	lsl.w	r3, r2, r3
 8002006:	43db      	mvns	r3, r3
 8002008:	697a      	ldr	r2, [r7, #20]
 800200a:	08d2      	lsrs	r2, r2, #3
 800200c:	4019      	ands	r1, r3
 800200e:	687b      	ldr	r3, [r7, #4]
 8002010:	3208      	adds	r2, #8
 8002012:	f843 1022 	str.w	r1, [r3, r2, lsl #2]

      /* Deactivate the Pull-up and Pull-down resistor for the current IO */
      GPIOx->PUPDR &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 8002016:	687b      	ldr	r3, [r7, #4]
 8002018:	68da      	ldr	r2, [r3, #12]
 800201a:	697b      	ldr	r3, [r7, #20]
 800201c:	005b      	lsls	r3, r3, #1
 800201e:	2103      	movs	r1, #3
 8002020:	fa01 f303 	lsl.w	r3, r1, r3
 8002024:	43db      	mvns	r3, r3
 8002026:	401a      	ands	r2, r3
 8002028:	687b      	ldr	r3, [r7, #4]
 800202a:	60da      	str	r2, [r3, #12]

      /* Configure the default value IO Output Type */
      GPIOx->OTYPER  &= ~(GPIO_OTYPER_OT_0 << position) ;
 800202c:	687b      	ldr	r3, [r7, #4]
 800202e:	685a      	ldr	r2, [r3, #4]
 8002030:	2101      	movs	r1, #1
 8002032:	697b      	ldr	r3, [r7, #20]
 8002034:	fa01 f303 	lsl.w	r3, r1, r3
 8002038:	43db      	mvns	r3, r3
 800203a:	401a      	ands	r2, r3
 800203c:	687b      	ldr	r3, [r7, #4]
 800203e:	605a      	str	r2, [r3, #4]

      /* Configure the default value for IO Speed */
      GPIOx->OSPEEDR &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 8002040:	687b      	ldr	r3, [r7, #4]
 8002042:	689a      	ldr	r2, [r3, #8]
 8002044:	697b      	ldr	r3, [r7, #20]
 8002046:	005b      	lsls	r3, r3, #1
 8002048:	2103      	movs	r1, #3
 800204a:	fa01 f303 	lsl.w	r3, r1, r3
 800204e:	43db      	mvns	r3, r3
 8002050:	401a      	ands	r2, r3
 8002052:	687b      	ldr	r3, [r7, #4]
 8002054:	609a      	str	r2, [r3, #8]
  for(position = 0U; position < GPIO_NUMBER; position++)
 8002056:	697b      	ldr	r3, [r7, #20]
 8002058:	3301      	adds	r3, #1
 800205a:	617b      	str	r3, [r7, #20]
 800205c:	697b      	ldr	r3, [r7, #20]
 800205e:	2b0f      	cmp	r3, #15
 8002060:	f67f af22 	bls.w	8001ea8 <HAL_GPIO_DeInit+0x1c>
    }
  }
}
 8002064:	bf00      	nop
 8002066:	bf00      	nop
 8002068:	371c      	adds	r7, #28
 800206a:	46bd      	mov	sp, r7
 800206c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002070:	4770      	bx	lr
 8002072:	bf00      	nop
 8002074:	40013800 	.word	0x40013800
 8002078:	40020000 	.word	0x40020000
 800207c:	40020400 	.word	0x40020400
 8002080:	40020800 	.word	0x40020800
 8002084:	40020c00 	.word	0x40020c00
 8002088:	40021000 	.word	0x40021000
 800208c:	40021400 	.word	0x40021400
 8002090:	40021800 	.word	0x40021800
 8002094:	40021c00 	.word	0x40021c00
 8002098:	40022000 	.word	0x40022000
 800209c:	40022400 	.word	0x40022400
 80020a0:	40013c00 	.word	0x40013c00

080020a4 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 80020a4:	b480      	push	{r7}
 80020a6:	b083      	sub	sp, #12
 80020a8:	af00      	add	r7, sp, #0
 80020aa:	6078      	str	r0, [r7, #4]
 80020ac:	460b      	mov	r3, r1
 80020ae:	807b      	strh	r3, [r7, #2]
 80020b0:	4613      	mov	r3, r2
 80020b2:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 80020b4:	787b      	ldrb	r3, [r7, #1]
 80020b6:	2b00      	cmp	r3, #0
 80020b8:	d003      	beq.n	80020c2 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 80020ba:	887a      	ldrh	r2, [r7, #2]
 80020bc:	687b      	ldr	r3, [r7, #4]
 80020be:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
  }
}
 80020c0:	e003      	b.n	80020ca <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 80020c2:	887b      	ldrh	r3, [r7, #2]
 80020c4:	041a      	lsls	r2, r3, #16
 80020c6:	687b      	ldr	r3, [r7, #4]
 80020c8:	619a      	str	r2, [r3, #24]
}
 80020ca:	bf00      	nop
 80020cc:	370c      	adds	r7, #12
 80020ce:	46bd      	mov	sp, r7
 80020d0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80020d4:	4770      	bx	lr
	...

080020d8 <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 80020d8:	b580      	push	{r7, lr}
 80020da:	b084      	sub	sp, #16
 80020dc:	af00      	add	r7, sp, #0
 80020de:	6078      	str	r0, [r7, #4]
  uint32_t freqrange;
  uint32_t pclk1;

  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 80020e0:	687b      	ldr	r3, [r7, #4]
 80020e2:	2b00      	cmp	r3, #0
 80020e4:	d101      	bne.n	80020ea <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 80020e6:	2301      	movs	r3, #1
 80020e8:	e12b      	b.n	8002342 <HAL_I2C_Init+0x26a>
  assert_param(IS_I2C_DUAL_ADDRESS(hi2c->Init.DualAddressMode));
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 80020ea:	687b      	ldr	r3, [r7, #4]
 80020ec:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 80020f0:	b2db      	uxtb	r3, r3
 80020f2:	2b00      	cmp	r3, #0
 80020f4:	d106      	bne.n	8002104 <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 80020f6:	687b      	ldr	r3, [r7, #4]
 80020f8:	2200      	movs	r2, #0
 80020fa:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_I2C_MspInit(hi2c);
 80020fe:	6878      	ldr	r0, [r7, #4]
 8002100:	f7ff f8d8 	bl	80012b4 <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 8002104:	687b      	ldr	r3, [r7, #4]
 8002106:	2224      	movs	r2, #36	@ 0x24
 8002108:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 800210c:	687b      	ldr	r3, [r7, #4]
 800210e:	681b      	ldr	r3, [r3, #0]
 8002110:	681a      	ldr	r2, [r3, #0]
 8002112:	687b      	ldr	r3, [r7, #4]
 8002114:	681b      	ldr	r3, [r3, #0]
 8002116:	f022 0201 	bic.w	r2, r2, #1
 800211a:	601a      	str	r2, [r3, #0]

  /*Reset I2C*/
  hi2c->Instance->CR1 |= I2C_CR1_SWRST;
 800211c:	687b      	ldr	r3, [r7, #4]
 800211e:	681b      	ldr	r3, [r3, #0]
 8002120:	681a      	ldr	r2, [r3, #0]
 8002122:	687b      	ldr	r3, [r7, #4]
 8002124:	681b      	ldr	r3, [r3, #0]
 8002126:	f442 4200 	orr.w	r2, r2, #32768	@ 0x8000
 800212a:	601a      	str	r2, [r3, #0]
  hi2c->Instance->CR1 &= ~I2C_CR1_SWRST;
 800212c:	687b      	ldr	r3, [r7, #4]
 800212e:	681b      	ldr	r3, [r3, #0]
 8002130:	681a      	ldr	r2, [r3, #0]
 8002132:	687b      	ldr	r3, [r7, #4]
 8002134:	681b      	ldr	r3, [r3, #0]
 8002136:	f422 4200 	bic.w	r2, r2, #32768	@ 0x8000
 800213a:	601a      	str	r2, [r3, #0]

  /* Get PCLK1 frequency */
  pclk1 = HAL_RCC_GetPCLK1Freq();
 800213c:	f000 fc3e 	bl	80029bc <HAL_RCC_GetPCLK1Freq>
 8002140:	60f8      	str	r0, [r7, #12]

  /* Check the minimum allowed PCLK1 frequency */
  if (I2C_MIN_PCLK_FREQ(pclk1, hi2c->Init.ClockSpeed) == 1U)
 8002142:	687b      	ldr	r3, [r7, #4]
 8002144:	685b      	ldr	r3, [r3, #4]
 8002146:	4a81      	ldr	r2, [pc, #516]	@ (800234c <HAL_I2C_Init+0x274>)
 8002148:	4293      	cmp	r3, r2
 800214a:	d807      	bhi.n	800215c <HAL_I2C_Init+0x84>
 800214c:	68fb      	ldr	r3, [r7, #12]
 800214e:	4a80      	ldr	r2, [pc, #512]	@ (8002350 <HAL_I2C_Init+0x278>)
 8002150:	4293      	cmp	r3, r2
 8002152:	bf94      	ite	ls
 8002154:	2301      	movls	r3, #1
 8002156:	2300      	movhi	r3, #0
 8002158:	b2db      	uxtb	r3, r3
 800215a:	e006      	b.n	800216a <HAL_I2C_Init+0x92>
 800215c:	68fb      	ldr	r3, [r7, #12]
 800215e:	4a7d      	ldr	r2, [pc, #500]	@ (8002354 <HAL_I2C_Init+0x27c>)
 8002160:	4293      	cmp	r3, r2
 8002162:	bf94      	ite	ls
 8002164:	2301      	movls	r3, #1
 8002166:	2300      	movhi	r3, #0
 8002168:	b2db      	uxtb	r3, r3
 800216a:	2b00      	cmp	r3, #0
 800216c:	d001      	beq.n	8002172 <HAL_I2C_Init+0x9a>
  {
    return HAL_ERROR;
 800216e:	2301      	movs	r3, #1
 8002170:	e0e7      	b.n	8002342 <HAL_I2C_Init+0x26a>
  }

  /* Calculate frequency range */
  freqrange = I2C_FREQRANGE(pclk1);
 8002172:	68fb      	ldr	r3, [r7, #12]
 8002174:	4a78      	ldr	r2, [pc, #480]	@ (8002358 <HAL_I2C_Init+0x280>)
 8002176:	fba2 2303 	umull	r2, r3, r2, r3
 800217a:	0c9b      	lsrs	r3, r3, #18
 800217c:	60bb      	str	r3, [r7, #8]

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Frequency range */
  MODIFY_REG(hi2c->Instance->CR2, I2C_CR2_FREQ, freqrange);
 800217e:	687b      	ldr	r3, [r7, #4]
 8002180:	681b      	ldr	r3, [r3, #0]
 8002182:	685b      	ldr	r3, [r3, #4]
 8002184:	f023 013f 	bic.w	r1, r3, #63	@ 0x3f
 8002188:	687b      	ldr	r3, [r7, #4]
 800218a:	681b      	ldr	r3, [r3, #0]
 800218c:	68ba      	ldr	r2, [r7, #8]
 800218e:	430a      	orrs	r2, r1
 8002190:	605a      	str	r2, [r3, #4]

  /*---------------------------- I2Cx TRISE Configuration --------------------*/
  /* Configure I2Cx: Rise Time */
  MODIFY_REG(hi2c->Instance->TRISE, I2C_TRISE_TRISE, I2C_RISE_TIME(freqrange, hi2c->Init.ClockSpeed));
 8002192:	687b      	ldr	r3, [r7, #4]
 8002194:	681b      	ldr	r3, [r3, #0]
 8002196:	6a1b      	ldr	r3, [r3, #32]
 8002198:	f023 013f 	bic.w	r1, r3, #63	@ 0x3f
 800219c:	687b      	ldr	r3, [r7, #4]
 800219e:	685b      	ldr	r3, [r3, #4]
 80021a0:	4a6a      	ldr	r2, [pc, #424]	@ (800234c <HAL_I2C_Init+0x274>)
 80021a2:	4293      	cmp	r3, r2
 80021a4:	d802      	bhi.n	80021ac <HAL_I2C_Init+0xd4>
 80021a6:	68bb      	ldr	r3, [r7, #8]
 80021a8:	3301      	adds	r3, #1
 80021aa:	e009      	b.n	80021c0 <HAL_I2C_Init+0xe8>
 80021ac:	68bb      	ldr	r3, [r7, #8]
 80021ae:	f44f 7296 	mov.w	r2, #300	@ 0x12c
 80021b2:	fb02 f303 	mul.w	r3, r2, r3
 80021b6:	4a69      	ldr	r2, [pc, #420]	@ (800235c <HAL_I2C_Init+0x284>)
 80021b8:	fba2 2303 	umull	r2, r3, r2, r3
 80021bc:	099b      	lsrs	r3, r3, #6
 80021be:	3301      	adds	r3, #1
 80021c0:	687a      	ldr	r2, [r7, #4]
 80021c2:	6812      	ldr	r2, [r2, #0]
 80021c4:	430b      	orrs	r3, r1
 80021c6:	6213      	str	r3, [r2, #32]

  /*---------------------------- I2Cx CCR Configuration ----------------------*/
  /* Configure I2Cx: Speed */
  MODIFY_REG(hi2c->Instance->CCR, (I2C_CCR_FS | I2C_CCR_DUTY | I2C_CCR_CCR), I2C_SPEED(pclk1, hi2c->Init.ClockSpeed, hi2c->Init.DutyCycle));
 80021c8:	687b      	ldr	r3, [r7, #4]
 80021ca:	681b      	ldr	r3, [r3, #0]
 80021cc:	69db      	ldr	r3, [r3, #28]
 80021ce:	f423 424f 	bic.w	r2, r3, #52992	@ 0xcf00
 80021d2:	f022 02ff 	bic.w	r2, r2, #255	@ 0xff
 80021d6:	687b      	ldr	r3, [r7, #4]
 80021d8:	685b      	ldr	r3, [r3, #4]
 80021da:	495c      	ldr	r1, [pc, #368]	@ (800234c <HAL_I2C_Init+0x274>)
 80021dc:	428b      	cmp	r3, r1
 80021de:	d819      	bhi.n	8002214 <HAL_I2C_Init+0x13c>
 80021e0:	68fb      	ldr	r3, [r7, #12]
 80021e2:	1e59      	subs	r1, r3, #1
 80021e4:	687b      	ldr	r3, [r7, #4]
 80021e6:	685b      	ldr	r3, [r3, #4]
 80021e8:	005b      	lsls	r3, r3, #1
 80021ea:	fbb1 f3f3 	udiv	r3, r1, r3
 80021ee:	1c59      	adds	r1, r3, #1
 80021f0:	f640 73fc 	movw	r3, #4092	@ 0xffc
 80021f4:	400b      	ands	r3, r1
 80021f6:	2b00      	cmp	r3, #0
 80021f8:	d00a      	beq.n	8002210 <HAL_I2C_Init+0x138>
 80021fa:	68fb      	ldr	r3, [r7, #12]
 80021fc:	1e59      	subs	r1, r3, #1
 80021fe:	687b      	ldr	r3, [r7, #4]
 8002200:	685b      	ldr	r3, [r3, #4]
 8002202:	005b      	lsls	r3, r3, #1
 8002204:	fbb1 f3f3 	udiv	r3, r1, r3
 8002208:	3301      	adds	r3, #1
 800220a:	f3c3 030b 	ubfx	r3, r3, #0, #12
 800220e:	e051      	b.n	80022b4 <HAL_I2C_Init+0x1dc>
 8002210:	2304      	movs	r3, #4
 8002212:	e04f      	b.n	80022b4 <HAL_I2C_Init+0x1dc>
 8002214:	687b      	ldr	r3, [r7, #4]
 8002216:	689b      	ldr	r3, [r3, #8]
 8002218:	2b00      	cmp	r3, #0
 800221a:	d111      	bne.n	8002240 <HAL_I2C_Init+0x168>
 800221c:	68fb      	ldr	r3, [r7, #12]
 800221e:	1e58      	subs	r0, r3, #1
 8002220:	687b      	ldr	r3, [r7, #4]
 8002222:	6859      	ldr	r1, [r3, #4]
 8002224:	460b      	mov	r3, r1
 8002226:	005b      	lsls	r3, r3, #1
 8002228:	440b      	add	r3, r1
 800222a:	fbb0 f3f3 	udiv	r3, r0, r3
 800222e:	3301      	adds	r3, #1
 8002230:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8002234:	2b00      	cmp	r3, #0
 8002236:	bf0c      	ite	eq
 8002238:	2301      	moveq	r3, #1
 800223a:	2300      	movne	r3, #0
 800223c:	b2db      	uxtb	r3, r3
 800223e:	e012      	b.n	8002266 <HAL_I2C_Init+0x18e>
 8002240:	68fb      	ldr	r3, [r7, #12]
 8002242:	1e58      	subs	r0, r3, #1
 8002244:	687b      	ldr	r3, [r7, #4]
 8002246:	6859      	ldr	r1, [r3, #4]
 8002248:	460b      	mov	r3, r1
 800224a:	009b      	lsls	r3, r3, #2
 800224c:	440b      	add	r3, r1
 800224e:	0099      	lsls	r1, r3, #2
 8002250:	440b      	add	r3, r1
 8002252:	fbb0 f3f3 	udiv	r3, r0, r3
 8002256:	3301      	adds	r3, #1
 8002258:	f3c3 030b 	ubfx	r3, r3, #0, #12
 800225c:	2b00      	cmp	r3, #0
 800225e:	bf0c      	ite	eq
 8002260:	2301      	moveq	r3, #1
 8002262:	2300      	movne	r3, #0
 8002264:	b2db      	uxtb	r3, r3
 8002266:	2b00      	cmp	r3, #0
 8002268:	d001      	beq.n	800226e <HAL_I2C_Init+0x196>
 800226a:	2301      	movs	r3, #1
 800226c:	e022      	b.n	80022b4 <HAL_I2C_Init+0x1dc>
 800226e:	687b      	ldr	r3, [r7, #4]
 8002270:	689b      	ldr	r3, [r3, #8]
 8002272:	2b00      	cmp	r3, #0
 8002274:	d10e      	bne.n	8002294 <HAL_I2C_Init+0x1bc>
 8002276:	68fb      	ldr	r3, [r7, #12]
 8002278:	1e58      	subs	r0, r3, #1
 800227a:	687b      	ldr	r3, [r7, #4]
 800227c:	6859      	ldr	r1, [r3, #4]
 800227e:	460b      	mov	r3, r1
 8002280:	005b      	lsls	r3, r3, #1
 8002282:	440b      	add	r3, r1
 8002284:	fbb0 f3f3 	udiv	r3, r0, r3
 8002288:	3301      	adds	r3, #1
 800228a:	f3c3 030b 	ubfx	r3, r3, #0, #12
 800228e:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8002292:	e00f      	b.n	80022b4 <HAL_I2C_Init+0x1dc>
 8002294:	68fb      	ldr	r3, [r7, #12]
 8002296:	1e58      	subs	r0, r3, #1
 8002298:	687b      	ldr	r3, [r7, #4]
 800229a:	6859      	ldr	r1, [r3, #4]
 800229c:	460b      	mov	r3, r1
 800229e:	009b      	lsls	r3, r3, #2
 80022a0:	440b      	add	r3, r1
 80022a2:	0099      	lsls	r1, r3, #2
 80022a4:	440b      	add	r3, r1
 80022a6:	fbb0 f3f3 	udiv	r3, r0, r3
 80022aa:	3301      	adds	r3, #1
 80022ac:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80022b0:	f443 4340 	orr.w	r3, r3, #49152	@ 0xc000
 80022b4:	6879      	ldr	r1, [r7, #4]
 80022b6:	6809      	ldr	r1, [r1, #0]
 80022b8:	4313      	orrs	r3, r2
 80022ba:	61cb      	str	r3, [r1, #28]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  MODIFY_REG(hi2c->Instance->CR1, (I2C_CR1_ENGC | I2C_CR1_NOSTRETCH), (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode));
 80022bc:	687b      	ldr	r3, [r7, #4]
 80022be:	681b      	ldr	r3, [r3, #0]
 80022c0:	681b      	ldr	r3, [r3, #0]
 80022c2:	f023 01c0 	bic.w	r1, r3, #192	@ 0xc0
 80022c6:	687b      	ldr	r3, [r7, #4]
 80022c8:	69da      	ldr	r2, [r3, #28]
 80022ca:	687b      	ldr	r3, [r7, #4]
 80022cc:	6a1b      	ldr	r3, [r3, #32]
 80022ce:	431a      	orrs	r2, r3
 80022d0:	687b      	ldr	r3, [r7, #4]
 80022d2:	681b      	ldr	r3, [r3, #0]
 80022d4:	430a      	orrs	r2, r1
 80022d6:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Configure I2Cx: Own Address1 and addressing mode */
  MODIFY_REG(hi2c->Instance->OAR1, (I2C_OAR1_ADDMODE | I2C_OAR1_ADD8_9 | I2C_OAR1_ADD1_7 | I2C_OAR1_ADD0), (hi2c->Init.AddressingMode | hi2c->Init.OwnAddress1));
 80022d8:	687b      	ldr	r3, [r7, #4]
 80022da:	681b      	ldr	r3, [r3, #0]
 80022dc:	689b      	ldr	r3, [r3, #8]
 80022de:	f423 4303 	bic.w	r3, r3, #33536	@ 0x8300
 80022e2:	f023 03ff 	bic.w	r3, r3, #255	@ 0xff
 80022e6:	687a      	ldr	r2, [r7, #4]
 80022e8:	6911      	ldr	r1, [r2, #16]
 80022ea:	687a      	ldr	r2, [r7, #4]
 80022ec:	68d2      	ldr	r2, [r2, #12]
 80022ee:	4311      	orrs	r1, r2
 80022f0:	687a      	ldr	r2, [r7, #4]
 80022f2:	6812      	ldr	r2, [r2, #0]
 80022f4:	430b      	orrs	r3, r1
 80022f6:	6093      	str	r3, [r2, #8]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Configure I2Cx: Dual mode and Own Address2 */
  MODIFY_REG(hi2c->Instance->OAR2, (I2C_OAR2_ENDUAL | I2C_OAR2_ADD2), (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2));
 80022f8:	687b      	ldr	r3, [r7, #4]
 80022fa:	681b      	ldr	r3, [r3, #0]
 80022fc:	68db      	ldr	r3, [r3, #12]
 80022fe:	f023 01ff 	bic.w	r1, r3, #255	@ 0xff
 8002302:	687b      	ldr	r3, [r7, #4]
 8002304:	695a      	ldr	r2, [r3, #20]
 8002306:	687b      	ldr	r3, [r7, #4]
 8002308:	699b      	ldr	r3, [r3, #24]
 800230a:	431a      	orrs	r2, r3
 800230c:	687b      	ldr	r3, [r7, #4]
 800230e:	681b      	ldr	r3, [r3, #0]
 8002310:	430a      	orrs	r2, r1
 8002312:	60da      	str	r2, [r3, #12]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 8002314:	687b      	ldr	r3, [r7, #4]
 8002316:	681b      	ldr	r3, [r3, #0]
 8002318:	681a      	ldr	r2, [r3, #0]
 800231a:	687b      	ldr	r3, [r7, #4]
 800231c:	681b      	ldr	r3, [r3, #0]
 800231e:	f042 0201 	orr.w	r2, r2, #1
 8002322:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8002324:	687b      	ldr	r3, [r7, #4]
 8002326:	2200      	movs	r2, #0
 8002328:	641a      	str	r2, [r3, #64]	@ 0x40
  hi2c->State = HAL_I2C_STATE_READY;
 800232a:	687b      	ldr	r3, [r7, #4]
 800232c:	2220      	movs	r2, #32
 800232e:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
  hi2c->PreviousState = I2C_STATE_NONE;
 8002332:	687b      	ldr	r3, [r7, #4]
 8002334:	2200      	movs	r2, #0
 8002336:	631a      	str	r2, [r3, #48]	@ 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 8002338:	687b      	ldr	r3, [r7, #4]
 800233a:	2200      	movs	r2, #0
 800233c:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e

  return HAL_OK;
 8002340:	2300      	movs	r3, #0
}
 8002342:	4618      	mov	r0, r3
 8002344:	3710      	adds	r7, #16
 8002346:	46bd      	mov	sp, r7
 8002348:	bd80      	pop	{r7, pc}
 800234a:	bf00      	nop
 800234c:	000186a0 	.word	0x000186a0
 8002350:	001e847f 	.word	0x001e847f
 8002354:	003d08ff 	.word	0x003d08ff
 8002358:	431bde83 	.word	0x431bde83
 800235c:	10624dd3 	.word	0x10624dd3

08002360 <HAL_I2CEx_ConfigAnalogFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  AnalogFilter new state of the Analog filter.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigAnalogFilter(I2C_HandleTypeDef *hi2c, uint32_t AnalogFilter)
{
 8002360:	b480      	push	{r7}
 8002362:	b083      	sub	sp, #12
 8002364:	af00      	add	r7, sp, #0
 8002366:	6078      	str	r0, [r7, #4]
 8002368:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_ANALOG_FILTER(AnalogFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 800236a:	687b      	ldr	r3, [r7, #4]
 800236c:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8002370:	b2db      	uxtb	r3, r3
 8002372:	2b20      	cmp	r3, #32
 8002374:	d129      	bne.n	80023ca <HAL_I2CEx_ConfigAnalogFilter+0x6a>
  {
    hi2c->State = HAL_I2C_STATE_BUSY;
 8002376:	687b      	ldr	r3, [r7, #4]
 8002378:	2224      	movs	r2, #36	@ 0x24
 800237a:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 800237e:	687b      	ldr	r3, [r7, #4]
 8002380:	681b      	ldr	r3, [r3, #0]
 8002382:	681a      	ldr	r2, [r3, #0]
 8002384:	687b      	ldr	r3, [r7, #4]
 8002386:	681b      	ldr	r3, [r3, #0]
 8002388:	f022 0201 	bic.w	r2, r2, #1
 800238c:	601a      	str	r2, [r3, #0]

    /* Reset I2Cx ANOFF bit */
    hi2c->Instance->FLTR &= ~(I2C_FLTR_ANOFF);
 800238e:	687b      	ldr	r3, [r7, #4]
 8002390:	681b      	ldr	r3, [r3, #0]
 8002392:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 8002394:	687b      	ldr	r3, [r7, #4]
 8002396:	681b      	ldr	r3, [r3, #0]
 8002398:	f022 0210 	bic.w	r2, r2, #16
 800239c:	625a      	str	r2, [r3, #36]	@ 0x24

    /* Disable the analog filter */
    hi2c->Instance->FLTR |= AnalogFilter;
 800239e:	687b      	ldr	r3, [r7, #4]
 80023a0:	681b      	ldr	r3, [r3, #0]
 80023a2:	6a59      	ldr	r1, [r3, #36]	@ 0x24
 80023a4:	687b      	ldr	r3, [r7, #4]
 80023a6:	681b      	ldr	r3, [r3, #0]
 80023a8:	683a      	ldr	r2, [r7, #0]
 80023aa:	430a      	orrs	r2, r1
 80023ac:	625a      	str	r2, [r3, #36]	@ 0x24

    __HAL_I2C_ENABLE(hi2c);
 80023ae:	687b      	ldr	r3, [r7, #4]
 80023b0:	681b      	ldr	r3, [r3, #0]
 80023b2:	681a      	ldr	r2, [r3, #0]
 80023b4:	687b      	ldr	r3, [r7, #4]
 80023b6:	681b      	ldr	r3, [r3, #0]
 80023b8:	f042 0201 	orr.w	r2, r2, #1
 80023bc:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 80023be:	687b      	ldr	r3, [r7, #4]
 80023c0:	2220      	movs	r2, #32
 80023c2:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

    return HAL_OK;
 80023c6:	2300      	movs	r3, #0
 80023c8:	e000      	b.n	80023cc <HAL_I2CEx_ConfigAnalogFilter+0x6c>
  }
  else
  {
    return HAL_BUSY;
 80023ca:	2302      	movs	r3, #2
  }
}
 80023cc:	4618      	mov	r0, r3
 80023ce:	370c      	adds	r7, #12
 80023d0:	46bd      	mov	sp, r7
 80023d2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80023d6:	4770      	bx	lr

080023d8 <HAL_I2CEx_ConfigDigitalFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  DigitalFilter Coefficient of digital noise filter between 0x00 and 0x0F.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigDigitalFilter(I2C_HandleTypeDef *hi2c, uint32_t DigitalFilter)
{
 80023d8:	b480      	push	{r7}
 80023da:	b085      	sub	sp, #20
 80023dc:	af00      	add	r7, sp, #0
 80023de:	6078      	str	r0, [r7, #4]
 80023e0:	6039      	str	r1, [r7, #0]
  uint16_t tmpreg = 0;
 80023e2:	2300      	movs	r3, #0
 80023e4:	81fb      	strh	r3, [r7, #14]

  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_DIGITAL_FILTER(DigitalFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 80023e6:	687b      	ldr	r3, [r7, #4]
 80023e8:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 80023ec:	b2db      	uxtb	r3, r3
 80023ee:	2b20      	cmp	r3, #32
 80023f0:	d12a      	bne.n	8002448 <HAL_I2CEx_ConfigDigitalFilter+0x70>
  {
    hi2c->State = HAL_I2C_STATE_BUSY;
 80023f2:	687b      	ldr	r3, [r7, #4]
 80023f4:	2224      	movs	r2, #36	@ 0x24
 80023f6:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 80023fa:	687b      	ldr	r3, [r7, #4]
 80023fc:	681b      	ldr	r3, [r3, #0]
 80023fe:	681a      	ldr	r2, [r3, #0]
 8002400:	687b      	ldr	r3, [r7, #4]
 8002402:	681b      	ldr	r3, [r3, #0]
 8002404:	f022 0201 	bic.w	r2, r2, #1
 8002408:	601a      	str	r2, [r3, #0]

    /* Get the old register value */
    tmpreg = hi2c->Instance->FLTR;
 800240a:	687b      	ldr	r3, [r7, #4]
 800240c:	681b      	ldr	r3, [r3, #0]
 800240e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002410:	81fb      	strh	r3, [r7, #14]

    /* Reset I2Cx DNF bit [3:0] */
    tmpreg &= ~(I2C_FLTR_DNF);
 8002412:	89fb      	ldrh	r3, [r7, #14]
 8002414:	f023 030f 	bic.w	r3, r3, #15
 8002418:	81fb      	strh	r3, [r7, #14]

    /* Set I2Cx DNF coefficient */
    tmpreg |= DigitalFilter;
 800241a:	683b      	ldr	r3, [r7, #0]
 800241c:	b29a      	uxth	r2, r3
 800241e:	89fb      	ldrh	r3, [r7, #14]
 8002420:	4313      	orrs	r3, r2
 8002422:	81fb      	strh	r3, [r7, #14]

    /* Store the new register value */
    hi2c->Instance->FLTR = tmpreg;
 8002424:	687b      	ldr	r3, [r7, #4]
 8002426:	681b      	ldr	r3, [r3, #0]
 8002428:	89fa      	ldrh	r2, [r7, #14]
 800242a:	625a      	str	r2, [r3, #36]	@ 0x24

    __HAL_I2C_ENABLE(hi2c);
 800242c:	687b      	ldr	r3, [r7, #4]
 800242e:	681b      	ldr	r3, [r3, #0]
 8002430:	681a      	ldr	r2, [r3, #0]
 8002432:	687b      	ldr	r3, [r7, #4]
 8002434:	681b      	ldr	r3, [r3, #0]
 8002436:	f042 0201 	orr.w	r2, r2, #1
 800243a:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 800243c:	687b      	ldr	r3, [r7, #4]
 800243e:	2220      	movs	r2, #32
 8002440:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

    return HAL_OK;
 8002444:	2300      	movs	r3, #0
 8002446:	e000      	b.n	800244a <HAL_I2CEx_ConfigDigitalFilter+0x72>
  }
  else
  {
    return HAL_BUSY;
 8002448:	2302      	movs	r3, #2
  }
}
 800244a:	4618      	mov	r0, r3
 800244c:	3714      	adds	r7, #20
 800244e:	46bd      	mov	sp, r7
 8002450:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002454:	4770      	bx	lr
	...

08002458 <HAL_LTDC_Init>:
  * @param  hltdc  pointer to a LTDC_HandleTypeDef structure that contains
  *                the configuration information for the LTDC.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_LTDC_Init(LTDC_HandleTypeDef *hltdc)
{
 8002458:	b580      	push	{r7, lr}
 800245a:	b084      	sub	sp, #16
 800245c:	af00      	add	r7, sp, #0
 800245e:	6078      	str	r0, [r7, #4]
  uint32_t tmp;
  uint32_t tmp1;

  /* Check the LTDC peripheral state */
  if (hltdc == NULL)
 8002460:	687b      	ldr	r3, [r7, #4]
 8002462:	2b00      	cmp	r3, #0
 8002464:	d101      	bne.n	800246a <HAL_LTDC_Init+0x12>
  {
    return HAL_ERROR;
 8002466:	2301      	movs	r3, #1
 8002468:	e0bf      	b.n	80025ea <HAL_LTDC_Init+0x192>
    }
    /* Init the low level hardware */
    hltdc->MspInitCallback(hltdc);
  }
#else
  if (hltdc->State == HAL_LTDC_STATE_RESET)
 800246a:	687b      	ldr	r3, [r7, #4]
 800246c:	f893 30a1 	ldrb.w	r3, [r3, #161]	@ 0xa1
 8002470:	b2db      	uxtb	r3, r3
 8002472:	2b00      	cmp	r3, #0
 8002474:	d106      	bne.n	8002484 <HAL_LTDC_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hltdc->Lock = HAL_UNLOCKED;
 8002476:	687b      	ldr	r3, [r7, #4]
 8002478:	2200      	movs	r2, #0
 800247a:	f883 20a0 	strb.w	r2, [r3, #160]	@ 0xa0
    /* Init the low level hardware */
    HAL_LTDC_MspInit(hltdc);
 800247e:	6878      	ldr	r0, [r7, #4]
 8002480:	f7fe ff82 	bl	8001388 <HAL_LTDC_MspInit>
  }
#endif /* USE_HAL_LTDC_REGISTER_CALLBACKS */

  /* Change LTDC peripheral state */
  hltdc->State = HAL_LTDC_STATE_BUSY;
 8002484:	687b      	ldr	r3, [r7, #4]
 8002486:	2202      	movs	r2, #2
 8002488:	f883 20a1 	strb.w	r2, [r3, #161]	@ 0xa1

  /* Configure the HS, VS, DE and PC polarity */
  hltdc->Instance->GCR &= ~(LTDC_GCR_HSPOL | LTDC_GCR_VSPOL | LTDC_GCR_DEPOL | LTDC_GCR_PCPOL);
 800248c:	687b      	ldr	r3, [r7, #4]
 800248e:	681b      	ldr	r3, [r3, #0]
 8002490:	699a      	ldr	r2, [r3, #24]
 8002492:	687b      	ldr	r3, [r7, #4]
 8002494:	681b      	ldr	r3, [r3, #0]
 8002496:	f022 4270 	bic.w	r2, r2, #4026531840	@ 0xf0000000
 800249a:	619a      	str	r2, [r3, #24]
  hltdc->Instance->GCR |= (uint32_t)(hltdc->Init.HSPolarity | hltdc->Init.VSPolarity | \
 800249c:	687b      	ldr	r3, [r7, #4]
 800249e:	681b      	ldr	r3, [r3, #0]
 80024a0:	6999      	ldr	r1, [r3, #24]
 80024a2:	687b      	ldr	r3, [r7, #4]
 80024a4:	685a      	ldr	r2, [r3, #4]
 80024a6:	687b      	ldr	r3, [r7, #4]
 80024a8:	689b      	ldr	r3, [r3, #8]
 80024aa:	431a      	orrs	r2, r3
                                     hltdc->Init.DEPolarity | hltdc->Init.PCPolarity);
 80024ac:	687b      	ldr	r3, [r7, #4]
 80024ae:	68db      	ldr	r3, [r3, #12]
  hltdc->Instance->GCR |= (uint32_t)(hltdc->Init.HSPolarity | hltdc->Init.VSPolarity | \
 80024b0:	431a      	orrs	r2, r3
                                     hltdc->Init.DEPolarity | hltdc->Init.PCPolarity);
 80024b2:	687b      	ldr	r3, [r7, #4]
 80024b4:	691b      	ldr	r3, [r3, #16]
 80024b6:	431a      	orrs	r2, r3
  hltdc->Instance->GCR |= (uint32_t)(hltdc->Init.HSPolarity | hltdc->Init.VSPolarity | \
 80024b8:	687b      	ldr	r3, [r7, #4]
 80024ba:	681b      	ldr	r3, [r3, #0]
 80024bc:	430a      	orrs	r2, r1
 80024be:	619a      	str	r2, [r3, #24]

  /* Set Synchronization size */
  hltdc->Instance->SSCR &= ~(LTDC_SSCR_VSH | LTDC_SSCR_HSW);
 80024c0:	687b      	ldr	r3, [r7, #4]
 80024c2:	681b      	ldr	r3, [r3, #0]
 80024c4:	6899      	ldr	r1, [r3, #8]
 80024c6:	687b      	ldr	r3, [r7, #4]
 80024c8:	681a      	ldr	r2, [r3, #0]
 80024ca:	4b4a      	ldr	r3, [pc, #296]	@ (80025f4 <HAL_LTDC_Init+0x19c>)
 80024cc:	400b      	ands	r3, r1
 80024ce:	6093      	str	r3, [r2, #8]
  tmp = (hltdc->Init.HorizontalSync << 16U);
 80024d0:	687b      	ldr	r3, [r7, #4]
 80024d2:	695b      	ldr	r3, [r3, #20]
 80024d4:	041b      	lsls	r3, r3, #16
 80024d6:	60fb      	str	r3, [r7, #12]
  hltdc->Instance->SSCR |= (tmp | hltdc->Init.VerticalSync);
 80024d8:	687b      	ldr	r3, [r7, #4]
 80024da:	681b      	ldr	r3, [r3, #0]
 80024dc:	6899      	ldr	r1, [r3, #8]
 80024de:	687b      	ldr	r3, [r7, #4]
 80024e0:	699a      	ldr	r2, [r3, #24]
 80024e2:	68fb      	ldr	r3, [r7, #12]
 80024e4:	431a      	orrs	r2, r3
 80024e6:	687b      	ldr	r3, [r7, #4]
 80024e8:	681b      	ldr	r3, [r3, #0]
 80024ea:	430a      	orrs	r2, r1
 80024ec:	609a      	str	r2, [r3, #8]

  /* Set Accumulated Back porch */
  hltdc->Instance->BPCR &= ~(LTDC_BPCR_AVBP | LTDC_BPCR_AHBP);
 80024ee:	687b      	ldr	r3, [r7, #4]
 80024f0:	681b      	ldr	r3, [r3, #0]
 80024f2:	68d9      	ldr	r1, [r3, #12]
 80024f4:	687b      	ldr	r3, [r7, #4]
 80024f6:	681a      	ldr	r2, [r3, #0]
 80024f8:	4b3e      	ldr	r3, [pc, #248]	@ (80025f4 <HAL_LTDC_Init+0x19c>)
 80024fa:	400b      	ands	r3, r1
 80024fc:	60d3      	str	r3, [r2, #12]
  tmp = (hltdc->Init.AccumulatedHBP << 16U);
 80024fe:	687b      	ldr	r3, [r7, #4]
 8002500:	69db      	ldr	r3, [r3, #28]
 8002502:	041b      	lsls	r3, r3, #16
 8002504:	60fb      	str	r3, [r7, #12]
  hltdc->Instance->BPCR |= (tmp | hltdc->Init.AccumulatedVBP);
 8002506:	687b      	ldr	r3, [r7, #4]
 8002508:	681b      	ldr	r3, [r3, #0]
 800250a:	68d9      	ldr	r1, [r3, #12]
 800250c:	687b      	ldr	r3, [r7, #4]
 800250e:	6a1a      	ldr	r2, [r3, #32]
 8002510:	68fb      	ldr	r3, [r7, #12]
 8002512:	431a      	orrs	r2, r3
 8002514:	687b      	ldr	r3, [r7, #4]
 8002516:	681b      	ldr	r3, [r3, #0]
 8002518:	430a      	orrs	r2, r1
 800251a:	60da      	str	r2, [r3, #12]

  /* Set Accumulated Active Width */
  hltdc->Instance->AWCR &= ~(LTDC_AWCR_AAH | LTDC_AWCR_AAW);
 800251c:	687b      	ldr	r3, [r7, #4]
 800251e:	681b      	ldr	r3, [r3, #0]
 8002520:	6919      	ldr	r1, [r3, #16]
 8002522:	687b      	ldr	r3, [r7, #4]
 8002524:	681a      	ldr	r2, [r3, #0]
 8002526:	4b33      	ldr	r3, [pc, #204]	@ (80025f4 <HAL_LTDC_Init+0x19c>)
 8002528:	400b      	ands	r3, r1
 800252a:	6113      	str	r3, [r2, #16]
  tmp = (hltdc->Init.AccumulatedActiveW << 16U);
 800252c:	687b      	ldr	r3, [r7, #4]
 800252e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002530:	041b      	lsls	r3, r3, #16
 8002532:	60fb      	str	r3, [r7, #12]
  hltdc->Instance->AWCR |= (tmp | hltdc->Init.AccumulatedActiveH);
 8002534:	687b      	ldr	r3, [r7, #4]
 8002536:	681b      	ldr	r3, [r3, #0]
 8002538:	6919      	ldr	r1, [r3, #16]
 800253a:	687b      	ldr	r3, [r7, #4]
 800253c:	6a9a      	ldr	r2, [r3, #40]	@ 0x28
 800253e:	68fb      	ldr	r3, [r7, #12]
 8002540:	431a      	orrs	r2, r3
 8002542:	687b      	ldr	r3, [r7, #4]
 8002544:	681b      	ldr	r3, [r3, #0]
 8002546:	430a      	orrs	r2, r1
 8002548:	611a      	str	r2, [r3, #16]

  /* Set Total Width */
  hltdc->Instance->TWCR &= ~(LTDC_TWCR_TOTALH | LTDC_TWCR_TOTALW);
 800254a:	687b      	ldr	r3, [r7, #4]
 800254c:	681b      	ldr	r3, [r3, #0]
 800254e:	6959      	ldr	r1, [r3, #20]
 8002550:	687b      	ldr	r3, [r7, #4]
 8002552:	681a      	ldr	r2, [r3, #0]
 8002554:	4b27      	ldr	r3, [pc, #156]	@ (80025f4 <HAL_LTDC_Init+0x19c>)
 8002556:	400b      	ands	r3, r1
 8002558:	6153      	str	r3, [r2, #20]
  tmp = (hltdc->Init.TotalWidth << 16U);
 800255a:	687b      	ldr	r3, [r7, #4]
 800255c:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800255e:	041b      	lsls	r3, r3, #16
 8002560:	60fb      	str	r3, [r7, #12]
  hltdc->Instance->TWCR |= (tmp | hltdc->Init.TotalHeigh);
 8002562:	687b      	ldr	r3, [r7, #4]
 8002564:	681b      	ldr	r3, [r3, #0]
 8002566:	6959      	ldr	r1, [r3, #20]
 8002568:	687b      	ldr	r3, [r7, #4]
 800256a:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 800256c:	68fb      	ldr	r3, [r7, #12]
 800256e:	431a      	orrs	r2, r3
 8002570:	687b      	ldr	r3, [r7, #4]
 8002572:	681b      	ldr	r3, [r3, #0]
 8002574:	430a      	orrs	r2, r1
 8002576:	615a      	str	r2, [r3, #20]

  /* Set the background color value */
  tmp = ((uint32_t)(hltdc->Init.Backcolor.Green) << 8U);
 8002578:	687b      	ldr	r3, [r7, #4]
 800257a:	f893 3035 	ldrb.w	r3, [r3, #53]	@ 0x35
 800257e:	021b      	lsls	r3, r3, #8
 8002580:	60fb      	str	r3, [r7, #12]
  tmp1 = ((uint32_t)(hltdc->Init.Backcolor.Red) << 16U);
 8002582:	687b      	ldr	r3, [r7, #4]
 8002584:	f893 3036 	ldrb.w	r3, [r3, #54]	@ 0x36
 8002588:	041b      	lsls	r3, r3, #16
 800258a:	60bb      	str	r3, [r7, #8]
  hltdc->Instance->BCCR &= ~(LTDC_BCCR_BCBLUE | LTDC_BCCR_BCGREEN | LTDC_BCCR_BCRED);
 800258c:	687b      	ldr	r3, [r7, #4]
 800258e:	681b      	ldr	r3, [r3, #0]
 8002590:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8002592:	687b      	ldr	r3, [r7, #4]
 8002594:	681b      	ldr	r3, [r3, #0]
 8002596:	f002 427f 	and.w	r2, r2, #4278190080	@ 0xff000000
 800259a:	62da      	str	r2, [r3, #44]	@ 0x2c
  hltdc->Instance->BCCR |= (tmp1 | tmp | hltdc->Init.Backcolor.Blue);
 800259c:	687b      	ldr	r3, [r7, #4]
 800259e:	681b      	ldr	r3, [r3, #0]
 80025a0:	6ad9      	ldr	r1, [r3, #44]	@ 0x2c
 80025a2:	68ba      	ldr	r2, [r7, #8]
 80025a4:	68fb      	ldr	r3, [r7, #12]
 80025a6:	4313      	orrs	r3, r2
 80025a8:	687a      	ldr	r2, [r7, #4]
 80025aa:	f892 2034 	ldrb.w	r2, [r2, #52]	@ 0x34
 80025ae:	431a      	orrs	r2, r3
 80025b0:	687b      	ldr	r3, [r7, #4]
 80025b2:	681b      	ldr	r3, [r3, #0]
 80025b4:	430a      	orrs	r2, r1
 80025b6:	62da      	str	r2, [r3, #44]	@ 0x2c

  /* Enable the Transfer Error and FIFO underrun interrupts */
  __HAL_LTDC_ENABLE_IT(hltdc, LTDC_IT_TE | LTDC_IT_FU);
 80025b8:	687b      	ldr	r3, [r7, #4]
 80025ba:	681b      	ldr	r3, [r3, #0]
 80025bc:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 80025be:	687b      	ldr	r3, [r7, #4]
 80025c0:	681b      	ldr	r3, [r3, #0]
 80025c2:	f042 0206 	orr.w	r2, r2, #6
 80025c6:	635a      	str	r2, [r3, #52]	@ 0x34

  /* Enable LTDC by setting LTDCEN bit */
  __HAL_LTDC_ENABLE(hltdc);
 80025c8:	687b      	ldr	r3, [r7, #4]
 80025ca:	681b      	ldr	r3, [r3, #0]
 80025cc:	699a      	ldr	r2, [r3, #24]
 80025ce:	687b      	ldr	r3, [r7, #4]
 80025d0:	681b      	ldr	r3, [r3, #0]
 80025d2:	f042 0201 	orr.w	r2, r2, #1
 80025d6:	619a      	str	r2, [r3, #24]

  /* Initialize the error code */
  hltdc->ErrorCode = HAL_LTDC_ERROR_NONE;
 80025d8:	687b      	ldr	r3, [r7, #4]
 80025da:	2200      	movs	r2, #0
 80025dc:	f8c3 20a4 	str.w	r2, [r3, #164]	@ 0xa4

  /* Initialize the LTDC state*/
  hltdc->State = HAL_LTDC_STATE_READY;
 80025e0:	687b      	ldr	r3, [r7, #4]
 80025e2:	2201      	movs	r2, #1
 80025e4:	f883 20a1 	strb.w	r2, [r3, #161]	@ 0xa1

  return HAL_OK;
 80025e8:	2300      	movs	r3, #0
}
 80025ea:	4618      	mov	r0, r3
 80025ec:	3710      	adds	r7, #16
 80025ee:	46bd      	mov	sp, r7
 80025f0:	bd80      	pop	{r7, pc}
 80025f2:	bf00      	nop
 80025f4:	f000f800 	.word	0xf000f800

080025f8 <HAL_LTDC_ConfigLayer>:
  *                    This parameter can be one of the following values:
  *                    LTDC_LAYER_1 (0) or LTDC_LAYER_2 (1)
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_LTDC_ConfigLayer(LTDC_HandleTypeDef *hltdc, LTDC_LayerCfgTypeDef *pLayerCfg, uint32_t LayerIdx)
{
 80025f8:	b5b0      	push	{r4, r5, r7, lr}
 80025fa:	b084      	sub	sp, #16
 80025fc:	af00      	add	r7, sp, #0
 80025fe:	60f8      	str	r0, [r7, #12]
 8002600:	60b9      	str	r1, [r7, #8]
 8002602:	607a      	str	r2, [r7, #4]
  assert_param(IS_LTDC_BLENDING_FACTOR2(pLayerCfg->BlendingFactor2));
  assert_param(IS_LTDC_CFBLL(pLayerCfg->ImageWidth));
  assert_param(IS_LTDC_CFBLNBR(pLayerCfg->ImageHeight));

  /* Process locked */
  __HAL_LOCK(hltdc);
 8002604:	68fb      	ldr	r3, [r7, #12]
 8002606:	f893 30a0 	ldrb.w	r3, [r3, #160]	@ 0xa0
 800260a:	2b01      	cmp	r3, #1
 800260c:	d101      	bne.n	8002612 <HAL_LTDC_ConfigLayer+0x1a>
 800260e:	2302      	movs	r3, #2
 8002610:	e02c      	b.n	800266c <HAL_LTDC_ConfigLayer+0x74>
 8002612:	68fb      	ldr	r3, [r7, #12]
 8002614:	2201      	movs	r2, #1
 8002616:	f883 20a0 	strb.w	r2, [r3, #160]	@ 0xa0

  /* Change LTDC peripheral state */
  hltdc->State = HAL_LTDC_STATE_BUSY;
 800261a:	68fb      	ldr	r3, [r7, #12]
 800261c:	2202      	movs	r2, #2
 800261e:	f883 20a1 	strb.w	r2, [r3, #161]	@ 0xa1

  /* Copy new layer configuration into handle structure */
  hltdc->LayerCfg[LayerIdx] = *pLayerCfg;
 8002622:	68fa      	ldr	r2, [r7, #12]
 8002624:	687b      	ldr	r3, [r7, #4]
 8002626:	2134      	movs	r1, #52	@ 0x34
 8002628:	fb01 f303 	mul.w	r3, r1, r3
 800262c:	4413      	add	r3, r2
 800262e:	f103 0238 	add.w	r2, r3, #56	@ 0x38
 8002632:	68bb      	ldr	r3, [r7, #8]
 8002634:	4614      	mov	r4, r2
 8002636:	461d      	mov	r5, r3
 8002638:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 800263a:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 800263c:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 800263e:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8002640:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8002642:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8002644:	682b      	ldr	r3, [r5, #0]
 8002646:	6023      	str	r3, [r4, #0]

  /* Configure the LTDC Layer */
  LTDC_SetConfig(hltdc, pLayerCfg, LayerIdx);
 8002648:	687a      	ldr	r2, [r7, #4]
 800264a:	68b9      	ldr	r1, [r7, #8]
 800264c:	68f8      	ldr	r0, [r7, #12]
 800264e:	f000 f811 	bl	8002674 <LTDC_SetConfig>

  /* Set the Immediate Reload type */
  hltdc->Instance->SRCR = LTDC_SRCR_IMR;
 8002652:	68fb      	ldr	r3, [r7, #12]
 8002654:	681b      	ldr	r3, [r3, #0]
 8002656:	2201      	movs	r2, #1
 8002658:	625a      	str	r2, [r3, #36]	@ 0x24

  /* Initialize the LTDC state*/
  hltdc->State  = HAL_LTDC_STATE_READY;
 800265a:	68fb      	ldr	r3, [r7, #12]
 800265c:	2201      	movs	r2, #1
 800265e:	f883 20a1 	strb.w	r2, [r3, #161]	@ 0xa1

  /* Process unlocked */
  __HAL_UNLOCK(hltdc);
 8002662:	68fb      	ldr	r3, [r7, #12]
 8002664:	2200      	movs	r2, #0
 8002666:	f883 20a0 	strb.w	r2, [r3, #160]	@ 0xa0

  return HAL_OK;
 800266a:	2300      	movs	r3, #0
}
 800266c:	4618      	mov	r0, r3
 800266e:	3710      	adds	r7, #16
 8002670:	46bd      	mov	sp, r7
 8002672:	bdb0      	pop	{r4, r5, r7, pc}

08002674 <LTDC_SetConfig>:
  * @param  LayerIdx  LTDC Layer index.
  *                   This parameter can be one of the following values: LTDC_LAYER_1 (0) or LTDC_LAYER_2 (1)
  * @retval None
  */
static void LTDC_SetConfig(LTDC_HandleTypeDef *hltdc, LTDC_LayerCfgTypeDef *pLayerCfg, uint32_t LayerIdx)
{
 8002674:	b480      	push	{r7}
 8002676:	b089      	sub	sp, #36	@ 0x24
 8002678:	af00      	add	r7, sp, #0
 800267a:	60f8      	str	r0, [r7, #12]
 800267c:	60b9      	str	r1, [r7, #8]
 800267e:	607a      	str	r2, [r7, #4]
  uint32_t tmp;
  uint32_t tmp1;
  uint32_t tmp2;

  /* Configure the horizontal start and stop position */
  tmp = ((pLayerCfg->WindowX1 + ((hltdc->Instance->BPCR & LTDC_BPCR_AHBP) >> 16U)) << 16U);
 8002680:	68bb      	ldr	r3, [r7, #8]
 8002682:	685a      	ldr	r2, [r3, #4]
 8002684:	68fb      	ldr	r3, [r7, #12]
 8002686:	681b      	ldr	r3, [r3, #0]
 8002688:	68db      	ldr	r3, [r3, #12]
 800268a:	0c1b      	lsrs	r3, r3, #16
 800268c:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8002690:	4413      	add	r3, r2
 8002692:	041b      	lsls	r3, r3, #16
 8002694:	61fb      	str	r3, [r7, #28]
  LTDC_LAYER(hltdc, LayerIdx)->WHPCR &= ~(LTDC_LxWHPCR_WHSTPOS | LTDC_LxWHPCR_WHSPPOS);
 8002696:	68fb      	ldr	r3, [r7, #12]
 8002698:	681b      	ldr	r3, [r3, #0]
 800269a:	461a      	mov	r2, r3
 800269c:	687b      	ldr	r3, [r7, #4]
 800269e:	01db      	lsls	r3, r3, #7
 80026a0:	4413      	add	r3, r2
 80026a2:	3384      	adds	r3, #132	@ 0x84
 80026a4:	685b      	ldr	r3, [r3, #4]
 80026a6:	68fa      	ldr	r2, [r7, #12]
 80026a8:	6812      	ldr	r2, [r2, #0]
 80026aa:	4611      	mov	r1, r2
 80026ac:	687a      	ldr	r2, [r7, #4]
 80026ae:	01d2      	lsls	r2, r2, #7
 80026b0:	440a      	add	r2, r1
 80026b2:	3284      	adds	r2, #132	@ 0x84
 80026b4:	f403 4370 	and.w	r3, r3, #61440	@ 0xf000
 80026b8:	6053      	str	r3, [r2, #4]
  LTDC_LAYER(hltdc, LayerIdx)->WHPCR = ((pLayerCfg->WindowX0 + \
 80026ba:	68bb      	ldr	r3, [r7, #8]
 80026bc:	681a      	ldr	r2, [r3, #0]
                                         ((hltdc->Instance->BPCR & LTDC_BPCR_AHBP) >> 16U) + 1U) | tmp);
 80026be:	68fb      	ldr	r3, [r7, #12]
 80026c0:	681b      	ldr	r3, [r3, #0]
 80026c2:	68db      	ldr	r3, [r3, #12]
 80026c4:	0c1b      	lsrs	r3, r3, #16
 80026c6:	f3c3 030b 	ubfx	r3, r3, #0, #12
  LTDC_LAYER(hltdc, LayerIdx)->WHPCR = ((pLayerCfg->WindowX0 + \
 80026ca:	4413      	add	r3, r2
                                         ((hltdc->Instance->BPCR & LTDC_BPCR_AHBP) >> 16U) + 1U) | tmp);
 80026cc:	1c5a      	adds	r2, r3, #1
  LTDC_LAYER(hltdc, LayerIdx)->WHPCR = ((pLayerCfg->WindowX0 + \
 80026ce:	68fb      	ldr	r3, [r7, #12]
 80026d0:	681b      	ldr	r3, [r3, #0]
 80026d2:	4619      	mov	r1, r3
 80026d4:	687b      	ldr	r3, [r7, #4]
 80026d6:	01db      	lsls	r3, r3, #7
 80026d8:	440b      	add	r3, r1
 80026da:	3384      	adds	r3, #132	@ 0x84
 80026dc:	4619      	mov	r1, r3
                                         ((hltdc->Instance->BPCR & LTDC_BPCR_AHBP) >> 16U) + 1U) | tmp);
 80026de:	69fb      	ldr	r3, [r7, #28]
 80026e0:	4313      	orrs	r3, r2
  LTDC_LAYER(hltdc, LayerIdx)->WHPCR = ((pLayerCfg->WindowX0 + \
 80026e2:	604b      	str	r3, [r1, #4]

  /* Configure the vertical start and stop position */
  tmp = ((pLayerCfg->WindowY1 + (hltdc->Instance->BPCR & LTDC_BPCR_AVBP)) << 16U);
 80026e4:	68bb      	ldr	r3, [r7, #8]
 80026e6:	68da      	ldr	r2, [r3, #12]
 80026e8:	68fb      	ldr	r3, [r7, #12]
 80026ea:	681b      	ldr	r3, [r3, #0]
 80026ec:	68db      	ldr	r3, [r3, #12]
 80026ee:	f3c3 030a 	ubfx	r3, r3, #0, #11
 80026f2:	4413      	add	r3, r2
 80026f4:	041b      	lsls	r3, r3, #16
 80026f6:	61fb      	str	r3, [r7, #28]
  LTDC_LAYER(hltdc, LayerIdx)->WVPCR &= ~(LTDC_LxWVPCR_WVSTPOS | LTDC_LxWVPCR_WVSPPOS);
 80026f8:	68fb      	ldr	r3, [r7, #12]
 80026fa:	681b      	ldr	r3, [r3, #0]
 80026fc:	461a      	mov	r2, r3
 80026fe:	687b      	ldr	r3, [r7, #4]
 8002700:	01db      	lsls	r3, r3, #7
 8002702:	4413      	add	r3, r2
 8002704:	3384      	adds	r3, #132	@ 0x84
 8002706:	689b      	ldr	r3, [r3, #8]
 8002708:	68fa      	ldr	r2, [r7, #12]
 800270a:	6812      	ldr	r2, [r2, #0]
 800270c:	4611      	mov	r1, r2
 800270e:	687a      	ldr	r2, [r7, #4]
 8002710:	01d2      	lsls	r2, r2, #7
 8002712:	440a      	add	r2, r1
 8002714:	3284      	adds	r2, #132	@ 0x84
 8002716:	f403 4370 	and.w	r3, r3, #61440	@ 0xf000
 800271a:	6093      	str	r3, [r2, #8]
  LTDC_LAYER(hltdc, LayerIdx)->WVPCR  = ((pLayerCfg->WindowY0 + (hltdc->Instance->BPCR & LTDC_BPCR_AVBP) + 1U) | tmp);
 800271c:	68bb      	ldr	r3, [r7, #8]
 800271e:	689a      	ldr	r2, [r3, #8]
 8002720:	68fb      	ldr	r3, [r7, #12]
 8002722:	681b      	ldr	r3, [r3, #0]
 8002724:	68db      	ldr	r3, [r3, #12]
 8002726:	f3c3 030a 	ubfx	r3, r3, #0, #11
 800272a:	4413      	add	r3, r2
 800272c:	1c5a      	adds	r2, r3, #1
 800272e:	68fb      	ldr	r3, [r7, #12]
 8002730:	681b      	ldr	r3, [r3, #0]
 8002732:	4619      	mov	r1, r3
 8002734:	687b      	ldr	r3, [r7, #4]
 8002736:	01db      	lsls	r3, r3, #7
 8002738:	440b      	add	r3, r1
 800273a:	3384      	adds	r3, #132	@ 0x84
 800273c:	4619      	mov	r1, r3
 800273e:	69fb      	ldr	r3, [r7, #28]
 8002740:	4313      	orrs	r3, r2
 8002742:	608b      	str	r3, [r1, #8]

  /* Specifies the pixel format */
  LTDC_LAYER(hltdc, LayerIdx)->PFCR &= ~(LTDC_LxPFCR_PF);
 8002744:	68fb      	ldr	r3, [r7, #12]
 8002746:	681b      	ldr	r3, [r3, #0]
 8002748:	461a      	mov	r2, r3
 800274a:	687b      	ldr	r3, [r7, #4]
 800274c:	01db      	lsls	r3, r3, #7
 800274e:	4413      	add	r3, r2
 8002750:	3384      	adds	r3, #132	@ 0x84
 8002752:	691b      	ldr	r3, [r3, #16]
 8002754:	68fa      	ldr	r2, [r7, #12]
 8002756:	6812      	ldr	r2, [r2, #0]
 8002758:	4611      	mov	r1, r2
 800275a:	687a      	ldr	r2, [r7, #4]
 800275c:	01d2      	lsls	r2, r2, #7
 800275e:	440a      	add	r2, r1
 8002760:	3284      	adds	r2, #132	@ 0x84
 8002762:	f023 0307 	bic.w	r3, r3, #7
 8002766:	6113      	str	r3, [r2, #16]
  LTDC_LAYER(hltdc, LayerIdx)->PFCR = (pLayerCfg->PixelFormat);
 8002768:	68fb      	ldr	r3, [r7, #12]
 800276a:	681b      	ldr	r3, [r3, #0]
 800276c:	461a      	mov	r2, r3
 800276e:	687b      	ldr	r3, [r7, #4]
 8002770:	01db      	lsls	r3, r3, #7
 8002772:	4413      	add	r3, r2
 8002774:	3384      	adds	r3, #132	@ 0x84
 8002776:	461a      	mov	r2, r3
 8002778:	68bb      	ldr	r3, [r7, #8]
 800277a:	691b      	ldr	r3, [r3, #16]
 800277c:	6113      	str	r3, [r2, #16]

  /* Configure the default color values */
  tmp = ((uint32_t)(pLayerCfg->Backcolor.Green) << 8U);
 800277e:	68bb      	ldr	r3, [r7, #8]
 8002780:	f893 3031 	ldrb.w	r3, [r3, #49]	@ 0x31
 8002784:	021b      	lsls	r3, r3, #8
 8002786:	61fb      	str	r3, [r7, #28]
  tmp1 = ((uint32_t)(pLayerCfg->Backcolor.Red) << 16U);
 8002788:	68bb      	ldr	r3, [r7, #8]
 800278a:	f893 3032 	ldrb.w	r3, [r3, #50]	@ 0x32
 800278e:	041b      	lsls	r3, r3, #16
 8002790:	61bb      	str	r3, [r7, #24]
  tmp2 = (pLayerCfg->Alpha0 << 24U);
 8002792:	68bb      	ldr	r3, [r7, #8]
 8002794:	699b      	ldr	r3, [r3, #24]
 8002796:	061b      	lsls	r3, r3, #24
 8002798:	617b      	str	r3, [r7, #20]
  LTDC_LAYER(hltdc, LayerIdx)->DCCR &= ~(LTDC_LxDCCR_DCBLUE | LTDC_LxDCCR_DCGREEN | LTDC_LxDCCR_DCRED |
 800279a:	68fb      	ldr	r3, [r7, #12]
 800279c:	681b      	ldr	r3, [r3, #0]
 800279e:	461a      	mov	r2, r3
 80027a0:	687b      	ldr	r3, [r7, #4]
 80027a2:	01db      	lsls	r3, r3, #7
 80027a4:	4413      	add	r3, r2
 80027a6:	3384      	adds	r3, #132	@ 0x84
 80027a8:	699b      	ldr	r3, [r3, #24]
 80027aa:	68fb      	ldr	r3, [r7, #12]
 80027ac:	681b      	ldr	r3, [r3, #0]
 80027ae:	461a      	mov	r2, r3
 80027b0:	687b      	ldr	r3, [r7, #4]
 80027b2:	01db      	lsls	r3, r3, #7
 80027b4:	4413      	add	r3, r2
 80027b6:	3384      	adds	r3, #132	@ 0x84
 80027b8:	461a      	mov	r2, r3
 80027ba:	2300      	movs	r3, #0
 80027bc:	6193      	str	r3, [r2, #24]
                                         LTDC_LxDCCR_DCALPHA);
  LTDC_LAYER(hltdc, LayerIdx)->DCCR = (pLayerCfg->Backcolor.Blue | tmp | tmp1 | tmp2);
 80027be:	68bb      	ldr	r3, [r7, #8]
 80027c0:	f893 3030 	ldrb.w	r3, [r3, #48]	@ 0x30
 80027c4:	461a      	mov	r2, r3
 80027c6:	69fb      	ldr	r3, [r7, #28]
 80027c8:	431a      	orrs	r2, r3
 80027ca:	69bb      	ldr	r3, [r7, #24]
 80027cc:	431a      	orrs	r2, r3
 80027ce:	68fb      	ldr	r3, [r7, #12]
 80027d0:	681b      	ldr	r3, [r3, #0]
 80027d2:	4619      	mov	r1, r3
 80027d4:	687b      	ldr	r3, [r7, #4]
 80027d6:	01db      	lsls	r3, r3, #7
 80027d8:	440b      	add	r3, r1
 80027da:	3384      	adds	r3, #132	@ 0x84
 80027dc:	4619      	mov	r1, r3
 80027de:	697b      	ldr	r3, [r7, #20]
 80027e0:	4313      	orrs	r3, r2
 80027e2:	618b      	str	r3, [r1, #24]

  /* Specifies the constant alpha value */
  LTDC_LAYER(hltdc, LayerIdx)->CACR &= ~(LTDC_LxCACR_CONSTA);
 80027e4:	68fb      	ldr	r3, [r7, #12]
 80027e6:	681b      	ldr	r3, [r3, #0]
 80027e8:	461a      	mov	r2, r3
 80027ea:	687b      	ldr	r3, [r7, #4]
 80027ec:	01db      	lsls	r3, r3, #7
 80027ee:	4413      	add	r3, r2
 80027f0:	3384      	adds	r3, #132	@ 0x84
 80027f2:	695b      	ldr	r3, [r3, #20]
 80027f4:	68fa      	ldr	r2, [r7, #12]
 80027f6:	6812      	ldr	r2, [r2, #0]
 80027f8:	4611      	mov	r1, r2
 80027fa:	687a      	ldr	r2, [r7, #4]
 80027fc:	01d2      	lsls	r2, r2, #7
 80027fe:	440a      	add	r2, r1
 8002800:	3284      	adds	r2, #132	@ 0x84
 8002802:	f023 03ff 	bic.w	r3, r3, #255	@ 0xff
 8002806:	6153      	str	r3, [r2, #20]
  LTDC_LAYER(hltdc, LayerIdx)->CACR = (pLayerCfg->Alpha);
 8002808:	68fb      	ldr	r3, [r7, #12]
 800280a:	681b      	ldr	r3, [r3, #0]
 800280c:	461a      	mov	r2, r3
 800280e:	687b      	ldr	r3, [r7, #4]
 8002810:	01db      	lsls	r3, r3, #7
 8002812:	4413      	add	r3, r2
 8002814:	3384      	adds	r3, #132	@ 0x84
 8002816:	461a      	mov	r2, r3
 8002818:	68bb      	ldr	r3, [r7, #8]
 800281a:	695b      	ldr	r3, [r3, #20]
 800281c:	6153      	str	r3, [r2, #20]

  /* Specifies the blending factors */
  LTDC_LAYER(hltdc, LayerIdx)->BFCR &= ~(LTDC_LxBFCR_BF2 | LTDC_LxBFCR_BF1);
 800281e:	68fb      	ldr	r3, [r7, #12]
 8002820:	681b      	ldr	r3, [r3, #0]
 8002822:	461a      	mov	r2, r3
 8002824:	687b      	ldr	r3, [r7, #4]
 8002826:	01db      	lsls	r3, r3, #7
 8002828:	4413      	add	r3, r2
 800282a:	3384      	adds	r3, #132	@ 0x84
 800282c:	69db      	ldr	r3, [r3, #28]
 800282e:	68fa      	ldr	r2, [r7, #12]
 8002830:	6812      	ldr	r2, [r2, #0]
 8002832:	4611      	mov	r1, r2
 8002834:	687a      	ldr	r2, [r7, #4]
 8002836:	01d2      	lsls	r2, r2, #7
 8002838:	440a      	add	r2, r1
 800283a:	3284      	adds	r2, #132	@ 0x84
 800283c:	f423 63e0 	bic.w	r3, r3, #1792	@ 0x700
 8002840:	f023 0307 	bic.w	r3, r3, #7
 8002844:	61d3      	str	r3, [r2, #28]
  LTDC_LAYER(hltdc, LayerIdx)->BFCR = (pLayerCfg->BlendingFactor1 | pLayerCfg->BlendingFactor2);
 8002846:	68bb      	ldr	r3, [r7, #8]
 8002848:	69da      	ldr	r2, [r3, #28]
 800284a:	68bb      	ldr	r3, [r7, #8]
 800284c:	6a1b      	ldr	r3, [r3, #32]
 800284e:	68f9      	ldr	r1, [r7, #12]
 8002850:	6809      	ldr	r1, [r1, #0]
 8002852:	4608      	mov	r0, r1
 8002854:	6879      	ldr	r1, [r7, #4]
 8002856:	01c9      	lsls	r1, r1, #7
 8002858:	4401      	add	r1, r0
 800285a:	3184      	adds	r1, #132	@ 0x84
 800285c:	4313      	orrs	r3, r2
 800285e:	61cb      	str	r3, [r1, #28]

  /* Configure the color frame buffer start address */
  LTDC_LAYER(hltdc, LayerIdx)->CFBAR &= ~(LTDC_LxCFBAR_CFBADD);
 8002860:	68fb      	ldr	r3, [r7, #12]
 8002862:	681b      	ldr	r3, [r3, #0]
 8002864:	461a      	mov	r2, r3
 8002866:	687b      	ldr	r3, [r7, #4]
 8002868:	01db      	lsls	r3, r3, #7
 800286a:	4413      	add	r3, r2
 800286c:	3384      	adds	r3, #132	@ 0x84
 800286e:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8002870:	68fb      	ldr	r3, [r7, #12]
 8002872:	681b      	ldr	r3, [r3, #0]
 8002874:	461a      	mov	r2, r3
 8002876:	687b      	ldr	r3, [r7, #4]
 8002878:	01db      	lsls	r3, r3, #7
 800287a:	4413      	add	r3, r2
 800287c:	3384      	adds	r3, #132	@ 0x84
 800287e:	461a      	mov	r2, r3
 8002880:	2300      	movs	r3, #0
 8002882:	6293      	str	r3, [r2, #40]	@ 0x28
  LTDC_LAYER(hltdc, LayerIdx)->CFBAR = (pLayerCfg->FBStartAdress);
 8002884:	68fb      	ldr	r3, [r7, #12]
 8002886:	681b      	ldr	r3, [r3, #0]
 8002888:	461a      	mov	r2, r3
 800288a:	687b      	ldr	r3, [r7, #4]
 800288c:	01db      	lsls	r3, r3, #7
 800288e:	4413      	add	r3, r2
 8002890:	3384      	adds	r3, #132	@ 0x84
 8002892:	461a      	mov	r2, r3
 8002894:	68bb      	ldr	r3, [r7, #8]
 8002896:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002898:	6293      	str	r3, [r2, #40]	@ 0x28

  if (pLayerCfg->PixelFormat == LTDC_PIXEL_FORMAT_ARGB8888)
 800289a:	68bb      	ldr	r3, [r7, #8]
 800289c:	691b      	ldr	r3, [r3, #16]
 800289e:	2b00      	cmp	r3, #0
 80028a0:	d102      	bne.n	80028a8 <LTDC_SetConfig+0x234>
  {
    tmp = 4U;
 80028a2:	2304      	movs	r3, #4
 80028a4:	61fb      	str	r3, [r7, #28]
 80028a6:	e01b      	b.n	80028e0 <LTDC_SetConfig+0x26c>
  }
  else if (pLayerCfg->PixelFormat == LTDC_PIXEL_FORMAT_RGB888)
 80028a8:	68bb      	ldr	r3, [r7, #8]
 80028aa:	691b      	ldr	r3, [r3, #16]
 80028ac:	2b01      	cmp	r3, #1
 80028ae:	d102      	bne.n	80028b6 <LTDC_SetConfig+0x242>
  {
    tmp = 3U;
 80028b0:	2303      	movs	r3, #3
 80028b2:	61fb      	str	r3, [r7, #28]
 80028b4:	e014      	b.n	80028e0 <LTDC_SetConfig+0x26c>
  }
  else if ((pLayerCfg->PixelFormat == LTDC_PIXEL_FORMAT_ARGB4444) || \
 80028b6:	68bb      	ldr	r3, [r7, #8]
 80028b8:	691b      	ldr	r3, [r3, #16]
 80028ba:	2b04      	cmp	r3, #4
 80028bc:	d00b      	beq.n	80028d6 <LTDC_SetConfig+0x262>
           (pLayerCfg->PixelFormat == LTDC_PIXEL_FORMAT_RGB565)   || \
 80028be:	68bb      	ldr	r3, [r7, #8]
 80028c0:	691b      	ldr	r3, [r3, #16]
  else if ((pLayerCfg->PixelFormat == LTDC_PIXEL_FORMAT_ARGB4444) || \
 80028c2:	2b02      	cmp	r3, #2
 80028c4:	d007      	beq.n	80028d6 <LTDC_SetConfig+0x262>
           (pLayerCfg->PixelFormat == LTDC_PIXEL_FORMAT_ARGB1555) || \
 80028c6:	68bb      	ldr	r3, [r7, #8]
 80028c8:	691b      	ldr	r3, [r3, #16]
           (pLayerCfg->PixelFormat == LTDC_PIXEL_FORMAT_RGB565)   || \
 80028ca:	2b03      	cmp	r3, #3
 80028cc:	d003      	beq.n	80028d6 <LTDC_SetConfig+0x262>
           (pLayerCfg->PixelFormat == LTDC_PIXEL_FORMAT_AL88))
 80028ce:	68bb      	ldr	r3, [r7, #8]
 80028d0:	691b      	ldr	r3, [r3, #16]
           (pLayerCfg->PixelFormat == LTDC_PIXEL_FORMAT_ARGB1555) || \
 80028d2:	2b07      	cmp	r3, #7
 80028d4:	d102      	bne.n	80028dc <LTDC_SetConfig+0x268>
  {
    tmp = 2U;
 80028d6:	2302      	movs	r3, #2
 80028d8:	61fb      	str	r3, [r7, #28]
 80028da:	e001      	b.n	80028e0 <LTDC_SetConfig+0x26c>
  }
  else
  {
    tmp = 1U;
 80028dc:	2301      	movs	r3, #1
 80028de:	61fb      	str	r3, [r7, #28]
  }

  /* Configure the color frame buffer pitch in byte */
  LTDC_LAYER(hltdc, LayerIdx)->CFBLR  &= ~(LTDC_LxCFBLR_CFBLL | LTDC_LxCFBLR_CFBP);
 80028e0:	68fb      	ldr	r3, [r7, #12]
 80028e2:	681b      	ldr	r3, [r3, #0]
 80028e4:	461a      	mov	r2, r3
 80028e6:	687b      	ldr	r3, [r7, #4]
 80028e8:	01db      	lsls	r3, r3, #7
 80028ea:	4413      	add	r3, r2
 80028ec:	3384      	adds	r3, #132	@ 0x84
 80028ee:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80028f0:	68fa      	ldr	r2, [r7, #12]
 80028f2:	6812      	ldr	r2, [r2, #0]
 80028f4:	4611      	mov	r1, r2
 80028f6:	687a      	ldr	r2, [r7, #4]
 80028f8:	01d2      	lsls	r2, r2, #7
 80028fa:	440a      	add	r2, r1
 80028fc:	3284      	adds	r2, #132	@ 0x84
 80028fe:	f003 23e0 	and.w	r3, r3, #3758153728	@ 0xe000e000
 8002902:	62d3      	str	r3, [r2, #44]	@ 0x2c
  LTDC_LAYER(hltdc, LayerIdx)->CFBLR  = (((pLayerCfg->ImageWidth * tmp) << 16U) | \
 8002904:	68bb      	ldr	r3, [r7, #8]
 8002906:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8002908:	69fa      	ldr	r2, [r7, #28]
 800290a:	fb02 f303 	mul.w	r3, r2, r3
 800290e:	041a      	lsls	r2, r3, #16
                                         (((pLayerCfg->WindowX1 - pLayerCfg->WindowX0) * tmp)  + 3U));
 8002910:	68bb      	ldr	r3, [r7, #8]
 8002912:	6859      	ldr	r1, [r3, #4]
 8002914:	68bb      	ldr	r3, [r7, #8]
 8002916:	681b      	ldr	r3, [r3, #0]
 8002918:	1acb      	subs	r3, r1, r3
 800291a:	69f9      	ldr	r1, [r7, #28]
 800291c:	fb01 f303 	mul.w	r3, r1, r3
 8002920:	3303      	adds	r3, #3
  LTDC_LAYER(hltdc, LayerIdx)->CFBLR  = (((pLayerCfg->ImageWidth * tmp) << 16U) | \
 8002922:	68f9      	ldr	r1, [r7, #12]
 8002924:	6809      	ldr	r1, [r1, #0]
 8002926:	4608      	mov	r0, r1
 8002928:	6879      	ldr	r1, [r7, #4]
 800292a:	01c9      	lsls	r1, r1, #7
 800292c:	4401      	add	r1, r0
 800292e:	3184      	adds	r1, #132	@ 0x84
 8002930:	4313      	orrs	r3, r2
 8002932:	62cb      	str	r3, [r1, #44]	@ 0x2c
  /* Configure the frame buffer line number */
  LTDC_LAYER(hltdc, LayerIdx)->CFBLNR  &= ~(LTDC_LxCFBLNR_CFBLNBR);
 8002934:	68fb      	ldr	r3, [r7, #12]
 8002936:	681b      	ldr	r3, [r3, #0]
 8002938:	461a      	mov	r2, r3
 800293a:	687b      	ldr	r3, [r7, #4]
 800293c:	01db      	lsls	r3, r3, #7
 800293e:	4413      	add	r3, r2
 8002940:	3384      	adds	r3, #132	@ 0x84
 8002942:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002944:	68fa      	ldr	r2, [r7, #12]
 8002946:	6812      	ldr	r2, [r2, #0]
 8002948:	4611      	mov	r1, r2
 800294a:	687a      	ldr	r2, [r7, #4]
 800294c:	01d2      	lsls	r2, r2, #7
 800294e:	440a      	add	r2, r1
 8002950:	3284      	adds	r2, #132	@ 0x84
 8002952:	f423 63ff 	bic.w	r3, r3, #2040	@ 0x7f8
 8002956:	f023 0307 	bic.w	r3, r3, #7
 800295a:	6313      	str	r3, [r2, #48]	@ 0x30
  LTDC_LAYER(hltdc, LayerIdx)->CFBLNR  = (pLayerCfg->ImageHeight);
 800295c:	68fb      	ldr	r3, [r7, #12]
 800295e:	681b      	ldr	r3, [r3, #0]
 8002960:	461a      	mov	r2, r3
 8002962:	687b      	ldr	r3, [r7, #4]
 8002964:	01db      	lsls	r3, r3, #7
 8002966:	4413      	add	r3, r2
 8002968:	3384      	adds	r3, #132	@ 0x84
 800296a:	461a      	mov	r2, r3
 800296c:	68bb      	ldr	r3, [r7, #8]
 800296e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8002970:	6313      	str	r3, [r2, #48]	@ 0x30

  /* Enable LTDC_Layer by setting LEN bit */
  LTDC_LAYER(hltdc, LayerIdx)->CR |= (uint32_t)LTDC_LxCR_LEN;
 8002972:	68fb      	ldr	r3, [r7, #12]
 8002974:	681b      	ldr	r3, [r3, #0]
 8002976:	461a      	mov	r2, r3
 8002978:	687b      	ldr	r3, [r7, #4]
 800297a:	01db      	lsls	r3, r3, #7
 800297c:	4413      	add	r3, r2
 800297e:	3384      	adds	r3, #132	@ 0x84
 8002980:	681b      	ldr	r3, [r3, #0]
 8002982:	68fa      	ldr	r2, [r7, #12]
 8002984:	6812      	ldr	r2, [r2, #0]
 8002986:	4611      	mov	r1, r2
 8002988:	687a      	ldr	r2, [r7, #4]
 800298a:	01d2      	lsls	r2, r2, #7
 800298c:	440a      	add	r2, r1
 800298e:	3284      	adds	r2, #132	@ 0x84
 8002990:	f043 0301 	orr.w	r3, r3, #1
 8002994:	6013      	str	r3, [r2, #0]
}
 8002996:	bf00      	nop
 8002998:	3724      	adds	r7, #36	@ 0x24
 800299a:	46bd      	mov	sp, r7
 800299c:	f85d 7b04 	ldr.w	r7, [sp], #4
 80029a0:	4770      	bx	lr
	...

080029a4 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 80029a4:	b480      	push	{r7}
 80029a6:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 80029a8:	4b03      	ldr	r3, [pc, #12]	@ (80029b8 <HAL_RCC_GetHCLKFreq+0x14>)
 80029aa:	681b      	ldr	r3, [r3, #0]
}
 80029ac:	4618      	mov	r0, r3
 80029ae:	46bd      	mov	sp, r7
 80029b0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80029b4:	4770      	bx	lr
 80029b6:	bf00      	nop
 80029b8:	20000004 	.word	0x20000004

080029bc <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 80029bc:	b580      	push	{r7, lr}
 80029be:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos]);
 80029c0:	f7ff fff0 	bl	80029a4 <HAL_RCC_GetHCLKFreq>
 80029c4:	4602      	mov	r2, r0
 80029c6:	4b05      	ldr	r3, [pc, #20]	@ (80029dc <HAL_RCC_GetPCLK1Freq+0x20>)
 80029c8:	689b      	ldr	r3, [r3, #8]
 80029ca:	0a9b      	lsrs	r3, r3, #10
 80029cc:	f003 0307 	and.w	r3, r3, #7
 80029d0:	4903      	ldr	r1, [pc, #12]	@ (80029e0 <HAL_RCC_GetPCLK1Freq+0x24>)
 80029d2:	5ccb      	ldrb	r3, [r1, r3]
 80029d4:	fa22 f303 	lsr.w	r3, r2, r3
}
 80029d8:	4618      	mov	r0, r3
 80029da:	bd80      	pop	{r7, pc}
 80029dc:	40023800 	.word	0x40023800
 80029e0:	080036d8 	.word	0x080036d8

080029e4 <HAL_RCCEx_PeriphCLKConfig>:
  *         the backup registers) and RCC_BDCR register are set to their reset values.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 80029e4:	b580      	push	{r7, lr}
 80029e6:	b086      	sub	sp, #24
 80029e8:	af00      	add	r7, sp, #0
 80029ea:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 80029ec:	2300      	movs	r3, #0
 80029ee:	617b      	str	r3, [r7, #20]
  uint32_t tmpreg1 = 0U;
 80029f0:	2300      	movs	r3, #0
 80029f2:	613b      	str	r3, [r7, #16]

  /*----------------------- SAI/I2S Configuration (PLLI2S) -------------------*/
  /*----------------------- Common configuration SAI/I2S ---------------------*/
  /* In Case of SAI or I2S Clock Configuration through PLLI2S, PLLI2SN division
     factor is common parameters for both peripherals */
  if ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == RCC_PERIPHCLK_I2S) ||
 80029f4:	687b      	ldr	r3, [r7, #4]
 80029f6:	681b      	ldr	r3, [r3, #0]
 80029f8:	f003 0301 	and.w	r3, r3, #1
 80029fc:	2b00      	cmp	r3, #0
 80029fe:	d10b      	bne.n	8002a18 <HAL_RCCEx_PeriphCLKConfig+0x34>
      (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI_PLLI2S) == RCC_PERIPHCLK_SAI_PLLI2S) ||
 8002a00:	687b      	ldr	r3, [r7, #4]
 8002a02:	681b      	ldr	r3, [r3, #0]
 8002a04:	f003 0302 	and.w	r3, r3, #2
  if ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == RCC_PERIPHCLK_I2S) ||
 8002a08:	2b00      	cmp	r3, #0
 8002a0a:	d105      	bne.n	8002a18 <HAL_RCCEx_PeriphCLKConfig+0x34>
      (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLLI2S) == RCC_PERIPHCLK_PLLI2S))
 8002a0c:	687b      	ldr	r3, [r7, #4]
 8002a0e:	681b      	ldr	r3, [r3, #0]
 8002a10:	f003 0340 	and.w	r3, r3, #64	@ 0x40
      (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI_PLLI2S) == RCC_PERIPHCLK_SAI_PLLI2S) ||
 8002a14:	2b00      	cmp	r3, #0
 8002a16:	d075      	beq.n	8002b04 <HAL_RCCEx_PeriphCLKConfig+0x120>
  {
    /* check for Parameters */
    assert_param(IS_RCC_PLLI2SN_VALUE(PeriphClkInit->PLLI2S.PLLI2SN));

    /* Disable the PLLI2S */
    __HAL_RCC_PLLI2S_DISABLE();
 8002a18:	4b91      	ldr	r3, [pc, #580]	@ (8002c60 <HAL_RCCEx_PeriphCLKConfig+0x27c>)
 8002a1a:	2200      	movs	r2, #0
 8002a1c:	601a      	str	r2, [r3, #0]
    /* Get tick */
    tickstart = HAL_GetTick();
 8002a1e:	f7fe ff73 	bl	8001908 <HAL_GetTick>
 8002a22:	6178      	str	r0, [r7, #20]
    /* Wait till PLLI2S is disabled */
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  != RESET)
 8002a24:	e008      	b.n	8002a38 <HAL_RCCEx_PeriphCLKConfig+0x54>
    {
      if ((HAL_GetTick() - tickstart) > PLLI2S_TIMEOUT_VALUE)
 8002a26:	f7fe ff6f 	bl	8001908 <HAL_GetTick>
 8002a2a:	4602      	mov	r2, r0
 8002a2c:	697b      	ldr	r3, [r7, #20]
 8002a2e:	1ad3      	subs	r3, r2, r3
 8002a30:	2b02      	cmp	r3, #2
 8002a32:	d901      	bls.n	8002a38 <HAL_RCCEx_PeriphCLKConfig+0x54>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 8002a34:	2303      	movs	r3, #3
 8002a36:	e189      	b.n	8002d4c <HAL_RCCEx_PeriphCLKConfig+0x368>
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  != RESET)
 8002a38:	4b8a      	ldr	r3, [pc, #552]	@ (8002c64 <HAL_RCCEx_PeriphCLKConfig+0x280>)
 8002a3a:	681b      	ldr	r3, [r3, #0]
 8002a3c:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 8002a40:	2b00      	cmp	r3, #0
 8002a42:	d1f0      	bne.n	8002a26 <HAL_RCCEx_PeriphCLKConfig+0x42>
    }

    /*---------------------------- I2S configuration -------------------------*/
    /* In Case of I2S Clock Configuration through PLLI2S, PLLI2SR must be added
      only for I2S configuration */
    if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == (RCC_PERIPHCLK_I2S))
 8002a44:	687b      	ldr	r3, [r7, #4]
 8002a46:	681b      	ldr	r3, [r3, #0]
 8002a48:	f003 0301 	and.w	r3, r3, #1
 8002a4c:	2b00      	cmp	r3, #0
 8002a4e:	d009      	beq.n	8002a64 <HAL_RCCEx_PeriphCLKConfig+0x80>
      /* check for Parameters */
      assert_param(IS_RCC_PLLI2SR_VALUE(PeriphClkInit->PLLI2S.PLLI2SR));
      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO = f(VCO clock) = f(PLLI2S clock input) * (PLLI2SN/PLLM) */
      /* I2SCLK = f(PLLI2S clock output) = f(VCO clock) / PLLI2SR */
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN, PeriphClkInit->PLLI2S.PLLI2SR);
 8002a50:	687b      	ldr	r3, [r7, #4]
 8002a52:	685b      	ldr	r3, [r3, #4]
 8002a54:	019a      	lsls	r2, r3, #6
 8002a56:	687b      	ldr	r3, [r7, #4]
 8002a58:	689b      	ldr	r3, [r3, #8]
 8002a5a:	071b      	lsls	r3, r3, #28
 8002a5c:	4981      	ldr	r1, [pc, #516]	@ (8002c64 <HAL_RCCEx_PeriphCLKConfig+0x280>)
 8002a5e:	4313      	orrs	r3, r2
 8002a60:	f8c1 3084 	str.w	r3, [r1, #132]	@ 0x84
    }

    /*---------------------------- SAI configuration -------------------------*/
    /* In Case of SAI Clock Configuration through PLLI2S, PLLI2SQ and PLLI2S_DIVQ must
       be added only for SAI configuration */
    if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI_PLLI2S) == (RCC_PERIPHCLK_SAI_PLLI2S))
 8002a64:	687b      	ldr	r3, [r7, #4]
 8002a66:	681b      	ldr	r3, [r3, #0]
 8002a68:	f003 0302 	and.w	r3, r3, #2
 8002a6c:	2b00      	cmp	r3, #0
 8002a6e:	d01f      	beq.n	8002ab0 <HAL_RCCEx_PeriphCLKConfig+0xcc>
      /* Check the PLLI2S division factors */
      assert_param(IS_RCC_PLLI2SQ_VALUE(PeriphClkInit->PLLI2S.PLLI2SQ));
      assert_param(IS_RCC_PLLI2S_DIVQ_VALUE(PeriphClkInit->PLLI2SDivQ));

      /* Read PLLI2SR value from PLLI2SCFGR register (this value is not need for SAI configuration) */
      tmpreg1 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SR) >> RCC_PLLI2SCFGR_PLLI2SR_Pos);
 8002a70:	4b7c      	ldr	r3, [pc, #496]	@ (8002c64 <HAL_RCCEx_PeriphCLKConfig+0x280>)
 8002a72:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 8002a76:	0f1b      	lsrs	r3, r3, #28
 8002a78:	f003 0307 	and.w	r3, r3, #7
 8002a7c:	613b      	str	r3, [r7, #16]
      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO Input  = PLL_SOURCE/PLLM */
      /* PLLI2S_VCO Output = PLLI2S_VCO Input * PLLI2SN */
      /* SAI_CLK(first level) = PLLI2S_VCO Output/PLLI2SQ */
      __HAL_RCC_PLLI2S_SAICLK_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN, PeriphClkInit->PLLI2S.PLLI2SQ, tmpreg1);
 8002a7e:	687b      	ldr	r3, [r7, #4]
 8002a80:	685b      	ldr	r3, [r3, #4]
 8002a82:	019a      	lsls	r2, r3, #6
 8002a84:	687b      	ldr	r3, [r7, #4]
 8002a86:	68db      	ldr	r3, [r3, #12]
 8002a88:	061b      	lsls	r3, r3, #24
 8002a8a:	431a      	orrs	r2, r3
 8002a8c:	693b      	ldr	r3, [r7, #16]
 8002a8e:	071b      	lsls	r3, r3, #28
 8002a90:	4974      	ldr	r1, [pc, #464]	@ (8002c64 <HAL_RCCEx_PeriphCLKConfig+0x280>)
 8002a92:	4313      	orrs	r3, r2
 8002a94:	f8c1 3084 	str.w	r3, [r1, #132]	@ 0x84
      /* SAI_CLK_x = SAI_CLK(first level)/PLLI2SDIVQ */
      __HAL_RCC_PLLI2S_PLLSAICLKDIVQ_CONFIG(PeriphClkInit->PLLI2SDivQ);
 8002a98:	4b72      	ldr	r3, [pc, #456]	@ (8002c64 <HAL_RCCEx_PeriphCLKConfig+0x280>)
 8002a9a:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 8002a9e:	f023 021f 	bic.w	r2, r3, #31
 8002aa2:	687b      	ldr	r3, [r7, #4]
 8002aa4:	69db      	ldr	r3, [r3, #28]
 8002aa6:	3b01      	subs	r3, #1
 8002aa8:	496e      	ldr	r1, [pc, #440]	@ (8002c64 <HAL_RCCEx_PeriphCLKConfig+0x280>)
 8002aaa:	4313      	orrs	r3, r2
 8002aac:	f8c1 308c 	str.w	r3, [r1, #140]	@ 0x8c
    }

    /*----------------- In Case of PLLI2S is just selected  -----------------*/
    if ((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_PLLI2S) == RCC_PERIPHCLK_PLLI2S)
 8002ab0:	687b      	ldr	r3, [r7, #4]
 8002ab2:	681b      	ldr	r3, [r3, #0]
 8002ab4:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8002ab8:	2b00      	cmp	r3, #0
 8002aba:	d00d      	beq.n	8002ad8 <HAL_RCCEx_PeriphCLKConfig+0xf4>
      /* Check for Parameters */
      assert_param(IS_RCC_PLLI2SQ_VALUE(PeriphClkInit->PLLI2S.PLLI2SQ));
      assert_param(IS_RCC_PLLI2SR_VALUE(PeriphClkInit->PLLI2S.PLLI2SR));

      /* Configure the PLLI2S multiplication and division factors */
      __HAL_RCC_PLLI2S_SAICLK_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN, PeriphClkInit->PLLI2S.PLLI2SQ,
 8002abc:	687b      	ldr	r3, [r7, #4]
 8002abe:	685b      	ldr	r3, [r3, #4]
 8002ac0:	019a      	lsls	r2, r3, #6
 8002ac2:	687b      	ldr	r3, [r7, #4]
 8002ac4:	68db      	ldr	r3, [r3, #12]
 8002ac6:	061b      	lsls	r3, r3, #24
 8002ac8:	431a      	orrs	r2, r3
 8002aca:	687b      	ldr	r3, [r7, #4]
 8002acc:	689b      	ldr	r3, [r3, #8]
 8002ace:	071b      	lsls	r3, r3, #28
 8002ad0:	4964      	ldr	r1, [pc, #400]	@ (8002c64 <HAL_RCCEx_PeriphCLKConfig+0x280>)
 8002ad2:	4313      	orrs	r3, r2
 8002ad4:	f8c1 3084 	str.w	r3, [r1, #132]	@ 0x84
                                     PeriphClkInit->PLLI2S.PLLI2SR);
    }

    /* Enable the PLLI2S */
    __HAL_RCC_PLLI2S_ENABLE();
 8002ad8:	4b61      	ldr	r3, [pc, #388]	@ (8002c60 <HAL_RCCEx_PeriphCLKConfig+0x27c>)
 8002ada:	2201      	movs	r2, #1
 8002adc:	601a      	str	r2, [r3, #0]
    /* Get tick */
    tickstart = HAL_GetTick();
 8002ade:	f7fe ff13 	bl	8001908 <HAL_GetTick>
 8002ae2:	6178      	str	r0, [r7, #20]
    /* Wait till PLLI2S is ready */
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  == RESET)
 8002ae4:	e008      	b.n	8002af8 <HAL_RCCEx_PeriphCLKConfig+0x114>
    {
      if ((HAL_GetTick() - tickstart) > PLLI2S_TIMEOUT_VALUE)
 8002ae6:	f7fe ff0f 	bl	8001908 <HAL_GetTick>
 8002aea:	4602      	mov	r2, r0
 8002aec:	697b      	ldr	r3, [r7, #20]
 8002aee:	1ad3      	subs	r3, r2, r3
 8002af0:	2b02      	cmp	r3, #2
 8002af2:	d901      	bls.n	8002af8 <HAL_RCCEx_PeriphCLKConfig+0x114>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 8002af4:	2303      	movs	r3, #3
 8002af6:	e129      	b.n	8002d4c <HAL_RCCEx_PeriphCLKConfig+0x368>
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  == RESET)
 8002af8:	4b5a      	ldr	r3, [pc, #360]	@ (8002c64 <HAL_RCCEx_PeriphCLKConfig+0x280>)
 8002afa:	681b      	ldr	r3, [r3, #0]
 8002afc:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 8002b00:	2b00      	cmp	r3, #0
 8002b02:	d0f0      	beq.n	8002ae6 <HAL_RCCEx_PeriphCLKConfig+0x102>

  /*----------------------- SAI/LTDC Configuration (PLLSAI) ------------------*/
  /*----------------------- Common configuration SAI/LTDC --------------------*/
  /* In Case of SAI or LTDC Clock Configuration through PLLSAI, PLLSAIN division
     factor is common parameters for both peripherals */
  if ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI_PLLSAI) == RCC_PERIPHCLK_SAI_PLLSAI) ||
 8002b04:	687b      	ldr	r3, [r7, #4]
 8002b06:	681b      	ldr	r3, [r3, #0]
 8002b08:	f003 0304 	and.w	r3, r3, #4
 8002b0c:	2b00      	cmp	r3, #0
 8002b0e:	d105      	bne.n	8002b1c <HAL_RCCEx_PeriphCLKConfig+0x138>
      (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LTDC) == RCC_PERIPHCLK_LTDC))
 8002b10:	687b      	ldr	r3, [r7, #4]
 8002b12:	681b      	ldr	r3, [r3, #0]
 8002b14:	f003 0308 	and.w	r3, r3, #8
  if ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI_PLLSAI) == RCC_PERIPHCLK_SAI_PLLSAI) ||
 8002b18:	2b00      	cmp	r3, #0
 8002b1a:	d079      	beq.n	8002c10 <HAL_RCCEx_PeriphCLKConfig+0x22c>
  {
    /* Check the PLLSAI division factors */
    assert_param(IS_RCC_PLLSAIN_VALUE(PeriphClkInit->PLLSAI.PLLSAIN));

    /* Disable PLLSAI Clock */
    __HAL_RCC_PLLSAI_DISABLE();
 8002b1c:	4b52      	ldr	r3, [pc, #328]	@ (8002c68 <HAL_RCCEx_PeriphCLKConfig+0x284>)
 8002b1e:	2200      	movs	r2, #0
 8002b20:	601a      	str	r2, [r3, #0]
    /* Get tick */
    tickstart = HAL_GetTick();
 8002b22:	f7fe fef1 	bl	8001908 <HAL_GetTick>
 8002b26:	6178      	str	r0, [r7, #20]
    /* Wait till PLLSAI is disabled */
    while (__HAL_RCC_PLLSAI_GET_FLAG() != RESET)
 8002b28:	e008      	b.n	8002b3c <HAL_RCCEx_PeriphCLKConfig+0x158>
    {
      if ((HAL_GetTick() - tickstart) > PLLSAI_TIMEOUT_VALUE)
 8002b2a:	f7fe feed 	bl	8001908 <HAL_GetTick>
 8002b2e:	4602      	mov	r2, r0
 8002b30:	697b      	ldr	r3, [r7, #20]
 8002b32:	1ad3      	subs	r3, r2, r3
 8002b34:	2b02      	cmp	r3, #2
 8002b36:	d901      	bls.n	8002b3c <HAL_RCCEx_PeriphCLKConfig+0x158>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 8002b38:	2303      	movs	r3, #3
 8002b3a:	e107      	b.n	8002d4c <HAL_RCCEx_PeriphCLKConfig+0x368>
    while (__HAL_RCC_PLLSAI_GET_FLAG() != RESET)
 8002b3c:	4b49      	ldr	r3, [pc, #292]	@ (8002c64 <HAL_RCCEx_PeriphCLKConfig+0x280>)
 8002b3e:	681b      	ldr	r3, [r3, #0]
 8002b40:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 8002b44:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 8002b48:	d0ef      	beq.n	8002b2a <HAL_RCCEx_PeriphCLKConfig+0x146>
    }

    /*---------------------------- SAI configuration -------------------------*/
    /* In Case of SAI Clock Configuration through PLLSAI, PLLSAIQ and PLLSAI_DIVQ must
       be added only for SAI configuration */
    if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI_PLLSAI) == (RCC_PERIPHCLK_SAI_PLLSAI))
 8002b4a:	687b      	ldr	r3, [r7, #4]
 8002b4c:	681b      	ldr	r3, [r3, #0]
 8002b4e:	f003 0304 	and.w	r3, r3, #4
 8002b52:	2b00      	cmp	r3, #0
 8002b54:	d020      	beq.n	8002b98 <HAL_RCCEx_PeriphCLKConfig+0x1b4>
    {
      assert_param(IS_RCC_PLLSAIQ_VALUE(PeriphClkInit->PLLSAI.PLLSAIQ));
      assert_param(IS_RCC_PLLSAI_DIVQ_VALUE(PeriphClkInit->PLLSAIDivQ));

      /* Read PLLSAIR value from PLLSAICFGR register (this value is not need for SAI configuration) */
      tmpreg1 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIR) >> RCC_PLLSAICFGR_PLLSAIR_Pos);
 8002b56:	4b43      	ldr	r3, [pc, #268]	@ (8002c64 <HAL_RCCEx_PeriphCLKConfig+0x280>)
 8002b58:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8002b5c:	0f1b      	lsrs	r3, r3, #28
 8002b5e:	f003 0307 	and.w	r3, r3, #7
 8002b62:	613b      	str	r3, [r7, #16]
      /* PLLSAI_VCO Input  = PLL_SOURCE/PLLM */
      /* PLLSAI_VCO Output = PLLSAI_VCO Input * PLLSAIN */
      /* SAI_CLK(first level) = PLLSAI_VCO Output/PLLSAIQ */
      __HAL_RCC_PLLSAI_CONFIG(PeriphClkInit->PLLSAI.PLLSAIN, PeriphClkInit->PLLSAI.PLLSAIQ, tmpreg1);
 8002b64:	687b      	ldr	r3, [r7, #4]
 8002b66:	691b      	ldr	r3, [r3, #16]
 8002b68:	019a      	lsls	r2, r3, #6
 8002b6a:	687b      	ldr	r3, [r7, #4]
 8002b6c:	695b      	ldr	r3, [r3, #20]
 8002b6e:	061b      	lsls	r3, r3, #24
 8002b70:	431a      	orrs	r2, r3
 8002b72:	693b      	ldr	r3, [r7, #16]
 8002b74:	071b      	lsls	r3, r3, #28
 8002b76:	493b      	ldr	r1, [pc, #236]	@ (8002c64 <HAL_RCCEx_PeriphCLKConfig+0x280>)
 8002b78:	4313      	orrs	r3, r2
 8002b7a:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
      /* SAI_CLK_x = SAI_CLK(first level)/PLLSAIDIVQ */
      __HAL_RCC_PLLSAI_PLLSAICLKDIVQ_CONFIG(PeriphClkInit->PLLSAIDivQ);
 8002b7e:	4b39      	ldr	r3, [pc, #228]	@ (8002c64 <HAL_RCCEx_PeriphCLKConfig+0x280>)
 8002b80:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 8002b84:	f423 52f8 	bic.w	r2, r3, #7936	@ 0x1f00
 8002b88:	687b      	ldr	r3, [r7, #4]
 8002b8a:	6a1b      	ldr	r3, [r3, #32]
 8002b8c:	3b01      	subs	r3, #1
 8002b8e:	021b      	lsls	r3, r3, #8
 8002b90:	4934      	ldr	r1, [pc, #208]	@ (8002c64 <HAL_RCCEx_PeriphCLKConfig+0x280>)
 8002b92:	4313      	orrs	r3, r2
 8002b94:	f8c1 308c 	str.w	r3, [r1, #140]	@ 0x8c
    }

    /*---------------------------- LTDC configuration ------------------------*/
    if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LTDC) == (RCC_PERIPHCLK_LTDC))
 8002b98:	687b      	ldr	r3, [r7, #4]
 8002b9a:	681b      	ldr	r3, [r3, #0]
 8002b9c:	f003 0308 	and.w	r3, r3, #8
 8002ba0:	2b00      	cmp	r3, #0
 8002ba2:	d01e      	beq.n	8002be2 <HAL_RCCEx_PeriphCLKConfig+0x1fe>
    {
      assert_param(IS_RCC_PLLSAIR_VALUE(PeriphClkInit->PLLSAI.PLLSAIR));
      assert_param(IS_RCC_PLLSAI_DIVR_VALUE(PeriphClkInit->PLLSAIDivR));

      /* Read PLLSAIR value from PLLSAICFGR register (this value is not need for SAI configuration) */
      tmpreg1 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIQ) >> RCC_PLLSAICFGR_PLLSAIQ_Pos);
 8002ba4:	4b2f      	ldr	r3, [pc, #188]	@ (8002c64 <HAL_RCCEx_PeriphCLKConfig+0x280>)
 8002ba6:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8002baa:	0e1b      	lsrs	r3, r3, #24
 8002bac:	f003 030f 	and.w	r3, r3, #15
 8002bb0:	613b      	str	r3, [r7, #16]
      /* PLLSAI_VCO Input  = PLL_SOURCE/PLLM */
      /* PLLSAI_VCO Output = PLLSAI_VCO Input * PLLSAIN */
      /* LTDC_CLK(first level) = PLLSAI_VCO Output/PLLSAIR */
      __HAL_RCC_PLLSAI_CONFIG(PeriphClkInit->PLLSAI.PLLSAIN, tmpreg1, PeriphClkInit->PLLSAI.PLLSAIR);
 8002bb2:	687b      	ldr	r3, [r7, #4]
 8002bb4:	691b      	ldr	r3, [r3, #16]
 8002bb6:	019a      	lsls	r2, r3, #6
 8002bb8:	693b      	ldr	r3, [r7, #16]
 8002bba:	061b      	lsls	r3, r3, #24
 8002bbc:	431a      	orrs	r2, r3
 8002bbe:	687b      	ldr	r3, [r7, #4]
 8002bc0:	699b      	ldr	r3, [r3, #24]
 8002bc2:	071b      	lsls	r3, r3, #28
 8002bc4:	4927      	ldr	r1, [pc, #156]	@ (8002c64 <HAL_RCCEx_PeriphCLKConfig+0x280>)
 8002bc6:	4313      	orrs	r3, r2
 8002bc8:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
      /* LTDC_CLK = LTDC_CLK(first level)/PLLSAIDIVR */
      __HAL_RCC_PLLSAI_PLLSAICLKDIVR_CONFIG(PeriphClkInit->PLLSAIDivR);
 8002bcc:	4b25      	ldr	r3, [pc, #148]	@ (8002c64 <HAL_RCCEx_PeriphCLKConfig+0x280>)
 8002bce:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 8002bd2:	f423 3240 	bic.w	r2, r3, #196608	@ 0x30000
 8002bd6:	687b      	ldr	r3, [r7, #4]
 8002bd8:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002bda:	4922      	ldr	r1, [pc, #136]	@ (8002c64 <HAL_RCCEx_PeriphCLKConfig+0x280>)
 8002bdc:	4313      	orrs	r3, r2
 8002bde:	f8c1 308c 	str.w	r3, [r1, #140]	@ 0x8c
    }
    /* Enable PLLSAI Clock */
    __HAL_RCC_PLLSAI_ENABLE();
 8002be2:	4b21      	ldr	r3, [pc, #132]	@ (8002c68 <HAL_RCCEx_PeriphCLKConfig+0x284>)
 8002be4:	2201      	movs	r2, #1
 8002be6:	601a      	str	r2, [r3, #0]
    /* Get tick */
    tickstart = HAL_GetTick();
 8002be8:	f7fe fe8e 	bl	8001908 <HAL_GetTick>
 8002bec:	6178      	str	r0, [r7, #20]
    /* Wait till PLLSAI is ready */
    while (__HAL_RCC_PLLSAI_GET_FLAG() == RESET)
 8002bee:	e008      	b.n	8002c02 <HAL_RCCEx_PeriphCLKConfig+0x21e>
    {
      if ((HAL_GetTick() - tickstart) > PLLSAI_TIMEOUT_VALUE)
 8002bf0:	f7fe fe8a 	bl	8001908 <HAL_GetTick>
 8002bf4:	4602      	mov	r2, r0
 8002bf6:	697b      	ldr	r3, [r7, #20]
 8002bf8:	1ad3      	subs	r3, r2, r3
 8002bfa:	2b02      	cmp	r3, #2
 8002bfc:	d901      	bls.n	8002c02 <HAL_RCCEx_PeriphCLKConfig+0x21e>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 8002bfe:	2303      	movs	r3, #3
 8002c00:	e0a4      	b.n	8002d4c <HAL_RCCEx_PeriphCLKConfig+0x368>
    while (__HAL_RCC_PLLSAI_GET_FLAG() == RESET)
 8002c02:	4b18      	ldr	r3, [pc, #96]	@ (8002c64 <HAL_RCCEx_PeriphCLKConfig+0x280>)
 8002c04:	681b      	ldr	r3, [r3, #0]
 8002c06:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 8002c0a:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 8002c0e:	d1ef      	bne.n	8002bf0 <HAL_RCCEx_PeriphCLKConfig+0x20c>
    }
  }
  /*--------------------------------------------------------------------------*/

  /*---------------------------- RTC configuration ---------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == (RCC_PERIPHCLK_RTC))
 8002c10:	687b      	ldr	r3, [r7, #4]
 8002c12:	681b      	ldr	r3, [r3, #0]
 8002c14:	f003 0320 	and.w	r3, r3, #32
 8002c18:	2b00      	cmp	r3, #0
 8002c1a:	f000 808b 	beq.w	8002d34 <HAL_RCCEx_PeriphCLKConfig+0x350>
  {
    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable Power Clock*/
    __HAL_RCC_PWR_CLK_ENABLE();
 8002c1e:	2300      	movs	r3, #0
 8002c20:	60fb      	str	r3, [r7, #12]
 8002c22:	4b10      	ldr	r3, [pc, #64]	@ (8002c64 <HAL_RCCEx_PeriphCLKConfig+0x280>)
 8002c24:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002c26:	4a0f      	ldr	r2, [pc, #60]	@ (8002c64 <HAL_RCCEx_PeriphCLKConfig+0x280>)
 8002c28:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8002c2c:	6413      	str	r3, [r2, #64]	@ 0x40
 8002c2e:	4b0d      	ldr	r3, [pc, #52]	@ (8002c64 <HAL_RCCEx_PeriphCLKConfig+0x280>)
 8002c30:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002c32:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8002c36:	60fb      	str	r3, [r7, #12]
 8002c38:	68fb      	ldr	r3, [r7, #12]

    /* Enable write access to Backup domain */
    PWR->CR |= PWR_CR_DBP;
 8002c3a:	4b0c      	ldr	r3, [pc, #48]	@ (8002c6c <HAL_RCCEx_PeriphCLKConfig+0x288>)
 8002c3c:	681b      	ldr	r3, [r3, #0]
 8002c3e:	4a0b      	ldr	r2, [pc, #44]	@ (8002c6c <HAL_RCCEx_PeriphCLKConfig+0x288>)
 8002c40:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8002c44:	6013      	str	r3, [r2, #0]

    /* Get tick */
    tickstart = HAL_GetTick();
 8002c46:	f7fe fe5f 	bl	8001908 <HAL_GetTick>
 8002c4a:	6178      	str	r0, [r7, #20]

    while ((PWR->CR & PWR_CR_DBP) == RESET)
 8002c4c:	e010      	b.n	8002c70 <HAL_RCCEx_PeriphCLKConfig+0x28c>
    {
      if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8002c4e:	f7fe fe5b 	bl	8001908 <HAL_GetTick>
 8002c52:	4602      	mov	r2, r0
 8002c54:	697b      	ldr	r3, [r7, #20]
 8002c56:	1ad3      	subs	r3, r2, r3
 8002c58:	2b02      	cmp	r3, #2
 8002c5a:	d909      	bls.n	8002c70 <HAL_RCCEx_PeriphCLKConfig+0x28c>
      {
        return HAL_TIMEOUT;
 8002c5c:	2303      	movs	r3, #3
 8002c5e:	e075      	b.n	8002d4c <HAL_RCCEx_PeriphCLKConfig+0x368>
 8002c60:	42470068 	.word	0x42470068
 8002c64:	40023800 	.word	0x40023800
 8002c68:	42470070 	.word	0x42470070
 8002c6c:	40007000 	.word	0x40007000
    while ((PWR->CR & PWR_CR_DBP) == RESET)
 8002c70:	4b38      	ldr	r3, [pc, #224]	@ (8002d54 <HAL_RCCEx_PeriphCLKConfig+0x370>)
 8002c72:	681b      	ldr	r3, [r3, #0]
 8002c74:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8002c78:	2b00      	cmp	r3, #0
 8002c7a:	d0e8      	beq.n	8002c4e <HAL_RCCEx_PeriphCLKConfig+0x26a>
      }
    }
    /* Reset the Backup domain only if the RTC Clock source selection is modified from reset value */
    tmpreg1 = (RCC->BDCR & RCC_BDCR_RTCSEL);
 8002c7c:	4b36      	ldr	r3, [pc, #216]	@ (8002d58 <HAL_RCCEx_PeriphCLKConfig+0x374>)
 8002c7e:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8002c80:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8002c84:	613b      	str	r3, [r7, #16]
    if ((tmpreg1 != 0x00000000U) && ((tmpreg1) != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL)))
 8002c86:	693b      	ldr	r3, [r7, #16]
 8002c88:	2b00      	cmp	r3, #0
 8002c8a:	d02f      	beq.n	8002cec <HAL_RCCEx_PeriphCLKConfig+0x308>
 8002c8c:	687b      	ldr	r3, [r7, #4]
 8002c8e:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8002c90:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8002c94:	693a      	ldr	r2, [r7, #16]
 8002c96:	429a      	cmp	r2, r3
 8002c98:	d028      	beq.n	8002cec <HAL_RCCEx_PeriphCLKConfig+0x308>
    {
      /* Store the content of BDCR register before the reset of Backup Domain */
      tmpreg1 = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 8002c9a:	4b2f      	ldr	r3, [pc, #188]	@ (8002d58 <HAL_RCCEx_PeriphCLKConfig+0x374>)
 8002c9c:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8002c9e:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8002ca2:	613b      	str	r3, [r7, #16]
      /* RTC Clock selection can be changed only if the Backup Domain is reset */
      __HAL_RCC_BACKUPRESET_FORCE();
 8002ca4:	4b2d      	ldr	r3, [pc, #180]	@ (8002d5c <HAL_RCCEx_PeriphCLKConfig+0x378>)
 8002ca6:	2201      	movs	r2, #1
 8002ca8:	601a      	str	r2, [r3, #0]
      __HAL_RCC_BACKUPRESET_RELEASE();
 8002caa:	4b2c      	ldr	r3, [pc, #176]	@ (8002d5c <HAL_RCCEx_PeriphCLKConfig+0x378>)
 8002cac:	2200      	movs	r2, #0
 8002cae:	601a      	str	r2, [r3, #0]
      /* Restore the Content of BDCR register */
      RCC->BDCR = tmpreg1;
 8002cb0:	4a29      	ldr	r2, [pc, #164]	@ (8002d58 <HAL_RCCEx_PeriphCLKConfig+0x374>)
 8002cb2:	693b      	ldr	r3, [r7, #16]
 8002cb4:	6713      	str	r3, [r2, #112]	@ 0x70

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if (HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSEON))
 8002cb6:	4b28      	ldr	r3, [pc, #160]	@ (8002d58 <HAL_RCCEx_PeriphCLKConfig+0x374>)
 8002cb8:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8002cba:	f003 0301 	and.w	r3, r3, #1
 8002cbe:	2b01      	cmp	r3, #1
 8002cc0:	d114      	bne.n	8002cec <HAL_RCCEx_PeriphCLKConfig+0x308>
      {
        /* Get tick */
        tickstart = HAL_GetTick();
 8002cc2:	f7fe fe21 	bl	8001908 <HAL_GetTick>
 8002cc6:	6178      	str	r0, [r7, #20]

        /* Wait till LSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8002cc8:	e00a      	b.n	8002ce0 <HAL_RCCEx_PeriphCLKConfig+0x2fc>
        {
          if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8002cca:	f7fe fe1d 	bl	8001908 <HAL_GetTick>
 8002cce:	4602      	mov	r2, r0
 8002cd0:	697b      	ldr	r3, [r7, #20]
 8002cd2:	1ad3      	subs	r3, r2, r3
 8002cd4:	f241 3288 	movw	r2, #5000	@ 0x1388
 8002cd8:	4293      	cmp	r3, r2
 8002cda:	d901      	bls.n	8002ce0 <HAL_RCCEx_PeriphCLKConfig+0x2fc>
          {
            return HAL_TIMEOUT;
 8002cdc:	2303      	movs	r3, #3
 8002cde:	e035      	b.n	8002d4c <HAL_RCCEx_PeriphCLKConfig+0x368>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8002ce0:	4b1d      	ldr	r3, [pc, #116]	@ (8002d58 <HAL_RCCEx_PeriphCLKConfig+0x374>)
 8002ce2:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8002ce4:	f003 0302 	and.w	r3, r3, #2
 8002ce8:	2b00      	cmp	r3, #0
 8002cea:	d0ee      	beq.n	8002cca <HAL_RCCEx_PeriphCLKConfig+0x2e6>
          }
        }
      }
    }
    __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 8002cec:	687b      	ldr	r3, [r7, #4]
 8002cee:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8002cf0:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8002cf4:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 8002cf8:	d10d      	bne.n	8002d16 <HAL_RCCEx_PeriphCLKConfig+0x332>
 8002cfa:	4b17      	ldr	r3, [pc, #92]	@ (8002d58 <HAL_RCCEx_PeriphCLKConfig+0x374>)
 8002cfc:	689b      	ldr	r3, [r3, #8]
 8002cfe:	f423 12f8 	bic.w	r2, r3, #2031616	@ 0x1f0000
 8002d02:	687b      	ldr	r3, [r7, #4]
 8002d04:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8002d06:	f023 4370 	bic.w	r3, r3, #4026531840	@ 0xf0000000
 8002d0a:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8002d0e:	4912      	ldr	r1, [pc, #72]	@ (8002d58 <HAL_RCCEx_PeriphCLKConfig+0x374>)
 8002d10:	4313      	orrs	r3, r2
 8002d12:	608b      	str	r3, [r1, #8]
 8002d14:	e005      	b.n	8002d22 <HAL_RCCEx_PeriphCLKConfig+0x33e>
 8002d16:	4b10      	ldr	r3, [pc, #64]	@ (8002d58 <HAL_RCCEx_PeriphCLKConfig+0x374>)
 8002d18:	689b      	ldr	r3, [r3, #8]
 8002d1a:	4a0f      	ldr	r2, [pc, #60]	@ (8002d58 <HAL_RCCEx_PeriphCLKConfig+0x374>)
 8002d1c:	f423 13f8 	bic.w	r3, r3, #2031616	@ 0x1f0000
 8002d20:	6093      	str	r3, [r2, #8]
 8002d22:	4b0d      	ldr	r3, [pc, #52]	@ (8002d58 <HAL_RCCEx_PeriphCLKConfig+0x374>)
 8002d24:	6f1a      	ldr	r2, [r3, #112]	@ 0x70
 8002d26:	687b      	ldr	r3, [r7, #4]
 8002d28:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8002d2a:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8002d2e:	490a      	ldr	r1, [pc, #40]	@ (8002d58 <HAL_RCCEx_PeriphCLKConfig+0x374>)
 8002d30:	4313      	orrs	r3, r2
 8002d32:	670b      	str	r3, [r1, #112]	@ 0x70
  }
  /*--------------------------------------------------------------------------*/

  /*---------------------------- TIM configuration ---------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM) == (RCC_PERIPHCLK_TIM))
 8002d34:	687b      	ldr	r3, [r7, #4]
 8002d36:	681b      	ldr	r3, [r3, #0]
 8002d38:	f003 0310 	and.w	r3, r3, #16
 8002d3c:	2b00      	cmp	r3, #0
 8002d3e:	d004      	beq.n	8002d4a <HAL_RCCEx_PeriphCLKConfig+0x366>
  {
    __HAL_RCC_TIMCLKPRESCALER(PeriphClkInit->TIMPresSelection);
 8002d40:	687b      	ldr	r3, [r7, #4]
 8002d42:	f893 202c 	ldrb.w	r2, [r3, #44]	@ 0x2c
 8002d46:	4b06      	ldr	r3, [pc, #24]	@ (8002d60 <HAL_RCCEx_PeriphCLKConfig+0x37c>)
 8002d48:	601a      	str	r2, [r3, #0]
  }
  return HAL_OK;
 8002d4a:	2300      	movs	r3, #0
}
 8002d4c:	4618      	mov	r0, r3
 8002d4e:	3718      	adds	r7, #24
 8002d50:	46bd      	mov	sp, r7
 8002d52:	bd80      	pop	{r7, pc}
 8002d54:	40007000 	.word	0x40007000
 8002d58:	40023800 	.word	0x40023800
 8002d5c:	42470e40 	.word	0x42470e40
 8002d60:	424711e0 	.word	0x424711e0

08002d64 <HAL_RNG_Init>:
  * @param  hrng pointer to a RNG_HandleTypeDef structure that contains
  *                the configuration information for RNG.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RNG_Init(RNG_HandleTypeDef *hrng)
{
 8002d64:	b580      	push	{r7, lr}
 8002d66:	b082      	sub	sp, #8
 8002d68:	af00      	add	r7, sp, #0
 8002d6a:	6078      	str	r0, [r7, #4]
  /* Check the RNG handle allocation */
  if (hrng == NULL)
 8002d6c:	687b      	ldr	r3, [r7, #4]
 8002d6e:	2b00      	cmp	r3, #0
 8002d70:	d101      	bne.n	8002d76 <HAL_RNG_Init+0x12>
  {
    return HAL_ERROR;
 8002d72:	2301      	movs	r3, #1
 8002d74:	e01c      	b.n	8002db0 <HAL_RNG_Init+0x4c>

    /* Init the low level hardware */
    hrng->MspInitCallback(hrng);
  }
#else
  if (hrng->State == HAL_RNG_STATE_RESET)
 8002d76:	687b      	ldr	r3, [r7, #4]
 8002d78:	795b      	ldrb	r3, [r3, #5]
 8002d7a:	b2db      	uxtb	r3, r3
 8002d7c:	2b00      	cmp	r3, #0
 8002d7e:	d105      	bne.n	8002d8c <HAL_RNG_Init+0x28>
  {
    /* Allocate lock resource and initialize it */
    hrng->Lock = HAL_UNLOCKED;
 8002d80:	687b      	ldr	r3, [r7, #4]
 8002d82:	2200      	movs	r2, #0
 8002d84:	711a      	strb	r2, [r3, #4]

    /* Init the low level hardware */
    HAL_RNG_MspInit(hrng);
 8002d86:	6878      	ldr	r0, [r7, #4]
 8002d88:	f7fe fc26 	bl	80015d8 <HAL_RNG_MspInit>
  }
#endif /* USE_HAL_RNG_REGISTER_CALLBACKS */

  /* Change RNG peripheral state */
  hrng->State = HAL_RNG_STATE_BUSY;
 8002d8c:	687b      	ldr	r3, [r7, #4]
 8002d8e:	2202      	movs	r2, #2
 8002d90:	715a      	strb	r2, [r3, #5]


  /* Enable the RNG Peripheral */
  __HAL_RNG_ENABLE(hrng);
 8002d92:	687b      	ldr	r3, [r7, #4]
 8002d94:	681b      	ldr	r3, [r3, #0]
 8002d96:	681a      	ldr	r2, [r3, #0]
 8002d98:	687b      	ldr	r3, [r7, #4]
 8002d9a:	681b      	ldr	r3, [r3, #0]
 8002d9c:	f042 0204 	orr.w	r2, r2, #4
 8002da0:	601a      	str	r2, [r3, #0]

  /* Initialize the RNG state */
  hrng->State = HAL_RNG_STATE_READY;
 8002da2:	687b      	ldr	r3, [r7, #4]
 8002da4:	2201      	movs	r2, #1
 8002da6:	715a      	strb	r2, [r3, #5]

  /* Initialise the error code */
  hrng->ErrorCode = HAL_RNG_ERROR_NONE;
 8002da8:	687b      	ldr	r3, [r7, #4]
 8002daa:	2200      	movs	r2, #0
 8002dac:	609a      	str	r2, [r3, #8]

  /* Return function status */
  return HAL_OK;
 8002dae:	2300      	movs	r3, #0
}
 8002db0:	4618      	mov	r0, r3
 8002db2:	3708      	adds	r7, #8
 8002db4:	46bd      	mov	sp, r7
 8002db6:	bd80      	pop	{r7, pc}

08002db8 <HAL_SPI_Init>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi)
{
 8002db8:	b580      	push	{r7, lr}
 8002dba:	b082      	sub	sp, #8
 8002dbc:	af00      	add	r7, sp, #0
 8002dbe:	6078      	str	r0, [r7, #4]
  /* Check the SPI handle allocation */
  if (hspi == NULL)
 8002dc0:	687b      	ldr	r3, [r7, #4]
 8002dc2:	2b00      	cmp	r3, #0
 8002dc4:	d101      	bne.n	8002dca <HAL_SPI_Init+0x12>
  {
    return HAL_ERROR;
 8002dc6:	2301      	movs	r3, #1
 8002dc8:	e07b      	b.n	8002ec2 <HAL_SPI_Init+0x10a>
  assert_param(IS_SPI_DATASIZE(hspi->Init.DataSize));
  assert_param(IS_SPI_NSS(hspi->Init.NSS));
  assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
  assert_param(IS_SPI_FIRST_BIT(hspi->Init.FirstBit));
  assert_param(IS_SPI_TIMODE(hspi->Init.TIMode));
  if (hspi->Init.TIMode == SPI_TIMODE_DISABLE)
 8002dca:	687b      	ldr	r3, [r7, #4]
 8002dcc:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002dce:	2b00      	cmp	r3, #0
 8002dd0:	d108      	bne.n	8002de4 <HAL_SPI_Init+0x2c>
  {
    assert_param(IS_SPI_CPOL(hspi->Init.CLKPolarity));
    assert_param(IS_SPI_CPHA(hspi->Init.CLKPhase));

    if (hspi->Init.Mode == SPI_MODE_MASTER)
 8002dd2:	687b      	ldr	r3, [r7, #4]
 8002dd4:	685b      	ldr	r3, [r3, #4]
 8002dd6:	f5b3 7f82 	cmp.w	r3, #260	@ 0x104
 8002dda:	d009      	beq.n	8002df0 <HAL_SPI_Init+0x38>
      assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
    }
    else
    {
      /* Baudrate prescaler not use in Motoraola Slave mode. force to default value */
      hspi->Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 8002ddc:	687b      	ldr	r3, [r7, #4]
 8002dde:	2200      	movs	r2, #0
 8002de0:	61da      	str	r2, [r3, #28]
 8002de2:	e005      	b.n	8002df0 <HAL_SPI_Init+0x38>
  else
  {
    assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));

    /* Force polarity and phase to TI protocaol requirements */
    hspi->Init.CLKPolarity = SPI_POLARITY_LOW;
 8002de4:	687b      	ldr	r3, [r7, #4]
 8002de6:	2200      	movs	r2, #0
 8002de8:	611a      	str	r2, [r3, #16]
    hspi->Init.CLKPhase    = SPI_PHASE_1EDGE;
 8002dea:	687b      	ldr	r3, [r7, #4]
 8002dec:	2200      	movs	r2, #0
 8002dee:	615a      	str	r2, [r3, #20]
  if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
  {
    assert_param(IS_SPI_CRC_POLYNOMIAL(hspi->Init.CRCPolynomial));
  }
#else
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8002df0:	687b      	ldr	r3, [r7, #4]
 8002df2:	2200      	movs	r2, #0
 8002df4:	629a      	str	r2, [r3, #40]	@ 0x28
#endif /* USE_SPI_CRC */

  if (hspi->State == HAL_SPI_STATE_RESET)
 8002df6:	687b      	ldr	r3, [r7, #4]
 8002df8:	f893 3051 	ldrb.w	r3, [r3, #81]	@ 0x51
 8002dfc:	b2db      	uxtb	r3, r3
 8002dfe:	2b00      	cmp	r3, #0
 8002e00:	d106      	bne.n	8002e10 <HAL_SPI_Init+0x58>
  {
    /* Allocate lock resource and initialize it */
    hspi->Lock = HAL_UNLOCKED;
 8002e02:	687b      	ldr	r3, [r7, #4]
 8002e04:	2200      	movs	r2, #0
 8002e06:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hspi->MspInitCallback(hspi);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SPI_MspInit(hspi);
 8002e0a:	6878      	ldr	r0, [r7, #4]
 8002e0c:	f7fe fc06 	bl	800161c <HAL_SPI_MspInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }

  hspi->State = HAL_SPI_STATE_BUSY;
 8002e10:	687b      	ldr	r3, [r7, #4]
 8002e12:	2202      	movs	r2, #2
 8002e14:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51

  /* Disable the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 8002e18:	687b      	ldr	r3, [r7, #4]
 8002e1a:	681b      	ldr	r3, [r3, #0]
 8002e1c:	681a      	ldr	r2, [r3, #0]
 8002e1e:	687b      	ldr	r3, [r7, #4]
 8002e20:	681b      	ldr	r3, [r3, #0]
 8002e22:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 8002e26:	601a      	str	r2, [r3, #0]

  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Data size, Clock polarity and phase, NSS management,
  Communication speed, First bit and CRC calculation state */
  WRITE_REG(hspi->Instance->CR1, ((hspi->Init.Mode & (SPI_CR1_MSTR | SPI_CR1_SSI)) |
 8002e28:	687b      	ldr	r3, [r7, #4]
 8002e2a:	685b      	ldr	r3, [r3, #4]
 8002e2c:	f403 7282 	and.w	r2, r3, #260	@ 0x104
 8002e30:	687b      	ldr	r3, [r7, #4]
 8002e32:	689b      	ldr	r3, [r3, #8]
 8002e34:	f403 4304 	and.w	r3, r3, #33792	@ 0x8400
 8002e38:	431a      	orrs	r2, r3
 8002e3a:	687b      	ldr	r3, [r7, #4]
 8002e3c:	68db      	ldr	r3, [r3, #12]
 8002e3e:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 8002e42:	431a      	orrs	r2, r3
 8002e44:	687b      	ldr	r3, [r7, #4]
 8002e46:	691b      	ldr	r3, [r3, #16]
 8002e48:	f003 0302 	and.w	r3, r3, #2
 8002e4c:	431a      	orrs	r2, r3
 8002e4e:	687b      	ldr	r3, [r7, #4]
 8002e50:	695b      	ldr	r3, [r3, #20]
 8002e52:	f003 0301 	and.w	r3, r3, #1
 8002e56:	431a      	orrs	r2, r3
 8002e58:	687b      	ldr	r3, [r7, #4]
 8002e5a:	699b      	ldr	r3, [r3, #24]
 8002e5c:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 8002e60:	431a      	orrs	r2, r3
 8002e62:	687b      	ldr	r3, [r7, #4]
 8002e64:	69db      	ldr	r3, [r3, #28]
 8002e66:	f003 0338 	and.w	r3, r3, #56	@ 0x38
 8002e6a:	431a      	orrs	r2, r3
 8002e6c:	687b      	ldr	r3, [r7, #4]
 8002e6e:	6a1b      	ldr	r3, [r3, #32]
 8002e70:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8002e74:	ea42 0103 	orr.w	r1, r2, r3
 8002e78:	687b      	ldr	r3, [r7, #4]
 8002e7a:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8002e7c:	f403 5200 	and.w	r2, r3, #8192	@ 0x2000
 8002e80:	687b      	ldr	r3, [r7, #4]
 8002e82:	681b      	ldr	r3, [r3, #0]
 8002e84:	430a      	orrs	r2, r1
 8002e86:	601a      	str	r2, [r3, #0]
                                  (hspi->Init.BaudRatePrescaler & SPI_CR1_BR_Msk) |
                                  (hspi->Init.FirstBit  & SPI_CR1_LSBFIRST) |
                                  (hspi->Init.CRCCalculation & SPI_CR1_CRCEN)));

  /* Configure : NSS management, TI Mode */
  WRITE_REG(hspi->Instance->CR2, (((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE) | (hspi->Init.TIMode & SPI_CR2_FRF)));
 8002e88:	687b      	ldr	r3, [r7, #4]
 8002e8a:	699b      	ldr	r3, [r3, #24]
 8002e8c:	0c1b      	lsrs	r3, r3, #16
 8002e8e:	f003 0104 	and.w	r1, r3, #4
 8002e92:	687b      	ldr	r3, [r7, #4]
 8002e94:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002e96:	f003 0210 	and.w	r2, r3, #16
 8002e9a:	687b      	ldr	r3, [r7, #4]
 8002e9c:	681b      	ldr	r3, [r3, #0]
 8002e9e:	430a      	orrs	r2, r1
 8002ea0:	605a      	str	r2, [r3, #4]
  }
#endif /* USE_SPI_CRC */

#if defined(SPI_I2SCFGR_I2SMOD)
  /* Activate the SPI mode (Make sure that I2SMOD bit in I2SCFGR register is reset) */
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
 8002ea2:	687b      	ldr	r3, [r7, #4]
 8002ea4:	681b      	ldr	r3, [r3, #0]
 8002ea6:	69da      	ldr	r2, [r3, #28]
 8002ea8:	687b      	ldr	r3, [r7, #4]
 8002eaa:	681b      	ldr	r3, [r3, #0]
 8002eac:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 8002eb0:	61da      	str	r2, [r3, #28]
#endif /* SPI_I2SCFGR_I2SMOD */

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 8002eb2:	687b      	ldr	r3, [r7, #4]
 8002eb4:	2200      	movs	r2, #0
 8002eb6:	655a      	str	r2, [r3, #84]	@ 0x54
  hspi->State     = HAL_SPI_STATE_READY;
 8002eb8:	687b      	ldr	r3, [r7, #4]
 8002eba:	2201      	movs	r2, #1
 8002ebc:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51

  return HAL_OK;
 8002ec0:	2300      	movs	r3, #0
}
 8002ec2:	4618      	mov	r0, r3
 8002ec4:	3708      	adds	r7, #8
 8002ec6:	46bd      	mov	sp, r7
 8002ec8:	bd80      	pop	{r7, pc}

08002eca <HAL_SPI_DeInit>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_DeInit(SPI_HandleTypeDef *hspi)
{
 8002eca:	b580      	push	{r7, lr}
 8002ecc:	b082      	sub	sp, #8
 8002ece:	af00      	add	r7, sp, #0
 8002ed0:	6078      	str	r0, [r7, #4]
  /* Check the SPI handle allocation */
  if (hspi == NULL)
 8002ed2:	687b      	ldr	r3, [r7, #4]
 8002ed4:	2b00      	cmp	r3, #0
 8002ed6:	d101      	bne.n	8002edc <HAL_SPI_DeInit+0x12>
  {
    return HAL_ERROR;
 8002ed8:	2301      	movs	r3, #1
 8002eda:	e01a      	b.n	8002f12 <HAL_SPI_DeInit+0x48>
  }

  /* Check SPI Instance parameter */
  assert_param(IS_SPI_ALL_INSTANCE(hspi->Instance));

  hspi->State = HAL_SPI_STATE_BUSY;
 8002edc:	687b      	ldr	r3, [r7, #4]
 8002ede:	2202      	movs	r2, #2
 8002ee0:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51

  /* Disable the SPI Peripheral Clock */
  __HAL_SPI_DISABLE(hspi);
 8002ee4:	687b      	ldr	r3, [r7, #4]
 8002ee6:	681b      	ldr	r3, [r3, #0]
 8002ee8:	681a      	ldr	r2, [r3, #0]
 8002eea:	687b      	ldr	r3, [r7, #4]
 8002eec:	681b      	ldr	r3, [r3, #0]
 8002eee:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 8002ef2:	601a      	str	r2, [r3, #0]

  /* DeInit the low level hardware: GPIO, CLOCK, NVIC... */
  hspi->MspDeInitCallback(hspi);
#else
  /* DeInit the low level hardware: GPIO, CLOCK, NVIC... */
  HAL_SPI_MspDeInit(hspi);
 8002ef4:	6878      	ldr	r0, [r7, #4]
 8002ef6:	f7fe fbd9 	bl	80016ac <HAL_SPI_MspDeInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 8002efa:	687b      	ldr	r3, [r7, #4]
 8002efc:	2200      	movs	r2, #0
 8002efe:	655a      	str	r2, [r3, #84]	@ 0x54
  hspi->State = HAL_SPI_STATE_RESET;
 8002f00:	687b      	ldr	r3, [r7, #4]
 8002f02:	2200      	movs	r2, #0
 8002f04:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51

  /* Release Lock */
  __HAL_UNLOCK(hspi);
 8002f08:	687b      	ldr	r3, [r7, #4]
 8002f0a:	2200      	movs	r2, #0
 8002f0c:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50

  return HAL_OK;
 8002f10:	2300      	movs	r3, #0
}
 8002f12:	4618      	mov	r0, r3
 8002f14:	3708      	adds	r7, #8
 8002f16:	46bd      	mov	sp, r7
 8002f18:	bd80      	pop	{r7, pc}

08002f1a <HAL_SPI_Transmit>:
  * @param  Size amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Transmit(SPI_HandleTypeDef *hspi, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8002f1a:	b580      	push	{r7, lr}
 8002f1c:	b088      	sub	sp, #32
 8002f1e:	af00      	add	r7, sp, #0
 8002f20:	60f8      	str	r0, [r7, #12]
 8002f22:	60b9      	str	r1, [r7, #8]
 8002f24:	603b      	str	r3, [r7, #0]
 8002f26:	4613      	mov	r3, r2
 8002f28:	80fb      	strh	r3, [r7, #6]

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES_OR_1LINE(hspi->Init.Direction));

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 8002f2a:	f7fe fced 	bl	8001908 <HAL_GetTick>
 8002f2e:	61f8      	str	r0, [r7, #28]
  initial_TxXferCount = Size;
 8002f30:	88fb      	ldrh	r3, [r7, #6]
 8002f32:	837b      	strh	r3, [r7, #26]

  if (hspi->State != HAL_SPI_STATE_READY)
 8002f34:	68fb      	ldr	r3, [r7, #12]
 8002f36:	f893 3051 	ldrb.w	r3, [r3, #81]	@ 0x51
 8002f3a:	b2db      	uxtb	r3, r3
 8002f3c:	2b01      	cmp	r3, #1
 8002f3e:	d001      	beq.n	8002f44 <HAL_SPI_Transmit+0x2a>
  {
    return HAL_BUSY;
 8002f40:	2302      	movs	r3, #2
 8002f42:	e12a      	b.n	800319a <HAL_SPI_Transmit+0x280>
  }

  if ((pData == NULL) || (Size == 0U))
 8002f44:	68bb      	ldr	r3, [r7, #8]
 8002f46:	2b00      	cmp	r3, #0
 8002f48:	d002      	beq.n	8002f50 <HAL_SPI_Transmit+0x36>
 8002f4a:	88fb      	ldrh	r3, [r7, #6]
 8002f4c:	2b00      	cmp	r3, #0
 8002f4e:	d101      	bne.n	8002f54 <HAL_SPI_Transmit+0x3a>
  {
    return HAL_ERROR;
 8002f50:	2301      	movs	r3, #1
 8002f52:	e122      	b.n	800319a <HAL_SPI_Transmit+0x280>
  }

  /* Process Locked */
  __HAL_LOCK(hspi);
 8002f54:	68fb      	ldr	r3, [r7, #12]
 8002f56:	f893 3050 	ldrb.w	r3, [r3, #80]	@ 0x50
 8002f5a:	2b01      	cmp	r3, #1
 8002f5c:	d101      	bne.n	8002f62 <HAL_SPI_Transmit+0x48>
 8002f5e:	2302      	movs	r3, #2
 8002f60:	e11b      	b.n	800319a <HAL_SPI_Transmit+0x280>
 8002f62:	68fb      	ldr	r3, [r7, #12]
 8002f64:	2201      	movs	r2, #1
 8002f66:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50

  /* Set the transaction information */
  hspi->State       = HAL_SPI_STATE_BUSY_TX;
 8002f6a:	68fb      	ldr	r3, [r7, #12]
 8002f6c:	2203      	movs	r2, #3
 8002f6e:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 8002f72:	68fb      	ldr	r3, [r7, #12]
 8002f74:	2200      	movs	r2, #0
 8002f76:	655a      	str	r2, [r3, #84]	@ 0x54
  hspi->pTxBuffPtr  = (const uint8_t *)pData;
 8002f78:	68fb      	ldr	r3, [r7, #12]
 8002f7a:	68ba      	ldr	r2, [r7, #8]
 8002f7c:	631a      	str	r2, [r3, #48]	@ 0x30
  hspi->TxXferSize  = Size;
 8002f7e:	68fb      	ldr	r3, [r7, #12]
 8002f80:	88fa      	ldrh	r2, [r7, #6]
 8002f82:	869a      	strh	r2, [r3, #52]	@ 0x34
  hspi->TxXferCount = Size;
 8002f84:	68fb      	ldr	r3, [r7, #12]
 8002f86:	88fa      	ldrh	r2, [r7, #6]
 8002f88:	86da      	strh	r2, [r3, #54]	@ 0x36

  /*Init field not used in handle to zero */
  hspi->pRxBuffPtr  = (uint8_t *)NULL;
 8002f8a:	68fb      	ldr	r3, [r7, #12]
 8002f8c:	2200      	movs	r2, #0
 8002f8e:	639a      	str	r2, [r3, #56]	@ 0x38
  hspi->RxXferSize  = 0U;
 8002f90:	68fb      	ldr	r3, [r7, #12]
 8002f92:	2200      	movs	r2, #0
 8002f94:	879a      	strh	r2, [r3, #60]	@ 0x3c
  hspi->RxXferCount = 0U;
 8002f96:	68fb      	ldr	r3, [r7, #12]
 8002f98:	2200      	movs	r2, #0
 8002f9a:	87da      	strh	r2, [r3, #62]	@ 0x3e
  hspi->TxISR       = NULL;
 8002f9c:	68fb      	ldr	r3, [r7, #12]
 8002f9e:	2200      	movs	r2, #0
 8002fa0:	645a      	str	r2, [r3, #68]	@ 0x44
  hspi->RxISR       = NULL;
 8002fa2:	68fb      	ldr	r3, [r7, #12]
 8002fa4:	2200      	movs	r2, #0
 8002fa6:	641a      	str	r2, [r3, #64]	@ 0x40

  /* Configure communication direction : 1Line */
  if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8002fa8:	68fb      	ldr	r3, [r7, #12]
 8002faa:	689b      	ldr	r3, [r3, #8]
 8002fac:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 8002fb0:	d10f      	bne.n	8002fd2 <HAL_SPI_Transmit+0xb8>
  {
    /* Disable SPI Peripheral before set 1Line direction (BIDIOE bit) */
    __HAL_SPI_DISABLE(hspi);
 8002fb2:	68fb      	ldr	r3, [r7, #12]
 8002fb4:	681b      	ldr	r3, [r3, #0]
 8002fb6:	681a      	ldr	r2, [r3, #0]
 8002fb8:	68fb      	ldr	r3, [r7, #12]
 8002fba:	681b      	ldr	r3, [r3, #0]
 8002fbc:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 8002fc0:	601a      	str	r2, [r3, #0]
    SPI_1LINE_TX(hspi);
 8002fc2:	68fb      	ldr	r3, [r7, #12]
 8002fc4:	681b      	ldr	r3, [r3, #0]
 8002fc6:	681a      	ldr	r2, [r3, #0]
 8002fc8:	68fb      	ldr	r3, [r7, #12]
 8002fca:	681b      	ldr	r3, [r3, #0]
 8002fcc:	f442 4280 	orr.w	r2, r2, #16384	@ 0x4000
 8002fd0:	601a      	str	r2, [r3, #0]
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 8002fd2:	68fb      	ldr	r3, [r7, #12]
 8002fd4:	681b      	ldr	r3, [r3, #0]
 8002fd6:	681b      	ldr	r3, [r3, #0]
 8002fd8:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8002fdc:	2b40      	cmp	r3, #64	@ 0x40
 8002fde:	d007      	beq.n	8002ff0 <HAL_SPI_Transmit+0xd6>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 8002fe0:	68fb      	ldr	r3, [r7, #12]
 8002fe2:	681b      	ldr	r3, [r3, #0]
 8002fe4:	681a      	ldr	r2, [r3, #0]
 8002fe6:	68fb      	ldr	r3, [r7, #12]
 8002fe8:	681b      	ldr	r3, [r3, #0]
 8002fea:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 8002fee:	601a      	str	r2, [r3, #0]
  }

  /* Transmit data in 16 Bit mode */
  if (hspi->Init.DataSize == SPI_DATASIZE_16BIT)
 8002ff0:	68fb      	ldr	r3, [r7, #12]
 8002ff2:	68db      	ldr	r3, [r3, #12]
 8002ff4:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 8002ff8:	d152      	bne.n	80030a0 <HAL_SPI_Transmit+0x186>
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8002ffa:	68fb      	ldr	r3, [r7, #12]
 8002ffc:	685b      	ldr	r3, [r3, #4]
 8002ffe:	2b00      	cmp	r3, #0
 8003000:	d002      	beq.n	8003008 <HAL_SPI_Transmit+0xee>
 8003002:	8b7b      	ldrh	r3, [r7, #26]
 8003004:	2b01      	cmp	r3, #1
 8003006:	d145      	bne.n	8003094 <HAL_SPI_Transmit+0x17a>
    {
      hspi->Instance->DR = *((const uint16_t *)hspi->pTxBuffPtr);
 8003008:	68fb      	ldr	r3, [r7, #12]
 800300a:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800300c:	881a      	ldrh	r2, [r3, #0]
 800300e:	68fb      	ldr	r3, [r7, #12]
 8003010:	681b      	ldr	r3, [r3, #0]
 8003012:	60da      	str	r2, [r3, #12]
      hspi->pTxBuffPtr += sizeof(uint16_t);
 8003014:	68fb      	ldr	r3, [r7, #12]
 8003016:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8003018:	1c9a      	adds	r2, r3, #2
 800301a:	68fb      	ldr	r3, [r7, #12]
 800301c:	631a      	str	r2, [r3, #48]	@ 0x30
      hspi->TxXferCount--;
 800301e:	68fb      	ldr	r3, [r7, #12]
 8003020:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 8003022:	b29b      	uxth	r3, r3
 8003024:	3b01      	subs	r3, #1
 8003026:	b29a      	uxth	r2, r3
 8003028:	68fb      	ldr	r3, [r7, #12]
 800302a:	86da      	strh	r2, [r3, #54]	@ 0x36
    }
    /* Transmit data in 16 Bit mode */
    while (hspi->TxXferCount > 0U)
 800302c:	e032      	b.n	8003094 <HAL_SPI_Transmit+0x17a>
    {
      /* Wait until TXE flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 800302e:	68fb      	ldr	r3, [r7, #12]
 8003030:	681b      	ldr	r3, [r3, #0]
 8003032:	689b      	ldr	r3, [r3, #8]
 8003034:	f003 0302 	and.w	r3, r3, #2
 8003038:	2b02      	cmp	r3, #2
 800303a:	d112      	bne.n	8003062 <HAL_SPI_Transmit+0x148>
      {
        hspi->Instance->DR = *((const uint16_t *)hspi->pTxBuffPtr);
 800303c:	68fb      	ldr	r3, [r7, #12]
 800303e:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8003040:	881a      	ldrh	r2, [r3, #0]
 8003042:	68fb      	ldr	r3, [r7, #12]
 8003044:	681b      	ldr	r3, [r3, #0]
 8003046:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 8003048:	68fb      	ldr	r3, [r7, #12]
 800304a:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800304c:	1c9a      	adds	r2, r3, #2
 800304e:	68fb      	ldr	r3, [r7, #12]
 8003050:	631a      	str	r2, [r3, #48]	@ 0x30
        hspi->TxXferCount--;
 8003052:	68fb      	ldr	r3, [r7, #12]
 8003054:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 8003056:	b29b      	uxth	r3, r3
 8003058:	3b01      	subs	r3, #1
 800305a:	b29a      	uxth	r2, r3
 800305c:	68fb      	ldr	r3, [r7, #12]
 800305e:	86da      	strh	r2, [r3, #54]	@ 0x36
 8003060:	e018      	b.n	8003094 <HAL_SPI_Transmit+0x17a>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 8003062:	f7fe fc51 	bl	8001908 <HAL_GetTick>
 8003066:	4602      	mov	r2, r0
 8003068:	69fb      	ldr	r3, [r7, #28]
 800306a:	1ad3      	subs	r3, r2, r3
 800306c:	683a      	ldr	r2, [r7, #0]
 800306e:	429a      	cmp	r2, r3
 8003070:	d803      	bhi.n	800307a <HAL_SPI_Transmit+0x160>
 8003072:	683b      	ldr	r3, [r7, #0]
 8003074:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003078:	d102      	bne.n	8003080 <HAL_SPI_Transmit+0x166>
 800307a:	683b      	ldr	r3, [r7, #0]
 800307c:	2b00      	cmp	r3, #0
 800307e:	d109      	bne.n	8003094 <HAL_SPI_Transmit+0x17a>
        {
          hspi->State = HAL_SPI_STATE_READY;
 8003080:	68fb      	ldr	r3, [r7, #12]
 8003082:	2201      	movs	r2, #1
 8003084:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51
          __HAL_UNLOCK(hspi);
 8003088:	68fb      	ldr	r3, [r7, #12]
 800308a:	2200      	movs	r2, #0
 800308c:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50
          return HAL_TIMEOUT;
 8003090:	2303      	movs	r3, #3
 8003092:	e082      	b.n	800319a <HAL_SPI_Transmit+0x280>
    while (hspi->TxXferCount > 0U)
 8003094:	68fb      	ldr	r3, [r7, #12]
 8003096:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 8003098:	b29b      	uxth	r3, r3
 800309a:	2b00      	cmp	r3, #0
 800309c:	d1c7      	bne.n	800302e <HAL_SPI_Transmit+0x114>
 800309e:	e053      	b.n	8003148 <HAL_SPI_Transmit+0x22e>
    }
  }
  /* Transmit data in 8 Bit mode */
  else
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 80030a0:	68fb      	ldr	r3, [r7, #12]
 80030a2:	685b      	ldr	r3, [r3, #4]
 80030a4:	2b00      	cmp	r3, #0
 80030a6:	d002      	beq.n	80030ae <HAL_SPI_Transmit+0x194>
 80030a8:	8b7b      	ldrh	r3, [r7, #26]
 80030aa:	2b01      	cmp	r3, #1
 80030ac:	d147      	bne.n	800313e <HAL_SPI_Transmit+0x224>
    {
      *((__IO uint8_t *)&hspi->Instance->DR) = *((const uint8_t *)hspi->pTxBuffPtr);
 80030ae:	68fb      	ldr	r3, [r7, #12]
 80030b0:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 80030b2:	68fb      	ldr	r3, [r7, #12]
 80030b4:	681b      	ldr	r3, [r3, #0]
 80030b6:	330c      	adds	r3, #12
 80030b8:	7812      	ldrb	r2, [r2, #0]
 80030ba:	701a      	strb	r2, [r3, #0]
      hspi->pTxBuffPtr += sizeof(uint8_t);
 80030bc:	68fb      	ldr	r3, [r7, #12]
 80030be:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80030c0:	1c5a      	adds	r2, r3, #1
 80030c2:	68fb      	ldr	r3, [r7, #12]
 80030c4:	631a      	str	r2, [r3, #48]	@ 0x30
      hspi->TxXferCount--;
 80030c6:	68fb      	ldr	r3, [r7, #12]
 80030c8:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 80030ca:	b29b      	uxth	r3, r3
 80030cc:	3b01      	subs	r3, #1
 80030ce:	b29a      	uxth	r2, r3
 80030d0:	68fb      	ldr	r3, [r7, #12]
 80030d2:	86da      	strh	r2, [r3, #54]	@ 0x36
    }
    while (hspi->TxXferCount > 0U)
 80030d4:	e033      	b.n	800313e <HAL_SPI_Transmit+0x224>
    {
      /* Wait until TXE flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 80030d6:	68fb      	ldr	r3, [r7, #12]
 80030d8:	681b      	ldr	r3, [r3, #0]
 80030da:	689b      	ldr	r3, [r3, #8]
 80030dc:	f003 0302 	and.w	r3, r3, #2
 80030e0:	2b02      	cmp	r3, #2
 80030e2:	d113      	bne.n	800310c <HAL_SPI_Transmit+0x1f2>
      {
        *((__IO uint8_t *)&hspi->Instance->DR) = *((const uint8_t *)hspi->pTxBuffPtr);
 80030e4:	68fb      	ldr	r3, [r7, #12]
 80030e6:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 80030e8:	68fb      	ldr	r3, [r7, #12]
 80030ea:	681b      	ldr	r3, [r3, #0]
 80030ec:	330c      	adds	r3, #12
 80030ee:	7812      	ldrb	r2, [r2, #0]
 80030f0:	701a      	strb	r2, [r3, #0]
        hspi->pTxBuffPtr += sizeof(uint8_t);
 80030f2:	68fb      	ldr	r3, [r7, #12]
 80030f4:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80030f6:	1c5a      	adds	r2, r3, #1
 80030f8:	68fb      	ldr	r3, [r7, #12]
 80030fa:	631a      	str	r2, [r3, #48]	@ 0x30
        hspi->TxXferCount--;
 80030fc:	68fb      	ldr	r3, [r7, #12]
 80030fe:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 8003100:	b29b      	uxth	r3, r3
 8003102:	3b01      	subs	r3, #1
 8003104:	b29a      	uxth	r2, r3
 8003106:	68fb      	ldr	r3, [r7, #12]
 8003108:	86da      	strh	r2, [r3, #54]	@ 0x36
 800310a:	e018      	b.n	800313e <HAL_SPI_Transmit+0x224>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 800310c:	f7fe fbfc 	bl	8001908 <HAL_GetTick>
 8003110:	4602      	mov	r2, r0
 8003112:	69fb      	ldr	r3, [r7, #28]
 8003114:	1ad3      	subs	r3, r2, r3
 8003116:	683a      	ldr	r2, [r7, #0]
 8003118:	429a      	cmp	r2, r3
 800311a:	d803      	bhi.n	8003124 <HAL_SPI_Transmit+0x20a>
 800311c:	683b      	ldr	r3, [r7, #0]
 800311e:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003122:	d102      	bne.n	800312a <HAL_SPI_Transmit+0x210>
 8003124:	683b      	ldr	r3, [r7, #0]
 8003126:	2b00      	cmp	r3, #0
 8003128:	d109      	bne.n	800313e <HAL_SPI_Transmit+0x224>
        {
          hspi->State = HAL_SPI_STATE_READY;
 800312a:	68fb      	ldr	r3, [r7, #12]
 800312c:	2201      	movs	r2, #1
 800312e:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51
          __HAL_UNLOCK(hspi);
 8003132:	68fb      	ldr	r3, [r7, #12]
 8003134:	2200      	movs	r2, #0
 8003136:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50
          return HAL_TIMEOUT;
 800313a:	2303      	movs	r3, #3
 800313c:	e02d      	b.n	800319a <HAL_SPI_Transmit+0x280>
    while (hspi->TxXferCount > 0U)
 800313e:	68fb      	ldr	r3, [r7, #12]
 8003140:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 8003142:	b29b      	uxth	r3, r3
 8003144:	2b00      	cmp	r3, #0
 8003146:	d1c6      	bne.n	80030d6 <HAL_SPI_Transmit+0x1bc>
    SET_BIT(hspi->Instance->CR1, SPI_CR1_CRCNEXT);
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 8003148:	69fa      	ldr	r2, [r7, #28]
 800314a:	6839      	ldr	r1, [r7, #0]
 800314c:	68f8      	ldr	r0, [r7, #12]
 800314e:	f000 f8bf 	bl	80032d0 <SPI_EndRxTxTransaction>
 8003152:	4603      	mov	r3, r0
 8003154:	2b00      	cmp	r3, #0
 8003156:	d002      	beq.n	800315e <HAL_SPI_Transmit+0x244>
  {
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 8003158:	68fb      	ldr	r3, [r7, #12]
 800315a:	2220      	movs	r2, #32
 800315c:	655a      	str	r2, [r3, #84]	@ 0x54
  }

  /* Clear overrun flag in 2 Lines communication mode because received is not read */
  if (hspi->Init.Direction == SPI_DIRECTION_2LINES)
 800315e:	68fb      	ldr	r3, [r7, #12]
 8003160:	689b      	ldr	r3, [r3, #8]
 8003162:	2b00      	cmp	r3, #0
 8003164:	d10a      	bne.n	800317c <HAL_SPI_Transmit+0x262>
  {
    __HAL_SPI_CLEAR_OVRFLAG(hspi);
 8003166:	2300      	movs	r3, #0
 8003168:	617b      	str	r3, [r7, #20]
 800316a:	68fb      	ldr	r3, [r7, #12]
 800316c:	681b      	ldr	r3, [r3, #0]
 800316e:	68db      	ldr	r3, [r3, #12]
 8003170:	617b      	str	r3, [r7, #20]
 8003172:	68fb      	ldr	r3, [r7, #12]
 8003174:	681b      	ldr	r3, [r3, #0]
 8003176:	689b      	ldr	r3, [r3, #8]
 8003178:	617b      	str	r3, [r7, #20]
 800317a:	697b      	ldr	r3, [r7, #20]
  }

  hspi->State = HAL_SPI_STATE_READY;
 800317c:	68fb      	ldr	r3, [r7, #12]
 800317e:	2201      	movs	r2, #1
 8003180:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51
  /* Process Unlocked */
  __HAL_UNLOCK(hspi);
 8003184:	68fb      	ldr	r3, [r7, #12]
 8003186:	2200      	movs	r2, #0
 8003188:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50

  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 800318c:	68fb      	ldr	r3, [r7, #12]
 800318e:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8003190:	2b00      	cmp	r3, #0
 8003192:	d001      	beq.n	8003198 <HAL_SPI_Transmit+0x27e>
  {
    return HAL_ERROR;
 8003194:	2301      	movs	r3, #1
 8003196:	e000      	b.n	800319a <HAL_SPI_Transmit+0x280>
  }
  else
  {
    return HAL_OK;
 8003198:	2300      	movs	r3, #0
  }
}
 800319a:	4618      	mov	r0, r3
 800319c:	3720      	adds	r7, #32
 800319e:	46bd      	mov	sp, r7
 80031a0:	bd80      	pop	{r7, pc}

080031a2 <HAL_SPI_GetState>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval SPI state
  */
HAL_SPI_StateTypeDef HAL_SPI_GetState(const SPI_HandleTypeDef *hspi)
{
 80031a2:	b480      	push	{r7}
 80031a4:	b083      	sub	sp, #12
 80031a6:	af00      	add	r7, sp, #0
 80031a8:	6078      	str	r0, [r7, #4]
  /* Return SPI handle state */
  return hspi->State;
 80031aa:	687b      	ldr	r3, [r7, #4]
 80031ac:	f893 3051 	ldrb.w	r3, [r3, #81]	@ 0x51
 80031b0:	b2db      	uxtb	r3, r3
}
 80031b2:	4618      	mov	r0, r3
 80031b4:	370c      	adds	r7, #12
 80031b6:	46bd      	mov	sp, r7
 80031b8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80031bc:	4770      	bx	lr
	...

080031c0 <SPI_WaitFlagStateUntilTimeout>:
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_WaitFlagStateUntilTimeout(SPI_HandleTypeDef *hspi, uint32_t Flag, FlagStatus State,
                                                       uint32_t Timeout, uint32_t Tickstart)
{
 80031c0:	b580      	push	{r7, lr}
 80031c2:	b088      	sub	sp, #32
 80031c4:	af00      	add	r7, sp, #0
 80031c6:	60f8      	str	r0, [r7, #12]
 80031c8:	60b9      	str	r1, [r7, #8]
 80031ca:	603b      	str	r3, [r7, #0]
 80031cc:	4613      	mov	r3, r2
 80031ce:	71fb      	strb	r3, [r7, #7]
  __IO uint32_t count;
  uint32_t tmp_timeout;
  uint32_t tmp_tickstart;

  /* Adjust Timeout value  in case of end of transfer */
  tmp_timeout   = Timeout - (HAL_GetTick() - Tickstart);
 80031d0:	f7fe fb9a 	bl	8001908 <HAL_GetTick>
 80031d4:	4602      	mov	r2, r0
 80031d6:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80031d8:	1a9b      	subs	r3, r3, r2
 80031da:	683a      	ldr	r2, [r7, #0]
 80031dc:	4413      	add	r3, r2
 80031de:	61fb      	str	r3, [r7, #28]
  tmp_tickstart = HAL_GetTick();
 80031e0:	f7fe fb92 	bl	8001908 <HAL_GetTick>
 80031e4:	61b8      	str	r0, [r7, #24]

  /* Calculate Timeout based on a software loop to avoid blocking issue if Systick is disabled */
  count = tmp_timeout * ((SystemCoreClock * 32U) >> 20U);
 80031e6:	4b39      	ldr	r3, [pc, #228]	@ (80032cc <SPI_WaitFlagStateUntilTimeout+0x10c>)
 80031e8:	681b      	ldr	r3, [r3, #0]
 80031ea:	015b      	lsls	r3, r3, #5
 80031ec:	0d1b      	lsrs	r3, r3, #20
 80031ee:	69fa      	ldr	r2, [r7, #28]
 80031f0:	fb02 f303 	mul.w	r3, r2, r3
 80031f4:	617b      	str	r3, [r7, #20]

  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 80031f6:	e054      	b.n	80032a2 <SPI_WaitFlagStateUntilTimeout+0xe2>
  {
    if (Timeout != HAL_MAX_DELAY)
 80031f8:	683b      	ldr	r3, [r7, #0]
 80031fa:	f1b3 3fff 	cmp.w	r3, #4294967295
 80031fe:	d050      	beq.n	80032a2 <SPI_WaitFlagStateUntilTimeout+0xe2>
    {
      if (((HAL_GetTick() - tmp_tickstart) >= tmp_timeout) || (tmp_timeout == 0U))
 8003200:	f7fe fb82 	bl	8001908 <HAL_GetTick>
 8003204:	4602      	mov	r2, r0
 8003206:	69bb      	ldr	r3, [r7, #24]
 8003208:	1ad3      	subs	r3, r2, r3
 800320a:	69fa      	ldr	r2, [r7, #28]
 800320c:	429a      	cmp	r2, r3
 800320e:	d902      	bls.n	8003216 <SPI_WaitFlagStateUntilTimeout+0x56>
 8003210:	69fb      	ldr	r3, [r7, #28]
 8003212:	2b00      	cmp	r3, #0
 8003214:	d13d      	bne.n	8003292 <SPI_WaitFlagStateUntilTimeout+0xd2>
        /* Disable the SPI and reset the CRC: the CRC value should be cleared
           on both master and slave sides in order to resynchronize the master
           and slave for their respective CRC calculation */

        /* Disable TXE, RXNE and ERR interrupts for the interrupt process */
        __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_RXNE | SPI_IT_ERR));
 8003216:	68fb      	ldr	r3, [r7, #12]
 8003218:	681b      	ldr	r3, [r3, #0]
 800321a:	685a      	ldr	r2, [r3, #4]
 800321c:	68fb      	ldr	r3, [r7, #12]
 800321e:	681b      	ldr	r3, [r3, #0]
 8003220:	f022 02e0 	bic.w	r2, r2, #224	@ 0xe0
 8003224:	605a      	str	r2, [r3, #4]

        if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8003226:	68fb      	ldr	r3, [r7, #12]
 8003228:	685b      	ldr	r3, [r3, #4]
 800322a:	f5b3 7f82 	cmp.w	r3, #260	@ 0x104
 800322e:	d111      	bne.n	8003254 <SPI_WaitFlagStateUntilTimeout+0x94>
 8003230:	68fb      	ldr	r3, [r7, #12]
 8003232:	689b      	ldr	r3, [r3, #8]
 8003234:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 8003238:	d004      	beq.n	8003244 <SPI_WaitFlagStateUntilTimeout+0x84>
                                                     || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 800323a:	68fb      	ldr	r3, [r7, #12]
 800323c:	689b      	ldr	r3, [r3, #8]
 800323e:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8003242:	d107      	bne.n	8003254 <SPI_WaitFlagStateUntilTimeout+0x94>
        {
          /* Disable SPI peripheral */
          __HAL_SPI_DISABLE(hspi);
 8003244:	68fb      	ldr	r3, [r7, #12]
 8003246:	681b      	ldr	r3, [r3, #0]
 8003248:	681a      	ldr	r2, [r3, #0]
 800324a:	68fb      	ldr	r3, [r7, #12]
 800324c:	681b      	ldr	r3, [r3, #0]
 800324e:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 8003252:	601a      	str	r2, [r3, #0]
        }

        /* Reset CRC Calculation */
        if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 8003254:	68fb      	ldr	r3, [r7, #12]
 8003256:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8003258:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 800325c:	d10f      	bne.n	800327e <SPI_WaitFlagStateUntilTimeout+0xbe>
        {
          SPI_RESET_CRC(hspi);
 800325e:	68fb      	ldr	r3, [r7, #12]
 8003260:	681b      	ldr	r3, [r3, #0]
 8003262:	681a      	ldr	r2, [r3, #0]
 8003264:	68fb      	ldr	r3, [r7, #12]
 8003266:	681b      	ldr	r3, [r3, #0]
 8003268:	f422 5200 	bic.w	r2, r2, #8192	@ 0x2000
 800326c:	601a      	str	r2, [r3, #0]
 800326e:	68fb      	ldr	r3, [r7, #12]
 8003270:	681b      	ldr	r3, [r3, #0]
 8003272:	681a      	ldr	r2, [r3, #0]
 8003274:	68fb      	ldr	r3, [r7, #12]
 8003276:	681b      	ldr	r3, [r3, #0]
 8003278:	f442 5200 	orr.w	r2, r2, #8192	@ 0x2000
 800327c:	601a      	str	r2, [r3, #0]
        }

        hspi->State = HAL_SPI_STATE_READY;
 800327e:	68fb      	ldr	r3, [r7, #12]
 8003280:	2201      	movs	r2, #1
 8003282:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51

        /* Process Unlocked */
        __HAL_UNLOCK(hspi);
 8003286:	68fb      	ldr	r3, [r7, #12]
 8003288:	2200      	movs	r2, #0
 800328a:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50

        return HAL_TIMEOUT;
 800328e:	2303      	movs	r3, #3
 8003290:	e017      	b.n	80032c2 <SPI_WaitFlagStateUntilTimeout+0x102>
      }
      /* If Systick is disabled or not incremented, deactivate timeout to go in disable loop procedure */
      if (count == 0U)
 8003292:	697b      	ldr	r3, [r7, #20]
 8003294:	2b00      	cmp	r3, #0
 8003296:	d101      	bne.n	800329c <SPI_WaitFlagStateUntilTimeout+0xdc>
      {
        tmp_timeout = 0U;
 8003298:	2300      	movs	r3, #0
 800329a:	61fb      	str	r3, [r7, #28]
      }
      count--;
 800329c:	697b      	ldr	r3, [r7, #20]
 800329e:	3b01      	subs	r3, #1
 80032a0:	617b      	str	r3, [r7, #20]
  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 80032a2:	68fb      	ldr	r3, [r7, #12]
 80032a4:	681b      	ldr	r3, [r3, #0]
 80032a6:	689a      	ldr	r2, [r3, #8]
 80032a8:	68bb      	ldr	r3, [r7, #8]
 80032aa:	4013      	ands	r3, r2
 80032ac:	68ba      	ldr	r2, [r7, #8]
 80032ae:	429a      	cmp	r2, r3
 80032b0:	bf0c      	ite	eq
 80032b2:	2301      	moveq	r3, #1
 80032b4:	2300      	movne	r3, #0
 80032b6:	b2db      	uxtb	r3, r3
 80032b8:	461a      	mov	r2, r3
 80032ba:	79fb      	ldrb	r3, [r7, #7]
 80032bc:	429a      	cmp	r2, r3
 80032be:	d19b      	bne.n	80031f8 <SPI_WaitFlagStateUntilTimeout+0x38>
    }
  }

  return HAL_OK;
 80032c0:	2300      	movs	r3, #0
}
 80032c2:	4618      	mov	r0, r3
 80032c4:	3720      	adds	r7, #32
 80032c6:	46bd      	mov	sp, r7
 80032c8:	bd80      	pop	{r7, pc}
 80032ca:	bf00      	nop
 80032cc:	20000004 	.word	0x20000004

080032d0 <SPI_EndRxTxTransaction>:
  * @param  Timeout Timeout duration
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_EndRxTxTransaction(SPI_HandleTypeDef *hspi, uint32_t Timeout, uint32_t Tickstart)
{
 80032d0:	b580      	push	{r7, lr}
 80032d2:	b088      	sub	sp, #32
 80032d4:	af02      	add	r7, sp, #8
 80032d6:	60f8      	str	r0, [r7, #12]
 80032d8:	60b9      	str	r1, [r7, #8]
 80032da:	607a      	str	r2, [r7, #4]
  /* Wait until TXE flag */
  if(SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_TXE, SET, Timeout, Tickstart) != HAL_OK)
 80032dc:	687b      	ldr	r3, [r7, #4]
 80032de:	9300      	str	r3, [sp, #0]
 80032e0:	68bb      	ldr	r3, [r7, #8]
 80032e2:	2201      	movs	r2, #1
 80032e4:	2102      	movs	r1, #2
 80032e6:	68f8      	ldr	r0, [r7, #12]
 80032e8:	f7ff ff6a 	bl	80031c0 <SPI_WaitFlagStateUntilTimeout>
 80032ec:	4603      	mov	r3, r0
 80032ee:	2b00      	cmp	r3, #0
 80032f0:	d007      	beq.n	8003302 <SPI_EndRxTxTransaction+0x32>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 80032f2:	68fb      	ldr	r3, [r7, #12]
 80032f4:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80032f6:	f043 0220 	orr.w	r2, r3, #32
 80032fa:	68fb      	ldr	r3, [r7, #12]
 80032fc:	655a      	str	r2, [r3, #84]	@ 0x54
    return HAL_TIMEOUT;
 80032fe:	2303      	movs	r3, #3
 8003300:	e032      	b.n	8003368 <SPI_EndRxTxTransaction+0x98>
  }

  /* Timeout in µs */
  __IO uint32_t count = SPI_BSY_FLAG_WORKAROUND_TIMEOUT * (SystemCoreClock / 24U / 1000000U);
 8003302:	4b1b      	ldr	r3, [pc, #108]	@ (8003370 <SPI_EndRxTxTransaction+0xa0>)
 8003304:	681b      	ldr	r3, [r3, #0]
 8003306:	4a1b      	ldr	r2, [pc, #108]	@ (8003374 <SPI_EndRxTxTransaction+0xa4>)
 8003308:	fba2 2303 	umull	r2, r3, r2, r3
 800330c:	0d5b      	lsrs	r3, r3, #21
 800330e:	f44f 727a 	mov.w	r2, #1000	@ 0x3e8
 8003312:	fb02 f303 	mul.w	r3, r2, r3
 8003316:	617b      	str	r3, [r7, #20]
  /* Erratasheet: BSY bit may stay high at the end of a data transfer in Slave mode */
  if (hspi->Init.Mode == SPI_MODE_MASTER)
 8003318:	68fb      	ldr	r3, [r7, #12]
 800331a:	685b      	ldr	r3, [r3, #4]
 800331c:	f5b3 7f82 	cmp.w	r3, #260	@ 0x104
 8003320:	d112      	bne.n	8003348 <SPI_EndRxTxTransaction+0x78>
  {
    /* Control the BSY flag */
    if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_BSY, RESET, Timeout, Tickstart) != HAL_OK)
 8003322:	687b      	ldr	r3, [r7, #4]
 8003324:	9300      	str	r3, [sp, #0]
 8003326:	68bb      	ldr	r3, [r7, #8]
 8003328:	2200      	movs	r2, #0
 800332a:	2180      	movs	r1, #128	@ 0x80
 800332c:	68f8      	ldr	r0, [r7, #12]
 800332e:	f7ff ff47 	bl	80031c0 <SPI_WaitFlagStateUntilTimeout>
 8003332:	4603      	mov	r3, r0
 8003334:	2b00      	cmp	r3, #0
 8003336:	d016      	beq.n	8003366 <SPI_EndRxTxTransaction+0x96>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8003338:	68fb      	ldr	r3, [r7, #12]
 800333a:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800333c:	f043 0220 	orr.w	r2, r3, #32
 8003340:	68fb      	ldr	r3, [r7, #12]
 8003342:	655a      	str	r2, [r3, #84]	@ 0x54
      return HAL_TIMEOUT;
 8003344:	2303      	movs	r3, #3
 8003346:	e00f      	b.n	8003368 <SPI_EndRxTxTransaction+0x98>
    * User have to calculate the timeout value to fit with the time of 1 byte transfer.
    * This time is directly link with the SPI clock from Master device.
    */
    do
    {
      if (count == 0U)
 8003348:	697b      	ldr	r3, [r7, #20]
 800334a:	2b00      	cmp	r3, #0
 800334c:	d00a      	beq.n	8003364 <SPI_EndRxTxTransaction+0x94>
      {
        break;
      }
      count--;
 800334e:	697b      	ldr	r3, [r7, #20]
 8003350:	3b01      	subs	r3, #1
 8003352:	617b      	str	r3, [r7, #20]
    } while (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_BSY) != RESET);
 8003354:	68fb      	ldr	r3, [r7, #12]
 8003356:	681b      	ldr	r3, [r3, #0]
 8003358:	689b      	ldr	r3, [r3, #8]
 800335a:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800335e:	2b80      	cmp	r3, #128	@ 0x80
 8003360:	d0f2      	beq.n	8003348 <SPI_EndRxTxTransaction+0x78>
 8003362:	e000      	b.n	8003366 <SPI_EndRxTxTransaction+0x96>
        break;
 8003364:	bf00      	nop
  }

  return HAL_OK;
 8003366:	2300      	movs	r3, #0
}
 8003368:	4618      	mov	r0, r3
 800336a:	3718      	adds	r7, #24
 800336c:	46bd      	mov	sp, r7
 800336e:	bd80      	pop	{r7, pc}
 8003370:	20000004 	.word	0x20000004
 8003374:	165e9f81 	.word	0x165e9f81

08003378 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8003378:	b580      	push	{r7, lr}
 800337a:	b082      	sub	sp, #8
 800337c:	af00      	add	r7, sp, #0
 800337e:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8003380:	687b      	ldr	r3, [r7, #4]
 8003382:	2b00      	cmp	r3, #0
 8003384:	d101      	bne.n	800338a <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 8003386:	2301      	movs	r3, #1
 8003388:	e041      	b.n	800340e <HAL_TIM_Base_Init+0x96>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 800338a:	687b      	ldr	r3, [r7, #4]
 800338c:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8003390:	b2db      	uxtb	r3, r3
 8003392:	2b00      	cmp	r3, #0
 8003394:	d106      	bne.n	80033a4 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8003396:	687b      	ldr	r3, [r7, #4]
 8003398:	2200      	movs	r2, #0
 800339a:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 800339e:	6878      	ldr	r0, [r7, #4]
 80033a0:	f7fe f9a2 	bl	80016e8 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 80033a4:	687b      	ldr	r3, [r7, #4]
 80033a6:	2202      	movs	r2, #2
 80033a8:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 80033ac:	687b      	ldr	r3, [r7, #4]
 80033ae:	681a      	ldr	r2, [r3, #0]
 80033b0:	687b      	ldr	r3, [r7, #4]
 80033b2:	3304      	adds	r3, #4
 80033b4:	4619      	mov	r1, r3
 80033b6:	4610      	mov	r0, r2
 80033b8:	f000 f82e 	bl	8003418 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 80033bc:	687b      	ldr	r3, [r7, #4]
 80033be:	2201      	movs	r2, #1
 80033c0:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80033c4:	687b      	ldr	r3, [r7, #4]
 80033c6:	2201      	movs	r2, #1
 80033c8:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 80033cc:	687b      	ldr	r3, [r7, #4]
 80033ce:	2201      	movs	r2, #1
 80033d0:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 80033d4:	687b      	ldr	r3, [r7, #4]
 80033d6:	2201      	movs	r2, #1
 80033d8:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 80033dc:	687b      	ldr	r3, [r7, #4]
 80033de:	2201      	movs	r2, #1
 80033e0:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80033e4:	687b      	ldr	r3, [r7, #4]
 80033e6:	2201      	movs	r2, #1
 80033e8:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 80033ec:	687b      	ldr	r3, [r7, #4]
 80033ee:	2201      	movs	r2, #1
 80033f0:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
 80033f4:	687b      	ldr	r3, [r7, #4]
 80033f6:	2201      	movs	r2, #1
 80033f8:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 80033fc:	687b      	ldr	r3, [r7, #4]
 80033fe:	2201      	movs	r2, #1
 8003400:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8003404:	687b      	ldr	r3, [r7, #4]
 8003406:	2201      	movs	r2, #1
 8003408:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  return HAL_OK;
 800340c:	2300      	movs	r3, #0
}
 800340e:	4618      	mov	r0, r3
 8003410:	3708      	adds	r7, #8
 8003412:	46bd      	mov	sp, r7
 8003414:	bd80      	pop	{r7, pc}
	...

08003418 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, const TIM_Base_InitTypeDef *Structure)
{
 8003418:	b480      	push	{r7}
 800341a:	b085      	sub	sp, #20
 800341c:	af00      	add	r7, sp, #0
 800341e:	6078      	str	r0, [r7, #4]
 8003420:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8003422:	687b      	ldr	r3, [r7, #4]
 8003424:	681b      	ldr	r3, [r3, #0]
 8003426:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8003428:	687b      	ldr	r3, [r7, #4]
 800342a:	4a46      	ldr	r2, [pc, #280]	@ (8003544 <TIM_Base_SetConfig+0x12c>)
 800342c:	4293      	cmp	r3, r2
 800342e:	d013      	beq.n	8003458 <TIM_Base_SetConfig+0x40>
 8003430:	687b      	ldr	r3, [r7, #4]
 8003432:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8003436:	d00f      	beq.n	8003458 <TIM_Base_SetConfig+0x40>
 8003438:	687b      	ldr	r3, [r7, #4]
 800343a:	4a43      	ldr	r2, [pc, #268]	@ (8003548 <TIM_Base_SetConfig+0x130>)
 800343c:	4293      	cmp	r3, r2
 800343e:	d00b      	beq.n	8003458 <TIM_Base_SetConfig+0x40>
 8003440:	687b      	ldr	r3, [r7, #4]
 8003442:	4a42      	ldr	r2, [pc, #264]	@ (800354c <TIM_Base_SetConfig+0x134>)
 8003444:	4293      	cmp	r3, r2
 8003446:	d007      	beq.n	8003458 <TIM_Base_SetConfig+0x40>
 8003448:	687b      	ldr	r3, [r7, #4]
 800344a:	4a41      	ldr	r2, [pc, #260]	@ (8003550 <TIM_Base_SetConfig+0x138>)
 800344c:	4293      	cmp	r3, r2
 800344e:	d003      	beq.n	8003458 <TIM_Base_SetConfig+0x40>
 8003450:	687b      	ldr	r3, [r7, #4]
 8003452:	4a40      	ldr	r2, [pc, #256]	@ (8003554 <TIM_Base_SetConfig+0x13c>)
 8003454:	4293      	cmp	r3, r2
 8003456:	d108      	bne.n	800346a <TIM_Base_SetConfig+0x52>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8003458:	68fb      	ldr	r3, [r7, #12]
 800345a:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 800345e:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8003460:	683b      	ldr	r3, [r7, #0]
 8003462:	685b      	ldr	r3, [r3, #4]
 8003464:	68fa      	ldr	r2, [r7, #12]
 8003466:	4313      	orrs	r3, r2
 8003468:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 800346a:	687b      	ldr	r3, [r7, #4]
 800346c:	4a35      	ldr	r2, [pc, #212]	@ (8003544 <TIM_Base_SetConfig+0x12c>)
 800346e:	4293      	cmp	r3, r2
 8003470:	d02b      	beq.n	80034ca <TIM_Base_SetConfig+0xb2>
 8003472:	687b      	ldr	r3, [r7, #4]
 8003474:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8003478:	d027      	beq.n	80034ca <TIM_Base_SetConfig+0xb2>
 800347a:	687b      	ldr	r3, [r7, #4]
 800347c:	4a32      	ldr	r2, [pc, #200]	@ (8003548 <TIM_Base_SetConfig+0x130>)
 800347e:	4293      	cmp	r3, r2
 8003480:	d023      	beq.n	80034ca <TIM_Base_SetConfig+0xb2>
 8003482:	687b      	ldr	r3, [r7, #4]
 8003484:	4a31      	ldr	r2, [pc, #196]	@ (800354c <TIM_Base_SetConfig+0x134>)
 8003486:	4293      	cmp	r3, r2
 8003488:	d01f      	beq.n	80034ca <TIM_Base_SetConfig+0xb2>
 800348a:	687b      	ldr	r3, [r7, #4]
 800348c:	4a30      	ldr	r2, [pc, #192]	@ (8003550 <TIM_Base_SetConfig+0x138>)
 800348e:	4293      	cmp	r3, r2
 8003490:	d01b      	beq.n	80034ca <TIM_Base_SetConfig+0xb2>
 8003492:	687b      	ldr	r3, [r7, #4]
 8003494:	4a2f      	ldr	r2, [pc, #188]	@ (8003554 <TIM_Base_SetConfig+0x13c>)
 8003496:	4293      	cmp	r3, r2
 8003498:	d017      	beq.n	80034ca <TIM_Base_SetConfig+0xb2>
 800349a:	687b      	ldr	r3, [r7, #4]
 800349c:	4a2e      	ldr	r2, [pc, #184]	@ (8003558 <TIM_Base_SetConfig+0x140>)
 800349e:	4293      	cmp	r3, r2
 80034a0:	d013      	beq.n	80034ca <TIM_Base_SetConfig+0xb2>
 80034a2:	687b      	ldr	r3, [r7, #4]
 80034a4:	4a2d      	ldr	r2, [pc, #180]	@ (800355c <TIM_Base_SetConfig+0x144>)
 80034a6:	4293      	cmp	r3, r2
 80034a8:	d00f      	beq.n	80034ca <TIM_Base_SetConfig+0xb2>
 80034aa:	687b      	ldr	r3, [r7, #4]
 80034ac:	4a2c      	ldr	r2, [pc, #176]	@ (8003560 <TIM_Base_SetConfig+0x148>)
 80034ae:	4293      	cmp	r3, r2
 80034b0:	d00b      	beq.n	80034ca <TIM_Base_SetConfig+0xb2>
 80034b2:	687b      	ldr	r3, [r7, #4]
 80034b4:	4a2b      	ldr	r2, [pc, #172]	@ (8003564 <TIM_Base_SetConfig+0x14c>)
 80034b6:	4293      	cmp	r3, r2
 80034b8:	d007      	beq.n	80034ca <TIM_Base_SetConfig+0xb2>
 80034ba:	687b      	ldr	r3, [r7, #4]
 80034bc:	4a2a      	ldr	r2, [pc, #168]	@ (8003568 <TIM_Base_SetConfig+0x150>)
 80034be:	4293      	cmp	r3, r2
 80034c0:	d003      	beq.n	80034ca <TIM_Base_SetConfig+0xb2>
 80034c2:	687b      	ldr	r3, [r7, #4]
 80034c4:	4a29      	ldr	r2, [pc, #164]	@ (800356c <TIM_Base_SetConfig+0x154>)
 80034c6:	4293      	cmp	r3, r2
 80034c8:	d108      	bne.n	80034dc <TIM_Base_SetConfig+0xc4>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 80034ca:	68fb      	ldr	r3, [r7, #12]
 80034cc:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 80034d0:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 80034d2:	683b      	ldr	r3, [r7, #0]
 80034d4:	68db      	ldr	r3, [r3, #12]
 80034d6:	68fa      	ldr	r2, [r7, #12]
 80034d8:	4313      	orrs	r3, r2
 80034da:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 80034dc:	68fb      	ldr	r3, [r7, #12]
 80034de:	f023 0280 	bic.w	r2, r3, #128	@ 0x80
 80034e2:	683b      	ldr	r3, [r7, #0]
 80034e4:	695b      	ldr	r3, [r3, #20]
 80034e6:	4313      	orrs	r3, r2
 80034e8:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 80034ea:	687b      	ldr	r3, [r7, #4]
 80034ec:	68fa      	ldr	r2, [r7, #12]
 80034ee:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 80034f0:	683b      	ldr	r3, [r7, #0]
 80034f2:	689a      	ldr	r2, [r3, #8]
 80034f4:	687b      	ldr	r3, [r7, #4]
 80034f6:	62da      	str	r2, [r3, #44]	@ 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 80034f8:	683b      	ldr	r3, [r7, #0]
 80034fa:	681a      	ldr	r2, [r3, #0]
 80034fc:	687b      	ldr	r3, [r7, #4]
 80034fe:	629a      	str	r2, [r3, #40]	@ 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8003500:	687b      	ldr	r3, [r7, #4]
 8003502:	4a10      	ldr	r2, [pc, #64]	@ (8003544 <TIM_Base_SetConfig+0x12c>)
 8003504:	4293      	cmp	r3, r2
 8003506:	d003      	beq.n	8003510 <TIM_Base_SetConfig+0xf8>
 8003508:	687b      	ldr	r3, [r7, #4]
 800350a:	4a12      	ldr	r2, [pc, #72]	@ (8003554 <TIM_Base_SetConfig+0x13c>)
 800350c:	4293      	cmp	r3, r2
 800350e:	d103      	bne.n	8003518 <TIM_Base_SetConfig+0x100>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8003510:	683b      	ldr	r3, [r7, #0]
 8003512:	691a      	ldr	r2, [r3, #16]
 8003514:	687b      	ldr	r3, [r7, #4]
 8003516:	631a      	str	r2, [r3, #48]	@ 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8003518:	687b      	ldr	r3, [r7, #4]
 800351a:	2201      	movs	r2, #1
 800351c:	615a      	str	r2, [r3, #20]

  /* Check if the update flag is set after the Update Generation, if so clear the UIF flag */
  if (HAL_IS_BIT_SET(TIMx->SR, TIM_FLAG_UPDATE))
 800351e:	687b      	ldr	r3, [r7, #4]
 8003520:	691b      	ldr	r3, [r3, #16]
 8003522:	f003 0301 	and.w	r3, r3, #1
 8003526:	2b01      	cmp	r3, #1
 8003528:	d105      	bne.n	8003536 <TIM_Base_SetConfig+0x11e>
  {
    /* Clear the update flag */
    CLEAR_BIT(TIMx->SR, TIM_FLAG_UPDATE);
 800352a:	687b      	ldr	r3, [r7, #4]
 800352c:	691b      	ldr	r3, [r3, #16]
 800352e:	f023 0201 	bic.w	r2, r3, #1
 8003532:	687b      	ldr	r3, [r7, #4]
 8003534:	611a      	str	r2, [r3, #16]
  }
}
 8003536:	bf00      	nop
 8003538:	3714      	adds	r7, #20
 800353a:	46bd      	mov	sp, r7
 800353c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003540:	4770      	bx	lr
 8003542:	bf00      	nop
 8003544:	40010000 	.word	0x40010000
 8003548:	40000400 	.word	0x40000400
 800354c:	40000800 	.word	0x40000800
 8003550:	40000c00 	.word	0x40000c00
 8003554:	40010400 	.word	0x40010400
 8003558:	40014000 	.word	0x40014000
 800355c:	40014400 	.word	0x40014400
 8003560:	40014800 	.word	0x40014800
 8003564:	40001800 	.word	0x40001800
 8003568:	40001c00 	.word	0x40001c00
 800356c:	40002000 	.word	0x40002000

08003570 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        const TIM_MasterConfigTypeDef *sMasterConfig)
{
 8003570:	b480      	push	{r7}
 8003572:	b085      	sub	sp, #20
 8003574:	af00      	add	r7, sp, #0
 8003576:	6078      	str	r0, [r7, #4]
 8003578:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 800357a:	687b      	ldr	r3, [r7, #4]
 800357c:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8003580:	2b01      	cmp	r3, #1
 8003582:	d101      	bne.n	8003588 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 8003584:	2302      	movs	r3, #2
 8003586:	e05a      	b.n	800363e <HAL_TIMEx_MasterConfigSynchronization+0xce>
 8003588:	687b      	ldr	r3, [r7, #4]
 800358a:	2201      	movs	r2, #1
 800358c:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 8003590:	687b      	ldr	r3, [r7, #4]
 8003592:	2202      	movs	r2, #2
 8003594:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 8003598:	687b      	ldr	r3, [r7, #4]
 800359a:	681b      	ldr	r3, [r3, #0]
 800359c:	685b      	ldr	r3, [r3, #4]
 800359e:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 80035a0:	687b      	ldr	r3, [r7, #4]
 80035a2:	681b      	ldr	r3, [r3, #0]
 80035a4:	689b      	ldr	r3, [r3, #8]
 80035a6:	60bb      	str	r3, [r7, #8]

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 80035a8:	68fb      	ldr	r3, [r7, #12]
 80035aa:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 80035ae:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 80035b0:	683b      	ldr	r3, [r7, #0]
 80035b2:	681b      	ldr	r3, [r3, #0]
 80035b4:	68fa      	ldr	r2, [r7, #12]
 80035b6:	4313      	orrs	r3, r2
 80035b8:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 80035ba:	687b      	ldr	r3, [r7, #4]
 80035bc:	681b      	ldr	r3, [r3, #0]
 80035be:	68fa      	ldr	r2, [r7, #12]
 80035c0:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 80035c2:	687b      	ldr	r3, [r7, #4]
 80035c4:	681b      	ldr	r3, [r3, #0]
 80035c6:	4a21      	ldr	r2, [pc, #132]	@ (800364c <HAL_TIMEx_MasterConfigSynchronization+0xdc>)
 80035c8:	4293      	cmp	r3, r2
 80035ca:	d022      	beq.n	8003612 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 80035cc:	687b      	ldr	r3, [r7, #4]
 80035ce:	681b      	ldr	r3, [r3, #0]
 80035d0:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 80035d4:	d01d      	beq.n	8003612 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 80035d6:	687b      	ldr	r3, [r7, #4]
 80035d8:	681b      	ldr	r3, [r3, #0]
 80035da:	4a1d      	ldr	r2, [pc, #116]	@ (8003650 <HAL_TIMEx_MasterConfigSynchronization+0xe0>)
 80035dc:	4293      	cmp	r3, r2
 80035de:	d018      	beq.n	8003612 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 80035e0:	687b      	ldr	r3, [r7, #4]
 80035e2:	681b      	ldr	r3, [r3, #0]
 80035e4:	4a1b      	ldr	r2, [pc, #108]	@ (8003654 <HAL_TIMEx_MasterConfigSynchronization+0xe4>)
 80035e6:	4293      	cmp	r3, r2
 80035e8:	d013      	beq.n	8003612 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 80035ea:	687b      	ldr	r3, [r7, #4]
 80035ec:	681b      	ldr	r3, [r3, #0]
 80035ee:	4a1a      	ldr	r2, [pc, #104]	@ (8003658 <HAL_TIMEx_MasterConfigSynchronization+0xe8>)
 80035f0:	4293      	cmp	r3, r2
 80035f2:	d00e      	beq.n	8003612 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 80035f4:	687b      	ldr	r3, [r7, #4]
 80035f6:	681b      	ldr	r3, [r3, #0]
 80035f8:	4a18      	ldr	r2, [pc, #96]	@ (800365c <HAL_TIMEx_MasterConfigSynchronization+0xec>)
 80035fa:	4293      	cmp	r3, r2
 80035fc:	d009      	beq.n	8003612 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 80035fe:	687b      	ldr	r3, [r7, #4]
 8003600:	681b      	ldr	r3, [r3, #0]
 8003602:	4a17      	ldr	r2, [pc, #92]	@ (8003660 <HAL_TIMEx_MasterConfigSynchronization+0xf0>)
 8003604:	4293      	cmp	r3, r2
 8003606:	d004      	beq.n	8003612 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8003608:	687b      	ldr	r3, [r7, #4]
 800360a:	681b      	ldr	r3, [r3, #0]
 800360c:	4a15      	ldr	r2, [pc, #84]	@ (8003664 <HAL_TIMEx_MasterConfigSynchronization+0xf4>)
 800360e:	4293      	cmp	r3, r2
 8003610:	d10c      	bne.n	800362c <HAL_TIMEx_MasterConfigSynchronization+0xbc>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 8003612:	68bb      	ldr	r3, [r7, #8]
 8003614:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 8003618:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 800361a:	683b      	ldr	r3, [r7, #0]
 800361c:	685b      	ldr	r3, [r3, #4]
 800361e:	68ba      	ldr	r2, [r7, #8]
 8003620:	4313      	orrs	r3, r2
 8003622:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 8003624:	687b      	ldr	r3, [r7, #4]
 8003626:	681b      	ldr	r3, [r3, #0]
 8003628:	68ba      	ldr	r2, [r7, #8]
 800362a:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 800362c:	687b      	ldr	r3, [r7, #4]
 800362e:	2201      	movs	r2, #1
 8003630:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  __HAL_UNLOCK(htim);
 8003634:	687b      	ldr	r3, [r7, #4]
 8003636:	2200      	movs	r2, #0
 8003638:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return HAL_OK;
 800363c:	2300      	movs	r3, #0
}
 800363e:	4618      	mov	r0, r3
 8003640:	3714      	adds	r7, #20
 8003642:	46bd      	mov	sp, r7
 8003644:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003648:	4770      	bx	lr
 800364a:	bf00      	nop
 800364c:	40010000 	.word	0x40010000
 8003650:	40000400 	.word	0x40000400
 8003654:	40000800 	.word	0x40000800
 8003658:	40000c00 	.word	0x40000c00
 800365c:	40010400 	.word	0x40010400
 8003660:	40014000 	.word	0x40014000
 8003664:	40001800 	.word	0x40001800

08003668 <memset>:
 8003668:	4402      	add	r2, r0
 800366a:	4603      	mov	r3, r0
 800366c:	4293      	cmp	r3, r2
 800366e:	d100      	bne.n	8003672 <memset+0xa>
 8003670:	4770      	bx	lr
 8003672:	f803 1b01 	strb.w	r1, [r3], #1
 8003676:	e7f9      	b.n	800366c <memset+0x4>

08003678 <__libc_init_array>:
 8003678:	b570      	push	{r4, r5, r6, lr}
 800367a:	4d0d      	ldr	r5, [pc, #52]	@ (80036b0 <__libc_init_array+0x38>)
 800367c:	4c0d      	ldr	r4, [pc, #52]	@ (80036b4 <__libc_init_array+0x3c>)
 800367e:	1b64      	subs	r4, r4, r5
 8003680:	10a4      	asrs	r4, r4, #2
 8003682:	2600      	movs	r6, #0
 8003684:	42a6      	cmp	r6, r4
 8003686:	d109      	bne.n	800369c <__libc_init_array+0x24>
 8003688:	4d0b      	ldr	r5, [pc, #44]	@ (80036b8 <__libc_init_array+0x40>)
 800368a:	4c0c      	ldr	r4, [pc, #48]	@ (80036bc <__libc_init_array+0x44>)
 800368c:	f000 f818 	bl	80036c0 <_init>
 8003690:	1b64      	subs	r4, r4, r5
 8003692:	10a4      	asrs	r4, r4, #2
 8003694:	2600      	movs	r6, #0
 8003696:	42a6      	cmp	r6, r4
 8003698:	d105      	bne.n	80036a6 <__libc_init_array+0x2e>
 800369a:	bd70      	pop	{r4, r5, r6, pc}
 800369c:	f855 3b04 	ldr.w	r3, [r5], #4
 80036a0:	4798      	blx	r3
 80036a2:	3601      	adds	r6, #1
 80036a4:	e7ee      	b.n	8003684 <__libc_init_array+0xc>
 80036a6:	f855 3b04 	ldr.w	r3, [r5], #4
 80036aa:	4798      	blx	r3
 80036ac:	3601      	adds	r6, #1
 80036ae:	e7f2      	b.n	8003696 <__libc_init_array+0x1e>
 80036b0:	080036e0 	.word	0x080036e0
 80036b4:	080036e0 	.word	0x080036e0
 80036b8:	080036e0 	.word	0x080036e0
 80036bc:	080036e4 	.word	0x080036e4

080036c0 <_init>:
 80036c0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80036c2:	bf00      	nop
 80036c4:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80036c6:	bc08      	pop	{r3}
 80036c8:	469e      	mov	lr, r3
 80036ca:	4770      	bx	lr

080036cc <_fini>:
 80036cc:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80036ce:	bf00      	nop
 80036d0:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80036d2:	bc08      	pop	{r3}
 80036d4:	469e      	mov	lr, r3
 80036d6:	4770      	bx	lr
