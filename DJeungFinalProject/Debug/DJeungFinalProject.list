
DJeungFinalProject.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001ac  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00005980  080001ac  080001ac  000011ac  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       000011f4  08005b2c  08005b2c  00006b2c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08006d20  08006d20  00008020  2**0
                  CONTENTS
  4 .ARM          00000008  08006d20  08006d20  00007d20  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08006d28  08006d28  00008020  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08006d28  08006d28  00007d28  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  7 .fini_array   00000004  08006d2c  08006d2c  00007d2c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  8 .data         00000020  20000000  08006d30  00008000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .ccmram       00000000  10000000  10000000  00008020  2**0
                  CONTENTS
 10 .bss          00025bac  20000020  20000020  00008020  2**2
                  ALLOC
 11 ._user_heap_stack 00000604  20025bcc  20025bcc  00008020  2**0
                  ALLOC
 12 .ARM.attributes 00000030  00000000  00000000  00008020  2**0
                  CONTENTS, READONLY
 13 .debug_info   000130c3  00000000  00000000  00008050  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_abbrev 00002ed5  00000000  00000000  0001b113  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_aranges 000013a0  00000000  00000000  0001dfe8  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_rnglists 00000f2a  00000000  00000000  0001f388  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_macro  00026b09  00000000  00000000  000202b2  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_line   00017d41  00000000  00000000  00046dbb  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_str    000e2999  00000000  00000000  0005eafc  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .comment      00000043  00000000  00000000  00141495  2**0
                  CONTENTS, READONLY
 21 .debug_frame  00005274  00000000  00000000  001414d8  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 22 .debug_line_str 0000006e  00000000  00000000  0014674c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001ac <__do_global_dtors_aux>:
 80001ac:	b510      	push	{r4, lr}
 80001ae:	4c05      	ldr	r4, [pc, #20]	@ (80001c4 <__do_global_dtors_aux+0x18>)
 80001b0:	7823      	ldrb	r3, [r4, #0]
 80001b2:	b933      	cbnz	r3, 80001c2 <__do_global_dtors_aux+0x16>
 80001b4:	4b04      	ldr	r3, [pc, #16]	@ (80001c8 <__do_global_dtors_aux+0x1c>)
 80001b6:	b113      	cbz	r3, 80001be <__do_global_dtors_aux+0x12>
 80001b8:	4804      	ldr	r0, [pc, #16]	@ (80001cc <__do_global_dtors_aux+0x20>)
 80001ba:	f3af 8000 	nop.w
 80001be:	2301      	movs	r3, #1
 80001c0:	7023      	strb	r3, [r4, #0]
 80001c2:	bd10      	pop	{r4, pc}
 80001c4:	20000020 	.word	0x20000020
 80001c8:	00000000 	.word	0x00000000
 80001cc:	08005b14 	.word	0x08005b14

080001d0 <frame_dummy>:
 80001d0:	b508      	push	{r3, lr}
 80001d2:	4b03      	ldr	r3, [pc, #12]	@ (80001e0 <frame_dummy+0x10>)
 80001d4:	b11b      	cbz	r3, 80001de <frame_dummy+0xe>
 80001d6:	4903      	ldr	r1, [pc, #12]	@ (80001e4 <frame_dummy+0x14>)
 80001d8:	4803      	ldr	r0, [pc, #12]	@ (80001e8 <frame_dummy+0x18>)
 80001da:	f3af 8000 	nop.w
 80001de:	bd08      	pop	{r3, pc}
 80001e0:	00000000 	.word	0x00000000
 80001e4:	20000024 	.word	0x20000024
 80001e8:	08005b14 	.word	0x08005b14

080001ec <__aeabi_uldivmod>:
 80001ec:	b953      	cbnz	r3, 8000204 <__aeabi_uldivmod+0x18>
 80001ee:	b94a      	cbnz	r2, 8000204 <__aeabi_uldivmod+0x18>
 80001f0:	2900      	cmp	r1, #0
 80001f2:	bf08      	it	eq
 80001f4:	2800      	cmpeq	r0, #0
 80001f6:	bf1c      	itt	ne
 80001f8:	f04f 31ff 	movne.w	r1, #4294967295
 80001fc:	f04f 30ff 	movne.w	r0, #4294967295
 8000200:	f000 b96a 	b.w	80004d8 <__aeabi_idiv0>
 8000204:	f1ad 0c08 	sub.w	ip, sp, #8
 8000208:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 800020c:	f000 f806 	bl	800021c <__udivmoddi4>
 8000210:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000214:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000218:	b004      	add	sp, #16
 800021a:	4770      	bx	lr

0800021c <__udivmoddi4>:
 800021c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000220:	9d08      	ldr	r5, [sp, #32]
 8000222:	460c      	mov	r4, r1
 8000224:	2b00      	cmp	r3, #0
 8000226:	d14e      	bne.n	80002c6 <__udivmoddi4+0xaa>
 8000228:	4694      	mov	ip, r2
 800022a:	458c      	cmp	ip, r1
 800022c:	4686      	mov	lr, r0
 800022e:	fab2 f282 	clz	r2, r2
 8000232:	d962      	bls.n	80002fa <__udivmoddi4+0xde>
 8000234:	b14a      	cbz	r2, 800024a <__udivmoddi4+0x2e>
 8000236:	f1c2 0320 	rsb	r3, r2, #32
 800023a:	4091      	lsls	r1, r2
 800023c:	fa20 f303 	lsr.w	r3, r0, r3
 8000240:	fa0c fc02 	lsl.w	ip, ip, r2
 8000244:	4319      	orrs	r1, r3
 8000246:	fa00 fe02 	lsl.w	lr, r0, r2
 800024a:	ea4f 471c 	mov.w	r7, ip, lsr #16
 800024e:	fa1f f68c 	uxth.w	r6, ip
 8000252:	fbb1 f4f7 	udiv	r4, r1, r7
 8000256:	ea4f 431e 	mov.w	r3, lr, lsr #16
 800025a:	fb07 1114 	mls	r1, r7, r4, r1
 800025e:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000262:	fb04 f106 	mul.w	r1, r4, r6
 8000266:	4299      	cmp	r1, r3
 8000268:	d90a      	bls.n	8000280 <__udivmoddi4+0x64>
 800026a:	eb1c 0303 	adds.w	r3, ip, r3
 800026e:	f104 30ff 	add.w	r0, r4, #4294967295
 8000272:	f080 8112 	bcs.w	800049a <__udivmoddi4+0x27e>
 8000276:	4299      	cmp	r1, r3
 8000278:	f240 810f 	bls.w	800049a <__udivmoddi4+0x27e>
 800027c:	3c02      	subs	r4, #2
 800027e:	4463      	add	r3, ip
 8000280:	1a59      	subs	r1, r3, r1
 8000282:	fa1f f38e 	uxth.w	r3, lr
 8000286:	fbb1 f0f7 	udiv	r0, r1, r7
 800028a:	fb07 1110 	mls	r1, r7, r0, r1
 800028e:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000292:	fb00 f606 	mul.w	r6, r0, r6
 8000296:	429e      	cmp	r6, r3
 8000298:	d90a      	bls.n	80002b0 <__udivmoddi4+0x94>
 800029a:	eb1c 0303 	adds.w	r3, ip, r3
 800029e:	f100 31ff 	add.w	r1, r0, #4294967295
 80002a2:	f080 80fc 	bcs.w	800049e <__udivmoddi4+0x282>
 80002a6:	429e      	cmp	r6, r3
 80002a8:	f240 80f9 	bls.w	800049e <__udivmoddi4+0x282>
 80002ac:	4463      	add	r3, ip
 80002ae:	3802      	subs	r0, #2
 80002b0:	1b9b      	subs	r3, r3, r6
 80002b2:	ea40 4004 	orr.w	r0, r0, r4, lsl #16
 80002b6:	2100      	movs	r1, #0
 80002b8:	b11d      	cbz	r5, 80002c2 <__udivmoddi4+0xa6>
 80002ba:	40d3      	lsrs	r3, r2
 80002bc:	2200      	movs	r2, #0
 80002be:	e9c5 3200 	strd	r3, r2, [r5]
 80002c2:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80002c6:	428b      	cmp	r3, r1
 80002c8:	d905      	bls.n	80002d6 <__udivmoddi4+0xba>
 80002ca:	b10d      	cbz	r5, 80002d0 <__udivmoddi4+0xb4>
 80002cc:	e9c5 0100 	strd	r0, r1, [r5]
 80002d0:	2100      	movs	r1, #0
 80002d2:	4608      	mov	r0, r1
 80002d4:	e7f5      	b.n	80002c2 <__udivmoddi4+0xa6>
 80002d6:	fab3 f183 	clz	r1, r3
 80002da:	2900      	cmp	r1, #0
 80002dc:	d146      	bne.n	800036c <__udivmoddi4+0x150>
 80002de:	42a3      	cmp	r3, r4
 80002e0:	d302      	bcc.n	80002e8 <__udivmoddi4+0xcc>
 80002e2:	4290      	cmp	r0, r2
 80002e4:	f0c0 80f0 	bcc.w	80004c8 <__udivmoddi4+0x2ac>
 80002e8:	1a86      	subs	r6, r0, r2
 80002ea:	eb64 0303 	sbc.w	r3, r4, r3
 80002ee:	2001      	movs	r0, #1
 80002f0:	2d00      	cmp	r5, #0
 80002f2:	d0e6      	beq.n	80002c2 <__udivmoddi4+0xa6>
 80002f4:	e9c5 6300 	strd	r6, r3, [r5]
 80002f8:	e7e3      	b.n	80002c2 <__udivmoddi4+0xa6>
 80002fa:	2a00      	cmp	r2, #0
 80002fc:	f040 8090 	bne.w	8000420 <__udivmoddi4+0x204>
 8000300:	eba1 040c 	sub.w	r4, r1, ip
 8000304:	ea4f 481c 	mov.w	r8, ip, lsr #16
 8000308:	fa1f f78c 	uxth.w	r7, ip
 800030c:	2101      	movs	r1, #1
 800030e:	fbb4 f6f8 	udiv	r6, r4, r8
 8000312:	ea4f 431e 	mov.w	r3, lr, lsr #16
 8000316:	fb08 4416 	mls	r4, r8, r6, r4
 800031a:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 800031e:	fb07 f006 	mul.w	r0, r7, r6
 8000322:	4298      	cmp	r0, r3
 8000324:	d908      	bls.n	8000338 <__udivmoddi4+0x11c>
 8000326:	eb1c 0303 	adds.w	r3, ip, r3
 800032a:	f106 34ff 	add.w	r4, r6, #4294967295
 800032e:	d202      	bcs.n	8000336 <__udivmoddi4+0x11a>
 8000330:	4298      	cmp	r0, r3
 8000332:	f200 80cd 	bhi.w	80004d0 <__udivmoddi4+0x2b4>
 8000336:	4626      	mov	r6, r4
 8000338:	1a1c      	subs	r4, r3, r0
 800033a:	fa1f f38e 	uxth.w	r3, lr
 800033e:	fbb4 f0f8 	udiv	r0, r4, r8
 8000342:	fb08 4410 	mls	r4, r8, r0, r4
 8000346:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 800034a:	fb00 f707 	mul.w	r7, r0, r7
 800034e:	429f      	cmp	r7, r3
 8000350:	d908      	bls.n	8000364 <__udivmoddi4+0x148>
 8000352:	eb1c 0303 	adds.w	r3, ip, r3
 8000356:	f100 34ff 	add.w	r4, r0, #4294967295
 800035a:	d202      	bcs.n	8000362 <__udivmoddi4+0x146>
 800035c:	429f      	cmp	r7, r3
 800035e:	f200 80b0 	bhi.w	80004c2 <__udivmoddi4+0x2a6>
 8000362:	4620      	mov	r0, r4
 8000364:	1bdb      	subs	r3, r3, r7
 8000366:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 800036a:	e7a5      	b.n	80002b8 <__udivmoddi4+0x9c>
 800036c:	f1c1 0620 	rsb	r6, r1, #32
 8000370:	408b      	lsls	r3, r1
 8000372:	fa22 f706 	lsr.w	r7, r2, r6
 8000376:	431f      	orrs	r7, r3
 8000378:	fa20 fc06 	lsr.w	ip, r0, r6
 800037c:	fa04 f301 	lsl.w	r3, r4, r1
 8000380:	ea43 030c 	orr.w	r3, r3, ip
 8000384:	40f4      	lsrs	r4, r6
 8000386:	fa00 f801 	lsl.w	r8, r0, r1
 800038a:	0c38      	lsrs	r0, r7, #16
 800038c:	ea4f 4913 	mov.w	r9, r3, lsr #16
 8000390:	fbb4 fef0 	udiv	lr, r4, r0
 8000394:	fa1f fc87 	uxth.w	ip, r7
 8000398:	fb00 441e 	mls	r4, r0, lr, r4
 800039c:	ea49 4404 	orr.w	r4, r9, r4, lsl #16
 80003a0:	fb0e f90c 	mul.w	r9, lr, ip
 80003a4:	45a1      	cmp	r9, r4
 80003a6:	fa02 f201 	lsl.w	r2, r2, r1
 80003aa:	d90a      	bls.n	80003c2 <__udivmoddi4+0x1a6>
 80003ac:	193c      	adds	r4, r7, r4
 80003ae:	f10e 3aff 	add.w	sl, lr, #4294967295
 80003b2:	f080 8084 	bcs.w	80004be <__udivmoddi4+0x2a2>
 80003b6:	45a1      	cmp	r9, r4
 80003b8:	f240 8081 	bls.w	80004be <__udivmoddi4+0x2a2>
 80003bc:	f1ae 0e02 	sub.w	lr, lr, #2
 80003c0:	443c      	add	r4, r7
 80003c2:	eba4 0409 	sub.w	r4, r4, r9
 80003c6:	fa1f f983 	uxth.w	r9, r3
 80003ca:	fbb4 f3f0 	udiv	r3, r4, r0
 80003ce:	fb00 4413 	mls	r4, r0, r3, r4
 80003d2:	ea49 4404 	orr.w	r4, r9, r4, lsl #16
 80003d6:	fb03 fc0c 	mul.w	ip, r3, ip
 80003da:	45a4      	cmp	ip, r4
 80003dc:	d907      	bls.n	80003ee <__udivmoddi4+0x1d2>
 80003de:	193c      	adds	r4, r7, r4
 80003e0:	f103 30ff 	add.w	r0, r3, #4294967295
 80003e4:	d267      	bcs.n	80004b6 <__udivmoddi4+0x29a>
 80003e6:	45a4      	cmp	ip, r4
 80003e8:	d965      	bls.n	80004b6 <__udivmoddi4+0x29a>
 80003ea:	3b02      	subs	r3, #2
 80003ec:	443c      	add	r4, r7
 80003ee:	ea43 400e 	orr.w	r0, r3, lr, lsl #16
 80003f2:	fba0 9302 	umull	r9, r3, r0, r2
 80003f6:	eba4 040c 	sub.w	r4, r4, ip
 80003fa:	429c      	cmp	r4, r3
 80003fc:	46ce      	mov	lr, r9
 80003fe:	469c      	mov	ip, r3
 8000400:	d351      	bcc.n	80004a6 <__udivmoddi4+0x28a>
 8000402:	d04e      	beq.n	80004a2 <__udivmoddi4+0x286>
 8000404:	b155      	cbz	r5, 800041c <__udivmoddi4+0x200>
 8000406:	ebb8 030e 	subs.w	r3, r8, lr
 800040a:	eb64 040c 	sbc.w	r4, r4, ip
 800040e:	fa04 f606 	lsl.w	r6, r4, r6
 8000412:	40cb      	lsrs	r3, r1
 8000414:	431e      	orrs	r6, r3
 8000416:	40cc      	lsrs	r4, r1
 8000418:	e9c5 6400 	strd	r6, r4, [r5]
 800041c:	2100      	movs	r1, #0
 800041e:	e750      	b.n	80002c2 <__udivmoddi4+0xa6>
 8000420:	f1c2 0320 	rsb	r3, r2, #32
 8000424:	fa20 f103 	lsr.w	r1, r0, r3
 8000428:	fa0c fc02 	lsl.w	ip, ip, r2
 800042c:	fa24 f303 	lsr.w	r3, r4, r3
 8000430:	4094      	lsls	r4, r2
 8000432:	430c      	orrs	r4, r1
 8000434:	ea4f 481c 	mov.w	r8, ip, lsr #16
 8000438:	fa00 fe02 	lsl.w	lr, r0, r2
 800043c:	fa1f f78c 	uxth.w	r7, ip
 8000440:	fbb3 f0f8 	udiv	r0, r3, r8
 8000444:	fb08 3110 	mls	r1, r8, r0, r3
 8000448:	0c23      	lsrs	r3, r4, #16
 800044a:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 800044e:	fb00 f107 	mul.w	r1, r0, r7
 8000452:	4299      	cmp	r1, r3
 8000454:	d908      	bls.n	8000468 <__udivmoddi4+0x24c>
 8000456:	eb1c 0303 	adds.w	r3, ip, r3
 800045a:	f100 36ff 	add.w	r6, r0, #4294967295
 800045e:	d22c      	bcs.n	80004ba <__udivmoddi4+0x29e>
 8000460:	4299      	cmp	r1, r3
 8000462:	d92a      	bls.n	80004ba <__udivmoddi4+0x29e>
 8000464:	3802      	subs	r0, #2
 8000466:	4463      	add	r3, ip
 8000468:	1a5b      	subs	r3, r3, r1
 800046a:	b2a4      	uxth	r4, r4
 800046c:	fbb3 f1f8 	udiv	r1, r3, r8
 8000470:	fb08 3311 	mls	r3, r8, r1, r3
 8000474:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000478:	fb01 f307 	mul.w	r3, r1, r7
 800047c:	42a3      	cmp	r3, r4
 800047e:	d908      	bls.n	8000492 <__udivmoddi4+0x276>
 8000480:	eb1c 0404 	adds.w	r4, ip, r4
 8000484:	f101 36ff 	add.w	r6, r1, #4294967295
 8000488:	d213      	bcs.n	80004b2 <__udivmoddi4+0x296>
 800048a:	42a3      	cmp	r3, r4
 800048c:	d911      	bls.n	80004b2 <__udivmoddi4+0x296>
 800048e:	3902      	subs	r1, #2
 8000490:	4464      	add	r4, ip
 8000492:	1ae4      	subs	r4, r4, r3
 8000494:	ea41 4100 	orr.w	r1, r1, r0, lsl #16
 8000498:	e739      	b.n	800030e <__udivmoddi4+0xf2>
 800049a:	4604      	mov	r4, r0
 800049c:	e6f0      	b.n	8000280 <__udivmoddi4+0x64>
 800049e:	4608      	mov	r0, r1
 80004a0:	e706      	b.n	80002b0 <__udivmoddi4+0x94>
 80004a2:	45c8      	cmp	r8, r9
 80004a4:	d2ae      	bcs.n	8000404 <__udivmoddi4+0x1e8>
 80004a6:	ebb9 0e02 	subs.w	lr, r9, r2
 80004aa:	eb63 0c07 	sbc.w	ip, r3, r7
 80004ae:	3801      	subs	r0, #1
 80004b0:	e7a8      	b.n	8000404 <__udivmoddi4+0x1e8>
 80004b2:	4631      	mov	r1, r6
 80004b4:	e7ed      	b.n	8000492 <__udivmoddi4+0x276>
 80004b6:	4603      	mov	r3, r0
 80004b8:	e799      	b.n	80003ee <__udivmoddi4+0x1d2>
 80004ba:	4630      	mov	r0, r6
 80004bc:	e7d4      	b.n	8000468 <__udivmoddi4+0x24c>
 80004be:	46d6      	mov	lr, sl
 80004c0:	e77f      	b.n	80003c2 <__udivmoddi4+0x1a6>
 80004c2:	4463      	add	r3, ip
 80004c4:	3802      	subs	r0, #2
 80004c6:	e74d      	b.n	8000364 <__udivmoddi4+0x148>
 80004c8:	4606      	mov	r6, r0
 80004ca:	4623      	mov	r3, r4
 80004cc:	4608      	mov	r0, r1
 80004ce:	e70f      	b.n	80002f0 <__udivmoddi4+0xd4>
 80004d0:	3e02      	subs	r6, #2
 80004d2:	4463      	add	r3, ip
 80004d4:	e730      	b.n	8000338 <__udivmoddi4+0x11c>
 80004d6:	bf00      	nop

080004d8 <__aeabi_idiv0>:
 80004d8:	4770      	bx	lr
 80004da:	bf00      	nop

080004dc <ApplicationInit>:
void LCDTouchScreenInterruptGPIOInit(void);
#endif // TOUCH_INTERRUPT_ENABLED
#endif // COMPILE_TOUCH_FUNCTIONS

void ApplicationInit(void)
{
 80004dc:	b580      	push	{r7, lr}
 80004de:	b082      	sub	sp, #8
 80004e0:	af00      	add	r7, sp, #0
	 __HAL_RCC_RNG_CLK_ENABLE();
 80004e2:	2300      	movs	r3, #0
 80004e4:	607b      	str	r3, [r7, #4]
 80004e6:	4b10      	ldr	r3, [pc, #64]	@ (8000528 <ApplicationInit+0x4c>)
 80004e8:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 80004ea:	4a0f      	ldr	r2, [pc, #60]	@ (8000528 <ApplicationInit+0x4c>)
 80004ec:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 80004f0:	6353      	str	r3, [r2, #52]	@ 0x34
 80004f2:	4b0d      	ldr	r3, [pc, #52]	@ (8000528 <ApplicationInit+0x4c>)
 80004f4:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 80004f6:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80004fa:	607b      	str	r3, [r7, #4]
 80004fc:	687b      	ldr	r3, [r7, #4]
	initialise_monitor_handles(); // Allows printf functionality
 80004fe:	f001 ffd5 	bl	80024ac <initialise_monitor_handles>
    LTCD__Init();
 8000502:	f000 f91d 	bl	8000740 <LTCD__Init>
    LTCD_Layer_Init(0);
 8000506:	2000      	movs	r0, #0
 8000508:	f000 f8da 	bl	80006c0 <LTCD_Layer_Init>
    LCD_Clear(0,LCD_COLOR_WHITE);
 800050c:	f64f 71ff 	movw	r1, #65535	@ 0xffff
 8000510:	2000      	movs	r0, #0
 8000512:	f000 fa1f 	bl	8000954 <LCD_Clear>

    #if COMPILE_TOUCH_FUNCTIONS == 1
	InitializeLCDTouch();
 8000516:	f000 fb89 	bl	8000c2c <InitializeLCDTouch>

	// This is the orientation for the board to be direclty up where the buttons are vertically above the screen
	// Top left would be low x value, high y value. Bottom right would be low x value, low y value.
	StaticTouchData.orientation = STMPE811_Orientation_Portrait_2;
 800051a:	4b04      	ldr	r3, [pc, #16]	@ (800052c <ApplicationInit+0x50>)
 800051c:	2201      	movs	r2, #1
 800051e:	719a      	strb	r2, [r3, #6]
	#if TOUCH_INTERRUPT_ENABLED == 1
	LCDTouchScreenInterruptGPIOInit();
	#endif // TOUCH_INTERRUPT_ENABLED

	#endif // COMPILE_TOUCH_FUNCTIONS
}
 8000520:	bf00      	nop
 8000522:	3708      	adds	r7, #8
 8000524:	46bd      	mov	sp, r7
 8000526:	bd80      	pop	{r7, pc}
 8000528:	40023800 	.word	0x40023800
 800052c:	2000003c 	.word	0x2000003c

08000530 <LCD_GPIO_Init>:
//Someone from STM said it was "often accessed" a 1-dim array, and not a 2d array. However you still access it like a 2dim array,  using fb[y*W+x] instead of fb[y][x].
uint16_t frameBuffer[LCD_PIXEL_WIDTH*LCD_PIXEL_HEIGHT] = {0};			//16bpp pixel format.


void LCD_GPIO_Init(void)
{
 8000530:	b580      	push	{r7, lr}
 8000532:	b08c      	sub	sp, #48	@ 0x30
 8000534:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStructure;

  /* Enable the LTDC clock */
  __HAL_RCC_LTDC_CLK_ENABLE();
 8000536:	2300      	movs	r3, #0
 8000538:	61bb      	str	r3, [r7, #24]
 800053a:	4b5a      	ldr	r3, [pc, #360]	@ (80006a4 <LCD_GPIO_Init+0x174>)
 800053c:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800053e:	4a59      	ldr	r2, [pc, #356]	@ (80006a4 <LCD_GPIO_Init+0x174>)
 8000540:	f043 6380 	orr.w	r3, r3, #67108864	@ 0x4000000
 8000544:	6453      	str	r3, [r2, #68]	@ 0x44
 8000546:	4b57      	ldr	r3, [pc, #348]	@ (80006a4 <LCD_GPIO_Init+0x174>)
 8000548:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800054a:	f003 6380 	and.w	r3, r3, #67108864	@ 0x4000000
 800054e:	61bb      	str	r3, [r7, #24]
 8000550:	69bb      	ldr	r3, [r7, #24]

  /* Enable GPIO clock */
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8000552:	2300      	movs	r3, #0
 8000554:	617b      	str	r3, [r7, #20]
 8000556:	4b53      	ldr	r3, [pc, #332]	@ (80006a4 <LCD_GPIO_Init+0x174>)
 8000558:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800055a:	4a52      	ldr	r2, [pc, #328]	@ (80006a4 <LCD_GPIO_Init+0x174>)
 800055c:	f043 0301 	orr.w	r3, r3, #1
 8000560:	6313      	str	r3, [r2, #48]	@ 0x30
 8000562:	4b50      	ldr	r3, [pc, #320]	@ (80006a4 <LCD_GPIO_Init+0x174>)
 8000564:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000566:	f003 0301 	and.w	r3, r3, #1
 800056a:	617b      	str	r3, [r7, #20]
 800056c:	697b      	ldr	r3, [r7, #20]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 800056e:	2300      	movs	r3, #0
 8000570:	613b      	str	r3, [r7, #16]
 8000572:	4b4c      	ldr	r3, [pc, #304]	@ (80006a4 <LCD_GPIO_Init+0x174>)
 8000574:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000576:	4a4b      	ldr	r2, [pc, #300]	@ (80006a4 <LCD_GPIO_Init+0x174>)
 8000578:	f043 0302 	orr.w	r3, r3, #2
 800057c:	6313      	str	r3, [r2, #48]	@ 0x30
 800057e:	4b49      	ldr	r3, [pc, #292]	@ (80006a4 <LCD_GPIO_Init+0x174>)
 8000580:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000582:	f003 0302 	and.w	r3, r3, #2
 8000586:	613b      	str	r3, [r7, #16]
 8000588:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOC_CLK_ENABLE();
 800058a:	2300      	movs	r3, #0
 800058c:	60fb      	str	r3, [r7, #12]
 800058e:	4b45      	ldr	r3, [pc, #276]	@ (80006a4 <LCD_GPIO_Init+0x174>)
 8000590:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000592:	4a44      	ldr	r2, [pc, #272]	@ (80006a4 <LCD_GPIO_Init+0x174>)
 8000594:	f043 0304 	orr.w	r3, r3, #4
 8000598:	6313      	str	r3, [r2, #48]	@ 0x30
 800059a:	4b42      	ldr	r3, [pc, #264]	@ (80006a4 <LCD_GPIO_Init+0x174>)
 800059c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800059e:	f003 0304 	and.w	r3, r3, #4
 80005a2:	60fb      	str	r3, [r7, #12]
 80005a4:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 80005a6:	2300      	movs	r3, #0
 80005a8:	60bb      	str	r3, [r7, #8]
 80005aa:	4b3e      	ldr	r3, [pc, #248]	@ (80006a4 <LCD_GPIO_Init+0x174>)
 80005ac:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80005ae:	4a3d      	ldr	r2, [pc, #244]	@ (80006a4 <LCD_GPIO_Init+0x174>)
 80005b0:	f043 0308 	orr.w	r3, r3, #8
 80005b4:	6313      	str	r3, [r2, #48]	@ 0x30
 80005b6:	4b3b      	ldr	r3, [pc, #236]	@ (80006a4 <LCD_GPIO_Init+0x174>)
 80005b8:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80005ba:	f003 0308 	and.w	r3, r3, #8
 80005be:	60bb      	str	r3, [r7, #8]
 80005c0:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOF_CLK_ENABLE();
 80005c2:	2300      	movs	r3, #0
 80005c4:	607b      	str	r3, [r7, #4]
 80005c6:	4b37      	ldr	r3, [pc, #220]	@ (80006a4 <LCD_GPIO_Init+0x174>)
 80005c8:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80005ca:	4a36      	ldr	r2, [pc, #216]	@ (80006a4 <LCD_GPIO_Init+0x174>)
 80005cc:	f043 0320 	orr.w	r3, r3, #32
 80005d0:	6313      	str	r3, [r2, #48]	@ 0x30
 80005d2:	4b34      	ldr	r3, [pc, #208]	@ (80006a4 <LCD_GPIO_Init+0x174>)
 80005d4:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80005d6:	f003 0320 	and.w	r3, r3, #32
 80005da:	607b      	str	r3, [r7, #4]
 80005dc:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOG_CLK_ENABLE();
 80005de:	2300      	movs	r3, #0
 80005e0:	603b      	str	r3, [r7, #0]
 80005e2:	4b30      	ldr	r3, [pc, #192]	@ (80006a4 <LCD_GPIO_Init+0x174>)
 80005e4:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80005e6:	4a2f      	ldr	r2, [pc, #188]	@ (80006a4 <LCD_GPIO_Init+0x174>)
 80005e8:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 80005ec:	6313      	str	r3, [r2, #48]	@ 0x30
 80005ee:	4b2d      	ldr	r3, [pc, #180]	@ (80006a4 <LCD_GPIO_Init+0x174>)
 80005f0:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80005f2:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80005f6:	603b      	str	r3, [r7, #0]
 80005f8:	683b      	ldr	r3, [r7, #0]
   LCD_TFT CLK   <-> PG.07
   LCD_TFT DE   <->  PF.10
  */

  /* GPIOA configuration */
  GPIO_InitStructure.Pin = GPIO_PIN_3 | GPIO_PIN_4 | GPIO_PIN_6 |
 80005fa:	f641 0358 	movw	r3, #6232	@ 0x1858
 80005fe:	61fb      	str	r3, [r7, #28]
                           GPIO_PIN_11 | GPIO_PIN_12;
  GPIO_InitStructure.Mode = GPIO_MODE_AF_PP;
 8000600:	2302      	movs	r3, #2
 8000602:	623b      	str	r3, [r7, #32]
  GPIO_InitStructure.Pull = GPIO_NOPULL;
 8000604:	2300      	movs	r3, #0
 8000606:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStructure.Speed = GPIO_SPEED_FAST;
 8000608:	2302      	movs	r3, #2
 800060a:	62bb      	str	r3, [r7, #40]	@ 0x28
  GPIO_InitStructure.Alternate= GPIO_AF14_LTDC;
 800060c:	230e      	movs	r3, #14
 800060e:	62fb      	str	r3, [r7, #44]	@ 0x2c
  HAL_GPIO_Init(GPIOA, &GPIO_InitStructure);
 8000610:	f107 031c 	add.w	r3, r7, #28
 8000614:	4619      	mov	r1, r3
 8000616:	4824      	ldr	r0, [pc, #144]	@ (80006a8 <LCD_GPIO_Init+0x178>)
 8000618:	f002 f908 	bl	800282c <HAL_GPIO_Init>

 /* GPIOB configuration */
  GPIO_InitStructure.Pin = GPIO_PIN_8 | \
 800061c:	f44f 6370 	mov.w	r3, #3840	@ 0xf00
 8000620:	61fb      	str	r3, [r7, #28]
                           GPIO_PIN_9 | GPIO_PIN_10 | GPIO_PIN_11;
  HAL_GPIO_Init(GPIOB, &GPIO_InitStructure);
 8000622:	f107 031c 	add.w	r3, r7, #28
 8000626:	4619      	mov	r1, r3
 8000628:	4820      	ldr	r0, [pc, #128]	@ (80006ac <LCD_GPIO_Init+0x17c>)
 800062a:	f002 f8ff 	bl	800282c <HAL_GPIO_Init>

 /* GPIOC configuration */
  GPIO_InitStructure.Pin = GPIO_PIN_6 | GPIO_PIN_7 | GPIO_PIN_10;
 800062e:	f44f 6398 	mov.w	r3, #1216	@ 0x4c0
 8000632:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOC, &GPIO_InitStructure);
 8000634:	f107 031c 	add.w	r3, r7, #28
 8000638:	4619      	mov	r1, r3
 800063a:	481d      	ldr	r0, [pc, #116]	@ (80006b0 <LCD_GPIO_Init+0x180>)
 800063c:	f002 f8f6 	bl	800282c <HAL_GPIO_Init>

 /* GPIOD configuration */
  GPIO_InitStructure.Pin = GPIO_PIN_3 | GPIO_PIN_6;
 8000640:	2348      	movs	r3, #72	@ 0x48
 8000642:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOD, &GPIO_InitStructure);
 8000644:	f107 031c 	add.w	r3, r7, #28
 8000648:	4619      	mov	r1, r3
 800064a:	481a      	ldr	r0, [pc, #104]	@ (80006b4 <LCD_GPIO_Init+0x184>)
 800064c:	f002 f8ee 	bl	800282c <HAL_GPIO_Init>

 /* GPIOF configuration */
  GPIO_InitStructure.Pin = GPIO_PIN_10;
 8000650:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 8000654:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOF, &GPIO_InitStructure);
 8000656:	f107 031c 	add.w	r3, r7, #28
 800065a:	4619      	mov	r1, r3
 800065c:	4816      	ldr	r0, [pc, #88]	@ (80006b8 <LCD_GPIO_Init+0x188>)
 800065e:	f002 f8e5 	bl	800282c <HAL_GPIO_Init>

 /* GPIOG configuration */
  GPIO_InitStructure.Pin = GPIO_PIN_6 | GPIO_PIN_7 | \
 8000662:	f44f 630c 	mov.w	r3, #2240	@ 0x8c0
 8000666:	61fb      	str	r3, [r7, #28]
                           GPIO_PIN_11;
  HAL_GPIO_Init(GPIOG, &GPIO_InitStructure);
 8000668:	f107 031c 	add.w	r3, r7, #28
 800066c:	4619      	mov	r1, r3
 800066e:	4813      	ldr	r0, [pc, #76]	@ (80006bc <LCD_GPIO_Init+0x18c>)
 8000670:	f002 f8dc 	bl	800282c <HAL_GPIO_Init>

  /* GPIOB configuration */
  GPIO_InitStructure.Pin = GPIO_PIN_0 | GPIO_PIN_1;
 8000674:	2303      	movs	r3, #3
 8000676:	61fb      	str	r3, [r7, #28]
  GPIO_InitStructure.Alternate= GPIO_AF9_LTDC;
 8000678:	2309      	movs	r3, #9
 800067a:	62fb      	str	r3, [r7, #44]	@ 0x2c
  HAL_GPIO_Init(GPIOB, &GPIO_InitStructure);
 800067c:	f107 031c 	add.w	r3, r7, #28
 8000680:	4619      	mov	r1, r3
 8000682:	480a      	ldr	r0, [pc, #40]	@ (80006ac <LCD_GPIO_Init+0x17c>)
 8000684:	f002 f8d2 	bl	800282c <HAL_GPIO_Init>

  /* GPIOG configuration */
  GPIO_InitStructure.Pin = GPIO_PIN_10 | GPIO_PIN_12;
 8000688:	f44f 53a0 	mov.w	r3, #5120	@ 0x1400
 800068c:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOG, &GPIO_InitStructure);
 800068e:	f107 031c 	add.w	r3, r7, #28
 8000692:	4619      	mov	r1, r3
 8000694:	4809      	ldr	r0, [pc, #36]	@ (80006bc <LCD_GPIO_Init+0x18c>)
 8000696:	f002 f8c9 	bl	800282c <HAL_GPIO_Init>
}
 800069a:	bf00      	nop
 800069c:	3730      	adds	r7, #48	@ 0x30
 800069e:	46bd      	mov	sp, r7
 80006a0:	bd80      	pop	{r7, pc}
 80006a2:	bf00      	nop
 80006a4:	40023800 	.word	0x40023800
 80006a8:	40020000 	.word	0x40020000
 80006ac:	40020400 	.word	0x40020400
 80006b0:	40020800 	.word	0x40020800
 80006b4:	40020c00 	.word	0x40020c00
 80006b8:	40021400 	.word	0x40021400
 80006bc:	40021800 	.word	0x40021800

080006c0 <LTCD_Layer_Init>:

void LTCD_Layer_Init(uint8_t LayerIndex)
{
 80006c0:	b580      	push	{r7, lr}
 80006c2:	b090      	sub	sp, #64	@ 0x40
 80006c4:	af00      	add	r7, sp, #0
 80006c6:	4603      	mov	r3, r0
 80006c8:	71fb      	strb	r3, [r7, #7]
	LTDC_LayerCfgTypeDef  pLayerCfg;

	pLayerCfg.WindowX0 = 0;	//Configures the Window HORZ START Position.
 80006ca:	2300      	movs	r3, #0
 80006cc:	60fb      	str	r3, [r7, #12]
	pLayerCfg.WindowX1 = LCD_PIXEL_WIDTH;	//Configures the Window HORZ Stop Position.
 80006ce:	23f0      	movs	r3, #240	@ 0xf0
 80006d0:	613b      	str	r3, [r7, #16]
	pLayerCfg.WindowY0 = 0;	//Configures the Window vertical START Position.
 80006d2:	2300      	movs	r3, #0
 80006d4:	617b      	str	r3, [r7, #20]
	pLayerCfg.WindowY1 = LCD_PIXEL_HEIGHT;	//Configures the Window vertical Stop Position.
 80006d6:	f44f 73a0 	mov.w	r3, #320	@ 0x140
 80006da:	61bb      	str	r3, [r7, #24]
	pLayerCfg.PixelFormat = LCD_PIXEL_FORMAT_1;  //INCORRECT PIXEL FORMAT WILL GIVE WEIRD RESULTS!! IT MAY STILL WORK FOR 1/2 THE DISPLAY!!! //This is our buffers pixel format. 2 bytes for each pixel
 80006dc:	2302      	movs	r3, #2
 80006de:	61fb      	str	r3, [r7, #28]
	pLayerCfg.Alpha = 255;
 80006e0:	23ff      	movs	r3, #255	@ 0xff
 80006e2:	623b      	str	r3, [r7, #32]
	pLayerCfg.Alpha0 = 0;
 80006e4:	2300      	movs	r3, #0
 80006e6:	627b      	str	r3, [r7, #36]	@ 0x24
	pLayerCfg.BlendingFactor1 = LTDC_BLENDING_FACTOR1_CA;
 80006e8:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 80006ec:	62bb      	str	r3, [r7, #40]	@ 0x28
	pLayerCfg.BlendingFactor2 = LTDC_BLENDING_FACTOR2_CA;
 80006ee:	2305      	movs	r3, #5
 80006f0:	62fb      	str	r3, [r7, #44]	@ 0x2c
	if (LayerIndex == 0){
 80006f2:	79fb      	ldrb	r3, [r7, #7]
 80006f4:	2b00      	cmp	r3, #0
 80006f6:	d101      	bne.n	80006fc <LTCD_Layer_Init+0x3c>
		pLayerCfg.FBStartAdress = (uintptr_t)frameBuffer;
 80006f8:	4b0f      	ldr	r3, [pc, #60]	@ (8000738 <LTCD_Layer_Init+0x78>)
 80006fa:	633b      	str	r3, [r7, #48]	@ 0x30
	}
	pLayerCfg.ImageWidth = LCD_PIXEL_WIDTH;
 80006fc:	23f0      	movs	r3, #240	@ 0xf0
 80006fe:	637b      	str	r3, [r7, #52]	@ 0x34
	pLayerCfg.ImageHeight = LCD_PIXEL_HEIGHT;
 8000700:	f44f 73a0 	mov.w	r3, #320	@ 0x140
 8000704:	63bb      	str	r3, [r7, #56]	@ 0x38
	pLayerCfg.Backcolor.Blue = 0;
 8000706:	2300      	movs	r3, #0
 8000708:	f887 303c 	strb.w	r3, [r7, #60]	@ 0x3c
	pLayerCfg.Backcolor.Green = 0;
 800070c:	2300      	movs	r3, #0
 800070e:	f887 303d 	strb.w	r3, [r7, #61]	@ 0x3d
	pLayerCfg.Backcolor.Red = 0;
 8000712:	2300      	movs	r3, #0
 8000714:	f887 303e 	strb.w	r3, [r7, #62]	@ 0x3e
	if (HAL_LTDC_ConfigLayer(&hltdc, &pLayerCfg, LayerIndex) != HAL_OK)
 8000718:	79fa      	ldrb	r2, [r7, #7]
 800071a:	f107 030c 	add.w	r3, r7, #12
 800071e:	4619      	mov	r1, r3
 8000720:	4806      	ldr	r0, [pc, #24]	@ (800073c <LTCD_Layer_Init+0x7c>)
 8000722:	f003 fcc5 	bl	80040b0 <HAL_LTDC_ConfigLayer>
 8000726:	4603      	mov	r3, r0
 8000728:	2b00      	cmp	r3, #0
 800072a:	d001      	beq.n	8000730 <LTCD_Layer_Init+0x70>
	{
		LCD_Error_Handler();
 800072c:	f000 fa78 	bl	8000c20 <LCD_Error_Handler>
	}
}
 8000730:	bf00      	nop
 8000732:	3740      	adds	r7, #64	@ 0x40
 8000734:	46bd      	mov	sp, r7
 8000736:	bd80      	pop	{r7, pc}
 8000738:	20000120 	.word	0x20000120
 800073c:	20000044 	.word	0x20000044

08000740 <LTCD__Init>:
{
  LCD_Clear(0,LCD_COLOR_WHITE);
}

void LTCD__Init(void)
{
 8000740:	b580      	push	{r7, lr}
 8000742:	af00      	add	r7, sp, #0
	hltdc.Instance = LTDC;
 8000744:	4b2a      	ldr	r3, [pc, #168]	@ (80007f0 <LTCD__Init+0xb0>)
 8000746:	4a2b      	ldr	r2, [pc, #172]	@ (80007f4 <LTCD__Init+0xb4>)
 8000748:	601a      	str	r2, [r3, #0]
	/* Configure horizontal synchronization width */
	hltdc.Init.HorizontalSync = ILI9341_HSYNC;
 800074a:	4b29      	ldr	r3, [pc, #164]	@ (80007f0 <LTCD__Init+0xb0>)
 800074c:	2209      	movs	r2, #9
 800074e:	615a      	str	r2, [r3, #20]
	/* Configure vertical synchronization height */
	hltdc.Init.VerticalSync = ILI9341_VSYNC;
 8000750:	4b27      	ldr	r3, [pc, #156]	@ (80007f0 <LTCD__Init+0xb0>)
 8000752:	2201      	movs	r2, #1
 8000754:	619a      	str	r2, [r3, #24]
	/* Configure accumulated horizontal back porch */
	hltdc.Init.AccumulatedHBP = ILI9341_HBP;
 8000756:	4b26      	ldr	r3, [pc, #152]	@ (80007f0 <LTCD__Init+0xb0>)
 8000758:	221d      	movs	r2, #29
 800075a:	61da      	str	r2, [r3, #28]
	/* Configure accumulated vertical back porch */
	hltdc.Init.AccumulatedVBP = ILI9341_VBP;
 800075c:	4b24      	ldr	r3, [pc, #144]	@ (80007f0 <LTCD__Init+0xb0>)
 800075e:	2203      	movs	r2, #3
 8000760:	621a      	str	r2, [r3, #32]
	/* Configure accumulated active width */
	hltdc.Init.AccumulatedActiveW = 269;
 8000762:	4b23      	ldr	r3, [pc, #140]	@ (80007f0 <LTCD__Init+0xb0>)
 8000764:	f240 120d 	movw	r2, #269	@ 0x10d
 8000768:	625a      	str	r2, [r3, #36]	@ 0x24
	/* Configure accumulated active height */
	hltdc.Init.AccumulatedActiveH = 323;
 800076a:	4b21      	ldr	r3, [pc, #132]	@ (80007f0 <LTCD__Init+0xb0>)
 800076c:	f240 1243 	movw	r2, #323	@ 0x143
 8000770:	629a      	str	r2, [r3, #40]	@ 0x28
	/* Configure total width */
	hltdc.Init.TotalWidth = 279;
 8000772:	4b1f      	ldr	r3, [pc, #124]	@ (80007f0 <LTCD__Init+0xb0>)
 8000774:	f240 1217 	movw	r2, #279	@ 0x117
 8000778:	62da      	str	r2, [r3, #44]	@ 0x2c
	/* Configure total height */
	hltdc.Init.TotalHeigh = 327;
 800077a:	4b1d      	ldr	r3, [pc, #116]	@ (80007f0 <LTCD__Init+0xb0>)
 800077c:	f240 1247 	movw	r2, #327	@ 0x147
 8000780:	631a      	str	r2, [r3, #48]	@ 0x30
	/* Configure R,G,B component values for LCD background color */
	hltdc.Init.Backcolor.Red = 0;
 8000782:	4b1b      	ldr	r3, [pc, #108]	@ (80007f0 <LTCD__Init+0xb0>)
 8000784:	2200      	movs	r2, #0
 8000786:	f883 2036 	strb.w	r2, [r3, #54]	@ 0x36
	hltdc.Init.Backcolor.Blue = 0;
 800078a:	4b19      	ldr	r3, [pc, #100]	@ (80007f0 <LTCD__Init+0xb0>)
 800078c:	2200      	movs	r2, #0
 800078e:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
	hltdc.Init.Backcolor.Green = 0;
 8000792:	4b17      	ldr	r3, [pc, #92]	@ (80007f0 <LTCD__Init+0xb0>)
 8000794:	2200      	movs	r2, #0
 8000796:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35
	/* PLLSAI_VCO Input = HSE_VALUE/PLL_M = 1 Mhz */
	/* PLLSAI_VCO Output = PLLSAI_VCO Input * PLLSAIN = 192 Mhz */
	/* PLLLCDCLK = PLLSAI_VCO Output/PLLSAIR = 192/4 = 48 Mhz */
	/* LTDC clock frequency = PLLLCDCLK / LTDC_PLLSAI_DIVR_8 = 48/4 = 6Mhz */

	PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_LTDC;
 800079a:	4b17      	ldr	r3, [pc, #92]	@ (80007f8 <LTCD__Init+0xb8>)
 800079c:	2208      	movs	r2, #8
 800079e:	601a      	str	r2, [r3, #0]
	PeriphClkInitStruct.PLLSAI.PLLSAIN = 192;
 80007a0:	4b15      	ldr	r3, [pc, #84]	@ (80007f8 <LTCD__Init+0xb8>)
 80007a2:	22c0      	movs	r2, #192	@ 0xc0
 80007a4:	611a      	str	r2, [r3, #16]
	PeriphClkInitStruct.PLLSAI.PLLSAIR = 4;
 80007a6:	4b14      	ldr	r3, [pc, #80]	@ (80007f8 <LTCD__Init+0xb8>)
 80007a8:	2204      	movs	r2, #4
 80007aa:	619a      	str	r2, [r3, #24]
	PeriphClkInitStruct.PLLSAIDivR = RCC_PLLSAIDIVR_8;
 80007ac:	4b12      	ldr	r3, [pc, #72]	@ (80007f8 <LTCD__Init+0xb8>)
 80007ae:	f44f 3200 	mov.w	r2, #131072	@ 0x20000
 80007b2:	625a      	str	r2, [r3, #36]	@ 0x24
	HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct);
 80007b4:	4810      	ldr	r0, [pc, #64]	@ (80007f8 <LTCD__Init+0xb8>)
 80007b6:	f004 fad5 	bl	8004d64 <HAL_RCCEx_PeriphCLKConfig>
	/* Polarity */
	hltdc.Init.HSPolarity = LTDC_HSPOLARITY_AL;
 80007ba:	4b0d      	ldr	r3, [pc, #52]	@ (80007f0 <LTCD__Init+0xb0>)
 80007bc:	2200      	movs	r2, #0
 80007be:	605a      	str	r2, [r3, #4]
	hltdc.Init.VSPolarity = LTDC_VSPOLARITY_AL;
 80007c0:	4b0b      	ldr	r3, [pc, #44]	@ (80007f0 <LTCD__Init+0xb0>)
 80007c2:	2200      	movs	r2, #0
 80007c4:	609a      	str	r2, [r3, #8]
	hltdc.Init.DEPolarity = LTDC_DEPOLARITY_AL;
 80007c6:	4b0a      	ldr	r3, [pc, #40]	@ (80007f0 <LTCD__Init+0xb0>)
 80007c8:	2200      	movs	r2, #0
 80007ca:	60da      	str	r2, [r3, #12]
	hltdc.Init.PCPolarity = LTDC_PCPOLARITY_IPC;
 80007cc:	4b08      	ldr	r3, [pc, #32]	@ (80007f0 <LTCD__Init+0xb0>)
 80007ce:	2200      	movs	r2, #0
 80007d0:	611a      	str	r2, [r3, #16]

	LCD_GPIO_Init();
 80007d2:	f7ff fead 	bl	8000530 <LCD_GPIO_Init>

	if (HAL_LTDC_Init(&hltdc) != HAL_OK)
 80007d6:	4806      	ldr	r0, [pc, #24]	@ (80007f0 <LTCD__Init+0xb0>)
 80007d8:	f003 fb9a 	bl	8003f10 <HAL_LTDC_Init>
 80007dc:	4603      	mov	r3, r0
 80007de:	2b00      	cmp	r3, #0
 80007e0:	d001      	beq.n	80007e6 <LTCD__Init+0xa6>
	 {
	   LCD_Error_Handler();
 80007e2:	f000 fa1d 	bl	8000c20 <LCD_Error_Handler>
	 }

	ili9341_Init();
 80007e6:	f000 fa2c 	bl	8000c42 <ili9341_Init>
}
 80007ea:	bf00      	nop
 80007ec:	bd80      	pop	{r7, pc}
 80007ee:	bf00      	nop
 80007f0:	20000044 	.word	0x20000044
 80007f4:	40016800 	.word	0x40016800
 80007f8:	200000ec 	.word	0x200000ec

080007fc <LCD_Draw_Pixel>:
 * This is really the only function needed.
 * All drawing consists of is manipulating the array.
 * Adding input sanitation should probably be done.
 */
void LCD_Draw_Pixel(uint16_t x, uint16_t y, uint16_t color)
{
 80007fc:	b480      	push	{r7}
 80007fe:	b083      	sub	sp, #12
 8000800:	af00      	add	r7, sp, #0
 8000802:	4603      	mov	r3, r0
 8000804:	80fb      	strh	r3, [r7, #6]
 8000806:	460b      	mov	r3, r1
 8000808:	80bb      	strh	r3, [r7, #4]
 800080a:	4613      	mov	r3, r2
 800080c:	807b      	strh	r3, [r7, #2]
	frameBuffer[y*LCD_PIXEL_WIDTH+x] = color;  //You cannot do x*y to set the pixel.
 800080e:	88ba      	ldrh	r2, [r7, #4]
 8000810:	4613      	mov	r3, r2
 8000812:	011b      	lsls	r3, r3, #4
 8000814:	1a9b      	subs	r3, r3, r2
 8000816:	011b      	lsls	r3, r3, #4
 8000818:	461a      	mov	r2, r3
 800081a:	88fb      	ldrh	r3, [r7, #6]
 800081c:	4413      	add	r3, r2
 800081e:	4905      	ldr	r1, [pc, #20]	@ (8000834 <LCD_Draw_Pixel+0x38>)
 8000820:	887a      	ldrh	r2, [r7, #2]
 8000822:	f821 2013 	strh.w	r2, [r1, r3, lsl #1]
}
 8000826:	bf00      	nop
 8000828:	370c      	adds	r7, #12
 800082a:	46bd      	mov	sp, r7
 800082c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000830:	4770      	bx	lr
 8000832:	bf00      	nop
 8000834:	20000120 	.word	0x20000120

08000838 <LCD_Draw_Circle_Fill>:
 * There is tons of ways to handle drawing. I dont think it matters too much.
 */


void LCD_Draw_Circle_Fill(uint16_t Xpos, uint16_t Ypos, uint16_t radius, uint16_t color)
{
 8000838:	b590      	push	{r4, r7, lr}
 800083a:	b085      	sub	sp, #20
 800083c:	af00      	add	r7, sp, #0
 800083e:	4604      	mov	r4, r0
 8000840:	4608      	mov	r0, r1
 8000842:	4611      	mov	r1, r2
 8000844:	461a      	mov	r2, r3
 8000846:	4623      	mov	r3, r4
 8000848:	80fb      	strh	r3, [r7, #6]
 800084a:	4603      	mov	r3, r0
 800084c:	80bb      	strh	r3, [r7, #4]
 800084e:	460b      	mov	r3, r1
 8000850:	807b      	strh	r3, [r7, #2]
 8000852:	4613      	mov	r3, r2
 8000854:	803b      	strh	r3, [r7, #0]
    for(int16_t y=-radius; y<=radius; y++)
 8000856:	887b      	ldrh	r3, [r7, #2]
 8000858:	425b      	negs	r3, r3
 800085a:	b29b      	uxth	r3, r3
 800085c:	81fb      	strh	r3, [r7, #14]
 800085e:	e034      	b.n	80008ca <LCD_Draw_Circle_Fill+0x92>
    {
        for(int16_t x=-radius; x<=radius; x++)
 8000860:	887b      	ldrh	r3, [r7, #2]
 8000862:	425b      	negs	r3, r3
 8000864:	b29b      	uxth	r3, r3
 8000866:	81bb      	strh	r3, [r7, #12]
 8000868:	e024      	b.n	80008b4 <LCD_Draw_Circle_Fill+0x7c>
        {
            if(x*x+y*y <= radius*radius)
 800086a:	f9b7 300c 	ldrsh.w	r3, [r7, #12]
 800086e:	f9b7 200c 	ldrsh.w	r2, [r7, #12]
 8000872:	fb03 f202 	mul.w	r2, r3, r2
 8000876:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
 800087a:	f9b7 100e 	ldrsh.w	r1, [r7, #14]
 800087e:	fb01 f303 	mul.w	r3, r1, r3
 8000882:	441a      	add	r2, r3
 8000884:	887b      	ldrh	r3, [r7, #2]
 8000886:	8879      	ldrh	r1, [r7, #2]
 8000888:	fb01 f303 	mul.w	r3, r1, r3
 800088c:	429a      	cmp	r2, r3
 800088e:	dc0b      	bgt.n	80008a8 <LCD_Draw_Circle_Fill+0x70>
            {
            	LCD_Draw_Pixel(x+Xpos, y+Ypos, color);
 8000890:	89ba      	ldrh	r2, [r7, #12]
 8000892:	88fb      	ldrh	r3, [r7, #6]
 8000894:	4413      	add	r3, r2
 8000896:	b298      	uxth	r0, r3
 8000898:	89fa      	ldrh	r2, [r7, #14]
 800089a:	88bb      	ldrh	r3, [r7, #4]
 800089c:	4413      	add	r3, r2
 800089e:	b29b      	uxth	r3, r3
 80008a0:	883a      	ldrh	r2, [r7, #0]
 80008a2:	4619      	mov	r1, r3
 80008a4:	f7ff ffaa 	bl	80007fc <LCD_Draw_Pixel>
        for(int16_t x=-radius; x<=radius; x++)
 80008a8:	f9b7 300c 	ldrsh.w	r3, [r7, #12]
 80008ac:	b29b      	uxth	r3, r3
 80008ae:	3301      	adds	r3, #1
 80008b0:	b29b      	uxth	r3, r3
 80008b2:	81bb      	strh	r3, [r7, #12]
 80008b4:	f9b7 200c 	ldrsh.w	r2, [r7, #12]
 80008b8:	887b      	ldrh	r3, [r7, #2]
 80008ba:	429a      	cmp	r2, r3
 80008bc:	ddd5      	ble.n	800086a <LCD_Draw_Circle_Fill+0x32>
    for(int16_t y=-radius; y<=radius; y++)
 80008be:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
 80008c2:	b29b      	uxth	r3, r3
 80008c4:	3301      	adds	r3, #1
 80008c6:	b29b      	uxth	r3, r3
 80008c8:	81fb      	strh	r3, [r7, #14]
 80008ca:	f9b7 200e 	ldrsh.w	r2, [r7, #14]
 80008ce:	887b      	ldrh	r3, [r7, #2]
 80008d0:	429a      	cmp	r2, r3
 80008d2:	ddc5      	ble.n	8000860 <LCD_Draw_Circle_Fill+0x28>
            }
        }
    }
}
 80008d4:	bf00      	nop
 80008d6:	bf00      	nop
 80008d8:	3714      	adds	r7, #20
 80008da:	46bd      	mov	sp, r7
 80008dc:	bd90      	pop	{r4, r7, pc}

080008de <LCD_Draw_Square_Fill>:

void LCD_Draw_Square_Fill(uint16_t Xpos, uint16_t Ypos, uint16_t length, uint16_t color)
{
 80008de:	b590      	push	{r4, r7, lr}
 80008e0:	b085      	sub	sp, #20
 80008e2:	af00      	add	r7, sp, #0
 80008e4:	4604      	mov	r4, r0
 80008e6:	4608      	mov	r0, r1
 80008e8:	4611      	mov	r1, r2
 80008ea:	461a      	mov	r2, r3
 80008ec:	4623      	mov	r3, r4
 80008ee:	80fb      	strh	r3, [r7, #6]
 80008f0:	4603      	mov	r3, r0
 80008f2:	80bb      	strh	r3, [r7, #4]
 80008f4:	460b      	mov	r3, r1
 80008f6:	807b      	strh	r3, [r7, #2]
 80008f8:	4613      	mov	r3, r2
 80008fa:	803b      	strh	r3, [r7, #0]
	for (int16_t y = Ypos ; y <= (Ypos+length); y++)
 80008fc:	88bb      	ldrh	r3, [r7, #4]
 80008fe:	81fb      	strh	r3, [r7, #14]
 8000900:	e01b      	b.n	800093a <LCD_Draw_Square_Fill+0x5c>
	{
		for (int16_t x = Xpos; x<= (Xpos+length); x++)
 8000902:	88fb      	ldrh	r3, [r7, #6]
 8000904:	81bb      	strh	r3, [r7, #12]
 8000906:	e00b      	b.n	8000920 <LCD_Draw_Square_Fill+0x42>
		{
			LCD_Draw_Pixel(x, y, color);
 8000908:	89bb      	ldrh	r3, [r7, #12]
 800090a:	89f9      	ldrh	r1, [r7, #14]
 800090c:	883a      	ldrh	r2, [r7, #0]
 800090e:	4618      	mov	r0, r3
 8000910:	f7ff ff74 	bl	80007fc <LCD_Draw_Pixel>
		for (int16_t x = Xpos; x<= (Xpos+length); x++)
 8000914:	f9b7 300c 	ldrsh.w	r3, [r7, #12]
 8000918:	b29b      	uxth	r3, r3
 800091a:	3301      	adds	r3, #1
 800091c:	b29b      	uxth	r3, r3
 800091e:	81bb      	strh	r3, [r7, #12]
 8000920:	f9b7 200c 	ldrsh.w	r2, [r7, #12]
 8000924:	88f9      	ldrh	r1, [r7, #6]
 8000926:	887b      	ldrh	r3, [r7, #2]
 8000928:	440b      	add	r3, r1
 800092a:	429a      	cmp	r2, r3
 800092c:	ddec      	ble.n	8000908 <LCD_Draw_Square_Fill+0x2a>
	for (int16_t y = Ypos ; y <= (Ypos+length); y++)
 800092e:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
 8000932:	b29b      	uxth	r3, r3
 8000934:	3301      	adds	r3, #1
 8000936:	b29b      	uxth	r3, r3
 8000938:	81fb      	strh	r3, [r7, #14]
 800093a:	f9b7 200e 	ldrsh.w	r2, [r7, #14]
 800093e:	88b9      	ldrh	r1, [r7, #4]
 8000940:	887b      	ldrh	r3, [r7, #2]
 8000942:	440b      	add	r3, r1
 8000944:	429a      	cmp	r2, r3
 8000946:	dddc      	ble.n	8000902 <LCD_Draw_Square_Fill+0x24>
		}
	}
}
 8000948:	bf00      	nop
 800094a:	bf00      	nop
 800094c:	3714      	adds	r7, #20
 800094e:	46bd      	mov	sp, r7
 8000950:	bd90      	pop	{r4, r7, pc}
	...

08000954 <LCD_Clear>:
	  LCD_Draw_Pixel(x, i+y, color);
  }
}

void LCD_Clear(uint8_t LayerIndex, uint16_t Color)
{
 8000954:	b480      	push	{r7}
 8000956:	b085      	sub	sp, #20
 8000958:	af00      	add	r7, sp, #0
 800095a:	4603      	mov	r3, r0
 800095c:	460a      	mov	r2, r1
 800095e:	71fb      	strb	r3, [r7, #7]
 8000960:	4613      	mov	r3, r2
 8000962:	80bb      	strh	r3, [r7, #4]
	if (LayerIndex == 0){
 8000964:	79fb      	ldrb	r3, [r7, #7]
 8000966:	2b00      	cmp	r3, #0
 8000968:	d10e      	bne.n	8000988 <LCD_Clear+0x34>
		for (uint32_t i = 0; i < LCD_PIXEL_WIDTH * LCD_PIXEL_HEIGHT; i++){
 800096a:	2300      	movs	r3, #0
 800096c:	60fb      	str	r3, [r7, #12]
 800096e:	e007      	b.n	8000980 <LCD_Clear+0x2c>
			frameBuffer[i] = Color;
 8000970:	4908      	ldr	r1, [pc, #32]	@ (8000994 <LCD_Clear+0x40>)
 8000972:	68fb      	ldr	r3, [r7, #12]
 8000974:	88ba      	ldrh	r2, [r7, #4]
 8000976:	f821 2013 	strh.w	r2, [r1, r3, lsl #1]
		for (uint32_t i = 0; i < LCD_PIXEL_WIDTH * LCD_PIXEL_HEIGHT; i++){
 800097a:	68fb      	ldr	r3, [r7, #12]
 800097c:	3301      	adds	r3, #1
 800097e:	60fb      	str	r3, [r7, #12]
 8000980:	68fb      	ldr	r3, [r7, #12]
 8000982:	f5b3 3f96 	cmp.w	r3, #76800	@ 0x12c00
 8000986:	d3f3      	bcc.n	8000970 <LCD_Clear+0x1c>
		}
	}
  // TODO: Add more Layers if needed
}
 8000988:	bf00      	nop
 800098a:	3714      	adds	r7, #20
 800098c:	46bd      	mov	sp, r7
 800098e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000992:	4770      	bx	lr
 8000994:	20000120 	.word	0x20000120

08000998 <LCD_SetTextColor>:

//This was taken and adapted from stm32's mcu code
void LCD_SetTextColor(uint16_t Color)
{
 8000998:	b480      	push	{r7}
 800099a:	b083      	sub	sp, #12
 800099c:	af00      	add	r7, sp, #0
 800099e:	4603      	mov	r3, r0
 80009a0:	80fb      	strh	r3, [r7, #6]
  CurrentTextColor = Color;
 80009a2:	4a04      	ldr	r2, [pc, #16]	@ (80009b4 <LCD_SetTextColor+0x1c>)
 80009a4:	88fb      	ldrh	r3, [r7, #6]
 80009a6:	8013      	strh	r3, [r2, #0]
}
 80009a8:	bf00      	nop
 80009aa:	370c      	adds	r7, #12
 80009ac:	46bd      	mov	sp, r7
 80009ae:	f85d 7b04 	ldr.w	r7, [sp], #4
 80009b2:	4770      	bx	lr
 80009b4:	20000000 	.word	0x20000000

080009b8 <LCD_SetFont>:


//This was taken and adapted from stm32's mcu code
void LCD_SetFont(FONT_t *fonts)
{
 80009b8:	b480      	push	{r7}
 80009ba:	b083      	sub	sp, #12
 80009bc:	af00      	add	r7, sp, #0
 80009be:	6078      	str	r0, [r7, #4]
  LCD_Currentfonts = fonts;
 80009c0:	4a04      	ldr	r2, [pc, #16]	@ (80009d4 <LCD_SetFont+0x1c>)
 80009c2:	687b      	ldr	r3, [r7, #4]
 80009c4:	6013      	str	r3, [r2, #0]
}
 80009c6:	bf00      	nop
 80009c8:	370c      	adds	r7, #12
 80009ca:	46bd      	mov	sp, r7
 80009cc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80009d0:	4770      	bx	lr
 80009d2:	bf00      	nop
 80009d4:	2000011c 	.word	0x2000011c

080009d8 <LCD_Draw_Char>:

//This was taken and adapted from stm32's mcu code
void LCD_Draw_Char(uint16_t Xpos, uint16_t Ypos, const uint16_t *c)
{
 80009d8:	b580      	push	{r7, lr}
 80009da:	b084      	sub	sp, #16
 80009dc:	af00      	add	r7, sp, #0
 80009de:	4603      	mov	r3, r0
 80009e0:	603a      	str	r2, [r7, #0]
 80009e2:	80fb      	strh	r3, [r7, #6]
 80009e4:	460b      	mov	r3, r1
 80009e6:	80bb      	strh	r3, [r7, #4]
  uint32_t index = 0, counter = 0;
 80009e8:	2300      	movs	r3, #0
 80009ea:	60fb      	str	r3, [r7, #12]
 80009ec:	2300      	movs	r3, #0
 80009ee:	60bb      	str	r3, [r7, #8]
  for(index = 0; index < LCD_Currentfonts->Height; index++)
 80009f0:	2300      	movs	r3, #0
 80009f2:	60fb      	str	r3, [r7, #12]
 80009f4:	e04c      	b.n	8000a90 <LCD_Draw_Char+0xb8>
  {
    for(counter = 0; counter < LCD_Currentfonts->Width; counter++)
 80009f6:	2300      	movs	r3, #0
 80009f8:	60bb      	str	r3, [r7, #8]
 80009fa:	e03f      	b.n	8000a7c <LCD_Draw_Char+0xa4>
    {
      if((((c[index] & ((0x80 << ((LCD_Currentfonts->Width / 12 ) * 8 ) ) >> counter)) == 0x00) && (LCD_Currentfonts->Width <= 12)) || (((c[index] & (0x1 << counter)) == 0x00)&&(LCD_Currentfonts->Width > 12 )))
 80009fc:	68fb      	ldr	r3, [r7, #12]
 80009fe:	005b      	lsls	r3, r3, #1
 8000a00:	683a      	ldr	r2, [r7, #0]
 8000a02:	4413      	add	r3, r2
 8000a04:	881b      	ldrh	r3, [r3, #0]
 8000a06:	4619      	mov	r1, r3
 8000a08:	4b27      	ldr	r3, [pc, #156]	@ (8000aa8 <LCD_Draw_Char+0xd0>)
 8000a0a:	681b      	ldr	r3, [r3, #0]
 8000a0c:	889b      	ldrh	r3, [r3, #4]
 8000a0e:	4a27      	ldr	r2, [pc, #156]	@ (8000aac <LCD_Draw_Char+0xd4>)
 8000a10:	fba2 2303 	umull	r2, r3, r2, r3
 8000a14:	08db      	lsrs	r3, r3, #3
 8000a16:	b29b      	uxth	r3, r3
 8000a18:	00db      	lsls	r3, r3, #3
 8000a1a:	2280      	movs	r2, #128	@ 0x80
 8000a1c:	409a      	lsls	r2, r3
 8000a1e:	68bb      	ldr	r3, [r7, #8]
 8000a20:	fa42 f303 	asr.w	r3, r2, r3
 8000a24:	400b      	ands	r3, r1
 8000a26:	2b00      	cmp	r3, #0
 8000a28:	d104      	bne.n	8000a34 <LCD_Draw_Char+0x5c>
 8000a2a:	4b1f      	ldr	r3, [pc, #124]	@ (8000aa8 <LCD_Draw_Char+0xd0>)
 8000a2c:	681b      	ldr	r3, [r3, #0]
 8000a2e:	889b      	ldrh	r3, [r3, #4]
 8000a30:	2b0c      	cmp	r3, #12
 8000a32:	d920      	bls.n	8000a76 <LCD_Draw_Char+0x9e>
 8000a34:	68fb      	ldr	r3, [r7, #12]
 8000a36:	005b      	lsls	r3, r3, #1
 8000a38:	683a      	ldr	r2, [r7, #0]
 8000a3a:	4413      	add	r3, r2
 8000a3c:	881b      	ldrh	r3, [r3, #0]
 8000a3e:	461a      	mov	r2, r3
 8000a40:	68bb      	ldr	r3, [r7, #8]
 8000a42:	fa42 f303 	asr.w	r3, r2, r3
 8000a46:	f003 0301 	and.w	r3, r3, #1
 8000a4a:	2b00      	cmp	r3, #0
 8000a4c:	d104      	bne.n	8000a58 <LCD_Draw_Char+0x80>
 8000a4e:	4b16      	ldr	r3, [pc, #88]	@ (8000aa8 <LCD_Draw_Char+0xd0>)
 8000a50:	681b      	ldr	r3, [r3, #0]
 8000a52:	889b      	ldrh	r3, [r3, #4]
 8000a54:	2b0c      	cmp	r3, #12
 8000a56:	d80e      	bhi.n	8000a76 <LCD_Draw_Char+0x9e>
      {
         //Background If want to overrite text under then add a set color here
      }
      else
      {
    	  LCD_Draw_Pixel(counter + Xpos,index + Ypos,CurrentTextColor);
 8000a58:	68bb      	ldr	r3, [r7, #8]
 8000a5a:	b29a      	uxth	r2, r3
 8000a5c:	88fb      	ldrh	r3, [r7, #6]
 8000a5e:	4413      	add	r3, r2
 8000a60:	b298      	uxth	r0, r3
 8000a62:	68fb      	ldr	r3, [r7, #12]
 8000a64:	b29a      	uxth	r2, r3
 8000a66:	88bb      	ldrh	r3, [r7, #4]
 8000a68:	4413      	add	r3, r2
 8000a6a:	b29b      	uxth	r3, r3
 8000a6c:	4a10      	ldr	r2, [pc, #64]	@ (8000ab0 <LCD_Draw_Char+0xd8>)
 8000a6e:	8812      	ldrh	r2, [r2, #0]
 8000a70:	4619      	mov	r1, r3
 8000a72:	f7ff fec3 	bl	80007fc <LCD_Draw_Pixel>
    for(counter = 0; counter < LCD_Currentfonts->Width; counter++)
 8000a76:	68bb      	ldr	r3, [r7, #8]
 8000a78:	3301      	adds	r3, #1
 8000a7a:	60bb      	str	r3, [r7, #8]
 8000a7c:	4b0a      	ldr	r3, [pc, #40]	@ (8000aa8 <LCD_Draw_Char+0xd0>)
 8000a7e:	681b      	ldr	r3, [r3, #0]
 8000a80:	889b      	ldrh	r3, [r3, #4]
 8000a82:	461a      	mov	r2, r3
 8000a84:	68bb      	ldr	r3, [r7, #8]
 8000a86:	4293      	cmp	r3, r2
 8000a88:	d3b8      	bcc.n	80009fc <LCD_Draw_Char+0x24>
  for(index = 0; index < LCD_Currentfonts->Height; index++)
 8000a8a:	68fb      	ldr	r3, [r7, #12]
 8000a8c:	3301      	adds	r3, #1
 8000a8e:	60fb      	str	r3, [r7, #12]
 8000a90:	4b05      	ldr	r3, [pc, #20]	@ (8000aa8 <LCD_Draw_Char+0xd0>)
 8000a92:	681b      	ldr	r3, [r3, #0]
 8000a94:	88db      	ldrh	r3, [r3, #6]
 8000a96:	461a      	mov	r2, r3
 8000a98:	68fb      	ldr	r3, [r7, #12]
 8000a9a:	4293      	cmp	r3, r2
 8000a9c:	d3ab      	bcc.n	80009f6 <LCD_Draw_Char+0x1e>
      }
    }
  }
}
 8000a9e:	bf00      	nop
 8000aa0:	bf00      	nop
 8000aa2:	3710      	adds	r7, #16
 8000aa4:	46bd      	mov	sp, r7
 8000aa6:	bd80      	pop	{r7, pc}
 8000aa8:	2000011c 	.word	0x2000011c
 8000aac:	aaaaaaab 	.word	0xaaaaaaab
 8000ab0:	20000000 	.word	0x20000000

08000ab4 <LCD_DisplayChar>:

//This was taken and adapted from stm32's mcu code
void LCD_DisplayChar(uint16_t Xpos, uint16_t Ypos, uint8_t Ascii)
{
 8000ab4:	b580      	push	{r7, lr}
 8000ab6:	b082      	sub	sp, #8
 8000ab8:	af00      	add	r7, sp, #0
 8000aba:	4603      	mov	r3, r0
 8000abc:	80fb      	strh	r3, [r7, #6]
 8000abe:	460b      	mov	r3, r1
 8000ac0:	80bb      	strh	r3, [r7, #4]
 8000ac2:	4613      	mov	r3, r2
 8000ac4:	70fb      	strb	r3, [r7, #3]
  Ascii -= 32;
 8000ac6:	78fb      	ldrb	r3, [r7, #3]
 8000ac8:	3b20      	subs	r3, #32
 8000aca:	70fb      	strb	r3, [r7, #3]
  LCD_Draw_Char(Xpos, Ypos, &LCD_Currentfonts->table[Ascii * LCD_Currentfonts->Height]);
 8000acc:	4b09      	ldr	r3, [pc, #36]	@ (8000af4 <LCD_DisplayChar+0x40>)
 8000ace:	681b      	ldr	r3, [r3, #0]
 8000ad0:	681a      	ldr	r2, [r3, #0]
 8000ad2:	78fb      	ldrb	r3, [r7, #3]
 8000ad4:	4907      	ldr	r1, [pc, #28]	@ (8000af4 <LCD_DisplayChar+0x40>)
 8000ad6:	6809      	ldr	r1, [r1, #0]
 8000ad8:	88c9      	ldrh	r1, [r1, #6]
 8000ada:	fb01 f303 	mul.w	r3, r1, r3
 8000ade:	005b      	lsls	r3, r3, #1
 8000ae0:	441a      	add	r2, r3
 8000ae2:	88b9      	ldrh	r1, [r7, #4]
 8000ae4:	88fb      	ldrh	r3, [r7, #6]
 8000ae6:	4618      	mov	r0, r3
 8000ae8:	f7ff ff76 	bl	80009d8 <LCD_Draw_Char>
}
 8000aec:	bf00      	nop
 8000aee:	3708      	adds	r7, #8
 8000af0:	46bd      	mov	sp, r7
 8000af2:	bd80      	pop	{r7, pc}
 8000af4:	2000011c 	.word	0x2000011c

08000af8 <LCD_DrawMonkey>:
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */

void LCD_DrawMonkey(uint16_t x, uint16_t y)
{
 8000af8:	b580      	push	{r7, lr}
 8000afa:	b084      	sub	sp, #16
 8000afc:	af00      	add	r7, sp, #0
 8000afe:	4603      	mov	r3, r0
 8000b00:	460a      	mov	r2, r1
 8000b02:	80fb      	strh	r3, [r7, #6]
 8000b04:	4613      	mov	r3, r2
 8000b06:	80bb      	strh	r3, [r7, #4]

	    // Head
	    LCD_Draw_Circle_Fill(x, y, 30, LCD_COLOR_BROWN);
 8000b08:	88b9      	ldrh	r1, [r7, #4]
 8000b0a:	88f8      	ldrh	r0, [r7, #6]
 8000b0c:	f649 3387 	movw	r3, #39815	@ 0x9b87
 8000b10:	221e      	movs	r2, #30
 8000b12:	f7ff fe91 	bl	8000838 <LCD_Draw_Circle_Fill>

	    // Ears
	    LCD_Draw_Circle_Fill(x - 30, y, 10, LCD_COLOR_BROWN); // Left ear
 8000b16:	88fb      	ldrh	r3, [r7, #6]
 8000b18:	3b1e      	subs	r3, #30
 8000b1a:	b298      	uxth	r0, r3
 8000b1c:	88b9      	ldrh	r1, [r7, #4]
 8000b1e:	f649 3387 	movw	r3, #39815	@ 0x9b87
 8000b22:	220a      	movs	r2, #10
 8000b24:	f7ff fe88 	bl	8000838 <LCD_Draw_Circle_Fill>
	    LCD_Draw_Circle_Fill(x + 30, y, 10, LCD_COLOR_BROWN); // Right ear
 8000b28:	88fb      	ldrh	r3, [r7, #6]
 8000b2a:	331e      	adds	r3, #30
 8000b2c:	b298      	uxth	r0, r3
 8000b2e:	88b9      	ldrh	r1, [r7, #4]
 8000b30:	f649 3387 	movw	r3, #39815	@ 0x9b87
 8000b34:	220a      	movs	r2, #10
 8000b36:	f7ff fe7f 	bl	8000838 <LCD_Draw_Circle_Fill>

	    // Eyes
	    LCD_Draw_Circle_Fill(x - 10, y - 10, 2, LCD_COLOR_BLACK); // Left eye (black)
 8000b3a:	88fb      	ldrh	r3, [r7, #6]
 8000b3c:	3b0a      	subs	r3, #10
 8000b3e:	b298      	uxth	r0, r3
 8000b40:	88bb      	ldrh	r3, [r7, #4]
 8000b42:	3b0a      	subs	r3, #10
 8000b44:	b299      	uxth	r1, r3
 8000b46:	2300      	movs	r3, #0
 8000b48:	2202      	movs	r2, #2
 8000b4a:	f7ff fe75 	bl	8000838 <LCD_Draw_Circle_Fill>
	    LCD_Draw_Circle_Fill(x + 10, y - 10, 2, LCD_COLOR_BLACK); // Right eye (black)
 8000b4e:	88fb      	ldrh	r3, [r7, #6]
 8000b50:	330a      	adds	r3, #10
 8000b52:	b298      	uxth	r0, r3
 8000b54:	88bb      	ldrh	r3, [r7, #4]
 8000b56:	3b0a      	subs	r3, #10
 8000b58:	b299      	uxth	r1, r3
 8000b5a:	2300      	movs	r3, #0
 8000b5c:	2202      	movs	r2, #2
 8000b5e:	f7ff fe6b 	bl	8000838 <LCD_Draw_Circle_Fill>

	    // Nose
	    LCD_Draw_Circle_Fill(x, y, 2, LCD_COLOR_BLACK); // Nose (black)
 8000b62:	88b9      	ldrh	r1, [r7, #4]
 8000b64:	88f8      	ldrh	r0, [r7, #6]
 8000b66:	2300      	movs	r3, #0
 8000b68:	2202      	movs	r2, #2
 8000b6a:	f7ff fe65 	bl	8000838 <LCD_Draw_Circle_Fill>

	    // Mouth
	    for (int xx = x - 5; xx <= x + 5; xx++) {
 8000b6e:	88fb      	ldrh	r3, [r7, #6]
 8000b70:	3b05      	subs	r3, #5
 8000b72:	60fb      	str	r3, [r7, #12]
 8000b74:	e00b      	b.n	8000b8e <LCD_DrawMonkey+0x96>
	    	LCD_Draw_Pixel(xx, y + 10, LCD_COLOR_BLACK); // Mouth (black)
 8000b76:	68fb      	ldr	r3, [r7, #12]
 8000b78:	b298      	uxth	r0, r3
 8000b7a:	88bb      	ldrh	r3, [r7, #4]
 8000b7c:	330a      	adds	r3, #10
 8000b7e:	b29b      	uxth	r3, r3
 8000b80:	2200      	movs	r2, #0
 8000b82:	4619      	mov	r1, r3
 8000b84:	f7ff fe3a 	bl	80007fc <LCD_Draw_Pixel>
	    for (int xx = x - 5; xx <= x + 5; xx++) {
 8000b88:	68fb      	ldr	r3, [r7, #12]
 8000b8a:	3301      	adds	r3, #1
 8000b8c:	60fb      	str	r3, [r7, #12]
 8000b8e:	88fb      	ldrh	r3, [r7, #6]
 8000b90:	3305      	adds	r3, #5
 8000b92:	68fa      	ldr	r2, [r7, #12]
 8000b94:	429a      	cmp	r2, r3
 8000b96:	ddee      	ble.n	8000b76 <LCD_DrawMonkey+0x7e>
	    }
}
 8000b98:	bf00      	nop
 8000b9a:	bf00      	nop
 8000b9c:	3710      	adds	r7, #16
 8000b9e:	46bd      	mov	sp, r7
 8000ba0:	bd80      	pop	{r7, pc}
	...

08000ba4 <LCD_HomeScreen>:

void LCD_HomeScreen(void)
{
 8000ba4:	b580      	push	{r7, lr}
 8000ba6:	af00      	add	r7, sp, #0
	LCD_SetTextColor(LCD_COLOR_BLACK);
 8000ba8:	2000      	movs	r0, #0
 8000baa:	f7ff fef5 	bl	8000998 <LCD_SetTextColor>
	LCD_SetFont(&Font16x24);
 8000bae:	481b      	ldr	r0, [pc, #108]	@ (8000c1c <LCD_HomeScreen+0x78>)
 8000bb0:	f7ff ff02 	bl	80009b8 <LCD_SetFont>

	LCD_DrawMonkey(120, 50);
 8000bb4:	2132      	movs	r1, #50	@ 0x32
 8000bb6:	2078      	movs	r0, #120	@ 0x78
 8000bb8:	f7ff ff9e 	bl	8000af8 <LCD_DrawMonkey>

	LCD_DisplayChar(90, 160, 'C');
 8000bbc:	2243      	movs	r2, #67	@ 0x43
 8000bbe:	21a0      	movs	r1, #160	@ 0xa0
 8000bc0:	205a      	movs	r0, #90	@ 0x5a
 8000bc2:	f7ff ff77 	bl	8000ab4 <LCD_DisplayChar>
	LCD_DisplayChar(105, 160, 'H');
 8000bc6:	2248      	movs	r2, #72	@ 0x48
 8000bc8:	21a0      	movs	r1, #160	@ 0xa0
 8000bca:	2069      	movs	r0, #105	@ 0x69
 8000bcc:	f7ff ff72 	bl	8000ab4 <LCD_DisplayChar>
	LCD_DisplayChar(120, 160, 'I');
 8000bd0:	2249      	movs	r2, #73	@ 0x49
 8000bd2:	21a0      	movs	r1, #160	@ 0xa0
 8000bd4:	2078      	movs	r0, #120	@ 0x78
 8000bd6:	f7ff ff6d 	bl	8000ab4 <LCD_DisplayChar>
	LCD_DisplayChar(135, 160, 'M');
 8000bda:	224d      	movs	r2, #77	@ 0x4d
 8000bdc:	21a0      	movs	r1, #160	@ 0xa0
 8000bde:	2087      	movs	r0, #135	@ 0x87
 8000be0:	f7ff ff68 	bl	8000ab4 <LCD_DisplayChar>
	LCD_DisplayChar(150, 160, 'P');
 8000be4:	2250      	movs	r2, #80	@ 0x50
 8000be6:	21a0      	movs	r1, #160	@ 0xa0
 8000be8:	2096      	movs	r0, #150	@ 0x96
 8000bea:	f7ff ff63 	bl	8000ab4 <LCD_DisplayChar>

	LCD_DisplayChar(100, 180, 'T');
 8000bee:	2254      	movs	r2, #84	@ 0x54
 8000bf0:	21b4      	movs	r1, #180	@ 0xb4
 8000bf2:	2064      	movs	r0, #100	@ 0x64
 8000bf4:	f7ff ff5e 	bl	8000ab4 <LCD_DisplayChar>
	LCD_DisplayChar(115, 180, 'E');
 8000bf8:	2245      	movs	r2, #69	@ 0x45
 8000bfa:	21b4      	movs	r1, #180	@ 0xb4
 8000bfc:	2073      	movs	r0, #115	@ 0x73
 8000bfe:	f7ff ff59 	bl	8000ab4 <LCD_DisplayChar>
	LCD_DisplayChar(130, 180, 'S');
 8000c02:	2253      	movs	r2, #83	@ 0x53
 8000c04:	21b4      	movs	r1, #180	@ 0xb4
 8000c06:	2082      	movs	r0, #130	@ 0x82
 8000c08:	f7ff ff54 	bl	8000ab4 <LCD_DisplayChar>
	LCD_DisplayChar(145, 180, 'T');
 8000c0c:	2254      	movs	r2, #84	@ 0x54
 8000c0e:	21b4      	movs	r1, #180	@ 0xb4
 8000c10:	2091      	movs	r0, #145	@ 0x91
 8000c12:	f7ff ff4f 	bl	8000ab4 <LCD_DisplayChar>
}
 8000c16:	bf00      	nop
 8000c18:	bd80      	pop	{r7, pc}
 8000c1a:	bf00      	nop
 8000c1c:	20000004 	.word	0x20000004

08000c20 <LCD_Error_Handler>:
void LCD_Error_Handler(void)
{
 8000c20:	b480      	push	{r7}
 8000c22:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting special-purpose register PRIMASK.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8000c24:	b672      	cpsid	i
}
 8000c26:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8000c28:	bf00      	nop
 8000c2a:	e7fd      	b.n	8000c28 <LCD_Error_Handler+0x8>

08000c2c <InitializeLCDTouch>:
// Touch Functionality   //

#if COMPILE_TOUCH_FUNCTIONS == 1

void InitializeLCDTouch(void)
{
 8000c2c:	b580      	push	{r7, lr}
 8000c2e:	af00      	add	r7, sp, #0
  if(STMPE811_Init() != STMPE811_State_Ok)
 8000c30:	f001 fa6f 	bl	8002112 <STMPE811_Init>
 8000c34:	4603      	mov	r3, r0
 8000c36:	2b02      	cmp	r3, #2
 8000c38:	d001      	beq.n	8000c3e <InitializeLCDTouch+0x12>
  {
	 for(;;); // Hang code due to error in initialzation
 8000c3a:	bf00      	nop
 8000c3c:	e7fd      	b.n	8000c3a <InitializeLCDTouch+0xe>
  }
}
 8000c3e:	bf00      	nop
 8000c40:	bd80      	pop	{r7, pc}

08000c42 <ili9341_Init>:
  * @brief  Power on the LCD.
  * @param  None
  * @retval None
  */
void ili9341_Init(void)
{
 8000c42:	b580      	push	{r7, lr}
 8000c44:	af00      	add	r7, sp, #0
  /* Initialize ILI9341 low level bus layer ----------------------------------*/
  LCD_IO_Init();
 8000c46:	f000 f9ff 	bl	8001048 <LCD_IO_Init>

  /* Configure LCD */
  ili9341_Write_Reg(0xCA);
 8000c4a:	20ca      	movs	r0, #202	@ 0xca
 8000c4c:	f000 f943 	bl	8000ed6 <ili9341_Write_Reg>
  ili9341_Send_Data(0xC3);				//param 1
 8000c50:	20c3      	movs	r0, #195	@ 0xc3
 8000c52:	f000 f94d 	bl	8000ef0 <ili9341_Send_Data>
  ili9341_Send_Data(0x08);				//param 2
 8000c56:	2008      	movs	r0, #8
 8000c58:	f000 f94a 	bl	8000ef0 <ili9341_Send_Data>
  ili9341_Send_Data(0x50);				//param 3
 8000c5c:	2050      	movs	r0, #80	@ 0x50
 8000c5e:	f000 f947 	bl	8000ef0 <ili9341_Send_Data>
  ili9341_Write_Reg(LCD_POWERB); //CF
 8000c62:	20cf      	movs	r0, #207	@ 0xcf
 8000c64:	f000 f937 	bl	8000ed6 <ili9341_Write_Reg>
  ili9341_Send_Data(0x00);				//param 1
 8000c68:	2000      	movs	r0, #0
 8000c6a:	f000 f941 	bl	8000ef0 <ili9341_Send_Data>
  ili9341_Send_Data(0xC1);				//param 2
 8000c6e:	20c1      	movs	r0, #193	@ 0xc1
 8000c70:	f000 f93e 	bl	8000ef0 <ili9341_Send_Data>
  ili9341_Send_Data(0x30);				//param 3
 8000c74:	2030      	movs	r0, #48	@ 0x30
 8000c76:	f000 f93b 	bl	8000ef0 <ili9341_Send_Data>
  ili9341_Write_Reg(LCD_POWER_SEQ); //ED
 8000c7a:	20ed      	movs	r0, #237	@ 0xed
 8000c7c:	f000 f92b 	bl	8000ed6 <ili9341_Write_Reg>
  ili9341_Send_Data(0x64);
 8000c80:	2064      	movs	r0, #100	@ 0x64
 8000c82:	f000 f935 	bl	8000ef0 <ili9341_Send_Data>
  ili9341_Send_Data(0x03);
 8000c86:	2003      	movs	r0, #3
 8000c88:	f000 f932 	bl	8000ef0 <ili9341_Send_Data>
  ili9341_Send_Data(0x12);
 8000c8c:	2012      	movs	r0, #18
 8000c8e:	f000 f92f 	bl	8000ef0 <ili9341_Send_Data>
  ili9341_Send_Data(0x81);
 8000c92:	2081      	movs	r0, #129	@ 0x81
 8000c94:	f000 f92c 	bl	8000ef0 <ili9341_Send_Data>
  ili9341_Write_Reg(LCD_DTCA);
 8000c98:	20e8      	movs	r0, #232	@ 0xe8
 8000c9a:	f000 f91c 	bl	8000ed6 <ili9341_Write_Reg>
  ili9341_Send_Data(0x85);
 8000c9e:	2085      	movs	r0, #133	@ 0x85
 8000ca0:	f000 f926 	bl	8000ef0 <ili9341_Send_Data>
  ili9341_Send_Data(0x00);
 8000ca4:	2000      	movs	r0, #0
 8000ca6:	f000 f923 	bl	8000ef0 <ili9341_Send_Data>
  ili9341_Send_Data(0x78);
 8000caa:	2078      	movs	r0, #120	@ 0x78
 8000cac:	f000 f920 	bl	8000ef0 <ili9341_Send_Data>
  ili9341_Write_Reg(LCD_POWERA);
 8000cb0:	20cb      	movs	r0, #203	@ 0xcb
 8000cb2:	f000 f910 	bl	8000ed6 <ili9341_Write_Reg>
  ili9341_Send_Data(0x39);
 8000cb6:	2039      	movs	r0, #57	@ 0x39
 8000cb8:	f000 f91a 	bl	8000ef0 <ili9341_Send_Data>
  ili9341_Send_Data(0x2C);
 8000cbc:	202c      	movs	r0, #44	@ 0x2c
 8000cbe:	f000 f917 	bl	8000ef0 <ili9341_Send_Data>
  ili9341_Send_Data(0x00);
 8000cc2:	2000      	movs	r0, #0
 8000cc4:	f000 f914 	bl	8000ef0 <ili9341_Send_Data>
  ili9341_Send_Data(0x34);
 8000cc8:	2034      	movs	r0, #52	@ 0x34
 8000cca:	f000 f911 	bl	8000ef0 <ili9341_Send_Data>
  ili9341_Send_Data(0x02);
 8000cce:	2002      	movs	r0, #2
 8000cd0:	f000 f90e 	bl	8000ef0 <ili9341_Send_Data>
  ili9341_Write_Reg(LCD_PRC);
 8000cd4:	20f7      	movs	r0, #247	@ 0xf7
 8000cd6:	f000 f8fe 	bl	8000ed6 <ili9341_Write_Reg>
  ili9341_Send_Data(0x20);
 8000cda:	2020      	movs	r0, #32
 8000cdc:	f000 f908 	bl	8000ef0 <ili9341_Send_Data>
  ili9341_Write_Reg(LCD_DTCB);
 8000ce0:	20ea      	movs	r0, #234	@ 0xea
 8000ce2:	f000 f8f8 	bl	8000ed6 <ili9341_Write_Reg>
  ili9341_Send_Data(0x00);
 8000ce6:	2000      	movs	r0, #0
 8000ce8:	f000 f902 	bl	8000ef0 <ili9341_Send_Data>
  ili9341_Send_Data(0x00);
 8000cec:	2000      	movs	r0, #0
 8000cee:	f000 f8ff 	bl	8000ef0 <ili9341_Send_Data>
  ili9341_Write_Reg(LCD_FRMCTR1);
 8000cf2:	20b1      	movs	r0, #177	@ 0xb1
 8000cf4:	f000 f8ef 	bl	8000ed6 <ili9341_Write_Reg>
  ili9341_Send_Data(0x00);
 8000cf8:	2000      	movs	r0, #0
 8000cfa:	f000 f8f9 	bl	8000ef0 <ili9341_Send_Data>
  ili9341_Send_Data(0x1B);
 8000cfe:	201b      	movs	r0, #27
 8000d00:	f000 f8f6 	bl	8000ef0 <ili9341_Send_Data>
  ili9341_Write_Reg(LCD_DFC);
 8000d04:	20b6      	movs	r0, #182	@ 0xb6
 8000d06:	f000 f8e6 	bl	8000ed6 <ili9341_Write_Reg>
  ili9341_Send_Data(0x0A);
 8000d0a:	200a      	movs	r0, #10
 8000d0c:	f000 f8f0 	bl	8000ef0 <ili9341_Send_Data>
  ili9341_Send_Data(0xA2);
 8000d10:	20a2      	movs	r0, #162	@ 0xa2
 8000d12:	f000 f8ed 	bl	8000ef0 <ili9341_Send_Data>
  ili9341_Write_Reg(LCD_POWER1);
 8000d16:	20c0      	movs	r0, #192	@ 0xc0
 8000d18:	f000 f8dd 	bl	8000ed6 <ili9341_Write_Reg>
  ili9341_Send_Data(0x10);
 8000d1c:	2010      	movs	r0, #16
 8000d1e:	f000 f8e7 	bl	8000ef0 <ili9341_Send_Data>
  ili9341_Write_Reg(LCD_POWER2);
 8000d22:	20c1      	movs	r0, #193	@ 0xc1
 8000d24:	f000 f8d7 	bl	8000ed6 <ili9341_Write_Reg>
  ili9341_Send_Data(0x10);
 8000d28:	2010      	movs	r0, #16
 8000d2a:	f000 f8e1 	bl	8000ef0 <ili9341_Send_Data>
  ili9341_Write_Reg(LCD_VCOM1);
 8000d2e:	20c5      	movs	r0, #197	@ 0xc5
 8000d30:	f000 f8d1 	bl	8000ed6 <ili9341_Write_Reg>
  ili9341_Send_Data(0x45);
 8000d34:	2045      	movs	r0, #69	@ 0x45
 8000d36:	f000 f8db 	bl	8000ef0 <ili9341_Send_Data>
  ili9341_Send_Data(0x15);
 8000d3a:	2015      	movs	r0, #21
 8000d3c:	f000 f8d8 	bl	8000ef0 <ili9341_Send_Data>
  ili9341_Write_Reg(LCD_VCOM2);
 8000d40:	20c7      	movs	r0, #199	@ 0xc7
 8000d42:	f000 f8c8 	bl	8000ed6 <ili9341_Write_Reg>
  ili9341_Send_Data(0x90);
 8000d46:	2090      	movs	r0, #144	@ 0x90
 8000d48:	f000 f8d2 	bl	8000ef0 <ili9341_Send_Data>
  ili9341_Write_Reg(LCD_MAC);
 8000d4c:	2036      	movs	r0, #54	@ 0x36
 8000d4e:	f000 f8c2 	bl	8000ed6 <ili9341_Write_Reg>
  ili9341_Send_Data(0xC8);
 8000d52:	20c8      	movs	r0, #200	@ 0xc8
 8000d54:	f000 f8cc 	bl	8000ef0 <ili9341_Send_Data>
  ili9341_Write_Reg(LCD_3GAMMA_EN);
 8000d58:	20f2      	movs	r0, #242	@ 0xf2
 8000d5a:	f000 f8bc 	bl	8000ed6 <ili9341_Write_Reg>
  ili9341_Send_Data(0x00);
 8000d5e:	2000      	movs	r0, #0
 8000d60:	f000 f8c6 	bl	8000ef0 <ili9341_Send_Data>
  ili9341_Write_Reg(LCD_RGB_INTERFACE);
 8000d64:	20b0      	movs	r0, #176	@ 0xb0
 8000d66:	f000 f8b6 	bl	8000ed6 <ili9341_Write_Reg>
  ili9341_Send_Data(0xC2);
 8000d6a:	20c2      	movs	r0, #194	@ 0xc2
 8000d6c:	f000 f8c0 	bl	8000ef0 <ili9341_Send_Data>
  ili9341_Write_Reg(LCD_DFC);
 8000d70:	20b6      	movs	r0, #182	@ 0xb6
 8000d72:	f000 f8b0 	bl	8000ed6 <ili9341_Write_Reg>
  ili9341_Send_Data(0x0A);
 8000d76:	200a      	movs	r0, #10
 8000d78:	f000 f8ba 	bl	8000ef0 <ili9341_Send_Data>
  ili9341_Send_Data(0xA7);
 8000d7c:	20a7      	movs	r0, #167	@ 0xa7
 8000d7e:	f000 f8b7 	bl	8000ef0 <ili9341_Send_Data>
  ili9341_Send_Data(0x27);
 8000d82:	2027      	movs	r0, #39	@ 0x27
 8000d84:	f000 f8b4 	bl	8000ef0 <ili9341_Send_Data>
  ili9341_Send_Data(0x04);
 8000d88:	2004      	movs	r0, #4
 8000d8a:	f000 f8b1 	bl	8000ef0 <ili9341_Send_Data>

  /* Colomn address set */
  ili9341_Write_Reg(LCD_COLUMN_ADDR);
 8000d8e:	202a      	movs	r0, #42	@ 0x2a
 8000d90:	f000 f8a1 	bl	8000ed6 <ili9341_Write_Reg>
  ili9341_Send_Data(0x00);
 8000d94:	2000      	movs	r0, #0
 8000d96:	f000 f8ab 	bl	8000ef0 <ili9341_Send_Data>
  ili9341_Send_Data(0x00);
 8000d9a:	2000      	movs	r0, #0
 8000d9c:	f000 f8a8 	bl	8000ef0 <ili9341_Send_Data>
  ili9341_Send_Data(0x00);
 8000da0:	2000      	movs	r0, #0
 8000da2:	f000 f8a5 	bl	8000ef0 <ili9341_Send_Data>
  ili9341_Send_Data(0xEF);
 8000da6:	20ef      	movs	r0, #239	@ 0xef
 8000da8:	f000 f8a2 	bl	8000ef0 <ili9341_Send_Data>

  /* Page address set */
  ili9341_Write_Reg(LCD_PAGE_ADDR);
 8000dac:	202b      	movs	r0, #43	@ 0x2b
 8000dae:	f000 f892 	bl	8000ed6 <ili9341_Write_Reg>
  ili9341_Send_Data(0x00);
 8000db2:	2000      	movs	r0, #0
 8000db4:	f000 f89c 	bl	8000ef0 <ili9341_Send_Data>
  ili9341_Send_Data(0x00);
 8000db8:	2000      	movs	r0, #0
 8000dba:	f000 f899 	bl	8000ef0 <ili9341_Send_Data>
  ili9341_Send_Data(0x01);
 8000dbe:	2001      	movs	r0, #1
 8000dc0:	f000 f896 	bl	8000ef0 <ili9341_Send_Data>
  ili9341_Send_Data(0x3F);
 8000dc4:	203f      	movs	r0, #63	@ 0x3f
 8000dc6:	f000 f893 	bl	8000ef0 <ili9341_Send_Data>
  ili9341_Write_Reg(LCD_INTERFACE);
 8000dca:	20f6      	movs	r0, #246	@ 0xf6
 8000dcc:	f000 f883 	bl	8000ed6 <ili9341_Write_Reg>
  ili9341_Send_Data(0x01);
 8000dd0:	2001      	movs	r0, #1
 8000dd2:	f000 f88d 	bl	8000ef0 <ili9341_Send_Data>
  ili9341_Send_Data(0x00);
 8000dd6:	2000      	movs	r0, #0
 8000dd8:	f000 f88a 	bl	8000ef0 <ili9341_Send_Data>
  ili9341_Send_Data(0x06);
 8000ddc:	2006      	movs	r0, #6
 8000dde:	f000 f887 	bl	8000ef0 <ili9341_Send_Data>

  ili9341_Write_Reg(LCD_GRAM);
 8000de2:	202c      	movs	r0, #44	@ 0x2c
 8000de4:	f000 f877 	bl	8000ed6 <ili9341_Write_Reg>
  LCD_Delay(200);
 8000de8:	20c8      	movs	r0, #200	@ 0xc8
 8000dea:	f000 f9e9 	bl	80011c0 <LCD_Delay>

  ili9341_Write_Reg(LCD_GAMMA);
 8000dee:	2026      	movs	r0, #38	@ 0x26
 8000df0:	f000 f871 	bl	8000ed6 <ili9341_Write_Reg>
  ili9341_Send_Data(0x01);
 8000df4:	2001      	movs	r0, #1
 8000df6:	f000 f87b 	bl	8000ef0 <ili9341_Send_Data>

  ili9341_Write_Reg(LCD_PGAMMA);
 8000dfa:	20e0      	movs	r0, #224	@ 0xe0
 8000dfc:	f000 f86b 	bl	8000ed6 <ili9341_Write_Reg>
  ili9341_Send_Data(0x0F);
 8000e00:	200f      	movs	r0, #15
 8000e02:	f000 f875 	bl	8000ef0 <ili9341_Send_Data>
  ili9341_Send_Data(0x29);
 8000e06:	2029      	movs	r0, #41	@ 0x29
 8000e08:	f000 f872 	bl	8000ef0 <ili9341_Send_Data>
  ili9341_Send_Data(0x24);
 8000e0c:	2024      	movs	r0, #36	@ 0x24
 8000e0e:	f000 f86f 	bl	8000ef0 <ili9341_Send_Data>
  ili9341_Send_Data(0x0C);
 8000e12:	200c      	movs	r0, #12
 8000e14:	f000 f86c 	bl	8000ef0 <ili9341_Send_Data>
  ili9341_Send_Data(0x0E);
 8000e18:	200e      	movs	r0, #14
 8000e1a:	f000 f869 	bl	8000ef0 <ili9341_Send_Data>
  ili9341_Send_Data(0x09);
 8000e1e:	2009      	movs	r0, #9
 8000e20:	f000 f866 	bl	8000ef0 <ili9341_Send_Data>
  ili9341_Send_Data(0x4E);
 8000e24:	204e      	movs	r0, #78	@ 0x4e
 8000e26:	f000 f863 	bl	8000ef0 <ili9341_Send_Data>
  ili9341_Send_Data(0x78);
 8000e2a:	2078      	movs	r0, #120	@ 0x78
 8000e2c:	f000 f860 	bl	8000ef0 <ili9341_Send_Data>
  ili9341_Send_Data(0x3C);
 8000e30:	203c      	movs	r0, #60	@ 0x3c
 8000e32:	f000 f85d 	bl	8000ef0 <ili9341_Send_Data>
  ili9341_Send_Data(0x09);
 8000e36:	2009      	movs	r0, #9
 8000e38:	f000 f85a 	bl	8000ef0 <ili9341_Send_Data>
  ili9341_Send_Data(0x13);
 8000e3c:	2013      	movs	r0, #19
 8000e3e:	f000 f857 	bl	8000ef0 <ili9341_Send_Data>
  ili9341_Send_Data(0x05);
 8000e42:	2005      	movs	r0, #5
 8000e44:	f000 f854 	bl	8000ef0 <ili9341_Send_Data>
  ili9341_Send_Data(0x17);
 8000e48:	2017      	movs	r0, #23
 8000e4a:	f000 f851 	bl	8000ef0 <ili9341_Send_Data>
  ili9341_Send_Data(0x11);
 8000e4e:	2011      	movs	r0, #17
 8000e50:	f000 f84e 	bl	8000ef0 <ili9341_Send_Data>
  ili9341_Send_Data(0x00);
 8000e54:	2000      	movs	r0, #0
 8000e56:	f000 f84b 	bl	8000ef0 <ili9341_Send_Data>
  ili9341_Write_Reg(LCD_NGAMMA);
 8000e5a:	20e1      	movs	r0, #225	@ 0xe1
 8000e5c:	f000 f83b 	bl	8000ed6 <ili9341_Write_Reg>
  ili9341_Send_Data(0x00);
 8000e60:	2000      	movs	r0, #0
 8000e62:	f000 f845 	bl	8000ef0 <ili9341_Send_Data>
  ili9341_Send_Data(0x16);
 8000e66:	2016      	movs	r0, #22
 8000e68:	f000 f842 	bl	8000ef0 <ili9341_Send_Data>
  ili9341_Send_Data(0x1B);
 8000e6c:	201b      	movs	r0, #27
 8000e6e:	f000 f83f 	bl	8000ef0 <ili9341_Send_Data>
  ili9341_Send_Data(0x04);
 8000e72:	2004      	movs	r0, #4
 8000e74:	f000 f83c 	bl	8000ef0 <ili9341_Send_Data>
  ili9341_Send_Data(0x11);
 8000e78:	2011      	movs	r0, #17
 8000e7a:	f000 f839 	bl	8000ef0 <ili9341_Send_Data>
  ili9341_Send_Data(0x07);
 8000e7e:	2007      	movs	r0, #7
 8000e80:	f000 f836 	bl	8000ef0 <ili9341_Send_Data>
  ili9341_Send_Data(0x31);
 8000e84:	2031      	movs	r0, #49	@ 0x31
 8000e86:	f000 f833 	bl	8000ef0 <ili9341_Send_Data>
  ili9341_Send_Data(0x33);
 8000e8a:	2033      	movs	r0, #51	@ 0x33
 8000e8c:	f000 f830 	bl	8000ef0 <ili9341_Send_Data>
  ili9341_Send_Data(0x42);
 8000e90:	2042      	movs	r0, #66	@ 0x42
 8000e92:	f000 f82d 	bl	8000ef0 <ili9341_Send_Data>
  ili9341_Send_Data(0x05);
 8000e96:	2005      	movs	r0, #5
 8000e98:	f000 f82a 	bl	8000ef0 <ili9341_Send_Data>
  ili9341_Send_Data(0x0C);
 8000e9c:	200c      	movs	r0, #12
 8000e9e:	f000 f827 	bl	8000ef0 <ili9341_Send_Data>
  ili9341_Send_Data(0x0A);
 8000ea2:	200a      	movs	r0, #10
 8000ea4:	f000 f824 	bl	8000ef0 <ili9341_Send_Data>
  ili9341_Send_Data(0x28);
 8000ea8:	2028      	movs	r0, #40	@ 0x28
 8000eaa:	f000 f821 	bl	8000ef0 <ili9341_Send_Data>
  ili9341_Send_Data(0x2F);
 8000eae:	202f      	movs	r0, #47	@ 0x2f
 8000eb0:	f000 f81e 	bl	8000ef0 <ili9341_Send_Data>
  ili9341_Send_Data(0x0F);
 8000eb4:	200f      	movs	r0, #15
 8000eb6:	f000 f81b 	bl	8000ef0 <ili9341_Send_Data>

  ili9341_Write_Reg(LCD_SLEEP_OUT);
 8000eba:	2011      	movs	r0, #17
 8000ebc:	f000 f80b 	bl	8000ed6 <ili9341_Write_Reg>
  LCD_Delay(200);
 8000ec0:	20c8      	movs	r0, #200	@ 0xc8
 8000ec2:	f000 f97d 	bl	80011c0 <LCD_Delay>
  ili9341_Write_Reg(LCD_DISPLAY_ON);
 8000ec6:	2029      	movs	r0, #41	@ 0x29
 8000ec8:	f000 f805 	bl	8000ed6 <ili9341_Write_Reg>
  /* GRAM start writing */
  ili9341_Write_Reg(LCD_GRAM);
 8000ecc:	202c      	movs	r0, #44	@ 0x2c
 8000ece:	f000 f802 	bl	8000ed6 <ili9341_Write_Reg>
}
 8000ed2:	bf00      	nop
 8000ed4:	bd80      	pop	{r7, pc}

08000ed6 <ili9341_Write_Reg>:
  * @brief  Writes  to the selected LCD register.
  * @param  LCD_Reg: address of the selected register.
  * @retval None
  */
void ili9341_Write_Reg(uint8_t LCD_Reg)
{
 8000ed6:	b580      	push	{r7, lr}
 8000ed8:	b082      	sub	sp, #8
 8000eda:	af00      	add	r7, sp, #0
 8000edc:	4603      	mov	r3, r0
 8000ede:	71fb      	strb	r3, [r7, #7]
  LCD_IO_WriteReg(LCD_Reg);
 8000ee0:	79fb      	ldrb	r3, [r7, #7]
 8000ee2:	4618      	mov	r0, r3
 8000ee4:	f000 f94a 	bl	800117c <LCD_IO_WriteReg>
}
 8000ee8:	bf00      	nop
 8000eea:	3708      	adds	r7, #8
 8000eec:	46bd      	mov	sp, r7
 8000eee:	bd80      	pop	{r7, pc}

08000ef0 <ili9341_Send_Data>:
  * @brief  Writes data to the selected LCD register.
  * @param  LCD_Reg: address of the selected register.
  * @retval None
  */
void ili9341_Send_Data(uint16_t RegValue)
{
 8000ef0:	b580      	push	{r7, lr}
 8000ef2:	b082      	sub	sp, #8
 8000ef4:	af00      	add	r7, sp, #0
 8000ef6:	4603      	mov	r3, r0
 8000ef8:	80fb      	strh	r3, [r7, #6]
  LCD_IO_WriteData(RegValue);
 8000efa:	88fb      	ldrh	r3, [r7, #6]
 8000efc:	4618      	mov	r0, r3
 8000efe:	f000 f91b 	bl	8001138 <LCD_IO_WriteData>
}
 8000f02:	bf00      	nop
 8000f04:	3708      	adds	r7, #8
 8000f06:	46bd      	mov	sp, r7
 8000f08:	bd80      	pop	{r7, pc}
	...

08000f0c <SPI_Init>:

/**
  * @brief  SPI Bus initialization
  */
static void SPI_Init(void)
{
 8000f0c:	b580      	push	{r7, lr}
 8000f0e:	af00      	add	r7, sp, #0
  if(HAL_SPI_GetState(&SpiHandle) == HAL_SPI_STATE_RESET)
 8000f10:	4819      	ldr	r0, [pc, #100]	@ (8000f78 <SPI_Init+0x6c>)
 8000f12:	f004 fb71 	bl	80055f8 <HAL_SPI_GetState>
 8000f16:	4603      	mov	r3, r0
 8000f18:	2b00      	cmp	r3, #0
 8000f1a:	d12b      	bne.n	8000f74 <SPI_Init+0x68>
  {
    /* SPI configuration -----------------------------------------------------*/
    SpiHandle.Instance = DISCOVERY_SPI;
 8000f1c:	4b16      	ldr	r3, [pc, #88]	@ (8000f78 <SPI_Init+0x6c>)
 8000f1e:	4a17      	ldr	r2, [pc, #92]	@ (8000f7c <SPI_Init+0x70>)
 8000f20:	601a      	str	r2, [r3, #0]
       to verify these constraints:
       - ILI9341 LCD SPI interface max baudrate is 10MHz for write and 6.66MHz for read
       - l3gd20 SPI interface max baudrate is 10MHz for write/read
       - PCLK2 frequency is set to 90 MHz
    */
    SpiHandle.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_16;
 8000f22:	4b15      	ldr	r3, [pc, #84]	@ (8000f78 <SPI_Init+0x6c>)
 8000f24:	2218      	movs	r2, #24
 8000f26:	61da      	str	r2, [r3, #28]

    /* On STM32F429I-Discovery, LCD ID cannot be read then keep a common configuration */
    /* for LCD and GYRO (SPI_DIRECTION_2LINES) */
    /* Note: To read a register a LCD, SPI_DIRECTION_1LINE should be set */
    SpiHandle.Init.Direction      = SPI_DIRECTION_2LINES;
 8000f28:	4b13      	ldr	r3, [pc, #76]	@ (8000f78 <SPI_Init+0x6c>)
 8000f2a:	2200      	movs	r2, #0
 8000f2c:	609a      	str	r2, [r3, #8]
    SpiHandle.Init.CLKPhase       = SPI_PHASE_1EDGE;
 8000f2e:	4b12      	ldr	r3, [pc, #72]	@ (8000f78 <SPI_Init+0x6c>)
 8000f30:	2200      	movs	r2, #0
 8000f32:	615a      	str	r2, [r3, #20]
    SpiHandle.Init.CLKPolarity    = SPI_POLARITY_LOW;
 8000f34:	4b10      	ldr	r3, [pc, #64]	@ (8000f78 <SPI_Init+0x6c>)
 8000f36:	2200      	movs	r2, #0
 8000f38:	611a      	str	r2, [r3, #16]
    SpiHandle.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLED;
 8000f3a:	4b0f      	ldr	r3, [pc, #60]	@ (8000f78 <SPI_Init+0x6c>)
 8000f3c:	2200      	movs	r2, #0
 8000f3e:	629a      	str	r2, [r3, #40]	@ 0x28
    SpiHandle.Init.CRCPolynomial  = 7;
 8000f40:	4b0d      	ldr	r3, [pc, #52]	@ (8000f78 <SPI_Init+0x6c>)
 8000f42:	2207      	movs	r2, #7
 8000f44:	62da      	str	r2, [r3, #44]	@ 0x2c
    SpiHandle.Init.DataSize       = SPI_DATASIZE_8BIT;
 8000f46:	4b0c      	ldr	r3, [pc, #48]	@ (8000f78 <SPI_Init+0x6c>)
 8000f48:	2200      	movs	r2, #0
 8000f4a:	60da      	str	r2, [r3, #12]
    SpiHandle.Init.FirstBit       = SPI_FIRSTBIT_MSB;
 8000f4c:	4b0a      	ldr	r3, [pc, #40]	@ (8000f78 <SPI_Init+0x6c>)
 8000f4e:	2200      	movs	r2, #0
 8000f50:	621a      	str	r2, [r3, #32]
    SpiHandle.Init.NSS            = SPI_NSS_SOFT;
 8000f52:	4b09      	ldr	r3, [pc, #36]	@ (8000f78 <SPI_Init+0x6c>)
 8000f54:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8000f58:	619a      	str	r2, [r3, #24]
    SpiHandle.Init.TIMode         = SPI_TIMODE_DISABLED;
 8000f5a:	4b07      	ldr	r3, [pc, #28]	@ (8000f78 <SPI_Init+0x6c>)
 8000f5c:	2200      	movs	r2, #0
 8000f5e:	625a      	str	r2, [r3, #36]	@ 0x24
    SpiHandle.Init.Mode           = SPI_MODE_MASTER;
 8000f60:	4b05      	ldr	r3, [pc, #20]	@ (8000f78 <SPI_Init+0x6c>)
 8000f62:	f44f 7282 	mov.w	r2, #260	@ 0x104
 8000f66:	605a      	str	r2, [r3, #4]

    SPI_MspInit(&SpiHandle);
 8000f68:	4803      	ldr	r0, [pc, #12]	@ (8000f78 <SPI_Init+0x6c>)
 8000f6a:	f000 f833 	bl	8000fd4 <SPI_MspInit>
    HAL_SPI_Init(&SpiHandle);
 8000f6e:	4802      	ldr	r0, [pc, #8]	@ (8000f78 <SPI_Init+0x6c>)
 8000f70:	f004 f94d 	bl	800520e <HAL_SPI_Init>
  }
}
 8000f74:	bf00      	nop
 8000f76:	bd80      	pop	{r7, pc}
 8000f78:	20025920 	.word	0x20025920
 8000f7c:	40015000 	.word	0x40015000

08000f80 <SPI_Write>:
/**
  * @brief  Writes a byte to device.
  * @param  Value: value to be written
  */
static void SPI_Write(uint16_t Value)
{
 8000f80:	b580      	push	{r7, lr}
 8000f82:	b084      	sub	sp, #16
 8000f84:	af00      	add	r7, sp, #0
 8000f86:	4603      	mov	r3, r0
 8000f88:	80fb      	strh	r3, [r7, #6]
  HAL_StatusTypeDef status = HAL_OK;
 8000f8a:	2300      	movs	r3, #0
 8000f8c:	73fb      	strb	r3, [r7, #15]

  status = HAL_SPI_Transmit(&SpiHandle, (uint8_t*) &Value, 1, SpiTimeout);
 8000f8e:	4b09      	ldr	r3, [pc, #36]	@ (8000fb4 <SPI_Write+0x34>)
 8000f90:	681b      	ldr	r3, [r3, #0]
 8000f92:	1db9      	adds	r1, r7, #6
 8000f94:	2201      	movs	r2, #1
 8000f96:	4808      	ldr	r0, [pc, #32]	@ (8000fb8 <SPI_Write+0x38>)
 8000f98:	f004 f9ea 	bl	8005370 <HAL_SPI_Transmit>
 8000f9c:	4603      	mov	r3, r0
 8000f9e:	73fb      	strb	r3, [r7, #15]

  /* Check the communication status */
  if(status != HAL_OK)
 8000fa0:	7bfb      	ldrb	r3, [r7, #15]
 8000fa2:	2b00      	cmp	r3, #0
 8000fa4:	d001      	beq.n	8000faa <SPI_Write+0x2a>
  {
    /* Re-Initialize the BUS */
    SPI_Error();
 8000fa6:	f000 f809 	bl	8000fbc <SPI_Error>
  }
}
 8000faa:	bf00      	nop
 8000fac:	3710      	adds	r7, #16
 8000fae:	46bd      	mov	sp, r7
 8000fb0:	bd80      	pop	{r7, pc}
 8000fb2:	bf00      	nop
 8000fb4:	2000000c 	.word	0x2000000c
 8000fb8:	20025920 	.word	0x20025920

08000fbc <SPI_Error>:

/**
  * @brief  SPI error treatment function.
  */
static void SPI_Error(void)
{
 8000fbc:	b580      	push	{r7, lr}
 8000fbe:	af00      	add	r7, sp, #0
  /* De-initialize the SPI communication BUS */
  HAL_SPI_DeInit(&SpiHandle);
 8000fc0:	4803      	ldr	r0, [pc, #12]	@ (8000fd0 <SPI_Error+0x14>)
 8000fc2:	f004 f9ad 	bl	8005320 <HAL_SPI_DeInit>

  /* Re- Initialize the SPI communication BUS */
  SPI_Init();
 8000fc6:	f7ff ffa1 	bl	8000f0c <SPI_Init>
}
 8000fca:	bf00      	nop
 8000fcc:	bd80      	pop	{r7, pc}
 8000fce:	bf00      	nop
 8000fd0:	20025920 	.word	0x20025920

08000fd4 <SPI_MspInit>:
/**
  * @brief  SPI MSP Init.
  * @param  hspi: SPI handle
  */
static void SPI_MspInit(SPI_HandleTypeDef *hspi)
{
 8000fd4:	b580      	push	{r7, lr}
 8000fd6:	b08a      	sub	sp, #40	@ 0x28
 8000fd8:	af00      	add	r7, sp, #0
 8000fda:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef   GPIO_InitStructure;

  /* Enable SPI clock */
  DISCOVERY_SPI_CLK_ENABLE();
 8000fdc:	2300      	movs	r3, #0
 8000fde:	613b      	str	r3, [r7, #16]
 8000fe0:	4b17      	ldr	r3, [pc, #92]	@ (8001040 <SPI_MspInit+0x6c>)
 8000fe2:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8000fe4:	4a16      	ldr	r2, [pc, #88]	@ (8001040 <SPI_MspInit+0x6c>)
 8000fe6:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 8000fea:	6453      	str	r3, [r2, #68]	@ 0x44
 8000fec:	4b14      	ldr	r3, [pc, #80]	@ (8001040 <SPI_MspInit+0x6c>)
 8000fee:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8000ff0:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 8000ff4:	613b      	str	r3, [r7, #16]
 8000ff6:	693b      	ldr	r3, [r7, #16]

  /* Enable DISCOVERY_SPI GPIO clock */
  DISCOVERY_SPI_GPIO_CLK_ENABLE();
 8000ff8:	2300      	movs	r3, #0
 8000ffa:	60fb      	str	r3, [r7, #12]
 8000ffc:	4b10      	ldr	r3, [pc, #64]	@ (8001040 <SPI_MspInit+0x6c>)
 8000ffe:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001000:	4a0f      	ldr	r2, [pc, #60]	@ (8001040 <SPI_MspInit+0x6c>)
 8001002:	f043 0320 	orr.w	r3, r3, #32
 8001006:	6313      	str	r3, [r2, #48]	@ 0x30
 8001008:	4b0d      	ldr	r3, [pc, #52]	@ (8001040 <SPI_MspInit+0x6c>)
 800100a:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800100c:	f003 0320 	and.w	r3, r3, #32
 8001010:	60fb      	str	r3, [r7, #12]
 8001012:	68fb      	ldr	r3, [r7, #12]

  /* configure SPI SCK, MOSI and MISO */
  GPIO_InitStructure.Pin    = (DISCOVERY_SPI_SCK_PIN | DISCOVERY_SPI_MOSI_PIN | DISCOVERY_SPI_MISO_PIN);
 8001014:	f44f 7360 	mov.w	r3, #896	@ 0x380
 8001018:	617b      	str	r3, [r7, #20]
  GPIO_InitStructure.Mode   = GPIO_MODE_AF_PP;
 800101a:	2302      	movs	r3, #2
 800101c:	61bb      	str	r3, [r7, #24]
  GPIO_InitStructure.Pull   = GPIO_PULLDOWN;
 800101e:	2302      	movs	r3, #2
 8001020:	61fb      	str	r3, [r7, #28]
  GPIO_InitStructure.Speed  = GPIO_SPEED_MEDIUM;
 8001022:	2301      	movs	r3, #1
 8001024:	623b      	str	r3, [r7, #32]
  GPIO_InitStructure.Alternate = DISCOVERY_SPI_AF;
 8001026:	2305      	movs	r3, #5
 8001028:	627b      	str	r3, [r7, #36]	@ 0x24
  HAL_GPIO_Init(DISCOVERY_SPI_GPIO_PORT, &GPIO_InitStructure);
 800102a:	f107 0314 	add.w	r3, r7, #20
 800102e:	4619      	mov	r1, r3
 8001030:	4804      	ldr	r0, [pc, #16]	@ (8001044 <SPI_MspInit+0x70>)
 8001032:	f001 fbfb 	bl	800282c <HAL_GPIO_Init>
}
 8001036:	bf00      	nop
 8001038:	3728      	adds	r7, #40	@ 0x28
 800103a:	46bd      	mov	sp, r7
 800103c:	bd80      	pop	{r7, pc}
 800103e:	bf00      	nop
 8001040:	40023800 	.word	0x40023800
 8001044:	40021400 	.word	0x40021400

08001048 <LCD_IO_Init>:

/**
  * @brief  Configures the LCD_SPI interface.
  */
void LCD_IO_Init(void)
{
 8001048:	b580      	push	{r7, lr}
 800104a:	b088      	sub	sp, #32
 800104c:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStructure;

  if(Is_LCD_IO_Initialized == 0)
 800104e:	4b36      	ldr	r3, [pc, #216]	@ (8001128 <LCD_IO_Init+0xe0>)
 8001050:	781b      	ldrb	r3, [r3, #0]
 8001052:	2b00      	cmp	r3, #0
 8001054:	d164      	bne.n	8001120 <LCD_IO_Init+0xd8>
  {
    Is_LCD_IO_Initialized = 1;
 8001056:	4b34      	ldr	r3, [pc, #208]	@ (8001128 <LCD_IO_Init+0xe0>)
 8001058:	2201      	movs	r2, #1
 800105a:	701a      	strb	r2, [r3, #0]

    /* Configure in Output Push-Pull mode */
    LCD_WRX_GPIO_CLK_ENABLE();
 800105c:	2300      	movs	r3, #0
 800105e:	60bb      	str	r3, [r7, #8]
 8001060:	4b32      	ldr	r3, [pc, #200]	@ (800112c <LCD_IO_Init+0xe4>)
 8001062:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001064:	4a31      	ldr	r2, [pc, #196]	@ (800112c <LCD_IO_Init+0xe4>)
 8001066:	f043 0308 	orr.w	r3, r3, #8
 800106a:	6313      	str	r3, [r2, #48]	@ 0x30
 800106c:	4b2f      	ldr	r3, [pc, #188]	@ (800112c <LCD_IO_Init+0xe4>)
 800106e:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001070:	f003 0308 	and.w	r3, r3, #8
 8001074:	60bb      	str	r3, [r7, #8]
 8001076:	68bb      	ldr	r3, [r7, #8]
    GPIO_InitStructure.Pin     = LCD_WRX_PIN;
 8001078:	f44f 5300 	mov.w	r3, #8192	@ 0x2000
 800107c:	60fb      	str	r3, [r7, #12]
    GPIO_InitStructure.Mode    = GPIO_MODE_OUTPUT_PP;
 800107e:	2301      	movs	r3, #1
 8001080:	613b      	str	r3, [r7, #16]
    GPIO_InitStructure.Pull    = GPIO_NOPULL;
 8001082:	2300      	movs	r3, #0
 8001084:	617b      	str	r3, [r7, #20]
    GPIO_InitStructure.Speed   = GPIO_SPEED_FAST;
 8001086:	2302      	movs	r3, #2
 8001088:	61bb      	str	r3, [r7, #24]
    HAL_GPIO_Init(LCD_WRX_GPIO_PORT, &GPIO_InitStructure);
 800108a:	f107 030c 	add.w	r3, r7, #12
 800108e:	4619      	mov	r1, r3
 8001090:	4827      	ldr	r0, [pc, #156]	@ (8001130 <LCD_IO_Init+0xe8>)
 8001092:	f001 fbcb 	bl	800282c <HAL_GPIO_Init>

    LCD_RDX_GPIO_CLK_ENABLE();
 8001096:	2300      	movs	r3, #0
 8001098:	607b      	str	r3, [r7, #4]
 800109a:	4b24      	ldr	r3, [pc, #144]	@ (800112c <LCD_IO_Init+0xe4>)
 800109c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800109e:	4a23      	ldr	r2, [pc, #140]	@ (800112c <LCD_IO_Init+0xe4>)
 80010a0:	f043 0308 	orr.w	r3, r3, #8
 80010a4:	6313      	str	r3, [r2, #48]	@ 0x30
 80010a6:	4b21      	ldr	r3, [pc, #132]	@ (800112c <LCD_IO_Init+0xe4>)
 80010a8:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80010aa:	f003 0308 	and.w	r3, r3, #8
 80010ae:	607b      	str	r3, [r7, #4]
 80010b0:	687b      	ldr	r3, [r7, #4]
    GPIO_InitStructure.Pin     = LCD_RDX_PIN;
 80010b2:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 80010b6:	60fb      	str	r3, [r7, #12]
    GPIO_InitStructure.Mode    = GPIO_MODE_OUTPUT_PP;
 80010b8:	2301      	movs	r3, #1
 80010ba:	613b      	str	r3, [r7, #16]
    GPIO_InitStructure.Pull    = GPIO_NOPULL;
 80010bc:	2300      	movs	r3, #0
 80010be:	617b      	str	r3, [r7, #20]
    GPIO_InitStructure.Speed   = GPIO_SPEED_FAST;
 80010c0:	2302      	movs	r3, #2
 80010c2:	61bb      	str	r3, [r7, #24]
    HAL_GPIO_Init(LCD_RDX_GPIO_PORT, &GPIO_InitStructure);
 80010c4:	f107 030c 	add.w	r3, r7, #12
 80010c8:	4619      	mov	r1, r3
 80010ca:	4819      	ldr	r0, [pc, #100]	@ (8001130 <LCD_IO_Init+0xe8>)
 80010cc:	f001 fbae 	bl	800282c <HAL_GPIO_Init>

    /* Configure the LCD Control pins ----------------------------------------*/
    LCD_NCS_GPIO_CLK_ENABLE();
 80010d0:	2300      	movs	r3, #0
 80010d2:	603b      	str	r3, [r7, #0]
 80010d4:	4b15      	ldr	r3, [pc, #84]	@ (800112c <LCD_IO_Init+0xe4>)
 80010d6:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80010d8:	4a14      	ldr	r2, [pc, #80]	@ (800112c <LCD_IO_Init+0xe4>)
 80010da:	f043 0304 	orr.w	r3, r3, #4
 80010de:	6313      	str	r3, [r2, #48]	@ 0x30
 80010e0:	4b12      	ldr	r3, [pc, #72]	@ (800112c <LCD_IO_Init+0xe4>)
 80010e2:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80010e4:	f003 0304 	and.w	r3, r3, #4
 80010e8:	603b      	str	r3, [r7, #0]
 80010ea:	683b      	ldr	r3, [r7, #0]

    /* Configure NCS in Output Push-Pull mode */
    GPIO_InitStructure.Pin     = LCD_NCS_PIN;
 80010ec:	2304      	movs	r3, #4
 80010ee:	60fb      	str	r3, [r7, #12]
    GPIO_InitStructure.Mode    = GPIO_MODE_OUTPUT_PP;
 80010f0:	2301      	movs	r3, #1
 80010f2:	613b      	str	r3, [r7, #16]
    GPIO_InitStructure.Pull    = GPIO_NOPULL;
 80010f4:	2300      	movs	r3, #0
 80010f6:	617b      	str	r3, [r7, #20]
    GPIO_InitStructure.Speed   = GPIO_SPEED_FAST;
 80010f8:	2302      	movs	r3, #2
 80010fa:	61bb      	str	r3, [r7, #24]
    HAL_GPIO_Init(LCD_NCS_GPIO_PORT, &GPIO_InitStructure);
 80010fc:	f107 030c 	add.w	r3, r7, #12
 8001100:	4619      	mov	r1, r3
 8001102:	480c      	ldr	r0, [pc, #48]	@ (8001134 <LCD_IO_Init+0xec>)
 8001104:	f001 fb92 	bl	800282c <HAL_GPIO_Init>

    /* Set or Reset the control line */
    LCD_CS_LOW();
 8001108:	2200      	movs	r2, #0
 800110a:	2104      	movs	r1, #4
 800110c:	4809      	ldr	r0, [pc, #36]	@ (8001134 <LCD_IO_Init+0xec>)
 800110e:	f001 fe45 	bl	8002d9c <HAL_GPIO_WritePin>
    LCD_CS_HIGH();
 8001112:	2201      	movs	r2, #1
 8001114:	2104      	movs	r1, #4
 8001116:	4807      	ldr	r0, [pc, #28]	@ (8001134 <LCD_IO_Init+0xec>)
 8001118:	f001 fe40 	bl	8002d9c <HAL_GPIO_WritePin>

    SPI_Init();
 800111c:	f7ff fef6 	bl	8000f0c <SPI_Init>
  }
}
 8001120:	bf00      	nop
 8001122:	3720      	adds	r7, #32
 8001124:	46bd      	mov	sp, r7
 8001126:	bd80      	pop	{r7, pc}
 8001128:	20025978 	.word	0x20025978
 800112c:	40023800 	.word	0x40023800
 8001130:	40020c00 	.word	0x40020c00
 8001134:	40020800 	.word	0x40020800

08001138 <LCD_IO_WriteData>:

/**
  * @brief  Writes register value.
  */
void LCD_IO_WriteData(uint16_t RegValue)
{
 8001138:	b580      	push	{r7, lr}
 800113a:	b082      	sub	sp, #8
 800113c:	af00      	add	r7, sp, #0
 800113e:	4603      	mov	r3, r0
 8001140:	80fb      	strh	r3, [r7, #6]
  /* Set WRX to send data */
  LCD_WRX_HIGH();
 8001142:	2201      	movs	r2, #1
 8001144:	f44f 5100 	mov.w	r1, #8192	@ 0x2000
 8001148:	480a      	ldr	r0, [pc, #40]	@ (8001174 <LCD_IO_WriteData+0x3c>)
 800114a:	f001 fe27 	bl	8002d9c <HAL_GPIO_WritePin>

  /* Reset LCD control line(/CS) and Send data */
  LCD_CS_LOW();
 800114e:	2200      	movs	r2, #0
 8001150:	2104      	movs	r1, #4
 8001152:	4809      	ldr	r0, [pc, #36]	@ (8001178 <LCD_IO_WriteData+0x40>)
 8001154:	f001 fe22 	bl	8002d9c <HAL_GPIO_WritePin>
  SPI_Write(RegValue);
 8001158:	88fb      	ldrh	r3, [r7, #6]
 800115a:	4618      	mov	r0, r3
 800115c:	f7ff ff10 	bl	8000f80 <SPI_Write>

  /* Deselect: Chip Select high */
  LCD_CS_HIGH();
 8001160:	2201      	movs	r2, #1
 8001162:	2104      	movs	r1, #4
 8001164:	4804      	ldr	r0, [pc, #16]	@ (8001178 <LCD_IO_WriteData+0x40>)
 8001166:	f001 fe19 	bl	8002d9c <HAL_GPIO_WritePin>
}
 800116a:	bf00      	nop
 800116c:	3708      	adds	r7, #8
 800116e:	46bd      	mov	sp, r7
 8001170:	bd80      	pop	{r7, pc}
 8001172:	bf00      	nop
 8001174:	40020c00 	.word	0x40020c00
 8001178:	40020800 	.word	0x40020800

0800117c <LCD_IO_WriteReg>:

/**
  * @brief  Writes register address.
  */
void LCD_IO_WriteReg(uint8_t Reg)
{
 800117c:	b580      	push	{r7, lr}
 800117e:	b082      	sub	sp, #8
 8001180:	af00      	add	r7, sp, #0
 8001182:	4603      	mov	r3, r0
 8001184:	71fb      	strb	r3, [r7, #7]
  /* Reset WRX to send command */
  LCD_WRX_LOW();
 8001186:	2200      	movs	r2, #0
 8001188:	f44f 5100 	mov.w	r1, #8192	@ 0x2000
 800118c:	480a      	ldr	r0, [pc, #40]	@ (80011b8 <LCD_IO_WriteReg+0x3c>)
 800118e:	f001 fe05 	bl	8002d9c <HAL_GPIO_WritePin>

  /* Reset LCD control line(/CS) and Send command */
  LCD_CS_LOW();
 8001192:	2200      	movs	r2, #0
 8001194:	2104      	movs	r1, #4
 8001196:	4809      	ldr	r0, [pc, #36]	@ (80011bc <LCD_IO_WriteReg+0x40>)
 8001198:	f001 fe00 	bl	8002d9c <HAL_GPIO_WritePin>
  SPI_Write(Reg);
 800119c:	79fb      	ldrb	r3, [r7, #7]
 800119e:	b29b      	uxth	r3, r3
 80011a0:	4618      	mov	r0, r3
 80011a2:	f7ff feed 	bl	8000f80 <SPI_Write>

  /* Deselect: Chip Select high */
  LCD_CS_HIGH();
 80011a6:	2201      	movs	r2, #1
 80011a8:	2104      	movs	r1, #4
 80011aa:	4804      	ldr	r0, [pc, #16]	@ (80011bc <LCD_IO_WriteReg+0x40>)
 80011ac:	f001 fdf6 	bl	8002d9c <HAL_GPIO_WritePin>
}
 80011b0:	bf00      	nop
 80011b2:	3708      	adds	r7, #8
 80011b4:	46bd      	mov	sp, r7
 80011b6:	bd80      	pop	{r7, pc}
 80011b8:	40020c00 	.word	0x40020c00
 80011bc:	40020800 	.word	0x40020800

080011c0 <LCD_Delay>:
/**
  * @brief  Wait for loop in ms.
  * @param  Delay in ms.
  */
void LCD_Delay(uint32_t Delay)
{
 80011c0:	b580      	push	{r7, lr}
 80011c2:	b082      	sub	sp, #8
 80011c4:	af00      	add	r7, sp, #0
 80011c6:	6078      	str	r0, [r7, #4]
  HAL_Delay(Delay);
 80011c8:	6878      	ldr	r0, [r7, #4]
 80011ca:	f001 fa25 	bl	8002618 <HAL_Delay>
}
 80011ce:	bf00      	nop
 80011d0:	3708      	adds	r7, #8
 80011d2:	46bd      	mov	sp, r7
 80011d4:	bd80      	pop	{r7, pc}
	...

080011d8 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 80011d8:	b580      	push	{r7, lr}
 80011da:	b082      	sub	sp, #8
 80011dc:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 80011de:	f001 f9a9 	bl	8002534 <HAL_Init>


  SystemClockOverride();
 80011e2:	f000 fcad 	bl	8001b40 <SystemClockOverride>
  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 80011e6:	f000 faf7 	bl	80017d8 <MX_GPIO_Init>
  MX_I2C3_Init();
 80011ea:	f000 f94d 	bl	8001488 <MX_I2C3_Init>
  MX_LTDC_Init();
 80011ee:	f000 f98b 	bl	8001508 <MX_LTDC_Init>
  MX_RNG_Init();
 80011f2:	f000 fa3b 	bl	800166c <MX_RNG_Init>
  MX_SPI5_Init();
 80011f6:	f000 fa4d 	bl	8001694 <MX_SPI5_Init>
  MX_TIM6_Init();
 80011fa:	f000 fa81 	bl	8001700 <MX_TIM6_Init>
  MX_TIM7_Init();
 80011fe:	f000 fab5 	bl	800176c <MX_TIM7_Init>
  /* USER CODE BEGIN 2 */
  ApplicationInit(); // Initializes the LCD functionality
 8001202:	f7ff f96b 	bl	80004dc <ApplicationInit>
  static uint16_t level_max = 12;



  //experiment and homescreen
  for (uint16_t level = 1; level <= level_max; level++)
 8001206:	2301      	movs	r3, #1
 8001208:	80fb      	strh	r3, [r7, #6]
 800120a:	e00f      	b.n	800122c <main+0x54>
  {
	  spawn_random_block(level);
 800120c:	88fb      	ldrh	r3, [r7, #6]
 800120e:	4618      	mov	r0, r3
 8001210:	f000 f832 	bl	8001278 <spawn_random_block>
  	  HAL_Delay(1000);
 8001214:	f44f 707a 	mov.w	r0, #1000	@ 0x3e8
 8001218:	f001 f9fe 	bl	8002618 <HAL_Delay>
  	  LCD_Clear(0, LCD_COLOR_WHITE);
 800121c:	f64f 71ff 	movw	r1, #65535	@ 0xffff
 8001220:	2000      	movs	r0, #0
 8001222:	f7ff fb97 	bl	8000954 <LCD_Clear>
  for (uint16_t level = 1; level <= level_max; level++)
 8001226:	88fb      	ldrh	r3, [r7, #6]
 8001228:	3301      	adds	r3, #1
 800122a:	80fb      	strh	r3, [r7, #6]
 800122c:	4b0f      	ldr	r3, [pc, #60]	@ (800126c <main+0x94>)
 800122e:	881b      	ldrh	r3, [r3, #0]
 8001230:	88fa      	ldrh	r2, [r7, #6]
 8001232:	429a      	cmp	r2, r3
 8001234:	d9ea      	bls.n	800120c <main+0x34>
  }




  HAL_Delay(5000);
 8001236:	f241 3088 	movw	r0, #5000	@ 0x1388
 800123a:	f001 f9ed 	bl	8002618 <HAL_Delay>
  LCD_Clear(0, LCD_COLOR_WHITE);
 800123e:	f64f 71ff 	movw	r1, #65535	@ 0xffff
 8001242:	2000      	movs	r0, #0
 8001244:	f7ff fb86 	bl	8000954 <LCD_Clear>
  LCD_HomeScreen();
 8001248:	f7ff fcac 	bl	8000ba4 <LCD_HomeScreen>
  HAL_Delay(500);
 800124c:	f44f 70fa 	mov.w	r0, #500	@ 0x1f4
 8001250:	f001 f9e2 	bl	8002618 <HAL_Delay>
  while (1)
  {
    /* USER CODE END WHILE */


	  hrng.Instance = RNG;
 8001254:	4b06      	ldr	r3, [pc, #24]	@ (8001270 <main+0x98>)
 8001256:	4a07      	ldr	r2, [pc, #28]	@ (8001274 <main+0x9c>)
 8001258:	601a      	str	r2, [r3, #0]
	  if (HAL_RNG_Init(&hrng) != HAL_OK)
 800125a:	4805      	ldr	r0, [pc, #20]	@ (8001270 <main+0x98>)
 800125c:	f003 ff42 	bl	80050e4 <HAL_RNG_Init>
 8001260:	4603      	mov	r3, r0
 8001262:	2b00      	cmp	r3, #0
 8001264:	d0f6      	beq.n	8001254 <main+0x7c>
	  {
	  		Error_Handler();
 8001266:	f000 fc65 	bl	8001b34 <Error_Handler>
	  hrng.Instance = RNG;
 800126a:	e7f3      	b.n	8001254 <main+0x7c>
 800126c:	20000010 	.word	0x20000010
 8001270:	20025a78 	.word	0x20025a78
 8001274:	50060800 	.word	0x50060800

08001278 <spawn_random_block>:
  }
  /* USER CODE END 3 */
}

void spawn_random_block(uint16_t level)
{
 8001278:	b590      	push	{r4, r7, lr}
 800127a:	b08f      	sub	sp, #60	@ 0x3c
 800127c:	af00      	add	r7, sp, #0
 800127e:	4603      	mov	r3, r0
 8001280:	80fb      	strh	r3, [r7, #6]
		int16_t gameGrid[3][4] = {0};
 8001282:	f107 0314 	add.w	r3, r7, #20
 8001286:	2200      	movs	r2, #0
 8001288:	601a      	str	r2, [r3, #0]
 800128a:	605a      	str	r2, [r3, #4]
 800128c:	609a      	str	r2, [r3, #8]
 800128e:	60da      	str	r2, [r3, #12]
 8001290:	611a      	str	r2, [r3, #16]
 8001292:	615a      	str	r2, [r3, #20]
		LCD_SetTextColor(LCD_COLOR_BLACK);
 8001294:	2000      	movs	r0, #0
 8001296:	f7ff fb7f 	bl	8000998 <LCD_SetTextColor>
		LCD_SetFont(&Font16x24);
 800129a:	4875      	ldr	r0, [pc, #468]	@ (8001470 <spawn_random_block+0x1f8>)
 800129c:	f7ff fb8c 	bl	80009b8 <LCD_SetFont>
		char blockNums[9] = {'1', '2', '3','4','5','6','7','8','9'};
 80012a0:	4a74      	ldr	r2, [pc, #464]	@ (8001474 <spawn_random_block+0x1fc>)
 80012a2:	f107 0308 	add.w	r3, r7, #8
 80012a6:	ca07      	ldmia	r2, {r0, r1, r2}
 80012a8:	c303      	stmia	r3!, {r0, r1}
 80012aa:	701a      	strb	r2, [r3, #0]
		for (uint8_t i = 0; i<level;i++)
 80012ac:	2300      	movs	r3, #0
 80012ae:	f887 3037 	strb.w	r3, [r7, #55]	@ 0x37
 80012b2:	e0d0      	b.n	8001456 <spawn_random_block+0x1de>
		{
			uint32_t randomNumberx = 0;
 80012b4:	2300      	movs	r3, #0
 80012b6:	633b      	str	r3, [r7, #48]	@ 0x30
			uint32_t randomNumbery = 0;
 80012b8:	2300      	movs	r3, #0
 80012ba:	62fb      	str	r3, [r7, #44]	@ 0x2c
			hrng.Instance = RNG;
 80012bc:	4b6e      	ldr	r3, [pc, #440]	@ (8001478 <spawn_random_block+0x200>)
 80012be:	4a6f      	ldr	r2, [pc, #444]	@ (800147c <spawn_random_block+0x204>)
 80012c0:	601a      	str	r2, [r3, #0]
			if (HAL_RNG_Init(&hrng) != HAL_OK)
 80012c2:	486d      	ldr	r0, [pc, #436]	@ (8001478 <spawn_random_block+0x200>)
 80012c4:	f003 ff0e 	bl	80050e4 <HAL_RNG_Init>
 80012c8:	4603      	mov	r3, r0
 80012ca:	2b00      	cmp	r3, #0
 80012cc:	d001      	beq.n	80012d2 <spawn_random_block+0x5a>
			{
				Error_Handler();
 80012ce:	f000 fc31 	bl	8001b34 <Error_Handler>
			}

			do
			{
				randomNumbery = HAL_RNG_GetRandomNumber(&hrng)%4;
 80012d2:	4869      	ldr	r0, [pc, #420]	@ (8001478 <spawn_random_block+0x200>)
 80012d4:	f003 ff86 	bl	80051e4 <HAL_RNG_GetRandomNumber>
 80012d8:	4603      	mov	r3, r0
 80012da:	f003 0303 	and.w	r3, r3, #3
 80012de:	62fb      	str	r3, [r7, #44]	@ 0x2c
				randomNumberx = HAL_RNG_GetRandomNumber(&hrng)%3;
 80012e0:	4865      	ldr	r0, [pc, #404]	@ (8001478 <spawn_random_block+0x200>)
 80012e2:	f003 ff7f 	bl	80051e4 <HAL_RNG_GetRandomNumber>
 80012e6:	4602      	mov	r2, r0
 80012e8:	4b65      	ldr	r3, [pc, #404]	@ (8001480 <spawn_random_block+0x208>)
 80012ea:	fba3 1302 	umull	r1, r3, r3, r2
 80012ee:	0859      	lsrs	r1, r3, #1
 80012f0:	460b      	mov	r3, r1
 80012f2:	005b      	lsls	r3, r3, #1
 80012f4:	440b      	add	r3, r1
 80012f6:	1ad3      	subs	r3, r2, r3
 80012f8:	633b      	str	r3, [r7, #48]	@ 0x30
			} while (gameGrid[randomNumberx][randomNumbery] != 0);
 80012fa:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80012fc:	009a      	lsls	r2, r3, #2
 80012fe:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8001300:	4413      	add	r3, r2
 8001302:	005b      	lsls	r3, r3, #1
 8001304:	3338      	adds	r3, #56	@ 0x38
 8001306:	443b      	add	r3, r7
 8001308:	f933 3c24 	ldrsh.w	r3, [r3, #-36]
 800130c:	2b00      	cmp	r3, #0
 800130e:	d1e0      	bne.n	80012d2 <spawn_random_block+0x5a>

			gameGrid[randomNumberx][randomNumbery] = i+1;
 8001310:	f897 3037 	ldrb.w	r3, [r7, #55]	@ 0x37
 8001314:	b29b      	uxth	r3, r3
 8001316:	3301      	adds	r3, #1
 8001318:	b29b      	uxth	r3, r3
 800131a:	b219      	sxth	r1, r3
 800131c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800131e:	009a      	lsls	r2, r3, #2
 8001320:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8001322:	4413      	add	r3, r2
 8001324:	005b      	lsls	r3, r3, #1
 8001326:	3338      	adds	r3, #56	@ 0x38
 8001328:	443b      	add	r3, r7
 800132a:	460a      	mov	r2, r1
 800132c:	f823 2c24 	strh.w	r2, [r3, #-36]


			LCD_Draw_Square_Fill((randomNumberx * 80), (randomNumbery * 80), 80, LCD_COLOR_BLACK);
 8001330:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8001332:	b29b      	uxth	r3, r3
 8001334:	461a      	mov	r2, r3
 8001336:	0092      	lsls	r2, r2, #2
 8001338:	4413      	add	r3, r2
 800133a:	011b      	lsls	r3, r3, #4
 800133c:	b298      	uxth	r0, r3
 800133e:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8001340:	b29b      	uxth	r3, r3
 8001342:	461a      	mov	r2, r3
 8001344:	0092      	lsls	r2, r2, #2
 8001346:	4413      	add	r3, r2
 8001348:	011b      	lsls	r3, r3, #4
 800134a:	b299      	uxth	r1, r3
 800134c:	2300      	movs	r3, #0
 800134e:	2250      	movs	r2, #80	@ 0x50
 8001350:	f7ff fac5 	bl	80008de <LCD_Draw_Square_Fill>
			LCD_Draw_Square_Fill(((randomNumberx * 80)+ 2), ((randomNumbery * 80) + 2), 76, LCD_COLOR_BLUE);
 8001354:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8001356:	b29b      	uxth	r3, r3
 8001358:	461a      	mov	r2, r3
 800135a:	0092      	lsls	r2, r2, #2
 800135c:	4413      	add	r3, r2
 800135e:	011b      	lsls	r3, r3, #4
 8001360:	b29b      	uxth	r3, r3
 8001362:	3302      	adds	r3, #2
 8001364:	b298      	uxth	r0, r3
 8001366:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8001368:	b29b      	uxth	r3, r3
 800136a:	461a      	mov	r2, r3
 800136c:	0092      	lsls	r2, r2, #2
 800136e:	4413      	add	r3, r2
 8001370:	011b      	lsls	r3, r3, #4
 8001372:	b29b      	uxth	r3, r3
 8001374:	3302      	adds	r3, #2
 8001376:	b299      	uxth	r1, r3
 8001378:	231f      	movs	r3, #31
 800137a:	224c      	movs	r2, #76	@ 0x4c
 800137c:	f7ff faaf 	bl	80008de <LCD_Draw_Square_Fill>
			if (i > 9)
 8001380:	f897 3037 	ldrb.w	r3, [r7, #55]	@ 0x37
 8001384:	2b09      	cmp	r3, #9
 8001386:	d946      	bls.n	8001416 <spawn_random_block+0x19e>
			{
				LCD_DisplayChar((randomNumberx * 80) + 27, (randomNumbery * 80) + 30, blockNums[i/10] );
 8001388:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800138a:	b29b      	uxth	r3, r3
 800138c:	461a      	mov	r2, r3
 800138e:	0092      	lsls	r2, r2, #2
 8001390:	4413      	add	r3, r2
 8001392:	011b      	lsls	r3, r3, #4
 8001394:	b29b      	uxth	r3, r3
 8001396:	331b      	adds	r3, #27
 8001398:	b298      	uxth	r0, r3
 800139a:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800139c:	b29b      	uxth	r3, r3
 800139e:	461a      	mov	r2, r3
 80013a0:	0092      	lsls	r2, r2, #2
 80013a2:	4413      	add	r3, r2
 80013a4:	011b      	lsls	r3, r3, #4
 80013a6:	b29b      	uxth	r3, r3
 80013a8:	331e      	adds	r3, #30
 80013aa:	b299      	uxth	r1, r3
 80013ac:	f897 3037 	ldrb.w	r3, [r7, #55]	@ 0x37
 80013b0:	4a34      	ldr	r2, [pc, #208]	@ (8001484 <spawn_random_block+0x20c>)
 80013b2:	fba2 2303 	umull	r2, r3, r2, r3
 80013b6:	08db      	lsrs	r3, r3, #3
 80013b8:	b2db      	uxtb	r3, r3
 80013ba:	3338      	adds	r3, #56	@ 0x38
 80013bc:	443b      	add	r3, r7
 80013be:	f813 3c30 	ldrb.w	r3, [r3, #-48]
 80013c2:	461a      	mov	r2, r3
 80013c4:	f7ff fb76 	bl	8000ab4 <LCD_DisplayChar>
				LCD_DisplayChar((randomNumberx * 80) + 33, (randomNumbery * 80) + 30, blockNums[i%10] );
 80013c8:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80013ca:	b29b      	uxth	r3, r3
 80013cc:	461a      	mov	r2, r3
 80013ce:	0092      	lsls	r2, r2, #2
 80013d0:	4413      	add	r3, r2
 80013d2:	011b      	lsls	r3, r3, #4
 80013d4:	b29b      	uxth	r3, r3
 80013d6:	3321      	adds	r3, #33	@ 0x21
 80013d8:	b298      	uxth	r0, r3
 80013da:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80013dc:	b29b      	uxth	r3, r3
 80013de:	461a      	mov	r2, r3
 80013e0:	0092      	lsls	r2, r2, #2
 80013e2:	4413      	add	r3, r2
 80013e4:	011b      	lsls	r3, r3, #4
 80013e6:	b29b      	uxth	r3, r3
 80013e8:	331e      	adds	r3, #30
 80013ea:	b29c      	uxth	r4, r3
 80013ec:	f897 2037 	ldrb.w	r2, [r7, #55]	@ 0x37
 80013f0:	4b24      	ldr	r3, [pc, #144]	@ (8001484 <spawn_random_block+0x20c>)
 80013f2:	fba3 1302 	umull	r1, r3, r3, r2
 80013f6:	08d9      	lsrs	r1, r3, #3
 80013f8:	460b      	mov	r3, r1
 80013fa:	009b      	lsls	r3, r3, #2
 80013fc:	440b      	add	r3, r1
 80013fe:	005b      	lsls	r3, r3, #1
 8001400:	1ad3      	subs	r3, r2, r3
 8001402:	b2db      	uxtb	r3, r3
 8001404:	3338      	adds	r3, #56	@ 0x38
 8001406:	443b      	add	r3, r7
 8001408:	f813 3c30 	ldrb.w	r3, [r3, #-48]
 800140c:	461a      	mov	r2, r3
 800140e:	4621      	mov	r1, r4
 8001410:	f7ff fb50 	bl	8000ab4 <LCD_DisplayChar>
 8001414:	e01a      	b.n	800144c <spawn_random_block+0x1d4>
			}
			else
			{
				LCD_DisplayChar((randomNumberx * 80) + 30, (randomNumbery * 80) + 30, blockNums[i] );
 8001416:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8001418:	b29b      	uxth	r3, r3
 800141a:	461a      	mov	r2, r3
 800141c:	0092      	lsls	r2, r2, #2
 800141e:	4413      	add	r3, r2
 8001420:	011b      	lsls	r3, r3, #4
 8001422:	b29b      	uxth	r3, r3
 8001424:	331e      	adds	r3, #30
 8001426:	b298      	uxth	r0, r3
 8001428:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800142a:	b29b      	uxth	r3, r3
 800142c:	461a      	mov	r2, r3
 800142e:	0092      	lsls	r2, r2, #2
 8001430:	4413      	add	r3, r2
 8001432:	011b      	lsls	r3, r3, #4
 8001434:	b29b      	uxth	r3, r3
 8001436:	331e      	adds	r3, #30
 8001438:	b299      	uxth	r1, r3
 800143a:	f897 3037 	ldrb.w	r3, [r7, #55]	@ 0x37
 800143e:	3338      	adds	r3, #56	@ 0x38
 8001440:	443b      	add	r3, r7
 8001442:	f813 3c30 	ldrb.w	r3, [r3, #-48]
 8001446:	461a      	mov	r2, r3
 8001448:	f7ff fb34 	bl	8000ab4 <LCD_DisplayChar>
		for (uint8_t i = 0; i<level;i++)
 800144c:	f897 3037 	ldrb.w	r3, [r7, #55]	@ 0x37
 8001450:	3301      	adds	r3, #1
 8001452:	f887 3037 	strb.w	r3, [r7, #55]	@ 0x37
 8001456:	f897 3037 	ldrb.w	r3, [r7, #55]	@ 0x37
 800145a:	b29b      	uxth	r3, r3
 800145c:	88fa      	ldrh	r2, [r7, #6]
 800145e:	429a      	cmp	r2, r3
 8001460:	f63f af28 	bhi.w	80012b4 <spawn_random_block+0x3c>
			}
		}

}
 8001464:	bf00      	nop
 8001466:	bf00      	nop
 8001468:	373c      	adds	r7, #60	@ 0x3c
 800146a:	46bd      	mov	sp, r7
 800146c:	bd90      	pop	{r4, r7, pc}
 800146e:	bf00      	nop
 8001470:	20000004 	.word	0x20000004
 8001474:	08005b2c 	.word	0x08005b2c
 8001478:	20025a78 	.word	0x20025a78
 800147c:	50060800 	.word	0x50060800
 8001480:	aaaaaaab 	.word	0xaaaaaaab
 8001484:	cccccccd 	.word	0xcccccccd

08001488 <MX_I2C3_Init>:
  * @brief I2C3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_I2C3_Init(void)
{
 8001488:	b580      	push	{r7, lr}
 800148a:	af00      	add	r7, sp, #0
  /* USER CODE END I2C3_Init 0 */

  /* USER CODE BEGIN I2C3_Init 1 */

  /* USER CODE END I2C3_Init 1 */
  hi2c3.Instance = I2C3;
 800148c:	4b1b      	ldr	r3, [pc, #108]	@ (80014fc <MX_I2C3_Init+0x74>)
 800148e:	4a1c      	ldr	r2, [pc, #112]	@ (8001500 <MX_I2C3_Init+0x78>)
 8001490:	601a      	str	r2, [r3, #0]
  hi2c3.Init.ClockSpeed = 100000;
 8001492:	4b1a      	ldr	r3, [pc, #104]	@ (80014fc <MX_I2C3_Init+0x74>)
 8001494:	4a1b      	ldr	r2, [pc, #108]	@ (8001504 <MX_I2C3_Init+0x7c>)
 8001496:	605a      	str	r2, [r3, #4]
  hi2c3.Init.DutyCycle = I2C_DUTYCYCLE_2;
 8001498:	4b18      	ldr	r3, [pc, #96]	@ (80014fc <MX_I2C3_Init+0x74>)
 800149a:	2200      	movs	r2, #0
 800149c:	609a      	str	r2, [r3, #8]
  hi2c3.Init.OwnAddress1 = 0;
 800149e:	4b17      	ldr	r3, [pc, #92]	@ (80014fc <MX_I2C3_Init+0x74>)
 80014a0:	2200      	movs	r2, #0
 80014a2:	60da      	str	r2, [r3, #12]
  hi2c3.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 80014a4:	4b15      	ldr	r3, [pc, #84]	@ (80014fc <MX_I2C3_Init+0x74>)
 80014a6:	f44f 4280 	mov.w	r2, #16384	@ 0x4000
 80014aa:	611a      	str	r2, [r3, #16]
  hi2c3.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 80014ac:	4b13      	ldr	r3, [pc, #76]	@ (80014fc <MX_I2C3_Init+0x74>)
 80014ae:	2200      	movs	r2, #0
 80014b0:	615a      	str	r2, [r3, #20]
  hi2c3.Init.OwnAddress2 = 0;
 80014b2:	4b12      	ldr	r3, [pc, #72]	@ (80014fc <MX_I2C3_Init+0x74>)
 80014b4:	2200      	movs	r2, #0
 80014b6:	619a      	str	r2, [r3, #24]
  hi2c3.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 80014b8:	4b10      	ldr	r3, [pc, #64]	@ (80014fc <MX_I2C3_Init+0x74>)
 80014ba:	2200      	movs	r2, #0
 80014bc:	61da      	str	r2, [r3, #28]
  hi2c3.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 80014be:	4b0f      	ldr	r3, [pc, #60]	@ (80014fc <MX_I2C3_Init+0x74>)
 80014c0:	2200      	movs	r2, #0
 80014c2:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c3) != HAL_OK)
 80014c4:	480d      	ldr	r0, [pc, #52]	@ (80014fc <MX_I2C3_Init+0x74>)
 80014c6:	f001 fc83 	bl	8002dd0 <HAL_I2C_Init>
 80014ca:	4603      	mov	r3, r0
 80014cc:	2b00      	cmp	r3, #0
 80014ce:	d001      	beq.n	80014d4 <MX_I2C3_Init+0x4c>
  {
    Error_Handler();
 80014d0:	f000 fb30 	bl	8001b34 <Error_Handler>
  }

  /** Configure Analogue filter
  */
  if (HAL_I2CEx_ConfigAnalogFilter(&hi2c3, I2C_ANALOGFILTER_ENABLE) != HAL_OK)
 80014d4:	2100      	movs	r1, #0
 80014d6:	4809      	ldr	r0, [pc, #36]	@ (80014fc <MX_I2C3_Init+0x74>)
 80014d8:	f002 fc9e 	bl	8003e18 <HAL_I2CEx_ConfigAnalogFilter>
 80014dc:	4603      	mov	r3, r0
 80014de:	2b00      	cmp	r3, #0
 80014e0:	d001      	beq.n	80014e6 <MX_I2C3_Init+0x5e>
  {
    Error_Handler();
 80014e2:	f000 fb27 	bl	8001b34 <Error_Handler>
  }

  /** Configure Digital filter
  */
  if (HAL_I2CEx_ConfigDigitalFilter(&hi2c3, 0) != HAL_OK)
 80014e6:	2100      	movs	r1, #0
 80014e8:	4804      	ldr	r0, [pc, #16]	@ (80014fc <MX_I2C3_Init+0x74>)
 80014ea:	f002 fcd1 	bl	8003e90 <HAL_I2CEx_ConfigDigitalFilter>
 80014ee:	4603      	mov	r3, r0
 80014f0:	2b00      	cmp	r3, #0
 80014f2:	d001      	beq.n	80014f8 <MX_I2C3_Init+0x70>
  {
    Error_Handler();
 80014f4:	f000 fb1e 	bl	8001b34 <Error_Handler>
  }
  /* USER CODE BEGIN I2C3_Init 2 */

  /* USER CODE END I2C3_Init 2 */

}
 80014f8:	bf00      	nop
 80014fa:	bd80      	pop	{r7, pc}
 80014fc:	2002597c 	.word	0x2002597c
 8001500:	40005c00 	.word	0x40005c00
 8001504:	000186a0 	.word	0x000186a0

08001508 <MX_LTDC_Init>:
  * @brief LTDC Initialization Function
  * @param None
  * @retval None
  */
static void MX_LTDC_Init(void)
{
 8001508:	b580      	push	{r7, lr}
 800150a:	b09a      	sub	sp, #104	@ 0x68
 800150c:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN LTDC_Init 0 */

  /* USER CODE END LTDC_Init 0 */

  LTDC_LayerCfgTypeDef pLayerCfg = {0};
 800150e:	f107 0334 	add.w	r3, r7, #52	@ 0x34
 8001512:	2234      	movs	r2, #52	@ 0x34
 8001514:	2100      	movs	r1, #0
 8001516:	4618      	mov	r0, r3
 8001518:	f004 fad0 	bl	8005abc <memset>
  LTDC_LayerCfgTypeDef pLayerCfg1 = {0};
 800151c:	463b      	mov	r3, r7
 800151e:	2234      	movs	r2, #52	@ 0x34
 8001520:	2100      	movs	r1, #0
 8001522:	4618      	mov	r0, r3
 8001524:	f004 faca 	bl	8005abc <memset>

  /* USER CODE BEGIN LTDC_Init 1 */

  /* USER CODE END LTDC_Init 1 */
  hltdc.Instance = LTDC;
 8001528:	4b4e      	ldr	r3, [pc, #312]	@ (8001664 <MX_LTDC_Init+0x15c>)
 800152a:	4a4f      	ldr	r2, [pc, #316]	@ (8001668 <MX_LTDC_Init+0x160>)
 800152c:	601a      	str	r2, [r3, #0]
  hltdc.Init.HSPolarity = LTDC_HSPOLARITY_AL;
 800152e:	4b4d      	ldr	r3, [pc, #308]	@ (8001664 <MX_LTDC_Init+0x15c>)
 8001530:	2200      	movs	r2, #0
 8001532:	605a      	str	r2, [r3, #4]
  hltdc.Init.VSPolarity = LTDC_VSPOLARITY_AL;
 8001534:	4b4b      	ldr	r3, [pc, #300]	@ (8001664 <MX_LTDC_Init+0x15c>)
 8001536:	2200      	movs	r2, #0
 8001538:	609a      	str	r2, [r3, #8]
  hltdc.Init.DEPolarity = LTDC_DEPOLARITY_AL;
 800153a:	4b4a      	ldr	r3, [pc, #296]	@ (8001664 <MX_LTDC_Init+0x15c>)
 800153c:	2200      	movs	r2, #0
 800153e:	60da      	str	r2, [r3, #12]
  hltdc.Init.PCPolarity = LTDC_PCPOLARITY_IPC;
 8001540:	4b48      	ldr	r3, [pc, #288]	@ (8001664 <MX_LTDC_Init+0x15c>)
 8001542:	2200      	movs	r2, #0
 8001544:	611a      	str	r2, [r3, #16]
  hltdc.Init.HorizontalSync = 7;
 8001546:	4b47      	ldr	r3, [pc, #284]	@ (8001664 <MX_LTDC_Init+0x15c>)
 8001548:	2207      	movs	r2, #7
 800154a:	615a      	str	r2, [r3, #20]
  hltdc.Init.VerticalSync = 3;
 800154c:	4b45      	ldr	r3, [pc, #276]	@ (8001664 <MX_LTDC_Init+0x15c>)
 800154e:	2203      	movs	r2, #3
 8001550:	619a      	str	r2, [r3, #24]
  hltdc.Init.AccumulatedHBP = 14;
 8001552:	4b44      	ldr	r3, [pc, #272]	@ (8001664 <MX_LTDC_Init+0x15c>)
 8001554:	220e      	movs	r2, #14
 8001556:	61da      	str	r2, [r3, #28]
  hltdc.Init.AccumulatedVBP = 5;
 8001558:	4b42      	ldr	r3, [pc, #264]	@ (8001664 <MX_LTDC_Init+0x15c>)
 800155a:	2205      	movs	r2, #5
 800155c:	621a      	str	r2, [r3, #32]
  hltdc.Init.AccumulatedActiveW = 654;
 800155e:	4b41      	ldr	r3, [pc, #260]	@ (8001664 <MX_LTDC_Init+0x15c>)
 8001560:	f240 228e 	movw	r2, #654	@ 0x28e
 8001564:	625a      	str	r2, [r3, #36]	@ 0x24
  hltdc.Init.AccumulatedActiveH = 485;
 8001566:	4b3f      	ldr	r3, [pc, #252]	@ (8001664 <MX_LTDC_Init+0x15c>)
 8001568:	f240 12e5 	movw	r2, #485	@ 0x1e5
 800156c:	629a      	str	r2, [r3, #40]	@ 0x28
  hltdc.Init.TotalWidth = 660;
 800156e:	4b3d      	ldr	r3, [pc, #244]	@ (8001664 <MX_LTDC_Init+0x15c>)
 8001570:	f44f 7225 	mov.w	r2, #660	@ 0x294
 8001574:	62da      	str	r2, [r3, #44]	@ 0x2c
  hltdc.Init.TotalHeigh = 487;
 8001576:	4b3b      	ldr	r3, [pc, #236]	@ (8001664 <MX_LTDC_Init+0x15c>)
 8001578:	f240 12e7 	movw	r2, #487	@ 0x1e7
 800157c:	631a      	str	r2, [r3, #48]	@ 0x30
  hltdc.Init.Backcolor.Blue = 0;
 800157e:	4b39      	ldr	r3, [pc, #228]	@ (8001664 <MX_LTDC_Init+0x15c>)
 8001580:	2200      	movs	r2, #0
 8001582:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
  hltdc.Init.Backcolor.Green = 0;
 8001586:	4b37      	ldr	r3, [pc, #220]	@ (8001664 <MX_LTDC_Init+0x15c>)
 8001588:	2200      	movs	r2, #0
 800158a:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35
  hltdc.Init.Backcolor.Red = 0;
 800158e:	4b35      	ldr	r3, [pc, #212]	@ (8001664 <MX_LTDC_Init+0x15c>)
 8001590:	2200      	movs	r2, #0
 8001592:	f883 2036 	strb.w	r2, [r3, #54]	@ 0x36
  if (HAL_LTDC_Init(&hltdc) != HAL_OK)
 8001596:	4833      	ldr	r0, [pc, #204]	@ (8001664 <MX_LTDC_Init+0x15c>)
 8001598:	f002 fcba 	bl	8003f10 <HAL_LTDC_Init>
 800159c:	4603      	mov	r3, r0
 800159e:	2b00      	cmp	r3, #0
 80015a0:	d001      	beq.n	80015a6 <MX_LTDC_Init+0x9e>
  {
    Error_Handler();
 80015a2:	f000 fac7 	bl	8001b34 <Error_Handler>
  }
  pLayerCfg.WindowX0 = 0;
 80015a6:	2300      	movs	r3, #0
 80015a8:	637b      	str	r3, [r7, #52]	@ 0x34
  pLayerCfg.WindowX1 = 0;
 80015aa:	2300      	movs	r3, #0
 80015ac:	63bb      	str	r3, [r7, #56]	@ 0x38
  pLayerCfg.WindowY0 = 0;
 80015ae:	2300      	movs	r3, #0
 80015b0:	63fb      	str	r3, [r7, #60]	@ 0x3c
  pLayerCfg.WindowY1 = 0;
 80015b2:	2300      	movs	r3, #0
 80015b4:	643b      	str	r3, [r7, #64]	@ 0x40
  pLayerCfg.PixelFormat = LTDC_PIXEL_FORMAT_ARGB8888;
 80015b6:	2300      	movs	r3, #0
 80015b8:	647b      	str	r3, [r7, #68]	@ 0x44
  pLayerCfg.Alpha = 0;
 80015ba:	2300      	movs	r3, #0
 80015bc:	64bb      	str	r3, [r7, #72]	@ 0x48
  pLayerCfg.Alpha0 = 0;
 80015be:	2300      	movs	r3, #0
 80015c0:	64fb      	str	r3, [r7, #76]	@ 0x4c
  pLayerCfg.BlendingFactor1 = LTDC_BLENDING_FACTOR1_CA;
 80015c2:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 80015c6:	653b      	str	r3, [r7, #80]	@ 0x50
  pLayerCfg.BlendingFactor2 = LTDC_BLENDING_FACTOR2_CA;
 80015c8:	2305      	movs	r3, #5
 80015ca:	657b      	str	r3, [r7, #84]	@ 0x54
  pLayerCfg.FBStartAdress = 0;
 80015cc:	2300      	movs	r3, #0
 80015ce:	65bb      	str	r3, [r7, #88]	@ 0x58
  pLayerCfg.ImageWidth = 0;
 80015d0:	2300      	movs	r3, #0
 80015d2:	65fb      	str	r3, [r7, #92]	@ 0x5c
  pLayerCfg.ImageHeight = 0;
 80015d4:	2300      	movs	r3, #0
 80015d6:	663b      	str	r3, [r7, #96]	@ 0x60
  pLayerCfg.Backcolor.Blue = 0;
 80015d8:	2300      	movs	r3, #0
 80015da:	f887 3064 	strb.w	r3, [r7, #100]	@ 0x64
  pLayerCfg.Backcolor.Green = 0;
 80015de:	2300      	movs	r3, #0
 80015e0:	f887 3065 	strb.w	r3, [r7, #101]	@ 0x65
  pLayerCfg.Backcolor.Red = 0;
 80015e4:	2300      	movs	r3, #0
 80015e6:	f887 3066 	strb.w	r3, [r7, #102]	@ 0x66
  if (HAL_LTDC_ConfigLayer(&hltdc, &pLayerCfg, 0) != HAL_OK)
 80015ea:	f107 0334 	add.w	r3, r7, #52	@ 0x34
 80015ee:	2200      	movs	r2, #0
 80015f0:	4619      	mov	r1, r3
 80015f2:	481c      	ldr	r0, [pc, #112]	@ (8001664 <MX_LTDC_Init+0x15c>)
 80015f4:	f002 fd5c 	bl	80040b0 <HAL_LTDC_ConfigLayer>
 80015f8:	4603      	mov	r3, r0
 80015fa:	2b00      	cmp	r3, #0
 80015fc:	d001      	beq.n	8001602 <MX_LTDC_Init+0xfa>
  {
    Error_Handler();
 80015fe:	f000 fa99 	bl	8001b34 <Error_Handler>
  }
  pLayerCfg1.WindowX0 = 0;
 8001602:	2300      	movs	r3, #0
 8001604:	603b      	str	r3, [r7, #0]
  pLayerCfg1.WindowX1 = 0;
 8001606:	2300      	movs	r3, #0
 8001608:	607b      	str	r3, [r7, #4]
  pLayerCfg1.WindowY0 = 0;
 800160a:	2300      	movs	r3, #0
 800160c:	60bb      	str	r3, [r7, #8]
  pLayerCfg1.WindowY1 = 0;
 800160e:	2300      	movs	r3, #0
 8001610:	60fb      	str	r3, [r7, #12]
  pLayerCfg1.PixelFormat = LTDC_PIXEL_FORMAT_ARGB8888;
 8001612:	2300      	movs	r3, #0
 8001614:	613b      	str	r3, [r7, #16]
  pLayerCfg1.Alpha = 0;
 8001616:	2300      	movs	r3, #0
 8001618:	617b      	str	r3, [r7, #20]
  pLayerCfg1.Alpha0 = 0;
 800161a:	2300      	movs	r3, #0
 800161c:	61bb      	str	r3, [r7, #24]
  pLayerCfg1.BlendingFactor1 = LTDC_BLENDING_FACTOR1_CA;
 800161e:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 8001622:	61fb      	str	r3, [r7, #28]
  pLayerCfg1.BlendingFactor2 = LTDC_BLENDING_FACTOR2_CA;
 8001624:	2305      	movs	r3, #5
 8001626:	623b      	str	r3, [r7, #32]
  pLayerCfg1.FBStartAdress = 0;
 8001628:	2300      	movs	r3, #0
 800162a:	627b      	str	r3, [r7, #36]	@ 0x24
  pLayerCfg1.ImageWidth = 0;
 800162c:	2300      	movs	r3, #0
 800162e:	62bb      	str	r3, [r7, #40]	@ 0x28
  pLayerCfg1.ImageHeight = 0;
 8001630:	2300      	movs	r3, #0
 8001632:	62fb      	str	r3, [r7, #44]	@ 0x2c
  pLayerCfg1.Backcolor.Blue = 0;
 8001634:	2300      	movs	r3, #0
 8001636:	f887 3030 	strb.w	r3, [r7, #48]	@ 0x30
  pLayerCfg1.Backcolor.Green = 0;
 800163a:	2300      	movs	r3, #0
 800163c:	f887 3031 	strb.w	r3, [r7, #49]	@ 0x31
  pLayerCfg1.Backcolor.Red = 0;
 8001640:	2300      	movs	r3, #0
 8001642:	f887 3032 	strb.w	r3, [r7, #50]	@ 0x32
  if (HAL_LTDC_ConfigLayer(&hltdc, &pLayerCfg1, 1) != HAL_OK)
 8001646:	463b      	mov	r3, r7
 8001648:	2201      	movs	r2, #1
 800164a:	4619      	mov	r1, r3
 800164c:	4805      	ldr	r0, [pc, #20]	@ (8001664 <MX_LTDC_Init+0x15c>)
 800164e:	f002 fd2f 	bl	80040b0 <HAL_LTDC_ConfigLayer>
 8001652:	4603      	mov	r3, r0
 8001654:	2b00      	cmp	r3, #0
 8001656:	d001      	beq.n	800165c <MX_LTDC_Init+0x154>
  {
    Error_Handler();
 8001658:	f000 fa6c 	bl	8001b34 <Error_Handler>
  }
  /* USER CODE BEGIN LTDC_Init 2 */

  /* USER CODE END LTDC_Init 2 */

}
 800165c:	bf00      	nop
 800165e:	3768      	adds	r7, #104	@ 0x68
 8001660:	46bd      	mov	sp, r7
 8001662:	bd80      	pop	{r7, pc}
 8001664:	200259d0 	.word	0x200259d0
 8001668:	40016800 	.word	0x40016800

0800166c <MX_RNG_Init>:
  * @brief RNG Initialization Function
  * @param None
  * @retval None
  */
static void MX_RNG_Init(void)
{
 800166c:	b580      	push	{r7, lr}
 800166e:	af00      	add	r7, sp, #0
  /* USER CODE END RNG_Init 0 */

  /* USER CODE BEGIN RNG_Init 1 */

  /* USER CODE END RNG_Init 1 */
  hrng.Instance = RNG;
 8001670:	4b06      	ldr	r3, [pc, #24]	@ (800168c <MX_RNG_Init+0x20>)
 8001672:	4a07      	ldr	r2, [pc, #28]	@ (8001690 <MX_RNG_Init+0x24>)
 8001674:	601a      	str	r2, [r3, #0]
  if (HAL_RNG_Init(&hrng) != HAL_OK)
 8001676:	4805      	ldr	r0, [pc, #20]	@ (800168c <MX_RNG_Init+0x20>)
 8001678:	f003 fd34 	bl	80050e4 <HAL_RNG_Init>
 800167c:	4603      	mov	r3, r0
 800167e:	2b00      	cmp	r3, #0
 8001680:	d001      	beq.n	8001686 <MX_RNG_Init+0x1a>
  {
    Error_Handler();
 8001682:	f000 fa57 	bl	8001b34 <Error_Handler>
  }
  /* USER CODE BEGIN RNG_Init 2 */

  /* USER CODE END RNG_Init 2 */

}
 8001686:	bf00      	nop
 8001688:	bd80      	pop	{r7, pc}
 800168a:	bf00      	nop
 800168c:	20025a78 	.word	0x20025a78
 8001690:	50060800 	.word	0x50060800

08001694 <MX_SPI5_Init>:
  * @brief SPI5 Initialization Function
  * @param None
  * @retval None
  */
static void MX_SPI5_Init(void)
{
 8001694:	b580      	push	{r7, lr}
 8001696:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN SPI5_Init 1 */

  /* USER CODE END SPI5_Init 1 */
  /* SPI5 parameter configuration*/
  hspi5.Instance = SPI5;
 8001698:	4b17      	ldr	r3, [pc, #92]	@ (80016f8 <MX_SPI5_Init+0x64>)
 800169a:	4a18      	ldr	r2, [pc, #96]	@ (80016fc <MX_SPI5_Init+0x68>)
 800169c:	601a      	str	r2, [r3, #0]
  hspi5.Init.Mode = SPI_MODE_MASTER;
 800169e:	4b16      	ldr	r3, [pc, #88]	@ (80016f8 <MX_SPI5_Init+0x64>)
 80016a0:	f44f 7282 	mov.w	r2, #260	@ 0x104
 80016a4:	605a      	str	r2, [r3, #4]
  hspi5.Init.Direction = SPI_DIRECTION_2LINES;
 80016a6:	4b14      	ldr	r3, [pc, #80]	@ (80016f8 <MX_SPI5_Init+0x64>)
 80016a8:	2200      	movs	r2, #0
 80016aa:	609a      	str	r2, [r3, #8]
  hspi5.Init.DataSize = SPI_DATASIZE_8BIT;
 80016ac:	4b12      	ldr	r3, [pc, #72]	@ (80016f8 <MX_SPI5_Init+0x64>)
 80016ae:	2200      	movs	r2, #0
 80016b0:	60da      	str	r2, [r3, #12]
  hspi5.Init.CLKPolarity = SPI_POLARITY_LOW;
 80016b2:	4b11      	ldr	r3, [pc, #68]	@ (80016f8 <MX_SPI5_Init+0x64>)
 80016b4:	2200      	movs	r2, #0
 80016b6:	611a      	str	r2, [r3, #16]
  hspi5.Init.CLKPhase = SPI_PHASE_1EDGE;
 80016b8:	4b0f      	ldr	r3, [pc, #60]	@ (80016f8 <MX_SPI5_Init+0x64>)
 80016ba:	2200      	movs	r2, #0
 80016bc:	615a      	str	r2, [r3, #20]
  hspi5.Init.NSS = SPI_NSS_SOFT;
 80016be:	4b0e      	ldr	r3, [pc, #56]	@ (80016f8 <MX_SPI5_Init+0x64>)
 80016c0:	f44f 7200 	mov.w	r2, #512	@ 0x200
 80016c4:	619a      	str	r2, [r3, #24]
  hspi5.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 80016c6:	4b0c      	ldr	r3, [pc, #48]	@ (80016f8 <MX_SPI5_Init+0x64>)
 80016c8:	2200      	movs	r2, #0
 80016ca:	61da      	str	r2, [r3, #28]
  hspi5.Init.FirstBit = SPI_FIRSTBIT_MSB;
 80016cc:	4b0a      	ldr	r3, [pc, #40]	@ (80016f8 <MX_SPI5_Init+0x64>)
 80016ce:	2200      	movs	r2, #0
 80016d0:	621a      	str	r2, [r3, #32]
  hspi5.Init.TIMode = SPI_TIMODE_DISABLE;
 80016d2:	4b09      	ldr	r3, [pc, #36]	@ (80016f8 <MX_SPI5_Init+0x64>)
 80016d4:	2200      	movs	r2, #0
 80016d6:	625a      	str	r2, [r3, #36]	@ 0x24
  hspi5.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 80016d8:	4b07      	ldr	r3, [pc, #28]	@ (80016f8 <MX_SPI5_Init+0x64>)
 80016da:	2200      	movs	r2, #0
 80016dc:	629a      	str	r2, [r3, #40]	@ 0x28
  hspi5.Init.CRCPolynomial = 10;
 80016de:	4b06      	ldr	r3, [pc, #24]	@ (80016f8 <MX_SPI5_Init+0x64>)
 80016e0:	220a      	movs	r2, #10
 80016e2:	62da      	str	r2, [r3, #44]	@ 0x2c
  if (HAL_SPI_Init(&hspi5) != HAL_OK)
 80016e4:	4804      	ldr	r0, [pc, #16]	@ (80016f8 <MX_SPI5_Init+0x64>)
 80016e6:	f003 fd92 	bl	800520e <HAL_SPI_Init>
 80016ea:	4603      	mov	r3, r0
 80016ec:	2b00      	cmp	r3, #0
 80016ee:	d001      	beq.n	80016f4 <MX_SPI5_Init+0x60>
  {
    Error_Handler();
 80016f0:	f000 fa20 	bl	8001b34 <Error_Handler>
  }
  /* USER CODE BEGIN SPI5_Init 2 */

  /* USER CODE END SPI5_Init 2 */

}
 80016f4:	bf00      	nop
 80016f6:	bd80      	pop	{r7, pc}
 80016f8:	20025a88 	.word	0x20025a88
 80016fc:	40015000 	.word	0x40015000

08001700 <MX_TIM6_Init>:
  * @brief TIM6 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM6_Init(void)
{
 8001700:	b580      	push	{r7, lr}
 8001702:	b082      	sub	sp, #8
 8001704:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM6_Init 0 */

  /* USER CODE END TIM6_Init 0 */

  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8001706:	463b      	mov	r3, r7
 8001708:	2200      	movs	r2, #0
 800170a:	601a      	str	r2, [r3, #0]
 800170c:	605a      	str	r2, [r3, #4]

  /* USER CODE BEGIN TIM6_Init 1 */

  /* USER CODE END TIM6_Init 1 */
  htim6.Instance = TIM6;
 800170e:	4b15      	ldr	r3, [pc, #84]	@ (8001764 <MX_TIM6_Init+0x64>)
 8001710:	4a15      	ldr	r2, [pc, #84]	@ (8001768 <MX_TIM6_Init+0x68>)
 8001712:	601a      	str	r2, [r3, #0]
  htim6.Init.Prescaler = 0;
 8001714:	4b13      	ldr	r3, [pc, #76]	@ (8001764 <MX_TIM6_Init+0x64>)
 8001716:	2200      	movs	r2, #0
 8001718:	605a      	str	r2, [r3, #4]
  htim6.Init.CounterMode = TIM_COUNTERMODE_UP;
 800171a:	4b12      	ldr	r3, [pc, #72]	@ (8001764 <MX_TIM6_Init+0x64>)
 800171c:	2200      	movs	r2, #0
 800171e:	609a      	str	r2, [r3, #8]
  htim6.Init.Period = 65535;
 8001720:	4b10      	ldr	r3, [pc, #64]	@ (8001764 <MX_TIM6_Init+0x64>)
 8001722:	f64f 72ff 	movw	r2, #65535	@ 0xffff
 8001726:	60da      	str	r2, [r3, #12]
  htim6.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8001728:	4b0e      	ldr	r3, [pc, #56]	@ (8001764 <MX_TIM6_Init+0x64>)
 800172a:	2200      	movs	r2, #0
 800172c:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim6) != HAL_OK)
 800172e:	480d      	ldr	r0, [pc, #52]	@ (8001764 <MX_TIM6_Init+0x64>)
 8001730:	f004 f84c 	bl	80057cc <HAL_TIM_Base_Init>
 8001734:	4603      	mov	r3, r0
 8001736:	2b00      	cmp	r3, #0
 8001738:	d001      	beq.n	800173e <MX_TIM6_Init+0x3e>
  {
    Error_Handler();
 800173a:	f000 f9fb 	bl	8001b34 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 800173e:	2300      	movs	r3, #0
 8001740:	603b      	str	r3, [r7, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8001742:	2300      	movs	r3, #0
 8001744:	607b      	str	r3, [r7, #4]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim6, &sMasterConfig) != HAL_OK)
 8001746:	463b      	mov	r3, r7
 8001748:	4619      	mov	r1, r3
 800174a:	4806      	ldr	r0, [pc, #24]	@ (8001764 <MX_TIM6_Init+0x64>)
 800174c:	f004 f93a 	bl	80059c4 <HAL_TIMEx_MasterConfigSynchronization>
 8001750:	4603      	mov	r3, r0
 8001752:	2b00      	cmp	r3, #0
 8001754:	d001      	beq.n	800175a <MX_TIM6_Init+0x5a>
  {
    Error_Handler();
 8001756:	f000 f9ed 	bl	8001b34 <Error_Handler>
  }
  /* USER CODE BEGIN TIM6_Init 2 */

  /* USER CODE END TIM6_Init 2 */

}
 800175a:	bf00      	nop
 800175c:	3708      	adds	r7, #8
 800175e:	46bd      	mov	sp, r7
 8001760:	bd80      	pop	{r7, pc}
 8001762:	bf00      	nop
 8001764:	20025ae0 	.word	0x20025ae0
 8001768:	40001000 	.word	0x40001000

0800176c <MX_TIM7_Init>:
  * @brief TIM7 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM7_Init(void)
{
 800176c:	b580      	push	{r7, lr}
 800176e:	b082      	sub	sp, #8
 8001770:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM7_Init 0 */

  /* USER CODE END TIM7_Init 0 */

  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8001772:	463b      	mov	r3, r7
 8001774:	2200      	movs	r2, #0
 8001776:	601a      	str	r2, [r3, #0]
 8001778:	605a      	str	r2, [r3, #4]

  /* USER CODE BEGIN TIM7_Init 1 */

  /* USER CODE END TIM7_Init 1 */
  htim7.Instance = TIM7;
 800177a:	4b15      	ldr	r3, [pc, #84]	@ (80017d0 <MX_TIM7_Init+0x64>)
 800177c:	4a15      	ldr	r2, [pc, #84]	@ (80017d4 <MX_TIM7_Init+0x68>)
 800177e:	601a      	str	r2, [r3, #0]
  htim7.Init.Prescaler = 0;
 8001780:	4b13      	ldr	r3, [pc, #76]	@ (80017d0 <MX_TIM7_Init+0x64>)
 8001782:	2200      	movs	r2, #0
 8001784:	605a      	str	r2, [r3, #4]
  htim7.Init.CounterMode = TIM_COUNTERMODE_UP;
 8001786:	4b12      	ldr	r3, [pc, #72]	@ (80017d0 <MX_TIM7_Init+0x64>)
 8001788:	2200      	movs	r2, #0
 800178a:	609a      	str	r2, [r3, #8]
  htim7.Init.Period = 65535;
 800178c:	4b10      	ldr	r3, [pc, #64]	@ (80017d0 <MX_TIM7_Init+0x64>)
 800178e:	f64f 72ff 	movw	r2, #65535	@ 0xffff
 8001792:	60da      	str	r2, [r3, #12]
  htim7.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8001794:	4b0e      	ldr	r3, [pc, #56]	@ (80017d0 <MX_TIM7_Init+0x64>)
 8001796:	2200      	movs	r2, #0
 8001798:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim7) != HAL_OK)
 800179a:	480d      	ldr	r0, [pc, #52]	@ (80017d0 <MX_TIM7_Init+0x64>)
 800179c:	f004 f816 	bl	80057cc <HAL_TIM_Base_Init>
 80017a0:	4603      	mov	r3, r0
 80017a2:	2b00      	cmp	r3, #0
 80017a4:	d001      	beq.n	80017aa <MX_TIM7_Init+0x3e>
  {
    Error_Handler();
 80017a6:	f000 f9c5 	bl	8001b34 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 80017aa:	2300      	movs	r3, #0
 80017ac:	603b      	str	r3, [r7, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 80017ae:	2300      	movs	r3, #0
 80017b0:	607b      	str	r3, [r7, #4]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim7, &sMasterConfig) != HAL_OK)
 80017b2:	463b      	mov	r3, r7
 80017b4:	4619      	mov	r1, r3
 80017b6:	4806      	ldr	r0, [pc, #24]	@ (80017d0 <MX_TIM7_Init+0x64>)
 80017b8:	f004 f904 	bl	80059c4 <HAL_TIMEx_MasterConfigSynchronization>
 80017bc:	4603      	mov	r3, r0
 80017be:	2b00      	cmp	r3, #0
 80017c0:	d001      	beq.n	80017c6 <MX_TIM7_Init+0x5a>
  {
    Error_Handler();
 80017c2:	f000 f9b7 	bl	8001b34 <Error_Handler>
  }
  /* USER CODE BEGIN TIM7_Init 2 */

  /* USER CODE END TIM7_Init 2 */

}
 80017c6:	bf00      	nop
 80017c8:	3708      	adds	r7, #8
 80017ca:	46bd      	mov	sp, r7
 80017cc:	bd80      	pop	{r7, pc}
 80017ce:	bf00      	nop
 80017d0:	20025b28 	.word	0x20025b28
 80017d4:	40001400 	.word	0x40001400

080017d8 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 80017d8:	b580      	push	{r7, lr}
 80017da:	b08e      	sub	sp, #56	@ 0x38
 80017dc:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80017de:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 80017e2:	2200      	movs	r2, #0
 80017e4:	601a      	str	r2, [r3, #0]
 80017e6:	605a      	str	r2, [r3, #4]
 80017e8:	609a      	str	r2, [r3, #8]
 80017ea:	60da      	str	r2, [r3, #12]
 80017ec:	611a      	str	r2, [r3, #16]
/* USER CODE BEGIN MX_GPIO_Init_1 */
/* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 80017ee:	2300      	movs	r3, #0
 80017f0:	623b      	str	r3, [r7, #32]
 80017f2:	4bb2      	ldr	r3, [pc, #712]	@ (8001abc <MX_GPIO_Init+0x2e4>)
 80017f4:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80017f6:	4ab1      	ldr	r2, [pc, #708]	@ (8001abc <MX_GPIO_Init+0x2e4>)
 80017f8:	f043 0304 	orr.w	r3, r3, #4
 80017fc:	6313      	str	r3, [r2, #48]	@ 0x30
 80017fe:	4baf      	ldr	r3, [pc, #700]	@ (8001abc <MX_GPIO_Init+0x2e4>)
 8001800:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001802:	f003 0304 	and.w	r3, r3, #4
 8001806:	623b      	str	r3, [r7, #32]
 8001808:	6a3b      	ldr	r3, [r7, #32]
  __HAL_RCC_GPIOF_CLK_ENABLE();
 800180a:	2300      	movs	r3, #0
 800180c:	61fb      	str	r3, [r7, #28]
 800180e:	4bab      	ldr	r3, [pc, #684]	@ (8001abc <MX_GPIO_Init+0x2e4>)
 8001810:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001812:	4aaa      	ldr	r2, [pc, #680]	@ (8001abc <MX_GPIO_Init+0x2e4>)
 8001814:	f043 0320 	orr.w	r3, r3, #32
 8001818:	6313      	str	r3, [r2, #48]	@ 0x30
 800181a:	4ba8      	ldr	r3, [pc, #672]	@ (8001abc <MX_GPIO_Init+0x2e4>)
 800181c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800181e:	f003 0320 	and.w	r3, r3, #32
 8001822:	61fb      	str	r3, [r7, #28]
 8001824:	69fb      	ldr	r3, [r7, #28]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 8001826:	2300      	movs	r3, #0
 8001828:	61bb      	str	r3, [r7, #24]
 800182a:	4ba4      	ldr	r3, [pc, #656]	@ (8001abc <MX_GPIO_Init+0x2e4>)
 800182c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800182e:	4aa3      	ldr	r2, [pc, #652]	@ (8001abc <MX_GPIO_Init+0x2e4>)
 8001830:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8001834:	6313      	str	r3, [r2, #48]	@ 0x30
 8001836:	4ba1      	ldr	r3, [pc, #644]	@ (8001abc <MX_GPIO_Init+0x2e4>)
 8001838:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800183a:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800183e:	61bb      	str	r3, [r7, #24]
 8001840:	69bb      	ldr	r3, [r7, #24]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8001842:	2300      	movs	r3, #0
 8001844:	617b      	str	r3, [r7, #20]
 8001846:	4b9d      	ldr	r3, [pc, #628]	@ (8001abc <MX_GPIO_Init+0x2e4>)
 8001848:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800184a:	4a9c      	ldr	r2, [pc, #624]	@ (8001abc <MX_GPIO_Init+0x2e4>)
 800184c:	f043 0301 	orr.w	r3, r3, #1
 8001850:	6313      	str	r3, [r2, #48]	@ 0x30
 8001852:	4b9a      	ldr	r3, [pc, #616]	@ (8001abc <MX_GPIO_Init+0x2e4>)
 8001854:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001856:	f003 0301 	and.w	r3, r3, #1
 800185a:	617b      	str	r3, [r7, #20]
 800185c:	697b      	ldr	r3, [r7, #20]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 800185e:	2300      	movs	r3, #0
 8001860:	613b      	str	r3, [r7, #16]
 8001862:	4b96      	ldr	r3, [pc, #600]	@ (8001abc <MX_GPIO_Init+0x2e4>)
 8001864:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001866:	4a95      	ldr	r2, [pc, #596]	@ (8001abc <MX_GPIO_Init+0x2e4>)
 8001868:	f043 0302 	orr.w	r3, r3, #2
 800186c:	6313      	str	r3, [r2, #48]	@ 0x30
 800186e:	4b93      	ldr	r3, [pc, #588]	@ (8001abc <MX_GPIO_Init+0x2e4>)
 8001870:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001872:	f003 0302 	and.w	r3, r3, #2
 8001876:	613b      	str	r3, [r7, #16]
 8001878:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOG_CLK_ENABLE();
 800187a:	2300      	movs	r3, #0
 800187c:	60fb      	str	r3, [r7, #12]
 800187e:	4b8f      	ldr	r3, [pc, #572]	@ (8001abc <MX_GPIO_Init+0x2e4>)
 8001880:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001882:	4a8e      	ldr	r2, [pc, #568]	@ (8001abc <MX_GPIO_Init+0x2e4>)
 8001884:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8001888:	6313      	str	r3, [r2, #48]	@ 0x30
 800188a:	4b8c      	ldr	r3, [pc, #560]	@ (8001abc <MX_GPIO_Init+0x2e4>)
 800188c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800188e:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8001892:	60fb      	str	r3, [r7, #12]
 8001894:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOE_CLK_ENABLE();
 8001896:	2300      	movs	r3, #0
 8001898:	60bb      	str	r3, [r7, #8]
 800189a:	4b88      	ldr	r3, [pc, #544]	@ (8001abc <MX_GPIO_Init+0x2e4>)
 800189c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800189e:	4a87      	ldr	r2, [pc, #540]	@ (8001abc <MX_GPIO_Init+0x2e4>)
 80018a0:	f043 0310 	orr.w	r3, r3, #16
 80018a4:	6313      	str	r3, [r2, #48]	@ 0x30
 80018a6:	4b85      	ldr	r3, [pc, #532]	@ (8001abc <MX_GPIO_Init+0x2e4>)
 80018a8:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80018aa:	f003 0310 	and.w	r3, r3, #16
 80018ae:	60bb      	str	r3, [r7, #8]
 80018b0:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 80018b2:	2300      	movs	r3, #0
 80018b4:	607b      	str	r3, [r7, #4]
 80018b6:	4b81      	ldr	r3, [pc, #516]	@ (8001abc <MX_GPIO_Init+0x2e4>)
 80018b8:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80018ba:	4a80      	ldr	r2, [pc, #512]	@ (8001abc <MX_GPIO_Init+0x2e4>)
 80018bc:	f043 0308 	orr.w	r3, r3, #8
 80018c0:	6313      	str	r3, [r2, #48]	@ 0x30
 80018c2:	4b7e      	ldr	r3, [pc, #504]	@ (8001abc <MX_GPIO_Init+0x2e4>)
 80018c4:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80018c6:	f003 0308 	and.w	r3, r3, #8
 80018ca:	607b      	str	r3, [r7, #4]
 80018cc:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOC, NCS_MEMS_SPI_Pin|CSX_Pin|OTG_FS_PSO_Pin, GPIO_PIN_RESET);
 80018ce:	2200      	movs	r2, #0
 80018d0:	2116      	movs	r1, #22
 80018d2:	487b      	ldr	r0, [pc, #492]	@ (8001ac0 <MX_GPIO_Init+0x2e8>)
 80018d4:	f001 fa62 	bl	8002d9c <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(ACP_RST_GPIO_Port, ACP_RST_Pin, GPIO_PIN_RESET);
 80018d8:	2200      	movs	r2, #0
 80018da:	2180      	movs	r1, #128	@ 0x80
 80018dc:	4879      	ldr	r0, [pc, #484]	@ (8001ac4 <MX_GPIO_Init+0x2ec>)
 80018de:	f001 fa5d 	bl	8002d9c <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOD, RDX_Pin|WRX_DCX_Pin, GPIO_PIN_RESET);
 80018e2:	2200      	movs	r2, #0
 80018e4:	f44f 5140 	mov.w	r1, #12288	@ 0x3000
 80018e8:	4877      	ldr	r0, [pc, #476]	@ (8001ac8 <MX_GPIO_Init+0x2f0>)
 80018ea:	f001 fa57 	bl	8002d9c <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOG, LD3_Pin|LD4_Pin, GPIO_PIN_RESET);
 80018ee:	2200      	movs	r2, #0
 80018f0:	f44f 41c0 	mov.w	r1, #24576	@ 0x6000
 80018f4:	4875      	ldr	r0, [pc, #468]	@ (8001acc <MX_GPIO_Init+0x2f4>)
 80018f6:	f001 fa51 	bl	8002d9c <HAL_GPIO_WritePin>

  /*Configure GPIO pins : A0_Pin A1_Pin A2_Pin A3_Pin
                           A4_Pin A5_Pin SDNRAS_Pin A6_Pin
                           A7_Pin A8_Pin A9_Pin */
  GPIO_InitStruct.Pin = A0_Pin|A1_Pin|A2_Pin|A3_Pin
 80018fa:	f64f 033f 	movw	r3, #63551	@ 0xf83f
 80018fe:	627b      	str	r3, [r7, #36]	@ 0x24
                          |A4_Pin|A5_Pin|SDNRAS_Pin|A6_Pin
                          |A7_Pin|A8_Pin|A9_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001900:	2302      	movs	r3, #2
 8001902:	62bb      	str	r3, [r7, #40]	@ 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001904:	2300      	movs	r3, #0
 8001906:	62fb      	str	r3, [r7, #44]	@ 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001908:	2303      	movs	r3, #3
 800190a:	633b      	str	r3, [r7, #48]	@ 0x30
  GPIO_InitStruct.Alternate = GPIO_AF12_FMC;
 800190c:	230c      	movs	r3, #12
 800190e:	637b      	str	r3, [r7, #52]	@ 0x34
  HAL_GPIO_Init(GPIOF, &GPIO_InitStruct);
 8001910:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8001914:	4619      	mov	r1, r3
 8001916:	486e      	ldr	r0, [pc, #440]	@ (8001ad0 <MX_GPIO_Init+0x2f8>)
 8001918:	f000 ff88 	bl	800282c <HAL_GPIO_Init>

  /*Configure GPIO pin : SDNWE_Pin */
  GPIO_InitStruct.Pin = SDNWE_Pin;
 800191c:	2301      	movs	r3, #1
 800191e:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001920:	2302      	movs	r3, #2
 8001922:	62bb      	str	r3, [r7, #40]	@ 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001924:	2300      	movs	r3, #0
 8001926:	62fb      	str	r3, [r7, #44]	@ 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001928:	2303      	movs	r3, #3
 800192a:	633b      	str	r3, [r7, #48]	@ 0x30
  GPIO_InitStruct.Alternate = GPIO_AF12_FMC;
 800192c:	230c      	movs	r3, #12
 800192e:	637b      	str	r3, [r7, #52]	@ 0x34
  HAL_GPIO_Init(SDNWE_GPIO_Port, &GPIO_InitStruct);
 8001930:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8001934:	4619      	mov	r1, r3
 8001936:	4862      	ldr	r0, [pc, #392]	@ (8001ac0 <MX_GPIO_Init+0x2e8>)
 8001938:	f000 ff78 	bl	800282c <HAL_GPIO_Init>

  /*Configure GPIO pins : NCS_MEMS_SPI_Pin CSX_Pin OTG_FS_PSO_Pin */
  GPIO_InitStruct.Pin = NCS_MEMS_SPI_Pin|CSX_Pin|OTG_FS_PSO_Pin;
 800193c:	2316      	movs	r3, #22
 800193e:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001940:	2301      	movs	r3, #1
 8001942:	62bb      	str	r3, [r7, #40]	@ 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001944:	2300      	movs	r3, #0
 8001946:	62fb      	str	r3, [r7, #44]	@ 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001948:	2300      	movs	r3, #0
 800194a:	633b      	str	r3, [r7, #48]	@ 0x30
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 800194c:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8001950:	4619      	mov	r1, r3
 8001952:	485b      	ldr	r0, [pc, #364]	@ (8001ac0 <MX_GPIO_Init+0x2e8>)
 8001954:	f000 ff6a 	bl	800282c <HAL_GPIO_Init>

  /*Configure GPIO pins : B1_Pin MEMS_INT1_Pin MEMS_INT2_Pin TP_INT1_Pin */
  GPIO_InitStruct.Pin = B1_Pin|MEMS_INT1_Pin|MEMS_INT2_Pin|TP_INT1_Pin;
 8001958:	f248 0307 	movw	r3, #32775	@ 0x8007
 800195c:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_EVT_RISING;
 800195e:	f44f 1390 	mov.w	r3, #1179648	@ 0x120000
 8001962:	62bb      	str	r3, [r7, #40]	@ 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001964:	2300      	movs	r3, #0
 8001966:	62fb      	str	r3, [r7, #44]	@ 0x2c
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001968:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 800196c:	4619      	mov	r1, r3
 800196e:	4855      	ldr	r0, [pc, #340]	@ (8001ac4 <MX_GPIO_Init+0x2ec>)
 8001970:	f000 ff5c 	bl	800282c <HAL_GPIO_Init>

  /*Configure GPIO pin : ACP_RST_Pin */
  GPIO_InitStruct.Pin = ACP_RST_Pin;
 8001974:	2380      	movs	r3, #128	@ 0x80
 8001976:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001978:	2301      	movs	r3, #1
 800197a:	62bb      	str	r3, [r7, #40]	@ 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800197c:	2300      	movs	r3, #0
 800197e:	62fb      	str	r3, [r7, #44]	@ 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001980:	2300      	movs	r3, #0
 8001982:	633b      	str	r3, [r7, #48]	@ 0x30
  HAL_GPIO_Init(ACP_RST_GPIO_Port, &GPIO_InitStruct);
 8001984:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8001988:	4619      	mov	r1, r3
 800198a:	484e      	ldr	r0, [pc, #312]	@ (8001ac4 <MX_GPIO_Init+0x2ec>)
 800198c:	f000 ff4e 	bl	800282c <HAL_GPIO_Init>

  /*Configure GPIO pin : OTG_FS_OC_Pin */
  GPIO_InitStruct.Pin = OTG_FS_OC_Pin;
 8001990:	2320      	movs	r3, #32
 8001992:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_EVT_RISING;
 8001994:	f44f 1390 	mov.w	r3, #1179648	@ 0x120000
 8001998:	62bb      	str	r3, [r7, #40]	@ 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800199a:	2300      	movs	r3, #0
 800199c:	62fb      	str	r3, [r7, #44]	@ 0x2c
  HAL_GPIO_Init(OTG_FS_OC_GPIO_Port, &GPIO_InitStruct);
 800199e:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 80019a2:	4619      	mov	r1, r3
 80019a4:	4846      	ldr	r0, [pc, #280]	@ (8001ac0 <MX_GPIO_Init+0x2e8>)
 80019a6:	f000 ff41 	bl	800282c <HAL_GPIO_Init>

  /*Configure GPIO pin : BOOT1_Pin */
  GPIO_InitStruct.Pin = BOOT1_Pin;
 80019aa:	2304      	movs	r3, #4
 80019ac:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 80019ae:	2300      	movs	r3, #0
 80019b0:	62bb      	str	r3, [r7, #40]	@ 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80019b2:	2300      	movs	r3, #0
 80019b4:	62fb      	str	r3, [r7, #44]	@ 0x2c
  HAL_GPIO_Init(BOOT1_GPIO_Port, &GPIO_InitStruct);
 80019b6:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 80019ba:	4619      	mov	r1, r3
 80019bc:	4845      	ldr	r0, [pc, #276]	@ (8001ad4 <MX_GPIO_Init+0x2fc>)
 80019be:	f000 ff35 	bl	800282c <HAL_GPIO_Init>

  /*Configure GPIO pins : A10_Pin A11_Pin BA0_Pin BA1_Pin
                           SDCLK_Pin SDNCAS_Pin */
  GPIO_InitStruct.Pin = A10_Pin|A11_Pin|BA0_Pin|BA1_Pin
 80019c2:	f248 1333 	movw	r3, #33075	@ 0x8133
 80019c6:	627b      	str	r3, [r7, #36]	@ 0x24
                          |SDCLK_Pin|SDNCAS_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80019c8:	2302      	movs	r3, #2
 80019ca:	62bb      	str	r3, [r7, #40]	@ 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80019cc:	2300      	movs	r3, #0
 80019ce:	62fb      	str	r3, [r7, #44]	@ 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80019d0:	2303      	movs	r3, #3
 80019d2:	633b      	str	r3, [r7, #48]	@ 0x30
  GPIO_InitStruct.Alternate = GPIO_AF12_FMC;
 80019d4:	230c      	movs	r3, #12
 80019d6:	637b      	str	r3, [r7, #52]	@ 0x34
  HAL_GPIO_Init(GPIOG, &GPIO_InitStruct);
 80019d8:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 80019dc:	4619      	mov	r1, r3
 80019de:	483b      	ldr	r0, [pc, #236]	@ (8001acc <MX_GPIO_Init+0x2f4>)
 80019e0:	f000 ff24 	bl	800282c <HAL_GPIO_Init>

  /*Configure GPIO pins : D4_Pin D5_Pin D6_Pin D7_Pin
                           D8_Pin D9_Pin D10_Pin D11_Pin
                           D12_Pin NBL0_Pin NBL1_Pin */
  GPIO_InitStruct.Pin = D4_Pin|D5_Pin|D6_Pin|D7_Pin
 80019e4:	f64f 7383 	movw	r3, #65411	@ 0xff83
 80019e8:	627b      	str	r3, [r7, #36]	@ 0x24
                          |D8_Pin|D9_Pin|D10_Pin|D11_Pin
                          |D12_Pin|NBL0_Pin|NBL1_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80019ea:	2302      	movs	r3, #2
 80019ec:	62bb      	str	r3, [r7, #40]	@ 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80019ee:	2300      	movs	r3, #0
 80019f0:	62fb      	str	r3, [r7, #44]	@ 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80019f2:	2303      	movs	r3, #3
 80019f4:	633b      	str	r3, [r7, #48]	@ 0x30
  GPIO_InitStruct.Alternate = GPIO_AF12_FMC;
 80019f6:	230c      	movs	r3, #12
 80019f8:	637b      	str	r3, [r7, #52]	@ 0x34
  HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 80019fa:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 80019fe:	4619      	mov	r1, r3
 8001a00:	4835      	ldr	r0, [pc, #212]	@ (8001ad8 <MX_GPIO_Init+0x300>)
 8001a02:	f000 ff13 	bl	800282c <HAL_GPIO_Init>

  /*Configure GPIO pins : OTG_HS_ID_Pin OTG_HS_DM_Pin OTG_HS_DP_Pin */
  GPIO_InitStruct.Pin = OTG_HS_ID_Pin|OTG_HS_DM_Pin|OTG_HS_DP_Pin;
 8001a06:	f44f 4350 	mov.w	r3, #53248	@ 0xd000
 8001a0a:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001a0c:	2302      	movs	r3, #2
 8001a0e:	62bb      	str	r3, [r7, #40]	@ 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001a10:	2300      	movs	r3, #0
 8001a12:	62fb      	str	r3, [r7, #44]	@ 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001a14:	2300      	movs	r3, #0
 8001a16:	633b      	str	r3, [r7, #48]	@ 0x30
  GPIO_InitStruct.Alternate = GPIO_AF12_OTG_HS_FS;
 8001a18:	230c      	movs	r3, #12
 8001a1a:	637b      	str	r3, [r7, #52]	@ 0x34
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001a1c:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8001a20:	4619      	mov	r1, r3
 8001a22:	482c      	ldr	r0, [pc, #176]	@ (8001ad4 <MX_GPIO_Init+0x2fc>)
 8001a24:	f000 ff02 	bl	800282c <HAL_GPIO_Init>

  /*Configure GPIO pin : VBUS_HS_Pin */
  GPIO_InitStruct.Pin = VBUS_HS_Pin;
 8001a28:	f44f 5300 	mov.w	r3, #8192	@ 0x2000
 8001a2c:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8001a2e:	2300      	movs	r3, #0
 8001a30:	62bb      	str	r3, [r7, #40]	@ 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001a32:	2300      	movs	r3, #0
 8001a34:	62fb      	str	r3, [r7, #44]	@ 0x2c
  HAL_GPIO_Init(VBUS_HS_GPIO_Port, &GPIO_InitStruct);
 8001a36:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8001a3a:	4619      	mov	r1, r3
 8001a3c:	4825      	ldr	r0, [pc, #148]	@ (8001ad4 <MX_GPIO_Init+0x2fc>)
 8001a3e:	f000 fef5 	bl	800282c <HAL_GPIO_Init>

  /*Configure GPIO pins : D13_Pin D14_Pin D15_Pin D0_Pin
                           D1_Pin D2_Pin D3_Pin */
  GPIO_InitStruct.Pin = D13_Pin|D14_Pin|D15_Pin|D0_Pin
 8001a42:	f24c 7303 	movw	r3, #50947	@ 0xc703
 8001a46:	627b      	str	r3, [r7, #36]	@ 0x24
                          |D1_Pin|D2_Pin|D3_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001a48:	2302      	movs	r3, #2
 8001a4a:	62bb      	str	r3, [r7, #40]	@ 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001a4c:	2300      	movs	r3, #0
 8001a4e:	62fb      	str	r3, [r7, #44]	@ 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001a50:	2303      	movs	r3, #3
 8001a52:	633b      	str	r3, [r7, #48]	@ 0x30
  GPIO_InitStruct.Alternate = GPIO_AF12_FMC;
 8001a54:	230c      	movs	r3, #12
 8001a56:	637b      	str	r3, [r7, #52]	@ 0x34
  HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8001a58:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8001a5c:	4619      	mov	r1, r3
 8001a5e:	481a      	ldr	r0, [pc, #104]	@ (8001ac8 <MX_GPIO_Init+0x2f0>)
 8001a60:	f000 fee4 	bl	800282c <HAL_GPIO_Init>

  /*Configure GPIO pin : TE_Pin */
  GPIO_InitStruct.Pin = TE_Pin;
 8001a64:	f44f 6300 	mov.w	r3, #2048	@ 0x800
 8001a68:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8001a6a:	2300      	movs	r3, #0
 8001a6c:	62bb      	str	r3, [r7, #40]	@ 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001a6e:	2300      	movs	r3, #0
 8001a70:	62fb      	str	r3, [r7, #44]	@ 0x2c
  HAL_GPIO_Init(TE_GPIO_Port, &GPIO_InitStruct);
 8001a72:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8001a76:	4619      	mov	r1, r3
 8001a78:	4813      	ldr	r0, [pc, #76]	@ (8001ac8 <MX_GPIO_Init+0x2f0>)
 8001a7a:	f000 fed7 	bl	800282c <HAL_GPIO_Init>

  /*Configure GPIO pins : RDX_Pin WRX_DCX_Pin */
  GPIO_InitStruct.Pin = RDX_Pin|WRX_DCX_Pin;
 8001a7e:	f44f 5340 	mov.w	r3, #12288	@ 0x3000
 8001a82:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001a84:	2301      	movs	r3, #1
 8001a86:	62bb      	str	r3, [r7, #40]	@ 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001a88:	2300      	movs	r3, #0
 8001a8a:	62fb      	str	r3, [r7, #44]	@ 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001a8c:	2300      	movs	r3, #0
 8001a8e:	633b      	str	r3, [r7, #48]	@ 0x30
  HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8001a90:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8001a94:	4619      	mov	r1, r3
 8001a96:	480c      	ldr	r0, [pc, #48]	@ (8001ac8 <MX_GPIO_Init+0x2f0>)
 8001a98:	f000 fec8 	bl	800282c <HAL_GPIO_Init>

  /*Configure GPIO pins : STLINK_RX_Pin STLINK_TX_Pin */
  GPIO_InitStruct.Pin = STLINK_RX_Pin|STLINK_TX_Pin;
 8001a9c:	f44f 63c0 	mov.w	r3, #1536	@ 0x600
 8001aa0:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001aa2:	2302      	movs	r3, #2
 8001aa4:	62bb      	str	r3, [r7, #40]	@ 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001aa6:	2300      	movs	r3, #0
 8001aa8:	62fb      	str	r3, [r7, #44]	@ 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001aaa:	2303      	movs	r3, #3
 8001aac:	633b      	str	r3, [r7, #48]	@ 0x30
  GPIO_InitStruct.Alternate = GPIO_AF7_USART1;
 8001aae:	2307      	movs	r3, #7
 8001ab0:	637b      	str	r3, [r7, #52]	@ 0x34
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001ab2:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8001ab6:	4619      	mov	r1, r3
 8001ab8:	e010      	b.n	8001adc <MX_GPIO_Init+0x304>
 8001aba:	bf00      	nop
 8001abc:	40023800 	.word	0x40023800
 8001ac0:	40020800 	.word	0x40020800
 8001ac4:	40020000 	.word	0x40020000
 8001ac8:	40020c00 	.word	0x40020c00
 8001acc:	40021800 	.word	0x40021800
 8001ad0:	40021400 	.word	0x40021400
 8001ad4:	40020400 	.word	0x40020400
 8001ad8:	40021000 	.word	0x40021000
 8001adc:	4812      	ldr	r0, [pc, #72]	@ (8001b28 <MX_GPIO_Init+0x350>)
 8001ade:	f000 fea5 	bl	800282c <HAL_GPIO_Init>

  /*Configure GPIO pins : LD3_Pin LD4_Pin */
  GPIO_InitStruct.Pin = LD3_Pin|LD4_Pin;
 8001ae2:	f44f 43c0 	mov.w	r3, #24576	@ 0x6000
 8001ae6:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001ae8:	2301      	movs	r3, #1
 8001aea:	62bb      	str	r3, [r7, #40]	@ 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001aec:	2300      	movs	r3, #0
 8001aee:	62fb      	str	r3, [r7, #44]	@ 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001af0:	2300      	movs	r3, #0
 8001af2:	633b      	str	r3, [r7, #48]	@ 0x30
  HAL_GPIO_Init(GPIOG, &GPIO_InitStruct);
 8001af4:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8001af8:	4619      	mov	r1, r3
 8001afa:	480c      	ldr	r0, [pc, #48]	@ (8001b2c <MX_GPIO_Init+0x354>)
 8001afc:	f000 fe96 	bl	800282c <HAL_GPIO_Init>

  /*Configure GPIO pins : SDCKE1_Pin SDNE1_Pin */
  GPIO_InitStruct.Pin = SDCKE1_Pin|SDNE1_Pin;
 8001b00:	2360      	movs	r3, #96	@ 0x60
 8001b02:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001b04:	2302      	movs	r3, #2
 8001b06:	62bb      	str	r3, [r7, #40]	@ 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001b08:	2300      	movs	r3, #0
 8001b0a:	62fb      	str	r3, [r7, #44]	@ 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001b0c:	2303      	movs	r3, #3
 8001b0e:	633b      	str	r3, [r7, #48]	@ 0x30
  GPIO_InitStruct.Alternate = GPIO_AF12_FMC;
 8001b10:	230c      	movs	r3, #12
 8001b12:	637b      	str	r3, [r7, #52]	@ 0x34
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001b14:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8001b18:	4619      	mov	r1, r3
 8001b1a:	4805      	ldr	r0, [pc, #20]	@ (8001b30 <MX_GPIO_Init+0x358>)
 8001b1c:	f000 fe86 	bl	800282c <HAL_GPIO_Init>

/* USER CODE BEGIN MX_GPIO_Init_2 */
/* USER CODE END MX_GPIO_Init_2 */
}
 8001b20:	bf00      	nop
 8001b22:	3738      	adds	r7, #56	@ 0x38
 8001b24:	46bd      	mov	sp, r7
 8001b26:	bd80      	pop	{r7, pc}
 8001b28:	40020000 	.word	0x40020000
 8001b2c:	40021800 	.word	0x40021800
 8001b30:	40020400 	.word	0x40020400

08001b34 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8001b34:	b480      	push	{r7}
 8001b36:	af00      	add	r7, sp, #0
  __ASM volatile ("cpsid i" : : : "memory");
 8001b38:	b672      	cpsid	i
}
 8001b3a:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8001b3c:	bf00      	nop
 8001b3e:	e7fd      	b.n	8001b3c <Error_Handler+0x8>

08001b40 <SystemClockOverride>:
  }
  /* USER CODE END Error_Handler_Debug */
}

void SystemClockOverride(void)
{
 8001b40:	b580      	push	{r7, lr}
 8001b42:	b092      	sub	sp, #72	@ 0x48
 8001b44:	af00      	add	r7, sp, #0
  RCC_ClkInitTypeDef RCC_ClkInitStruct;
  RCC_OscInitTypeDef RCC_OscInitStruct;

  __HAL_RCC_PWR_CLK_ENABLE();
 8001b46:	2300      	movs	r3, #0
 8001b48:	603b      	str	r3, [r7, #0]
 8001b4a:	4b1c      	ldr	r3, [pc, #112]	@ (8001bbc <SystemClockOverride+0x7c>)
 8001b4c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001b4e:	4a1b      	ldr	r2, [pc, #108]	@ (8001bbc <SystemClockOverride+0x7c>)
 8001b50:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8001b54:	6413      	str	r3, [r2, #64]	@ 0x40
 8001b56:	4b19      	ldr	r3, [pc, #100]	@ (8001bbc <SystemClockOverride+0x7c>)
 8001b58:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001b5a:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8001b5e:	603b      	str	r3, [r7, #0]
 8001b60:	683b      	ldr	r3, [r7, #0]

  // __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1); // not needed, power scaling consumption for when not running at max freq.

  /* Enable HSE Osc and activate PLL with HSE source */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 8001b62:	2301      	movs	r3, #1
 8001b64:	607b      	str	r3, [r7, #4]
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 8001b66:	f44f 3380 	mov.w	r3, #65536	@ 0x10000
 8001b6a:	60bb      	str	r3, [r7, #8]
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8001b6c:	2302      	movs	r3, #2
 8001b6e:	61fb      	str	r3, [r7, #28]
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 8001b70:	f44f 0380 	mov.w	r3, #4194304	@ 0x400000
 8001b74:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.PLL.PLLM = 8;
 8001b76:	2308      	movs	r3, #8
 8001b78:	627b      	str	r3, [r7, #36]	@ 0x24
  RCC_OscInitStruct.PLL.PLLN = 336;
 8001b7a:	f44f 73a8 	mov.w	r3, #336	@ 0x150
 8001b7e:	62bb      	str	r3, [r7, #40]	@ 0x28
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 8001b80:	2302      	movs	r3, #2
 8001b82:	62fb      	str	r3, [r7, #44]	@ 0x2c
  RCC_OscInitStruct.PLL.PLLQ = 7;
 8001b84:	2307      	movs	r3, #7
 8001b86:	633b      	str	r3, [r7, #48]	@ 0x30
  HAL_RCC_OscConfig(&RCC_OscInitStruct);
 8001b88:	1d3b      	adds	r3, r7, #4
 8001b8a:	4618      	mov	r0, r3
 8001b8c:	f002 fc66 	bl	800445c <HAL_RCC_OscConfig>

  /* Select PLL as system clock source and configure the HCLK, PCLK1 and PCLK2 clocks dividers */
  RCC_ClkInitStruct.ClockType = (RCC_CLOCKTYPE_SYSCLK | RCC_CLOCKTYPE_HCLK | RCC_CLOCKTYPE_PCLK1 | RCC_CLOCKTYPE_PCLK2);
 8001b90:	230f      	movs	r3, #15
 8001b92:	637b      	str	r3, [r7, #52]	@ 0x34
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8001b94:	2302      	movs	r3, #2
 8001b96:	63bb      	str	r3, [r7, #56]	@ 0x38
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8001b98:	2300      	movs	r3, #0
 8001b9a:	63fb      	str	r3, [r7, #60]	@ 0x3c
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV4;
 8001b9c:	f44f 53a0 	mov.w	r3, #5120	@ 0x1400
 8001ba0:	643b      	str	r3, [r7, #64]	@ 0x40
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV2;
 8001ba2:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 8001ba6:	647b      	str	r3, [r7, #68]	@ 0x44
  HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_5);
 8001ba8:	f107 0334 	add.w	r3, r7, #52	@ 0x34
 8001bac:	2105      	movs	r1, #5
 8001bae:	4618      	mov	r0, r3
 8001bb0:	f002 fecc 	bl	800494c <HAL_RCC_ClockConfig>
}
 8001bb4:	bf00      	nop
 8001bb6:	3748      	adds	r7, #72	@ 0x48
 8001bb8:	46bd      	mov	sp, r7
 8001bba:	bd80      	pop	{r7, pc}
 8001bbc:	40023800 	.word	0x40023800

08001bc0 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8001bc0:	b580      	push	{r7, lr}
 8001bc2:	b082      	sub	sp, #8
 8001bc4:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8001bc6:	2300      	movs	r3, #0
 8001bc8:	607b      	str	r3, [r7, #4]
 8001bca:	4b10      	ldr	r3, [pc, #64]	@ (8001c0c <HAL_MspInit+0x4c>)
 8001bcc:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8001bce:	4a0f      	ldr	r2, [pc, #60]	@ (8001c0c <HAL_MspInit+0x4c>)
 8001bd0:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 8001bd4:	6453      	str	r3, [r2, #68]	@ 0x44
 8001bd6:	4b0d      	ldr	r3, [pc, #52]	@ (8001c0c <HAL_MspInit+0x4c>)
 8001bd8:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8001bda:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8001bde:	607b      	str	r3, [r7, #4]
 8001be0:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8001be2:	2300      	movs	r3, #0
 8001be4:	603b      	str	r3, [r7, #0]
 8001be6:	4b09      	ldr	r3, [pc, #36]	@ (8001c0c <HAL_MspInit+0x4c>)
 8001be8:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001bea:	4a08      	ldr	r2, [pc, #32]	@ (8001c0c <HAL_MspInit+0x4c>)
 8001bec:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8001bf0:	6413      	str	r3, [r2, #64]	@ 0x40
 8001bf2:	4b06      	ldr	r3, [pc, #24]	@ (8001c0c <HAL_MspInit+0x4c>)
 8001bf4:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001bf6:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8001bfa:	603b      	str	r3, [r7, #0]
 8001bfc:	683b      	ldr	r3, [r7, #0]

  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_0);
 8001bfe:	2007      	movs	r0, #7
 8001c00:	f000 fde0 	bl	80027c4 <HAL_NVIC_SetPriorityGrouping>
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8001c04:	bf00      	nop
 8001c06:	3708      	adds	r7, #8
 8001c08:	46bd      	mov	sp, r7
 8001c0a:	bd80      	pop	{r7, pc}
 8001c0c:	40023800 	.word	0x40023800

08001c10 <HAL_I2C_MspInit>:
* This function configures the hardware resources used in this example
* @param hi2c: I2C handle pointer
* @retval None
*/
void HAL_I2C_MspInit(I2C_HandleTypeDef* hi2c)
{
 8001c10:	b580      	push	{r7, lr}
 8001c12:	b08a      	sub	sp, #40	@ 0x28
 8001c14:	af00      	add	r7, sp, #0
 8001c16:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001c18:	f107 0314 	add.w	r3, r7, #20
 8001c1c:	2200      	movs	r2, #0
 8001c1e:	601a      	str	r2, [r3, #0]
 8001c20:	605a      	str	r2, [r3, #4]
 8001c22:	609a      	str	r2, [r3, #8]
 8001c24:	60da      	str	r2, [r3, #12]
 8001c26:	611a      	str	r2, [r3, #16]
  if(hi2c->Instance==I2C3)
 8001c28:	687b      	ldr	r3, [r7, #4]
 8001c2a:	681b      	ldr	r3, [r3, #0]
 8001c2c:	4a29      	ldr	r2, [pc, #164]	@ (8001cd4 <HAL_I2C_MspInit+0xc4>)
 8001c2e:	4293      	cmp	r3, r2
 8001c30:	d14b      	bne.n	8001cca <HAL_I2C_MspInit+0xba>
  {
  /* USER CODE BEGIN I2C3_MspInit 0 */

  /* USER CODE END I2C3_MspInit 0 */

    __HAL_RCC_GPIOC_CLK_ENABLE();
 8001c32:	2300      	movs	r3, #0
 8001c34:	613b      	str	r3, [r7, #16]
 8001c36:	4b28      	ldr	r3, [pc, #160]	@ (8001cd8 <HAL_I2C_MspInit+0xc8>)
 8001c38:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001c3a:	4a27      	ldr	r2, [pc, #156]	@ (8001cd8 <HAL_I2C_MspInit+0xc8>)
 8001c3c:	f043 0304 	orr.w	r3, r3, #4
 8001c40:	6313      	str	r3, [r2, #48]	@ 0x30
 8001c42:	4b25      	ldr	r3, [pc, #148]	@ (8001cd8 <HAL_I2C_MspInit+0xc8>)
 8001c44:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001c46:	f003 0304 	and.w	r3, r3, #4
 8001c4a:	613b      	str	r3, [r7, #16]
 8001c4c:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001c4e:	2300      	movs	r3, #0
 8001c50:	60fb      	str	r3, [r7, #12]
 8001c52:	4b21      	ldr	r3, [pc, #132]	@ (8001cd8 <HAL_I2C_MspInit+0xc8>)
 8001c54:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001c56:	4a20      	ldr	r2, [pc, #128]	@ (8001cd8 <HAL_I2C_MspInit+0xc8>)
 8001c58:	f043 0301 	orr.w	r3, r3, #1
 8001c5c:	6313      	str	r3, [r2, #48]	@ 0x30
 8001c5e:	4b1e      	ldr	r3, [pc, #120]	@ (8001cd8 <HAL_I2C_MspInit+0xc8>)
 8001c60:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001c62:	f003 0301 	and.w	r3, r3, #1
 8001c66:	60fb      	str	r3, [r7, #12]
 8001c68:	68fb      	ldr	r3, [r7, #12]
    /**I2C3 GPIO Configuration
    PC9     ------> I2C3_SDA
    PA8     ------> I2C3_SCL
    */
    GPIO_InitStruct.Pin = I2C3_SDA_Pin;
 8001c6a:	f44f 7300 	mov.w	r3, #512	@ 0x200
 8001c6e:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8001c70:	2312      	movs	r3, #18
 8001c72:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001c74:	2300      	movs	r3, #0
 8001c76:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001c78:	2300      	movs	r3, #0
 8001c7a:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C3;
 8001c7c:	2304      	movs	r3, #4
 8001c7e:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(I2C3_SDA_GPIO_Port, &GPIO_InitStruct);
 8001c80:	f107 0314 	add.w	r3, r7, #20
 8001c84:	4619      	mov	r1, r3
 8001c86:	4815      	ldr	r0, [pc, #84]	@ (8001cdc <HAL_I2C_MspInit+0xcc>)
 8001c88:	f000 fdd0 	bl	800282c <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = I2C3_SCL_Pin;
 8001c8c:	f44f 7380 	mov.w	r3, #256	@ 0x100
 8001c90:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8001c92:	2312      	movs	r3, #18
 8001c94:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001c96:	2300      	movs	r3, #0
 8001c98:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001c9a:	2300      	movs	r3, #0
 8001c9c:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C3;
 8001c9e:	2304      	movs	r3, #4
 8001ca0:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(I2C3_SCL_GPIO_Port, &GPIO_InitStruct);
 8001ca2:	f107 0314 	add.w	r3, r7, #20
 8001ca6:	4619      	mov	r1, r3
 8001ca8:	480d      	ldr	r0, [pc, #52]	@ (8001ce0 <HAL_I2C_MspInit+0xd0>)
 8001caa:	f000 fdbf 	bl	800282c <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_I2C3_CLK_ENABLE();
 8001cae:	2300      	movs	r3, #0
 8001cb0:	60bb      	str	r3, [r7, #8]
 8001cb2:	4b09      	ldr	r3, [pc, #36]	@ (8001cd8 <HAL_I2C_MspInit+0xc8>)
 8001cb4:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001cb6:	4a08      	ldr	r2, [pc, #32]	@ (8001cd8 <HAL_I2C_MspInit+0xc8>)
 8001cb8:	f443 0300 	orr.w	r3, r3, #8388608	@ 0x800000
 8001cbc:	6413      	str	r3, [r2, #64]	@ 0x40
 8001cbe:	4b06      	ldr	r3, [pc, #24]	@ (8001cd8 <HAL_I2C_MspInit+0xc8>)
 8001cc0:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001cc2:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 8001cc6:	60bb      	str	r3, [r7, #8]
 8001cc8:	68bb      	ldr	r3, [r7, #8]

  /* USER CODE END I2C3_MspInit 1 */

  }

}
 8001cca:	bf00      	nop
 8001ccc:	3728      	adds	r7, #40	@ 0x28
 8001cce:	46bd      	mov	sp, r7
 8001cd0:	bd80      	pop	{r7, pc}
 8001cd2:	bf00      	nop
 8001cd4:	40005c00 	.word	0x40005c00
 8001cd8:	40023800 	.word	0x40023800
 8001cdc:	40020800 	.word	0x40020800
 8001ce0:	40020000 	.word	0x40020000

08001ce4 <HAL_LTDC_MspInit>:
* This function configures the hardware resources used in this example
* @param hltdc: LTDC handle pointer
* @retval None
*/
void HAL_LTDC_MspInit(LTDC_HandleTypeDef* hltdc)
{
 8001ce4:	b580      	push	{r7, lr}
 8001ce6:	b09a      	sub	sp, #104	@ 0x68
 8001ce8:	af00      	add	r7, sp, #0
 8001cea:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001cec:	f107 0354 	add.w	r3, r7, #84	@ 0x54
 8001cf0:	2200      	movs	r2, #0
 8001cf2:	601a      	str	r2, [r3, #0]
 8001cf4:	605a      	str	r2, [r3, #4]
 8001cf6:	609a      	str	r2, [r3, #8]
 8001cf8:	60da      	str	r2, [r3, #12]
 8001cfa:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 8001cfc:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8001d00:	2230      	movs	r2, #48	@ 0x30
 8001d02:	2100      	movs	r1, #0
 8001d04:	4618      	mov	r0, r3
 8001d06:	f003 fed9 	bl	8005abc <memset>
  if(hltdc->Instance==LTDC)
 8001d0a:	687b      	ldr	r3, [r7, #4]
 8001d0c:	681b      	ldr	r3, [r3, #0]
 8001d0e:	4a81      	ldr	r2, [pc, #516]	@ (8001f14 <HAL_LTDC_MspInit+0x230>)
 8001d10:	4293      	cmp	r3, r2
 8001d12:	f040 80fa 	bne.w	8001f0a <HAL_LTDC_MspInit+0x226>

  /* USER CODE END LTDC_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_LTDC;
 8001d16:	2308      	movs	r3, #8
 8001d18:	627b      	str	r3, [r7, #36]	@ 0x24
    PeriphClkInitStruct.PLLSAI.PLLSAIN = 50;
 8001d1a:	2332      	movs	r3, #50	@ 0x32
 8001d1c:	637b      	str	r3, [r7, #52]	@ 0x34
    PeriphClkInitStruct.PLLSAI.PLLSAIR = 2;
 8001d1e:	2302      	movs	r3, #2
 8001d20:	63fb      	str	r3, [r7, #60]	@ 0x3c
    PeriphClkInitStruct.PLLSAIDivR = RCC_PLLSAIDIVR_2;
 8001d22:	2300      	movs	r3, #0
 8001d24:	64bb      	str	r3, [r7, #72]	@ 0x48
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8001d26:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8001d2a:	4618      	mov	r0, r3
 8001d2c:	f003 f81a 	bl	8004d64 <HAL_RCCEx_PeriphCLKConfig>
 8001d30:	4603      	mov	r3, r0
 8001d32:	2b00      	cmp	r3, #0
 8001d34:	d001      	beq.n	8001d3a <HAL_LTDC_MspInit+0x56>
    {
      Error_Handler();
 8001d36:	f7ff fefd 	bl	8001b34 <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_LTDC_CLK_ENABLE();
 8001d3a:	2300      	movs	r3, #0
 8001d3c:	623b      	str	r3, [r7, #32]
 8001d3e:	4b76      	ldr	r3, [pc, #472]	@ (8001f18 <HAL_LTDC_MspInit+0x234>)
 8001d40:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8001d42:	4a75      	ldr	r2, [pc, #468]	@ (8001f18 <HAL_LTDC_MspInit+0x234>)
 8001d44:	f043 6380 	orr.w	r3, r3, #67108864	@ 0x4000000
 8001d48:	6453      	str	r3, [r2, #68]	@ 0x44
 8001d4a:	4b73      	ldr	r3, [pc, #460]	@ (8001f18 <HAL_LTDC_MspInit+0x234>)
 8001d4c:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8001d4e:	f003 6380 	and.w	r3, r3, #67108864	@ 0x4000000
 8001d52:	623b      	str	r3, [r7, #32]
 8001d54:	6a3b      	ldr	r3, [r7, #32]

    __HAL_RCC_GPIOF_CLK_ENABLE();
 8001d56:	2300      	movs	r3, #0
 8001d58:	61fb      	str	r3, [r7, #28]
 8001d5a:	4b6f      	ldr	r3, [pc, #444]	@ (8001f18 <HAL_LTDC_MspInit+0x234>)
 8001d5c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001d5e:	4a6e      	ldr	r2, [pc, #440]	@ (8001f18 <HAL_LTDC_MspInit+0x234>)
 8001d60:	f043 0320 	orr.w	r3, r3, #32
 8001d64:	6313      	str	r3, [r2, #48]	@ 0x30
 8001d66:	4b6c      	ldr	r3, [pc, #432]	@ (8001f18 <HAL_LTDC_MspInit+0x234>)
 8001d68:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001d6a:	f003 0320 	and.w	r3, r3, #32
 8001d6e:	61fb      	str	r3, [r7, #28]
 8001d70:	69fb      	ldr	r3, [r7, #28]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001d72:	2300      	movs	r3, #0
 8001d74:	61bb      	str	r3, [r7, #24]
 8001d76:	4b68      	ldr	r3, [pc, #416]	@ (8001f18 <HAL_LTDC_MspInit+0x234>)
 8001d78:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001d7a:	4a67      	ldr	r2, [pc, #412]	@ (8001f18 <HAL_LTDC_MspInit+0x234>)
 8001d7c:	f043 0301 	orr.w	r3, r3, #1
 8001d80:	6313      	str	r3, [r2, #48]	@ 0x30
 8001d82:	4b65      	ldr	r3, [pc, #404]	@ (8001f18 <HAL_LTDC_MspInit+0x234>)
 8001d84:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001d86:	f003 0301 	and.w	r3, r3, #1
 8001d8a:	61bb      	str	r3, [r7, #24]
 8001d8c:	69bb      	ldr	r3, [r7, #24]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8001d8e:	2300      	movs	r3, #0
 8001d90:	617b      	str	r3, [r7, #20]
 8001d92:	4b61      	ldr	r3, [pc, #388]	@ (8001f18 <HAL_LTDC_MspInit+0x234>)
 8001d94:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001d96:	4a60      	ldr	r2, [pc, #384]	@ (8001f18 <HAL_LTDC_MspInit+0x234>)
 8001d98:	f043 0302 	orr.w	r3, r3, #2
 8001d9c:	6313      	str	r3, [r2, #48]	@ 0x30
 8001d9e:	4b5e      	ldr	r3, [pc, #376]	@ (8001f18 <HAL_LTDC_MspInit+0x234>)
 8001da0:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001da2:	f003 0302 	and.w	r3, r3, #2
 8001da6:	617b      	str	r3, [r7, #20]
 8001da8:	697b      	ldr	r3, [r7, #20]
    __HAL_RCC_GPIOG_CLK_ENABLE();
 8001daa:	2300      	movs	r3, #0
 8001dac:	613b      	str	r3, [r7, #16]
 8001dae:	4b5a      	ldr	r3, [pc, #360]	@ (8001f18 <HAL_LTDC_MspInit+0x234>)
 8001db0:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001db2:	4a59      	ldr	r2, [pc, #356]	@ (8001f18 <HAL_LTDC_MspInit+0x234>)
 8001db4:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8001db8:	6313      	str	r3, [r2, #48]	@ 0x30
 8001dba:	4b57      	ldr	r3, [pc, #348]	@ (8001f18 <HAL_LTDC_MspInit+0x234>)
 8001dbc:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001dbe:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8001dc2:	613b      	str	r3, [r7, #16]
 8001dc4:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOC_CLK_ENABLE();
 8001dc6:	2300      	movs	r3, #0
 8001dc8:	60fb      	str	r3, [r7, #12]
 8001dca:	4b53      	ldr	r3, [pc, #332]	@ (8001f18 <HAL_LTDC_MspInit+0x234>)
 8001dcc:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001dce:	4a52      	ldr	r2, [pc, #328]	@ (8001f18 <HAL_LTDC_MspInit+0x234>)
 8001dd0:	f043 0304 	orr.w	r3, r3, #4
 8001dd4:	6313      	str	r3, [r2, #48]	@ 0x30
 8001dd6:	4b50      	ldr	r3, [pc, #320]	@ (8001f18 <HAL_LTDC_MspInit+0x234>)
 8001dd8:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001dda:	f003 0304 	and.w	r3, r3, #4
 8001dde:	60fb      	str	r3, [r7, #12]
 8001de0:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOD_CLK_ENABLE();
 8001de2:	2300      	movs	r3, #0
 8001de4:	60bb      	str	r3, [r7, #8]
 8001de6:	4b4c      	ldr	r3, [pc, #304]	@ (8001f18 <HAL_LTDC_MspInit+0x234>)
 8001de8:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001dea:	4a4b      	ldr	r2, [pc, #300]	@ (8001f18 <HAL_LTDC_MspInit+0x234>)
 8001dec:	f043 0308 	orr.w	r3, r3, #8
 8001df0:	6313      	str	r3, [r2, #48]	@ 0x30
 8001df2:	4b49      	ldr	r3, [pc, #292]	@ (8001f18 <HAL_LTDC_MspInit+0x234>)
 8001df4:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001df6:	f003 0308 	and.w	r3, r3, #8
 8001dfa:	60bb      	str	r3, [r7, #8]
 8001dfc:	68bb      	ldr	r3, [r7, #8]
    PG11     ------> LTDC_B3
    PG12     ------> LTDC_B4
    PB8     ------> LTDC_B6
    PB9     ------> LTDC_B7
    */
    GPIO_InitStruct.Pin = ENABLE_Pin;
 8001dfe:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 8001e02:	657b      	str	r3, [r7, #84]	@ 0x54
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001e04:	2302      	movs	r3, #2
 8001e06:	65bb      	str	r3, [r7, #88]	@ 0x58
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001e08:	2300      	movs	r3, #0
 8001e0a:	65fb      	str	r3, [r7, #92]	@ 0x5c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001e0c:	2300      	movs	r3, #0
 8001e0e:	663b      	str	r3, [r7, #96]	@ 0x60
    GPIO_InitStruct.Alternate = GPIO_AF14_LTDC;
 8001e10:	230e      	movs	r3, #14
 8001e12:	667b      	str	r3, [r7, #100]	@ 0x64
    HAL_GPIO_Init(ENABLE_GPIO_Port, &GPIO_InitStruct);
 8001e14:	f107 0354 	add.w	r3, r7, #84	@ 0x54
 8001e18:	4619      	mov	r1, r3
 8001e1a:	4840      	ldr	r0, [pc, #256]	@ (8001f1c <HAL_LTDC_MspInit+0x238>)
 8001e1c:	f000 fd06 	bl	800282c <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = B5_Pin|VSYNC_Pin|G2_Pin|R4_Pin
 8001e20:	f641 0358 	movw	r3, #6232	@ 0x1858
 8001e24:	657b      	str	r3, [r7, #84]	@ 0x54
                          |R5_Pin;
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001e26:	2302      	movs	r3, #2
 8001e28:	65bb      	str	r3, [r7, #88]	@ 0x58
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001e2a:	2300      	movs	r3, #0
 8001e2c:	65fb      	str	r3, [r7, #92]	@ 0x5c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001e2e:	2300      	movs	r3, #0
 8001e30:	663b      	str	r3, [r7, #96]	@ 0x60
    GPIO_InitStruct.Alternate = GPIO_AF14_LTDC;
 8001e32:	230e      	movs	r3, #14
 8001e34:	667b      	str	r3, [r7, #100]	@ 0x64
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001e36:	f107 0354 	add.w	r3, r7, #84	@ 0x54
 8001e3a:	4619      	mov	r1, r3
 8001e3c:	4838      	ldr	r0, [pc, #224]	@ (8001f20 <HAL_LTDC_MspInit+0x23c>)
 8001e3e:	f000 fcf5 	bl	800282c <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = R3_Pin|R6_Pin;
 8001e42:	2303      	movs	r3, #3
 8001e44:	657b      	str	r3, [r7, #84]	@ 0x54
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001e46:	2302      	movs	r3, #2
 8001e48:	65bb      	str	r3, [r7, #88]	@ 0x58
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001e4a:	2300      	movs	r3, #0
 8001e4c:	65fb      	str	r3, [r7, #92]	@ 0x5c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001e4e:	2300      	movs	r3, #0
 8001e50:	663b      	str	r3, [r7, #96]	@ 0x60
    GPIO_InitStruct.Alternate = GPIO_AF9_LTDC;
 8001e52:	2309      	movs	r3, #9
 8001e54:	667b      	str	r3, [r7, #100]	@ 0x64
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001e56:	f107 0354 	add.w	r3, r7, #84	@ 0x54
 8001e5a:	4619      	mov	r1, r3
 8001e5c:	4831      	ldr	r0, [pc, #196]	@ (8001f24 <HAL_LTDC_MspInit+0x240>)
 8001e5e:	f000 fce5 	bl	800282c <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = G4_Pin|G5_Pin|B6_Pin|B7_Pin;
 8001e62:	f44f 6370 	mov.w	r3, #3840	@ 0xf00
 8001e66:	657b      	str	r3, [r7, #84]	@ 0x54
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001e68:	2302      	movs	r3, #2
 8001e6a:	65bb      	str	r3, [r7, #88]	@ 0x58
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001e6c:	2300      	movs	r3, #0
 8001e6e:	65fb      	str	r3, [r7, #92]	@ 0x5c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001e70:	2300      	movs	r3, #0
 8001e72:	663b      	str	r3, [r7, #96]	@ 0x60
    GPIO_InitStruct.Alternate = GPIO_AF14_LTDC;
 8001e74:	230e      	movs	r3, #14
 8001e76:	667b      	str	r3, [r7, #100]	@ 0x64
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001e78:	f107 0354 	add.w	r3, r7, #84	@ 0x54
 8001e7c:	4619      	mov	r1, r3
 8001e7e:	4829      	ldr	r0, [pc, #164]	@ (8001f24 <HAL_LTDC_MspInit+0x240>)
 8001e80:	f000 fcd4 	bl	800282c <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = R7_Pin|DOTCLK_Pin|B3_Pin;
 8001e84:	f44f 630c 	mov.w	r3, #2240	@ 0x8c0
 8001e88:	657b      	str	r3, [r7, #84]	@ 0x54
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001e8a:	2302      	movs	r3, #2
 8001e8c:	65bb      	str	r3, [r7, #88]	@ 0x58
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001e8e:	2300      	movs	r3, #0
 8001e90:	65fb      	str	r3, [r7, #92]	@ 0x5c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001e92:	2300      	movs	r3, #0
 8001e94:	663b      	str	r3, [r7, #96]	@ 0x60
    GPIO_InitStruct.Alternate = GPIO_AF14_LTDC;
 8001e96:	230e      	movs	r3, #14
 8001e98:	667b      	str	r3, [r7, #100]	@ 0x64
    HAL_GPIO_Init(GPIOG, &GPIO_InitStruct);
 8001e9a:	f107 0354 	add.w	r3, r7, #84	@ 0x54
 8001e9e:	4619      	mov	r1, r3
 8001ea0:	4821      	ldr	r0, [pc, #132]	@ (8001f28 <HAL_LTDC_MspInit+0x244>)
 8001ea2:	f000 fcc3 	bl	800282c <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = HSYNC_Pin|G6_Pin|R2_Pin;
 8001ea6:	f44f 6398 	mov.w	r3, #1216	@ 0x4c0
 8001eaa:	657b      	str	r3, [r7, #84]	@ 0x54
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001eac:	2302      	movs	r3, #2
 8001eae:	65bb      	str	r3, [r7, #88]	@ 0x58
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001eb0:	2300      	movs	r3, #0
 8001eb2:	65fb      	str	r3, [r7, #92]	@ 0x5c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001eb4:	2300      	movs	r3, #0
 8001eb6:	663b      	str	r3, [r7, #96]	@ 0x60
    GPIO_InitStruct.Alternate = GPIO_AF14_LTDC;
 8001eb8:	230e      	movs	r3, #14
 8001eba:	667b      	str	r3, [r7, #100]	@ 0x64
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8001ebc:	f107 0354 	add.w	r3, r7, #84	@ 0x54
 8001ec0:	4619      	mov	r1, r3
 8001ec2:	481a      	ldr	r0, [pc, #104]	@ (8001f2c <HAL_LTDC_MspInit+0x248>)
 8001ec4:	f000 fcb2 	bl	800282c <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = G7_Pin|B2_Pin;
 8001ec8:	2348      	movs	r3, #72	@ 0x48
 8001eca:	657b      	str	r3, [r7, #84]	@ 0x54
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001ecc:	2302      	movs	r3, #2
 8001ece:	65bb      	str	r3, [r7, #88]	@ 0x58
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001ed0:	2300      	movs	r3, #0
 8001ed2:	65fb      	str	r3, [r7, #92]	@ 0x5c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001ed4:	2300      	movs	r3, #0
 8001ed6:	663b      	str	r3, [r7, #96]	@ 0x60
    GPIO_InitStruct.Alternate = GPIO_AF14_LTDC;
 8001ed8:	230e      	movs	r3, #14
 8001eda:	667b      	str	r3, [r7, #100]	@ 0x64
    HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8001edc:	f107 0354 	add.w	r3, r7, #84	@ 0x54
 8001ee0:	4619      	mov	r1, r3
 8001ee2:	4813      	ldr	r0, [pc, #76]	@ (8001f30 <HAL_LTDC_MspInit+0x24c>)
 8001ee4:	f000 fca2 	bl	800282c <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = G3_Pin|B4_Pin;
 8001ee8:	f44f 53a0 	mov.w	r3, #5120	@ 0x1400
 8001eec:	657b      	str	r3, [r7, #84]	@ 0x54
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001eee:	2302      	movs	r3, #2
 8001ef0:	65bb      	str	r3, [r7, #88]	@ 0x58
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001ef2:	2300      	movs	r3, #0
 8001ef4:	65fb      	str	r3, [r7, #92]	@ 0x5c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001ef6:	2300      	movs	r3, #0
 8001ef8:	663b      	str	r3, [r7, #96]	@ 0x60
    GPIO_InitStruct.Alternate = GPIO_AF9_LTDC;
 8001efa:	2309      	movs	r3, #9
 8001efc:	667b      	str	r3, [r7, #100]	@ 0x64
    HAL_GPIO_Init(GPIOG, &GPIO_InitStruct);
 8001efe:	f107 0354 	add.w	r3, r7, #84	@ 0x54
 8001f02:	4619      	mov	r1, r3
 8001f04:	4808      	ldr	r0, [pc, #32]	@ (8001f28 <HAL_LTDC_MspInit+0x244>)
 8001f06:	f000 fc91 	bl	800282c <HAL_GPIO_Init>

  /* USER CODE END LTDC_MspInit 1 */

  }

}
 8001f0a:	bf00      	nop
 8001f0c:	3768      	adds	r7, #104	@ 0x68
 8001f0e:	46bd      	mov	sp, r7
 8001f10:	bd80      	pop	{r7, pc}
 8001f12:	bf00      	nop
 8001f14:	40016800 	.word	0x40016800
 8001f18:	40023800 	.word	0x40023800
 8001f1c:	40021400 	.word	0x40021400
 8001f20:	40020000 	.word	0x40020000
 8001f24:	40020400 	.word	0x40020400
 8001f28:	40021800 	.word	0x40021800
 8001f2c:	40020800 	.word	0x40020800
 8001f30:	40020c00 	.word	0x40020c00

08001f34 <HAL_RNG_MspInit>:
* This function configures the hardware resources used in this example
* @param hrng: RNG handle pointer
* @retval None
*/
void HAL_RNG_MspInit(RNG_HandleTypeDef* hrng)
{
 8001f34:	b480      	push	{r7}
 8001f36:	b085      	sub	sp, #20
 8001f38:	af00      	add	r7, sp, #0
 8001f3a:	6078      	str	r0, [r7, #4]
  if(hrng->Instance==RNG)
 8001f3c:	687b      	ldr	r3, [r7, #4]
 8001f3e:	681b      	ldr	r3, [r3, #0]
 8001f40:	4a0b      	ldr	r2, [pc, #44]	@ (8001f70 <HAL_RNG_MspInit+0x3c>)
 8001f42:	4293      	cmp	r3, r2
 8001f44:	d10d      	bne.n	8001f62 <HAL_RNG_MspInit+0x2e>
  {
  /* USER CODE BEGIN RNG_MspInit 0 */

  /* USER CODE END RNG_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_RNG_CLK_ENABLE();
 8001f46:	2300      	movs	r3, #0
 8001f48:	60fb      	str	r3, [r7, #12]
 8001f4a:	4b0a      	ldr	r3, [pc, #40]	@ (8001f74 <HAL_RNG_MspInit+0x40>)
 8001f4c:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8001f4e:	4a09      	ldr	r2, [pc, #36]	@ (8001f74 <HAL_RNG_MspInit+0x40>)
 8001f50:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8001f54:	6353      	str	r3, [r2, #52]	@ 0x34
 8001f56:	4b07      	ldr	r3, [pc, #28]	@ (8001f74 <HAL_RNG_MspInit+0x40>)
 8001f58:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8001f5a:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8001f5e:	60fb      	str	r3, [r7, #12]
 8001f60:	68fb      	ldr	r3, [r7, #12]

  /* USER CODE END RNG_MspInit 1 */

  }

}
 8001f62:	bf00      	nop
 8001f64:	3714      	adds	r7, #20
 8001f66:	46bd      	mov	sp, r7
 8001f68:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001f6c:	4770      	bx	lr
 8001f6e:	bf00      	nop
 8001f70:	50060800 	.word	0x50060800
 8001f74:	40023800 	.word	0x40023800

08001f78 <HAL_SPI_MspInit>:
* This function configures the hardware resources used in this example
* @param hspi: SPI handle pointer
* @retval None
*/
void HAL_SPI_MspInit(SPI_HandleTypeDef* hspi)
{
 8001f78:	b580      	push	{r7, lr}
 8001f7a:	b08a      	sub	sp, #40	@ 0x28
 8001f7c:	af00      	add	r7, sp, #0
 8001f7e:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001f80:	f107 0314 	add.w	r3, r7, #20
 8001f84:	2200      	movs	r2, #0
 8001f86:	601a      	str	r2, [r3, #0]
 8001f88:	605a      	str	r2, [r3, #4]
 8001f8a:	609a      	str	r2, [r3, #8]
 8001f8c:	60da      	str	r2, [r3, #12]
 8001f8e:	611a      	str	r2, [r3, #16]
  if(hspi->Instance==SPI5)
 8001f90:	687b      	ldr	r3, [r7, #4]
 8001f92:	681b      	ldr	r3, [r3, #0]
 8001f94:	4a19      	ldr	r2, [pc, #100]	@ (8001ffc <HAL_SPI_MspInit+0x84>)
 8001f96:	4293      	cmp	r3, r2
 8001f98:	d12c      	bne.n	8001ff4 <HAL_SPI_MspInit+0x7c>
  {
  /* USER CODE BEGIN SPI5_MspInit 0 */

  /* USER CODE END SPI5_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_SPI5_CLK_ENABLE();
 8001f9a:	2300      	movs	r3, #0
 8001f9c:	613b      	str	r3, [r7, #16]
 8001f9e:	4b18      	ldr	r3, [pc, #96]	@ (8002000 <HAL_SPI_MspInit+0x88>)
 8001fa0:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8001fa2:	4a17      	ldr	r2, [pc, #92]	@ (8002000 <HAL_SPI_MspInit+0x88>)
 8001fa4:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 8001fa8:	6453      	str	r3, [r2, #68]	@ 0x44
 8001faa:	4b15      	ldr	r3, [pc, #84]	@ (8002000 <HAL_SPI_MspInit+0x88>)
 8001fac:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8001fae:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 8001fb2:	613b      	str	r3, [r7, #16]
 8001fb4:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOF_CLK_ENABLE();
 8001fb6:	2300      	movs	r3, #0
 8001fb8:	60fb      	str	r3, [r7, #12]
 8001fba:	4b11      	ldr	r3, [pc, #68]	@ (8002000 <HAL_SPI_MspInit+0x88>)
 8001fbc:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001fbe:	4a10      	ldr	r2, [pc, #64]	@ (8002000 <HAL_SPI_MspInit+0x88>)
 8001fc0:	f043 0320 	orr.w	r3, r3, #32
 8001fc4:	6313      	str	r3, [r2, #48]	@ 0x30
 8001fc6:	4b0e      	ldr	r3, [pc, #56]	@ (8002000 <HAL_SPI_MspInit+0x88>)
 8001fc8:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001fca:	f003 0320 	and.w	r3, r3, #32
 8001fce:	60fb      	str	r3, [r7, #12]
 8001fd0:	68fb      	ldr	r3, [r7, #12]
    /**SPI5 GPIO Configuration
    PF7     ------> SPI5_SCK
    PF8     ------> SPI5_MISO
    PF9     ------> SPI5_MOSI
    */
    GPIO_InitStruct.Pin = SPI5_SCK_Pin|SPI5_MISO_Pin|SPI5_MOSI_Pin;
 8001fd2:	f44f 7360 	mov.w	r3, #896	@ 0x380
 8001fd6:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001fd8:	2302      	movs	r3, #2
 8001fda:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001fdc:	2300      	movs	r3, #0
 8001fde:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001fe0:	2300      	movs	r3, #0
 8001fe2:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI5;
 8001fe4:	2305      	movs	r3, #5
 8001fe6:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(GPIOF, &GPIO_InitStruct);
 8001fe8:	f107 0314 	add.w	r3, r7, #20
 8001fec:	4619      	mov	r1, r3
 8001fee:	4805      	ldr	r0, [pc, #20]	@ (8002004 <HAL_SPI_MspInit+0x8c>)
 8001ff0:	f000 fc1c 	bl	800282c <HAL_GPIO_Init>

  /* USER CODE END SPI5_MspInit 1 */

  }

}
 8001ff4:	bf00      	nop
 8001ff6:	3728      	adds	r7, #40	@ 0x28
 8001ff8:	46bd      	mov	sp, r7
 8001ffa:	bd80      	pop	{r7, pc}
 8001ffc:	40015000 	.word	0x40015000
 8002000:	40023800 	.word	0x40023800
 8002004:	40021400 	.word	0x40021400

08002008 <HAL_SPI_MspDeInit>:
* This function freeze the hardware resources used in this example
* @param hspi: SPI handle pointer
* @retval None
*/
void HAL_SPI_MspDeInit(SPI_HandleTypeDef* hspi)
{
 8002008:	b580      	push	{r7, lr}
 800200a:	b082      	sub	sp, #8
 800200c:	af00      	add	r7, sp, #0
 800200e:	6078      	str	r0, [r7, #4]
  if(hspi->Instance==SPI5)
 8002010:	687b      	ldr	r3, [r7, #4]
 8002012:	681b      	ldr	r3, [r3, #0]
 8002014:	4a08      	ldr	r2, [pc, #32]	@ (8002038 <HAL_SPI_MspDeInit+0x30>)
 8002016:	4293      	cmp	r3, r2
 8002018:	d10a      	bne.n	8002030 <HAL_SPI_MspDeInit+0x28>
  {
  /* USER CODE BEGIN SPI5_MspDeInit 0 */

  /* USER CODE END SPI5_MspDeInit 0 */
    /* Peripheral clock disable */
    __HAL_RCC_SPI5_CLK_DISABLE();
 800201a:	4b08      	ldr	r3, [pc, #32]	@ (800203c <HAL_SPI_MspDeInit+0x34>)
 800201c:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800201e:	4a07      	ldr	r2, [pc, #28]	@ (800203c <HAL_SPI_MspDeInit+0x34>)
 8002020:	f423 1380 	bic.w	r3, r3, #1048576	@ 0x100000
 8002024:	6453      	str	r3, [r2, #68]	@ 0x44
    /**SPI5 GPIO Configuration
    PF7     ------> SPI5_SCK
    PF8     ------> SPI5_MISO
    PF9     ------> SPI5_MOSI
    */
    HAL_GPIO_DeInit(GPIOF, SPI5_SCK_Pin|SPI5_MISO_Pin|SPI5_MOSI_Pin);
 8002026:	f44f 7160 	mov.w	r1, #896	@ 0x380
 800202a:	4805      	ldr	r0, [pc, #20]	@ (8002040 <HAL_SPI_MspDeInit+0x38>)
 800202c:	f000 fdaa 	bl	8002b84 <HAL_GPIO_DeInit>
  /* USER CODE BEGIN SPI5_MspDeInit 1 */

  /* USER CODE END SPI5_MspDeInit 1 */
  }

}
 8002030:	bf00      	nop
 8002032:	3708      	adds	r7, #8
 8002034:	46bd      	mov	sp, r7
 8002036:	bd80      	pop	{r7, pc}
 8002038:	40015000 	.word	0x40015000
 800203c:	40023800 	.word	0x40023800
 8002040:	40021400 	.word	0x40021400

08002044 <HAL_TIM_Base_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 8002044:	b480      	push	{r7}
 8002046:	b085      	sub	sp, #20
 8002048:	af00      	add	r7, sp, #0
 800204a:	6078      	str	r0, [r7, #4]
  if(htim_base->Instance==TIM6)
 800204c:	687b      	ldr	r3, [r7, #4]
 800204e:	681b      	ldr	r3, [r3, #0]
 8002050:	4a15      	ldr	r2, [pc, #84]	@ (80020a8 <HAL_TIM_Base_MspInit+0x64>)
 8002052:	4293      	cmp	r3, r2
 8002054:	d10e      	bne.n	8002074 <HAL_TIM_Base_MspInit+0x30>
  {
  /* USER CODE BEGIN TIM6_MspInit 0 */

  /* USER CODE END TIM6_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM6_CLK_ENABLE();
 8002056:	2300      	movs	r3, #0
 8002058:	60fb      	str	r3, [r7, #12]
 800205a:	4b14      	ldr	r3, [pc, #80]	@ (80020ac <HAL_TIM_Base_MspInit+0x68>)
 800205c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800205e:	4a13      	ldr	r2, [pc, #76]	@ (80020ac <HAL_TIM_Base_MspInit+0x68>)
 8002060:	f043 0310 	orr.w	r3, r3, #16
 8002064:	6413      	str	r3, [r2, #64]	@ 0x40
 8002066:	4b11      	ldr	r3, [pc, #68]	@ (80020ac <HAL_TIM_Base_MspInit+0x68>)
 8002068:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800206a:	f003 0310 	and.w	r3, r3, #16
 800206e:	60fb      	str	r3, [r7, #12]
 8002070:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN TIM7_MspInit 1 */

  /* USER CODE END TIM7_MspInit 1 */
  }

}
 8002072:	e012      	b.n	800209a <HAL_TIM_Base_MspInit+0x56>
  else if(htim_base->Instance==TIM7)
 8002074:	687b      	ldr	r3, [r7, #4]
 8002076:	681b      	ldr	r3, [r3, #0]
 8002078:	4a0d      	ldr	r2, [pc, #52]	@ (80020b0 <HAL_TIM_Base_MspInit+0x6c>)
 800207a:	4293      	cmp	r3, r2
 800207c:	d10d      	bne.n	800209a <HAL_TIM_Base_MspInit+0x56>
    __HAL_RCC_TIM7_CLK_ENABLE();
 800207e:	2300      	movs	r3, #0
 8002080:	60bb      	str	r3, [r7, #8]
 8002082:	4b0a      	ldr	r3, [pc, #40]	@ (80020ac <HAL_TIM_Base_MspInit+0x68>)
 8002084:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002086:	4a09      	ldr	r2, [pc, #36]	@ (80020ac <HAL_TIM_Base_MspInit+0x68>)
 8002088:	f043 0320 	orr.w	r3, r3, #32
 800208c:	6413      	str	r3, [r2, #64]	@ 0x40
 800208e:	4b07      	ldr	r3, [pc, #28]	@ (80020ac <HAL_TIM_Base_MspInit+0x68>)
 8002090:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002092:	f003 0320 	and.w	r3, r3, #32
 8002096:	60bb      	str	r3, [r7, #8]
 8002098:	68bb      	ldr	r3, [r7, #8]
}
 800209a:	bf00      	nop
 800209c:	3714      	adds	r7, #20
 800209e:	46bd      	mov	sp, r7
 80020a0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80020a4:	4770      	bx	lr
 80020a6:	bf00      	nop
 80020a8:	40001000 	.word	0x40001000
 80020ac:	40023800 	.word	0x40023800
 80020b0:	40001400 	.word	0x40001400

080020b4 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 80020b4:	b480      	push	{r7}
 80020b6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 80020b8:	bf00      	nop
 80020ba:	e7fd      	b.n	80020b8 <NMI_Handler+0x4>

080020bc <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 80020bc:	b480      	push	{r7}
 80020be:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 80020c0:	bf00      	nop
 80020c2:	e7fd      	b.n	80020c0 <HardFault_Handler+0x4>

080020c4 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 80020c4:	b480      	push	{r7}
 80020c6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 80020c8:	bf00      	nop
 80020ca:	e7fd      	b.n	80020c8 <MemManage_Handler+0x4>

080020cc <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 80020cc:	b480      	push	{r7}
 80020ce:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 80020d0:	bf00      	nop
 80020d2:	e7fd      	b.n	80020d0 <BusFault_Handler+0x4>

080020d4 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 80020d4:	b480      	push	{r7}
 80020d6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 80020d8:	bf00      	nop
 80020da:	e7fd      	b.n	80020d8 <UsageFault_Handler+0x4>

080020dc <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 80020dc:	b480      	push	{r7}
 80020de:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 80020e0:	bf00      	nop
 80020e2:	46bd      	mov	sp, r7
 80020e4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80020e8:	4770      	bx	lr

080020ea <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 80020ea:	b480      	push	{r7}
 80020ec:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 80020ee:	bf00      	nop
 80020f0:	46bd      	mov	sp, r7
 80020f2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80020f6:	4770      	bx	lr

080020f8 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 80020f8:	b480      	push	{r7}
 80020fa:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 80020fc:	bf00      	nop
 80020fe:	46bd      	mov	sp, r7
 8002100:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002104:	4770      	bx	lr

08002106 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8002106:	b580      	push	{r7, lr}
 8002108:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 800210a:	f000 fa65 	bl	80025d8 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 800210e:	bf00      	nop
 8002110:	bd80      	pop	{r7, pc}

08002112 <STMPE811_Init>:

#define DEFAULT_TESTING_TIMEOUT 250000

/* The below function was created by Tilen MAJERLE but modified by Xavion */
STMPE811_State_t STMPE811_Init(void)
{
 8002112:	b580      	push	{r7, lr}
 8002114:	b082      	sub	sp, #8
 8002116:	af00      	add	r7, sp, #0

    // Initalize any other GPIO neeeded
    //stmpe811_MspInit(); // Currently we will be just using the HAL GPIO Init fuction to initialize GPIOs..

    // Initialze I2C3 ports 
    I2C3_MspInit();
 8002118:	f000 f902 	bl	8002320 <I2C3_MspInit>
    /* Initialize I2C */
    I2C3_Init();
 800211c:	f000 f8c2 	bl	80022a4 <I2C3_Init>

    /* Reset */
    I2C3_Write(STMPE811_ADDRESS, STMPE811_SYS_CTRL1, 0x02);
 8002120:	2202      	movs	r2, #2
 8002122:	2103      	movs	r1, #3
 8002124:	2082      	movs	r0, #130	@ 0x82
 8002126:	f000 f94f 	bl	80023c8 <I2C3_Write>
    HAL_Delay(5);
 800212a:	2005      	movs	r0, #5
 800212c:	f000 fa74 	bl	8002618 <HAL_Delay>
    I2C3_Write(STMPE811_ADDRESS, STMPE811_SYS_CTRL1, 0x00);
 8002130:	2200      	movs	r2, #0
 8002132:	2103      	movs	r1, #3
 8002134:	2082      	movs	r0, #130	@ 0x82
 8002136:	f000 f947 	bl	80023c8 <I2C3_Write>
    HAL_Delay(2);
 800213a:	2002      	movs	r0, #2
 800213c:	f000 fa6c 	bl	8002618 <HAL_Delay>

    /* Check for STMPE811 Connected */
    uint16_t dataRecieved;
    I2C3_MulitByteRead(STMPE811_ADDRESS, STMPE811_CHIP_ID, (uint8_t * )&dataRecieved, TWOBYTE); // Need to change
 8002140:	1cba      	adds	r2, r7, #2
 8002142:	2302      	movs	r3, #2
 8002144:	2100      	movs	r1, #0
 8002146:	2082      	movs	r0, #130	@ 0x82
 8002148:	f000 f98e 	bl	8002468 <I2C3_MulitByteRead>
    // Flip bytes
    uint16_t chipID = (dataRecieved << 8);
 800214c:	887b      	ldrh	r3, [r7, #2]
 800214e:	021b      	lsls	r3, r3, #8
 8002150:	80fb      	strh	r3, [r7, #6]
    chipID |= ((dataRecieved & 0xFF00) >> 8);
 8002152:	887b      	ldrh	r3, [r7, #2]
 8002154:	0a1b      	lsrs	r3, r3, #8
 8002156:	b29a      	uxth	r2, r3
 8002158:	88fb      	ldrh	r3, [r7, #6]
 800215a:	4313      	orrs	r3, r2
 800215c:	80fb      	strh	r3, [r7, #6]

    if (chipID != STMPE811_CHIP_ID_VALUE) {
 800215e:	88fb      	ldrh	r3, [r7, #6]
 8002160:	f640 0211 	movw	r2, #2065	@ 0x811
 8002164:	4293      	cmp	r3, r2
 8002166:	d001      	beq.n	800216c <STMPE811_Init+0x5a>
    	return STMPE811_State_Error;
 8002168:	2303      	movs	r3, #3
 800216a:	e075      	b.n	8002258 <STMPE811_Init+0x146>
    }

    /* Reset */
    I2C3_Write(STMPE811_ADDRESS, STMPE811_SYS_CTRL1, 0x02);
 800216c:	2202      	movs	r2, #2
 800216e:	2103      	movs	r1, #3
 8002170:	2082      	movs	r0, #130	@ 0x82
 8002172:	f000 f929 	bl	80023c8 <I2C3_Write>
    HAL_Delay(5);
 8002176:	2005      	movs	r0, #5
 8002178:	f000 fa4e 	bl	8002618 <HAL_Delay>
    I2C3_Write(STMPE811_ADDRESS, STMPE811_SYS_CTRL1, 0x00);
 800217c:	2200      	movs	r2, #0
 800217e:	2103      	movs	r1, #3
 8002180:	2082      	movs	r0, #130	@ 0x82
 8002182:	f000 f921 	bl	80023c8 <I2C3_Write>
    HAL_Delay(2);
 8002186:	2002      	movs	r0, #2
 8002188:	f000 fa46 	bl	8002618 <HAL_Delay>

    /* Get the current register value */
    mode = STMPE811_Read(STMPE811_SYS_CTRL2);
 800218c:	2004      	movs	r0, #4
 800218e:	f000 f867 	bl	8002260 <STMPE811_Read>
 8002192:	4603      	mov	r3, r0
 8002194:	717b      	strb	r3, [r7, #5]
    mode &= ~(0x01);
 8002196:	797b      	ldrb	r3, [r7, #5]
 8002198:	f023 0301 	bic.w	r3, r3, #1
 800219c:	717b      	strb	r3, [r7, #5]
    I2C3_Write(STMPE811_ADDRESS, STMPE811_SYS_CTRL2, mode);
 800219e:	797b      	ldrb	r3, [r7, #5]
 80021a0:	461a      	mov	r2, r3
 80021a2:	2104      	movs	r1, #4
 80021a4:	2082      	movs	r0, #130	@ 0x82
 80021a6:	f000 f90f 	bl	80023c8 <I2C3_Write>
    mode = STMPE811_Read(STMPE811_SYS_CTRL2);
 80021aa:	2004      	movs	r0, #4
 80021ac:	f000 f858 	bl	8002260 <STMPE811_Read>
 80021b0:	4603      	mov	r3, r0
 80021b2:	717b      	strb	r3, [r7, #5]
    mode &= ~(0x02);
 80021b4:	797b      	ldrb	r3, [r7, #5]
 80021b6:	f023 0302 	bic.w	r3, r3, #2
 80021ba:	717b      	strb	r3, [r7, #5]
    I2C3_Write(STMPE811_ADDRESS, STMPE811_SYS_CTRL2, mode);
 80021bc:	797b      	ldrb	r3, [r7, #5]
 80021be:	461a      	mov	r2, r3
 80021c0:	2104      	movs	r1, #4
 80021c2:	2082      	movs	r0, #130	@ 0x82
 80021c4:	f000 f900 	bl	80023c8 <I2C3_Write>

    /* Select Sample Time, bit number and ADC Reference */
    I2C3_Write(STMPE811_ADDRESS, STMPE811_ADC_CTRL1, 0x49);
 80021c8:	2249      	movs	r2, #73	@ 0x49
 80021ca:	2120      	movs	r1, #32
 80021cc:	2082      	movs	r0, #130	@ 0x82
 80021ce:	f000 f8fb 	bl	80023c8 <I2C3_Write>

    /* Wait for 2 ms */
    HAL_Delay(2);
 80021d2:	2002      	movs	r0, #2
 80021d4:	f000 fa20 	bl	8002618 <HAL_Delay>

    /* Select the ADC clock speed: 3.25 MHz */
    I2C3_Write(STMPE811_ADDRESS, STMPE811_ADC_CTRL2, 0x01);
 80021d8:	2201      	movs	r2, #1
 80021da:	2121      	movs	r1, #33	@ 0x21
 80021dc:	2082      	movs	r0, #130	@ 0x82
 80021de:	f000 f8f3 	bl	80023c8 <I2C3_Write>

    /* Select TSC pins in non default mode */
    mode = STMPE811_Read(STMPE811_GPIO_AF);
 80021e2:	2017      	movs	r0, #23
 80021e4:	f000 f83c 	bl	8002260 <STMPE811_Read>
 80021e8:	4603      	mov	r3, r0
 80021ea:	717b      	strb	r3, [r7, #5]
    mode |= 0x1E;
 80021ec:	797b      	ldrb	r3, [r7, #5]
 80021ee:	f043 031e 	orr.w	r3, r3, #30
 80021f2:	717b      	strb	r3, [r7, #5]
    I2C3_Write(STMPE811_ADDRESS, STMPE811_GPIO_AF, mode);
 80021f4:	797b      	ldrb	r3, [r7, #5]
 80021f6:	461a      	mov	r2, r3
 80021f8:	2117      	movs	r1, #23
 80021fa:	2082      	movs	r0, #130	@ 0x82
 80021fc:	f000 f8e4 	bl	80023c8 <I2C3_Write>
    /* Configuration:
    - Touch average control    : 4 samples
    - Touch delay time         : 500 uS
    - Panel driver setting time: 500 uS
    */
    I2C3_Write(STMPE811_ADDRESS, STMPE811_TSC_CFG, 0x9A);
 8002200:	229a      	movs	r2, #154	@ 0x9a
 8002202:	2141      	movs	r1, #65	@ 0x41
 8002204:	2082      	movs	r0, #130	@ 0x82
 8002206:	f000 f8df 	bl	80023c8 <I2C3_Write>

    /* Configure the Touch FIFO threshold: single point reading */
    I2C3_Write(STMPE811_ADDRESS, STMPE811_FIFO_TH, 0x01);
 800220a:	2201      	movs	r2, #1
 800220c:	214a      	movs	r1, #74	@ 0x4a
 800220e:	2082      	movs	r0, #130	@ 0x82
 8002210:	f000 f8da 	bl	80023c8 <I2C3_Write>

    /* Clear the FIFO memory content. */
    I2C3_Write(STMPE811_ADDRESS, STMPE811_FIFO_STA, 0x01);
 8002214:	2201      	movs	r2, #1
 8002216:	214b      	movs	r1, #75	@ 0x4b
 8002218:	2082      	movs	r0, #130	@ 0x82
 800221a:	f000 f8d5 	bl	80023c8 <I2C3_Write>

    /* Put the FIFO back into operation mode  */
    I2C3_Write( STMPE811_ADDRESS, STMPE811_FIFO_STA, 0x00);
 800221e:	2200      	movs	r2, #0
 8002220:	214b      	movs	r1, #75	@ 0x4b
 8002222:	2082      	movs	r0, #130	@ 0x82
 8002224:	f000 f8d0 	bl	80023c8 <I2C3_Write>

    /* Set the range and accuracy pf the pressure measurement (Z) :
    - Fractional part :7
    - Whole part      :1
    */
    I2C3_Write( STMPE811_ADDRESS, STMPE811_TSC_FRACTION_Z, 0x01);
 8002228:	2201      	movs	r2, #1
 800222a:	2156      	movs	r1, #86	@ 0x56
 800222c:	2082      	movs	r0, #130	@ 0x82
 800222e:	f000 f8cb 	bl	80023c8 <I2C3_Write>

    /* Set the driving capability (limit) of the device for TSC pins: 50mA */
    I2C3_Write(STMPE811_ADDRESS, STMPE811_TSC_I_DRIVE, 0x01);
 8002232:	2201      	movs	r2, #1
 8002234:	2158      	movs	r1, #88	@ 0x58
 8002236:	2082      	movs	r0, #130	@ 0x82
 8002238:	f000 f8c6 	bl	80023c8 <I2C3_Write>

    /* Touch screen control configuration (enable TSC):
    - No window tracking index
    - XYZ acquisition mode
    */
    I2C3_Write(STMPE811_ADDRESS, STMPE811_TSC_CTRL, 0x03);
 800223c:	2203      	movs	r2, #3
 800223e:	2140      	movs	r1, #64	@ 0x40
 8002240:	2082      	movs	r0, #130	@ 0x82
 8002242:	f000 f8c1 	bl	80023c8 <I2C3_Write>

    /* Clear all the status pending bits if any */
    I2C3_Write(STMPE811_ADDRESS, STMPE811_INT_STA, 0xFF);
 8002246:	22ff      	movs	r2, #255	@ 0xff
 8002248:	210b      	movs	r1, #11
 800224a:	2082      	movs	r0, #130	@ 0x82
 800224c:	f000 f8bc 	bl	80023c8 <I2C3_Write>
    I2C3_Write(STMPE811_ADDRESS, STMPE811_INT_EN, mode);
    
    #endif // COMPILE_TOUCH_INTERRUPT_SUPPORT
    
    /* Wait for 2 ms delay */
    HAL_Delay(200);
 8002250:	20c8      	movs	r0, #200	@ 0xc8
 8002252:	f000 f9e1 	bl	8002618 <HAL_Delay>

    return STMPE811_State_Ok;
 8002256:	2302      	movs	r3, #2

}
 8002258:	4618      	mov	r0, r3
 800225a:	3708      	adds	r7, #8
 800225c:	46bd      	mov	sp, r7
 800225e:	bd80      	pop	{r7, pc}

08002260 <STMPE811_Read>:

uint8_t STMPE811_Read(uint8_t reg)
{
 8002260:	b580      	push	{r7, lr}
 8002262:	b084      	sub	sp, #16
 8002264:	af00      	add	r7, sp, #0
 8002266:	4603      	mov	r3, r0
 8002268:	71fb      	strb	r3, [r7, #7]
    // I2C Read
    uint8_t readData;
    I2C3_Read(STMPE811_ADDRESS, reg, &readData);
 800226a:	f107 020f 	add.w	r2, r7, #15
 800226e:	79fb      	ldrb	r3, [r7, #7]
 8002270:	4619      	mov	r1, r3
 8002272:	2082      	movs	r0, #130	@ 0x82
 8002274:	f000 f8d2 	bl	800241c <I2C3_Read>

    return readData;
 8002278:	7bfb      	ldrb	r3, [r7, #15]
}
 800227a:	4618      	mov	r0, r3
 800227c:	3710      	adds	r7, #16
 800227e:	46bd      	mov	sp, r7
 8002280:	bd80      	pop	{r7, pc}
	...

08002284 <verifyHAL_I2C_IS_OKAY>:

#endif 


//  ******************************** I2C Functions ********************************//
void verifyHAL_I2C_IS_OKAY(){
 8002284:	b480      	push	{r7}
 8002286:	af00      	add	r7, sp, #0
    if (HAL_status != HAL_OK)
 8002288:	4b05      	ldr	r3, [pc, #20]	@ (80022a0 <verifyHAL_I2C_IS_OKAY+0x1c>)
 800228a:	781b      	ldrb	r3, [r3, #0]
 800228c:	2b00      	cmp	r3, #0
 800228e:	d001      	beq.n	8002294 <verifyHAL_I2C_IS_OKAY+0x10>
    {
        while(1);
 8002290:	bf00      	nop
 8002292:	e7fd      	b.n	8002290 <verifyHAL_I2C_IS_OKAY+0xc>
    }
}
 8002294:	bf00      	nop
 8002296:	46bd      	mov	sp, r7
 8002298:	f85d 7b04 	ldr.w	r7, [sp], #4
 800229c:	4770      	bx	lr
 800229e:	bf00      	nop
 80022a0:	20025bc4 	.word	0x20025bc4

080022a4 <I2C3_Init>:

static void I2C3_Init()
{
 80022a4:	b580      	push	{r7, lr}
 80022a6:	b082      	sub	sp, #8
 80022a8:	af00      	add	r7, sp, #0

	__HAL_RCC_I2C3_CLK_ENABLE();
 80022aa:	2300      	movs	r3, #0
 80022ac:	603b      	str	r3, [r7, #0]
 80022ae:	4b18      	ldr	r3, [pc, #96]	@ (8002310 <I2C3_Init+0x6c>)
 80022b0:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80022b2:	4a17      	ldr	r2, [pc, #92]	@ (8002310 <I2C3_Init+0x6c>)
 80022b4:	f443 0300 	orr.w	r3, r3, #8388608	@ 0x800000
 80022b8:	6413      	str	r3, [r2, #64]	@ 0x40
 80022ba:	4b15      	ldr	r3, [pc, #84]	@ (8002310 <I2C3_Init+0x6c>)
 80022bc:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80022be:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 80022c2:	603b      	str	r3, [r7, #0]
 80022c4:	683b      	ldr	r3, [r7, #0]
    // Configure I2C3
    hI2C3.Instance = STMPE811_I2C;
 80022c6:	4b13      	ldr	r3, [pc, #76]	@ (8002314 <I2C3_Init+0x70>)
 80022c8:	4a13      	ldr	r2, [pc, #76]	@ (8002318 <I2C3_Init+0x74>)
 80022ca:	601a      	str	r2, [r3, #0]
    hI2C3.Init.ClockSpeed = STMPE811_I2C_CLOCK;
 80022cc:	4b11      	ldr	r3, [pc, #68]	@ (8002314 <I2C3_Init+0x70>)
 80022ce:	4a13      	ldr	r2, [pc, #76]	@ (800231c <I2C3_Init+0x78>)
 80022d0:	605a      	str	r2, [r3, #4]
    hI2C3.Init.DutyCycle = I2C_DUTYCYCLE_2;
 80022d2:	4b10      	ldr	r3, [pc, #64]	@ (8002314 <I2C3_Init+0x70>)
 80022d4:	2200      	movs	r2, #0
 80022d6:	609a      	str	r2, [r3, #8]
    hI2C3.Init.OwnAddress1 = 0x00; // May be wrong
 80022d8:	4b0e      	ldr	r3, [pc, #56]	@ (8002314 <I2C3_Init+0x70>)
 80022da:	2200      	movs	r2, #0
 80022dc:	60da      	str	r2, [r3, #12]
    hI2C3.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 80022de:	4b0d      	ldr	r3, [pc, #52]	@ (8002314 <I2C3_Init+0x70>)
 80022e0:	f44f 4280 	mov.w	r2, #16384	@ 0x4000
 80022e4:	611a      	str	r2, [r3, #16]
    hI2C3.Init.GeneralCallMode = I2C_NOSTRETCH_DISABLE;
 80022e6:	4b0b      	ldr	r3, [pc, #44]	@ (8002314 <I2C3_Init+0x70>)
 80022e8:	2200      	movs	r2, #0
 80022ea:	61da      	str	r2, [r3, #28]
    hI2C3.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 80022ec:	4b09      	ldr	r3, [pc, #36]	@ (8002314 <I2C3_Init+0x70>)
 80022ee:	2200      	movs	r2, #0
 80022f0:	621a      	str	r2, [r3, #32]
    // Do we need to configutre I2C Mode? 

    // Initialize I2C3 interface
    HAL_StatusTypeDef status;
    status = HAL_I2C_Init(&hI2C3);
 80022f2:	4808      	ldr	r0, [pc, #32]	@ (8002314 <I2C3_Init+0x70>)
 80022f4:	f000 fd6c 	bl	8002dd0 <HAL_I2C_Init>
 80022f8:	4603      	mov	r3, r0
 80022fa:	71fb      	strb	r3, [r7, #7]
    if (status != HAL_OK)
 80022fc:	79fb      	ldrb	r3, [r7, #7]
 80022fe:	2b00      	cmp	r3, #0
 8002300:	d001      	beq.n	8002306 <I2C3_Init+0x62>
    {
        for(;;); // Catch error
 8002302:	bf00      	nop
 8002304:	e7fd      	b.n	8002302 <I2C3_Init+0x5e>
    }
    return;
 8002306:	bf00      	nop
}
 8002308:	3708      	adds	r7, #8
 800230a:	46bd      	mov	sp, r7
 800230c:	bd80      	pop	{r7, pc}
 800230e:	bf00      	nop
 8002310:	40023800 	.word	0x40023800
 8002314:	20025b70 	.word	0x20025b70
 8002318:	40005c00 	.word	0x40005c00
 800231c:	000186a0 	.word	0x000186a0

08002320 <I2C3_MspInit>:

// GPIO Initializations 
static void I2C3_MspInit(void)
{
 8002320:	b580      	push	{r7, lr}
 8002322:	b088      	sub	sp, #32
 8002324:	af00      	add	r7, sp, #0
	GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002326:	f107 030c 	add.w	r3, r7, #12
 800232a:	2200      	movs	r2, #0
 800232c:	601a      	str	r2, [r3, #0]
 800232e:	605a      	str	r2, [r3, #4]
 8002330:	609a      	str	r2, [r3, #8]
 8002332:	60da      	str	r2, [r3, #12]
 8002334:	611a      	str	r2, [r3, #16]
    // Enable Clocks
    // GPIOC
    __HAL_RCC_GPIOC_CLK_ENABLE();
 8002336:	2300      	movs	r3, #0
 8002338:	60bb      	str	r3, [r7, #8]
 800233a:	4b20      	ldr	r3, [pc, #128]	@ (80023bc <I2C3_MspInit+0x9c>)
 800233c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800233e:	4a1f      	ldr	r2, [pc, #124]	@ (80023bc <I2C3_MspInit+0x9c>)
 8002340:	f043 0304 	orr.w	r3, r3, #4
 8002344:	6313      	str	r3, [r2, #48]	@ 0x30
 8002346:	4b1d      	ldr	r3, [pc, #116]	@ (80023bc <I2C3_MspInit+0x9c>)
 8002348:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800234a:	f003 0304 	and.w	r3, r3, #4
 800234e:	60bb      	str	r3, [r7, #8]
 8002350:	68bb      	ldr	r3, [r7, #8]

    // GPIOA 
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8002352:	2300      	movs	r3, #0
 8002354:	607b      	str	r3, [r7, #4]
 8002356:	4b19      	ldr	r3, [pc, #100]	@ (80023bc <I2C3_MspInit+0x9c>)
 8002358:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800235a:	4a18      	ldr	r2, [pc, #96]	@ (80023bc <I2C3_MspInit+0x9c>)
 800235c:	f043 0301 	orr.w	r3, r3, #1
 8002360:	6313      	str	r3, [r2, #48]	@ 0x30
 8002362:	4b16      	ldr	r3, [pc, #88]	@ (80023bc <I2C3_MspInit+0x9c>)
 8002364:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002366:	f003 0301 	and.w	r3, r3, #1
 800236a:	607b      	str	r3, [r7, #4]
 800236c:	687b      	ldr	r3, [r7, #4]

    /*Configure GPIO pin : I2C3_SDA_Pin */
    GPIO_InitStruct.Pin = I2C3_SDA_Pin;
 800236e:	f44f 7300 	mov.w	r3, #512	@ 0x200
 8002372:	60fb      	str	r3, [r7, #12]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8002374:	2312      	movs	r3, #18
 8002376:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002378:	2300      	movs	r3, #0
 800237a:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800237c:	2300      	movs	r3, #0
 800237e:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C3;
 8002380:	2304      	movs	r3, #4
 8002382:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(I2C3_SDA_GPIO_Port, &GPIO_InitStruct);
 8002384:	f107 030c 	add.w	r3, r7, #12
 8002388:	4619      	mov	r1, r3
 800238a:	480d      	ldr	r0, [pc, #52]	@ (80023c0 <I2C3_MspInit+0xa0>)
 800238c:	f000 fa4e 	bl	800282c <HAL_GPIO_Init>

    /*Configure GPIO pin : I2C3_SCL_Pin */
    GPIO_InitStruct.Pin = I2C3_SCL_Pin;
 8002390:	f44f 7380 	mov.w	r3, #256	@ 0x100
 8002394:	60fb      	str	r3, [r7, #12]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8002396:	2312      	movs	r3, #18
 8002398:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800239a:	2300      	movs	r3, #0
 800239c:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800239e:	2300      	movs	r3, #0
 80023a0:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C3;
 80023a2:	2304      	movs	r3, #4
 80023a4:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(I2C3_SCL_GPIO_Port, &GPIO_InitStruct);
 80023a6:	f107 030c 	add.w	r3, r7, #12
 80023aa:	4619      	mov	r1, r3
 80023ac:	4805      	ldr	r0, [pc, #20]	@ (80023c4 <I2C3_MspInit+0xa4>)
 80023ae:	f000 fa3d 	bl	800282c <HAL_GPIO_Init>
    
}
 80023b2:	bf00      	nop
 80023b4:	3720      	adds	r7, #32
 80023b6:	46bd      	mov	sp, r7
 80023b8:	bd80      	pop	{r7, pc}
 80023ba:	bf00      	nop
 80023bc:	40023800 	.word	0x40023800
 80023c0:	40020800 	.word	0x40020800
 80023c4:	40020000 	.word	0x40020000

080023c8 <I2C3_Write>:

// This function should only be used for single BYTE transfers 
void I2C3_Write(uint16_t devAddr, uint8_t reg, uint8_t data)
{
 80023c8:	b580      	push	{r7, lr}
 80023ca:	b088      	sub	sp, #32
 80023cc:	af04      	add	r7, sp, #16
 80023ce:	4603      	mov	r3, r0
 80023d0:	80fb      	strh	r3, [r7, #6]
 80023d2:	460b      	mov	r3, r1
 80023d4:	717b      	strb	r3, [r7, #5]
 80023d6:	4613      	mov	r3, r2
 80023d8:	713b      	strb	r3, [r7, #4]
    uint8_t dataConversion = data; // data will be a raw hex value this is mainly for debugging...
 80023da:	793b      	ldrb	r3, [r7, #4]
 80023dc:	73fb      	strb	r3, [r7, #15]
    // Learning topic - Is this needed? Or can I just use &data in the function call? 
    HAL_status = HAL_I2C_Mem_Write(&hI2C3, devAddr, reg, I2C_MEMADD_SIZE_8BIT, &dataConversion, ONEBYTE, DEFAULT_TESTING_TIMEOUT);
 80023de:	797b      	ldrb	r3, [r7, #5]
 80023e0:	b29a      	uxth	r2, r3
 80023e2:	88f9      	ldrh	r1, [r7, #6]
 80023e4:	4b0a      	ldr	r3, [pc, #40]	@ (8002410 <I2C3_Write+0x48>)
 80023e6:	9302      	str	r3, [sp, #8]
 80023e8:	2301      	movs	r3, #1
 80023ea:	9301      	str	r3, [sp, #4]
 80023ec:	f107 030f 	add.w	r3, r7, #15
 80023f0:	9300      	str	r3, [sp, #0]
 80023f2:	2301      	movs	r3, #1
 80023f4:	4807      	ldr	r0, [pc, #28]	@ (8002414 <I2C3_Write+0x4c>)
 80023f6:	f000 fe2f 	bl	8003058 <HAL_I2C_Mem_Write>
 80023fa:	4603      	mov	r3, r0
 80023fc:	461a      	mov	r2, r3
 80023fe:	4b06      	ldr	r3, [pc, #24]	@ (8002418 <I2C3_Write+0x50>)
 8002400:	701a      	strb	r2, [r3, #0]
    verifyHAL_I2C_IS_OKAY();
 8002402:	f7ff ff3f 	bl	8002284 <verifyHAL_I2C_IS_OKAY>
}
 8002406:	bf00      	nop
 8002408:	3710      	adds	r7, #16
 800240a:	46bd      	mov	sp, r7
 800240c:	bd80      	pop	{r7, pc}
 800240e:	bf00      	nop
 8002410:	0003d090 	.word	0x0003d090
 8002414:	20025b70 	.word	0x20025b70
 8002418:	20025bc4 	.word	0x20025bc4

0800241c <I2C3_Read>:

// This function should only be used for single BYTE transfers 
void I2C3_Read(uint8_t address, uint8_t reg, uint8_t * rxData)
{
 800241c:	b580      	push	{r7, lr}
 800241e:	b086      	sub	sp, #24
 8002420:	af04      	add	r7, sp, #16
 8002422:	4603      	mov	r3, r0
 8002424:	603a      	str	r2, [r7, #0]
 8002426:	71fb      	strb	r3, [r7, #7]
 8002428:	460b      	mov	r3, r1
 800242a:	71bb      	strb	r3, [r7, #6]
    // Need to use MEM functions
    HAL_status = HAL_I2C_Mem_Read(&hI2C3, address, reg, I2C_MEMADD_SIZE_8BIT, rxData, ONEBYTE, DEFAULT_TESTING_TIMEOUT);
 800242c:	79fb      	ldrb	r3, [r7, #7]
 800242e:	b299      	uxth	r1, r3
 8002430:	79bb      	ldrb	r3, [r7, #6]
 8002432:	b29a      	uxth	r2, r3
 8002434:	4b09      	ldr	r3, [pc, #36]	@ (800245c <I2C3_Read+0x40>)
 8002436:	9302      	str	r3, [sp, #8]
 8002438:	2301      	movs	r3, #1
 800243a:	9301      	str	r3, [sp, #4]
 800243c:	683b      	ldr	r3, [r7, #0]
 800243e:	9300      	str	r3, [sp, #0]
 8002440:	2301      	movs	r3, #1
 8002442:	4807      	ldr	r0, [pc, #28]	@ (8002460 <I2C3_Read+0x44>)
 8002444:	f000 ff02 	bl	800324c <HAL_I2C_Mem_Read>
 8002448:	4603      	mov	r3, r0
 800244a:	461a      	mov	r2, r3
 800244c:	4b05      	ldr	r3, [pc, #20]	@ (8002464 <I2C3_Read+0x48>)
 800244e:	701a      	strb	r2, [r3, #0]
    verifyHAL_I2C_IS_OKAY();
 8002450:	f7ff ff18 	bl	8002284 <verifyHAL_I2C_IS_OKAY>
}
 8002454:	bf00      	nop
 8002456:	3708      	adds	r7, #8
 8002458:	46bd      	mov	sp, r7
 800245a:	bd80      	pop	{r7, pc}
 800245c:	0003d090 	.word	0x0003d090
 8002460:	20025b70 	.word	0x20025b70
 8002464:	20025bc4 	.word	0x20025bc4

08002468 <I2C3_MulitByteRead>:

// This function should be used for multiple byte reads from a reg
void I2C3_MulitByteRead(uint8_t address, uint8_t reg, uint8_t * rxData, uint16_t numOfBytes)
{
 8002468:	b580      	push	{r7, lr}
 800246a:	b086      	sub	sp, #24
 800246c:	af04      	add	r7, sp, #16
 800246e:	603a      	str	r2, [r7, #0]
 8002470:	461a      	mov	r2, r3
 8002472:	4603      	mov	r3, r0
 8002474:	71fb      	strb	r3, [r7, #7]
 8002476:	460b      	mov	r3, r1
 8002478:	71bb      	strb	r3, [r7, #6]
 800247a:	4613      	mov	r3, r2
 800247c:	80bb      	strh	r3, [r7, #4]
    HAL_I2C_Mem_Read(&hI2C3, address, reg, I2C_MEMADD_SIZE_8BIT, rxData, numOfBytes, DEFAULT_TESTING_TIMEOUT);
 800247e:	79fb      	ldrb	r3, [r7, #7]
 8002480:	b299      	uxth	r1, r3
 8002482:	79bb      	ldrb	r3, [r7, #6]
 8002484:	b29a      	uxth	r2, r3
 8002486:	4b07      	ldr	r3, [pc, #28]	@ (80024a4 <I2C3_MulitByteRead+0x3c>)
 8002488:	9302      	str	r3, [sp, #8]
 800248a:	88bb      	ldrh	r3, [r7, #4]
 800248c:	9301      	str	r3, [sp, #4]
 800248e:	683b      	ldr	r3, [r7, #0]
 8002490:	9300      	str	r3, [sp, #0]
 8002492:	2301      	movs	r3, #1
 8002494:	4804      	ldr	r0, [pc, #16]	@ (80024a8 <I2C3_MulitByteRead+0x40>)
 8002496:	f000 fed9 	bl	800324c <HAL_I2C_Mem_Read>
}
 800249a:	bf00      	nop
 800249c:	3708      	adds	r7, #8
 800249e:	46bd      	mov	sp, r7
 80024a0:	bd80      	pop	{r7, pc}
 80024a2:	bf00      	nop
 80024a4:	0003d090 	.word	0x0003d090
 80024a8:	20025b70 	.word	0x20025b70

080024ac <initialise_monitor_handles>:
char **environ = __env;


/* Functions */
void initialise_monitor_handles()
{
 80024ac:	b480      	push	{r7}
 80024ae:	af00      	add	r7, sp, #0

}
 80024b0:	bf00      	nop
 80024b2:	46bd      	mov	sp, r7
 80024b4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80024b8:	4770      	bx	lr
	...

080024bc <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 80024bc:	b480      	push	{r7}
 80024be:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 80024c0:	4b06      	ldr	r3, [pc, #24]	@ (80024dc <SystemInit+0x20>)
 80024c2:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80024c6:	4a05      	ldr	r2, [pc, #20]	@ (80024dc <SystemInit+0x20>)
 80024c8:	f443 0370 	orr.w	r3, r3, #15728640	@ 0xf00000
 80024cc:	f8c2 3088 	str.w	r3, [r2, #136]	@ 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 80024d0:	bf00      	nop
 80024d2:	46bd      	mov	sp, r7
 80024d4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80024d8:	4770      	bx	lr
 80024da:	bf00      	nop
 80024dc:	e000ed00 	.word	0xe000ed00

080024e0 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler: 
  ldr   sp, =_estack       /* set stack pointer */
 80024e0:	f8df d034 	ldr.w	sp, [pc, #52]	@ 8002518 <LoopFillZerobss+0xe>

/* Call the clock system initialization function.*/
  bl  SystemInit   
 80024e4:	f7ff ffea 	bl	80024bc <SystemInit>
 
/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 80024e8:	480c      	ldr	r0, [pc, #48]	@ (800251c <LoopFillZerobss+0x12>)
  ldr r1, =_edata
 80024ea:	490d      	ldr	r1, [pc, #52]	@ (8002520 <LoopFillZerobss+0x16>)
  ldr r2, =_sidata
 80024ec:	4a0d      	ldr	r2, [pc, #52]	@ (8002524 <LoopFillZerobss+0x1a>)
  movs r3, #0
 80024ee:	2300      	movs	r3, #0
  b LoopCopyDataInit
 80024f0:	e002      	b.n	80024f8 <LoopCopyDataInit>

080024f2 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 80024f2:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 80024f4:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 80024f6:	3304      	adds	r3, #4

080024f8 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 80024f8:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 80024fa:	428c      	cmp	r4, r1
  bcc CopyDataInit
 80024fc:	d3f9      	bcc.n	80024f2 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 80024fe:	4a0a      	ldr	r2, [pc, #40]	@ (8002528 <LoopFillZerobss+0x1e>)
  ldr r4, =_ebss
 8002500:	4c0a      	ldr	r4, [pc, #40]	@ (800252c <LoopFillZerobss+0x22>)
  movs r3, #0
 8002502:	2300      	movs	r3, #0
  b LoopFillZerobss
 8002504:	e001      	b.n	800250a <LoopFillZerobss>

08002506 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8002506:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8002508:	3204      	adds	r2, #4

0800250a <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 800250a:	42a2      	cmp	r2, r4
  bcc FillZerobss
 800250c:	d3fb      	bcc.n	8002506 <FillZerobss>
  
/* Call static constructors */
    bl __libc_init_array
 800250e:	f003 fadd 	bl	8005acc <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8002512:	f7fe fe61 	bl	80011d8 <main>
  bx  lr    
 8002516:	4770      	bx	lr
  ldr   sp, =_estack       /* set stack pointer */
 8002518:	20030000 	.word	0x20030000
  ldr r0, =_sdata
 800251c:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8002520:	20000020 	.word	0x20000020
  ldr r2, =_sidata
 8002524:	08006d30 	.word	0x08006d30
  ldr r2, =_sbss
 8002528:	20000020 	.word	0x20000020
  ldr r4, =_ebss
 800252c:	20025bcc 	.word	0x20025bcc

08002530 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8002530:	e7fe      	b.n	8002530 <ADC_IRQHandler>
	...

08002534 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8002534:	b580      	push	{r7, lr}
 8002536:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 8002538:	4b0e      	ldr	r3, [pc, #56]	@ (8002574 <HAL_Init+0x40>)
 800253a:	681b      	ldr	r3, [r3, #0]
 800253c:	4a0d      	ldr	r2, [pc, #52]	@ (8002574 <HAL_Init+0x40>)
 800253e:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 8002542:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 8002544:	4b0b      	ldr	r3, [pc, #44]	@ (8002574 <HAL_Init+0x40>)
 8002546:	681b      	ldr	r3, [r3, #0]
 8002548:	4a0a      	ldr	r2, [pc, #40]	@ (8002574 <HAL_Init+0x40>)
 800254a:	f443 6380 	orr.w	r3, r3, #1024	@ 0x400
 800254e:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8002550:	4b08      	ldr	r3, [pc, #32]	@ (8002574 <HAL_Init+0x40>)
 8002552:	681b      	ldr	r3, [r3, #0]
 8002554:	4a07      	ldr	r2, [pc, #28]	@ (8002574 <HAL_Init+0x40>)
 8002556:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 800255a:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 800255c:	2003      	movs	r0, #3
 800255e:	f000 f931 	bl	80027c4 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8002562:	2000      	movs	r0, #0
 8002564:	f000 f808 	bl	8002578 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8002568:	f7ff fb2a 	bl	8001bc0 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 800256c:	2300      	movs	r3, #0
}
 800256e:	4618      	mov	r0, r3
 8002570:	bd80      	pop	{r7, pc}
 8002572:	bf00      	nop
 8002574:	40023c00 	.word	0x40023c00

08002578 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8002578:	b580      	push	{r7, lr}
 800257a:	b082      	sub	sp, #8
 800257c:	af00      	add	r7, sp, #0
 800257e:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8002580:	4b12      	ldr	r3, [pc, #72]	@ (80025cc <HAL_InitTick+0x54>)
 8002582:	681a      	ldr	r2, [r3, #0]
 8002584:	4b12      	ldr	r3, [pc, #72]	@ (80025d0 <HAL_InitTick+0x58>)
 8002586:	781b      	ldrb	r3, [r3, #0]
 8002588:	4619      	mov	r1, r3
 800258a:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 800258e:	fbb3 f3f1 	udiv	r3, r3, r1
 8002592:	fbb2 f3f3 	udiv	r3, r2, r3
 8002596:	4618      	mov	r0, r3
 8002598:	f000 f93b 	bl	8002812 <HAL_SYSTICK_Config>
 800259c:	4603      	mov	r3, r0
 800259e:	2b00      	cmp	r3, #0
 80025a0:	d001      	beq.n	80025a6 <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 80025a2:	2301      	movs	r3, #1
 80025a4:	e00e      	b.n	80025c4 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 80025a6:	687b      	ldr	r3, [r7, #4]
 80025a8:	2b0f      	cmp	r3, #15
 80025aa:	d80a      	bhi.n	80025c2 <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 80025ac:	2200      	movs	r2, #0
 80025ae:	6879      	ldr	r1, [r7, #4]
 80025b0:	f04f 30ff 	mov.w	r0, #4294967295
 80025b4:	f000 f911 	bl	80027da <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 80025b8:	4a06      	ldr	r2, [pc, #24]	@ (80025d4 <HAL_InitTick+0x5c>)
 80025ba:	687b      	ldr	r3, [r7, #4]
 80025bc:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 80025be:	2300      	movs	r3, #0
 80025c0:	e000      	b.n	80025c4 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 80025c2:	2301      	movs	r3, #1
}
 80025c4:	4618      	mov	r0, r3
 80025c6:	3708      	adds	r7, #8
 80025c8:	46bd      	mov	sp, r7
 80025ca:	bd80      	pop	{r7, pc}
 80025cc:	20000014 	.word	0x20000014
 80025d0:	2000001c 	.word	0x2000001c
 80025d4:	20000018 	.word	0x20000018

080025d8 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 80025d8:	b480      	push	{r7}
 80025da:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 80025dc:	4b06      	ldr	r3, [pc, #24]	@ (80025f8 <HAL_IncTick+0x20>)
 80025de:	781b      	ldrb	r3, [r3, #0]
 80025e0:	461a      	mov	r2, r3
 80025e2:	4b06      	ldr	r3, [pc, #24]	@ (80025fc <HAL_IncTick+0x24>)
 80025e4:	681b      	ldr	r3, [r3, #0]
 80025e6:	4413      	add	r3, r2
 80025e8:	4a04      	ldr	r2, [pc, #16]	@ (80025fc <HAL_IncTick+0x24>)
 80025ea:	6013      	str	r3, [r2, #0]
}
 80025ec:	bf00      	nop
 80025ee:	46bd      	mov	sp, r7
 80025f0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80025f4:	4770      	bx	lr
 80025f6:	bf00      	nop
 80025f8:	2000001c 	.word	0x2000001c
 80025fc:	20025bc8 	.word	0x20025bc8

08002600 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8002600:	b480      	push	{r7}
 8002602:	af00      	add	r7, sp, #0
  return uwTick;
 8002604:	4b03      	ldr	r3, [pc, #12]	@ (8002614 <HAL_GetTick+0x14>)
 8002606:	681b      	ldr	r3, [r3, #0]
}
 8002608:	4618      	mov	r0, r3
 800260a:	46bd      	mov	sp, r7
 800260c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002610:	4770      	bx	lr
 8002612:	bf00      	nop
 8002614:	20025bc8 	.word	0x20025bc8

08002618 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8002618:	b580      	push	{r7, lr}
 800261a:	b084      	sub	sp, #16
 800261c:	af00      	add	r7, sp, #0
 800261e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8002620:	f7ff ffee 	bl	8002600 <HAL_GetTick>
 8002624:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8002626:	687b      	ldr	r3, [r7, #4]
 8002628:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 800262a:	68fb      	ldr	r3, [r7, #12]
 800262c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002630:	d005      	beq.n	800263e <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8002632:	4b0a      	ldr	r3, [pc, #40]	@ (800265c <HAL_Delay+0x44>)
 8002634:	781b      	ldrb	r3, [r3, #0]
 8002636:	461a      	mov	r2, r3
 8002638:	68fb      	ldr	r3, [r7, #12]
 800263a:	4413      	add	r3, r2
 800263c:	60fb      	str	r3, [r7, #12]
  }

  while((HAL_GetTick() - tickstart) < wait)
 800263e:	bf00      	nop
 8002640:	f7ff ffde 	bl	8002600 <HAL_GetTick>
 8002644:	4602      	mov	r2, r0
 8002646:	68bb      	ldr	r3, [r7, #8]
 8002648:	1ad3      	subs	r3, r2, r3
 800264a:	68fa      	ldr	r2, [r7, #12]
 800264c:	429a      	cmp	r2, r3
 800264e:	d8f7      	bhi.n	8002640 <HAL_Delay+0x28>
  {
  }
}
 8002650:	bf00      	nop
 8002652:	bf00      	nop
 8002654:	3710      	adds	r7, #16
 8002656:	46bd      	mov	sp, r7
 8002658:	bd80      	pop	{r7, pc}
 800265a:	bf00      	nop
 800265c:	2000001c 	.word	0x2000001c

08002660 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8002660:	b480      	push	{r7}
 8002662:	b085      	sub	sp, #20
 8002664:	af00      	add	r7, sp, #0
 8002666:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8002668:	687b      	ldr	r3, [r7, #4]
 800266a:	f003 0307 	and.w	r3, r3, #7
 800266e:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8002670:	4b0c      	ldr	r3, [pc, #48]	@ (80026a4 <__NVIC_SetPriorityGrouping+0x44>)
 8002672:	68db      	ldr	r3, [r3, #12]
 8002674:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8002676:	68ba      	ldr	r2, [r7, #8]
 8002678:	f64f 03ff 	movw	r3, #63743	@ 0xf8ff
 800267c:	4013      	ands	r3, r2
 800267e:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8002680:	68fb      	ldr	r3, [r7, #12]
 8002682:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8002684:	68bb      	ldr	r3, [r7, #8]
 8002686:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8002688:	f043 63bf 	orr.w	r3, r3, #100139008	@ 0x5f80000
 800268c:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8002690:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8002692:	4a04      	ldr	r2, [pc, #16]	@ (80026a4 <__NVIC_SetPriorityGrouping+0x44>)
 8002694:	68bb      	ldr	r3, [r7, #8]
 8002696:	60d3      	str	r3, [r2, #12]
}
 8002698:	bf00      	nop
 800269a:	3714      	adds	r7, #20
 800269c:	46bd      	mov	sp, r7
 800269e:	f85d 7b04 	ldr.w	r7, [sp], #4
 80026a2:	4770      	bx	lr
 80026a4:	e000ed00 	.word	0xe000ed00

080026a8 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 80026a8:	b480      	push	{r7}
 80026aa:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 80026ac:	4b04      	ldr	r3, [pc, #16]	@ (80026c0 <__NVIC_GetPriorityGrouping+0x18>)
 80026ae:	68db      	ldr	r3, [r3, #12]
 80026b0:	0a1b      	lsrs	r3, r3, #8
 80026b2:	f003 0307 	and.w	r3, r3, #7
}
 80026b6:	4618      	mov	r0, r3
 80026b8:	46bd      	mov	sp, r7
 80026ba:	f85d 7b04 	ldr.w	r7, [sp], #4
 80026be:	4770      	bx	lr
 80026c0:	e000ed00 	.word	0xe000ed00

080026c4 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 80026c4:	b480      	push	{r7}
 80026c6:	b083      	sub	sp, #12
 80026c8:	af00      	add	r7, sp, #0
 80026ca:	4603      	mov	r3, r0
 80026cc:	6039      	str	r1, [r7, #0]
 80026ce:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80026d0:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80026d4:	2b00      	cmp	r3, #0
 80026d6:	db0a      	blt.n	80026ee <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80026d8:	683b      	ldr	r3, [r7, #0]
 80026da:	b2da      	uxtb	r2, r3
 80026dc:	490c      	ldr	r1, [pc, #48]	@ (8002710 <__NVIC_SetPriority+0x4c>)
 80026de:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80026e2:	0112      	lsls	r2, r2, #4
 80026e4:	b2d2      	uxtb	r2, r2
 80026e6:	440b      	add	r3, r1
 80026e8:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 80026ec:	e00a      	b.n	8002704 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80026ee:	683b      	ldr	r3, [r7, #0]
 80026f0:	b2da      	uxtb	r2, r3
 80026f2:	4908      	ldr	r1, [pc, #32]	@ (8002714 <__NVIC_SetPriority+0x50>)
 80026f4:	79fb      	ldrb	r3, [r7, #7]
 80026f6:	f003 030f 	and.w	r3, r3, #15
 80026fa:	3b04      	subs	r3, #4
 80026fc:	0112      	lsls	r2, r2, #4
 80026fe:	b2d2      	uxtb	r2, r2
 8002700:	440b      	add	r3, r1
 8002702:	761a      	strb	r2, [r3, #24]
}
 8002704:	bf00      	nop
 8002706:	370c      	adds	r7, #12
 8002708:	46bd      	mov	sp, r7
 800270a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800270e:	4770      	bx	lr
 8002710:	e000e100 	.word	0xe000e100
 8002714:	e000ed00 	.word	0xe000ed00

08002718 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8002718:	b480      	push	{r7}
 800271a:	b089      	sub	sp, #36	@ 0x24
 800271c:	af00      	add	r7, sp, #0
 800271e:	60f8      	str	r0, [r7, #12]
 8002720:	60b9      	str	r1, [r7, #8]
 8002722:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8002724:	68fb      	ldr	r3, [r7, #12]
 8002726:	f003 0307 	and.w	r3, r3, #7
 800272a:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 800272c:	69fb      	ldr	r3, [r7, #28]
 800272e:	f1c3 0307 	rsb	r3, r3, #7
 8002732:	2b04      	cmp	r3, #4
 8002734:	bf28      	it	cs
 8002736:	2304      	movcs	r3, #4
 8002738:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 800273a:	69fb      	ldr	r3, [r7, #28]
 800273c:	3304      	adds	r3, #4
 800273e:	2b06      	cmp	r3, #6
 8002740:	d902      	bls.n	8002748 <NVIC_EncodePriority+0x30>
 8002742:	69fb      	ldr	r3, [r7, #28]
 8002744:	3b03      	subs	r3, #3
 8002746:	e000      	b.n	800274a <NVIC_EncodePriority+0x32>
 8002748:	2300      	movs	r3, #0
 800274a:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 800274c:	f04f 32ff 	mov.w	r2, #4294967295
 8002750:	69bb      	ldr	r3, [r7, #24]
 8002752:	fa02 f303 	lsl.w	r3, r2, r3
 8002756:	43da      	mvns	r2, r3
 8002758:	68bb      	ldr	r3, [r7, #8]
 800275a:	401a      	ands	r2, r3
 800275c:	697b      	ldr	r3, [r7, #20]
 800275e:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8002760:	f04f 31ff 	mov.w	r1, #4294967295
 8002764:	697b      	ldr	r3, [r7, #20]
 8002766:	fa01 f303 	lsl.w	r3, r1, r3
 800276a:	43d9      	mvns	r1, r3
 800276c:	687b      	ldr	r3, [r7, #4]
 800276e:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8002770:	4313      	orrs	r3, r2
         );
}
 8002772:	4618      	mov	r0, r3
 8002774:	3724      	adds	r7, #36	@ 0x24
 8002776:	46bd      	mov	sp, r7
 8002778:	f85d 7b04 	ldr.w	r7, [sp], #4
 800277c:	4770      	bx	lr
	...

08002780 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8002780:	b580      	push	{r7, lr}
 8002782:	b082      	sub	sp, #8
 8002784:	af00      	add	r7, sp, #0
 8002786:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8002788:	687b      	ldr	r3, [r7, #4]
 800278a:	3b01      	subs	r3, #1
 800278c:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 8002790:	d301      	bcc.n	8002796 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8002792:	2301      	movs	r3, #1
 8002794:	e00f      	b.n	80027b6 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8002796:	4a0a      	ldr	r2, [pc, #40]	@ (80027c0 <SysTick_Config+0x40>)
 8002798:	687b      	ldr	r3, [r7, #4]
 800279a:	3b01      	subs	r3, #1
 800279c:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 800279e:	210f      	movs	r1, #15
 80027a0:	f04f 30ff 	mov.w	r0, #4294967295
 80027a4:	f7ff ff8e 	bl	80026c4 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 80027a8:	4b05      	ldr	r3, [pc, #20]	@ (80027c0 <SysTick_Config+0x40>)
 80027aa:	2200      	movs	r2, #0
 80027ac:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 80027ae:	4b04      	ldr	r3, [pc, #16]	@ (80027c0 <SysTick_Config+0x40>)
 80027b0:	2207      	movs	r2, #7
 80027b2:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 80027b4:	2300      	movs	r3, #0
}
 80027b6:	4618      	mov	r0, r3
 80027b8:	3708      	adds	r7, #8
 80027ba:	46bd      	mov	sp, r7
 80027bc:	bd80      	pop	{r7, pc}
 80027be:	bf00      	nop
 80027c0:	e000e010 	.word	0xe000e010

080027c4 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80027c4:	b580      	push	{r7, lr}
 80027c6:	b082      	sub	sp, #8
 80027c8:	af00      	add	r7, sp, #0
 80027ca:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 80027cc:	6878      	ldr	r0, [r7, #4]
 80027ce:	f7ff ff47 	bl	8002660 <__NVIC_SetPriorityGrouping>
}
 80027d2:	bf00      	nop
 80027d4:	3708      	adds	r7, #8
 80027d6:	46bd      	mov	sp, r7
 80027d8:	bd80      	pop	{r7, pc}

080027da <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 80027da:	b580      	push	{r7, lr}
 80027dc:	b086      	sub	sp, #24
 80027de:	af00      	add	r7, sp, #0
 80027e0:	4603      	mov	r3, r0
 80027e2:	60b9      	str	r1, [r7, #8]
 80027e4:	607a      	str	r2, [r7, #4]
 80027e6:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 80027e8:	2300      	movs	r3, #0
 80027ea:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 80027ec:	f7ff ff5c 	bl	80026a8 <__NVIC_GetPriorityGrouping>
 80027f0:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 80027f2:	687a      	ldr	r2, [r7, #4]
 80027f4:	68b9      	ldr	r1, [r7, #8]
 80027f6:	6978      	ldr	r0, [r7, #20]
 80027f8:	f7ff ff8e 	bl	8002718 <NVIC_EncodePriority>
 80027fc:	4602      	mov	r2, r0
 80027fe:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8002802:	4611      	mov	r1, r2
 8002804:	4618      	mov	r0, r3
 8002806:	f7ff ff5d 	bl	80026c4 <__NVIC_SetPriority>
}
 800280a:	bf00      	nop
 800280c:	3718      	adds	r7, #24
 800280e:	46bd      	mov	sp, r7
 8002810:	bd80      	pop	{r7, pc}

08002812 <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8002812:	b580      	push	{r7, lr}
 8002814:	b082      	sub	sp, #8
 8002816:	af00      	add	r7, sp, #0
 8002818:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 800281a:	6878      	ldr	r0, [r7, #4]
 800281c:	f7ff ffb0 	bl	8002780 <SysTick_Config>
 8002820:	4603      	mov	r3, r0
}
 8002822:	4618      	mov	r0, r3
 8002824:	3708      	adds	r7, #8
 8002826:	46bd      	mov	sp, r7
 8002828:	bd80      	pop	{r7, pc}
	...

0800282c <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 800282c:	b480      	push	{r7}
 800282e:	b089      	sub	sp, #36	@ 0x24
 8002830:	af00      	add	r7, sp, #0
 8002832:	6078      	str	r0, [r7, #4]
 8002834:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 8002836:	2300      	movs	r3, #0
 8002838:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 800283a:	2300      	movs	r3, #0
 800283c:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 800283e:	2300      	movs	r3, #0
 8002840:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 8002842:	2300      	movs	r3, #0
 8002844:	61fb      	str	r3, [r7, #28]
 8002846:	e177      	b.n	8002b38 <HAL_GPIO_Init+0x30c>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 8002848:	2201      	movs	r2, #1
 800284a:	69fb      	ldr	r3, [r7, #28]
 800284c:	fa02 f303 	lsl.w	r3, r2, r3
 8002850:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8002852:	683b      	ldr	r3, [r7, #0]
 8002854:	681b      	ldr	r3, [r3, #0]
 8002856:	697a      	ldr	r2, [r7, #20]
 8002858:	4013      	ands	r3, r2
 800285a:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 800285c:	693a      	ldr	r2, [r7, #16]
 800285e:	697b      	ldr	r3, [r7, #20]
 8002860:	429a      	cmp	r2, r3
 8002862:	f040 8166 	bne.w	8002b32 <HAL_GPIO_Init+0x306>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8002866:	683b      	ldr	r3, [r7, #0]
 8002868:	685b      	ldr	r3, [r3, #4]
 800286a:	f003 0303 	and.w	r3, r3, #3
 800286e:	2b01      	cmp	r3, #1
 8002870:	d005      	beq.n	800287e <HAL_GPIO_Init+0x52>
          (GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8002872:	683b      	ldr	r3, [r7, #0]
 8002874:	685b      	ldr	r3, [r3, #4]
 8002876:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 800287a:	2b02      	cmp	r3, #2
 800287c:	d130      	bne.n	80028e0 <HAL_GPIO_Init+0xb4>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 800287e:	687b      	ldr	r3, [r7, #4]
 8002880:	689b      	ldr	r3, [r3, #8]
 8002882:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 8002884:	69fb      	ldr	r3, [r7, #28]
 8002886:	005b      	lsls	r3, r3, #1
 8002888:	2203      	movs	r2, #3
 800288a:	fa02 f303 	lsl.w	r3, r2, r3
 800288e:	43db      	mvns	r3, r3
 8002890:	69ba      	ldr	r2, [r7, #24]
 8002892:	4013      	ands	r3, r2
 8002894:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 8002896:	683b      	ldr	r3, [r7, #0]
 8002898:	68da      	ldr	r2, [r3, #12]
 800289a:	69fb      	ldr	r3, [r7, #28]
 800289c:	005b      	lsls	r3, r3, #1
 800289e:	fa02 f303 	lsl.w	r3, r2, r3
 80028a2:	69ba      	ldr	r2, [r7, #24]
 80028a4:	4313      	orrs	r3, r2
 80028a6:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 80028a8:	687b      	ldr	r3, [r7, #4]
 80028aa:	69ba      	ldr	r2, [r7, #24]
 80028ac:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 80028ae:	687b      	ldr	r3, [r7, #4]
 80028b0:	685b      	ldr	r3, [r3, #4]
 80028b2:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 80028b4:	2201      	movs	r2, #1
 80028b6:	69fb      	ldr	r3, [r7, #28]
 80028b8:	fa02 f303 	lsl.w	r3, r2, r3
 80028bc:	43db      	mvns	r3, r3
 80028be:	69ba      	ldr	r2, [r7, #24]
 80028c0:	4013      	ands	r3, r2
 80028c2:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 80028c4:	683b      	ldr	r3, [r7, #0]
 80028c6:	685b      	ldr	r3, [r3, #4]
 80028c8:	091b      	lsrs	r3, r3, #4
 80028ca:	f003 0201 	and.w	r2, r3, #1
 80028ce:	69fb      	ldr	r3, [r7, #28]
 80028d0:	fa02 f303 	lsl.w	r3, r2, r3
 80028d4:	69ba      	ldr	r2, [r7, #24]
 80028d6:	4313      	orrs	r3, r2
 80028d8:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 80028da:	687b      	ldr	r3, [r7, #4]
 80028dc:	69ba      	ldr	r2, [r7, #24]
 80028de:	605a      	str	r2, [r3, #4]
       }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 80028e0:	683b      	ldr	r3, [r7, #0]
 80028e2:	685b      	ldr	r3, [r3, #4]
 80028e4:	f003 0303 	and.w	r3, r3, #3
 80028e8:	2b03      	cmp	r3, #3
 80028ea:	d017      	beq.n	800291c <HAL_GPIO_Init+0xf0>
      {
        /* Check the parameters */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));
        
        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 80028ec:	687b      	ldr	r3, [r7, #4]
 80028ee:	68db      	ldr	r3, [r3, #12]
 80028f0:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 80028f2:	69fb      	ldr	r3, [r7, #28]
 80028f4:	005b      	lsls	r3, r3, #1
 80028f6:	2203      	movs	r2, #3
 80028f8:	fa02 f303 	lsl.w	r3, r2, r3
 80028fc:	43db      	mvns	r3, r3
 80028fe:	69ba      	ldr	r2, [r7, #24]
 8002900:	4013      	ands	r3, r2
 8002902:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 8002904:	683b      	ldr	r3, [r7, #0]
 8002906:	689a      	ldr	r2, [r3, #8]
 8002908:	69fb      	ldr	r3, [r7, #28]
 800290a:	005b      	lsls	r3, r3, #1
 800290c:	fa02 f303 	lsl.w	r3, r2, r3
 8002910:	69ba      	ldr	r2, [r7, #24]
 8002912:	4313      	orrs	r3, r2
 8002914:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 8002916:	687b      	ldr	r3, [r7, #4]
 8002918:	69ba      	ldr	r2, [r7, #24]
 800291a:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 800291c:	683b      	ldr	r3, [r7, #0]
 800291e:	685b      	ldr	r3, [r3, #4]
 8002920:	f003 0303 	and.w	r3, r3, #3
 8002924:	2b02      	cmp	r3, #2
 8002926:	d123      	bne.n	8002970 <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8002928:	69fb      	ldr	r3, [r7, #28]
 800292a:	08da      	lsrs	r2, r3, #3
 800292c:	687b      	ldr	r3, [r7, #4]
 800292e:	3208      	adds	r2, #8
 8002930:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8002934:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 8002936:	69fb      	ldr	r3, [r7, #28]
 8002938:	f003 0307 	and.w	r3, r3, #7
 800293c:	009b      	lsls	r3, r3, #2
 800293e:	220f      	movs	r2, #15
 8002940:	fa02 f303 	lsl.w	r3, r2, r3
 8002944:	43db      	mvns	r3, r3
 8002946:	69ba      	ldr	r2, [r7, #24]
 8002948:	4013      	ands	r3, r2
 800294a:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 800294c:	683b      	ldr	r3, [r7, #0]
 800294e:	691a      	ldr	r2, [r3, #16]
 8002950:	69fb      	ldr	r3, [r7, #28]
 8002952:	f003 0307 	and.w	r3, r3, #7
 8002956:	009b      	lsls	r3, r3, #2
 8002958:	fa02 f303 	lsl.w	r3, r2, r3
 800295c:	69ba      	ldr	r2, [r7, #24]
 800295e:	4313      	orrs	r3, r2
 8002960:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 8002962:	69fb      	ldr	r3, [r7, #28]
 8002964:	08da      	lsrs	r2, r3, #3
 8002966:	687b      	ldr	r3, [r7, #4]
 8002968:	3208      	adds	r2, #8
 800296a:	69b9      	ldr	r1, [r7, #24]
 800296c:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8002970:	687b      	ldr	r3, [r7, #4]
 8002972:	681b      	ldr	r3, [r3, #0]
 8002974:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 8002976:	69fb      	ldr	r3, [r7, #28]
 8002978:	005b      	lsls	r3, r3, #1
 800297a:	2203      	movs	r2, #3
 800297c:	fa02 f303 	lsl.w	r3, r2, r3
 8002980:	43db      	mvns	r3, r3
 8002982:	69ba      	ldr	r2, [r7, #24]
 8002984:	4013      	ands	r3, r2
 8002986:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8002988:	683b      	ldr	r3, [r7, #0]
 800298a:	685b      	ldr	r3, [r3, #4]
 800298c:	f003 0203 	and.w	r2, r3, #3
 8002990:	69fb      	ldr	r3, [r7, #28]
 8002992:	005b      	lsls	r3, r3, #1
 8002994:	fa02 f303 	lsl.w	r3, r2, r3
 8002998:	69ba      	ldr	r2, [r7, #24]
 800299a:	4313      	orrs	r3, r2
 800299c:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 800299e:	687b      	ldr	r3, [r7, #4]
 80029a0:	69ba      	ldr	r2, [r7, #24]
 80029a2:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 80029a4:	683b      	ldr	r3, [r7, #0]
 80029a6:	685b      	ldr	r3, [r3, #4]
 80029a8:	f403 3340 	and.w	r3, r3, #196608	@ 0x30000
 80029ac:	2b00      	cmp	r3, #0
 80029ae:	f000 80c0 	beq.w	8002b32 <HAL_GPIO_Init+0x306>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 80029b2:	2300      	movs	r3, #0
 80029b4:	60fb      	str	r3, [r7, #12]
 80029b6:	4b66      	ldr	r3, [pc, #408]	@ (8002b50 <HAL_GPIO_Init+0x324>)
 80029b8:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80029ba:	4a65      	ldr	r2, [pc, #404]	@ (8002b50 <HAL_GPIO_Init+0x324>)
 80029bc:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 80029c0:	6453      	str	r3, [r2, #68]	@ 0x44
 80029c2:	4b63      	ldr	r3, [pc, #396]	@ (8002b50 <HAL_GPIO_Init+0x324>)
 80029c4:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80029c6:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 80029ca:	60fb      	str	r3, [r7, #12]
 80029cc:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 80029ce:	4a61      	ldr	r2, [pc, #388]	@ (8002b54 <HAL_GPIO_Init+0x328>)
 80029d0:	69fb      	ldr	r3, [r7, #28]
 80029d2:	089b      	lsrs	r3, r3, #2
 80029d4:	3302      	adds	r3, #2
 80029d6:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80029da:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 80029dc:	69fb      	ldr	r3, [r7, #28]
 80029de:	f003 0303 	and.w	r3, r3, #3
 80029e2:	009b      	lsls	r3, r3, #2
 80029e4:	220f      	movs	r2, #15
 80029e6:	fa02 f303 	lsl.w	r3, r2, r3
 80029ea:	43db      	mvns	r3, r3
 80029ec:	69ba      	ldr	r2, [r7, #24]
 80029ee:	4013      	ands	r3, r2
 80029f0:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 80029f2:	687b      	ldr	r3, [r7, #4]
 80029f4:	4a58      	ldr	r2, [pc, #352]	@ (8002b58 <HAL_GPIO_Init+0x32c>)
 80029f6:	4293      	cmp	r3, r2
 80029f8:	d037      	beq.n	8002a6a <HAL_GPIO_Init+0x23e>
 80029fa:	687b      	ldr	r3, [r7, #4]
 80029fc:	4a57      	ldr	r2, [pc, #348]	@ (8002b5c <HAL_GPIO_Init+0x330>)
 80029fe:	4293      	cmp	r3, r2
 8002a00:	d031      	beq.n	8002a66 <HAL_GPIO_Init+0x23a>
 8002a02:	687b      	ldr	r3, [r7, #4]
 8002a04:	4a56      	ldr	r2, [pc, #344]	@ (8002b60 <HAL_GPIO_Init+0x334>)
 8002a06:	4293      	cmp	r3, r2
 8002a08:	d02b      	beq.n	8002a62 <HAL_GPIO_Init+0x236>
 8002a0a:	687b      	ldr	r3, [r7, #4]
 8002a0c:	4a55      	ldr	r2, [pc, #340]	@ (8002b64 <HAL_GPIO_Init+0x338>)
 8002a0e:	4293      	cmp	r3, r2
 8002a10:	d025      	beq.n	8002a5e <HAL_GPIO_Init+0x232>
 8002a12:	687b      	ldr	r3, [r7, #4]
 8002a14:	4a54      	ldr	r2, [pc, #336]	@ (8002b68 <HAL_GPIO_Init+0x33c>)
 8002a16:	4293      	cmp	r3, r2
 8002a18:	d01f      	beq.n	8002a5a <HAL_GPIO_Init+0x22e>
 8002a1a:	687b      	ldr	r3, [r7, #4]
 8002a1c:	4a53      	ldr	r2, [pc, #332]	@ (8002b6c <HAL_GPIO_Init+0x340>)
 8002a1e:	4293      	cmp	r3, r2
 8002a20:	d019      	beq.n	8002a56 <HAL_GPIO_Init+0x22a>
 8002a22:	687b      	ldr	r3, [r7, #4]
 8002a24:	4a52      	ldr	r2, [pc, #328]	@ (8002b70 <HAL_GPIO_Init+0x344>)
 8002a26:	4293      	cmp	r3, r2
 8002a28:	d013      	beq.n	8002a52 <HAL_GPIO_Init+0x226>
 8002a2a:	687b      	ldr	r3, [r7, #4]
 8002a2c:	4a51      	ldr	r2, [pc, #324]	@ (8002b74 <HAL_GPIO_Init+0x348>)
 8002a2e:	4293      	cmp	r3, r2
 8002a30:	d00d      	beq.n	8002a4e <HAL_GPIO_Init+0x222>
 8002a32:	687b      	ldr	r3, [r7, #4]
 8002a34:	4a50      	ldr	r2, [pc, #320]	@ (8002b78 <HAL_GPIO_Init+0x34c>)
 8002a36:	4293      	cmp	r3, r2
 8002a38:	d007      	beq.n	8002a4a <HAL_GPIO_Init+0x21e>
 8002a3a:	687b      	ldr	r3, [r7, #4]
 8002a3c:	4a4f      	ldr	r2, [pc, #316]	@ (8002b7c <HAL_GPIO_Init+0x350>)
 8002a3e:	4293      	cmp	r3, r2
 8002a40:	d101      	bne.n	8002a46 <HAL_GPIO_Init+0x21a>
 8002a42:	2309      	movs	r3, #9
 8002a44:	e012      	b.n	8002a6c <HAL_GPIO_Init+0x240>
 8002a46:	230a      	movs	r3, #10
 8002a48:	e010      	b.n	8002a6c <HAL_GPIO_Init+0x240>
 8002a4a:	2308      	movs	r3, #8
 8002a4c:	e00e      	b.n	8002a6c <HAL_GPIO_Init+0x240>
 8002a4e:	2307      	movs	r3, #7
 8002a50:	e00c      	b.n	8002a6c <HAL_GPIO_Init+0x240>
 8002a52:	2306      	movs	r3, #6
 8002a54:	e00a      	b.n	8002a6c <HAL_GPIO_Init+0x240>
 8002a56:	2305      	movs	r3, #5
 8002a58:	e008      	b.n	8002a6c <HAL_GPIO_Init+0x240>
 8002a5a:	2304      	movs	r3, #4
 8002a5c:	e006      	b.n	8002a6c <HAL_GPIO_Init+0x240>
 8002a5e:	2303      	movs	r3, #3
 8002a60:	e004      	b.n	8002a6c <HAL_GPIO_Init+0x240>
 8002a62:	2302      	movs	r3, #2
 8002a64:	e002      	b.n	8002a6c <HAL_GPIO_Init+0x240>
 8002a66:	2301      	movs	r3, #1
 8002a68:	e000      	b.n	8002a6c <HAL_GPIO_Init+0x240>
 8002a6a:	2300      	movs	r3, #0
 8002a6c:	69fa      	ldr	r2, [r7, #28]
 8002a6e:	f002 0203 	and.w	r2, r2, #3
 8002a72:	0092      	lsls	r2, r2, #2
 8002a74:	4093      	lsls	r3, r2
 8002a76:	69ba      	ldr	r2, [r7, #24]
 8002a78:	4313      	orrs	r3, r2
 8002a7a:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 8002a7c:	4935      	ldr	r1, [pc, #212]	@ (8002b54 <HAL_GPIO_Init+0x328>)
 8002a7e:	69fb      	ldr	r3, [r7, #28]
 8002a80:	089b      	lsrs	r3, r3, #2
 8002a82:	3302      	adds	r3, #2
 8002a84:	69ba      	ldr	r2, [r7, #24]
 8002a86:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 8002a8a:	4b3d      	ldr	r3, [pc, #244]	@ (8002b80 <HAL_GPIO_Init+0x354>)
 8002a8c:	689b      	ldr	r3, [r3, #8]
 8002a8e:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8002a90:	693b      	ldr	r3, [r7, #16]
 8002a92:	43db      	mvns	r3, r3
 8002a94:	69ba      	ldr	r2, [r7, #24]
 8002a96:	4013      	ands	r3, r2
 8002a98:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 8002a9a:	683b      	ldr	r3, [r7, #0]
 8002a9c:	685b      	ldr	r3, [r3, #4]
 8002a9e:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 8002aa2:	2b00      	cmp	r3, #0
 8002aa4:	d003      	beq.n	8002aae <HAL_GPIO_Init+0x282>
        {
          temp |= iocurrent;
 8002aa6:	69ba      	ldr	r2, [r7, #24]
 8002aa8:	693b      	ldr	r3, [r7, #16]
 8002aaa:	4313      	orrs	r3, r2
 8002aac:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 8002aae:	4a34      	ldr	r2, [pc, #208]	@ (8002b80 <HAL_GPIO_Init+0x354>)
 8002ab0:	69bb      	ldr	r3, [r7, #24]
 8002ab2:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 8002ab4:	4b32      	ldr	r3, [pc, #200]	@ (8002b80 <HAL_GPIO_Init+0x354>)
 8002ab6:	68db      	ldr	r3, [r3, #12]
 8002ab8:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8002aba:	693b      	ldr	r3, [r7, #16]
 8002abc:	43db      	mvns	r3, r3
 8002abe:	69ba      	ldr	r2, [r7, #24]
 8002ac0:	4013      	ands	r3, r2
 8002ac2:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 8002ac4:	683b      	ldr	r3, [r7, #0]
 8002ac6:	685b      	ldr	r3, [r3, #4]
 8002ac8:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 8002acc:	2b00      	cmp	r3, #0
 8002ace:	d003      	beq.n	8002ad8 <HAL_GPIO_Init+0x2ac>
        {
          temp |= iocurrent;
 8002ad0:	69ba      	ldr	r2, [r7, #24]
 8002ad2:	693b      	ldr	r3, [r7, #16]
 8002ad4:	4313      	orrs	r3, r2
 8002ad6:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 8002ad8:	4a29      	ldr	r2, [pc, #164]	@ (8002b80 <HAL_GPIO_Init+0x354>)
 8002ada:	69bb      	ldr	r3, [r7, #24]
 8002adc:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR;
 8002ade:	4b28      	ldr	r3, [pc, #160]	@ (8002b80 <HAL_GPIO_Init+0x354>)
 8002ae0:	685b      	ldr	r3, [r3, #4]
 8002ae2:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8002ae4:	693b      	ldr	r3, [r7, #16]
 8002ae6:	43db      	mvns	r3, r3
 8002ae8:	69ba      	ldr	r2, [r7, #24]
 8002aea:	4013      	ands	r3, r2
 8002aec:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 8002aee:	683b      	ldr	r3, [r7, #0]
 8002af0:	685b      	ldr	r3, [r3, #4]
 8002af2:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8002af6:	2b00      	cmp	r3, #0
 8002af8:	d003      	beq.n	8002b02 <HAL_GPIO_Init+0x2d6>
        {
          temp |= iocurrent;
 8002afa:	69ba      	ldr	r2, [r7, #24]
 8002afc:	693b      	ldr	r3, [r7, #16]
 8002afe:	4313      	orrs	r3, r2
 8002b00:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 8002b02:	4a1f      	ldr	r2, [pc, #124]	@ (8002b80 <HAL_GPIO_Init+0x354>)
 8002b04:	69bb      	ldr	r3, [r7, #24]
 8002b06:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8002b08:	4b1d      	ldr	r3, [pc, #116]	@ (8002b80 <HAL_GPIO_Init+0x354>)
 8002b0a:	681b      	ldr	r3, [r3, #0]
 8002b0c:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8002b0e:	693b      	ldr	r3, [r7, #16]
 8002b10:	43db      	mvns	r3, r3
 8002b12:	69ba      	ldr	r2, [r7, #24]
 8002b14:	4013      	ands	r3, r2
 8002b16:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 8002b18:	683b      	ldr	r3, [r7, #0]
 8002b1a:	685b      	ldr	r3, [r3, #4]
 8002b1c:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8002b20:	2b00      	cmp	r3, #0
 8002b22:	d003      	beq.n	8002b2c <HAL_GPIO_Init+0x300>
        {
          temp |= iocurrent;
 8002b24:	69ba      	ldr	r2, [r7, #24]
 8002b26:	693b      	ldr	r3, [r7, #16]
 8002b28:	4313      	orrs	r3, r2
 8002b2a:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 8002b2c:	4a14      	ldr	r2, [pc, #80]	@ (8002b80 <HAL_GPIO_Init+0x354>)
 8002b2e:	69bb      	ldr	r3, [r7, #24]
 8002b30:	6013      	str	r3, [r2, #0]
  for(position = 0U; position < GPIO_NUMBER; position++)
 8002b32:	69fb      	ldr	r3, [r7, #28]
 8002b34:	3301      	adds	r3, #1
 8002b36:	61fb      	str	r3, [r7, #28]
 8002b38:	69fb      	ldr	r3, [r7, #28]
 8002b3a:	2b0f      	cmp	r3, #15
 8002b3c:	f67f ae84 	bls.w	8002848 <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 8002b40:	bf00      	nop
 8002b42:	bf00      	nop
 8002b44:	3724      	adds	r7, #36	@ 0x24
 8002b46:	46bd      	mov	sp, r7
 8002b48:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002b4c:	4770      	bx	lr
 8002b4e:	bf00      	nop
 8002b50:	40023800 	.word	0x40023800
 8002b54:	40013800 	.word	0x40013800
 8002b58:	40020000 	.word	0x40020000
 8002b5c:	40020400 	.word	0x40020400
 8002b60:	40020800 	.word	0x40020800
 8002b64:	40020c00 	.word	0x40020c00
 8002b68:	40021000 	.word	0x40021000
 8002b6c:	40021400 	.word	0x40021400
 8002b70:	40021800 	.word	0x40021800
 8002b74:	40021c00 	.word	0x40021c00
 8002b78:	40022000 	.word	0x40022000
 8002b7c:	40022400 	.word	0x40022400
 8002b80:	40013c00 	.word	0x40013c00

08002b84 <HAL_GPIO_DeInit>:
  * @param  GPIO_Pin specifies the port bit to be written.
  *          This parameter can be one of GPIO_PIN_x where x can be (0..15).
  * @retval None
  */
void HAL_GPIO_DeInit(GPIO_TypeDef  *GPIOx, uint32_t GPIO_Pin)
{
 8002b84:	b480      	push	{r7}
 8002b86:	b087      	sub	sp, #28
 8002b88:	af00      	add	r7, sp, #0
 8002b8a:	6078      	str	r0, [r7, #4]
 8002b8c:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 8002b8e:	2300      	movs	r3, #0
 8002b90:	613b      	str	r3, [r7, #16]
  uint32_t iocurrent = 0x00U;
 8002b92:	2300      	movs	r3, #0
 8002b94:	60fb      	str	r3, [r7, #12]
  uint32_t tmp = 0x00U;
 8002b96:	2300      	movs	r3, #0
 8002b98:	60bb      	str	r3, [r7, #8]

  /* Check the parameters */
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  
  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 8002b9a:	2300      	movs	r3, #0
 8002b9c:	617b      	str	r3, [r7, #20]
 8002b9e:	e0d9      	b.n	8002d54 <HAL_GPIO_DeInit+0x1d0>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 8002ba0:	2201      	movs	r2, #1
 8002ba2:	697b      	ldr	r3, [r7, #20]
 8002ba4:	fa02 f303 	lsl.w	r3, r2, r3
 8002ba8:	613b      	str	r3, [r7, #16]
    /* Get the current IO position */
    iocurrent = (GPIO_Pin) & ioposition;
 8002baa:	683a      	ldr	r2, [r7, #0]
 8002bac:	693b      	ldr	r3, [r7, #16]
 8002bae:	4013      	ands	r3, r2
 8002bb0:	60fb      	str	r3, [r7, #12]

    if(iocurrent == ioposition)
 8002bb2:	68fa      	ldr	r2, [r7, #12]
 8002bb4:	693b      	ldr	r3, [r7, #16]
 8002bb6:	429a      	cmp	r2, r3
 8002bb8:	f040 80c9 	bne.w	8002d4e <HAL_GPIO_DeInit+0x1ca>
    {
      /*------------------------- EXTI Mode Configuration --------------------*/
      tmp = SYSCFG->EXTICR[position >> 2U];
 8002bbc:	4a6b      	ldr	r2, [pc, #428]	@ (8002d6c <HAL_GPIO_DeInit+0x1e8>)
 8002bbe:	697b      	ldr	r3, [r7, #20]
 8002bc0:	089b      	lsrs	r3, r3, #2
 8002bc2:	3302      	adds	r3, #2
 8002bc4:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8002bc8:	60bb      	str	r3, [r7, #8]
      tmp &= (0x0FU << (4U * (position & 0x03U)));
 8002bca:	697b      	ldr	r3, [r7, #20]
 8002bcc:	f003 0303 	and.w	r3, r3, #3
 8002bd0:	009b      	lsls	r3, r3, #2
 8002bd2:	220f      	movs	r2, #15
 8002bd4:	fa02 f303 	lsl.w	r3, r2, r3
 8002bd8:	68ba      	ldr	r2, [r7, #8]
 8002bda:	4013      	ands	r3, r2
 8002bdc:	60bb      	str	r3, [r7, #8]
      if(tmp == ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U))))
 8002bde:	687b      	ldr	r3, [r7, #4]
 8002be0:	4a63      	ldr	r2, [pc, #396]	@ (8002d70 <HAL_GPIO_DeInit+0x1ec>)
 8002be2:	4293      	cmp	r3, r2
 8002be4:	d037      	beq.n	8002c56 <HAL_GPIO_DeInit+0xd2>
 8002be6:	687b      	ldr	r3, [r7, #4]
 8002be8:	4a62      	ldr	r2, [pc, #392]	@ (8002d74 <HAL_GPIO_DeInit+0x1f0>)
 8002bea:	4293      	cmp	r3, r2
 8002bec:	d031      	beq.n	8002c52 <HAL_GPIO_DeInit+0xce>
 8002bee:	687b      	ldr	r3, [r7, #4]
 8002bf0:	4a61      	ldr	r2, [pc, #388]	@ (8002d78 <HAL_GPIO_DeInit+0x1f4>)
 8002bf2:	4293      	cmp	r3, r2
 8002bf4:	d02b      	beq.n	8002c4e <HAL_GPIO_DeInit+0xca>
 8002bf6:	687b      	ldr	r3, [r7, #4]
 8002bf8:	4a60      	ldr	r2, [pc, #384]	@ (8002d7c <HAL_GPIO_DeInit+0x1f8>)
 8002bfa:	4293      	cmp	r3, r2
 8002bfc:	d025      	beq.n	8002c4a <HAL_GPIO_DeInit+0xc6>
 8002bfe:	687b      	ldr	r3, [r7, #4]
 8002c00:	4a5f      	ldr	r2, [pc, #380]	@ (8002d80 <HAL_GPIO_DeInit+0x1fc>)
 8002c02:	4293      	cmp	r3, r2
 8002c04:	d01f      	beq.n	8002c46 <HAL_GPIO_DeInit+0xc2>
 8002c06:	687b      	ldr	r3, [r7, #4]
 8002c08:	4a5e      	ldr	r2, [pc, #376]	@ (8002d84 <HAL_GPIO_DeInit+0x200>)
 8002c0a:	4293      	cmp	r3, r2
 8002c0c:	d019      	beq.n	8002c42 <HAL_GPIO_DeInit+0xbe>
 8002c0e:	687b      	ldr	r3, [r7, #4]
 8002c10:	4a5d      	ldr	r2, [pc, #372]	@ (8002d88 <HAL_GPIO_DeInit+0x204>)
 8002c12:	4293      	cmp	r3, r2
 8002c14:	d013      	beq.n	8002c3e <HAL_GPIO_DeInit+0xba>
 8002c16:	687b      	ldr	r3, [r7, #4]
 8002c18:	4a5c      	ldr	r2, [pc, #368]	@ (8002d8c <HAL_GPIO_DeInit+0x208>)
 8002c1a:	4293      	cmp	r3, r2
 8002c1c:	d00d      	beq.n	8002c3a <HAL_GPIO_DeInit+0xb6>
 8002c1e:	687b      	ldr	r3, [r7, #4]
 8002c20:	4a5b      	ldr	r2, [pc, #364]	@ (8002d90 <HAL_GPIO_DeInit+0x20c>)
 8002c22:	4293      	cmp	r3, r2
 8002c24:	d007      	beq.n	8002c36 <HAL_GPIO_DeInit+0xb2>
 8002c26:	687b      	ldr	r3, [r7, #4]
 8002c28:	4a5a      	ldr	r2, [pc, #360]	@ (8002d94 <HAL_GPIO_DeInit+0x210>)
 8002c2a:	4293      	cmp	r3, r2
 8002c2c:	d101      	bne.n	8002c32 <HAL_GPIO_DeInit+0xae>
 8002c2e:	2309      	movs	r3, #9
 8002c30:	e012      	b.n	8002c58 <HAL_GPIO_DeInit+0xd4>
 8002c32:	230a      	movs	r3, #10
 8002c34:	e010      	b.n	8002c58 <HAL_GPIO_DeInit+0xd4>
 8002c36:	2308      	movs	r3, #8
 8002c38:	e00e      	b.n	8002c58 <HAL_GPIO_DeInit+0xd4>
 8002c3a:	2307      	movs	r3, #7
 8002c3c:	e00c      	b.n	8002c58 <HAL_GPIO_DeInit+0xd4>
 8002c3e:	2306      	movs	r3, #6
 8002c40:	e00a      	b.n	8002c58 <HAL_GPIO_DeInit+0xd4>
 8002c42:	2305      	movs	r3, #5
 8002c44:	e008      	b.n	8002c58 <HAL_GPIO_DeInit+0xd4>
 8002c46:	2304      	movs	r3, #4
 8002c48:	e006      	b.n	8002c58 <HAL_GPIO_DeInit+0xd4>
 8002c4a:	2303      	movs	r3, #3
 8002c4c:	e004      	b.n	8002c58 <HAL_GPIO_DeInit+0xd4>
 8002c4e:	2302      	movs	r3, #2
 8002c50:	e002      	b.n	8002c58 <HAL_GPIO_DeInit+0xd4>
 8002c52:	2301      	movs	r3, #1
 8002c54:	e000      	b.n	8002c58 <HAL_GPIO_DeInit+0xd4>
 8002c56:	2300      	movs	r3, #0
 8002c58:	697a      	ldr	r2, [r7, #20]
 8002c5a:	f002 0203 	and.w	r2, r2, #3
 8002c5e:	0092      	lsls	r2, r2, #2
 8002c60:	4093      	lsls	r3, r2
 8002c62:	68ba      	ldr	r2, [r7, #8]
 8002c64:	429a      	cmp	r2, r3
 8002c66:	d132      	bne.n	8002cce <HAL_GPIO_DeInit+0x14a>
      {
        /* Clear EXTI line configuration */
        EXTI->IMR &= ~((uint32_t)iocurrent);
 8002c68:	4b4b      	ldr	r3, [pc, #300]	@ (8002d98 <HAL_GPIO_DeInit+0x214>)
 8002c6a:	681a      	ldr	r2, [r3, #0]
 8002c6c:	68fb      	ldr	r3, [r7, #12]
 8002c6e:	43db      	mvns	r3, r3
 8002c70:	4949      	ldr	r1, [pc, #292]	@ (8002d98 <HAL_GPIO_DeInit+0x214>)
 8002c72:	4013      	ands	r3, r2
 8002c74:	600b      	str	r3, [r1, #0]
        EXTI->EMR &= ~((uint32_t)iocurrent);
 8002c76:	4b48      	ldr	r3, [pc, #288]	@ (8002d98 <HAL_GPIO_DeInit+0x214>)
 8002c78:	685a      	ldr	r2, [r3, #4]
 8002c7a:	68fb      	ldr	r3, [r7, #12]
 8002c7c:	43db      	mvns	r3, r3
 8002c7e:	4946      	ldr	r1, [pc, #280]	@ (8002d98 <HAL_GPIO_DeInit+0x214>)
 8002c80:	4013      	ands	r3, r2
 8002c82:	604b      	str	r3, [r1, #4]
        
        /* Clear Rising Falling edge configuration */
        EXTI->FTSR &= ~((uint32_t)iocurrent);
 8002c84:	4b44      	ldr	r3, [pc, #272]	@ (8002d98 <HAL_GPIO_DeInit+0x214>)
 8002c86:	68da      	ldr	r2, [r3, #12]
 8002c88:	68fb      	ldr	r3, [r7, #12]
 8002c8a:	43db      	mvns	r3, r3
 8002c8c:	4942      	ldr	r1, [pc, #264]	@ (8002d98 <HAL_GPIO_DeInit+0x214>)
 8002c8e:	4013      	ands	r3, r2
 8002c90:	60cb      	str	r3, [r1, #12]
        EXTI->RTSR &= ~((uint32_t)iocurrent);
 8002c92:	4b41      	ldr	r3, [pc, #260]	@ (8002d98 <HAL_GPIO_DeInit+0x214>)
 8002c94:	689a      	ldr	r2, [r3, #8]
 8002c96:	68fb      	ldr	r3, [r7, #12]
 8002c98:	43db      	mvns	r3, r3
 8002c9a:	493f      	ldr	r1, [pc, #252]	@ (8002d98 <HAL_GPIO_DeInit+0x214>)
 8002c9c:	4013      	ands	r3, r2
 8002c9e:	608b      	str	r3, [r1, #8]

        /* Configure the External Interrupt or event for the current IO */
        tmp = 0x0FU << (4U * (position & 0x03U));
 8002ca0:	697b      	ldr	r3, [r7, #20]
 8002ca2:	f003 0303 	and.w	r3, r3, #3
 8002ca6:	009b      	lsls	r3, r3, #2
 8002ca8:	220f      	movs	r2, #15
 8002caa:	fa02 f303 	lsl.w	r3, r2, r3
 8002cae:	60bb      	str	r3, [r7, #8]
        SYSCFG->EXTICR[position >> 2U] &= ~tmp;
 8002cb0:	4a2e      	ldr	r2, [pc, #184]	@ (8002d6c <HAL_GPIO_DeInit+0x1e8>)
 8002cb2:	697b      	ldr	r3, [r7, #20]
 8002cb4:	089b      	lsrs	r3, r3, #2
 8002cb6:	3302      	adds	r3, #2
 8002cb8:	f852 1023 	ldr.w	r1, [r2, r3, lsl #2]
 8002cbc:	68bb      	ldr	r3, [r7, #8]
 8002cbe:	43da      	mvns	r2, r3
 8002cc0:	482a      	ldr	r0, [pc, #168]	@ (8002d6c <HAL_GPIO_DeInit+0x1e8>)
 8002cc2:	697b      	ldr	r3, [r7, #20]
 8002cc4:	089b      	lsrs	r3, r3, #2
 8002cc6:	400a      	ands	r2, r1
 8002cc8:	3302      	adds	r3, #2
 8002cca:	f840 2023 	str.w	r2, [r0, r3, lsl #2]
      }

      /*------------------------- GPIO Mode Configuration --------------------*/
      /* Configure IO Direction in Input Floating Mode */
      GPIOx->MODER &= ~(GPIO_MODER_MODER0 << (position * 2U));
 8002cce:	687b      	ldr	r3, [r7, #4]
 8002cd0:	681a      	ldr	r2, [r3, #0]
 8002cd2:	697b      	ldr	r3, [r7, #20]
 8002cd4:	005b      	lsls	r3, r3, #1
 8002cd6:	2103      	movs	r1, #3
 8002cd8:	fa01 f303 	lsl.w	r3, r1, r3
 8002cdc:	43db      	mvns	r3, r3
 8002cde:	401a      	ands	r2, r3
 8002ce0:	687b      	ldr	r3, [r7, #4]
 8002ce2:	601a      	str	r2, [r3, #0]

      /* Configure the default Alternate Function in current IO */
      GPIOx->AFR[position >> 3U] &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 8002ce4:	697b      	ldr	r3, [r7, #20]
 8002ce6:	08da      	lsrs	r2, r3, #3
 8002ce8:	687b      	ldr	r3, [r7, #4]
 8002cea:	3208      	adds	r2, #8
 8002cec:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 8002cf0:	697b      	ldr	r3, [r7, #20]
 8002cf2:	f003 0307 	and.w	r3, r3, #7
 8002cf6:	009b      	lsls	r3, r3, #2
 8002cf8:	220f      	movs	r2, #15
 8002cfa:	fa02 f303 	lsl.w	r3, r2, r3
 8002cfe:	43db      	mvns	r3, r3
 8002d00:	697a      	ldr	r2, [r7, #20]
 8002d02:	08d2      	lsrs	r2, r2, #3
 8002d04:	4019      	ands	r1, r3
 8002d06:	687b      	ldr	r3, [r7, #4]
 8002d08:	3208      	adds	r2, #8
 8002d0a:	f843 1022 	str.w	r1, [r3, r2, lsl #2]

      /* Deactivate the Pull-up and Pull-down resistor for the current IO */
      GPIOx->PUPDR &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 8002d0e:	687b      	ldr	r3, [r7, #4]
 8002d10:	68da      	ldr	r2, [r3, #12]
 8002d12:	697b      	ldr	r3, [r7, #20]
 8002d14:	005b      	lsls	r3, r3, #1
 8002d16:	2103      	movs	r1, #3
 8002d18:	fa01 f303 	lsl.w	r3, r1, r3
 8002d1c:	43db      	mvns	r3, r3
 8002d1e:	401a      	ands	r2, r3
 8002d20:	687b      	ldr	r3, [r7, #4]
 8002d22:	60da      	str	r2, [r3, #12]

      /* Configure the default value IO Output Type */
      GPIOx->OTYPER  &= ~(GPIO_OTYPER_OT_0 << position) ;
 8002d24:	687b      	ldr	r3, [r7, #4]
 8002d26:	685a      	ldr	r2, [r3, #4]
 8002d28:	2101      	movs	r1, #1
 8002d2a:	697b      	ldr	r3, [r7, #20]
 8002d2c:	fa01 f303 	lsl.w	r3, r1, r3
 8002d30:	43db      	mvns	r3, r3
 8002d32:	401a      	ands	r2, r3
 8002d34:	687b      	ldr	r3, [r7, #4]
 8002d36:	605a      	str	r2, [r3, #4]

      /* Configure the default value for IO Speed */
      GPIOx->OSPEEDR &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 8002d38:	687b      	ldr	r3, [r7, #4]
 8002d3a:	689a      	ldr	r2, [r3, #8]
 8002d3c:	697b      	ldr	r3, [r7, #20]
 8002d3e:	005b      	lsls	r3, r3, #1
 8002d40:	2103      	movs	r1, #3
 8002d42:	fa01 f303 	lsl.w	r3, r1, r3
 8002d46:	43db      	mvns	r3, r3
 8002d48:	401a      	ands	r2, r3
 8002d4a:	687b      	ldr	r3, [r7, #4]
 8002d4c:	609a      	str	r2, [r3, #8]
  for(position = 0U; position < GPIO_NUMBER; position++)
 8002d4e:	697b      	ldr	r3, [r7, #20]
 8002d50:	3301      	adds	r3, #1
 8002d52:	617b      	str	r3, [r7, #20]
 8002d54:	697b      	ldr	r3, [r7, #20]
 8002d56:	2b0f      	cmp	r3, #15
 8002d58:	f67f af22 	bls.w	8002ba0 <HAL_GPIO_DeInit+0x1c>
    }
  }
}
 8002d5c:	bf00      	nop
 8002d5e:	bf00      	nop
 8002d60:	371c      	adds	r7, #28
 8002d62:	46bd      	mov	sp, r7
 8002d64:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002d68:	4770      	bx	lr
 8002d6a:	bf00      	nop
 8002d6c:	40013800 	.word	0x40013800
 8002d70:	40020000 	.word	0x40020000
 8002d74:	40020400 	.word	0x40020400
 8002d78:	40020800 	.word	0x40020800
 8002d7c:	40020c00 	.word	0x40020c00
 8002d80:	40021000 	.word	0x40021000
 8002d84:	40021400 	.word	0x40021400
 8002d88:	40021800 	.word	0x40021800
 8002d8c:	40021c00 	.word	0x40021c00
 8002d90:	40022000 	.word	0x40022000
 8002d94:	40022400 	.word	0x40022400
 8002d98:	40013c00 	.word	0x40013c00

08002d9c <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8002d9c:	b480      	push	{r7}
 8002d9e:	b083      	sub	sp, #12
 8002da0:	af00      	add	r7, sp, #0
 8002da2:	6078      	str	r0, [r7, #4]
 8002da4:	460b      	mov	r3, r1
 8002da6:	807b      	strh	r3, [r7, #2]
 8002da8:	4613      	mov	r3, r2
 8002daa:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8002dac:	787b      	ldrb	r3, [r7, #1]
 8002dae:	2b00      	cmp	r3, #0
 8002db0:	d003      	beq.n	8002dba <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8002db2:	887a      	ldrh	r2, [r7, #2]
 8002db4:	687b      	ldr	r3, [r7, #4]
 8002db6:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
  }
}
 8002db8:	e003      	b.n	8002dc2 <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 8002dba:	887b      	ldrh	r3, [r7, #2]
 8002dbc:	041a      	lsls	r2, r3, #16
 8002dbe:	687b      	ldr	r3, [r7, #4]
 8002dc0:	619a      	str	r2, [r3, #24]
}
 8002dc2:	bf00      	nop
 8002dc4:	370c      	adds	r7, #12
 8002dc6:	46bd      	mov	sp, r7
 8002dc8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002dcc:	4770      	bx	lr
	...

08002dd0 <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 8002dd0:	b580      	push	{r7, lr}
 8002dd2:	b084      	sub	sp, #16
 8002dd4:	af00      	add	r7, sp, #0
 8002dd6:	6078      	str	r0, [r7, #4]
  uint32_t freqrange;
  uint32_t pclk1;

  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 8002dd8:	687b      	ldr	r3, [r7, #4]
 8002dda:	2b00      	cmp	r3, #0
 8002ddc:	d101      	bne.n	8002de2 <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 8002dde:	2301      	movs	r3, #1
 8002de0:	e12b      	b.n	800303a <HAL_I2C_Init+0x26a>
  assert_param(IS_I2C_DUAL_ADDRESS(hi2c->Init.DualAddressMode));
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 8002de2:	687b      	ldr	r3, [r7, #4]
 8002de4:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8002de8:	b2db      	uxtb	r3, r3
 8002dea:	2b00      	cmp	r3, #0
 8002dec:	d106      	bne.n	8002dfc <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 8002dee:	687b      	ldr	r3, [r7, #4]
 8002df0:	2200      	movs	r2, #0
 8002df2:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_I2C_MspInit(hi2c);
 8002df6:	6878      	ldr	r0, [r7, #4]
 8002df8:	f7fe ff0a 	bl	8001c10 <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 8002dfc:	687b      	ldr	r3, [r7, #4]
 8002dfe:	2224      	movs	r2, #36	@ 0x24
 8002e00:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 8002e04:	687b      	ldr	r3, [r7, #4]
 8002e06:	681b      	ldr	r3, [r3, #0]
 8002e08:	681a      	ldr	r2, [r3, #0]
 8002e0a:	687b      	ldr	r3, [r7, #4]
 8002e0c:	681b      	ldr	r3, [r3, #0]
 8002e0e:	f022 0201 	bic.w	r2, r2, #1
 8002e12:	601a      	str	r2, [r3, #0]

  /*Reset I2C*/
  hi2c->Instance->CR1 |= I2C_CR1_SWRST;
 8002e14:	687b      	ldr	r3, [r7, #4]
 8002e16:	681b      	ldr	r3, [r3, #0]
 8002e18:	681a      	ldr	r2, [r3, #0]
 8002e1a:	687b      	ldr	r3, [r7, #4]
 8002e1c:	681b      	ldr	r3, [r3, #0]
 8002e1e:	f442 4200 	orr.w	r2, r2, #32768	@ 0x8000
 8002e22:	601a      	str	r2, [r3, #0]
  hi2c->Instance->CR1 &= ~I2C_CR1_SWRST;
 8002e24:	687b      	ldr	r3, [r7, #4]
 8002e26:	681b      	ldr	r3, [r3, #0]
 8002e28:	681a      	ldr	r2, [r3, #0]
 8002e2a:	687b      	ldr	r3, [r7, #4]
 8002e2c:	681b      	ldr	r3, [r3, #0]
 8002e2e:	f422 4200 	bic.w	r2, r2, #32768	@ 0x8000
 8002e32:	601a      	str	r2, [r3, #0]

  /* Get PCLK1 frequency */
  pclk1 = HAL_RCC_GetPCLK1Freq();
 8002e34:	f001 ff82 	bl	8004d3c <HAL_RCC_GetPCLK1Freq>
 8002e38:	60f8      	str	r0, [r7, #12]

  /* Check the minimum allowed PCLK1 frequency */
  if (I2C_MIN_PCLK_FREQ(pclk1, hi2c->Init.ClockSpeed) == 1U)
 8002e3a:	687b      	ldr	r3, [r7, #4]
 8002e3c:	685b      	ldr	r3, [r3, #4]
 8002e3e:	4a81      	ldr	r2, [pc, #516]	@ (8003044 <HAL_I2C_Init+0x274>)
 8002e40:	4293      	cmp	r3, r2
 8002e42:	d807      	bhi.n	8002e54 <HAL_I2C_Init+0x84>
 8002e44:	68fb      	ldr	r3, [r7, #12]
 8002e46:	4a80      	ldr	r2, [pc, #512]	@ (8003048 <HAL_I2C_Init+0x278>)
 8002e48:	4293      	cmp	r3, r2
 8002e4a:	bf94      	ite	ls
 8002e4c:	2301      	movls	r3, #1
 8002e4e:	2300      	movhi	r3, #0
 8002e50:	b2db      	uxtb	r3, r3
 8002e52:	e006      	b.n	8002e62 <HAL_I2C_Init+0x92>
 8002e54:	68fb      	ldr	r3, [r7, #12]
 8002e56:	4a7d      	ldr	r2, [pc, #500]	@ (800304c <HAL_I2C_Init+0x27c>)
 8002e58:	4293      	cmp	r3, r2
 8002e5a:	bf94      	ite	ls
 8002e5c:	2301      	movls	r3, #1
 8002e5e:	2300      	movhi	r3, #0
 8002e60:	b2db      	uxtb	r3, r3
 8002e62:	2b00      	cmp	r3, #0
 8002e64:	d001      	beq.n	8002e6a <HAL_I2C_Init+0x9a>
  {
    return HAL_ERROR;
 8002e66:	2301      	movs	r3, #1
 8002e68:	e0e7      	b.n	800303a <HAL_I2C_Init+0x26a>
  }

  /* Calculate frequency range */
  freqrange = I2C_FREQRANGE(pclk1);
 8002e6a:	68fb      	ldr	r3, [r7, #12]
 8002e6c:	4a78      	ldr	r2, [pc, #480]	@ (8003050 <HAL_I2C_Init+0x280>)
 8002e6e:	fba2 2303 	umull	r2, r3, r2, r3
 8002e72:	0c9b      	lsrs	r3, r3, #18
 8002e74:	60bb      	str	r3, [r7, #8]

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Frequency range */
  MODIFY_REG(hi2c->Instance->CR2, I2C_CR2_FREQ, freqrange);
 8002e76:	687b      	ldr	r3, [r7, #4]
 8002e78:	681b      	ldr	r3, [r3, #0]
 8002e7a:	685b      	ldr	r3, [r3, #4]
 8002e7c:	f023 013f 	bic.w	r1, r3, #63	@ 0x3f
 8002e80:	687b      	ldr	r3, [r7, #4]
 8002e82:	681b      	ldr	r3, [r3, #0]
 8002e84:	68ba      	ldr	r2, [r7, #8]
 8002e86:	430a      	orrs	r2, r1
 8002e88:	605a      	str	r2, [r3, #4]

  /*---------------------------- I2Cx TRISE Configuration --------------------*/
  /* Configure I2Cx: Rise Time */
  MODIFY_REG(hi2c->Instance->TRISE, I2C_TRISE_TRISE, I2C_RISE_TIME(freqrange, hi2c->Init.ClockSpeed));
 8002e8a:	687b      	ldr	r3, [r7, #4]
 8002e8c:	681b      	ldr	r3, [r3, #0]
 8002e8e:	6a1b      	ldr	r3, [r3, #32]
 8002e90:	f023 013f 	bic.w	r1, r3, #63	@ 0x3f
 8002e94:	687b      	ldr	r3, [r7, #4]
 8002e96:	685b      	ldr	r3, [r3, #4]
 8002e98:	4a6a      	ldr	r2, [pc, #424]	@ (8003044 <HAL_I2C_Init+0x274>)
 8002e9a:	4293      	cmp	r3, r2
 8002e9c:	d802      	bhi.n	8002ea4 <HAL_I2C_Init+0xd4>
 8002e9e:	68bb      	ldr	r3, [r7, #8]
 8002ea0:	3301      	adds	r3, #1
 8002ea2:	e009      	b.n	8002eb8 <HAL_I2C_Init+0xe8>
 8002ea4:	68bb      	ldr	r3, [r7, #8]
 8002ea6:	f44f 7296 	mov.w	r2, #300	@ 0x12c
 8002eaa:	fb02 f303 	mul.w	r3, r2, r3
 8002eae:	4a69      	ldr	r2, [pc, #420]	@ (8003054 <HAL_I2C_Init+0x284>)
 8002eb0:	fba2 2303 	umull	r2, r3, r2, r3
 8002eb4:	099b      	lsrs	r3, r3, #6
 8002eb6:	3301      	adds	r3, #1
 8002eb8:	687a      	ldr	r2, [r7, #4]
 8002eba:	6812      	ldr	r2, [r2, #0]
 8002ebc:	430b      	orrs	r3, r1
 8002ebe:	6213      	str	r3, [r2, #32]

  /*---------------------------- I2Cx CCR Configuration ----------------------*/
  /* Configure I2Cx: Speed */
  MODIFY_REG(hi2c->Instance->CCR, (I2C_CCR_FS | I2C_CCR_DUTY | I2C_CCR_CCR), I2C_SPEED(pclk1, hi2c->Init.ClockSpeed, hi2c->Init.DutyCycle));
 8002ec0:	687b      	ldr	r3, [r7, #4]
 8002ec2:	681b      	ldr	r3, [r3, #0]
 8002ec4:	69db      	ldr	r3, [r3, #28]
 8002ec6:	f423 424f 	bic.w	r2, r3, #52992	@ 0xcf00
 8002eca:	f022 02ff 	bic.w	r2, r2, #255	@ 0xff
 8002ece:	687b      	ldr	r3, [r7, #4]
 8002ed0:	685b      	ldr	r3, [r3, #4]
 8002ed2:	495c      	ldr	r1, [pc, #368]	@ (8003044 <HAL_I2C_Init+0x274>)
 8002ed4:	428b      	cmp	r3, r1
 8002ed6:	d819      	bhi.n	8002f0c <HAL_I2C_Init+0x13c>
 8002ed8:	68fb      	ldr	r3, [r7, #12]
 8002eda:	1e59      	subs	r1, r3, #1
 8002edc:	687b      	ldr	r3, [r7, #4]
 8002ede:	685b      	ldr	r3, [r3, #4]
 8002ee0:	005b      	lsls	r3, r3, #1
 8002ee2:	fbb1 f3f3 	udiv	r3, r1, r3
 8002ee6:	1c59      	adds	r1, r3, #1
 8002ee8:	f640 73fc 	movw	r3, #4092	@ 0xffc
 8002eec:	400b      	ands	r3, r1
 8002eee:	2b00      	cmp	r3, #0
 8002ef0:	d00a      	beq.n	8002f08 <HAL_I2C_Init+0x138>
 8002ef2:	68fb      	ldr	r3, [r7, #12]
 8002ef4:	1e59      	subs	r1, r3, #1
 8002ef6:	687b      	ldr	r3, [r7, #4]
 8002ef8:	685b      	ldr	r3, [r3, #4]
 8002efa:	005b      	lsls	r3, r3, #1
 8002efc:	fbb1 f3f3 	udiv	r3, r1, r3
 8002f00:	3301      	adds	r3, #1
 8002f02:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8002f06:	e051      	b.n	8002fac <HAL_I2C_Init+0x1dc>
 8002f08:	2304      	movs	r3, #4
 8002f0a:	e04f      	b.n	8002fac <HAL_I2C_Init+0x1dc>
 8002f0c:	687b      	ldr	r3, [r7, #4]
 8002f0e:	689b      	ldr	r3, [r3, #8]
 8002f10:	2b00      	cmp	r3, #0
 8002f12:	d111      	bne.n	8002f38 <HAL_I2C_Init+0x168>
 8002f14:	68fb      	ldr	r3, [r7, #12]
 8002f16:	1e58      	subs	r0, r3, #1
 8002f18:	687b      	ldr	r3, [r7, #4]
 8002f1a:	6859      	ldr	r1, [r3, #4]
 8002f1c:	460b      	mov	r3, r1
 8002f1e:	005b      	lsls	r3, r3, #1
 8002f20:	440b      	add	r3, r1
 8002f22:	fbb0 f3f3 	udiv	r3, r0, r3
 8002f26:	3301      	adds	r3, #1
 8002f28:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8002f2c:	2b00      	cmp	r3, #0
 8002f2e:	bf0c      	ite	eq
 8002f30:	2301      	moveq	r3, #1
 8002f32:	2300      	movne	r3, #0
 8002f34:	b2db      	uxtb	r3, r3
 8002f36:	e012      	b.n	8002f5e <HAL_I2C_Init+0x18e>
 8002f38:	68fb      	ldr	r3, [r7, #12]
 8002f3a:	1e58      	subs	r0, r3, #1
 8002f3c:	687b      	ldr	r3, [r7, #4]
 8002f3e:	6859      	ldr	r1, [r3, #4]
 8002f40:	460b      	mov	r3, r1
 8002f42:	009b      	lsls	r3, r3, #2
 8002f44:	440b      	add	r3, r1
 8002f46:	0099      	lsls	r1, r3, #2
 8002f48:	440b      	add	r3, r1
 8002f4a:	fbb0 f3f3 	udiv	r3, r0, r3
 8002f4e:	3301      	adds	r3, #1
 8002f50:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8002f54:	2b00      	cmp	r3, #0
 8002f56:	bf0c      	ite	eq
 8002f58:	2301      	moveq	r3, #1
 8002f5a:	2300      	movne	r3, #0
 8002f5c:	b2db      	uxtb	r3, r3
 8002f5e:	2b00      	cmp	r3, #0
 8002f60:	d001      	beq.n	8002f66 <HAL_I2C_Init+0x196>
 8002f62:	2301      	movs	r3, #1
 8002f64:	e022      	b.n	8002fac <HAL_I2C_Init+0x1dc>
 8002f66:	687b      	ldr	r3, [r7, #4]
 8002f68:	689b      	ldr	r3, [r3, #8]
 8002f6a:	2b00      	cmp	r3, #0
 8002f6c:	d10e      	bne.n	8002f8c <HAL_I2C_Init+0x1bc>
 8002f6e:	68fb      	ldr	r3, [r7, #12]
 8002f70:	1e58      	subs	r0, r3, #1
 8002f72:	687b      	ldr	r3, [r7, #4]
 8002f74:	6859      	ldr	r1, [r3, #4]
 8002f76:	460b      	mov	r3, r1
 8002f78:	005b      	lsls	r3, r3, #1
 8002f7a:	440b      	add	r3, r1
 8002f7c:	fbb0 f3f3 	udiv	r3, r0, r3
 8002f80:	3301      	adds	r3, #1
 8002f82:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8002f86:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8002f8a:	e00f      	b.n	8002fac <HAL_I2C_Init+0x1dc>
 8002f8c:	68fb      	ldr	r3, [r7, #12]
 8002f8e:	1e58      	subs	r0, r3, #1
 8002f90:	687b      	ldr	r3, [r7, #4]
 8002f92:	6859      	ldr	r1, [r3, #4]
 8002f94:	460b      	mov	r3, r1
 8002f96:	009b      	lsls	r3, r3, #2
 8002f98:	440b      	add	r3, r1
 8002f9a:	0099      	lsls	r1, r3, #2
 8002f9c:	440b      	add	r3, r1
 8002f9e:	fbb0 f3f3 	udiv	r3, r0, r3
 8002fa2:	3301      	adds	r3, #1
 8002fa4:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8002fa8:	f443 4340 	orr.w	r3, r3, #49152	@ 0xc000
 8002fac:	6879      	ldr	r1, [r7, #4]
 8002fae:	6809      	ldr	r1, [r1, #0]
 8002fb0:	4313      	orrs	r3, r2
 8002fb2:	61cb      	str	r3, [r1, #28]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  MODIFY_REG(hi2c->Instance->CR1, (I2C_CR1_ENGC | I2C_CR1_NOSTRETCH), (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode));
 8002fb4:	687b      	ldr	r3, [r7, #4]
 8002fb6:	681b      	ldr	r3, [r3, #0]
 8002fb8:	681b      	ldr	r3, [r3, #0]
 8002fba:	f023 01c0 	bic.w	r1, r3, #192	@ 0xc0
 8002fbe:	687b      	ldr	r3, [r7, #4]
 8002fc0:	69da      	ldr	r2, [r3, #28]
 8002fc2:	687b      	ldr	r3, [r7, #4]
 8002fc4:	6a1b      	ldr	r3, [r3, #32]
 8002fc6:	431a      	orrs	r2, r3
 8002fc8:	687b      	ldr	r3, [r7, #4]
 8002fca:	681b      	ldr	r3, [r3, #0]
 8002fcc:	430a      	orrs	r2, r1
 8002fce:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Configure I2Cx: Own Address1 and addressing mode */
  MODIFY_REG(hi2c->Instance->OAR1, (I2C_OAR1_ADDMODE | I2C_OAR1_ADD8_9 | I2C_OAR1_ADD1_7 | I2C_OAR1_ADD0), (hi2c->Init.AddressingMode | hi2c->Init.OwnAddress1));
 8002fd0:	687b      	ldr	r3, [r7, #4]
 8002fd2:	681b      	ldr	r3, [r3, #0]
 8002fd4:	689b      	ldr	r3, [r3, #8]
 8002fd6:	f423 4303 	bic.w	r3, r3, #33536	@ 0x8300
 8002fda:	f023 03ff 	bic.w	r3, r3, #255	@ 0xff
 8002fde:	687a      	ldr	r2, [r7, #4]
 8002fe0:	6911      	ldr	r1, [r2, #16]
 8002fe2:	687a      	ldr	r2, [r7, #4]
 8002fe4:	68d2      	ldr	r2, [r2, #12]
 8002fe6:	4311      	orrs	r1, r2
 8002fe8:	687a      	ldr	r2, [r7, #4]
 8002fea:	6812      	ldr	r2, [r2, #0]
 8002fec:	430b      	orrs	r3, r1
 8002fee:	6093      	str	r3, [r2, #8]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Configure I2Cx: Dual mode and Own Address2 */
  MODIFY_REG(hi2c->Instance->OAR2, (I2C_OAR2_ENDUAL | I2C_OAR2_ADD2), (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2));
 8002ff0:	687b      	ldr	r3, [r7, #4]
 8002ff2:	681b      	ldr	r3, [r3, #0]
 8002ff4:	68db      	ldr	r3, [r3, #12]
 8002ff6:	f023 01ff 	bic.w	r1, r3, #255	@ 0xff
 8002ffa:	687b      	ldr	r3, [r7, #4]
 8002ffc:	695a      	ldr	r2, [r3, #20]
 8002ffe:	687b      	ldr	r3, [r7, #4]
 8003000:	699b      	ldr	r3, [r3, #24]
 8003002:	431a      	orrs	r2, r3
 8003004:	687b      	ldr	r3, [r7, #4]
 8003006:	681b      	ldr	r3, [r3, #0]
 8003008:	430a      	orrs	r2, r1
 800300a:	60da      	str	r2, [r3, #12]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 800300c:	687b      	ldr	r3, [r7, #4]
 800300e:	681b      	ldr	r3, [r3, #0]
 8003010:	681a      	ldr	r2, [r3, #0]
 8003012:	687b      	ldr	r3, [r7, #4]
 8003014:	681b      	ldr	r3, [r3, #0]
 8003016:	f042 0201 	orr.w	r2, r2, #1
 800301a:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 800301c:	687b      	ldr	r3, [r7, #4]
 800301e:	2200      	movs	r2, #0
 8003020:	641a      	str	r2, [r3, #64]	@ 0x40
  hi2c->State = HAL_I2C_STATE_READY;
 8003022:	687b      	ldr	r3, [r7, #4]
 8003024:	2220      	movs	r2, #32
 8003026:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
  hi2c->PreviousState = I2C_STATE_NONE;
 800302a:	687b      	ldr	r3, [r7, #4]
 800302c:	2200      	movs	r2, #0
 800302e:	631a      	str	r2, [r3, #48]	@ 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 8003030:	687b      	ldr	r3, [r7, #4]
 8003032:	2200      	movs	r2, #0
 8003034:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e

  return HAL_OK;
 8003038:	2300      	movs	r3, #0
}
 800303a:	4618      	mov	r0, r3
 800303c:	3710      	adds	r7, #16
 800303e:	46bd      	mov	sp, r7
 8003040:	bd80      	pop	{r7, pc}
 8003042:	bf00      	nop
 8003044:	000186a0 	.word	0x000186a0
 8003048:	001e847f 	.word	0x001e847f
 800304c:	003d08ff 	.word	0x003d08ff
 8003050:	431bde83 	.word	0x431bde83
 8003054:	10624dd3 	.word	0x10624dd3

08003058 <HAL_I2C_Mem_Write>:
  * @param  Size Amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Mem_Write(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8003058:	b580      	push	{r7, lr}
 800305a:	b088      	sub	sp, #32
 800305c:	af02      	add	r7, sp, #8
 800305e:	60f8      	str	r0, [r7, #12]
 8003060:	4608      	mov	r0, r1
 8003062:	4611      	mov	r1, r2
 8003064:	461a      	mov	r2, r3
 8003066:	4603      	mov	r3, r0
 8003068:	817b      	strh	r3, [r7, #10]
 800306a:	460b      	mov	r3, r1
 800306c:	813b      	strh	r3, [r7, #8]
 800306e:	4613      	mov	r3, r2
 8003070:	80fb      	strh	r3, [r7, #6]
  /* Init tickstart for timeout management*/
  uint32_t tickstart = HAL_GetTick();
 8003072:	f7ff fac5 	bl	8002600 <HAL_GetTick>
 8003076:	6178      	str	r0, [r7, #20]

  /* Check the parameters */
  assert_param(IS_I2C_MEMADD_SIZE(MemAddSize));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8003078:	68fb      	ldr	r3, [r7, #12]
 800307a:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 800307e:	b2db      	uxtb	r3, r3
 8003080:	2b20      	cmp	r3, #32
 8003082:	f040 80d9 	bne.w	8003238 <HAL_I2C_Mem_Write+0x1e0>
  {
    /* Wait until BUSY flag is reset */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 8003086:	697b      	ldr	r3, [r7, #20]
 8003088:	9300      	str	r3, [sp, #0]
 800308a:	2319      	movs	r3, #25
 800308c:	2201      	movs	r2, #1
 800308e:	496d      	ldr	r1, [pc, #436]	@ (8003244 <HAL_I2C_Mem_Write+0x1ec>)
 8003090:	68f8      	ldr	r0, [r7, #12]
 8003092:	f000 fc8b 	bl	80039ac <I2C_WaitOnFlagUntilTimeout>
 8003096:	4603      	mov	r3, r0
 8003098:	2b00      	cmp	r3, #0
 800309a:	d001      	beq.n	80030a0 <HAL_I2C_Mem_Write+0x48>
    {
      return HAL_BUSY;
 800309c:	2302      	movs	r3, #2
 800309e:	e0cc      	b.n	800323a <HAL_I2C_Mem_Write+0x1e2>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 80030a0:	68fb      	ldr	r3, [r7, #12]
 80030a2:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 80030a6:	2b01      	cmp	r3, #1
 80030a8:	d101      	bne.n	80030ae <HAL_I2C_Mem_Write+0x56>
 80030aa:	2302      	movs	r3, #2
 80030ac:	e0c5      	b.n	800323a <HAL_I2C_Mem_Write+0x1e2>
 80030ae:	68fb      	ldr	r3, [r7, #12]
 80030b0:	2201      	movs	r2, #1
 80030b2:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 80030b6:	68fb      	ldr	r3, [r7, #12]
 80030b8:	681b      	ldr	r3, [r3, #0]
 80030ba:	681b      	ldr	r3, [r3, #0]
 80030bc:	f003 0301 	and.w	r3, r3, #1
 80030c0:	2b01      	cmp	r3, #1
 80030c2:	d007      	beq.n	80030d4 <HAL_I2C_Mem_Write+0x7c>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 80030c4:	68fb      	ldr	r3, [r7, #12]
 80030c6:	681b      	ldr	r3, [r3, #0]
 80030c8:	681a      	ldr	r2, [r3, #0]
 80030ca:	68fb      	ldr	r3, [r7, #12]
 80030cc:	681b      	ldr	r3, [r3, #0]
 80030ce:	f042 0201 	orr.w	r2, r2, #1
 80030d2:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 80030d4:	68fb      	ldr	r3, [r7, #12]
 80030d6:	681b      	ldr	r3, [r3, #0]
 80030d8:	681a      	ldr	r2, [r3, #0]
 80030da:	68fb      	ldr	r3, [r7, #12]
 80030dc:	681b      	ldr	r3, [r3, #0]
 80030de:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 80030e2:	601a      	str	r2, [r3, #0]

    hi2c->State     = HAL_I2C_STATE_BUSY_TX;
 80030e4:	68fb      	ldr	r3, [r7, #12]
 80030e6:	2221      	movs	r2, #33	@ 0x21
 80030e8:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
    hi2c->Mode      = HAL_I2C_MODE_MEM;
 80030ec:	68fb      	ldr	r3, [r7, #12]
 80030ee:	2240      	movs	r2, #64	@ 0x40
 80030f0:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 80030f4:	68fb      	ldr	r3, [r7, #12]
 80030f6:	2200      	movs	r2, #0
 80030f8:	641a      	str	r2, [r3, #64]	@ 0x40

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 80030fa:	68fb      	ldr	r3, [r7, #12]
 80030fc:	6a3a      	ldr	r2, [r7, #32]
 80030fe:	625a      	str	r2, [r3, #36]	@ 0x24
    hi2c->XferCount   = Size;
 8003100:	68fb      	ldr	r3, [r7, #12]
 8003102:	8cba      	ldrh	r2, [r7, #36]	@ 0x24
 8003104:	855a      	strh	r2, [r3, #42]	@ 0x2a
    hi2c->XferSize    = hi2c->XferCount;
 8003106:	68fb      	ldr	r3, [r7, #12]
 8003108:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 800310a:	b29a      	uxth	r2, r3
 800310c:	68fb      	ldr	r3, [r7, #12]
 800310e:	851a      	strh	r2, [r3, #40]	@ 0x28
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 8003110:	68fb      	ldr	r3, [r7, #12]
 8003112:	4a4d      	ldr	r2, [pc, #308]	@ (8003248 <HAL_I2C_Mem_Write+0x1f0>)
 8003114:	62da      	str	r2, [r3, #44]	@ 0x2c

    /* Send Slave Address and Memory Address */
    if (I2C_RequestMemoryWrite(hi2c, DevAddress, MemAddress, MemAddSize, Timeout, tickstart) != HAL_OK)
 8003116:	88f8      	ldrh	r0, [r7, #6]
 8003118:	893a      	ldrh	r2, [r7, #8]
 800311a:	8979      	ldrh	r1, [r7, #10]
 800311c:	697b      	ldr	r3, [r7, #20]
 800311e:	9301      	str	r3, [sp, #4]
 8003120:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8003122:	9300      	str	r3, [sp, #0]
 8003124:	4603      	mov	r3, r0
 8003126:	68f8      	ldr	r0, [r7, #12]
 8003128:	f000 fac2 	bl	80036b0 <I2C_RequestMemoryWrite>
 800312c:	4603      	mov	r3, r0
 800312e:	2b00      	cmp	r3, #0
 8003130:	d052      	beq.n	80031d8 <HAL_I2C_Mem_Write+0x180>
    {
      return HAL_ERROR;
 8003132:	2301      	movs	r3, #1
 8003134:	e081      	b.n	800323a <HAL_I2C_Mem_Write+0x1e2>
    }

    while (hi2c->XferSize > 0U)
    {
      /* Wait until TXE flag is set */
      if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8003136:	697a      	ldr	r2, [r7, #20]
 8003138:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 800313a:	68f8      	ldr	r0, [r7, #12]
 800313c:	f000 fd50 	bl	8003be0 <I2C_WaitOnTXEFlagUntilTimeout>
 8003140:	4603      	mov	r3, r0
 8003142:	2b00      	cmp	r3, #0
 8003144:	d00d      	beq.n	8003162 <HAL_I2C_Mem_Write+0x10a>
      {
        if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8003146:	68fb      	ldr	r3, [r7, #12]
 8003148:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800314a:	2b04      	cmp	r3, #4
 800314c:	d107      	bne.n	800315e <HAL_I2C_Mem_Write+0x106>
        {
          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800314e:	68fb      	ldr	r3, [r7, #12]
 8003150:	681b      	ldr	r3, [r3, #0]
 8003152:	681a      	ldr	r2, [r3, #0]
 8003154:	68fb      	ldr	r3, [r7, #12]
 8003156:	681b      	ldr	r3, [r3, #0]
 8003158:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 800315c:	601a      	str	r2, [r3, #0]
        }
        return HAL_ERROR;
 800315e:	2301      	movs	r3, #1
 8003160:	e06b      	b.n	800323a <HAL_I2C_Mem_Write+0x1e2>
      }

      /* Write data to DR */
      hi2c->Instance->DR = *hi2c->pBuffPtr;
 8003162:	68fb      	ldr	r3, [r7, #12]
 8003164:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003166:	781a      	ldrb	r2, [r3, #0]
 8003168:	68fb      	ldr	r3, [r7, #12]
 800316a:	681b      	ldr	r3, [r3, #0]
 800316c:	611a      	str	r2, [r3, #16]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 800316e:	68fb      	ldr	r3, [r7, #12]
 8003170:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003172:	1c5a      	adds	r2, r3, #1
 8003174:	68fb      	ldr	r3, [r7, #12]
 8003176:	625a      	str	r2, [r3, #36]	@ 0x24

      /* Update counter */
      hi2c->XferSize--;
 8003178:	68fb      	ldr	r3, [r7, #12]
 800317a:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 800317c:	3b01      	subs	r3, #1
 800317e:	b29a      	uxth	r2, r3
 8003180:	68fb      	ldr	r3, [r7, #12]
 8003182:	851a      	strh	r2, [r3, #40]	@ 0x28
      hi2c->XferCount--;
 8003184:	68fb      	ldr	r3, [r7, #12]
 8003186:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8003188:	b29b      	uxth	r3, r3
 800318a:	3b01      	subs	r3, #1
 800318c:	b29a      	uxth	r2, r3
 800318e:	68fb      	ldr	r3, [r7, #12]
 8003190:	855a      	strh	r2, [r3, #42]	@ 0x2a

      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET) && (hi2c->XferSize != 0U))
 8003192:	68fb      	ldr	r3, [r7, #12]
 8003194:	681b      	ldr	r3, [r3, #0]
 8003196:	695b      	ldr	r3, [r3, #20]
 8003198:	f003 0304 	and.w	r3, r3, #4
 800319c:	2b04      	cmp	r3, #4
 800319e:	d11b      	bne.n	80031d8 <HAL_I2C_Mem_Write+0x180>
 80031a0:	68fb      	ldr	r3, [r7, #12]
 80031a2:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 80031a4:	2b00      	cmp	r3, #0
 80031a6:	d017      	beq.n	80031d8 <HAL_I2C_Mem_Write+0x180>
      {
        /* Write data to DR */
        hi2c->Instance->DR = *hi2c->pBuffPtr;
 80031a8:	68fb      	ldr	r3, [r7, #12]
 80031aa:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80031ac:	781a      	ldrb	r2, [r3, #0]
 80031ae:	68fb      	ldr	r3, [r7, #12]
 80031b0:	681b      	ldr	r3, [r3, #0]
 80031b2:	611a      	str	r2, [r3, #16]

        /* Increment Buffer pointer */
        hi2c->pBuffPtr++;
 80031b4:	68fb      	ldr	r3, [r7, #12]
 80031b6:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80031b8:	1c5a      	adds	r2, r3, #1
 80031ba:	68fb      	ldr	r3, [r7, #12]
 80031bc:	625a      	str	r2, [r3, #36]	@ 0x24

        /* Update counter */
        hi2c->XferSize--;
 80031be:	68fb      	ldr	r3, [r7, #12]
 80031c0:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 80031c2:	3b01      	subs	r3, #1
 80031c4:	b29a      	uxth	r2, r3
 80031c6:	68fb      	ldr	r3, [r7, #12]
 80031c8:	851a      	strh	r2, [r3, #40]	@ 0x28
        hi2c->XferCount--;
 80031ca:	68fb      	ldr	r3, [r7, #12]
 80031cc:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80031ce:	b29b      	uxth	r3, r3
 80031d0:	3b01      	subs	r3, #1
 80031d2:	b29a      	uxth	r2, r3
 80031d4:	68fb      	ldr	r3, [r7, #12]
 80031d6:	855a      	strh	r2, [r3, #42]	@ 0x2a
    while (hi2c->XferSize > 0U)
 80031d8:	68fb      	ldr	r3, [r7, #12]
 80031da:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 80031dc:	2b00      	cmp	r3, #0
 80031de:	d1aa      	bne.n	8003136 <HAL_I2C_Mem_Write+0xde>
      }
    }

    /* Wait until BTF flag is set */
    if (I2C_WaitOnBTFFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 80031e0:	697a      	ldr	r2, [r7, #20]
 80031e2:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 80031e4:	68f8      	ldr	r0, [r7, #12]
 80031e6:	f000 fd43 	bl	8003c70 <I2C_WaitOnBTFFlagUntilTimeout>
 80031ea:	4603      	mov	r3, r0
 80031ec:	2b00      	cmp	r3, #0
 80031ee:	d00d      	beq.n	800320c <HAL_I2C_Mem_Write+0x1b4>
    {
      if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 80031f0:	68fb      	ldr	r3, [r7, #12]
 80031f2:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80031f4:	2b04      	cmp	r3, #4
 80031f6:	d107      	bne.n	8003208 <HAL_I2C_Mem_Write+0x1b0>
      {
        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80031f8:	68fb      	ldr	r3, [r7, #12]
 80031fa:	681b      	ldr	r3, [r3, #0]
 80031fc:	681a      	ldr	r2, [r3, #0]
 80031fe:	68fb      	ldr	r3, [r7, #12]
 8003200:	681b      	ldr	r3, [r3, #0]
 8003202:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8003206:	601a      	str	r2, [r3, #0]
      }
      return HAL_ERROR;
 8003208:	2301      	movs	r3, #1
 800320a:	e016      	b.n	800323a <HAL_I2C_Mem_Write+0x1e2>
    }

    /* Generate Stop */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800320c:	68fb      	ldr	r3, [r7, #12]
 800320e:	681b      	ldr	r3, [r3, #0]
 8003210:	681a      	ldr	r2, [r3, #0]
 8003212:	68fb      	ldr	r3, [r7, #12]
 8003214:	681b      	ldr	r3, [r3, #0]
 8003216:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 800321a:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 800321c:	68fb      	ldr	r3, [r7, #12]
 800321e:	2220      	movs	r2, #32
 8003220:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
    hi2c->Mode = HAL_I2C_MODE_NONE;
 8003224:	68fb      	ldr	r3, [r7, #12]
 8003226:	2200      	movs	r2, #0
 8003228:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 800322c:	68fb      	ldr	r3, [r7, #12]
 800322e:	2200      	movs	r2, #0
 8003230:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    return HAL_OK;
 8003234:	2300      	movs	r3, #0
 8003236:	e000      	b.n	800323a <HAL_I2C_Mem_Write+0x1e2>
  }
  else
  {
    return HAL_BUSY;
 8003238:	2302      	movs	r3, #2
  }
}
 800323a:	4618      	mov	r0, r3
 800323c:	3718      	adds	r7, #24
 800323e:	46bd      	mov	sp, r7
 8003240:	bd80      	pop	{r7, pc}
 8003242:	bf00      	nop
 8003244:	00100002 	.word	0x00100002
 8003248:	ffff0000 	.word	0xffff0000

0800324c <HAL_I2C_Mem_Read>:
  * @param  Size Amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Mem_Read(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 800324c:	b580      	push	{r7, lr}
 800324e:	b08c      	sub	sp, #48	@ 0x30
 8003250:	af02      	add	r7, sp, #8
 8003252:	60f8      	str	r0, [r7, #12]
 8003254:	4608      	mov	r0, r1
 8003256:	4611      	mov	r1, r2
 8003258:	461a      	mov	r2, r3
 800325a:	4603      	mov	r3, r0
 800325c:	817b      	strh	r3, [r7, #10]
 800325e:	460b      	mov	r3, r1
 8003260:	813b      	strh	r3, [r7, #8]
 8003262:	4613      	mov	r3, r2
 8003264:	80fb      	strh	r3, [r7, #6]
  /* Init tickstart for timeout management*/
  uint32_t tickstart = HAL_GetTick();
 8003266:	f7ff f9cb 	bl	8002600 <HAL_GetTick>
 800326a:	6278      	str	r0, [r7, #36]	@ 0x24

  /* Check the parameters */
  assert_param(IS_I2C_MEMADD_SIZE(MemAddSize));

  if (hi2c->State == HAL_I2C_STATE_READY)
 800326c:	68fb      	ldr	r3, [r7, #12]
 800326e:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8003272:	b2db      	uxtb	r3, r3
 8003274:	2b20      	cmp	r3, #32
 8003276:	f040 8214 	bne.w	80036a2 <HAL_I2C_Mem_Read+0x456>
  {
    /* Wait until BUSY flag is reset */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 800327a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800327c:	9300      	str	r3, [sp, #0]
 800327e:	2319      	movs	r3, #25
 8003280:	2201      	movs	r2, #1
 8003282:	497b      	ldr	r1, [pc, #492]	@ (8003470 <HAL_I2C_Mem_Read+0x224>)
 8003284:	68f8      	ldr	r0, [r7, #12]
 8003286:	f000 fb91 	bl	80039ac <I2C_WaitOnFlagUntilTimeout>
 800328a:	4603      	mov	r3, r0
 800328c:	2b00      	cmp	r3, #0
 800328e:	d001      	beq.n	8003294 <HAL_I2C_Mem_Read+0x48>
    {
      return HAL_BUSY;
 8003290:	2302      	movs	r3, #2
 8003292:	e207      	b.n	80036a4 <HAL_I2C_Mem_Read+0x458>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 8003294:	68fb      	ldr	r3, [r7, #12]
 8003296:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 800329a:	2b01      	cmp	r3, #1
 800329c:	d101      	bne.n	80032a2 <HAL_I2C_Mem_Read+0x56>
 800329e:	2302      	movs	r3, #2
 80032a0:	e200      	b.n	80036a4 <HAL_I2C_Mem_Read+0x458>
 80032a2:	68fb      	ldr	r3, [r7, #12]
 80032a4:	2201      	movs	r2, #1
 80032a6:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 80032aa:	68fb      	ldr	r3, [r7, #12]
 80032ac:	681b      	ldr	r3, [r3, #0]
 80032ae:	681b      	ldr	r3, [r3, #0]
 80032b0:	f003 0301 	and.w	r3, r3, #1
 80032b4:	2b01      	cmp	r3, #1
 80032b6:	d007      	beq.n	80032c8 <HAL_I2C_Mem_Read+0x7c>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 80032b8:	68fb      	ldr	r3, [r7, #12]
 80032ba:	681b      	ldr	r3, [r3, #0]
 80032bc:	681a      	ldr	r2, [r3, #0]
 80032be:	68fb      	ldr	r3, [r7, #12]
 80032c0:	681b      	ldr	r3, [r3, #0]
 80032c2:	f042 0201 	orr.w	r2, r2, #1
 80032c6:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 80032c8:	68fb      	ldr	r3, [r7, #12]
 80032ca:	681b      	ldr	r3, [r3, #0]
 80032cc:	681a      	ldr	r2, [r3, #0]
 80032ce:	68fb      	ldr	r3, [r7, #12]
 80032d0:	681b      	ldr	r3, [r3, #0]
 80032d2:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 80032d6:	601a      	str	r2, [r3, #0]

    hi2c->State     = HAL_I2C_STATE_BUSY_RX;
 80032d8:	68fb      	ldr	r3, [r7, #12]
 80032da:	2222      	movs	r2, #34	@ 0x22
 80032dc:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
    hi2c->Mode      = HAL_I2C_MODE_MEM;
 80032e0:	68fb      	ldr	r3, [r7, #12]
 80032e2:	2240      	movs	r2, #64	@ 0x40
 80032e4:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 80032e8:	68fb      	ldr	r3, [r7, #12]
 80032ea:	2200      	movs	r2, #0
 80032ec:	641a      	str	r2, [r3, #64]	@ 0x40

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 80032ee:	68fb      	ldr	r3, [r7, #12]
 80032f0:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 80032f2:	625a      	str	r2, [r3, #36]	@ 0x24
    hi2c->XferCount   = Size;
 80032f4:	68fb      	ldr	r3, [r7, #12]
 80032f6:	8eba      	ldrh	r2, [r7, #52]	@ 0x34
 80032f8:	855a      	strh	r2, [r3, #42]	@ 0x2a
    hi2c->XferSize    = hi2c->XferCount;
 80032fa:	68fb      	ldr	r3, [r7, #12]
 80032fc:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80032fe:	b29a      	uxth	r2, r3
 8003300:	68fb      	ldr	r3, [r7, #12]
 8003302:	851a      	strh	r2, [r3, #40]	@ 0x28
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 8003304:	68fb      	ldr	r3, [r7, #12]
 8003306:	4a5b      	ldr	r2, [pc, #364]	@ (8003474 <HAL_I2C_Mem_Read+0x228>)
 8003308:	62da      	str	r2, [r3, #44]	@ 0x2c

    /* Send Slave Address and Memory Address */
    if (I2C_RequestMemoryRead(hi2c, DevAddress, MemAddress, MemAddSize, Timeout, tickstart) != HAL_OK)
 800330a:	88f8      	ldrh	r0, [r7, #6]
 800330c:	893a      	ldrh	r2, [r7, #8]
 800330e:	8979      	ldrh	r1, [r7, #10]
 8003310:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003312:	9301      	str	r3, [sp, #4]
 8003314:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8003316:	9300      	str	r3, [sp, #0]
 8003318:	4603      	mov	r3, r0
 800331a:	68f8      	ldr	r0, [r7, #12]
 800331c:	f000 fa5e 	bl	80037dc <I2C_RequestMemoryRead>
 8003320:	4603      	mov	r3, r0
 8003322:	2b00      	cmp	r3, #0
 8003324:	d001      	beq.n	800332a <HAL_I2C_Mem_Read+0xde>
    {
      return HAL_ERROR;
 8003326:	2301      	movs	r3, #1
 8003328:	e1bc      	b.n	80036a4 <HAL_I2C_Mem_Read+0x458>
    }

    if (hi2c->XferSize == 0U)
 800332a:	68fb      	ldr	r3, [r7, #12]
 800332c:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 800332e:	2b00      	cmp	r3, #0
 8003330:	d113      	bne.n	800335a <HAL_I2C_Mem_Read+0x10e>
    {
      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8003332:	2300      	movs	r3, #0
 8003334:	623b      	str	r3, [r7, #32]
 8003336:	68fb      	ldr	r3, [r7, #12]
 8003338:	681b      	ldr	r3, [r3, #0]
 800333a:	695b      	ldr	r3, [r3, #20]
 800333c:	623b      	str	r3, [r7, #32]
 800333e:	68fb      	ldr	r3, [r7, #12]
 8003340:	681b      	ldr	r3, [r3, #0]
 8003342:	699b      	ldr	r3, [r3, #24]
 8003344:	623b      	str	r3, [r7, #32]
 8003346:	6a3b      	ldr	r3, [r7, #32]

      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8003348:	68fb      	ldr	r3, [r7, #12]
 800334a:	681b      	ldr	r3, [r3, #0]
 800334c:	681a      	ldr	r2, [r3, #0]
 800334e:	68fb      	ldr	r3, [r7, #12]
 8003350:	681b      	ldr	r3, [r3, #0]
 8003352:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8003356:	601a      	str	r2, [r3, #0]
 8003358:	e190      	b.n	800367c <HAL_I2C_Mem_Read+0x430>
    }
    else if (hi2c->XferSize == 1U)
 800335a:	68fb      	ldr	r3, [r7, #12]
 800335c:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 800335e:	2b01      	cmp	r3, #1
 8003360:	d11b      	bne.n	800339a <HAL_I2C_Mem_Read+0x14e>
    {
      /* Disable Acknowledge */
      CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8003362:	68fb      	ldr	r3, [r7, #12]
 8003364:	681b      	ldr	r3, [r3, #0]
 8003366:	681a      	ldr	r2, [r3, #0]
 8003368:	68fb      	ldr	r3, [r7, #12]
 800336a:	681b      	ldr	r3, [r3, #0]
 800336c:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8003370:	601a      	str	r2, [r3, #0]

      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8003372:	2300      	movs	r3, #0
 8003374:	61fb      	str	r3, [r7, #28]
 8003376:	68fb      	ldr	r3, [r7, #12]
 8003378:	681b      	ldr	r3, [r3, #0]
 800337a:	695b      	ldr	r3, [r3, #20]
 800337c:	61fb      	str	r3, [r7, #28]
 800337e:	68fb      	ldr	r3, [r7, #12]
 8003380:	681b      	ldr	r3, [r3, #0]
 8003382:	699b      	ldr	r3, [r3, #24]
 8003384:	61fb      	str	r3, [r7, #28]
 8003386:	69fb      	ldr	r3, [r7, #28]

      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8003388:	68fb      	ldr	r3, [r7, #12]
 800338a:	681b      	ldr	r3, [r3, #0]
 800338c:	681a      	ldr	r2, [r3, #0]
 800338e:	68fb      	ldr	r3, [r7, #12]
 8003390:	681b      	ldr	r3, [r3, #0]
 8003392:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8003396:	601a      	str	r2, [r3, #0]
 8003398:	e170      	b.n	800367c <HAL_I2C_Mem_Read+0x430>
    }
    else if (hi2c->XferSize == 2U)
 800339a:	68fb      	ldr	r3, [r7, #12]
 800339c:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 800339e:	2b02      	cmp	r3, #2
 80033a0:	d11b      	bne.n	80033da <HAL_I2C_Mem_Read+0x18e>
    {
      /* Disable Acknowledge */
      CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 80033a2:	68fb      	ldr	r3, [r7, #12]
 80033a4:	681b      	ldr	r3, [r3, #0]
 80033a6:	681a      	ldr	r2, [r3, #0]
 80033a8:	68fb      	ldr	r3, [r7, #12]
 80033aa:	681b      	ldr	r3, [r3, #0]
 80033ac:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 80033b0:	601a      	str	r2, [r3, #0]

      /* Enable Pos */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 80033b2:	68fb      	ldr	r3, [r7, #12]
 80033b4:	681b      	ldr	r3, [r3, #0]
 80033b6:	681a      	ldr	r2, [r3, #0]
 80033b8:	68fb      	ldr	r3, [r7, #12]
 80033ba:	681b      	ldr	r3, [r3, #0]
 80033bc:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 80033c0:	601a      	str	r2, [r3, #0]

      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 80033c2:	2300      	movs	r3, #0
 80033c4:	61bb      	str	r3, [r7, #24]
 80033c6:	68fb      	ldr	r3, [r7, #12]
 80033c8:	681b      	ldr	r3, [r3, #0]
 80033ca:	695b      	ldr	r3, [r3, #20]
 80033cc:	61bb      	str	r3, [r7, #24]
 80033ce:	68fb      	ldr	r3, [r7, #12]
 80033d0:	681b      	ldr	r3, [r3, #0]
 80033d2:	699b      	ldr	r3, [r3, #24]
 80033d4:	61bb      	str	r3, [r7, #24]
 80033d6:	69bb      	ldr	r3, [r7, #24]
 80033d8:	e150      	b.n	800367c <HAL_I2C_Mem_Read+0x430>
    }
    else
    {
      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 80033da:	2300      	movs	r3, #0
 80033dc:	617b      	str	r3, [r7, #20]
 80033de:	68fb      	ldr	r3, [r7, #12]
 80033e0:	681b      	ldr	r3, [r3, #0]
 80033e2:	695b      	ldr	r3, [r3, #20]
 80033e4:	617b      	str	r3, [r7, #20]
 80033e6:	68fb      	ldr	r3, [r7, #12]
 80033e8:	681b      	ldr	r3, [r3, #0]
 80033ea:	699b      	ldr	r3, [r3, #24]
 80033ec:	617b      	str	r3, [r7, #20]
 80033ee:	697b      	ldr	r3, [r7, #20]
    }

    while (hi2c->XferSize > 0U)
 80033f0:	e144      	b.n	800367c <HAL_I2C_Mem_Read+0x430>
    {
      if (hi2c->XferSize <= 3U)
 80033f2:	68fb      	ldr	r3, [r7, #12]
 80033f4:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 80033f6:	2b03      	cmp	r3, #3
 80033f8:	f200 80f1 	bhi.w	80035de <HAL_I2C_Mem_Read+0x392>
      {
        /* One byte */
        if (hi2c->XferSize == 1U)
 80033fc:	68fb      	ldr	r3, [r7, #12]
 80033fe:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8003400:	2b01      	cmp	r3, #1
 8003402:	d123      	bne.n	800344c <HAL_I2C_Mem_Read+0x200>
        {
          /* Wait until RXNE flag is set */
          if (I2C_WaitOnRXNEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8003404:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8003406:	6bb9      	ldr	r1, [r7, #56]	@ 0x38
 8003408:	68f8      	ldr	r0, [r7, #12]
 800340a:	f000 fc79 	bl	8003d00 <I2C_WaitOnRXNEFlagUntilTimeout>
 800340e:	4603      	mov	r3, r0
 8003410:	2b00      	cmp	r3, #0
 8003412:	d001      	beq.n	8003418 <HAL_I2C_Mem_Read+0x1cc>
          {
            return HAL_ERROR;
 8003414:	2301      	movs	r3, #1
 8003416:	e145      	b.n	80036a4 <HAL_I2C_Mem_Read+0x458>
          }

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8003418:	68fb      	ldr	r3, [r7, #12]
 800341a:	681b      	ldr	r3, [r3, #0]
 800341c:	691a      	ldr	r2, [r3, #16]
 800341e:	68fb      	ldr	r3, [r7, #12]
 8003420:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003422:	b2d2      	uxtb	r2, r2
 8003424:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8003426:	68fb      	ldr	r3, [r7, #12]
 8003428:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800342a:	1c5a      	adds	r2, r3, #1
 800342c:	68fb      	ldr	r3, [r7, #12]
 800342e:	625a      	str	r2, [r3, #36]	@ 0x24

          /* Update counter */
          hi2c->XferSize--;
 8003430:	68fb      	ldr	r3, [r7, #12]
 8003432:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8003434:	3b01      	subs	r3, #1
 8003436:	b29a      	uxth	r2, r3
 8003438:	68fb      	ldr	r3, [r7, #12]
 800343a:	851a      	strh	r2, [r3, #40]	@ 0x28
          hi2c->XferCount--;
 800343c:	68fb      	ldr	r3, [r7, #12]
 800343e:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8003440:	b29b      	uxth	r3, r3
 8003442:	3b01      	subs	r3, #1
 8003444:	b29a      	uxth	r2, r3
 8003446:	68fb      	ldr	r3, [r7, #12]
 8003448:	855a      	strh	r2, [r3, #42]	@ 0x2a
 800344a:	e117      	b.n	800367c <HAL_I2C_Mem_Read+0x430>
        }
        /* Two bytes */
        else if (hi2c->XferSize == 2U)
 800344c:	68fb      	ldr	r3, [r7, #12]
 800344e:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8003450:	2b02      	cmp	r3, #2
 8003452:	d14e      	bne.n	80034f2 <HAL_I2C_Mem_Read+0x2a6>
        {
          /* Wait until BTF flag is set */
          if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 8003454:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003456:	9300      	str	r3, [sp, #0]
 8003458:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800345a:	2200      	movs	r2, #0
 800345c:	4906      	ldr	r1, [pc, #24]	@ (8003478 <HAL_I2C_Mem_Read+0x22c>)
 800345e:	68f8      	ldr	r0, [r7, #12]
 8003460:	f000 faa4 	bl	80039ac <I2C_WaitOnFlagUntilTimeout>
 8003464:	4603      	mov	r3, r0
 8003466:	2b00      	cmp	r3, #0
 8003468:	d008      	beq.n	800347c <HAL_I2C_Mem_Read+0x230>
          {
            return HAL_ERROR;
 800346a:	2301      	movs	r3, #1
 800346c:	e11a      	b.n	80036a4 <HAL_I2C_Mem_Read+0x458>
 800346e:	bf00      	nop
 8003470:	00100002 	.word	0x00100002
 8003474:	ffff0000 	.word	0xffff0000
 8003478:	00010004 	.word	0x00010004
          }

          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800347c:	68fb      	ldr	r3, [r7, #12]
 800347e:	681b      	ldr	r3, [r3, #0]
 8003480:	681a      	ldr	r2, [r3, #0]
 8003482:	68fb      	ldr	r3, [r7, #12]
 8003484:	681b      	ldr	r3, [r3, #0]
 8003486:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 800348a:	601a      	str	r2, [r3, #0]

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 800348c:	68fb      	ldr	r3, [r7, #12]
 800348e:	681b      	ldr	r3, [r3, #0]
 8003490:	691a      	ldr	r2, [r3, #16]
 8003492:	68fb      	ldr	r3, [r7, #12]
 8003494:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003496:	b2d2      	uxtb	r2, r2
 8003498:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 800349a:	68fb      	ldr	r3, [r7, #12]
 800349c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800349e:	1c5a      	adds	r2, r3, #1
 80034a0:	68fb      	ldr	r3, [r7, #12]
 80034a2:	625a      	str	r2, [r3, #36]	@ 0x24

          /* Update counter */
          hi2c->XferSize--;
 80034a4:	68fb      	ldr	r3, [r7, #12]
 80034a6:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 80034a8:	3b01      	subs	r3, #1
 80034aa:	b29a      	uxth	r2, r3
 80034ac:	68fb      	ldr	r3, [r7, #12]
 80034ae:	851a      	strh	r2, [r3, #40]	@ 0x28
          hi2c->XferCount--;
 80034b0:	68fb      	ldr	r3, [r7, #12]
 80034b2:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80034b4:	b29b      	uxth	r3, r3
 80034b6:	3b01      	subs	r3, #1
 80034b8:	b29a      	uxth	r2, r3
 80034ba:	68fb      	ldr	r3, [r7, #12]
 80034bc:	855a      	strh	r2, [r3, #42]	@ 0x2a

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 80034be:	68fb      	ldr	r3, [r7, #12]
 80034c0:	681b      	ldr	r3, [r3, #0]
 80034c2:	691a      	ldr	r2, [r3, #16]
 80034c4:	68fb      	ldr	r3, [r7, #12]
 80034c6:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80034c8:	b2d2      	uxtb	r2, r2
 80034ca:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 80034cc:	68fb      	ldr	r3, [r7, #12]
 80034ce:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80034d0:	1c5a      	adds	r2, r3, #1
 80034d2:	68fb      	ldr	r3, [r7, #12]
 80034d4:	625a      	str	r2, [r3, #36]	@ 0x24

          /* Update counter */
          hi2c->XferSize--;
 80034d6:	68fb      	ldr	r3, [r7, #12]
 80034d8:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 80034da:	3b01      	subs	r3, #1
 80034dc:	b29a      	uxth	r2, r3
 80034de:	68fb      	ldr	r3, [r7, #12]
 80034e0:	851a      	strh	r2, [r3, #40]	@ 0x28
          hi2c->XferCount--;
 80034e2:	68fb      	ldr	r3, [r7, #12]
 80034e4:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80034e6:	b29b      	uxth	r3, r3
 80034e8:	3b01      	subs	r3, #1
 80034ea:	b29a      	uxth	r2, r3
 80034ec:	68fb      	ldr	r3, [r7, #12]
 80034ee:	855a      	strh	r2, [r3, #42]	@ 0x2a
 80034f0:	e0c4      	b.n	800367c <HAL_I2C_Mem_Read+0x430>
        }
        /* 3 Last bytes */
        else
        {
          /* Wait until BTF flag is set */
          if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 80034f2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80034f4:	9300      	str	r3, [sp, #0]
 80034f6:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80034f8:	2200      	movs	r2, #0
 80034fa:	496c      	ldr	r1, [pc, #432]	@ (80036ac <HAL_I2C_Mem_Read+0x460>)
 80034fc:	68f8      	ldr	r0, [r7, #12]
 80034fe:	f000 fa55 	bl	80039ac <I2C_WaitOnFlagUntilTimeout>
 8003502:	4603      	mov	r3, r0
 8003504:	2b00      	cmp	r3, #0
 8003506:	d001      	beq.n	800350c <HAL_I2C_Mem_Read+0x2c0>
          {
            return HAL_ERROR;
 8003508:	2301      	movs	r3, #1
 800350a:	e0cb      	b.n	80036a4 <HAL_I2C_Mem_Read+0x458>
          }

          /* Disable Acknowledge */
          CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 800350c:	68fb      	ldr	r3, [r7, #12]
 800350e:	681b      	ldr	r3, [r3, #0]
 8003510:	681a      	ldr	r2, [r3, #0]
 8003512:	68fb      	ldr	r3, [r7, #12]
 8003514:	681b      	ldr	r3, [r3, #0]
 8003516:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 800351a:	601a      	str	r2, [r3, #0]

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 800351c:	68fb      	ldr	r3, [r7, #12]
 800351e:	681b      	ldr	r3, [r3, #0]
 8003520:	691a      	ldr	r2, [r3, #16]
 8003522:	68fb      	ldr	r3, [r7, #12]
 8003524:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003526:	b2d2      	uxtb	r2, r2
 8003528:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 800352a:	68fb      	ldr	r3, [r7, #12]
 800352c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800352e:	1c5a      	adds	r2, r3, #1
 8003530:	68fb      	ldr	r3, [r7, #12]
 8003532:	625a      	str	r2, [r3, #36]	@ 0x24

          /* Update counter */
          hi2c->XferSize--;
 8003534:	68fb      	ldr	r3, [r7, #12]
 8003536:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8003538:	3b01      	subs	r3, #1
 800353a:	b29a      	uxth	r2, r3
 800353c:	68fb      	ldr	r3, [r7, #12]
 800353e:	851a      	strh	r2, [r3, #40]	@ 0x28
          hi2c->XferCount--;
 8003540:	68fb      	ldr	r3, [r7, #12]
 8003542:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8003544:	b29b      	uxth	r3, r3
 8003546:	3b01      	subs	r3, #1
 8003548:	b29a      	uxth	r2, r3
 800354a:	68fb      	ldr	r3, [r7, #12]
 800354c:	855a      	strh	r2, [r3, #42]	@ 0x2a

          /* Wait until BTF flag is set */
          if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 800354e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003550:	9300      	str	r3, [sp, #0]
 8003552:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8003554:	2200      	movs	r2, #0
 8003556:	4955      	ldr	r1, [pc, #340]	@ (80036ac <HAL_I2C_Mem_Read+0x460>)
 8003558:	68f8      	ldr	r0, [r7, #12]
 800355a:	f000 fa27 	bl	80039ac <I2C_WaitOnFlagUntilTimeout>
 800355e:	4603      	mov	r3, r0
 8003560:	2b00      	cmp	r3, #0
 8003562:	d001      	beq.n	8003568 <HAL_I2C_Mem_Read+0x31c>
          {
            return HAL_ERROR;
 8003564:	2301      	movs	r3, #1
 8003566:	e09d      	b.n	80036a4 <HAL_I2C_Mem_Read+0x458>
          }

          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8003568:	68fb      	ldr	r3, [r7, #12]
 800356a:	681b      	ldr	r3, [r3, #0]
 800356c:	681a      	ldr	r2, [r3, #0]
 800356e:	68fb      	ldr	r3, [r7, #12]
 8003570:	681b      	ldr	r3, [r3, #0]
 8003572:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8003576:	601a      	str	r2, [r3, #0]

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8003578:	68fb      	ldr	r3, [r7, #12]
 800357a:	681b      	ldr	r3, [r3, #0]
 800357c:	691a      	ldr	r2, [r3, #16]
 800357e:	68fb      	ldr	r3, [r7, #12]
 8003580:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003582:	b2d2      	uxtb	r2, r2
 8003584:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8003586:	68fb      	ldr	r3, [r7, #12]
 8003588:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800358a:	1c5a      	adds	r2, r3, #1
 800358c:	68fb      	ldr	r3, [r7, #12]
 800358e:	625a      	str	r2, [r3, #36]	@ 0x24

          /* Update counter */
          hi2c->XferSize--;
 8003590:	68fb      	ldr	r3, [r7, #12]
 8003592:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8003594:	3b01      	subs	r3, #1
 8003596:	b29a      	uxth	r2, r3
 8003598:	68fb      	ldr	r3, [r7, #12]
 800359a:	851a      	strh	r2, [r3, #40]	@ 0x28
          hi2c->XferCount--;
 800359c:	68fb      	ldr	r3, [r7, #12]
 800359e:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80035a0:	b29b      	uxth	r3, r3
 80035a2:	3b01      	subs	r3, #1
 80035a4:	b29a      	uxth	r2, r3
 80035a6:	68fb      	ldr	r3, [r7, #12]
 80035a8:	855a      	strh	r2, [r3, #42]	@ 0x2a

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 80035aa:	68fb      	ldr	r3, [r7, #12]
 80035ac:	681b      	ldr	r3, [r3, #0]
 80035ae:	691a      	ldr	r2, [r3, #16]
 80035b0:	68fb      	ldr	r3, [r7, #12]
 80035b2:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80035b4:	b2d2      	uxtb	r2, r2
 80035b6:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 80035b8:	68fb      	ldr	r3, [r7, #12]
 80035ba:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80035bc:	1c5a      	adds	r2, r3, #1
 80035be:	68fb      	ldr	r3, [r7, #12]
 80035c0:	625a      	str	r2, [r3, #36]	@ 0x24

          /* Update counter */
          hi2c->XferSize--;
 80035c2:	68fb      	ldr	r3, [r7, #12]
 80035c4:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 80035c6:	3b01      	subs	r3, #1
 80035c8:	b29a      	uxth	r2, r3
 80035ca:	68fb      	ldr	r3, [r7, #12]
 80035cc:	851a      	strh	r2, [r3, #40]	@ 0x28
          hi2c->XferCount--;
 80035ce:	68fb      	ldr	r3, [r7, #12]
 80035d0:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80035d2:	b29b      	uxth	r3, r3
 80035d4:	3b01      	subs	r3, #1
 80035d6:	b29a      	uxth	r2, r3
 80035d8:	68fb      	ldr	r3, [r7, #12]
 80035da:	855a      	strh	r2, [r3, #42]	@ 0x2a
 80035dc:	e04e      	b.n	800367c <HAL_I2C_Mem_Read+0x430>
        }
      }
      else
      {
        /* Wait until RXNE flag is set */
        if (I2C_WaitOnRXNEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 80035de:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 80035e0:	6bb9      	ldr	r1, [r7, #56]	@ 0x38
 80035e2:	68f8      	ldr	r0, [r7, #12]
 80035e4:	f000 fb8c 	bl	8003d00 <I2C_WaitOnRXNEFlagUntilTimeout>
 80035e8:	4603      	mov	r3, r0
 80035ea:	2b00      	cmp	r3, #0
 80035ec:	d001      	beq.n	80035f2 <HAL_I2C_Mem_Read+0x3a6>
        {
          return HAL_ERROR;
 80035ee:	2301      	movs	r3, #1
 80035f0:	e058      	b.n	80036a4 <HAL_I2C_Mem_Read+0x458>
        }

        /* Read data from DR */
        *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 80035f2:	68fb      	ldr	r3, [r7, #12]
 80035f4:	681b      	ldr	r3, [r3, #0]
 80035f6:	691a      	ldr	r2, [r3, #16]
 80035f8:	68fb      	ldr	r3, [r7, #12]
 80035fa:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80035fc:	b2d2      	uxtb	r2, r2
 80035fe:	701a      	strb	r2, [r3, #0]

        /* Increment Buffer pointer */
        hi2c->pBuffPtr++;
 8003600:	68fb      	ldr	r3, [r7, #12]
 8003602:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003604:	1c5a      	adds	r2, r3, #1
 8003606:	68fb      	ldr	r3, [r7, #12]
 8003608:	625a      	str	r2, [r3, #36]	@ 0x24

        /* Update counter */
        hi2c->XferSize--;
 800360a:	68fb      	ldr	r3, [r7, #12]
 800360c:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 800360e:	3b01      	subs	r3, #1
 8003610:	b29a      	uxth	r2, r3
 8003612:	68fb      	ldr	r3, [r7, #12]
 8003614:	851a      	strh	r2, [r3, #40]	@ 0x28
        hi2c->XferCount--;
 8003616:	68fb      	ldr	r3, [r7, #12]
 8003618:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 800361a:	b29b      	uxth	r3, r3
 800361c:	3b01      	subs	r3, #1
 800361e:	b29a      	uxth	r2, r3
 8003620:	68fb      	ldr	r3, [r7, #12]
 8003622:	855a      	strh	r2, [r3, #42]	@ 0x2a

        if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET)
 8003624:	68fb      	ldr	r3, [r7, #12]
 8003626:	681b      	ldr	r3, [r3, #0]
 8003628:	695b      	ldr	r3, [r3, #20]
 800362a:	f003 0304 	and.w	r3, r3, #4
 800362e:	2b04      	cmp	r3, #4
 8003630:	d124      	bne.n	800367c <HAL_I2C_Mem_Read+0x430>
        {
          if (hi2c->XferSize == 3U)
 8003632:	68fb      	ldr	r3, [r7, #12]
 8003634:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8003636:	2b03      	cmp	r3, #3
 8003638:	d107      	bne.n	800364a <HAL_I2C_Mem_Read+0x3fe>
          {
            /* Disable Acknowledge */
            CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 800363a:	68fb      	ldr	r3, [r7, #12]
 800363c:	681b      	ldr	r3, [r3, #0]
 800363e:	681a      	ldr	r2, [r3, #0]
 8003640:	68fb      	ldr	r3, [r7, #12]
 8003642:	681b      	ldr	r3, [r3, #0]
 8003644:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8003648:	601a      	str	r2, [r3, #0]
          }
          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 800364a:	68fb      	ldr	r3, [r7, #12]
 800364c:	681b      	ldr	r3, [r3, #0]
 800364e:	691a      	ldr	r2, [r3, #16]
 8003650:	68fb      	ldr	r3, [r7, #12]
 8003652:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003654:	b2d2      	uxtb	r2, r2
 8003656:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8003658:	68fb      	ldr	r3, [r7, #12]
 800365a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800365c:	1c5a      	adds	r2, r3, #1
 800365e:	68fb      	ldr	r3, [r7, #12]
 8003660:	625a      	str	r2, [r3, #36]	@ 0x24

          /* Update counter */
          hi2c->XferSize--;
 8003662:	68fb      	ldr	r3, [r7, #12]
 8003664:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8003666:	3b01      	subs	r3, #1
 8003668:	b29a      	uxth	r2, r3
 800366a:	68fb      	ldr	r3, [r7, #12]
 800366c:	851a      	strh	r2, [r3, #40]	@ 0x28
          hi2c->XferCount--;
 800366e:	68fb      	ldr	r3, [r7, #12]
 8003670:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8003672:	b29b      	uxth	r3, r3
 8003674:	3b01      	subs	r3, #1
 8003676:	b29a      	uxth	r2, r3
 8003678:	68fb      	ldr	r3, [r7, #12]
 800367a:	855a      	strh	r2, [r3, #42]	@ 0x2a
    while (hi2c->XferSize > 0U)
 800367c:	68fb      	ldr	r3, [r7, #12]
 800367e:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8003680:	2b00      	cmp	r3, #0
 8003682:	f47f aeb6 	bne.w	80033f2 <HAL_I2C_Mem_Read+0x1a6>
        }
      }
    }

    hi2c->State = HAL_I2C_STATE_READY;
 8003686:	68fb      	ldr	r3, [r7, #12]
 8003688:	2220      	movs	r2, #32
 800368a:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
    hi2c->Mode = HAL_I2C_MODE_NONE;
 800368e:	68fb      	ldr	r3, [r7, #12]
 8003690:	2200      	movs	r2, #0
 8003692:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8003696:	68fb      	ldr	r3, [r7, #12]
 8003698:	2200      	movs	r2, #0
 800369a:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    return HAL_OK;
 800369e:	2300      	movs	r3, #0
 80036a0:	e000      	b.n	80036a4 <HAL_I2C_Mem_Read+0x458>
  }
  else
  {
    return HAL_BUSY;
 80036a2:	2302      	movs	r3, #2
  }
}
 80036a4:	4618      	mov	r0, r3
 80036a6:	3728      	adds	r7, #40	@ 0x28
 80036a8:	46bd      	mov	sp, r7
 80036aa:	bd80      	pop	{r7, pc}
 80036ac:	00010004 	.word	0x00010004

080036b0 <I2C_RequestMemoryWrite>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_RequestMemoryWrite(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint32_t Timeout, uint32_t Tickstart)
{
 80036b0:	b580      	push	{r7, lr}
 80036b2:	b088      	sub	sp, #32
 80036b4:	af02      	add	r7, sp, #8
 80036b6:	60f8      	str	r0, [r7, #12]
 80036b8:	4608      	mov	r0, r1
 80036ba:	4611      	mov	r1, r2
 80036bc:	461a      	mov	r2, r3
 80036be:	4603      	mov	r3, r0
 80036c0:	817b      	strh	r3, [r7, #10]
 80036c2:	460b      	mov	r3, r1
 80036c4:	813b      	strh	r3, [r7, #8]
 80036c6:	4613      	mov	r3, r2
 80036c8:	80fb      	strh	r3, [r7, #6]
  /* Generate Start */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 80036ca:	68fb      	ldr	r3, [r7, #12]
 80036cc:	681b      	ldr	r3, [r3, #0]
 80036ce:	681a      	ldr	r2, [r3, #0]
 80036d0:	68fb      	ldr	r3, [r7, #12]
 80036d2:	681b      	ldr	r3, [r3, #0]
 80036d4:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 80036d8:	601a      	str	r2, [r3, #0]

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 80036da:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80036dc:	9300      	str	r3, [sp, #0]
 80036de:	6a3b      	ldr	r3, [r7, #32]
 80036e0:	2200      	movs	r2, #0
 80036e2:	f04f 1101 	mov.w	r1, #65537	@ 0x10001
 80036e6:	68f8      	ldr	r0, [r7, #12]
 80036e8:	f000 f960 	bl	80039ac <I2C_WaitOnFlagUntilTimeout>
 80036ec:	4603      	mov	r3, r0
 80036ee:	2b00      	cmp	r3, #0
 80036f0:	d00d      	beq.n	800370e <I2C_RequestMemoryWrite+0x5e>
  {
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 80036f2:	68fb      	ldr	r3, [r7, #12]
 80036f4:	681b      	ldr	r3, [r3, #0]
 80036f6:	681b      	ldr	r3, [r3, #0]
 80036f8:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80036fc:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8003700:	d103      	bne.n	800370a <I2C_RequestMemoryWrite+0x5a>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 8003702:	68fb      	ldr	r3, [r7, #12]
 8003704:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8003708:	641a      	str	r2, [r3, #64]	@ 0x40
    }
    return HAL_TIMEOUT;
 800370a:	2303      	movs	r3, #3
 800370c:	e05f      	b.n	80037ce <I2C_RequestMemoryWrite+0x11e>
  }

  /* Send slave address */
  hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(DevAddress);
 800370e:	897b      	ldrh	r3, [r7, #10]
 8003710:	b2db      	uxtb	r3, r3
 8003712:	461a      	mov	r2, r3
 8003714:	68fb      	ldr	r3, [r7, #12]
 8003716:	681b      	ldr	r3, [r3, #0]
 8003718:	f002 02fe 	and.w	r2, r2, #254	@ 0xfe
 800371c:	611a      	str	r2, [r3, #16]

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 800371e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003720:	6a3a      	ldr	r2, [r7, #32]
 8003722:	492d      	ldr	r1, [pc, #180]	@ (80037d8 <I2C_RequestMemoryWrite+0x128>)
 8003724:	68f8      	ldr	r0, [r7, #12]
 8003726:	f000 f9bb 	bl	8003aa0 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 800372a:	4603      	mov	r3, r0
 800372c:	2b00      	cmp	r3, #0
 800372e:	d001      	beq.n	8003734 <I2C_RequestMemoryWrite+0x84>
  {
    return HAL_ERROR;
 8003730:	2301      	movs	r3, #1
 8003732:	e04c      	b.n	80037ce <I2C_RequestMemoryWrite+0x11e>
  }

  /* Clear ADDR flag */
  __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8003734:	2300      	movs	r3, #0
 8003736:	617b      	str	r3, [r7, #20]
 8003738:	68fb      	ldr	r3, [r7, #12]
 800373a:	681b      	ldr	r3, [r3, #0]
 800373c:	695b      	ldr	r3, [r3, #20]
 800373e:	617b      	str	r3, [r7, #20]
 8003740:	68fb      	ldr	r3, [r7, #12]
 8003742:	681b      	ldr	r3, [r3, #0]
 8003744:	699b      	ldr	r3, [r3, #24]
 8003746:	617b      	str	r3, [r7, #20]
 8003748:	697b      	ldr	r3, [r7, #20]

  /* Wait until TXE flag is set */
  if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 800374a:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 800374c:	6a39      	ldr	r1, [r7, #32]
 800374e:	68f8      	ldr	r0, [r7, #12]
 8003750:	f000 fa46 	bl	8003be0 <I2C_WaitOnTXEFlagUntilTimeout>
 8003754:	4603      	mov	r3, r0
 8003756:	2b00      	cmp	r3, #0
 8003758:	d00d      	beq.n	8003776 <I2C_RequestMemoryWrite+0xc6>
  {
    if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 800375a:	68fb      	ldr	r3, [r7, #12]
 800375c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800375e:	2b04      	cmp	r3, #4
 8003760:	d107      	bne.n	8003772 <I2C_RequestMemoryWrite+0xc2>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8003762:	68fb      	ldr	r3, [r7, #12]
 8003764:	681b      	ldr	r3, [r3, #0]
 8003766:	681a      	ldr	r2, [r3, #0]
 8003768:	68fb      	ldr	r3, [r7, #12]
 800376a:	681b      	ldr	r3, [r3, #0]
 800376c:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8003770:	601a      	str	r2, [r3, #0]
    }
    return HAL_ERROR;
 8003772:	2301      	movs	r3, #1
 8003774:	e02b      	b.n	80037ce <I2C_RequestMemoryWrite+0x11e>
  }

  /* If Memory address size is 8Bit */
  if (MemAddSize == I2C_MEMADD_SIZE_8BIT)
 8003776:	88fb      	ldrh	r3, [r7, #6]
 8003778:	2b01      	cmp	r3, #1
 800377a:	d105      	bne.n	8003788 <I2C_RequestMemoryWrite+0xd8>
  {
    /* Send Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(MemAddress);
 800377c:	893b      	ldrh	r3, [r7, #8]
 800377e:	b2da      	uxtb	r2, r3
 8003780:	68fb      	ldr	r3, [r7, #12]
 8003782:	681b      	ldr	r3, [r3, #0]
 8003784:	611a      	str	r2, [r3, #16]
 8003786:	e021      	b.n	80037cc <I2C_RequestMemoryWrite+0x11c>
  }
  /* If Memory address size is 16Bit */
  else
  {
    /* Send MSB of Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_MSB(MemAddress);
 8003788:	893b      	ldrh	r3, [r7, #8]
 800378a:	0a1b      	lsrs	r3, r3, #8
 800378c:	b29b      	uxth	r3, r3
 800378e:	b2da      	uxtb	r2, r3
 8003790:	68fb      	ldr	r3, [r7, #12]
 8003792:	681b      	ldr	r3, [r3, #0]
 8003794:	611a      	str	r2, [r3, #16]

    /* Wait until TXE flag is set */
    if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8003796:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8003798:	6a39      	ldr	r1, [r7, #32]
 800379a:	68f8      	ldr	r0, [r7, #12]
 800379c:	f000 fa20 	bl	8003be0 <I2C_WaitOnTXEFlagUntilTimeout>
 80037a0:	4603      	mov	r3, r0
 80037a2:	2b00      	cmp	r3, #0
 80037a4:	d00d      	beq.n	80037c2 <I2C_RequestMemoryWrite+0x112>
    {
      if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 80037a6:	68fb      	ldr	r3, [r7, #12]
 80037a8:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80037aa:	2b04      	cmp	r3, #4
 80037ac:	d107      	bne.n	80037be <I2C_RequestMemoryWrite+0x10e>
      {
        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80037ae:	68fb      	ldr	r3, [r7, #12]
 80037b0:	681b      	ldr	r3, [r3, #0]
 80037b2:	681a      	ldr	r2, [r3, #0]
 80037b4:	68fb      	ldr	r3, [r7, #12]
 80037b6:	681b      	ldr	r3, [r3, #0]
 80037b8:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 80037bc:	601a      	str	r2, [r3, #0]
      }
      return HAL_ERROR;
 80037be:	2301      	movs	r3, #1
 80037c0:	e005      	b.n	80037ce <I2C_RequestMemoryWrite+0x11e>
    }

    /* Send LSB of Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(MemAddress);
 80037c2:	893b      	ldrh	r3, [r7, #8]
 80037c4:	b2da      	uxtb	r2, r3
 80037c6:	68fb      	ldr	r3, [r7, #12]
 80037c8:	681b      	ldr	r3, [r3, #0]
 80037ca:	611a      	str	r2, [r3, #16]
  }

  return HAL_OK;
 80037cc:	2300      	movs	r3, #0
}
 80037ce:	4618      	mov	r0, r3
 80037d0:	3718      	adds	r7, #24
 80037d2:	46bd      	mov	sp, r7
 80037d4:	bd80      	pop	{r7, pc}
 80037d6:	bf00      	nop
 80037d8:	00010002 	.word	0x00010002

080037dc <I2C_RequestMemoryRead>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_RequestMemoryRead(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint32_t Timeout, uint32_t Tickstart)
{
 80037dc:	b580      	push	{r7, lr}
 80037de:	b088      	sub	sp, #32
 80037e0:	af02      	add	r7, sp, #8
 80037e2:	60f8      	str	r0, [r7, #12]
 80037e4:	4608      	mov	r0, r1
 80037e6:	4611      	mov	r1, r2
 80037e8:	461a      	mov	r2, r3
 80037ea:	4603      	mov	r3, r0
 80037ec:	817b      	strh	r3, [r7, #10]
 80037ee:	460b      	mov	r3, r1
 80037f0:	813b      	strh	r3, [r7, #8]
 80037f2:	4613      	mov	r3, r2
 80037f4:	80fb      	strh	r3, [r7, #6]
  /* Enable Acknowledge */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 80037f6:	68fb      	ldr	r3, [r7, #12]
 80037f8:	681b      	ldr	r3, [r3, #0]
 80037fa:	681a      	ldr	r2, [r3, #0]
 80037fc:	68fb      	ldr	r3, [r7, #12]
 80037fe:	681b      	ldr	r3, [r3, #0]
 8003800:	f442 6280 	orr.w	r2, r2, #1024	@ 0x400
 8003804:	601a      	str	r2, [r3, #0]

  /* Generate Start */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8003806:	68fb      	ldr	r3, [r7, #12]
 8003808:	681b      	ldr	r3, [r3, #0]
 800380a:	681a      	ldr	r2, [r3, #0]
 800380c:	68fb      	ldr	r3, [r7, #12]
 800380e:	681b      	ldr	r3, [r3, #0]
 8003810:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 8003814:	601a      	str	r2, [r3, #0]

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 8003816:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003818:	9300      	str	r3, [sp, #0]
 800381a:	6a3b      	ldr	r3, [r7, #32]
 800381c:	2200      	movs	r2, #0
 800381e:	f04f 1101 	mov.w	r1, #65537	@ 0x10001
 8003822:	68f8      	ldr	r0, [r7, #12]
 8003824:	f000 f8c2 	bl	80039ac <I2C_WaitOnFlagUntilTimeout>
 8003828:	4603      	mov	r3, r0
 800382a:	2b00      	cmp	r3, #0
 800382c:	d00d      	beq.n	800384a <I2C_RequestMemoryRead+0x6e>
  {
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 800382e:	68fb      	ldr	r3, [r7, #12]
 8003830:	681b      	ldr	r3, [r3, #0]
 8003832:	681b      	ldr	r3, [r3, #0]
 8003834:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8003838:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 800383c:	d103      	bne.n	8003846 <I2C_RequestMemoryRead+0x6a>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 800383e:	68fb      	ldr	r3, [r7, #12]
 8003840:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8003844:	641a      	str	r2, [r3, #64]	@ 0x40
    }
    return HAL_TIMEOUT;
 8003846:	2303      	movs	r3, #3
 8003848:	e0aa      	b.n	80039a0 <I2C_RequestMemoryRead+0x1c4>
  }

  /* Send slave address */
  hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(DevAddress);
 800384a:	897b      	ldrh	r3, [r7, #10]
 800384c:	b2db      	uxtb	r3, r3
 800384e:	461a      	mov	r2, r3
 8003850:	68fb      	ldr	r3, [r7, #12]
 8003852:	681b      	ldr	r3, [r3, #0]
 8003854:	f002 02fe 	and.w	r2, r2, #254	@ 0xfe
 8003858:	611a      	str	r2, [r3, #16]

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 800385a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800385c:	6a3a      	ldr	r2, [r7, #32]
 800385e:	4952      	ldr	r1, [pc, #328]	@ (80039a8 <I2C_RequestMemoryRead+0x1cc>)
 8003860:	68f8      	ldr	r0, [r7, #12]
 8003862:	f000 f91d 	bl	8003aa0 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8003866:	4603      	mov	r3, r0
 8003868:	2b00      	cmp	r3, #0
 800386a:	d001      	beq.n	8003870 <I2C_RequestMemoryRead+0x94>
  {
    return HAL_ERROR;
 800386c:	2301      	movs	r3, #1
 800386e:	e097      	b.n	80039a0 <I2C_RequestMemoryRead+0x1c4>
  }

  /* Clear ADDR flag */
  __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8003870:	2300      	movs	r3, #0
 8003872:	617b      	str	r3, [r7, #20]
 8003874:	68fb      	ldr	r3, [r7, #12]
 8003876:	681b      	ldr	r3, [r3, #0]
 8003878:	695b      	ldr	r3, [r3, #20]
 800387a:	617b      	str	r3, [r7, #20]
 800387c:	68fb      	ldr	r3, [r7, #12]
 800387e:	681b      	ldr	r3, [r3, #0]
 8003880:	699b      	ldr	r3, [r3, #24]
 8003882:	617b      	str	r3, [r7, #20]
 8003884:	697b      	ldr	r3, [r7, #20]

  /* Wait until TXE flag is set */
  if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8003886:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8003888:	6a39      	ldr	r1, [r7, #32]
 800388a:	68f8      	ldr	r0, [r7, #12]
 800388c:	f000 f9a8 	bl	8003be0 <I2C_WaitOnTXEFlagUntilTimeout>
 8003890:	4603      	mov	r3, r0
 8003892:	2b00      	cmp	r3, #0
 8003894:	d00d      	beq.n	80038b2 <I2C_RequestMemoryRead+0xd6>
  {
    if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8003896:	68fb      	ldr	r3, [r7, #12]
 8003898:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800389a:	2b04      	cmp	r3, #4
 800389c:	d107      	bne.n	80038ae <I2C_RequestMemoryRead+0xd2>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800389e:	68fb      	ldr	r3, [r7, #12]
 80038a0:	681b      	ldr	r3, [r3, #0]
 80038a2:	681a      	ldr	r2, [r3, #0]
 80038a4:	68fb      	ldr	r3, [r7, #12]
 80038a6:	681b      	ldr	r3, [r3, #0]
 80038a8:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 80038ac:	601a      	str	r2, [r3, #0]
    }
    return HAL_ERROR;
 80038ae:	2301      	movs	r3, #1
 80038b0:	e076      	b.n	80039a0 <I2C_RequestMemoryRead+0x1c4>
  }

  /* If Memory address size is 8Bit */
  if (MemAddSize == I2C_MEMADD_SIZE_8BIT)
 80038b2:	88fb      	ldrh	r3, [r7, #6]
 80038b4:	2b01      	cmp	r3, #1
 80038b6:	d105      	bne.n	80038c4 <I2C_RequestMemoryRead+0xe8>
  {
    /* Send Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(MemAddress);
 80038b8:	893b      	ldrh	r3, [r7, #8]
 80038ba:	b2da      	uxtb	r2, r3
 80038bc:	68fb      	ldr	r3, [r7, #12]
 80038be:	681b      	ldr	r3, [r3, #0]
 80038c0:	611a      	str	r2, [r3, #16]
 80038c2:	e021      	b.n	8003908 <I2C_RequestMemoryRead+0x12c>
  }
  /* If Memory address size is 16Bit */
  else
  {
    /* Send MSB of Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_MSB(MemAddress);
 80038c4:	893b      	ldrh	r3, [r7, #8]
 80038c6:	0a1b      	lsrs	r3, r3, #8
 80038c8:	b29b      	uxth	r3, r3
 80038ca:	b2da      	uxtb	r2, r3
 80038cc:	68fb      	ldr	r3, [r7, #12]
 80038ce:	681b      	ldr	r3, [r3, #0]
 80038d0:	611a      	str	r2, [r3, #16]

    /* Wait until TXE flag is set */
    if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 80038d2:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 80038d4:	6a39      	ldr	r1, [r7, #32]
 80038d6:	68f8      	ldr	r0, [r7, #12]
 80038d8:	f000 f982 	bl	8003be0 <I2C_WaitOnTXEFlagUntilTimeout>
 80038dc:	4603      	mov	r3, r0
 80038de:	2b00      	cmp	r3, #0
 80038e0:	d00d      	beq.n	80038fe <I2C_RequestMemoryRead+0x122>
    {
      if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 80038e2:	68fb      	ldr	r3, [r7, #12]
 80038e4:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80038e6:	2b04      	cmp	r3, #4
 80038e8:	d107      	bne.n	80038fa <I2C_RequestMemoryRead+0x11e>
      {
        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80038ea:	68fb      	ldr	r3, [r7, #12]
 80038ec:	681b      	ldr	r3, [r3, #0]
 80038ee:	681a      	ldr	r2, [r3, #0]
 80038f0:	68fb      	ldr	r3, [r7, #12]
 80038f2:	681b      	ldr	r3, [r3, #0]
 80038f4:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 80038f8:	601a      	str	r2, [r3, #0]
      }
      return HAL_ERROR;
 80038fa:	2301      	movs	r3, #1
 80038fc:	e050      	b.n	80039a0 <I2C_RequestMemoryRead+0x1c4>
    }

    /* Send LSB of Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(MemAddress);
 80038fe:	893b      	ldrh	r3, [r7, #8]
 8003900:	b2da      	uxtb	r2, r3
 8003902:	68fb      	ldr	r3, [r7, #12]
 8003904:	681b      	ldr	r3, [r3, #0]
 8003906:	611a      	str	r2, [r3, #16]
  }

  /* Wait until TXE flag is set */
  if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8003908:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 800390a:	6a39      	ldr	r1, [r7, #32]
 800390c:	68f8      	ldr	r0, [r7, #12]
 800390e:	f000 f967 	bl	8003be0 <I2C_WaitOnTXEFlagUntilTimeout>
 8003912:	4603      	mov	r3, r0
 8003914:	2b00      	cmp	r3, #0
 8003916:	d00d      	beq.n	8003934 <I2C_RequestMemoryRead+0x158>
  {
    if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8003918:	68fb      	ldr	r3, [r7, #12]
 800391a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800391c:	2b04      	cmp	r3, #4
 800391e:	d107      	bne.n	8003930 <I2C_RequestMemoryRead+0x154>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8003920:	68fb      	ldr	r3, [r7, #12]
 8003922:	681b      	ldr	r3, [r3, #0]
 8003924:	681a      	ldr	r2, [r3, #0]
 8003926:	68fb      	ldr	r3, [r7, #12]
 8003928:	681b      	ldr	r3, [r3, #0]
 800392a:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 800392e:	601a      	str	r2, [r3, #0]
    }
    return HAL_ERROR;
 8003930:	2301      	movs	r3, #1
 8003932:	e035      	b.n	80039a0 <I2C_RequestMemoryRead+0x1c4>
  }

  /* Generate Restart */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8003934:	68fb      	ldr	r3, [r7, #12]
 8003936:	681b      	ldr	r3, [r3, #0]
 8003938:	681a      	ldr	r2, [r3, #0]
 800393a:	68fb      	ldr	r3, [r7, #12]
 800393c:	681b      	ldr	r3, [r3, #0]
 800393e:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 8003942:	601a      	str	r2, [r3, #0]

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 8003944:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003946:	9300      	str	r3, [sp, #0]
 8003948:	6a3b      	ldr	r3, [r7, #32]
 800394a:	2200      	movs	r2, #0
 800394c:	f04f 1101 	mov.w	r1, #65537	@ 0x10001
 8003950:	68f8      	ldr	r0, [r7, #12]
 8003952:	f000 f82b 	bl	80039ac <I2C_WaitOnFlagUntilTimeout>
 8003956:	4603      	mov	r3, r0
 8003958:	2b00      	cmp	r3, #0
 800395a:	d00d      	beq.n	8003978 <I2C_RequestMemoryRead+0x19c>
  {
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 800395c:	68fb      	ldr	r3, [r7, #12]
 800395e:	681b      	ldr	r3, [r3, #0]
 8003960:	681b      	ldr	r3, [r3, #0]
 8003962:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8003966:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 800396a:	d103      	bne.n	8003974 <I2C_RequestMemoryRead+0x198>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 800396c:	68fb      	ldr	r3, [r7, #12]
 800396e:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8003972:	641a      	str	r2, [r3, #64]	@ 0x40
    }
    return HAL_TIMEOUT;
 8003974:	2303      	movs	r3, #3
 8003976:	e013      	b.n	80039a0 <I2C_RequestMemoryRead+0x1c4>
  }

  /* Send slave address */
  hi2c->Instance->DR = I2C_7BIT_ADD_READ(DevAddress);
 8003978:	897b      	ldrh	r3, [r7, #10]
 800397a:	b2db      	uxtb	r3, r3
 800397c:	f043 0301 	orr.w	r3, r3, #1
 8003980:	b2da      	uxtb	r2, r3
 8003982:	68fb      	ldr	r3, [r7, #12]
 8003984:	681b      	ldr	r3, [r3, #0]
 8003986:	611a      	str	r2, [r3, #16]

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 8003988:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800398a:	6a3a      	ldr	r2, [r7, #32]
 800398c:	4906      	ldr	r1, [pc, #24]	@ (80039a8 <I2C_RequestMemoryRead+0x1cc>)
 800398e:	68f8      	ldr	r0, [r7, #12]
 8003990:	f000 f886 	bl	8003aa0 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8003994:	4603      	mov	r3, r0
 8003996:	2b00      	cmp	r3, #0
 8003998:	d001      	beq.n	800399e <I2C_RequestMemoryRead+0x1c2>
  {
    return HAL_ERROR;
 800399a:	2301      	movs	r3, #1
 800399c:	e000      	b.n	80039a0 <I2C_RequestMemoryRead+0x1c4>
  }

  return HAL_OK;
 800399e:	2300      	movs	r3, #0
}
 80039a0:	4618      	mov	r0, r3
 80039a2:	3718      	adds	r7, #24
 80039a4:	46bd      	mov	sp, r7
 80039a6:	bd80      	pop	{r7, pc}
 80039a8:	00010002 	.word	0x00010002

080039ac <I2C_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, FlagStatus Status, uint32_t Timeout, uint32_t Tickstart)
{
 80039ac:	b580      	push	{r7, lr}
 80039ae:	b084      	sub	sp, #16
 80039b0:	af00      	add	r7, sp, #0
 80039b2:	60f8      	str	r0, [r7, #12]
 80039b4:	60b9      	str	r1, [r7, #8]
 80039b6:	603b      	str	r3, [r7, #0]
 80039b8:	4613      	mov	r3, r2
 80039ba:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 80039bc:	e048      	b.n	8003a50 <I2C_WaitOnFlagUntilTimeout+0xa4>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 80039be:	683b      	ldr	r3, [r7, #0]
 80039c0:	f1b3 3fff 	cmp.w	r3, #4294967295
 80039c4:	d044      	beq.n	8003a50 <I2C_WaitOnFlagUntilTimeout+0xa4>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80039c6:	f7fe fe1b 	bl	8002600 <HAL_GetTick>
 80039ca:	4602      	mov	r2, r0
 80039cc:	69bb      	ldr	r3, [r7, #24]
 80039ce:	1ad3      	subs	r3, r2, r3
 80039d0:	683a      	ldr	r2, [r7, #0]
 80039d2:	429a      	cmp	r2, r3
 80039d4:	d302      	bcc.n	80039dc <I2C_WaitOnFlagUntilTimeout+0x30>
 80039d6:	683b      	ldr	r3, [r7, #0]
 80039d8:	2b00      	cmp	r3, #0
 80039da:	d139      	bne.n	8003a50 <I2C_WaitOnFlagUntilTimeout+0xa4>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, Flag) == Status))
 80039dc:	68bb      	ldr	r3, [r7, #8]
 80039de:	0c1b      	lsrs	r3, r3, #16
 80039e0:	b2db      	uxtb	r3, r3
 80039e2:	2b01      	cmp	r3, #1
 80039e4:	d10d      	bne.n	8003a02 <I2C_WaitOnFlagUntilTimeout+0x56>
 80039e6:	68fb      	ldr	r3, [r7, #12]
 80039e8:	681b      	ldr	r3, [r3, #0]
 80039ea:	695b      	ldr	r3, [r3, #20]
 80039ec:	43da      	mvns	r2, r3
 80039ee:	68bb      	ldr	r3, [r7, #8]
 80039f0:	4013      	ands	r3, r2
 80039f2:	b29b      	uxth	r3, r3
 80039f4:	2b00      	cmp	r3, #0
 80039f6:	bf0c      	ite	eq
 80039f8:	2301      	moveq	r3, #1
 80039fa:	2300      	movne	r3, #0
 80039fc:	b2db      	uxtb	r3, r3
 80039fe:	461a      	mov	r2, r3
 8003a00:	e00c      	b.n	8003a1c <I2C_WaitOnFlagUntilTimeout+0x70>
 8003a02:	68fb      	ldr	r3, [r7, #12]
 8003a04:	681b      	ldr	r3, [r3, #0]
 8003a06:	699b      	ldr	r3, [r3, #24]
 8003a08:	43da      	mvns	r2, r3
 8003a0a:	68bb      	ldr	r3, [r7, #8]
 8003a0c:	4013      	ands	r3, r2
 8003a0e:	b29b      	uxth	r3, r3
 8003a10:	2b00      	cmp	r3, #0
 8003a12:	bf0c      	ite	eq
 8003a14:	2301      	moveq	r3, #1
 8003a16:	2300      	movne	r3, #0
 8003a18:	b2db      	uxtb	r3, r3
 8003a1a:	461a      	mov	r2, r3
 8003a1c:	79fb      	ldrb	r3, [r7, #7]
 8003a1e:	429a      	cmp	r2, r3
 8003a20:	d116      	bne.n	8003a50 <I2C_WaitOnFlagUntilTimeout+0xa4>
        {
          hi2c->PreviousState     = I2C_STATE_NONE;
 8003a22:	68fb      	ldr	r3, [r7, #12]
 8003a24:	2200      	movs	r2, #0
 8003a26:	631a      	str	r2, [r3, #48]	@ 0x30
          hi2c->State             = HAL_I2C_STATE_READY;
 8003a28:	68fb      	ldr	r3, [r7, #12]
 8003a2a:	2220      	movs	r2, #32
 8003a2c:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
          hi2c->Mode              = HAL_I2C_MODE_NONE;
 8003a30:	68fb      	ldr	r3, [r7, #12]
 8003a32:	2200      	movs	r2, #0
 8003a34:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
          hi2c->ErrorCode         |= HAL_I2C_ERROR_TIMEOUT;
 8003a38:	68fb      	ldr	r3, [r7, #12]
 8003a3a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003a3c:	f043 0220 	orr.w	r2, r3, #32
 8003a40:	68fb      	ldr	r3, [r7, #12]
 8003a42:	641a      	str	r2, [r3, #64]	@ 0x40

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 8003a44:	68fb      	ldr	r3, [r7, #12]
 8003a46:	2200      	movs	r2, #0
 8003a48:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

          return HAL_ERROR;
 8003a4c:	2301      	movs	r3, #1
 8003a4e:	e023      	b.n	8003a98 <I2C_WaitOnFlagUntilTimeout+0xec>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8003a50:	68bb      	ldr	r3, [r7, #8]
 8003a52:	0c1b      	lsrs	r3, r3, #16
 8003a54:	b2db      	uxtb	r3, r3
 8003a56:	2b01      	cmp	r3, #1
 8003a58:	d10d      	bne.n	8003a76 <I2C_WaitOnFlagUntilTimeout+0xca>
 8003a5a:	68fb      	ldr	r3, [r7, #12]
 8003a5c:	681b      	ldr	r3, [r3, #0]
 8003a5e:	695b      	ldr	r3, [r3, #20]
 8003a60:	43da      	mvns	r2, r3
 8003a62:	68bb      	ldr	r3, [r7, #8]
 8003a64:	4013      	ands	r3, r2
 8003a66:	b29b      	uxth	r3, r3
 8003a68:	2b00      	cmp	r3, #0
 8003a6a:	bf0c      	ite	eq
 8003a6c:	2301      	moveq	r3, #1
 8003a6e:	2300      	movne	r3, #0
 8003a70:	b2db      	uxtb	r3, r3
 8003a72:	461a      	mov	r2, r3
 8003a74:	e00c      	b.n	8003a90 <I2C_WaitOnFlagUntilTimeout+0xe4>
 8003a76:	68fb      	ldr	r3, [r7, #12]
 8003a78:	681b      	ldr	r3, [r3, #0]
 8003a7a:	699b      	ldr	r3, [r3, #24]
 8003a7c:	43da      	mvns	r2, r3
 8003a7e:	68bb      	ldr	r3, [r7, #8]
 8003a80:	4013      	ands	r3, r2
 8003a82:	b29b      	uxth	r3, r3
 8003a84:	2b00      	cmp	r3, #0
 8003a86:	bf0c      	ite	eq
 8003a88:	2301      	moveq	r3, #1
 8003a8a:	2300      	movne	r3, #0
 8003a8c:	b2db      	uxtb	r3, r3
 8003a8e:	461a      	mov	r2, r3
 8003a90:	79fb      	ldrb	r3, [r7, #7]
 8003a92:	429a      	cmp	r2, r3
 8003a94:	d093      	beq.n	80039be <I2C_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 8003a96:	2300      	movs	r3, #0
}
 8003a98:	4618      	mov	r0, r3
 8003a9a:	3710      	adds	r7, #16
 8003a9c:	46bd      	mov	sp, r7
 8003a9e:	bd80      	pop	{r7, pc}

08003aa0 <I2C_WaitOnMasterAddressFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnMasterAddressFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, uint32_t Timeout, uint32_t Tickstart)
{
 8003aa0:	b580      	push	{r7, lr}
 8003aa2:	b084      	sub	sp, #16
 8003aa4:	af00      	add	r7, sp, #0
 8003aa6:	60f8      	str	r0, [r7, #12]
 8003aa8:	60b9      	str	r1, [r7, #8]
 8003aaa:	607a      	str	r2, [r7, #4]
 8003aac:	603b      	str	r3, [r7, #0]
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 8003aae:	e071      	b.n	8003b94 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf4>
  {
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 8003ab0:	68fb      	ldr	r3, [r7, #12]
 8003ab2:	681b      	ldr	r3, [r3, #0]
 8003ab4:	695b      	ldr	r3, [r3, #20]
 8003ab6:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8003aba:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8003abe:	d123      	bne.n	8003b08 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x68>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8003ac0:	68fb      	ldr	r3, [r7, #12]
 8003ac2:	681b      	ldr	r3, [r3, #0]
 8003ac4:	681a      	ldr	r2, [r3, #0]
 8003ac6:	68fb      	ldr	r3, [r7, #12]
 8003ac8:	681b      	ldr	r3, [r3, #0]
 8003aca:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8003ace:	601a      	str	r2, [r3, #0]

      /* Clear AF Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8003ad0:	68fb      	ldr	r3, [r7, #12]
 8003ad2:	681b      	ldr	r3, [r3, #0]
 8003ad4:	f46f 6280 	mvn.w	r2, #1024	@ 0x400
 8003ad8:	615a      	str	r2, [r3, #20]

      hi2c->PreviousState       = I2C_STATE_NONE;
 8003ada:	68fb      	ldr	r3, [r7, #12]
 8003adc:	2200      	movs	r2, #0
 8003ade:	631a      	str	r2, [r3, #48]	@ 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 8003ae0:	68fb      	ldr	r3, [r7, #12]
 8003ae2:	2220      	movs	r2, #32
 8003ae4:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 8003ae8:	68fb      	ldr	r3, [r7, #12]
 8003aea:	2200      	movs	r2, #0
 8003aec:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 8003af0:	68fb      	ldr	r3, [r7, #12]
 8003af2:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003af4:	f043 0204 	orr.w	r2, r3, #4
 8003af8:	68fb      	ldr	r3, [r7, #12]
 8003afa:	641a      	str	r2, [r3, #64]	@ 0x40

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8003afc:	68fb      	ldr	r3, [r7, #12]
 8003afe:	2200      	movs	r2, #0
 8003b00:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

      return HAL_ERROR;
 8003b04:	2301      	movs	r3, #1
 8003b06:	e067      	b.n	8003bd8 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x138>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8003b08:	687b      	ldr	r3, [r7, #4]
 8003b0a:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003b0e:	d041      	beq.n	8003b94 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf4>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8003b10:	f7fe fd76 	bl	8002600 <HAL_GetTick>
 8003b14:	4602      	mov	r2, r0
 8003b16:	683b      	ldr	r3, [r7, #0]
 8003b18:	1ad3      	subs	r3, r2, r3
 8003b1a:	687a      	ldr	r2, [r7, #4]
 8003b1c:	429a      	cmp	r2, r3
 8003b1e:	d302      	bcc.n	8003b26 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x86>
 8003b20:	687b      	ldr	r3, [r7, #4]
 8003b22:	2b00      	cmp	r3, #0
 8003b24:	d136      	bne.n	8003b94 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf4>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET))
 8003b26:	68bb      	ldr	r3, [r7, #8]
 8003b28:	0c1b      	lsrs	r3, r3, #16
 8003b2a:	b2db      	uxtb	r3, r3
 8003b2c:	2b01      	cmp	r3, #1
 8003b2e:	d10c      	bne.n	8003b4a <I2C_WaitOnMasterAddressFlagUntilTimeout+0xaa>
 8003b30:	68fb      	ldr	r3, [r7, #12]
 8003b32:	681b      	ldr	r3, [r3, #0]
 8003b34:	695b      	ldr	r3, [r3, #20]
 8003b36:	43da      	mvns	r2, r3
 8003b38:	68bb      	ldr	r3, [r7, #8]
 8003b3a:	4013      	ands	r3, r2
 8003b3c:	b29b      	uxth	r3, r3
 8003b3e:	2b00      	cmp	r3, #0
 8003b40:	bf14      	ite	ne
 8003b42:	2301      	movne	r3, #1
 8003b44:	2300      	moveq	r3, #0
 8003b46:	b2db      	uxtb	r3, r3
 8003b48:	e00b      	b.n	8003b62 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xc2>
 8003b4a:	68fb      	ldr	r3, [r7, #12]
 8003b4c:	681b      	ldr	r3, [r3, #0]
 8003b4e:	699b      	ldr	r3, [r3, #24]
 8003b50:	43da      	mvns	r2, r3
 8003b52:	68bb      	ldr	r3, [r7, #8]
 8003b54:	4013      	ands	r3, r2
 8003b56:	b29b      	uxth	r3, r3
 8003b58:	2b00      	cmp	r3, #0
 8003b5a:	bf14      	ite	ne
 8003b5c:	2301      	movne	r3, #1
 8003b5e:	2300      	moveq	r3, #0
 8003b60:	b2db      	uxtb	r3, r3
 8003b62:	2b00      	cmp	r3, #0
 8003b64:	d016      	beq.n	8003b94 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf4>
        {
          hi2c->PreviousState       = I2C_STATE_NONE;
 8003b66:	68fb      	ldr	r3, [r7, #12]
 8003b68:	2200      	movs	r2, #0
 8003b6a:	631a      	str	r2, [r3, #48]	@ 0x30
          hi2c->State               = HAL_I2C_STATE_READY;
 8003b6c:	68fb      	ldr	r3, [r7, #12]
 8003b6e:	2220      	movs	r2, #32
 8003b70:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
          hi2c->Mode                = HAL_I2C_MODE_NONE;
 8003b74:	68fb      	ldr	r3, [r7, #12]
 8003b76:	2200      	movs	r2, #0
 8003b78:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
          hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8003b7c:	68fb      	ldr	r3, [r7, #12]
 8003b7e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003b80:	f043 0220 	orr.w	r2, r3, #32
 8003b84:	68fb      	ldr	r3, [r7, #12]
 8003b86:	641a      	str	r2, [r3, #64]	@ 0x40

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 8003b88:	68fb      	ldr	r3, [r7, #12]
 8003b8a:	2200      	movs	r2, #0
 8003b8c:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

          return HAL_ERROR;
 8003b90:	2301      	movs	r3, #1
 8003b92:	e021      	b.n	8003bd8 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x138>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 8003b94:	68bb      	ldr	r3, [r7, #8]
 8003b96:	0c1b      	lsrs	r3, r3, #16
 8003b98:	b2db      	uxtb	r3, r3
 8003b9a:	2b01      	cmp	r3, #1
 8003b9c:	d10c      	bne.n	8003bb8 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x118>
 8003b9e:	68fb      	ldr	r3, [r7, #12]
 8003ba0:	681b      	ldr	r3, [r3, #0]
 8003ba2:	695b      	ldr	r3, [r3, #20]
 8003ba4:	43da      	mvns	r2, r3
 8003ba6:	68bb      	ldr	r3, [r7, #8]
 8003ba8:	4013      	ands	r3, r2
 8003baa:	b29b      	uxth	r3, r3
 8003bac:	2b00      	cmp	r3, #0
 8003bae:	bf14      	ite	ne
 8003bb0:	2301      	movne	r3, #1
 8003bb2:	2300      	moveq	r3, #0
 8003bb4:	b2db      	uxtb	r3, r3
 8003bb6:	e00b      	b.n	8003bd0 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x130>
 8003bb8:	68fb      	ldr	r3, [r7, #12]
 8003bba:	681b      	ldr	r3, [r3, #0]
 8003bbc:	699b      	ldr	r3, [r3, #24]
 8003bbe:	43da      	mvns	r2, r3
 8003bc0:	68bb      	ldr	r3, [r7, #8]
 8003bc2:	4013      	ands	r3, r2
 8003bc4:	b29b      	uxth	r3, r3
 8003bc6:	2b00      	cmp	r3, #0
 8003bc8:	bf14      	ite	ne
 8003bca:	2301      	movne	r3, #1
 8003bcc:	2300      	moveq	r3, #0
 8003bce:	b2db      	uxtb	r3, r3
 8003bd0:	2b00      	cmp	r3, #0
 8003bd2:	f47f af6d 	bne.w	8003ab0 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x10>
        }
      }
    }
  }
  return HAL_OK;
 8003bd6:	2300      	movs	r3, #0
}
 8003bd8:	4618      	mov	r0, r3
 8003bda:	3710      	adds	r7, #16
 8003bdc:	46bd      	mov	sp, r7
 8003bde:	bd80      	pop	{r7, pc}

08003be0 <I2C_WaitOnTXEFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnTXEFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8003be0:	b580      	push	{r7, lr}
 8003be2:	b084      	sub	sp, #16
 8003be4:	af00      	add	r7, sp, #0
 8003be6:	60f8      	str	r0, [r7, #12]
 8003be8:	60b9      	str	r1, [r7, #8]
 8003bea:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 8003bec:	e034      	b.n	8003c58 <I2C_WaitOnTXEFlagUntilTimeout+0x78>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c) != HAL_OK)
 8003bee:	68f8      	ldr	r0, [r7, #12]
 8003bf0:	f000 f8e3 	bl	8003dba <I2C_IsAcknowledgeFailed>
 8003bf4:	4603      	mov	r3, r0
 8003bf6:	2b00      	cmp	r3, #0
 8003bf8:	d001      	beq.n	8003bfe <I2C_WaitOnTXEFlagUntilTimeout+0x1e>
    {
      return HAL_ERROR;
 8003bfa:	2301      	movs	r3, #1
 8003bfc:	e034      	b.n	8003c68 <I2C_WaitOnTXEFlagUntilTimeout+0x88>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8003bfe:	68bb      	ldr	r3, [r7, #8]
 8003c00:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003c04:	d028      	beq.n	8003c58 <I2C_WaitOnTXEFlagUntilTimeout+0x78>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8003c06:	f7fe fcfb 	bl	8002600 <HAL_GetTick>
 8003c0a:	4602      	mov	r2, r0
 8003c0c:	687b      	ldr	r3, [r7, #4]
 8003c0e:	1ad3      	subs	r3, r2, r3
 8003c10:	68ba      	ldr	r2, [r7, #8]
 8003c12:	429a      	cmp	r2, r3
 8003c14:	d302      	bcc.n	8003c1c <I2C_WaitOnTXEFlagUntilTimeout+0x3c>
 8003c16:	68bb      	ldr	r3, [r7, #8]
 8003c18:	2b00      	cmp	r3, #0
 8003c1a:	d11d      	bne.n	8003c58 <I2C_WaitOnTXEFlagUntilTimeout+0x78>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET))
 8003c1c:	68fb      	ldr	r3, [r7, #12]
 8003c1e:	681b      	ldr	r3, [r3, #0]
 8003c20:	695b      	ldr	r3, [r3, #20]
 8003c22:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8003c26:	2b80      	cmp	r3, #128	@ 0x80
 8003c28:	d016      	beq.n	8003c58 <I2C_WaitOnTXEFlagUntilTimeout+0x78>
        {
          hi2c->PreviousState       = I2C_STATE_NONE;
 8003c2a:	68fb      	ldr	r3, [r7, #12]
 8003c2c:	2200      	movs	r2, #0
 8003c2e:	631a      	str	r2, [r3, #48]	@ 0x30
          hi2c->State               = HAL_I2C_STATE_READY;
 8003c30:	68fb      	ldr	r3, [r7, #12]
 8003c32:	2220      	movs	r2, #32
 8003c34:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
          hi2c->Mode                = HAL_I2C_MODE_NONE;
 8003c38:	68fb      	ldr	r3, [r7, #12]
 8003c3a:	2200      	movs	r2, #0
 8003c3c:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
          hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8003c40:	68fb      	ldr	r3, [r7, #12]
 8003c42:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003c44:	f043 0220 	orr.w	r2, r3, #32
 8003c48:	68fb      	ldr	r3, [r7, #12]
 8003c4a:	641a      	str	r2, [r3, #64]	@ 0x40

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 8003c4c:	68fb      	ldr	r3, [r7, #12]
 8003c4e:	2200      	movs	r2, #0
 8003c50:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

          return HAL_ERROR;
 8003c54:	2301      	movs	r3, #1
 8003c56:	e007      	b.n	8003c68 <I2C_WaitOnTXEFlagUntilTimeout+0x88>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 8003c58:	68fb      	ldr	r3, [r7, #12]
 8003c5a:	681b      	ldr	r3, [r3, #0]
 8003c5c:	695b      	ldr	r3, [r3, #20]
 8003c5e:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8003c62:	2b80      	cmp	r3, #128	@ 0x80
 8003c64:	d1c3      	bne.n	8003bee <I2C_WaitOnTXEFlagUntilTimeout+0xe>
        }
      }
    }
  }
  return HAL_OK;
 8003c66:	2300      	movs	r3, #0
}
 8003c68:	4618      	mov	r0, r3
 8003c6a:	3710      	adds	r7, #16
 8003c6c:	46bd      	mov	sp, r7
 8003c6e:	bd80      	pop	{r7, pc}

08003c70 <I2C_WaitOnBTFFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnBTFFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8003c70:	b580      	push	{r7, lr}
 8003c72:	b084      	sub	sp, #16
 8003c74:	af00      	add	r7, sp, #0
 8003c76:	60f8      	str	r0, [r7, #12]
 8003c78:	60b9      	str	r1, [r7, #8]
 8003c7a:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET)
 8003c7c:	e034      	b.n	8003ce8 <I2C_WaitOnBTFFlagUntilTimeout+0x78>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c) != HAL_OK)
 8003c7e:	68f8      	ldr	r0, [r7, #12]
 8003c80:	f000 f89b 	bl	8003dba <I2C_IsAcknowledgeFailed>
 8003c84:	4603      	mov	r3, r0
 8003c86:	2b00      	cmp	r3, #0
 8003c88:	d001      	beq.n	8003c8e <I2C_WaitOnBTFFlagUntilTimeout+0x1e>
    {
      return HAL_ERROR;
 8003c8a:	2301      	movs	r3, #1
 8003c8c:	e034      	b.n	8003cf8 <I2C_WaitOnBTFFlagUntilTimeout+0x88>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8003c8e:	68bb      	ldr	r3, [r7, #8]
 8003c90:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003c94:	d028      	beq.n	8003ce8 <I2C_WaitOnBTFFlagUntilTimeout+0x78>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8003c96:	f7fe fcb3 	bl	8002600 <HAL_GetTick>
 8003c9a:	4602      	mov	r2, r0
 8003c9c:	687b      	ldr	r3, [r7, #4]
 8003c9e:	1ad3      	subs	r3, r2, r3
 8003ca0:	68ba      	ldr	r2, [r7, #8]
 8003ca2:	429a      	cmp	r2, r3
 8003ca4:	d302      	bcc.n	8003cac <I2C_WaitOnBTFFlagUntilTimeout+0x3c>
 8003ca6:	68bb      	ldr	r3, [r7, #8]
 8003ca8:	2b00      	cmp	r3, #0
 8003caa:	d11d      	bne.n	8003ce8 <I2C_WaitOnBTFFlagUntilTimeout+0x78>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET))
 8003cac:	68fb      	ldr	r3, [r7, #12]
 8003cae:	681b      	ldr	r3, [r3, #0]
 8003cb0:	695b      	ldr	r3, [r3, #20]
 8003cb2:	f003 0304 	and.w	r3, r3, #4
 8003cb6:	2b04      	cmp	r3, #4
 8003cb8:	d016      	beq.n	8003ce8 <I2C_WaitOnBTFFlagUntilTimeout+0x78>
        {
          hi2c->PreviousState       = I2C_STATE_NONE;
 8003cba:	68fb      	ldr	r3, [r7, #12]
 8003cbc:	2200      	movs	r2, #0
 8003cbe:	631a      	str	r2, [r3, #48]	@ 0x30
          hi2c->State               = HAL_I2C_STATE_READY;
 8003cc0:	68fb      	ldr	r3, [r7, #12]
 8003cc2:	2220      	movs	r2, #32
 8003cc4:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
          hi2c->Mode                = HAL_I2C_MODE_NONE;
 8003cc8:	68fb      	ldr	r3, [r7, #12]
 8003cca:	2200      	movs	r2, #0
 8003ccc:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
          hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8003cd0:	68fb      	ldr	r3, [r7, #12]
 8003cd2:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003cd4:	f043 0220 	orr.w	r2, r3, #32
 8003cd8:	68fb      	ldr	r3, [r7, #12]
 8003cda:	641a      	str	r2, [r3, #64]	@ 0x40

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 8003cdc:	68fb      	ldr	r3, [r7, #12]
 8003cde:	2200      	movs	r2, #0
 8003ce0:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

          return HAL_ERROR;
 8003ce4:	2301      	movs	r3, #1
 8003ce6:	e007      	b.n	8003cf8 <I2C_WaitOnBTFFlagUntilTimeout+0x88>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET)
 8003ce8:	68fb      	ldr	r3, [r7, #12]
 8003cea:	681b      	ldr	r3, [r3, #0]
 8003cec:	695b      	ldr	r3, [r3, #20]
 8003cee:	f003 0304 	and.w	r3, r3, #4
 8003cf2:	2b04      	cmp	r3, #4
 8003cf4:	d1c3      	bne.n	8003c7e <I2C_WaitOnBTFFlagUntilTimeout+0xe>
        }
      }
    }
  }
  return HAL_OK;
 8003cf6:	2300      	movs	r3, #0
}
 8003cf8:	4618      	mov	r0, r3
 8003cfa:	3710      	adds	r7, #16
 8003cfc:	46bd      	mov	sp, r7
 8003cfe:	bd80      	pop	{r7, pc}

08003d00 <I2C_WaitOnRXNEFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnRXNEFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8003d00:	b580      	push	{r7, lr}
 8003d02:	b084      	sub	sp, #16
 8003d04:	af00      	add	r7, sp, #0
 8003d06:	60f8      	str	r0, [r7, #12]
 8003d08:	60b9      	str	r1, [r7, #8]
 8003d0a:	607a      	str	r2, [r7, #4]

  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET)
 8003d0c:	e049      	b.n	8003da2 <I2C_WaitOnRXNEFlagUntilTimeout+0xa2>
  {
    /* Check if a STOPF is detected */
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == SET)
 8003d0e:	68fb      	ldr	r3, [r7, #12]
 8003d10:	681b      	ldr	r3, [r3, #0]
 8003d12:	695b      	ldr	r3, [r3, #20]
 8003d14:	f003 0310 	and.w	r3, r3, #16
 8003d18:	2b10      	cmp	r3, #16
 8003d1a:	d119      	bne.n	8003d50 <I2C_WaitOnRXNEFlagUntilTimeout+0x50>
    {
      /* Clear STOP Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8003d1c:	68fb      	ldr	r3, [r7, #12]
 8003d1e:	681b      	ldr	r3, [r3, #0]
 8003d20:	f06f 0210 	mvn.w	r2, #16
 8003d24:	615a      	str	r2, [r3, #20]

      hi2c->PreviousState       = I2C_STATE_NONE;
 8003d26:	68fb      	ldr	r3, [r7, #12]
 8003d28:	2200      	movs	r2, #0
 8003d2a:	631a      	str	r2, [r3, #48]	@ 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 8003d2c:	68fb      	ldr	r3, [r7, #12]
 8003d2e:	2220      	movs	r2, #32
 8003d30:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 8003d34:	68fb      	ldr	r3, [r7, #12]
 8003d36:	2200      	movs	r2, #0
 8003d38:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_NONE;
 8003d3c:	68fb      	ldr	r3, [r7, #12]
 8003d3e:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 8003d40:	68fb      	ldr	r3, [r7, #12]
 8003d42:	641a      	str	r2, [r3, #64]	@ 0x40

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8003d44:	68fb      	ldr	r3, [r7, #12]
 8003d46:	2200      	movs	r2, #0
 8003d48:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

      return HAL_ERROR;
 8003d4c:	2301      	movs	r3, #1
 8003d4e:	e030      	b.n	8003db2 <I2C_WaitOnRXNEFlagUntilTimeout+0xb2>
    }

    /* Check for the Timeout */
    if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8003d50:	f7fe fc56 	bl	8002600 <HAL_GetTick>
 8003d54:	4602      	mov	r2, r0
 8003d56:	687b      	ldr	r3, [r7, #4]
 8003d58:	1ad3      	subs	r3, r2, r3
 8003d5a:	68ba      	ldr	r2, [r7, #8]
 8003d5c:	429a      	cmp	r2, r3
 8003d5e:	d302      	bcc.n	8003d66 <I2C_WaitOnRXNEFlagUntilTimeout+0x66>
 8003d60:	68bb      	ldr	r3, [r7, #8]
 8003d62:	2b00      	cmp	r3, #0
 8003d64:	d11d      	bne.n	8003da2 <I2C_WaitOnRXNEFlagUntilTimeout+0xa2>
    {
      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET))
 8003d66:	68fb      	ldr	r3, [r7, #12]
 8003d68:	681b      	ldr	r3, [r3, #0]
 8003d6a:	695b      	ldr	r3, [r3, #20]
 8003d6c:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8003d70:	2b40      	cmp	r3, #64	@ 0x40
 8003d72:	d016      	beq.n	8003da2 <I2C_WaitOnRXNEFlagUntilTimeout+0xa2>
      {
        hi2c->PreviousState       = I2C_STATE_NONE;
 8003d74:	68fb      	ldr	r3, [r7, #12]
 8003d76:	2200      	movs	r2, #0
 8003d78:	631a      	str	r2, [r3, #48]	@ 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 8003d7a:	68fb      	ldr	r3, [r7, #12]
 8003d7c:	2220      	movs	r2, #32
 8003d7e:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 8003d82:	68fb      	ldr	r3, [r7, #12]
 8003d84:	2200      	movs	r2, #0
 8003d86:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8003d8a:	68fb      	ldr	r3, [r7, #12]
 8003d8c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003d8e:	f043 0220 	orr.w	r2, r3, #32
 8003d92:	68fb      	ldr	r3, [r7, #12]
 8003d94:	641a      	str	r2, [r3, #64]	@ 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8003d96:	68fb      	ldr	r3, [r7, #12]
 8003d98:	2200      	movs	r2, #0
 8003d9a:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

        return HAL_ERROR;
 8003d9e:	2301      	movs	r3, #1
 8003da0:	e007      	b.n	8003db2 <I2C_WaitOnRXNEFlagUntilTimeout+0xb2>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET)
 8003da2:	68fb      	ldr	r3, [r7, #12]
 8003da4:	681b      	ldr	r3, [r3, #0]
 8003da6:	695b      	ldr	r3, [r3, #20]
 8003da8:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8003dac:	2b40      	cmp	r3, #64	@ 0x40
 8003dae:	d1ae      	bne.n	8003d0e <I2C_WaitOnRXNEFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
 8003db0:	2300      	movs	r3, #0
}
 8003db2:	4618      	mov	r0, r3
 8003db4:	3710      	adds	r7, #16
 8003db6:	46bd      	mov	sp, r7
 8003db8:	bd80      	pop	{r7, pc}

08003dba <I2C_IsAcknowledgeFailed>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_IsAcknowledgeFailed(I2C_HandleTypeDef *hi2c)
{
 8003dba:	b480      	push	{r7}
 8003dbc:	b083      	sub	sp, #12
 8003dbe:	af00      	add	r7, sp, #0
 8003dc0:	6078      	str	r0, [r7, #4]
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 8003dc2:	687b      	ldr	r3, [r7, #4]
 8003dc4:	681b      	ldr	r3, [r3, #0]
 8003dc6:	695b      	ldr	r3, [r3, #20]
 8003dc8:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8003dcc:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8003dd0:	d11b      	bne.n	8003e0a <I2C_IsAcknowledgeFailed+0x50>
  {
    /* Clear NACKF Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8003dd2:	687b      	ldr	r3, [r7, #4]
 8003dd4:	681b      	ldr	r3, [r3, #0]
 8003dd6:	f46f 6280 	mvn.w	r2, #1024	@ 0x400
 8003dda:	615a      	str	r2, [r3, #20]

    hi2c->PreviousState       = I2C_STATE_NONE;
 8003ddc:	687b      	ldr	r3, [r7, #4]
 8003dde:	2200      	movs	r2, #0
 8003de0:	631a      	str	r2, [r3, #48]	@ 0x30
    hi2c->State               = HAL_I2C_STATE_READY;
 8003de2:	687b      	ldr	r3, [r7, #4]
 8003de4:	2220      	movs	r2, #32
 8003de6:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
    hi2c->Mode                = HAL_I2C_MODE_NONE;
 8003dea:	687b      	ldr	r3, [r7, #4]
 8003dec:	2200      	movs	r2, #0
 8003dee:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
    hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 8003df2:	687b      	ldr	r3, [r7, #4]
 8003df4:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003df6:	f043 0204 	orr.w	r2, r3, #4
 8003dfa:	687b      	ldr	r3, [r7, #4]
 8003dfc:	641a      	str	r2, [r3, #64]	@ 0x40

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8003dfe:	687b      	ldr	r3, [r7, #4]
 8003e00:	2200      	movs	r2, #0
 8003e02:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    return HAL_ERROR;
 8003e06:	2301      	movs	r3, #1
 8003e08:	e000      	b.n	8003e0c <I2C_IsAcknowledgeFailed+0x52>
  }
  return HAL_OK;
 8003e0a:	2300      	movs	r3, #0
}
 8003e0c:	4618      	mov	r0, r3
 8003e0e:	370c      	adds	r7, #12
 8003e10:	46bd      	mov	sp, r7
 8003e12:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003e16:	4770      	bx	lr

08003e18 <HAL_I2CEx_ConfigAnalogFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  AnalogFilter new state of the Analog filter.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigAnalogFilter(I2C_HandleTypeDef *hi2c, uint32_t AnalogFilter)
{
 8003e18:	b480      	push	{r7}
 8003e1a:	b083      	sub	sp, #12
 8003e1c:	af00      	add	r7, sp, #0
 8003e1e:	6078      	str	r0, [r7, #4]
 8003e20:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_ANALOG_FILTER(AnalogFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8003e22:	687b      	ldr	r3, [r7, #4]
 8003e24:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8003e28:	b2db      	uxtb	r3, r3
 8003e2a:	2b20      	cmp	r3, #32
 8003e2c:	d129      	bne.n	8003e82 <HAL_I2CEx_ConfigAnalogFilter+0x6a>
  {
    hi2c->State = HAL_I2C_STATE_BUSY;
 8003e2e:	687b      	ldr	r3, [r7, #4]
 8003e30:	2224      	movs	r2, #36	@ 0x24
 8003e32:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 8003e36:	687b      	ldr	r3, [r7, #4]
 8003e38:	681b      	ldr	r3, [r3, #0]
 8003e3a:	681a      	ldr	r2, [r3, #0]
 8003e3c:	687b      	ldr	r3, [r7, #4]
 8003e3e:	681b      	ldr	r3, [r3, #0]
 8003e40:	f022 0201 	bic.w	r2, r2, #1
 8003e44:	601a      	str	r2, [r3, #0]

    /* Reset I2Cx ANOFF bit */
    hi2c->Instance->FLTR &= ~(I2C_FLTR_ANOFF);
 8003e46:	687b      	ldr	r3, [r7, #4]
 8003e48:	681b      	ldr	r3, [r3, #0]
 8003e4a:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 8003e4c:	687b      	ldr	r3, [r7, #4]
 8003e4e:	681b      	ldr	r3, [r3, #0]
 8003e50:	f022 0210 	bic.w	r2, r2, #16
 8003e54:	625a      	str	r2, [r3, #36]	@ 0x24

    /* Disable the analog filter */
    hi2c->Instance->FLTR |= AnalogFilter;
 8003e56:	687b      	ldr	r3, [r7, #4]
 8003e58:	681b      	ldr	r3, [r3, #0]
 8003e5a:	6a59      	ldr	r1, [r3, #36]	@ 0x24
 8003e5c:	687b      	ldr	r3, [r7, #4]
 8003e5e:	681b      	ldr	r3, [r3, #0]
 8003e60:	683a      	ldr	r2, [r7, #0]
 8003e62:	430a      	orrs	r2, r1
 8003e64:	625a      	str	r2, [r3, #36]	@ 0x24

    __HAL_I2C_ENABLE(hi2c);
 8003e66:	687b      	ldr	r3, [r7, #4]
 8003e68:	681b      	ldr	r3, [r3, #0]
 8003e6a:	681a      	ldr	r2, [r3, #0]
 8003e6c:	687b      	ldr	r3, [r7, #4]
 8003e6e:	681b      	ldr	r3, [r3, #0]
 8003e70:	f042 0201 	orr.w	r2, r2, #1
 8003e74:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8003e76:	687b      	ldr	r3, [r7, #4]
 8003e78:	2220      	movs	r2, #32
 8003e7a:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

    return HAL_OK;
 8003e7e:	2300      	movs	r3, #0
 8003e80:	e000      	b.n	8003e84 <HAL_I2CEx_ConfigAnalogFilter+0x6c>
  }
  else
  {
    return HAL_BUSY;
 8003e82:	2302      	movs	r3, #2
  }
}
 8003e84:	4618      	mov	r0, r3
 8003e86:	370c      	adds	r7, #12
 8003e88:	46bd      	mov	sp, r7
 8003e8a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003e8e:	4770      	bx	lr

08003e90 <HAL_I2CEx_ConfigDigitalFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  DigitalFilter Coefficient of digital noise filter between 0x00 and 0x0F.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigDigitalFilter(I2C_HandleTypeDef *hi2c, uint32_t DigitalFilter)
{
 8003e90:	b480      	push	{r7}
 8003e92:	b085      	sub	sp, #20
 8003e94:	af00      	add	r7, sp, #0
 8003e96:	6078      	str	r0, [r7, #4]
 8003e98:	6039      	str	r1, [r7, #0]
  uint16_t tmpreg = 0;
 8003e9a:	2300      	movs	r3, #0
 8003e9c:	81fb      	strh	r3, [r7, #14]

  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_DIGITAL_FILTER(DigitalFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8003e9e:	687b      	ldr	r3, [r7, #4]
 8003ea0:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8003ea4:	b2db      	uxtb	r3, r3
 8003ea6:	2b20      	cmp	r3, #32
 8003ea8:	d12a      	bne.n	8003f00 <HAL_I2CEx_ConfigDigitalFilter+0x70>
  {
    hi2c->State = HAL_I2C_STATE_BUSY;
 8003eaa:	687b      	ldr	r3, [r7, #4]
 8003eac:	2224      	movs	r2, #36	@ 0x24
 8003eae:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 8003eb2:	687b      	ldr	r3, [r7, #4]
 8003eb4:	681b      	ldr	r3, [r3, #0]
 8003eb6:	681a      	ldr	r2, [r3, #0]
 8003eb8:	687b      	ldr	r3, [r7, #4]
 8003eba:	681b      	ldr	r3, [r3, #0]
 8003ebc:	f022 0201 	bic.w	r2, r2, #1
 8003ec0:	601a      	str	r2, [r3, #0]

    /* Get the old register value */
    tmpreg = hi2c->Instance->FLTR;
 8003ec2:	687b      	ldr	r3, [r7, #4]
 8003ec4:	681b      	ldr	r3, [r3, #0]
 8003ec6:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003ec8:	81fb      	strh	r3, [r7, #14]

    /* Reset I2Cx DNF bit [3:0] */
    tmpreg &= ~(I2C_FLTR_DNF);
 8003eca:	89fb      	ldrh	r3, [r7, #14]
 8003ecc:	f023 030f 	bic.w	r3, r3, #15
 8003ed0:	81fb      	strh	r3, [r7, #14]

    /* Set I2Cx DNF coefficient */
    tmpreg |= DigitalFilter;
 8003ed2:	683b      	ldr	r3, [r7, #0]
 8003ed4:	b29a      	uxth	r2, r3
 8003ed6:	89fb      	ldrh	r3, [r7, #14]
 8003ed8:	4313      	orrs	r3, r2
 8003eda:	81fb      	strh	r3, [r7, #14]

    /* Store the new register value */
    hi2c->Instance->FLTR = tmpreg;
 8003edc:	687b      	ldr	r3, [r7, #4]
 8003ede:	681b      	ldr	r3, [r3, #0]
 8003ee0:	89fa      	ldrh	r2, [r7, #14]
 8003ee2:	625a      	str	r2, [r3, #36]	@ 0x24

    __HAL_I2C_ENABLE(hi2c);
 8003ee4:	687b      	ldr	r3, [r7, #4]
 8003ee6:	681b      	ldr	r3, [r3, #0]
 8003ee8:	681a      	ldr	r2, [r3, #0]
 8003eea:	687b      	ldr	r3, [r7, #4]
 8003eec:	681b      	ldr	r3, [r3, #0]
 8003eee:	f042 0201 	orr.w	r2, r2, #1
 8003ef2:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8003ef4:	687b      	ldr	r3, [r7, #4]
 8003ef6:	2220      	movs	r2, #32
 8003ef8:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

    return HAL_OK;
 8003efc:	2300      	movs	r3, #0
 8003efe:	e000      	b.n	8003f02 <HAL_I2CEx_ConfigDigitalFilter+0x72>
  }
  else
  {
    return HAL_BUSY;
 8003f00:	2302      	movs	r3, #2
  }
}
 8003f02:	4618      	mov	r0, r3
 8003f04:	3714      	adds	r7, #20
 8003f06:	46bd      	mov	sp, r7
 8003f08:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003f0c:	4770      	bx	lr
	...

08003f10 <HAL_LTDC_Init>:
  * @param  hltdc  pointer to a LTDC_HandleTypeDef structure that contains
  *                the configuration information for the LTDC.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_LTDC_Init(LTDC_HandleTypeDef *hltdc)
{
 8003f10:	b580      	push	{r7, lr}
 8003f12:	b084      	sub	sp, #16
 8003f14:	af00      	add	r7, sp, #0
 8003f16:	6078      	str	r0, [r7, #4]
  uint32_t tmp;
  uint32_t tmp1;

  /* Check the LTDC peripheral state */
  if (hltdc == NULL)
 8003f18:	687b      	ldr	r3, [r7, #4]
 8003f1a:	2b00      	cmp	r3, #0
 8003f1c:	d101      	bne.n	8003f22 <HAL_LTDC_Init+0x12>
  {
    return HAL_ERROR;
 8003f1e:	2301      	movs	r3, #1
 8003f20:	e0bf      	b.n	80040a2 <HAL_LTDC_Init+0x192>
    }
    /* Init the low level hardware */
    hltdc->MspInitCallback(hltdc);
  }
#else
  if (hltdc->State == HAL_LTDC_STATE_RESET)
 8003f22:	687b      	ldr	r3, [r7, #4]
 8003f24:	f893 30a1 	ldrb.w	r3, [r3, #161]	@ 0xa1
 8003f28:	b2db      	uxtb	r3, r3
 8003f2a:	2b00      	cmp	r3, #0
 8003f2c:	d106      	bne.n	8003f3c <HAL_LTDC_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hltdc->Lock = HAL_UNLOCKED;
 8003f2e:	687b      	ldr	r3, [r7, #4]
 8003f30:	2200      	movs	r2, #0
 8003f32:	f883 20a0 	strb.w	r2, [r3, #160]	@ 0xa0
    /* Init the low level hardware */
    HAL_LTDC_MspInit(hltdc);
 8003f36:	6878      	ldr	r0, [r7, #4]
 8003f38:	f7fd fed4 	bl	8001ce4 <HAL_LTDC_MspInit>
  }
#endif /* USE_HAL_LTDC_REGISTER_CALLBACKS */

  /* Change LTDC peripheral state */
  hltdc->State = HAL_LTDC_STATE_BUSY;
 8003f3c:	687b      	ldr	r3, [r7, #4]
 8003f3e:	2202      	movs	r2, #2
 8003f40:	f883 20a1 	strb.w	r2, [r3, #161]	@ 0xa1

  /* Configure the HS, VS, DE and PC polarity */
  hltdc->Instance->GCR &= ~(LTDC_GCR_HSPOL | LTDC_GCR_VSPOL | LTDC_GCR_DEPOL | LTDC_GCR_PCPOL);
 8003f44:	687b      	ldr	r3, [r7, #4]
 8003f46:	681b      	ldr	r3, [r3, #0]
 8003f48:	699a      	ldr	r2, [r3, #24]
 8003f4a:	687b      	ldr	r3, [r7, #4]
 8003f4c:	681b      	ldr	r3, [r3, #0]
 8003f4e:	f022 4270 	bic.w	r2, r2, #4026531840	@ 0xf0000000
 8003f52:	619a      	str	r2, [r3, #24]
  hltdc->Instance->GCR |= (uint32_t)(hltdc->Init.HSPolarity | hltdc->Init.VSPolarity | \
 8003f54:	687b      	ldr	r3, [r7, #4]
 8003f56:	681b      	ldr	r3, [r3, #0]
 8003f58:	6999      	ldr	r1, [r3, #24]
 8003f5a:	687b      	ldr	r3, [r7, #4]
 8003f5c:	685a      	ldr	r2, [r3, #4]
 8003f5e:	687b      	ldr	r3, [r7, #4]
 8003f60:	689b      	ldr	r3, [r3, #8]
 8003f62:	431a      	orrs	r2, r3
                                     hltdc->Init.DEPolarity | hltdc->Init.PCPolarity);
 8003f64:	687b      	ldr	r3, [r7, #4]
 8003f66:	68db      	ldr	r3, [r3, #12]
  hltdc->Instance->GCR |= (uint32_t)(hltdc->Init.HSPolarity | hltdc->Init.VSPolarity | \
 8003f68:	431a      	orrs	r2, r3
                                     hltdc->Init.DEPolarity | hltdc->Init.PCPolarity);
 8003f6a:	687b      	ldr	r3, [r7, #4]
 8003f6c:	691b      	ldr	r3, [r3, #16]
 8003f6e:	431a      	orrs	r2, r3
  hltdc->Instance->GCR |= (uint32_t)(hltdc->Init.HSPolarity | hltdc->Init.VSPolarity | \
 8003f70:	687b      	ldr	r3, [r7, #4]
 8003f72:	681b      	ldr	r3, [r3, #0]
 8003f74:	430a      	orrs	r2, r1
 8003f76:	619a      	str	r2, [r3, #24]

  /* Set Synchronization size */
  hltdc->Instance->SSCR &= ~(LTDC_SSCR_VSH | LTDC_SSCR_HSW);
 8003f78:	687b      	ldr	r3, [r7, #4]
 8003f7a:	681b      	ldr	r3, [r3, #0]
 8003f7c:	6899      	ldr	r1, [r3, #8]
 8003f7e:	687b      	ldr	r3, [r7, #4]
 8003f80:	681a      	ldr	r2, [r3, #0]
 8003f82:	4b4a      	ldr	r3, [pc, #296]	@ (80040ac <HAL_LTDC_Init+0x19c>)
 8003f84:	400b      	ands	r3, r1
 8003f86:	6093      	str	r3, [r2, #8]
  tmp = (hltdc->Init.HorizontalSync << 16U);
 8003f88:	687b      	ldr	r3, [r7, #4]
 8003f8a:	695b      	ldr	r3, [r3, #20]
 8003f8c:	041b      	lsls	r3, r3, #16
 8003f8e:	60fb      	str	r3, [r7, #12]
  hltdc->Instance->SSCR |= (tmp | hltdc->Init.VerticalSync);
 8003f90:	687b      	ldr	r3, [r7, #4]
 8003f92:	681b      	ldr	r3, [r3, #0]
 8003f94:	6899      	ldr	r1, [r3, #8]
 8003f96:	687b      	ldr	r3, [r7, #4]
 8003f98:	699a      	ldr	r2, [r3, #24]
 8003f9a:	68fb      	ldr	r3, [r7, #12]
 8003f9c:	431a      	orrs	r2, r3
 8003f9e:	687b      	ldr	r3, [r7, #4]
 8003fa0:	681b      	ldr	r3, [r3, #0]
 8003fa2:	430a      	orrs	r2, r1
 8003fa4:	609a      	str	r2, [r3, #8]

  /* Set Accumulated Back porch */
  hltdc->Instance->BPCR &= ~(LTDC_BPCR_AVBP | LTDC_BPCR_AHBP);
 8003fa6:	687b      	ldr	r3, [r7, #4]
 8003fa8:	681b      	ldr	r3, [r3, #0]
 8003faa:	68d9      	ldr	r1, [r3, #12]
 8003fac:	687b      	ldr	r3, [r7, #4]
 8003fae:	681a      	ldr	r2, [r3, #0]
 8003fb0:	4b3e      	ldr	r3, [pc, #248]	@ (80040ac <HAL_LTDC_Init+0x19c>)
 8003fb2:	400b      	ands	r3, r1
 8003fb4:	60d3      	str	r3, [r2, #12]
  tmp = (hltdc->Init.AccumulatedHBP << 16U);
 8003fb6:	687b      	ldr	r3, [r7, #4]
 8003fb8:	69db      	ldr	r3, [r3, #28]
 8003fba:	041b      	lsls	r3, r3, #16
 8003fbc:	60fb      	str	r3, [r7, #12]
  hltdc->Instance->BPCR |= (tmp | hltdc->Init.AccumulatedVBP);
 8003fbe:	687b      	ldr	r3, [r7, #4]
 8003fc0:	681b      	ldr	r3, [r3, #0]
 8003fc2:	68d9      	ldr	r1, [r3, #12]
 8003fc4:	687b      	ldr	r3, [r7, #4]
 8003fc6:	6a1a      	ldr	r2, [r3, #32]
 8003fc8:	68fb      	ldr	r3, [r7, #12]
 8003fca:	431a      	orrs	r2, r3
 8003fcc:	687b      	ldr	r3, [r7, #4]
 8003fce:	681b      	ldr	r3, [r3, #0]
 8003fd0:	430a      	orrs	r2, r1
 8003fd2:	60da      	str	r2, [r3, #12]

  /* Set Accumulated Active Width */
  hltdc->Instance->AWCR &= ~(LTDC_AWCR_AAH | LTDC_AWCR_AAW);
 8003fd4:	687b      	ldr	r3, [r7, #4]
 8003fd6:	681b      	ldr	r3, [r3, #0]
 8003fd8:	6919      	ldr	r1, [r3, #16]
 8003fda:	687b      	ldr	r3, [r7, #4]
 8003fdc:	681a      	ldr	r2, [r3, #0]
 8003fde:	4b33      	ldr	r3, [pc, #204]	@ (80040ac <HAL_LTDC_Init+0x19c>)
 8003fe0:	400b      	ands	r3, r1
 8003fe2:	6113      	str	r3, [r2, #16]
  tmp = (hltdc->Init.AccumulatedActiveW << 16U);
 8003fe4:	687b      	ldr	r3, [r7, #4]
 8003fe6:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003fe8:	041b      	lsls	r3, r3, #16
 8003fea:	60fb      	str	r3, [r7, #12]
  hltdc->Instance->AWCR |= (tmp | hltdc->Init.AccumulatedActiveH);
 8003fec:	687b      	ldr	r3, [r7, #4]
 8003fee:	681b      	ldr	r3, [r3, #0]
 8003ff0:	6919      	ldr	r1, [r3, #16]
 8003ff2:	687b      	ldr	r3, [r7, #4]
 8003ff4:	6a9a      	ldr	r2, [r3, #40]	@ 0x28
 8003ff6:	68fb      	ldr	r3, [r7, #12]
 8003ff8:	431a      	orrs	r2, r3
 8003ffa:	687b      	ldr	r3, [r7, #4]
 8003ffc:	681b      	ldr	r3, [r3, #0]
 8003ffe:	430a      	orrs	r2, r1
 8004000:	611a      	str	r2, [r3, #16]

  /* Set Total Width */
  hltdc->Instance->TWCR &= ~(LTDC_TWCR_TOTALH | LTDC_TWCR_TOTALW);
 8004002:	687b      	ldr	r3, [r7, #4]
 8004004:	681b      	ldr	r3, [r3, #0]
 8004006:	6959      	ldr	r1, [r3, #20]
 8004008:	687b      	ldr	r3, [r7, #4]
 800400a:	681a      	ldr	r2, [r3, #0]
 800400c:	4b27      	ldr	r3, [pc, #156]	@ (80040ac <HAL_LTDC_Init+0x19c>)
 800400e:	400b      	ands	r3, r1
 8004010:	6153      	str	r3, [r2, #20]
  tmp = (hltdc->Init.TotalWidth << 16U);
 8004012:	687b      	ldr	r3, [r7, #4]
 8004014:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8004016:	041b      	lsls	r3, r3, #16
 8004018:	60fb      	str	r3, [r7, #12]
  hltdc->Instance->TWCR |= (tmp | hltdc->Init.TotalHeigh);
 800401a:	687b      	ldr	r3, [r7, #4]
 800401c:	681b      	ldr	r3, [r3, #0]
 800401e:	6959      	ldr	r1, [r3, #20]
 8004020:	687b      	ldr	r3, [r7, #4]
 8004022:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 8004024:	68fb      	ldr	r3, [r7, #12]
 8004026:	431a      	orrs	r2, r3
 8004028:	687b      	ldr	r3, [r7, #4]
 800402a:	681b      	ldr	r3, [r3, #0]
 800402c:	430a      	orrs	r2, r1
 800402e:	615a      	str	r2, [r3, #20]

  /* Set the background color value */
  tmp = ((uint32_t)(hltdc->Init.Backcolor.Green) << 8U);
 8004030:	687b      	ldr	r3, [r7, #4]
 8004032:	f893 3035 	ldrb.w	r3, [r3, #53]	@ 0x35
 8004036:	021b      	lsls	r3, r3, #8
 8004038:	60fb      	str	r3, [r7, #12]
  tmp1 = ((uint32_t)(hltdc->Init.Backcolor.Red) << 16U);
 800403a:	687b      	ldr	r3, [r7, #4]
 800403c:	f893 3036 	ldrb.w	r3, [r3, #54]	@ 0x36
 8004040:	041b      	lsls	r3, r3, #16
 8004042:	60bb      	str	r3, [r7, #8]
  hltdc->Instance->BCCR &= ~(LTDC_BCCR_BCBLUE | LTDC_BCCR_BCGREEN | LTDC_BCCR_BCRED);
 8004044:	687b      	ldr	r3, [r7, #4]
 8004046:	681b      	ldr	r3, [r3, #0]
 8004048:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800404a:	687b      	ldr	r3, [r7, #4]
 800404c:	681b      	ldr	r3, [r3, #0]
 800404e:	f002 427f 	and.w	r2, r2, #4278190080	@ 0xff000000
 8004052:	62da      	str	r2, [r3, #44]	@ 0x2c
  hltdc->Instance->BCCR |= (tmp1 | tmp | hltdc->Init.Backcolor.Blue);
 8004054:	687b      	ldr	r3, [r7, #4]
 8004056:	681b      	ldr	r3, [r3, #0]
 8004058:	6ad9      	ldr	r1, [r3, #44]	@ 0x2c
 800405a:	68ba      	ldr	r2, [r7, #8]
 800405c:	68fb      	ldr	r3, [r7, #12]
 800405e:	4313      	orrs	r3, r2
 8004060:	687a      	ldr	r2, [r7, #4]
 8004062:	f892 2034 	ldrb.w	r2, [r2, #52]	@ 0x34
 8004066:	431a      	orrs	r2, r3
 8004068:	687b      	ldr	r3, [r7, #4]
 800406a:	681b      	ldr	r3, [r3, #0]
 800406c:	430a      	orrs	r2, r1
 800406e:	62da      	str	r2, [r3, #44]	@ 0x2c

  /* Enable the Transfer Error and FIFO underrun interrupts */
  __HAL_LTDC_ENABLE_IT(hltdc, LTDC_IT_TE | LTDC_IT_FU);
 8004070:	687b      	ldr	r3, [r7, #4]
 8004072:	681b      	ldr	r3, [r3, #0]
 8004074:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 8004076:	687b      	ldr	r3, [r7, #4]
 8004078:	681b      	ldr	r3, [r3, #0]
 800407a:	f042 0206 	orr.w	r2, r2, #6
 800407e:	635a      	str	r2, [r3, #52]	@ 0x34

  /* Enable LTDC by setting LTDCEN bit */
  __HAL_LTDC_ENABLE(hltdc);
 8004080:	687b      	ldr	r3, [r7, #4]
 8004082:	681b      	ldr	r3, [r3, #0]
 8004084:	699a      	ldr	r2, [r3, #24]
 8004086:	687b      	ldr	r3, [r7, #4]
 8004088:	681b      	ldr	r3, [r3, #0]
 800408a:	f042 0201 	orr.w	r2, r2, #1
 800408e:	619a      	str	r2, [r3, #24]

  /* Initialize the error code */
  hltdc->ErrorCode = HAL_LTDC_ERROR_NONE;
 8004090:	687b      	ldr	r3, [r7, #4]
 8004092:	2200      	movs	r2, #0
 8004094:	f8c3 20a4 	str.w	r2, [r3, #164]	@ 0xa4

  /* Initialize the LTDC state*/
  hltdc->State = HAL_LTDC_STATE_READY;
 8004098:	687b      	ldr	r3, [r7, #4]
 800409a:	2201      	movs	r2, #1
 800409c:	f883 20a1 	strb.w	r2, [r3, #161]	@ 0xa1

  return HAL_OK;
 80040a0:	2300      	movs	r3, #0
}
 80040a2:	4618      	mov	r0, r3
 80040a4:	3710      	adds	r7, #16
 80040a6:	46bd      	mov	sp, r7
 80040a8:	bd80      	pop	{r7, pc}
 80040aa:	bf00      	nop
 80040ac:	f000f800 	.word	0xf000f800

080040b0 <HAL_LTDC_ConfigLayer>:
  *                    This parameter can be one of the following values:
  *                    LTDC_LAYER_1 (0) or LTDC_LAYER_2 (1)
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_LTDC_ConfigLayer(LTDC_HandleTypeDef *hltdc, LTDC_LayerCfgTypeDef *pLayerCfg, uint32_t LayerIdx)
{
 80040b0:	b5b0      	push	{r4, r5, r7, lr}
 80040b2:	b084      	sub	sp, #16
 80040b4:	af00      	add	r7, sp, #0
 80040b6:	60f8      	str	r0, [r7, #12]
 80040b8:	60b9      	str	r1, [r7, #8]
 80040ba:	607a      	str	r2, [r7, #4]
  assert_param(IS_LTDC_BLENDING_FACTOR2(pLayerCfg->BlendingFactor2));
  assert_param(IS_LTDC_CFBLL(pLayerCfg->ImageWidth));
  assert_param(IS_LTDC_CFBLNBR(pLayerCfg->ImageHeight));

  /* Process locked */
  __HAL_LOCK(hltdc);
 80040bc:	68fb      	ldr	r3, [r7, #12]
 80040be:	f893 30a0 	ldrb.w	r3, [r3, #160]	@ 0xa0
 80040c2:	2b01      	cmp	r3, #1
 80040c4:	d101      	bne.n	80040ca <HAL_LTDC_ConfigLayer+0x1a>
 80040c6:	2302      	movs	r3, #2
 80040c8:	e02c      	b.n	8004124 <HAL_LTDC_ConfigLayer+0x74>
 80040ca:	68fb      	ldr	r3, [r7, #12]
 80040cc:	2201      	movs	r2, #1
 80040ce:	f883 20a0 	strb.w	r2, [r3, #160]	@ 0xa0

  /* Change LTDC peripheral state */
  hltdc->State = HAL_LTDC_STATE_BUSY;
 80040d2:	68fb      	ldr	r3, [r7, #12]
 80040d4:	2202      	movs	r2, #2
 80040d6:	f883 20a1 	strb.w	r2, [r3, #161]	@ 0xa1

  /* Copy new layer configuration into handle structure */
  hltdc->LayerCfg[LayerIdx] = *pLayerCfg;
 80040da:	68fa      	ldr	r2, [r7, #12]
 80040dc:	687b      	ldr	r3, [r7, #4]
 80040de:	2134      	movs	r1, #52	@ 0x34
 80040e0:	fb01 f303 	mul.w	r3, r1, r3
 80040e4:	4413      	add	r3, r2
 80040e6:	f103 0238 	add.w	r2, r3, #56	@ 0x38
 80040ea:	68bb      	ldr	r3, [r7, #8]
 80040ec:	4614      	mov	r4, r2
 80040ee:	461d      	mov	r5, r3
 80040f0:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 80040f2:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 80040f4:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 80040f6:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 80040f8:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 80040fa:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 80040fc:	682b      	ldr	r3, [r5, #0]
 80040fe:	6023      	str	r3, [r4, #0]

  /* Configure the LTDC Layer */
  LTDC_SetConfig(hltdc, pLayerCfg, LayerIdx);
 8004100:	687a      	ldr	r2, [r7, #4]
 8004102:	68b9      	ldr	r1, [r7, #8]
 8004104:	68f8      	ldr	r0, [r7, #12]
 8004106:	f000 f811 	bl	800412c <LTDC_SetConfig>

  /* Set the Immediate Reload type */
  hltdc->Instance->SRCR = LTDC_SRCR_IMR;
 800410a:	68fb      	ldr	r3, [r7, #12]
 800410c:	681b      	ldr	r3, [r3, #0]
 800410e:	2201      	movs	r2, #1
 8004110:	625a      	str	r2, [r3, #36]	@ 0x24

  /* Initialize the LTDC state*/
  hltdc->State  = HAL_LTDC_STATE_READY;
 8004112:	68fb      	ldr	r3, [r7, #12]
 8004114:	2201      	movs	r2, #1
 8004116:	f883 20a1 	strb.w	r2, [r3, #161]	@ 0xa1

  /* Process unlocked */
  __HAL_UNLOCK(hltdc);
 800411a:	68fb      	ldr	r3, [r7, #12]
 800411c:	2200      	movs	r2, #0
 800411e:	f883 20a0 	strb.w	r2, [r3, #160]	@ 0xa0

  return HAL_OK;
 8004122:	2300      	movs	r3, #0
}
 8004124:	4618      	mov	r0, r3
 8004126:	3710      	adds	r7, #16
 8004128:	46bd      	mov	sp, r7
 800412a:	bdb0      	pop	{r4, r5, r7, pc}

0800412c <LTDC_SetConfig>:
  * @param  LayerIdx  LTDC Layer index.
  *                   This parameter can be one of the following values: LTDC_LAYER_1 (0) or LTDC_LAYER_2 (1)
  * @retval None
  */
static void LTDC_SetConfig(LTDC_HandleTypeDef *hltdc, LTDC_LayerCfgTypeDef *pLayerCfg, uint32_t LayerIdx)
{
 800412c:	b480      	push	{r7}
 800412e:	b089      	sub	sp, #36	@ 0x24
 8004130:	af00      	add	r7, sp, #0
 8004132:	60f8      	str	r0, [r7, #12]
 8004134:	60b9      	str	r1, [r7, #8]
 8004136:	607a      	str	r2, [r7, #4]
  uint32_t tmp;
  uint32_t tmp1;
  uint32_t tmp2;

  /* Configure the horizontal start and stop position */
  tmp = ((pLayerCfg->WindowX1 + ((hltdc->Instance->BPCR & LTDC_BPCR_AHBP) >> 16U)) << 16U);
 8004138:	68bb      	ldr	r3, [r7, #8]
 800413a:	685a      	ldr	r2, [r3, #4]
 800413c:	68fb      	ldr	r3, [r7, #12]
 800413e:	681b      	ldr	r3, [r3, #0]
 8004140:	68db      	ldr	r3, [r3, #12]
 8004142:	0c1b      	lsrs	r3, r3, #16
 8004144:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8004148:	4413      	add	r3, r2
 800414a:	041b      	lsls	r3, r3, #16
 800414c:	61fb      	str	r3, [r7, #28]
  LTDC_LAYER(hltdc, LayerIdx)->WHPCR &= ~(LTDC_LxWHPCR_WHSTPOS | LTDC_LxWHPCR_WHSPPOS);
 800414e:	68fb      	ldr	r3, [r7, #12]
 8004150:	681b      	ldr	r3, [r3, #0]
 8004152:	461a      	mov	r2, r3
 8004154:	687b      	ldr	r3, [r7, #4]
 8004156:	01db      	lsls	r3, r3, #7
 8004158:	4413      	add	r3, r2
 800415a:	3384      	adds	r3, #132	@ 0x84
 800415c:	685b      	ldr	r3, [r3, #4]
 800415e:	68fa      	ldr	r2, [r7, #12]
 8004160:	6812      	ldr	r2, [r2, #0]
 8004162:	4611      	mov	r1, r2
 8004164:	687a      	ldr	r2, [r7, #4]
 8004166:	01d2      	lsls	r2, r2, #7
 8004168:	440a      	add	r2, r1
 800416a:	3284      	adds	r2, #132	@ 0x84
 800416c:	f403 4370 	and.w	r3, r3, #61440	@ 0xf000
 8004170:	6053      	str	r3, [r2, #4]
  LTDC_LAYER(hltdc, LayerIdx)->WHPCR = ((pLayerCfg->WindowX0 + \
 8004172:	68bb      	ldr	r3, [r7, #8]
 8004174:	681a      	ldr	r2, [r3, #0]
                                         ((hltdc->Instance->BPCR & LTDC_BPCR_AHBP) >> 16U) + 1U) | tmp);
 8004176:	68fb      	ldr	r3, [r7, #12]
 8004178:	681b      	ldr	r3, [r3, #0]
 800417a:	68db      	ldr	r3, [r3, #12]
 800417c:	0c1b      	lsrs	r3, r3, #16
 800417e:	f3c3 030b 	ubfx	r3, r3, #0, #12
  LTDC_LAYER(hltdc, LayerIdx)->WHPCR = ((pLayerCfg->WindowX0 + \
 8004182:	4413      	add	r3, r2
                                         ((hltdc->Instance->BPCR & LTDC_BPCR_AHBP) >> 16U) + 1U) | tmp);
 8004184:	1c5a      	adds	r2, r3, #1
  LTDC_LAYER(hltdc, LayerIdx)->WHPCR = ((pLayerCfg->WindowX0 + \
 8004186:	68fb      	ldr	r3, [r7, #12]
 8004188:	681b      	ldr	r3, [r3, #0]
 800418a:	4619      	mov	r1, r3
 800418c:	687b      	ldr	r3, [r7, #4]
 800418e:	01db      	lsls	r3, r3, #7
 8004190:	440b      	add	r3, r1
 8004192:	3384      	adds	r3, #132	@ 0x84
 8004194:	4619      	mov	r1, r3
                                         ((hltdc->Instance->BPCR & LTDC_BPCR_AHBP) >> 16U) + 1U) | tmp);
 8004196:	69fb      	ldr	r3, [r7, #28]
 8004198:	4313      	orrs	r3, r2
  LTDC_LAYER(hltdc, LayerIdx)->WHPCR = ((pLayerCfg->WindowX0 + \
 800419a:	604b      	str	r3, [r1, #4]

  /* Configure the vertical start and stop position */
  tmp = ((pLayerCfg->WindowY1 + (hltdc->Instance->BPCR & LTDC_BPCR_AVBP)) << 16U);
 800419c:	68bb      	ldr	r3, [r7, #8]
 800419e:	68da      	ldr	r2, [r3, #12]
 80041a0:	68fb      	ldr	r3, [r7, #12]
 80041a2:	681b      	ldr	r3, [r3, #0]
 80041a4:	68db      	ldr	r3, [r3, #12]
 80041a6:	f3c3 030a 	ubfx	r3, r3, #0, #11
 80041aa:	4413      	add	r3, r2
 80041ac:	041b      	lsls	r3, r3, #16
 80041ae:	61fb      	str	r3, [r7, #28]
  LTDC_LAYER(hltdc, LayerIdx)->WVPCR &= ~(LTDC_LxWVPCR_WVSTPOS | LTDC_LxWVPCR_WVSPPOS);
 80041b0:	68fb      	ldr	r3, [r7, #12]
 80041b2:	681b      	ldr	r3, [r3, #0]
 80041b4:	461a      	mov	r2, r3
 80041b6:	687b      	ldr	r3, [r7, #4]
 80041b8:	01db      	lsls	r3, r3, #7
 80041ba:	4413      	add	r3, r2
 80041bc:	3384      	adds	r3, #132	@ 0x84
 80041be:	689b      	ldr	r3, [r3, #8]
 80041c0:	68fa      	ldr	r2, [r7, #12]
 80041c2:	6812      	ldr	r2, [r2, #0]
 80041c4:	4611      	mov	r1, r2
 80041c6:	687a      	ldr	r2, [r7, #4]
 80041c8:	01d2      	lsls	r2, r2, #7
 80041ca:	440a      	add	r2, r1
 80041cc:	3284      	adds	r2, #132	@ 0x84
 80041ce:	f403 4370 	and.w	r3, r3, #61440	@ 0xf000
 80041d2:	6093      	str	r3, [r2, #8]
  LTDC_LAYER(hltdc, LayerIdx)->WVPCR  = ((pLayerCfg->WindowY0 + (hltdc->Instance->BPCR & LTDC_BPCR_AVBP) + 1U) | tmp);
 80041d4:	68bb      	ldr	r3, [r7, #8]
 80041d6:	689a      	ldr	r2, [r3, #8]
 80041d8:	68fb      	ldr	r3, [r7, #12]
 80041da:	681b      	ldr	r3, [r3, #0]
 80041dc:	68db      	ldr	r3, [r3, #12]
 80041de:	f3c3 030a 	ubfx	r3, r3, #0, #11
 80041e2:	4413      	add	r3, r2
 80041e4:	1c5a      	adds	r2, r3, #1
 80041e6:	68fb      	ldr	r3, [r7, #12]
 80041e8:	681b      	ldr	r3, [r3, #0]
 80041ea:	4619      	mov	r1, r3
 80041ec:	687b      	ldr	r3, [r7, #4]
 80041ee:	01db      	lsls	r3, r3, #7
 80041f0:	440b      	add	r3, r1
 80041f2:	3384      	adds	r3, #132	@ 0x84
 80041f4:	4619      	mov	r1, r3
 80041f6:	69fb      	ldr	r3, [r7, #28]
 80041f8:	4313      	orrs	r3, r2
 80041fa:	608b      	str	r3, [r1, #8]

  /* Specifies the pixel format */
  LTDC_LAYER(hltdc, LayerIdx)->PFCR &= ~(LTDC_LxPFCR_PF);
 80041fc:	68fb      	ldr	r3, [r7, #12]
 80041fe:	681b      	ldr	r3, [r3, #0]
 8004200:	461a      	mov	r2, r3
 8004202:	687b      	ldr	r3, [r7, #4]
 8004204:	01db      	lsls	r3, r3, #7
 8004206:	4413      	add	r3, r2
 8004208:	3384      	adds	r3, #132	@ 0x84
 800420a:	691b      	ldr	r3, [r3, #16]
 800420c:	68fa      	ldr	r2, [r7, #12]
 800420e:	6812      	ldr	r2, [r2, #0]
 8004210:	4611      	mov	r1, r2
 8004212:	687a      	ldr	r2, [r7, #4]
 8004214:	01d2      	lsls	r2, r2, #7
 8004216:	440a      	add	r2, r1
 8004218:	3284      	adds	r2, #132	@ 0x84
 800421a:	f023 0307 	bic.w	r3, r3, #7
 800421e:	6113      	str	r3, [r2, #16]
  LTDC_LAYER(hltdc, LayerIdx)->PFCR = (pLayerCfg->PixelFormat);
 8004220:	68fb      	ldr	r3, [r7, #12]
 8004222:	681b      	ldr	r3, [r3, #0]
 8004224:	461a      	mov	r2, r3
 8004226:	687b      	ldr	r3, [r7, #4]
 8004228:	01db      	lsls	r3, r3, #7
 800422a:	4413      	add	r3, r2
 800422c:	3384      	adds	r3, #132	@ 0x84
 800422e:	461a      	mov	r2, r3
 8004230:	68bb      	ldr	r3, [r7, #8]
 8004232:	691b      	ldr	r3, [r3, #16]
 8004234:	6113      	str	r3, [r2, #16]

  /* Configure the default color values */
  tmp = ((uint32_t)(pLayerCfg->Backcolor.Green) << 8U);
 8004236:	68bb      	ldr	r3, [r7, #8]
 8004238:	f893 3031 	ldrb.w	r3, [r3, #49]	@ 0x31
 800423c:	021b      	lsls	r3, r3, #8
 800423e:	61fb      	str	r3, [r7, #28]
  tmp1 = ((uint32_t)(pLayerCfg->Backcolor.Red) << 16U);
 8004240:	68bb      	ldr	r3, [r7, #8]
 8004242:	f893 3032 	ldrb.w	r3, [r3, #50]	@ 0x32
 8004246:	041b      	lsls	r3, r3, #16
 8004248:	61bb      	str	r3, [r7, #24]
  tmp2 = (pLayerCfg->Alpha0 << 24U);
 800424a:	68bb      	ldr	r3, [r7, #8]
 800424c:	699b      	ldr	r3, [r3, #24]
 800424e:	061b      	lsls	r3, r3, #24
 8004250:	617b      	str	r3, [r7, #20]
  LTDC_LAYER(hltdc, LayerIdx)->DCCR &= ~(LTDC_LxDCCR_DCBLUE | LTDC_LxDCCR_DCGREEN | LTDC_LxDCCR_DCRED |
 8004252:	68fb      	ldr	r3, [r7, #12]
 8004254:	681b      	ldr	r3, [r3, #0]
 8004256:	461a      	mov	r2, r3
 8004258:	687b      	ldr	r3, [r7, #4]
 800425a:	01db      	lsls	r3, r3, #7
 800425c:	4413      	add	r3, r2
 800425e:	3384      	adds	r3, #132	@ 0x84
 8004260:	699b      	ldr	r3, [r3, #24]
 8004262:	68fb      	ldr	r3, [r7, #12]
 8004264:	681b      	ldr	r3, [r3, #0]
 8004266:	461a      	mov	r2, r3
 8004268:	687b      	ldr	r3, [r7, #4]
 800426a:	01db      	lsls	r3, r3, #7
 800426c:	4413      	add	r3, r2
 800426e:	3384      	adds	r3, #132	@ 0x84
 8004270:	461a      	mov	r2, r3
 8004272:	2300      	movs	r3, #0
 8004274:	6193      	str	r3, [r2, #24]
                                         LTDC_LxDCCR_DCALPHA);
  LTDC_LAYER(hltdc, LayerIdx)->DCCR = (pLayerCfg->Backcolor.Blue | tmp | tmp1 | tmp2);
 8004276:	68bb      	ldr	r3, [r7, #8]
 8004278:	f893 3030 	ldrb.w	r3, [r3, #48]	@ 0x30
 800427c:	461a      	mov	r2, r3
 800427e:	69fb      	ldr	r3, [r7, #28]
 8004280:	431a      	orrs	r2, r3
 8004282:	69bb      	ldr	r3, [r7, #24]
 8004284:	431a      	orrs	r2, r3
 8004286:	68fb      	ldr	r3, [r7, #12]
 8004288:	681b      	ldr	r3, [r3, #0]
 800428a:	4619      	mov	r1, r3
 800428c:	687b      	ldr	r3, [r7, #4]
 800428e:	01db      	lsls	r3, r3, #7
 8004290:	440b      	add	r3, r1
 8004292:	3384      	adds	r3, #132	@ 0x84
 8004294:	4619      	mov	r1, r3
 8004296:	697b      	ldr	r3, [r7, #20]
 8004298:	4313      	orrs	r3, r2
 800429a:	618b      	str	r3, [r1, #24]

  /* Specifies the constant alpha value */
  LTDC_LAYER(hltdc, LayerIdx)->CACR &= ~(LTDC_LxCACR_CONSTA);
 800429c:	68fb      	ldr	r3, [r7, #12]
 800429e:	681b      	ldr	r3, [r3, #0]
 80042a0:	461a      	mov	r2, r3
 80042a2:	687b      	ldr	r3, [r7, #4]
 80042a4:	01db      	lsls	r3, r3, #7
 80042a6:	4413      	add	r3, r2
 80042a8:	3384      	adds	r3, #132	@ 0x84
 80042aa:	695b      	ldr	r3, [r3, #20]
 80042ac:	68fa      	ldr	r2, [r7, #12]
 80042ae:	6812      	ldr	r2, [r2, #0]
 80042b0:	4611      	mov	r1, r2
 80042b2:	687a      	ldr	r2, [r7, #4]
 80042b4:	01d2      	lsls	r2, r2, #7
 80042b6:	440a      	add	r2, r1
 80042b8:	3284      	adds	r2, #132	@ 0x84
 80042ba:	f023 03ff 	bic.w	r3, r3, #255	@ 0xff
 80042be:	6153      	str	r3, [r2, #20]
  LTDC_LAYER(hltdc, LayerIdx)->CACR = (pLayerCfg->Alpha);
 80042c0:	68fb      	ldr	r3, [r7, #12]
 80042c2:	681b      	ldr	r3, [r3, #0]
 80042c4:	461a      	mov	r2, r3
 80042c6:	687b      	ldr	r3, [r7, #4]
 80042c8:	01db      	lsls	r3, r3, #7
 80042ca:	4413      	add	r3, r2
 80042cc:	3384      	adds	r3, #132	@ 0x84
 80042ce:	461a      	mov	r2, r3
 80042d0:	68bb      	ldr	r3, [r7, #8]
 80042d2:	695b      	ldr	r3, [r3, #20]
 80042d4:	6153      	str	r3, [r2, #20]

  /* Specifies the blending factors */
  LTDC_LAYER(hltdc, LayerIdx)->BFCR &= ~(LTDC_LxBFCR_BF2 | LTDC_LxBFCR_BF1);
 80042d6:	68fb      	ldr	r3, [r7, #12]
 80042d8:	681b      	ldr	r3, [r3, #0]
 80042da:	461a      	mov	r2, r3
 80042dc:	687b      	ldr	r3, [r7, #4]
 80042de:	01db      	lsls	r3, r3, #7
 80042e0:	4413      	add	r3, r2
 80042e2:	3384      	adds	r3, #132	@ 0x84
 80042e4:	69db      	ldr	r3, [r3, #28]
 80042e6:	68fa      	ldr	r2, [r7, #12]
 80042e8:	6812      	ldr	r2, [r2, #0]
 80042ea:	4611      	mov	r1, r2
 80042ec:	687a      	ldr	r2, [r7, #4]
 80042ee:	01d2      	lsls	r2, r2, #7
 80042f0:	440a      	add	r2, r1
 80042f2:	3284      	adds	r2, #132	@ 0x84
 80042f4:	f423 63e0 	bic.w	r3, r3, #1792	@ 0x700
 80042f8:	f023 0307 	bic.w	r3, r3, #7
 80042fc:	61d3      	str	r3, [r2, #28]
  LTDC_LAYER(hltdc, LayerIdx)->BFCR = (pLayerCfg->BlendingFactor1 | pLayerCfg->BlendingFactor2);
 80042fe:	68bb      	ldr	r3, [r7, #8]
 8004300:	69da      	ldr	r2, [r3, #28]
 8004302:	68bb      	ldr	r3, [r7, #8]
 8004304:	6a1b      	ldr	r3, [r3, #32]
 8004306:	68f9      	ldr	r1, [r7, #12]
 8004308:	6809      	ldr	r1, [r1, #0]
 800430a:	4608      	mov	r0, r1
 800430c:	6879      	ldr	r1, [r7, #4]
 800430e:	01c9      	lsls	r1, r1, #7
 8004310:	4401      	add	r1, r0
 8004312:	3184      	adds	r1, #132	@ 0x84
 8004314:	4313      	orrs	r3, r2
 8004316:	61cb      	str	r3, [r1, #28]

  /* Configure the color frame buffer start address */
  LTDC_LAYER(hltdc, LayerIdx)->CFBAR &= ~(LTDC_LxCFBAR_CFBADD);
 8004318:	68fb      	ldr	r3, [r7, #12]
 800431a:	681b      	ldr	r3, [r3, #0]
 800431c:	461a      	mov	r2, r3
 800431e:	687b      	ldr	r3, [r7, #4]
 8004320:	01db      	lsls	r3, r3, #7
 8004322:	4413      	add	r3, r2
 8004324:	3384      	adds	r3, #132	@ 0x84
 8004326:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8004328:	68fb      	ldr	r3, [r7, #12]
 800432a:	681b      	ldr	r3, [r3, #0]
 800432c:	461a      	mov	r2, r3
 800432e:	687b      	ldr	r3, [r7, #4]
 8004330:	01db      	lsls	r3, r3, #7
 8004332:	4413      	add	r3, r2
 8004334:	3384      	adds	r3, #132	@ 0x84
 8004336:	461a      	mov	r2, r3
 8004338:	2300      	movs	r3, #0
 800433a:	6293      	str	r3, [r2, #40]	@ 0x28
  LTDC_LAYER(hltdc, LayerIdx)->CFBAR = (pLayerCfg->FBStartAdress);
 800433c:	68fb      	ldr	r3, [r7, #12]
 800433e:	681b      	ldr	r3, [r3, #0]
 8004340:	461a      	mov	r2, r3
 8004342:	687b      	ldr	r3, [r7, #4]
 8004344:	01db      	lsls	r3, r3, #7
 8004346:	4413      	add	r3, r2
 8004348:	3384      	adds	r3, #132	@ 0x84
 800434a:	461a      	mov	r2, r3
 800434c:	68bb      	ldr	r3, [r7, #8]
 800434e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004350:	6293      	str	r3, [r2, #40]	@ 0x28

  if (pLayerCfg->PixelFormat == LTDC_PIXEL_FORMAT_ARGB8888)
 8004352:	68bb      	ldr	r3, [r7, #8]
 8004354:	691b      	ldr	r3, [r3, #16]
 8004356:	2b00      	cmp	r3, #0
 8004358:	d102      	bne.n	8004360 <LTDC_SetConfig+0x234>
  {
    tmp = 4U;
 800435a:	2304      	movs	r3, #4
 800435c:	61fb      	str	r3, [r7, #28]
 800435e:	e01b      	b.n	8004398 <LTDC_SetConfig+0x26c>
  }
  else if (pLayerCfg->PixelFormat == LTDC_PIXEL_FORMAT_RGB888)
 8004360:	68bb      	ldr	r3, [r7, #8]
 8004362:	691b      	ldr	r3, [r3, #16]
 8004364:	2b01      	cmp	r3, #1
 8004366:	d102      	bne.n	800436e <LTDC_SetConfig+0x242>
  {
    tmp = 3U;
 8004368:	2303      	movs	r3, #3
 800436a:	61fb      	str	r3, [r7, #28]
 800436c:	e014      	b.n	8004398 <LTDC_SetConfig+0x26c>
  }
  else if ((pLayerCfg->PixelFormat == LTDC_PIXEL_FORMAT_ARGB4444) || \
 800436e:	68bb      	ldr	r3, [r7, #8]
 8004370:	691b      	ldr	r3, [r3, #16]
 8004372:	2b04      	cmp	r3, #4
 8004374:	d00b      	beq.n	800438e <LTDC_SetConfig+0x262>
           (pLayerCfg->PixelFormat == LTDC_PIXEL_FORMAT_RGB565)   || \
 8004376:	68bb      	ldr	r3, [r7, #8]
 8004378:	691b      	ldr	r3, [r3, #16]
  else if ((pLayerCfg->PixelFormat == LTDC_PIXEL_FORMAT_ARGB4444) || \
 800437a:	2b02      	cmp	r3, #2
 800437c:	d007      	beq.n	800438e <LTDC_SetConfig+0x262>
           (pLayerCfg->PixelFormat == LTDC_PIXEL_FORMAT_ARGB1555) || \
 800437e:	68bb      	ldr	r3, [r7, #8]
 8004380:	691b      	ldr	r3, [r3, #16]
           (pLayerCfg->PixelFormat == LTDC_PIXEL_FORMAT_RGB565)   || \
 8004382:	2b03      	cmp	r3, #3
 8004384:	d003      	beq.n	800438e <LTDC_SetConfig+0x262>
           (pLayerCfg->PixelFormat == LTDC_PIXEL_FORMAT_AL88))
 8004386:	68bb      	ldr	r3, [r7, #8]
 8004388:	691b      	ldr	r3, [r3, #16]
           (pLayerCfg->PixelFormat == LTDC_PIXEL_FORMAT_ARGB1555) || \
 800438a:	2b07      	cmp	r3, #7
 800438c:	d102      	bne.n	8004394 <LTDC_SetConfig+0x268>
  {
    tmp = 2U;
 800438e:	2302      	movs	r3, #2
 8004390:	61fb      	str	r3, [r7, #28]
 8004392:	e001      	b.n	8004398 <LTDC_SetConfig+0x26c>
  }
  else
  {
    tmp = 1U;
 8004394:	2301      	movs	r3, #1
 8004396:	61fb      	str	r3, [r7, #28]
  }

  /* Configure the color frame buffer pitch in byte */
  LTDC_LAYER(hltdc, LayerIdx)->CFBLR  &= ~(LTDC_LxCFBLR_CFBLL | LTDC_LxCFBLR_CFBP);
 8004398:	68fb      	ldr	r3, [r7, #12]
 800439a:	681b      	ldr	r3, [r3, #0]
 800439c:	461a      	mov	r2, r3
 800439e:	687b      	ldr	r3, [r7, #4]
 80043a0:	01db      	lsls	r3, r3, #7
 80043a2:	4413      	add	r3, r2
 80043a4:	3384      	adds	r3, #132	@ 0x84
 80043a6:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80043a8:	68fa      	ldr	r2, [r7, #12]
 80043aa:	6812      	ldr	r2, [r2, #0]
 80043ac:	4611      	mov	r1, r2
 80043ae:	687a      	ldr	r2, [r7, #4]
 80043b0:	01d2      	lsls	r2, r2, #7
 80043b2:	440a      	add	r2, r1
 80043b4:	3284      	adds	r2, #132	@ 0x84
 80043b6:	f003 23e0 	and.w	r3, r3, #3758153728	@ 0xe000e000
 80043ba:	62d3      	str	r3, [r2, #44]	@ 0x2c
  LTDC_LAYER(hltdc, LayerIdx)->CFBLR  = (((pLayerCfg->ImageWidth * tmp) << 16U) | \
 80043bc:	68bb      	ldr	r3, [r7, #8]
 80043be:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80043c0:	69fa      	ldr	r2, [r7, #28]
 80043c2:	fb02 f303 	mul.w	r3, r2, r3
 80043c6:	041a      	lsls	r2, r3, #16
                                         (((pLayerCfg->WindowX1 - pLayerCfg->WindowX0) * tmp)  + 3U));
 80043c8:	68bb      	ldr	r3, [r7, #8]
 80043ca:	6859      	ldr	r1, [r3, #4]
 80043cc:	68bb      	ldr	r3, [r7, #8]
 80043ce:	681b      	ldr	r3, [r3, #0]
 80043d0:	1acb      	subs	r3, r1, r3
 80043d2:	69f9      	ldr	r1, [r7, #28]
 80043d4:	fb01 f303 	mul.w	r3, r1, r3
 80043d8:	3303      	adds	r3, #3
  LTDC_LAYER(hltdc, LayerIdx)->CFBLR  = (((pLayerCfg->ImageWidth * tmp) << 16U) | \
 80043da:	68f9      	ldr	r1, [r7, #12]
 80043dc:	6809      	ldr	r1, [r1, #0]
 80043de:	4608      	mov	r0, r1
 80043e0:	6879      	ldr	r1, [r7, #4]
 80043e2:	01c9      	lsls	r1, r1, #7
 80043e4:	4401      	add	r1, r0
 80043e6:	3184      	adds	r1, #132	@ 0x84
 80043e8:	4313      	orrs	r3, r2
 80043ea:	62cb      	str	r3, [r1, #44]	@ 0x2c
  /* Configure the frame buffer line number */
  LTDC_LAYER(hltdc, LayerIdx)->CFBLNR  &= ~(LTDC_LxCFBLNR_CFBLNBR);
 80043ec:	68fb      	ldr	r3, [r7, #12]
 80043ee:	681b      	ldr	r3, [r3, #0]
 80043f0:	461a      	mov	r2, r3
 80043f2:	687b      	ldr	r3, [r7, #4]
 80043f4:	01db      	lsls	r3, r3, #7
 80043f6:	4413      	add	r3, r2
 80043f8:	3384      	adds	r3, #132	@ 0x84
 80043fa:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80043fc:	68fa      	ldr	r2, [r7, #12]
 80043fe:	6812      	ldr	r2, [r2, #0]
 8004400:	4611      	mov	r1, r2
 8004402:	687a      	ldr	r2, [r7, #4]
 8004404:	01d2      	lsls	r2, r2, #7
 8004406:	440a      	add	r2, r1
 8004408:	3284      	adds	r2, #132	@ 0x84
 800440a:	f423 63ff 	bic.w	r3, r3, #2040	@ 0x7f8
 800440e:	f023 0307 	bic.w	r3, r3, #7
 8004412:	6313      	str	r3, [r2, #48]	@ 0x30
  LTDC_LAYER(hltdc, LayerIdx)->CFBLNR  = (pLayerCfg->ImageHeight);
 8004414:	68fb      	ldr	r3, [r7, #12]
 8004416:	681b      	ldr	r3, [r3, #0]
 8004418:	461a      	mov	r2, r3
 800441a:	687b      	ldr	r3, [r7, #4]
 800441c:	01db      	lsls	r3, r3, #7
 800441e:	4413      	add	r3, r2
 8004420:	3384      	adds	r3, #132	@ 0x84
 8004422:	461a      	mov	r2, r3
 8004424:	68bb      	ldr	r3, [r7, #8]
 8004426:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8004428:	6313      	str	r3, [r2, #48]	@ 0x30

  /* Enable LTDC_Layer by setting LEN bit */
  LTDC_LAYER(hltdc, LayerIdx)->CR |= (uint32_t)LTDC_LxCR_LEN;
 800442a:	68fb      	ldr	r3, [r7, #12]
 800442c:	681b      	ldr	r3, [r3, #0]
 800442e:	461a      	mov	r2, r3
 8004430:	687b      	ldr	r3, [r7, #4]
 8004432:	01db      	lsls	r3, r3, #7
 8004434:	4413      	add	r3, r2
 8004436:	3384      	adds	r3, #132	@ 0x84
 8004438:	681b      	ldr	r3, [r3, #0]
 800443a:	68fa      	ldr	r2, [r7, #12]
 800443c:	6812      	ldr	r2, [r2, #0]
 800443e:	4611      	mov	r1, r2
 8004440:	687a      	ldr	r2, [r7, #4]
 8004442:	01d2      	lsls	r2, r2, #7
 8004444:	440a      	add	r2, r1
 8004446:	3284      	adds	r2, #132	@ 0x84
 8004448:	f043 0301 	orr.w	r3, r3, #1
 800444c:	6013      	str	r3, [r2, #0]
}
 800444e:	bf00      	nop
 8004450:	3724      	adds	r7, #36	@ 0x24
 8004452:	46bd      	mov	sp, r7
 8004454:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004458:	4770      	bx	lr
	...

0800445c <HAL_RCC_OscConfig>:
  *         supported by this API. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 800445c:	b580      	push	{r7, lr}
 800445e:	b086      	sub	sp, #24
 8004460:	af00      	add	r7, sp, #0
 8004462:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;
  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 8004464:	687b      	ldr	r3, [r7, #4]
 8004466:	2b00      	cmp	r3, #0
 8004468:	d101      	bne.n	800446e <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 800446a:	2301      	movs	r3, #1
 800446c:	e267      	b.n	800493e <HAL_RCC_OscConfig+0x4e2>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 800446e:	687b      	ldr	r3, [r7, #4]
 8004470:	681b      	ldr	r3, [r3, #0]
 8004472:	f003 0301 	and.w	r3, r3, #1
 8004476:	2b00      	cmp	r3, #0
 8004478:	d075      	beq.n	8004566 <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) || \
 800447a:	4b88      	ldr	r3, [pc, #544]	@ (800469c <HAL_RCC_OscConfig+0x240>)
 800447c:	689b      	ldr	r3, [r3, #8]
 800447e:	f003 030c 	and.w	r3, r3, #12
 8004482:	2b04      	cmp	r3, #4
 8004484:	d00c      	beq.n	80044a0 <HAL_RCC_OscConfig+0x44>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8004486:	4b85      	ldr	r3, [pc, #532]	@ (800469c <HAL_RCC_OscConfig+0x240>)
 8004488:	689b      	ldr	r3, [r3, #8]
 800448a:	f003 030c 	and.w	r3, r3, #12
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) || \
 800448e:	2b08      	cmp	r3, #8
 8004490:	d112      	bne.n	80044b8 <HAL_RCC_OscConfig+0x5c>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8004492:	4b82      	ldr	r3, [pc, #520]	@ (800469c <HAL_RCC_OscConfig+0x240>)
 8004494:	685b      	ldr	r3, [r3, #4]
 8004496:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 800449a:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 800449e:	d10b      	bne.n	80044b8 <HAL_RCC_OscConfig+0x5c>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80044a0:	4b7e      	ldr	r3, [pc, #504]	@ (800469c <HAL_RCC_OscConfig+0x240>)
 80044a2:	681b      	ldr	r3, [r3, #0]
 80044a4:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80044a8:	2b00      	cmp	r3, #0
 80044aa:	d05b      	beq.n	8004564 <HAL_RCC_OscConfig+0x108>
 80044ac:	687b      	ldr	r3, [r7, #4]
 80044ae:	685b      	ldr	r3, [r3, #4]
 80044b0:	2b00      	cmp	r3, #0
 80044b2:	d157      	bne.n	8004564 <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 80044b4:	2301      	movs	r3, #1
 80044b6:	e242      	b.n	800493e <HAL_RCC_OscConfig+0x4e2>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 80044b8:	687b      	ldr	r3, [r7, #4]
 80044ba:	685b      	ldr	r3, [r3, #4]
 80044bc:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 80044c0:	d106      	bne.n	80044d0 <HAL_RCC_OscConfig+0x74>
 80044c2:	4b76      	ldr	r3, [pc, #472]	@ (800469c <HAL_RCC_OscConfig+0x240>)
 80044c4:	681b      	ldr	r3, [r3, #0]
 80044c6:	4a75      	ldr	r2, [pc, #468]	@ (800469c <HAL_RCC_OscConfig+0x240>)
 80044c8:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 80044cc:	6013      	str	r3, [r2, #0]
 80044ce:	e01d      	b.n	800450c <HAL_RCC_OscConfig+0xb0>
 80044d0:	687b      	ldr	r3, [r7, #4]
 80044d2:	685b      	ldr	r3, [r3, #4]
 80044d4:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 80044d8:	d10c      	bne.n	80044f4 <HAL_RCC_OscConfig+0x98>
 80044da:	4b70      	ldr	r3, [pc, #448]	@ (800469c <HAL_RCC_OscConfig+0x240>)
 80044dc:	681b      	ldr	r3, [r3, #0]
 80044de:	4a6f      	ldr	r2, [pc, #444]	@ (800469c <HAL_RCC_OscConfig+0x240>)
 80044e0:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 80044e4:	6013      	str	r3, [r2, #0]
 80044e6:	4b6d      	ldr	r3, [pc, #436]	@ (800469c <HAL_RCC_OscConfig+0x240>)
 80044e8:	681b      	ldr	r3, [r3, #0]
 80044ea:	4a6c      	ldr	r2, [pc, #432]	@ (800469c <HAL_RCC_OscConfig+0x240>)
 80044ec:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 80044f0:	6013      	str	r3, [r2, #0]
 80044f2:	e00b      	b.n	800450c <HAL_RCC_OscConfig+0xb0>
 80044f4:	4b69      	ldr	r3, [pc, #420]	@ (800469c <HAL_RCC_OscConfig+0x240>)
 80044f6:	681b      	ldr	r3, [r3, #0]
 80044f8:	4a68      	ldr	r2, [pc, #416]	@ (800469c <HAL_RCC_OscConfig+0x240>)
 80044fa:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 80044fe:	6013      	str	r3, [r2, #0]
 8004500:	4b66      	ldr	r3, [pc, #408]	@ (800469c <HAL_RCC_OscConfig+0x240>)
 8004502:	681b      	ldr	r3, [r3, #0]
 8004504:	4a65      	ldr	r2, [pc, #404]	@ (800469c <HAL_RCC_OscConfig+0x240>)
 8004506:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 800450a:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if ((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 800450c:	687b      	ldr	r3, [r7, #4]
 800450e:	685b      	ldr	r3, [r3, #4]
 8004510:	2b00      	cmp	r3, #0
 8004512:	d013      	beq.n	800453c <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8004514:	f7fe f874 	bl	8002600 <HAL_GetTick>
 8004518:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800451a:	e008      	b.n	800452e <HAL_RCC_OscConfig+0xd2>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 800451c:	f7fe f870 	bl	8002600 <HAL_GetTick>
 8004520:	4602      	mov	r2, r0
 8004522:	693b      	ldr	r3, [r7, #16]
 8004524:	1ad3      	subs	r3, r2, r3
 8004526:	2b64      	cmp	r3, #100	@ 0x64
 8004528:	d901      	bls.n	800452e <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 800452a:	2303      	movs	r3, #3
 800452c:	e207      	b.n	800493e <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800452e:	4b5b      	ldr	r3, [pc, #364]	@ (800469c <HAL_RCC_OscConfig+0x240>)
 8004530:	681b      	ldr	r3, [r3, #0]
 8004532:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8004536:	2b00      	cmp	r3, #0
 8004538:	d0f0      	beq.n	800451c <HAL_RCC_OscConfig+0xc0>
 800453a:	e014      	b.n	8004566 <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800453c:	f7fe f860 	bl	8002600 <HAL_GetTick>
 8004540:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8004542:	e008      	b.n	8004556 <HAL_RCC_OscConfig+0xfa>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8004544:	f7fe f85c 	bl	8002600 <HAL_GetTick>
 8004548:	4602      	mov	r2, r0
 800454a:	693b      	ldr	r3, [r7, #16]
 800454c:	1ad3      	subs	r3, r2, r3
 800454e:	2b64      	cmp	r3, #100	@ 0x64
 8004550:	d901      	bls.n	8004556 <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 8004552:	2303      	movs	r3, #3
 8004554:	e1f3      	b.n	800493e <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8004556:	4b51      	ldr	r3, [pc, #324]	@ (800469c <HAL_RCC_OscConfig+0x240>)
 8004558:	681b      	ldr	r3, [r3, #0]
 800455a:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800455e:	2b00      	cmp	r3, #0
 8004560:	d1f0      	bne.n	8004544 <HAL_RCC_OscConfig+0xe8>
 8004562:	e000      	b.n	8004566 <HAL_RCC_OscConfig+0x10a>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8004564:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8004566:	687b      	ldr	r3, [r7, #4]
 8004568:	681b      	ldr	r3, [r3, #0]
 800456a:	f003 0302 	and.w	r3, r3, #2
 800456e:	2b00      	cmp	r3, #0
 8004570:	d063      	beq.n	800463a <HAL_RCC_OscConfig+0x1de>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) || \
 8004572:	4b4a      	ldr	r3, [pc, #296]	@ (800469c <HAL_RCC_OscConfig+0x240>)
 8004574:	689b      	ldr	r3, [r3, #8]
 8004576:	f003 030c 	and.w	r3, r3, #12
 800457a:	2b00      	cmp	r3, #0
 800457c:	d00b      	beq.n	8004596 <HAL_RCC_OscConfig+0x13a>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 800457e:	4b47      	ldr	r3, [pc, #284]	@ (800469c <HAL_RCC_OscConfig+0x240>)
 8004580:	689b      	ldr	r3, [r3, #8]
 8004582:	f003 030c 	and.w	r3, r3, #12
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) || \
 8004586:	2b08      	cmp	r3, #8
 8004588:	d11c      	bne.n	80045c4 <HAL_RCC_OscConfig+0x168>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 800458a:	4b44      	ldr	r3, [pc, #272]	@ (800469c <HAL_RCC_OscConfig+0x240>)
 800458c:	685b      	ldr	r3, [r3, #4]
 800458e:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8004592:	2b00      	cmp	r3, #0
 8004594:	d116      	bne.n	80045c4 <HAL_RCC_OscConfig+0x168>
    {
      /* When HSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8004596:	4b41      	ldr	r3, [pc, #260]	@ (800469c <HAL_RCC_OscConfig+0x240>)
 8004598:	681b      	ldr	r3, [r3, #0]
 800459a:	f003 0302 	and.w	r3, r3, #2
 800459e:	2b00      	cmp	r3, #0
 80045a0:	d005      	beq.n	80045ae <HAL_RCC_OscConfig+0x152>
 80045a2:	687b      	ldr	r3, [r7, #4]
 80045a4:	68db      	ldr	r3, [r3, #12]
 80045a6:	2b01      	cmp	r3, #1
 80045a8:	d001      	beq.n	80045ae <HAL_RCC_OscConfig+0x152>
      {
        return HAL_ERROR;
 80045aa:	2301      	movs	r3, #1
 80045ac:	e1c7      	b.n	800493e <HAL_RCC_OscConfig+0x4e2>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80045ae:	4b3b      	ldr	r3, [pc, #236]	@ (800469c <HAL_RCC_OscConfig+0x240>)
 80045b0:	681b      	ldr	r3, [r3, #0]
 80045b2:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 80045b6:	687b      	ldr	r3, [r7, #4]
 80045b8:	691b      	ldr	r3, [r3, #16]
 80045ba:	00db      	lsls	r3, r3, #3
 80045bc:	4937      	ldr	r1, [pc, #220]	@ (800469c <HAL_RCC_OscConfig+0x240>)
 80045be:	4313      	orrs	r3, r2
 80045c0:	600b      	str	r3, [r1, #0]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 80045c2:	e03a      	b.n	800463a <HAL_RCC_OscConfig+0x1de>
      }
    }
    else
    {
      /* Check the HSI State */
      if ((RCC_OscInitStruct->HSIState) != RCC_HSI_OFF)
 80045c4:	687b      	ldr	r3, [r7, #4]
 80045c6:	68db      	ldr	r3, [r3, #12]
 80045c8:	2b00      	cmp	r3, #0
 80045ca:	d020      	beq.n	800460e <HAL_RCC_OscConfig+0x1b2>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 80045cc:	4b34      	ldr	r3, [pc, #208]	@ (80046a0 <HAL_RCC_OscConfig+0x244>)
 80045ce:	2201      	movs	r2, #1
 80045d0:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80045d2:	f7fe f815 	bl	8002600 <HAL_GetTick>
 80045d6:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80045d8:	e008      	b.n	80045ec <HAL_RCC_OscConfig+0x190>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 80045da:	f7fe f811 	bl	8002600 <HAL_GetTick>
 80045de:	4602      	mov	r2, r0
 80045e0:	693b      	ldr	r3, [r7, #16]
 80045e2:	1ad3      	subs	r3, r2, r3
 80045e4:	2b02      	cmp	r3, #2
 80045e6:	d901      	bls.n	80045ec <HAL_RCC_OscConfig+0x190>
          {
            return HAL_TIMEOUT;
 80045e8:	2303      	movs	r3, #3
 80045ea:	e1a8      	b.n	800493e <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80045ec:	4b2b      	ldr	r3, [pc, #172]	@ (800469c <HAL_RCC_OscConfig+0x240>)
 80045ee:	681b      	ldr	r3, [r3, #0]
 80045f0:	f003 0302 	and.w	r3, r3, #2
 80045f4:	2b00      	cmp	r3, #0
 80045f6:	d0f0      	beq.n	80045da <HAL_RCC_OscConfig+0x17e>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value. */
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80045f8:	4b28      	ldr	r3, [pc, #160]	@ (800469c <HAL_RCC_OscConfig+0x240>)
 80045fa:	681b      	ldr	r3, [r3, #0]
 80045fc:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 8004600:	687b      	ldr	r3, [r7, #4]
 8004602:	691b      	ldr	r3, [r3, #16]
 8004604:	00db      	lsls	r3, r3, #3
 8004606:	4925      	ldr	r1, [pc, #148]	@ (800469c <HAL_RCC_OscConfig+0x240>)
 8004608:	4313      	orrs	r3, r2
 800460a:	600b      	str	r3, [r1, #0]
 800460c:	e015      	b.n	800463a <HAL_RCC_OscConfig+0x1de>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 800460e:	4b24      	ldr	r3, [pc, #144]	@ (80046a0 <HAL_RCC_OscConfig+0x244>)
 8004610:	2200      	movs	r2, #0
 8004612:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004614:	f7fd fff4 	bl	8002600 <HAL_GetTick>
 8004618:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 800461a:	e008      	b.n	800462e <HAL_RCC_OscConfig+0x1d2>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 800461c:	f7fd fff0 	bl	8002600 <HAL_GetTick>
 8004620:	4602      	mov	r2, r0
 8004622:	693b      	ldr	r3, [r7, #16]
 8004624:	1ad3      	subs	r3, r2, r3
 8004626:	2b02      	cmp	r3, #2
 8004628:	d901      	bls.n	800462e <HAL_RCC_OscConfig+0x1d2>
          {
            return HAL_TIMEOUT;
 800462a:	2303      	movs	r3, #3
 800462c:	e187      	b.n	800493e <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 800462e:	4b1b      	ldr	r3, [pc, #108]	@ (800469c <HAL_RCC_OscConfig+0x240>)
 8004630:	681b      	ldr	r3, [r3, #0]
 8004632:	f003 0302 	and.w	r3, r3, #2
 8004636:	2b00      	cmp	r3, #0
 8004638:	d1f0      	bne.n	800461c <HAL_RCC_OscConfig+0x1c0>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 800463a:	687b      	ldr	r3, [r7, #4]
 800463c:	681b      	ldr	r3, [r3, #0]
 800463e:	f003 0308 	and.w	r3, r3, #8
 8004642:	2b00      	cmp	r3, #0
 8004644:	d036      	beq.n	80046b4 <HAL_RCC_OscConfig+0x258>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if ((RCC_OscInitStruct->LSIState) != RCC_LSI_OFF)
 8004646:	687b      	ldr	r3, [r7, #4]
 8004648:	695b      	ldr	r3, [r3, #20]
 800464a:	2b00      	cmp	r3, #0
 800464c:	d016      	beq.n	800467c <HAL_RCC_OscConfig+0x220>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 800464e:	4b15      	ldr	r3, [pc, #84]	@ (80046a4 <HAL_RCC_OscConfig+0x248>)
 8004650:	2201      	movs	r2, #1
 8004652:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8004654:	f7fd ffd4 	bl	8002600 <HAL_GetTick>
 8004658:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 800465a:	e008      	b.n	800466e <HAL_RCC_OscConfig+0x212>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 800465c:	f7fd ffd0 	bl	8002600 <HAL_GetTick>
 8004660:	4602      	mov	r2, r0
 8004662:	693b      	ldr	r3, [r7, #16]
 8004664:	1ad3      	subs	r3, r2, r3
 8004666:	2b02      	cmp	r3, #2
 8004668:	d901      	bls.n	800466e <HAL_RCC_OscConfig+0x212>
        {
          return HAL_TIMEOUT;
 800466a:	2303      	movs	r3, #3
 800466c:	e167      	b.n	800493e <HAL_RCC_OscConfig+0x4e2>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 800466e:	4b0b      	ldr	r3, [pc, #44]	@ (800469c <HAL_RCC_OscConfig+0x240>)
 8004670:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8004672:	f003 0302 	and.w	r3, r3, #2
 8004676:	2b00      	cmp	r3, #0
 8004678:	d0f0      	beq.n	800465c <HAL_RCC_OscConfig+0x200>
 800467a:	e01b      	b.n	80046b4 <HAL_RCC_OscConfig+0x258>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 800467c:	4b09      	ldr	r3, [pc, #36]	@ (80046a4 <HAL_RCC_OscConfig+0x248>)
 800467e:	2200      	movs	r2, #0
 8004680:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8004682:	f7fd ffbd 	bl	8002600 <HAL_GetTick>
 8004686:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8004688:	e00e      	b.n	80046a8 <HAL_RCC_OscConfig+0x24c>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 800468a:	f7fd ffb9 	bl	8002600 <HAL_GetTick>
 800468e:	4602      	mov	r2, r0
 8004690:	693b      	ldr	r3, [r7, #16]
 8004692:	1ad3      	subs	r3, r2, r3
 8004694:	2b02      	cmp	r3, #2
 8004696:	d907      	bls.n	80046a8 <HAL_RCC_OscConfig+0x24c>
        {
          return HAL_TIMEOUT;
 8004698:	2303      	movs	r3, #3
 800469a:	e150      	b.n	800493e <HAL_RCC_OscConfig+0x4e2>
 800469c:	40023800 	.word	0x40023800
 80046a0:	42470000 	.word	0x42470000
 80046a4:	42470e80 	.word	0x42470e80
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80046a8:	4b88      	ldr	r3, [pc, #544]	@ (80048cc <HAL_RCC_OscConfig+0x470>)
 80046aa:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 80046ac:	f003 0302 	and.w	r3, r3, #2
 80046b0:	2b00      	cmp	r3, #0
 80046b2:	d1ea      	bne.n	800468a <HAL_RCC_OscConfig+0x22e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 80046b4:	687b      	ldr	r3, [r7, #4]
 80046b6:	681b      	ldr	r3, [r3, #0]
 80046b8:	f003 0304 	and.w	r3, r3, #4
 80046bc:	2b00      	cmp	r3, #0
 80046be:	f000 8097 	beq.w	80047f0 <HAL_RCC_OscConfig+0x394>
  {
    FlagStatus       pwrclkchanged = RESET;
 80046c2:	2300      	movs	r3, #0
 80046c4:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 80046c6:	4b81      	ldr	r3, [pc, #516]	@ (80048cc <HAL_RCC_OscConfig+0x470>)
 80046c8:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80046ca:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 80046ce:	2b00      	cmp	r3, #0
 80046d0:	d10f      	bne.n	80046f2 <HAL_RCC_OscConfig+0x296>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 80046d2:	2300      	movs	r3, #0
 80046d4:	60bb      	str	r3, [r7, #8]
 80046d6:	4b7d      	ldr	r3, [pc, #500]	@ (80048cc <HAL_RCC_OscConfig+0x470>)
 80046d8:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80046da:	4a7c      	ldr	r2, [pc, #496]	@ (80048cc <HAL_RCC_OscConfig+0x470>)
 80046dc:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 80046e0:	6413      	str	r3, [r2, #64]	@ 0x40
 80046e2:	4b7a      	ldr	r3, [pc, #488]	@ (80048cc <HAL_RCC_OscConfig+0x470>)
 80046e4:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80046e6:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 80046ea:	60bb      	str	r3, [r7, #8]
 80046ec:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 80046ee:	2301      	movs	r3, #1
 80046f0:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80046f2:	4b77      	ldr	r3, [pc, #476]	@ (80048d0 <HAL_RCC_OscConfig+0x474>)
 80046f4:	681b      	ldr	r3, [r3, #0]
 80046f6:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80046fa:	2b00      	cmp	r3, #0
 80046fc:	d118      	bne.n	8004730 <HAL_RCC_OscConfig+0x2d4>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 80046fe:	4b74      	ldr	r3, [pc, #464]	@ (80048d0 <HAL_RCC_OscConfig+0x474>)
 8004700:	681b      	ldr	r3, [r3, #0]
 8004702:	4a73      	ldr	r2, [pc, #460]	@ (80048d0 <HAL_RCC_OscConfig+0x474>)
 8004704:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8004708:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 800470a:	f7fd ff79 	bl	8002600 <HAL_GetTick>
 800470e:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8004710:	e008      	b.n	8004724 <HAL_RCC_OscConfig+0x2c8>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8004712:	f7fd ff75 	bl	8002600 <HAL_GetTick>
 8004716:	4602      	mov	r2, r0
 8004718:	693b      	ldr	r3, [r7, #16]
 800471a:	1ad3      	subs	r3, r2, r3
 800471c:	2b02      	cmp	r3, #2
 800471e:	d901      	bls.n	8004724 <HAL_RCC_OscConfig+0x2c8>
        {
          return HAL_TIMEOUT;
 8004720:	2303      	movs	r3, #3
 8004722:	e10c      	b.n	800493e <HAL_RCC_OscConfig+0x4e2>
      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8004724:	4b6a      	ldr	r3, [pc, #424]	@ (80048d0 <HAL_RCC_OscConfig+0x474>)
 8004726:	681b      	ldr	r3, [r3, #0]
 8004728:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800472c:	2b00      	cmp	r3, #0
 800472e:	d0f0      	beq.n	8004712 <HAL_RCC_OscConfig+0x2b6>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8004730:	687b      	ldr	r3, [r7, #4]
 8004732:	689b      	ldr	r3, [r3, #8]
 8004734:	2b01      	cmp	r3, #1
 8004736:	d106      	bne.n	8004746 <HAL_RCC_OscConfig+0x2ea>
 8004738:	4b64      	ldr	r3, [pc, #400]	@ (80048cc <HAL_RCC_OscConfig+0x470>)
 800473a:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800473c:	4a63      	ldr	r2, [pc, #396]	@ (80048cc <HAL_RCC_OscConfig+0x470>)
 800473e:	f043 0301 	orr.w	r3, r3, #1
 8004742:	6713      	str	r3, [r2, #112]	@ 0x70
 8004744:	e01c      	b.n	8004780 <HAL_RCC_OscConfig+0x324>
 8004746:	687b      	ldr	r3, [r7, #4]
 8004748:	689b      	ldr	r3, [r3, #8]
 800474a:	2b05      	cmp	r3, #5
 800474c:	d10c      	bne.n	8004768 <HAL_RCC_OscConfig+0x30c>
 800474e:	4b5f      	ldr	r3, [pc, #380]	@ (80048cc <HAL_RCC_OscConfig+0x470>)
 8004750:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8004752:	4a5e      	ldr	r2, [pc, #376]	@ (80048cc <HAL_RCC_OscConfig+0x470>)
 8004754:	f043 0304 	orr.w	r3, r3, #4
 8004758:	6713      	str	r3, [r2, #112]	@ 0x70
 800475a:	4b5c      	ldr	r3, [pc, #368]	@ (80048cc <HAL_RCC_OscConfig+0x470>)
 800475c:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800475e:	4a5b      	ldr	r2, [pc, #364]	@ (80048cc <HAL_RCC_OscConfig+0x470>)
 8004760:	f043 0301 	orr.w	r3, r3, #1
 8004764:	6713      	str	r3, [r2, #112]	@ 0x70
 8004766:	e00b      	b.n	8004780 <HAL_RCC_OscConfig+0x324>
 8004768:	4b58      	ldr	r3, [pc, #352]	@ (80048cc <HAL_RCC_OscConfig+0x470>)
 800476a:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800476c:	4a57      	ldr	r2, [pc, #348]	@ (80048cc <HAL_RCC_OscConfig+0x470>)
 800476e:	f023 0301 	bic.w	r3, r3, #1
 8004772:	6713      	str	r3, [r2, #112]	@ 0x70
 8004774:	4b55      	ldr	r3, [pc, #340]	@ (80048cc <HAL_RCC_OscConfig+0x470>)
 8004776:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8004778:	4a54      	ldr	r2, [pc, #336]	@ (80048cc <HAL_RCC_OscConfig+0x470>)
 800477a:	f023 0304 	bic.w	r3, r3, #4
 800477e:	6713      	str	r3, [r2, #112]	@ 0x70
    /* Check the LSE State */
    if ((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 8004780:	687b      	ldr	r3, [r7, #4]
 8004782:	689b      	ldr	r3, [r3, #8]
 8004784:	2b00      	cmp	r3, #0
 8004786:	d015      	beq.n	80047b4 <HAL_RCC_OscConfig+0x358>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8004788:	f7fd ff3a 	bl	8002600 <HAL_GetTick>
 800478c:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 800478e:	e00a      	b.n	80047a6 <HAL_RCC_OscConfig+0x34a>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8004790:	f7fd ff36 	bl	8002600 <HAL_GetTick>
 8004794:	4602      	mov	r2, r0
 8004796:	693b      	ldr	r3, [r7, #16]
 8004798:	1ad3      	subs	r3, r2, r3
 800479a:	f241 3288 	movw	r2, #5000	@ 0x1388
 800479e:	4293      	cmp	r3, r2
 80047a0:	d901      	bls.n	80047a6 <HAL_RCC_OscConfig+0x34a>
        {
          return HAL_TIMEOUT;
 80047a2:	2303      	movs	r3, #3
 80047a4:	e0cb      	b.n	800493e <HAL_RCC_OscConfig+0x4e2>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80047a6:	4b49      	ldr	r3, [pc, #292]	@ (80048cc <HAL_RCC_OscConfig+0x470>)
 80047a8:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80047aa:	f003 0302 	and.w	r3, r3, #2
 80047ae:	2b00      	cmp	r3, #0
 80047b0:	d0ee      	beq.n	8004790 <HAL_RCC_OscConfig+0x334>
 80047b2:	e014      	b.n	80047de <HAL_RCC_OscConfig+0x382>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80047b4:	f7fd ff24 	bl	8002600 <HAL_GetTick>
 80047b8:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 80047ba:	e00a      	b.n	80047d2 <HAL_RCC_OscConfig+0x376>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80047bc:	f7fd ff20 	bl	8002600 <HAL_GetTick>
 80047c0:	4602      	mov	r2, r0
 80047c2:	693b      	ldr	r3, [r7, #16]
 80047c4:	1ad3      	subs	r3, r2, r3
 80047c6:	f241 3288 	movw	r2, #5000	@ 0x1388
 80047ca:	4293      	cmp	r3, r2
 80047cc:	d901      	bls.n	80047d2 <HAL_RCC_OscConfig+0x376>
        {
          return HAL_TIMEOUT;
 80047ce:	2303      	movs	r3, #3
 80047d0:	e0b5      	b.n	800493e <HAL_RCC_OscConfig+0x4e2>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 80047d2:	4b3e      	ldr	r3, [pc, #248]	@ (80048cc <HAL_RCC_OscConfig+0x470>)
 80047d4:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80047d6:	f003 0302 	and.w	r3, r3, #2
 80047da:	2b00      	cmp	r3, #0
 80047dc:	d1ee      	bne.n	80047bc <HAL_RCC_OscConfig+0x360>
        }
      }
    }

    /* Restore clock configuration if changed */
    if (pwrclkchanged == SET)
 80047de:	7dfb      	ldrb	r3, [r7, #23]
 80047e0:	2b01      	cmp	r3, #1
 80047e2:	d105      	bne.n	80047f0 <HAL_RCC_OscConfig+0x394>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 80047e4:	4b39      	ldr	r3, [pc, #228]	@ (80048cc <HAL_RCC_OscConfig+0x470>)
 80047e6:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80047e8:	4a38      	ldr	r2, [pc, #224]	@ (80048cc <HAL_RCC_OscConfig+0x470>)
 80047ea:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 80047ee:	6413      	str	r3, [r2, #64]	@ 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 80047f0:	687b      	ldr	r3, [r7, #4]
 80047f2:	699b      	ldr	r3, [r3, #24]
 80047f4:	2b00      	cmp	r3, #0
 80047f6:	f000 80a1 	beq.w	800493c <HAL_RCC_OscConfig+0x4e0>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 80047fa:	4b34      	ldr	r3, [pc, #208]	@ (80048cc <HAL_RCC_OscConfig+0x470>)
 80047fc:	689b      	ldr	r3, [r3, #8]
 80047fe:	f003 030c 	and.w	r3, r3, #12
 8004802:	2b08      	cmp	r3, #8
 8004804:	d05c      	beq.n	80048c0 <HAL_RCC_OscConfig+0x464>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8004806:	687b      	ldr	r3, [r7, #4]
 8004808:	699b      	ldr	r3, [r3, #24]
 800480a:	2b02      	cmp	r3, #2
 800480c:	d141      	bne.n	8004892 <HAL_RCC_OscConfig+0x436>
        assert_param(IS_RCC_PLLN_VALUE(RCC_OscInitStruct->PLL.PLLN));
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800480e:	4b31      	ldr	r3, [pc, #196]	@ (80048d4 <HAL_RCC_OscConfig+0x478>)
 8004810:	2200      	movs	r2, #0
 8004812:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8004814:	f7fd fef4 	bl	8002600 <HAL_GetTick>
 8004818:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800481a:	e008      	b.n	800482e <HAL_RCC_OscConfig+0x3d2>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800481c:	f7fd fef0 	bl	8002600 <HAL_GetTick>
 8004820:	4602      	mov	r2, r0
 8004822:	693b      	ldr	r3, [r7, #16]
 8004824:	1ad3      	subs	r3, r2, r3
 8004826:	2b02      	cmp	r3, #2
 8004828:	d901      	bls.n	800482e <HAL_RCC_OscConfig+0x3d2>
          {
            return HAL_TIMEOUT;
 800482a:	2303      	movs	r3, #3
 800482c:	e087      	b.n	800493e <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800482e:	4b27      	ldr	r3, [pc, #156]	@ (80048cc <HAL_RCC_OscConfig+0x470>)
 8004830:	681b      	ldr	r3, [r3, #0]
 8004832:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8004836:	2b00      	cmp	r3, #0
 8004838:	d1f0      	bne.n	800481c <HAL_RCC_OscConfig+0x3c0>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 800483a:	687b      	ldr	r3, [r7, #4]
 800483c:	69da      	ldr	r2, [r3, #28]
 800483e:	687b      	ldr	r3, [r7, #4]
 8004840:	6a1b      	ldr	r3, [r3, #32]
 8004842:	431a      	orrs	r2, r3
 8004844:	687b      	ldr	r3, [r7, #4]
 8004846:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004848:	019b      	lsls	r3, r3, #6
 800484a:	431a      	orrs	r2, r3
 800484c:	687b      	ldr	r3, [r7, #4]
 800484e:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8004850:	085b      	lsrs	r3, r3, #1
 8004852:	3b01      	subs	r3, #1
 8004854:	041b      	lsls	r3, r3, #16
 8004856:	431a      	orrs	r2, r3
 8004858:	687b      	ldr	r3, [r7, #4]
 800485a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800485c:	061b      	lsls	r3, r3, #24
 800485e:	491b      	ldr	r1, [pc, #108]	@ (80048cc <HAL_RCC_OscConfig+0x470>)
 8004860:	4313      	orrs	r3, r2
 8004862:	604b      	str	r3, [r1, #4]
                                 RCC_OscInitStruct->PLL.PLLM                                                 | \
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)             | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos) | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8004864:	4b1b      	ldr	r3, [pc, #108]	@ (80048d4 <HAL_RCC_OscConfig+0x478>)
 8004866:	2201      	movs	r2, #1
 8004868:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800486a:	f7fd fec9 	bl	8002600 <HAL_GetTick>
 800486e:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8004870:	e008      	b.n	8004884 <HAL_RCC_OscConfig+0x428>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8004872:	f7fd fec5 	bl	8002600 <HAL_GetTick>
 8004876:	4602      	mov	r2, r0
 8004878:	693b      	ldr	r3, [r7, #16]
 800487a:	1ad3      	subs	r3, r2, r3
 800487c:	2b02      	cmp	r3, #2
 800487e:	d901      	bls.n	8004884 <HAL_RCC_OscConfig+0x428>
          {
            return HAL_TIMEOUT;
 8004880:	2303      	movs	r3, #3
 8004882:	e05c      	b.n	800493e <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8004884:	4b11      	ldr	r3, [pc, #68]	@ (80048cc <HAL_RCC_OscConfig+0x470>)
 8004886:	681b      	ldr	r3, [r3, #0]
 8004888:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 800488c:	2b00      	cmp	r3, #0
 800488e:	d0f0      	beq.n	8004872 <HAL_RCC_OscConfig+0x416>
 8004890:	e054      	b.n	800493c <HAL_RCC_OscConfig+0x4e0>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8004892:	4b10      	ldr	r3, [pc, #64]	@ (80048d4 <HAL_RCC_OscConfig+0x478>)
 8004894:	2200      	movs	r2, #0
 8004896:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8004898:	f7fd feb2 	bl	8002600 <HAL_GetTick>
 800489c:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800489e:	e008      	b.n	80048b2 <HAL_RCC_OscConfig+0x456>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80048a0:	f7fd feae 	bl	8002600 <HAL_GetTick>
 80048a4:	4602      	mov	r2, r0
 80048a6:	693b      	ldr	r3, [r7, #16]
 80048a8:	1ad3      	subs	r3, r2, r3
 80048aa:	2b02      	cmp	r3, #2
 80048ac:	d901      	bls.n	80048b2 <HAL_RCC_OscConfig+0x456>
          {
            return HAL_TIMEOUT;
 80048ae:	2303      	movs	r3, #3
 80048b0:	e045      	b.n	800493e <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80048b2:	4b06      	ldr	r3, [pc, #24]	@ (80048cc <HAL_RCC_OscConfig+0x470>)
 80048b4:	681b      	ldr	r3, [r3, #0]
 80048b6:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 80048ba:	2b00      	cmp	r3, #0
 80048bc:	d1f0      	bne.n	80048a0 <HAL_RCC_OscConfig+0x444>
 80048be:	e03d      	b.n	800493c <HAL_RCC_OscConfig+0x4e0>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 80048c0:	687b      	ldr	r3, [r7, #4]
 80048c2:	699b      	ldr	r3, [r3, #24]
 80048c4:	2b01      	cmp	r3, #1
 80048c6:	d107      	bne.n	80048d8 <HAL_RCC_OscConfig+0x47c>
      {
        return HAL_ERROR;
 80048c8:	2301      	movs	r3, #1
 80048ca:	e038      	b.n	800493e <HAL_RCC_OscConfig+0x4e2>
 80048cc:	40023800 	.word	0x40023800
 80048d0:	40007000 	.word	0x40007000
 80048d4:	42470060 	.word	0x42470060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 80048d8:	4b1b      	ldr	r3, [pc, #108]	@ (8004948 <HAL_RCC_OscConfig+0x4ec>)
 80048da:	685b      	ldr	r3, [r3, #4]
 80048dc:	60fb      	str	r3, [r7, #12]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
#else
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 80048de:	687b      	ldr	r3, [r7, #4]
 80048e0:	699b      	ldr	r3, [r3, #24]
 80048e2:	2b01      	cmp	r3, #1
 80048e4:	d028      	beq.n	8004938 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80048e6:	68fb      	ldr	r3, [r7, #12]
 80048e8:	f403 0280 	and.w	r2, r3, #4194304	@ 0x400000
 80048ec:	687b      	ldr	r3, [r7, #4]
 80048ee:	69db      	ldr	r3, [r3, #28]
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 80048f0:	429a      	cmp	r2, r3
 80048f2:	d121      	bne.n	8004938 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 80048f4:	68fb      	ldr	r3, [r7, #12]
 80048f6:	f003 023f 	and.w	r2, r3, #63	@ 0x3f
 80048fa:	687b      	ldr	r3, [r7, #4]
 80048fc:	6a1b      	ldr	r3, [r3, #32]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80048fe:	429a      	cmp	r2, r3
 8004900:	d11a      	bne.n	8004938 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8004902:	68fa      	ldr	r2, [r7, #12]
 8004904:	f647 73c0 	movw	r3, #32704	@ 0x7fc0
 8004908:	4013      	ands	r3, r2
 800490a:	687a      	ldr	r2, [r7, #4]
 800490c:	6a52      	ldr	r2, [r2, #36]	@ 0x24
 800490e:	0192      	lsls	r2, r2, #6
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8004910:	4293      	cmp	r3, r2
 8004912:	d111      	bne.n	8004938 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8004914:	68fb      	ldr	r3, [r7, #12]
 8004916:	f403 3240 	and.w	r2, r3, #196608	@ 0x30000
 800491a:	687b      	ldr	r3, [r7, #4]
 800491c:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800491e:	085b      	lsrs	r3, r3, #1
 8004920:	3b01      	subs	r3, #1
 8004922:	041b      	lsls	r3, r3, #16
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8004924:	429a      	cmp	r2, r3
 8004926:	d107      	bne.n	8004938 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
 8004928:	68fb      	ldr	r3, [r7, #12]
 800492a:	f003 6270 	and.w	r2, r3, #251658240	@ 0xf000000
 800492e:	687b      	ldr	r3, [r7, #4]
 8004930:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8004932:	061b      	lsls	r3, r3, #24
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8004934:	429a      	cmp	r2, r3
 8004936:	d001      	beq.n	800493c <HAL_RCC_OscConfig+0x4e0>
#endif /* RCC_PLLCFGR_PLLR */
        {
          return HAL_ERROR;
 8004938:	2301      	movs	r3, #1
 800493a:	e000      	b.n	800493e <HAL_RCC_OscConfig+0x4e2>
        }
      }
    }
  }
  return HAL_OK;
 800493c:	2300      	movs	r3, #0
}
 800493e:	4618      	mov	r0, r3
 8004940:	3718      	adds	r7, #24
 8004942:	46bd      	mov	sp, r7
 8004944:	bd80      	pop	{r7, pc}
 8004946:	bf00      	nop
 8004948:	40023800 	.word	0x40023800

0800494c <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 800494c:	b580      	push	{r7, lr}
 800494e:	b084      	sub	sp, #16
 8004950:	af00      	add	r7, sp, #0
 8004952:	6078      	str	r0, [r7, #4]
 8004954:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 8004956:	687b      	ldr	r3, [r7, #4]
 8004958:	2b00      	cmp	r3, #0
 800495a:	d101      	bne.n	8004960 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 800495c:	2301      	movs	r3, #1
 800495e:	e0cc      	b.n	8004afa <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 8004960:	4b68      	ldr	r3, [pc, #416]	@ (8004b04 <HAL_RCC_ClockConfig+0x1b8>)
 8004962:	681b      	ldr	r3, [r3, #0]
 8004964:	f003 030f 	and.w	r3, r3, #15
 8004968:	683a      	ldr	r2, [r7, #0]
 800496a:	429a      	cmp	r2, r3
 800496c:	d90c      	bls.n	8004988 <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800496e:	4b65      	ldr	r3, [pc, #404]	@ (8004b04 <HAL_RCC_ClockConfig+0x1b8>)
 8004970:	683a      	ldr	r2, [r7, #0]
 8004972:	b2d2      	uxtb	r2, r2
 8004974:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8004976:	4b63      	ldr	r3, [pc, #396]	@ (8004b04 <HAL_RCC_ClockConfig+0x1b8>)
 8004978:	681b      	ldr	r3, [r3, #0]
 800497a:	f003 030f 	and.w	r3, r3, #15
 800497e:	683a      	ldr	r2, [r7, #0]
 8004980:	429a      	cmp	r2, r3
 8004982:	d001      	beq.n	8004988 <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 8004984:	2301      	movs	r3, #1
 8004986:	e0b8      	b.n	8004afa <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8004988:	687b      	ldr	r3, [r7, #4]
 800498a:	681b      	ldr	r3, [r3, #0]
 800498c:	f003 0302 	and.w	r3, r3, #2
 8004990:	2b00      	cmp	r3, #0
 8004992:	d020      	beq.n	80049d6 <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8004994:	687b      	ldr	r3, [r7, #4]
 8004996:	681b      	ldr	r3, [r3, #0]
 8004998:	f003 0304 	and.w	r3, r3, #4
 800499c:	2b00      	cmp	r3, #0
 800499e:	d005      	beq.n	80049ac <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 80049a0:	4b59      	ldr	r3, [pc, #356]	@ (8004b08 <HAL_RCC_ClockConfig+0x1bc>)
 80049a2:	689b      	ldr	r3, [r3, #8]
 80049a4:	4a58      	ldr	r2, [pc, #352]	@ (8004b08 <HAL_RCC_ClockConfig+0x1bc>)
 80049a6:	f443 53e0 	orr.w	r3, r3, #7168	@ 0x1c00
 80049aa:	6093      	str	r3, [r2, #8]
    }

    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80049ac:	687b      	ldr	r3, [r7, #4]
 80049ae:	681b      	ldr	r3, [r3, #0]
 80049b0:	f003 0308 	and.w	r3, r3, #8
 80049b4:	2b00      	cmp	r3, #0
 80049b6:	d005      	beq.n	80049c4 <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 80049b8:	4b53      	ldr	r3, [pc, #332]	@ (8004b08 <HAL_RCC_ClockConfig+0x1bc>)
 80049ba:	689b      	ldr	r3, [r3, #8]
 80049bc:	4a52      	ldr	r2, [pc, #328]	@ (8004b08 <HAL_RCC_ClockConfig+0x1bc>)
 80049be:	f443 4360 	orr.w	r3, r3, #57344	@ 0xe000
 80049c2:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 80049c4:	4b50      	ldr	r3, [pc, #320]	@ (8004b08 <HAL_RCC_ClockConfig+0x1bc>)
 80049c6:	689b      	ldr	r3, [r3, #8]
 80049c8:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 80049cc:	687b      	ldr	r3, [r7, #4]
 80049ce:	689b      	ldr	r3, [r3, #8]
 80049d0:	494d      	ldr	r1, [pc, #308]	@ (8004b08 <HAL_RCC_ClockConfig+0x1bc>)
 80049d2:	4313      	orrs	r3, r2
 80049d4:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 80049d6:	687b      	ldr	r3, [r7, #4]
 80049d8:	681b      	ldr	r3, [r3, #0]
 80049da:	f003 0301 	and.w	r3, r3, #1
 80049de:	2b00      	cmp	r3, #0
 80049e0:	d044      	beq.n	8004a6c <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 80049e2:	687b      	ldr	r3, [r7, #4]
 80049e4:	685b      	ldr	r3, [r3, #4]
 80049e6:	2b01      	cmp	r3, #1
 80049e8:	d107      	bne.n	80049fa <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80049ea:	4b47      	ldr	r3, [pc, #284]	@ (8004b08 <HAL_RCC_ClockConfig+0x1bc>)
 80049ec:	681b      	ldr	r3, [r3, #0]
 80049ee:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80049f2:	2b00      	cmp	r3, #0
 80049f4:	d119      	bne.n	8004a2a <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80049f6:	2301      	movs	r3, #1
 80049f8:	e07f      	b.n	8004afa <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if ((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 80049fa:	687b      	ldr	r3, [r7, #4]
 80049fc:	685b      	ldr	r3, [r3, #4]
 80049fe:	2b02      	cmp	r3, #2
 8004a00:	d003      	beq.n	8004a0a <HAL_RCC_ClockConfig+0xbe>
             (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 8004a02:	687b      	ldr	r3, [r7, #4]
 8004a04:	685b      	ldr	r3, [r3, #4]
    else if ((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8004a06:	2b03      	cmp	r3, #3
 8004a08:	d107      	bne.n	8004a1a <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8004a0a:	4b3f      	ldr	r3, [pc, #252]	@ (8004b08 <HAL_RCC_ClockConfig+0x1bc>)
 8004a0c:	681b      	ldr	r3, [r3, #0]
 8004a0e:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8004a12:	2b00      	cmp	r3, #0
 8004a14:	d109      	bne.n	8004a2a <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8004a16:	2301      	movs	r3, #1
 8004a18:	e06f      	b.n	8004afa <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8004a1a:	4b3b      	ldr	r3, [pc, #236]	@ (8004b08 <HAL_RCC_ClockConfig+0x1bc>)
 8004a1c:	681b      	ldr	r3, [r3, #0]
 8004a1e:	f003 0302 	and.w	r3, r3, #2
 8004a22:	2b00      	cmp	r3, #0
 8004a24:	d101      	bne.n	8004a2a <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8004a26:	2301      	movs	r3, #1
 8004a28:	e067      	b.n	8004afa <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8004a2a:	4b37      	ldr	r3, [pc, #220]	@ (8004b08 <HAL_RCC_ClockConfig+0x1bc>)
 8004a2c:	689b      	ldr	r3, [r3, #8]
 8004a2e:	f023 0203 	bic.w	r2, r3, #3
 8004a32:	687b      	ldr	r3, [r7, #4]
 8004a34:	685b      	ldr	r3, [r3, #4]
 8004a36:	4934      	ldr	r1, [pc, #208]	@ (8004b08 <HAL_RCC_ClockConfig+0x1bc>)
 8004a38:	4313      	orrs	r3, r2
 8004a3a:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8004a3c:	f7fd fde0 	bl	8002600 <HAL_GetTick>
 8004a40:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8004a42:	e00a      	b.n	8004a5a <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8004a44:	f7fd fddc 	bl	8002600 <HAL_GetTick>
 8004a48:	4602      	mov	r2, r0
 8004a4a:	68fb      	ldr	r3, [r7, #12]
 8004a4c:	1ad3      	subs	r3, r2, r3
 8004a4e:	f241 3288 	movw	r2, #5000	@ 0x1388
 8004a52:	4293      	cmp	r3, r2
 8004a54:	d901      	bls.n	8004a5a <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 8004a56:	2303      	movs	r3, #3
 8004a58:	e04f      	b.n	8004afa <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8004a5a:	4b2b      	ldr	r3, [pc, #172]	@ (8004b08 <HAL_RCC_ClockConfig+0x1bc>)
 8004a5c:	689b      	ldr	r3, [r3, #8]
 8004a5e:	f003 020c 	and.w	r2, r3, #12
 8004a62:	687b      	ldr	r3, [r7, #4]
 8004a64:	685b      	ldr	r3, [r3, #4]
 8004a66:	009b      	lsls	r3, r3, #2
 8004a68:	429a      	cmp	r2, r3
 8004a6a:	d1eb      	bne.n	8004a44 <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 8004a6c:	4b25      	ldr	r3, [pc, #148]	@ (8004b04 <HAL_RCC_ClockConfig+0x1b8>)
 8004a6e:	681b      	ldr	r3, [r3, #0]
 8004a70:	f003 030f 	and.w	r3, r3, #15
 8004a74:	683a      	ldr	r2, [r7, #0]
 8004a76:	429a      	cmp	r2, r3
 8004a78:	d20c      	bcs.n	8004a94 <HAL_RCC_ClockConfig+0x148>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8004a7a:	4b22      	ldr	r3, [pc, #136]	@ (8004b04 <HAL_RCC_ClockConfig+0x1b8>)
 8004a7c:	683a      	ldr	r2, [r7, #0]
 8004a7e:	b2d2      	uxtb	r2, r2
 8004a80:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8004a82:	4b20      	ldr	r3, [pc, #128]	@ (8004b04 <HAL_RCC_ClockConfig+0x1b8>)
 8004a84:	681b      	ldr	r3, [r3, #0]
 8004a86:	f003 030f 	and.w	r3, r3, #15
 8004a8a:	683a      	ldr	r2, [r7, #0]
 8004a8c:	429a      	cmp	r2, r3
 8004a8e:	d001      	beq.n	8004a94 <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 8004a90:	2301      	movs	r3, #1
 8004a92:	e032      	b.n	8004afa <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8004a94:	687b      	ldr	r3, [r7, #4]
 8004a96:	681b      	ldr	r3, [r3, #0]
 8004a98:	f003 0304 	and.w	r3, r3, #4
 8004a9c:	2b00      	cmp	r3, #0
 8004a9e:	d008      	beq.n	8004ab2 <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8004aa0:	4b19      	ldr	r3, [pc, #100]	@ (8004b08 <HAL_RCC_ClockConfig+0x1bc>)
 8004aa2:	689b      	ldr	r3, [r3, #8]
 8004aa4:	f423 52e0 	bic.w	r2, r3, #7168	@ 0x1c00
 8004aa8:	687b      	ldr	r3, [r7, #4]
 8004aaa:	68db      	ldr	r3, [r3, #12]
 8004aac:	4916      	ldr	r1, [pc, #88]	@ (8004b08 <HAL_RCC_ClockConfig+0x1bc>)
 8004aae:	4313      	orrs	r3, r2
 8004ab0:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8004ab2:	687b      	ldr	r3, [r7, #4]
 8004ab4:	681b      	ldr	r3, [r3, #0]
 8004ab6:	f003 0308 	and.w	r3, r3, #8
 8004aba:	2b00      	cmp	r3, #0
 8004abc:	d009      	beq.n	8004ad2 <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8004abe:	4b12      	ldr	r3, [pc, #72]	@ (8004b08 <HAL_RCC_ClockConfig+0x1bc>)
 8004ac0:	689b      	ldr	r3, [r3, #8]
 8004ac2:	f423 4260 	bic.w	r2, r3, #57344	@ 0xe000
 8004ac6:	687b      	ldr	r3, [r7, #4]
 8004ac8:	691b      	ldr	r3, [r3, #16]
 8004aca:	00db      	lsls	r3, r3, #3
 8004acc:	490e      	ldr	r1, [pc, #56]	@ (8004b08 <HAL_RCC_ClockConfig+0x1bc>)
 8004ace:	4313      	orrs	r3, r2
 8004ad0:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 8004ad2:	f000 f821 	bl	8004b18 <HAL_RCC_GetSysClockFreq>
 8004ad6:	4602      	mov	r2, r0
 8004ad8:	4b0b      	ldr	r3, [pc, #44]	@ (8004b08 <HAL_RCC_ClockConfig+0x1bc>)
 8004ada:	689b      	ldr	r3, [r3, #8]
 8004adc:	091b      	lsrs	r3, r3, #4
 8004ade:	f003 030f 	and.w	r3, r3, #15
 8004ae2:	490a      	ldr	r1, [pc, #40]	@ (8004b0c <HAL_RCC_ClockConfig+0x1c0>)
 8004ae4:	5ccb      	ldrb	r3, [r1, r3]
 8004ae6:	fa22 f303 	lsr.w	r3, r2, r3
 8004aea:	4a09      	ldr	r2, [pc, #36]	@ (8004b10 <HAL_RCC_ClockConfig+0x1c4>)
 8004aec:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick(uwTickPrio);
 8004aee:	4b09      	ldr	r3, [pc, #36]	@ (8004b14 <HAL_RCC_ClockConfig+0x1c8>)
 8004af0:	681b      	ldr	r3, [r3, #0]
 8004af2:	4618      	mov	r0, r3
 8004af4:	f7fd fd40 	bl	8002578 <HAL_InitTick>

  return HAL_OK;
 8004af8:	2300      	movs	r3, #0
}
 8004afa:	4618      	mov	r0, r3
 8004afc:	3710      	adds	r7, #16
 8004afe:	46bd      	mov	sp, r7
 8004b00:	bd80      	pop	{r7, pc}
 8004b02:	bf00      	nop
 8004b04:	40023c00 	.word	0x40023c00
 8004b08:	40023800 	.word	0x40023800
 8004b0c:	08006d08 	.word	0x08006d08
 8004b10:	20000014 	.word	0x20000014
 8004b14:	20000018 	.word	0x20000018

08004b18 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
__weak uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8004b18:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8004b1c:	b094      	sub	sp, #80	@ 0x50
 8004b1e:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U;
 8004b20:	2300      	movs	r3, #0
 8004b22:	647b      	str	r3, [r7, #68]	@ 0x44
  uint32_t pllvco = 0U;
 8004b24:	2300      	movs	r3, #0
 8004b26:	64fb      	str	r3, [r7, #76]	@ 0x4c
  uint32_t pllp = 0U;
 8004b28:	2300      	movs	r3, #0
 8004b2a:	643b      	str	r3, [r7, #64]	@ 0x40
  uint32_t sysclockfreq = 0U;
 8004b2c:	2300      	movs	r3, #0
 8004b2e:	64bb      	str	r3, [r7, #72]	@ 0x48

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 8004b30:	4b79      	ldr	r3, [pc, #484]	@ (8004d18 <HAL_RCC_GetSysClockFreq+0x200>)
 8004b32:	689b      	ldr	r3, [r3, #8]
 8004b34:	f003 030c 	and.w	r3, r3, #12
 8004b38:	2b08      	cmp	r3, #8
 8004b3a:	d00d      	beq.n	8004b58 <HAL_RCC_GetSysClockFreq+0x40>
 8004b3c:	2b08      	cmp	r3, #8
 8004b3e:	f200 80e1 	bhi.w	8004d04 <HAL_RCC_GetSysClockFreq+0x1ec>
 8004b42:	2b00      	cmp	r3, #0
 8004b44:	d002      	beq.n	8004b4c <HAL_RCC_GetSysClockFreq+0x34>
 8004b46:	2b04      	cmp	r3, #4
 8004b48:	d003      	beq.n	8004b52 <HAL_RCC_GetSysClockFreq+0x3a>
 8004b4a:	e0db      	b.n	8004d04 <HAL_RCC_GetSysClockFreq+0x1ec>
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 8004b4c:	4b73      	ldr	r3, [pc, #460]	@ (8004d1c <HAL_RCC_GetSysClockFreq+0x204>)
 8004b4e:	64bb      	str	r3, [r7, #72]	@ 0x48
      break;
 8004b50:	e0db      	b.n	8004d0a <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 8004b52:	4b73      	ldr	r3, [pc, #460]	@ (8004d20 <HAL_RCC_GetSysClockFreq+0x208>)
 8004b54:	64bb      	str	r3, [r7, #72]	@ 0x48
      break;
 8004b56:	e0d8      	b.n	8004d0a <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8004b58:	4b6f      	ldr	r3, [pc, #444]	@ (8004d18 <HAL_RCC_GetSysClockFreq+0x200>)
 8004b5a:	685b      	ldr	r3, [r3, #4]
 8004b5c:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 8004b60:	647b      	str	r3, [r7, #68]	@ 0x44
      if (__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 8004b62:	4b6d      	ldr	r3, [pc, #436]	@ (8004d18 <HAL_RCC_GetSysClockFreq+0x200>)
 8004b64:	685b      	ldr	r3, [r3, #4]
 8004b66:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8004b6a:	2b00      	cmp	r3, #0
 8004b6c:	d063      	beq.n	8004c36 <HAL_RCC_GetSysClockFreq+0x11e>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t)((((uint64_t) HSE_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8004b6e:	4b6a      	ldr	r3, [pc, #424]	@ (8004d18 <HAL_RCC_GetSysClockFreq+0x200>)
 8004b70:	685b      	ldr	r3, [r3, #4]
 8004b72:	099b      	lsrs	r3, r3, #6
 8004b74:	2200      	movs	r2, #0
 8004b76:	63bb      	str	r3, [r7, #56]	@ 0x38
 8004b78:	63fa      	str	r2, [r7, #60]	@ 0x3c
 8004b7a:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8004b7c:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8004b80:	633b      	str	r3, [r7, #48]	@ 0x30
 8004b82:	2300      	movs	r3, #0
 8004b84:	637b      	str	r3, [r7, #52]	@ 0x34
 8004b86:	e9d7 450c 	ldrd	r4, r5, [r7, #48]	@ 0x30
 8004b8a:	4622      	mov	r2, r4
 8004b8c:	462b      	mov	r3, r5
 8004b8e:	f04f 0000 	mov.w	r0, #0
 8004b92:	f04f 0100 	mov.w	r1, #0
 8004b96:	0159      	lsls	r1, r3, #5
 8004b98:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8004b9c:	0150      	lsls	r0, r2, #5
 8004b9e:	4602      	mov	r2, r0
 8004ba0:	460b      	mov	r3, r1
 8004ba2:	4621      	mov	r1, r4
 8004ba4:	1a51      	subs	r1, r2, r1
 8004ba6:	6139      	str	r1, [r7, #16]
 8004ba8:	4629      	mov	r1, r5
 8004baa:	eb63 0301 	sbc.w	r3, r3, r1
 8004bae:	617b      	str	r3, [r7, #20]
 8004bb0:	f04f 0200 	mov.w	r2, #0
 8004bb4:	f04f 0300 	mov.w	r3, #0
 8004bb8:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 8004bbc:	4659      	mov	r1, fp
 8004bbe:	018b      	lsls	r3, r1, #6
 8004bc0:	4651      	mov	r1, sl
 8004bc2:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 8004bc6:	4651      	mov	r1, sl
 8004bc8:	018a      	lsls	r2, r1, #6
 8004bca:	4651      	mov	r1, sl
 8004bcc:	ebb2 0801 	subs.w	r8, r2, r1
 8004bd0:	4659      	mov	r1, fp
 8004bd2:	eb63 0901 	sbc.w	r9, r3, r1
 8004bd6:	f04f 0200 	mov.w	r2, #0
 8004bda:	f04f 0300 	mov.w	r3, #0
 8004bde:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 8004be2:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 8004be6:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 8004bea:	4690      	mov	r8, r2
 8004bec:	4699      	mov	r9, r3
 8004bee:	4623      	mov	r3, r4
 8004bf0:	eb18 0303 	adds.w	r3, r8, r3
 8004bf4:	60bb      	str	r3, [r7, #8]
 8004bf6:	462b      	mov	r3, r5
 8004bf8:	eb49 0303 	adc.w	r3, r9, r3
 8004bfc:	60fb      	str	r3, [r7, #12]
 8004bfe:	f04f 0200 	mov.w	r2, #0
 8004c02:	f04f 0300 	mov.w	r3, #0
 8004c06:	e9d7 4502 	ldrd	r4, r5, [r7, #8]
 8004c0a:	4629      	mov	r1, r5
 8004c0c:	024b      	lsls	r3, r1, #9
 8004c0e:	4621      	mov	r1, r4
 8004c10:	ea43 53d1 	orr.w	r3, r3, r1, lsr #23
 8004c14:	4621      	mov	r1, r4
 8004c16:	024a      	lsls	r2, r1, #9
 8004c18:	4610      	mov	r0, r2
 8004c1a:	4619      	mov	r1, r3
 8004c1c:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8004c1e:	2200      	movs	r2, #0
 8004c20:	62bb      	str	r3, [r7, #40]	@ 0x28
 8004c22:	62fa      	str	r2, [r7, #44]	@ 0x2c
 8004c24:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	@ 0x28
 8004c28:	f7fb fae0 	bl	80001ec <__aeabi_uldivmod>
 8004c2c:	4602      	mov	r2, r0
 8004c2e:	460b      	mov	r3, r1
 8004c30:	4613      	mov	r3, r2
 8004c32:	64fb      	str	r3, [r7, #76]	@ 0x4c
 8004c34:	e058      	b.n	8004ce8 <HAL_RCC_GetSysClockFreq+0x1d0>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t)((((uint64_t) HSI_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8004c36:	4b38      	ldr	r3, [pc, #224]	@ (8004d18 <HAL_RCC_GetSysClockFreq+0x200>)
 8004c38:	685b      	ldr	r3, [r3, #4]
 8004c3a:	099b      	lsrs	r3, r3, #6
 8004c3c:	2200      	movs	r2, #0
 8004c3e:	4618      	mov	r0, r3
 8004c40:	4611      	mov	r1, r2
 8004c42:	f3c0 0308 	ubfx	r3, r0, #0, #9
 8004c46:	623b      	str	r3, [r7, #32]
 8004c48:	2300      	movs	r3, #0
 8004c4a:	627b      	str	r3, [r7, #36]	@ 0x24
 8004c4c:	e9d7 8908 	ldrd	r8, r9, [r7, #32]
 8004c50:	4642      	mov	r2, r8
 8004c52:	464b      	mov	r3, r9
 8004c54:	f04f 0000 	mov.w	r0, #0
 8004c58:	f04f 0100 	mov.w	r1, #0
 8004c5c:	0159      	lsls	r1, r3, #5
 8004c5e:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8004c62:	0150      	lsls	r0, r2, #5
 8004c64:	4602      	mov	r2, r0
 8004c66:	460b      	mov	r3, r1
 8004c68:	4641      	mov	r1, r8
 8004c6a:	ebb2 0a01 	subs.w	sl, r2, r1
 8004c6e:	4649      	mov	r1, r9
 8004c70:	eb63 0b01 	sbc.w	fp, r3, r1
 8004c74:	f04f 0200 	mov.w	r2, #0
 8004c78:	f04f 0300 	mov.w	r3, #0
 8004c7c:	ea4f 138b 	mov.w	r3, fp, lsl #6
 8004c80:	ea43 639a 	orr.w	r3, r3, sl, lsr #26
 8004c84:	ea4f 128a 	mov.w	r2, sl, lsl #6
 8004c88:	ebb2 040a 	subs.w	r4, r2, sl
 8004c8c:	eb63 050b 	sbc.w	r5, r3, fp
 8004c90:	f04f 0200 	mov.w	r2, #0
 8004c94:	f04f 0300 	mov.w	r3, #0
 8004c98:	00eb      	lsls	r3, r5, #3
 8004c9a:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 8004c9e:	00e2      	lsls	r2, r4, #3
 8004ca0:	4614      	mov	r4, r2
 8004ca2:	461d      	mov	r5, r3
 8004ca4:	4643      	mov	r3, r8
 8004ca6:	18e3      	adds	r3, r4, r3
 8004ca8:	603b      	str	r3, [r7, #0]
 8004caa:	464b      	mov	r3, r9
 8004cac:	eb45 0303 	adc.w	r3, r5, r3
 8004cb0:	607b      	str	r3, [r7, #4]
 8004cb2:	f04f 0200 	mov.w	r2, #0
 8004cb6:	f04f 0300 	mov.w	r3, #0
 8004cba:	e9d7 4500 	ldrd	r4, r5, [r7]
 8004cbe:	4629      	mov	r1, r5
 8004cc0:	028b      	lsls	r3, r1, #10
 8004cc2:	4621      	mov	r1, r4
 8004cc4:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 8004cc8:	4621      	mov	r1, r4
 8004cca:	028a      	lsls	r2, r1, #10
 8004ccc:	4610      	mov	r0, r2
 8004cce:	4619      	mov	r1, r3
 8004cd0:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8004cd2:	2200      	movs	r2, #0
 8004cd4:	61bb      	str	r3, [r7, #24]
 8004cd6:	61fa      	str	r2, [r7, #28]
 8004cd8:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8004cdc:	f7fb fa86 	bl	80001ec <__aeabi_uldivmod>
 8004ce0:	4602      	mov	r2, r0
 8004ce2:	460b      	mov	r3, r1
 8004ce4:	4613      	mov	r3, r2
 8004ce6:	64fb      	str	r3, [r7, #76]	@ 0x4c
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) * 2U);
 8004ce8:	4b0b      	ldr	r3, [pc, #44]	@ (8004d18 <HAL_RCC_GetSysClockFreq+0x200>)
 8004cea:	685b      	ldr	r3, [r3, #4]
 8004cec:	0c1b      	lsrs	r3, r3, #16
 8004cee:	f003 0303 	and.w	r3, r3, #3
 8004cf2:	3301      	adds	r3, #1
 8004cf4:	005b      	lsls	r3, r3, #1
 8004cf6:	643b      	str	r3, [r7, #64]	@ 0x40

      sysclockfreq = pllvco / pllp;
 8004cf8:	6cfa      	ldr	r2, [r7, #76]	@ 0x4c
 8004cfa:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8004cfc:	fbb2 f3f3 	udiv	r3, r2, r3
 8004d00:	64bb      	str	r3, [r7, #72]	@ 0x48
      break;
 8004d02:	e002      	b.n	8004d0a <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 8004d04:	4b05      	ldr	r3, [pc, #20]	@ (8004d1c <HAL_RCC_GetSysClockFreq+0x204>)
 8004d06:	64bb      	str	r3, [r7, #72]	@ 0x48
      break;
 8004d08:	bf00      	nop
    }
  }
  return sysclockfreq;
 8004d0a:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
}
 8004d0c:	4618      	mov	r0, r3
 8004d0e:	3750      	adds	r7, #80	@ 0x50
 8004d10:	46bd      	mov	sp, r7
 8004d12:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8004d16:	bf00      	nop
 8004d18:	40023800 	.word	0x40023800
 8004d1c:	00f42400 	.word	0x00f42400
 8004d20:	007a1200 	.word	0x007a1200

08004d24 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8004d24:	b480      	push	{r7}
 8004d26:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8004d28:	4b03      	ldr	r3, [pc, #12]	@ (8004d38 <HAL_RCC_GetHCLKFreq+0x14>)
 8004d2a:	681b      	ldr	r3, [r3, #0]
}
 8004d2c:	4618      	mov	r0, r3
 8004d2e:	46bd      	mov	sp, r7
 8004d30:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004d34:	4770      	bx	lr
 8004d36:	bf00      	nop
 8004d38:	20000014 	.word	0x20000014

08004d3c <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8004d3c:	b580      	push	{r7, lr}
 8004d3e:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos]);
 8004d40:	f7ff fff0 	bl	8004d24 <HAL_RCC_GetHCLKFreq>
 8004d44:	4602      	mov	r2, r0
 8004d46:	4b05      	ldr	r3, [pc, #20]	@ (8004d5c <HAL_RCC_GetPCLK1Freq+0x20>)
 8004d48:	689b      	ldr	r3, [r3, #8]
 8004d4a:	0a9b      	lsrs	r3, r3, #10
 8004d4c:	f003 0307 	and.w	r3, r3, #7
 8004d50:	4903      	ldr	r1, [pc, #12]	@ (8004d60 <HAL_RCC_GetPCLK1Freq+0x24>)
 8004d52:	5ccb      	ldrb	r3, [r1, r3]
 8004d54:	fa22 f303 	lsr.w	r3, r2, r3
}
 8004d58:	4618      	mov	r0, r3
 8004d5a:	bd80      	pop	{r7, pc}
 8004d5c:	40023800 	.word	0x40023800
 8004d60:	08006d18 	.word	0x08006d18

08004d64 <HAL_RCCEx_PeriphCLKConfig>:
  *         the backup registers) and RCC_BDCR register are set to their reset values.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8004d64:	b580      	push	{r7, lr}
 8004d66:	b086      	sub	sp, #24
 8004d68:	af00      	add	r7, sp, #0
 8004d6a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 8004d6c:	2300      	movs	r3, #0
 8004d6e:	617b      	str	r3, [r7, #20]
  uint32_t tmpreg1 = 0U;
 8004d70:	2300      	movs	r3, #0
 8004d72:	613b      	str	r3, [r7, #16]

  /*----------------------- SAI/I2S Configuration (PLLI2S) -------------------*/
  /*----------------------- Common configuration SAI/I2S ---------------------*/
  /* In Case of SAI or I2S Clock Configuration through PLLI2S, PLLI2SN division
     factor is common parameters for both peripherals */
  if ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == RCC_PERIPHCLK_I2S) ||
 8004d74:	687b      	ldr	r3, [r7, #4]
 8004d76:	681b      	ldr	r3, [r3, #0]
 8004d78:	f003 0301 	and.w	r3, r3, #1
 8004d7c:	2b00      	cmp	r3, #0
 8004d7e:	d10b      	bne.n	8004d98 <HAL_RCCEx_PeriphCLKConfig+0x34>
      (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI_PLLI2S) == RCC_PERIPHCLK_SAI_PLLI2S) ||
 8004d80:	687b      	ldr	r3, [r7, #4]
 8004d82:	681b      	ldr	r3, [r3, #0]
 8004d84:	f003 0302 	and.w	r3, r3, #2
  if ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == RCC_PERIPHCLK_I2S) ||
 8004d88:	2b00      	cmp	r3, #0
 8004d8a:	d105      	bne.n	8004d98 <HAL_RCCEx_PeriphCLKConfig+0x34>
      (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLLI2S) == RCC_PERIPHCLK_PLLI2S))
 8004d8c:	687b      	ldr	r3, [r7, #4]
 8004d8e:	681b      	ldr	r3, [r3, #0]
 8004d90:	f003 0340 	and.w	r3, r3, #64	@ 0x40
      (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI_PLLI2S) == RCC_PERIPHCLK_SAI_PLLI2S) ||
 8004d94:	2b00      	cmp	r3, #0
 8004d96:	d075      	beq.n	8004e84 <HAL_RCCEx_PeriphCLKConfig+0x120>
  {
    /* check for Parameters */
    assert_param(IS_RCC_PLLI2SN_VALUE(PeriphClkInit->PLLI2S.PLLI2SN));

    /* Disable the PLLI2S */
    __HAL_RCC_PLLI2S_DISABLE();
 8004d98:	4b91      	ldr	r3, [pc, #580]	@ (8004fe0 <HAL_RCCEx_PeriphCLKConfig+0x27c>)
 8004d9a:	2200      	movs	r2, #0
 8004d9c:	601a      	str	r2, [r3, #0]
    /* Get tick */
    tickstart = HAL_GetTick();
 8004d9e:	f7fd fc2f 	bl	8002600 <HAL_GetTick>
 8004da2:	6178      	str	r0, [r7, #20]
    /* Wait till PLLI2S is disabled */
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  != RESET)
 8004da4:	e008      	b.n	8004db8 <HAL_RCCEx_PeriphCLKConfig+0x54>
    {
      if ((HAL_GetTick() - tickstart) > PLLI2S_TIMEOUT_VALUE)
 8004da6:	f7fd fc2b 	bl	8002600 <HAL_GetTick>
 8004daa:	4602      	mov	r2, r0
 8004dac:	697b      	ldr	r3, [r7, #20]
 8004dae:	1ad3      	subs	r3, r2, r3
 8004db0:	2b02      	cmp	r3, #2
 8004db2:	d901      	bls.n	8004db8 <HAL_RCCEx_PeriphCLKConfig+0x54>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 8004db4:	2303      	movs	r3, #3
 8004db6:	e189      	b.n	80050cc <HAL_RCCEx_PeriphCLKConfig+0x368>
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  != RESET)
 8004db8:	4b8a      	ldr	r3, [pc, #552]	@ (8004fe4 <HAL_RCCEx_PeriphCLKConfig+0x280>)
 8004dba:	681b      	ldr	r3, [r3, #0]
 8004dbc:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 8004dc0:	2b00      	cmp	r3, #0
 8004dc2:	d1f0      	bne.n	8004da6 <HAL_RCCEx_PeriphCLKConfig+0x42>
    }

    /*---------------------------- I2S configuration -------------------------*/
    /* In Case of I2S Clock Configuration through PLLI2S, PLLI2SR must be added
      only for I2S configuration */
    if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == (RCC_PERIPHCLK_I2S))
 8004dc4:	687b      	ldr	r3, [r7, #4]
 8004dc6:	681b      	ldr	r3, [r3, #0]
 8004dc8:	f003 0301 	and.w	r3, r3, #1
 8004dcc:	2b00      	cmp	r3, #0
 8004dce:	d009      	beq.n	8004de4 <HAL_RCCEx_PeriphCLKConfig+0x80>
      /* check for Parameters */
      assert_param(IS_RCC_PLLI2SR_VALUE(PeriphClkInit->PLLI2S.PLLI2SR));
      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO = f(VCO clock) = f(PLLI2S clock input) * (PLLI2SN/PLLM) */
      /* I2SCLK = f(PLLI2S clock output) = f(VCO clock) / PLLI2SR */
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN, PeriphClkInit->PLLI2S.PLLI2SR);
 8004dd0:	687b      	ldr	r3, [r7, #4]
 8004dd2:	685b      	ldr	r3, [r3, #4]
 8004dd4:	019a      	lsls	r2, r3, #6
 8004dd6:	687b      	ldr	r3, [r7, #4]
 8004dd8:	689b      	ldr	r3, [r3, #8]
 8004dda:	071b      	lsls	r3, r3, #28
 8004ddc:	4981      	ldr	r1, [pc, #516]	@ (8004fe4 <HAL_RCCEx_PeriphCLKConfig+0x280>)
 8004dde:	4313      	orrs	r3, r2
 8004de0:	f8c1 3084 	str.w	r3, [r1, #132]	@ 0x84
    }

    /*---------------------------- SAI configuration -------------------------*/
    /* In Case of SAI Clock Configuration through PLLI2S, PLLI2SQ and PLLI2S_DIVQ must
       be added only for SAI configuration */
    if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI_PLLI2S) == (RCC_PERIPHCLK_SAI_PLLI2S))
 8004de4:	687b      	ldr	r3, [r7, #4]
 8004de6:	681b      	ldr	r3, [r3, #0]
 8004de8:	f003 0302 	and.w	r3, r3, #2
 8004dec:	2b00      	cmp	r3, #0
 8004dee:	d01f      	beq.n	8004e30 <HAL_RCCEx_PeriphCLKConfig+0xcc>
      /* Check the PLLI2S division factors */
      assert_param(IS_RCC_PLLI2SQ_VALUE(PeriphClkInit->PLLI2S.PLLI2SQ));
      assert_param(IS_RCC_PLLI2S_DIVQ_VALUE(PeriphClkInit->PLLI2SDivQ));

      /* Read PLLI2SR value from PLLI2SCFGR register (this value is not need for SAI configuration) */
      tmpreg1 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SR) >> RCC_PLLI2SCFGR_PLLI2SR_Pos);
 8004df0:	4b7c      	ldr	r3, [pc, #496]	@ (8004fe4 <HAL_RCCEx_PeriphCLKConfig+0x280>)
 8004df2:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 8004df6:	0f1b      	lsrs	r3, r3, #28
 8004df8:	f003 0307 	and.w	r3, r3, #7
 8004dfc:	613b      	str	r3, [r7, #16]
      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO Input  = PLL_SOURCE/PLLM */
      /* PLLI2S_VCO Output = PLLI2S_VCO Input * PLLI2SN */
      /* SAI_CLK(first level) = PLLI2S_VCO Output/PLLI2SQ */
      __HAL_RCC_PLLI2S_SAICLK_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN, PeriphClkInit->PLLI2S.PLLI2SQ, tmpreg1);
 8004dfe:	687b      	ldr	r3, [r7, #4]
 8004e00:	685b      	ldr	r3, [r3, #4]
 8004e02:	019a      	lsls	r2, r3, #6
 8004e04:	687b      	ldr	r3, [r7, #4]
 8004e06:	68db      	ldr	r3, [r3, #12]
 8004e08:	061b      	lsls	r3, r3, #24
 8004e0a:	431a      	orrs	r2, r3
 8004e0c:	693b      	ldr	r3, [r7, #16]
 8004e0e:	071b      	lsls	r3, r3, #28
 8004e10:	4974      	ldr	r1, [pc, #464]	@ (8004fe4 <HAL_RCCEx_PeriphCLKConfig+0x280>)
 8004e12:	4313      	orrs	r3, r2
 8004e14:	f8c1 3084 	str.w	r3, [r1, #132]	@ 0x84
      /* SAI_CLK_x = SAI_CLK(first level)/PLLI2SDIVQ */
      __HAL_RCC_PLLI2S_PLLSAICLKDIVQ_CONFIG(PeriphClkInit->PLLI2SDivQ);
 8004e18:	4b72      	ldr	r3, [pc, #456]	@ (8004fe4 <HAL_RCCEx_PeriphCLKConfig+0x280>)
 8004e1a:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 8004e1e:	f023 021f 	bic.w	r2, r3, #31
 8004e22:	687b      	ldr	r3, [r7, #4]
 8004e24:	69db      	ldr	r3, [r3, #28]
 8004e26:	3b01      	subs	r3, #1
 8004e28:	496e      	ldr	r1, [pc, #440]	@ (8004fe4 <HAL_RCCEx_PeriphCLKConfig+0x280>)
 8004e2a:	4313      	orrs	r3, r2
 8004e2c:	f8c1 308c 	str.w	r3, [r1, #140]	@ 0x8c
    }

    /*----------------- In Case of PLLI2S is just selected  -----------------*/
    if ((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_PLLI2S) == RCC_PERIPHCLK_PLLI2S)
 8004e30:	687b      	ldr	r3, [r7, #4]
 8004e32:	681b      	ldr	r3, [r3, #0]
 8004e34:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8004e38:	2b00      	cmp	r3, #0
 8004e3a:	d00d      	beq.n	8004e58 <HAL_RCCEx_PeriphCLKConfig+0xf4>
      /* Check for Parameters */
      assert_param(IS_RCC_PLLI2SQ_VALUE(PeriphClkInit->PLLI2S.PLLI2SQ));
      assert_param(IS_RCC_PLLI2SR_VALUE(PeriphClkInit->PLLI2S.PLLI2SR));

      /* Configure the PLLI2S multiplication and division factors */
      __HAL_RCC_PLLI2S_SAICLK_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN, PeriphClkInit->PLLI2S.PLLI2SQ,
 8004e3c:	687b      	ldr	r3, [r7, #4]
 8004e3e:	685b      	ldr	r3, [r3, #4]
 8004e40:	019a      	lsls	r2, r3, #6
 8004e42:	687b      	ldr	r3, [r7, #4]
 8004e44:	68db      	ldr	r3, [r3, #12]
 8004e46:	061b      	lsls	r3, r3, #24
 8004e48:	431a      	orrs	r2, r3
 8004e4a:	687b      	ldr	r3, [r7, #4]
 8004e4c:	689b      	ldr	r3, [r3, #8]
 8004e4e:	071b      	lsls	r3, r3, #28
 8004e50:	4964      	ldr	r1, [pc, #400]	@ (8004fe4 <HAL_RCCEx_PeriphCLKConfig+0x280>)
 8004e52:	4313      	orrs	r3, r2
 8004e54:	f8c1 3084 	str.w	r3, [r1, #132]	@ 0x84
                                     PeriphClkInit->PLLI2S.PLLI2SR);
    }

    /* Enable the PLLI2S */
    __HAL_RCC_PLLI2S_ENABLE();
 8004e58:	4b61      	ldr	r3, [pc, #388]	@ (8004fe0 <HAL_RCCEx_PeriphCLKConfig+0x27c>)
 8004e5a:	2201      	movs	r2, #1
 8004e5c:	601a      	str	r2, [r3, #0]
    /* Get tick */
    tickstart = HAL_GetTick();
 8004e5e:	f7fd fbcf 	bl	8002600 <HAL_GetTick>
 8004e62:	6178      	str	r0, [r7, #20]
    /* Wait till PLLI2S is ready */
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  == RESET)
 8004e64:	e008      	b.n	8004e78 <HAL_RCCEx_PeriphCLKConfig+0x114>
    {
      if ((HAL_GetTick() - tickstart) > PLLI2S_TIMEOUT_VALUE)
 8004e66:	f7fd fbcb 	bl	8002600 <HAL_GetTick>
 8004e6a:	4602      	mov	r2, r0
 8004e6c:	697b      	ldr	r3, [r7, #20]
 8004e6e:	1ad3      	subs	r3, r2, r3
 8004e70:	2b02      	cmp	r3, #2
 8004e72:	d901      	bls.n	8004e78 <HAL_RCCEx_PeriphCLKConfig+0x114>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 8004e74:	2303      	movs	r3, #3
 8004e76:	e129      	b.n	80050cc <HAL_RCCEx_PeriphCLKConfig+0x368>
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  == RESET)
 8004e78:	4b5a      	ldr	r3, [pc, #360]	@ (8004fe4 <HAL_RCCEx_PeriphCLKConfig+0x280>)
 8004e7a:	681b      	ldr	r3, [r3, #0]
 8004e7c:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 8004e80:	2b00      	cmp	r3, #0
 8004e82:	d0f0      	beq.n	8004e66 <HAL_RCCEx_PeriphCLKConfig+0x102>

  /*----------------------- SAI/LTDC Configuration (PLLSAI) ------------------*/
  /*----------------------- Common configuration SAI/LTDC --------------------*/
  /* In Case of SAI or LTDC Clock Configuration through PLLSAI, PLLSAIN division
     factor is common parameters for both peripherals */
  if ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI_PLLSAI) == RCC_PERIPHCLK_SAI_PLLSAI) ||
 8004e84:	687b      	ldr	r3, [r7, #4]
 8004e86:	681b      	ldr	r3, [r3, #0]
 8004e88:	f003 0304 	and.w	r3, r3, #4
 8004e8c:	2b00      	cmp	r3, #0
 8004e8e:	d105      	bne.n	8004e9c <HAL_RCCEx_PeriphCLKConfig+0x138>
      (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LTDC) == RCC_PERIPHCLK_LTDC))
 8004e90:	687b      	ldr	r3, [r7, #4]
 8004e92:	681b      	ldr	r3, [r3, #0]
 8004e94:	f003 0308 	and.w	r3, r3, #8
  if ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI_PLLSAI) == RCC_PERIPHCLK_SAI_PLLSAI) ||
 8004e98:	2b00      	cmp	r3, #0
 8004e9a:	d079      	beq.n	8004f90 <HAL_RCCEx_PeriphCLKConfig+0x22c>
  {
    /* Check the PLLSAI division factors */
    assert_param(IS_RCC_PLLSAIN_VALUE(PeriphClkInit->PLLSAI.PLLSAIN));

    /* Disable PLLSAI Clock */
    __HAL_RCC_PLLSAI_DISABLE();
 8004e9c:	4b52      	ldr	r3, [pc, #328]	@ (8004fe8 <HAL_RCCEx_PeriphCLKConfig+0x284>)
 8004e9e:	2200      	movs	r2, #0
 8004ea0:	601a      	str	r2, [r3, #0]
    /* Get tick */
    tickstart = HAL_GetTick();
 8004ea2:	f7fd fbad 	bl	8002600 <HAL_GetTick>
 8004ea6:	6178      	str	r0, [r7, #20]
    /* Wait till PLLSAI is disabled */
    while (__HAL_RCC_PLLSAI_GET_FLAG() != RESET)
 8004ea8:	e008      	b.n	8004ebc <HAL_RCCEx_PeriphCLKConfig+0x158>
    {
      if ((HAL_GetTick() - tickstart) > PLLSAI_TIMEOUT_VALUE)
 8004eaa:	f7fd fba9 	bl	8002600 <HAL_GetTick>
 8004eae:	4602      	mov	r2, r0
 8004eb0:	697b      	ldr	r3, [r7, #20]
 8004eb2:	1ad3      	subs	r3, r2, r3
 8004eb4:	2b02      	cmp	r3, #2
 8004eb6:	d901      	bls.n	8004ebc <HAL_RCCEx_PeriphCLKConfig+0x158>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 8004eb8:	2303      	movs	r3, #3
 8004eba:	e107      	b.n	80050cc <HAL_RCCEx_PeriphCLKConfig+0x368>
    while (__HAL_RCC_PLLSAI_GET_FLAG() != RESET)
 8004ebc:	4b49      	ldr	r3, [pc, #292]	@ (8004fe4 <HAL_RCCEx_PeriphCLKConfig+0x280>)
 8004ebe:	681b      	ldr	r3, [r3, #0]
 8004ec0:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 8004ec4:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 8004ec8:	d0ef      	beq.n	8004eaa <HAL_RCCEx_PeriphCLKConfig+0x146>
    }

    /*---------------------------- SAI configuration -------------------------*/
    /* In Case of SAI Clock Configuration through PLLSAI, PLLSAIQ and PLLSAI_DIVQ must
       be added only for SAI configuration */
    if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI_PLLSAI) == (RCC_PERIPHCLK_SAI_PLLSAI))
 8004eca:	687b      	ldr	r3, [r7, #4]
 8004ecc:	681b      	ldr	r3, [r3, #0]
 8004ece:	f003 0304 	and.w	r3, r3, #4
 8004ed2:	2b00      	cmp	r3, #0
 8004ed4:	d020      	beq.n	8004f18 <HAL_RCCEx_PeriphCLKConfig+0x1b4>
    {
      assert_param(IS_RCC_PLLSAIQ_VALUE(PeriphClkInit->PLLSAI.PLLSAIQ));
      assert_param(IS_RCC_PLLSAI_DIVQ_VALUE(PeriphClkInit->PLLSAIDivQ));

      /* Read PLLSAIR value from PLLSAICFGR register (this value is not need for SAI configuration) */
      tmpreg1 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIR) >> RCC_PLLSAICFGR_PLLSAIR_Pos);
 8004ed6:	4b43      	ldr	r3, [pc, #268]	@ (8004fe4 <HAL_RCCEx_PeriphCLKConfig+0x280>)
 8004ed8:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8004edc:	0f1b      	lsrs	r3, r3, #28
 8004ede:	f003 0307 	and.w	r3, r3, #7
 8004ee2:	613b      	str	r3, [r7, #16]
      /* PLLSAI_VCO Input  = PLL_SOURCE/PLLM */
      /* PLLSAI_VCO Output = PLLSAI_VCO Input * PLLSAIN */
      /* SAI_CLK(first level) = PLLSAI_VCO Output/PLLSAIQ */
      __HAL_RCC_PLLSAI_CONFIG(PeriphClkInit->PLLSAI.PLLSAIN, PeriphClkInit->PLLSAI.PLLSAIQ, tmpreg1);
 8004ee4:	687b      	ldr	r3, [r7, #4]
 8004ee6:	691b      	ldr	r3, [r3, #16]
 8004ee8:	019a      	lsls	r2, r3, #6
 8004eea:	687b      	ldr	r3, [r7, #4]
 8004eec:	695b      	ldr	r3, [r3, #20]
 8004eee:	061b      	lsls	r3, r3, #24
 8004ef0:	431a      	orrs	r2, r3
 8004ef2:	693b      	ldr	r3, [r7, #16]
 8004ef4:	071b      	lsls	r3, r3, #28
 8004ef6:	493b      	ldr	r1, [pc, #236]	@ (8004fe4 <HAL_RCCEx_PeriphCLKConfig+0x280>)
 8004ef8:	4313      	orrs	r3, r2
 8004efa:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
      /* SAI_CLK_x = SAI_CLK(first level)/PLLSAIDIVQ */
      __HAL_RCC_PLLSAI_PLLSAICLKDIVQ_CONFIG(PeriphClkInit->PLLSAIDivQ);
 8004efe:	4b39      	ldr	r3, [pc, #228]	@ (8004fe4 <HAL_RCCEx_PeriphCLKConfig+0x280>)
 8004f00:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 8004f04:	f423 52f8 	bic.w	r2, r3, #7936	@ 0x1f00
 8004f08:	687b      	ldr	r3, [r7, #4]
 8004f0a:	6a1b      	ldr	r3, [r3, #32]
 8004f0c:	3b01      	subs	r3, #1
 8004f0e:	021b      	lsls	r3, r3, #8
 8004f10:	4934      	ldr	r1, [pc, #208]	@ (8004fe4 <HAL_RCCEx_PeriphCLKConfig+0x280>)
 8004f12:	4313      	orrs	r3, r2
 8004f14:	f8c1 308c 	str.w	r3, [r1, #140]	@ 0x8c
    }

    /*---------------------------- LTDC configuration ------------------------*/
    if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LTDC) == (RCC_PERIPHCLK_LTDC))
 8004f18:	687b      	ldr	r3, [r7, #4]
 8004f1a:	681b      	ldr	r3, [r3, #0]
 8004f1c:	f003 0308 	and.w	r3, r3, #8
 8004f20:	2b00      	cmp	r3, #0
 8004f22:	d01e      	beq.n	8004f62 <HAL_RCCEx_PeriphCLKConfig+0x1fe>
    {
      assert_param(IS_RCC_PLLSAIR_VALUE(PeriphClkInit->PLLSAI.PLLSAIR));
      assert_param(IS_RCC_PLLSAI_DIVR_VALUE(PeriphClkInit->PLLSAIDivR));

      /* Read PLLSAIR value from PLLSAICFGR register (this value is not need for SAI configuration) */
      tmpreg1 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIQ) >> RCC_PLLSAICFGR_PLLSAIQ_Pos);
 8004f24:	4b2f      	ldr	r3, [pc, #188]	@ (8004fe4 <HAL_RCCEx_PeriphCLKConfig+0x280>)
 8004f26:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8004f2a:	0e1b      	lsrs	r3, r3, #24
 8004f2c:	f003 030f 	and.w	r3, r3, #15
 8004f30:	613b      	str	r3, [r7, #16]
      /* PLLSAI_VCO Input  = PLL_SOURCE/PLLM */
      /* PLLSAI_VCO Output = PLLSAI_VCO Input * PLLSAIN */
      /* LTDC_CLK(first level) = PLLSAI_VCO Output/PLLSAIR */
      __HAL_RCC_PLLSAI_CONFIG(PeriphClkInit->PLLSAI.PLLSAIN, tmpreg1, PeriphClkInit->PLLSAI.PLLSAIR);
 8004f32:	687b      	ldr	r3, [r7, #4]
 8004f34:	691b      	ldr	r3, [r3, #16]
 8004f36:	019a      	lsls	r2, r3, #6
 8004f38:	693b      	ldr	r3, [r7, #16]
 8004f3a:	061b      	lsls	r3, r3, #24
 8004f3c:	431a      	orrs	r2, r3
 8004f3e:	687b      	ldr	r3, [r7, #4]
 8004f40:	699b      	ldr	r3, [r3, #24]
 8004f42:	071b      	lsls	r3, r3, #28
 8004f44:	4927      	ldr	r1, [pc, #156]	@ (8004fe4 <HAL_RCCEx_PeriphCLKConfig+0x280>)
 8004f46:	4313      	orrs	r3, r2
 8004f48:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
      /* LTDC_CLK = LTDC_CLK(first level)/PLLSAIDIVR */
      __HAL_RCC_PLLSAI_PLLSAICLKDIVR_CONFIG(PeriphClkInit->PLLSAIDivR);
 8004f4c:	4b25      	ldr	r3, [pc, #148]	@ (8004fe4 <HAL_RCCEx_PeriphCLKConfig+0x280>)
 8004f4e:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 8004f52:	f423 3240 	bic.w	r2, r3, #196608	@ 0x30000
 8004f56:	687b      	ldr	r3, [r7, #4]
 8004f58:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004f5a:	4922      	ldr	r1, [pc, #136]	@ (8004fe4 <HAL_RCCEx_PeriphCLKConfig+0x280>)
 8004f5c:	4313      	orrs	r3, r2
 8004f5e:	f8c1 308c 	str.w	r3, [r1, #140]	@ 0x8c
    }
    /* Enable PLLSAI Clock */
    __HAL_RCC_PLLSAI_ENABLE();
 8004f62:	4b21      	ldr	r3, [pc, #132]	@ (8004fe8 <HAL_RCCEx_PeriphCLKConfig+0x284>)
 8004f64:	2201      	movs	r2, #1
 8004f66:	601a      	str	r2, [r3, #0]
    /* Get tick */
    tickstart = HAL_GetTick();
 8004f68:	f7fd fb4a 	bl	8002600 <HAL_GetTick>
 8004f6c:	6178      	str	r0, [r7, #20]
    /* Wait till PLLSAI is ready */
    while (__HAL_RCC_PLLSAI_GET_FLAG() == RESET)
 8004f6e:	e008      	b.n	8004f82 <HAL_RCCEx_PeriphCLKConfig+0x21e>
    {
      if ((HAL_GetTick() - tickstart) > PLLSAI_TIMEOUT_VALUE)
 8004f70:	f7fd fb46 	bl	8002600 <HAL_GetTick>
 8004f74:	4602      	mov	r2, r0
 8004f76:	697b      	ldr	r3, [r7, #20]
 8004f78:	1ad3      	subs	r3, r2, r3
 8004f7a:	2b02      	cmp	r3, #2
 8004f7c:	d901      	bls.n	8004f82 <HAL_RCCEx_PeriphCLKConfig+0x21e>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 8004f7e:	2303      	movs	r3, #3
 8004f80:	e0a4      	b.n	80050cc <HAL_RCCEx_PeriphCLKConfig+0x368>
    while (__HAL_RCC_PLLSAI_GET_FLAG() == RESET)
 8004f82:	4b18      	ldr	r3, [pc, #96]	@ (8004fe4 <HAL_RCCEx_PeriphCLKConfig+0x280>)
 8004f84:	681b      	ldr	r3, [r3, #0]
 8004f86:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 8004f8a:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 8004f8e:	d1ef      	bne.n	8004f70 <HAL_RCCEx_PeriphCLKConfig+0x20c>
    }
  }
  /*--------------------------------------------------------------------------*/

  /*---------------------------- RTC configuration ---------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == (RCC_PERIPHCLK_RTC))
 8004f90:	687b      	ldr	r3, [r7, #4]
 8004f92:	681b      	ldr	r3, [r3, #0]
 8004f94:	f003 0320 	and.w	r3, r3, #32
 8004f98:	2b00      	cmp	r3, #0
 8004f9a:	f000 808b 	beq.w	80050b4 <HAL_RCCEx_PeriphCLKConfig+0x350>
  {
    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable Power Clock*/
    __HAL_RCC_PWR_CLK_ENABLE();
 8004f9e:	2300      	movs	r3, #0
 8004fa0:	60fb      	str	r3, [r7, #12]
 8004fa2:	4b10      	ldr	r3, [pc, #64]	@ (8004fe4 <HAL_RCCEx_PeriphCLKConfig+0x280>)
 8004fa4:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004fa6:	4a0f      	ldr	r2, [pc, #60]	@ (8004fe4 <HAL_RCCEx_PeriphCLKConfig+0x280>)
 8004fa8:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8004fac:	6413      	str	r3, [r2, #64]	@ 0x40
 8004fae:	4b0d      	ldr	r3, [pc, #52]	@ (8004fe4 <HAL_RCCEx_PeriphCLKConfig+0x280>)
 8004fb0:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004fb2:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8004fb6:	60fb      	str	r3, [r7, #12]
 8004fb8:	68fb      	ldr	r3, [r7, #12]

    /* Enable write access to Backup domain */
    PWR->CR |= PWR_CR_DBP;
 8004fba:	4b0c      	ldr	r3, [pc, #48]	@ (8004fec <HAL_RCCEx_PeriphCLKConfig+0x288>)
 8004fbc:	681b      	ldr	r3, [r3, #0]
 8004fbe:	4a0b      	ldr	r2, [pc, #44]	@ (8004fec <HAL_RCCEx_PeriphCLKConfig+0x288>)
 8004fc0:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8004fc4:	6013      	str	r3, [r2, #0]

    /* Get tick */
    tickstart = HAL_GetTick();
 8004fc6:	f7fd fb1b 	bl	8002600 <HAL_GetTick>
 8004fca:	6178      	str	r0, [r7, #20]

    while ((PWR->CR & PWR_CR_DBP) == RESET)
 8004fcc:	e010      	b.n	8004ff0 <HAL_RCCEx_PeriphCLKConfig+0x28c>
    {
      if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8004fce:	f7fd fb17 	bl	8002600 <HAL_GetTick>
 8004fd2:	4602      	mov	r2, r0
 8004fd4:	697b      	ldr	r3, [r7, #20]
 8004fd6:	1ad3      	subs	r3, r2, r3
 8004fd8:	2b02      	cmp	r3, #2
 8004fda:	d909      	bls.n	8004ff0 <HAL_RCCEx_PeriphCLKConfig+0x28c>
      {
        return HAL_TIMEOUT;
 8004fdc:	2303      	movs	r3, #3
 8004fde:	e075      	b.n	80050cc <HAL_RCCEx_PeriphCLKConfig+0x368>
 8004fe0:	42470068 	.word	0x42470068
 8004fe4:	40023800 	.word	0x40023800
 8004fe8:	42470070 	.word	0x42470070
 8004fec:	40007000 	.word	0x40007000
    while ((PWR->CR & PWR_CR_DBP) == RESET)
 8004ff0:	4b38      	ldr	r3, [pc, #224]	@ (80050d4 <HAL_RCCEx_PeriphCLKConfig+0x370>)
 8004ff2:	681b      	ldr	r3, [r3, #0]
 8004ff4:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8004ff8:	2b00      	cmp	r3, #0
 8004ffa:	d0e8      	beq.n	8004fce <HAL_RCCEx_PeriphCLKConfig+0x26a>
      }
    }
    /* Reset the Backup domain only if the RTC Clock source selection is modified from reset value */
    tmpreg1 = (RCC->BDCR & RCC_BDCR_RTCSEL);
 8004ffc:	4b36      	ldr	r3, [pc, #216]	@ (80050d8 <HAL_RCCEx_PeriphCLKConfig+0x374>)
 8004ffe:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8005000:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8005004:	613b      	str	r3, [r7, #16]
    if ((tmpreg1 != 0x00000000U) && ((tmpreg1) != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL)))
 8005006:	693b      	ldr	r3, [r7, #16]
 8005008:	2b00      	cmp	r3, #0
 800500a:	d02f      	beq.n	800506c <HAL_RCCEx_PeriphCLKConfig+0x308>
 800500c:	687b      	ldr	r3, [r7, #4]
 800500e:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8005010:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8005014:	693a      	ldr	r2, [r7, #16]
 8005016:	429a      	cmp	r2, r3
 8005018:	d028      	beq.n	800506c <HAL_RCCEx_PeriphCLKConfig+0x308>
    {
      /* Store the content of BDCR register before the reset of Backup Domain */
      tmpreg1 = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 800501a:	4b2f      	ldr	r3, [pc, #188]	@ (80050d8 <HAL_RCCEx_PeriphCLKConfig+0x374>)
 800501c:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800501e:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8005022:	613b      	str	r3, [r7, #16]
      /* RTC Clock selection can be changed only if the Backup Domain is reset */
      __HAL_RCC_BACKUPRESET_FORCE();
 8005024:	4b2d      	ldr	r3, [pc, #180]	@ (80050dc <HAL_RCCEx_PeriphCLKConfig+0x378>)
 8005026:	2201      	movs	r2, #1
 8005028:	601a      	str	r2, [r3, #0]
      __HAL_RCC_BACKUPRESET_RELEASE();
 800502a:	4b2c      	ldr	r3, [pc, #176]	@ (80050dc <HAL_RCCEx_PeriphCLKConfig+0x378>)
 800502c:	2200      	movs	r2, #0
 800502e:	601a      	str	r2, [r3, #0]
      /* Restore the Content of BDCR register */
      RCC->BDCR = tmpreg1;
 8005030:	4a29      	ldr	r2, [pc, #164]	@ (80050d8 <HAL_RCCEx_PeriphCLKConfig+0x374>)
 8005032:	693b      	ldr	r3, [r7, #16]
 8005034:	6713      	str	r3, [r2, #112]	@ 0x70

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if (HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSEON))
 8005036:	4b28      	ldr	r3, [pc, #160]	@ (80050d8 <HAL_RCCEx_PeriphCLKConfig+0x374>)
 8005038:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800503a:	f003 0301 	and.w	r3, r3, #1
 800503e:	2b01      	cmp	r3, #1
 8005040:	d114      	bne.n	800506c <HAL_RCCEx_PeriphCLKConfig+0x308>
      {
        /* Get tick */
        tickstart = HAL_GetTick();
 8005042:	f7fd fadd 	bl	8002600 <HAL_GetTick>
 8005046:	6178      	str	r0, [r7, #20]

        /* Wait till LSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8005048:	e00a      	b.n	8005060 <HAL_RCCEx_PeriphCLKConfig+0x2fc>
        {
          if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800504a:	f7fd fad9 	bl	8002600 <HAL_GetTick>
 800504e:	4602      	mov	r2, r0
 8005050:	697b      	ldr	r3, [r7, #20]
 8005052:	1ad3      	subs	r3, r2, r3
 8005054:	f241 3288 	movw	r2, #5000	@ 0x1388
 8005058:	4293      	cmp	r3, r2
 800505a:	d901      	bls.n	8005060 <HAL_RCCEx_PeriphCLKConfig+0x2fc>
          {
            return HAL_TIMEOUT;
 800505c:	2303      	movs	r3, #3
 800505e:	e035      	b.n	80050cc <HAL_RCCEx_PeriphCLKConfig+0x368>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8005060:	4b1d      	ldr	r3, [pc, #116]	@ (80050d8 <HAL_RCCEx_PeriphCLKConfig+0x374>)
 8005062:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8005064:	f003 0302 	and.w	r3, r3, #2
 8005068:	2b00      	cmp	r3, #0
 800506a:	d0ee      	beq.n	800504a <HAL_RCCEx_PeriphCLKConfig+0x2e6>
          }
        }
      }
    }
    __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 800506c:	687b      	ldr	r3, [r7, #4]
 800506e:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8005070:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8005074:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 8005078:	d10d      	bne.n	8005096 <HAL_RCCEx_PeriphCLKConfig+0x332>
 800507a:	4b17      	ldr	r3, [pc, #92]	@ (80050d8 <HAL_RCCEx_PeriphCLKConfig+0x374>)
 800507c:	689b      	ldr	r3, [r3, #8]
 800507e:	f423 12f8 	bic.w	r2, r3, #2031616	@ 0x1f0000
 8005082:	687b      	ldr	r3, [r7, #4]
 8005084:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8005086:	f023 4370 	bic.w	r3, r3, #4026531840	@ 0xf0000000
 800508a:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 800508e:	4912      	ldr	r1, [pc, #72]	@ (80050d8 <HAL_RCCEx_PeriphCLKConfig+0x374>)
 8005090:	4313      	orrs	r3, r2
 8005092:	608b      	str	r3, [r1, #8]
 8005094:	e005      	b.n	80050a2 <HAL_RCCEx_PeriphCLKConfig+0x33e>
 8005096:	4b10      	ldr	r3, [pc, #64]	@ (80050d8 <HAL_RCCEx_PeriphCLKConfig+0x374>)
 8005098:	689b      	ldr	r3, [r3, #8]
 800509a:	4a0f      	ldr	r2, [pc, #60]	@ (80050d8 <HAL_RCCEx_PeriphCLKConfig+0x374>)
 800509c:	f423 13f8 	bic.w	r3, r3, #2031616	@ 0x1f0000
 80050a0:	6093      	str	r3, [r2, #8]
 80050a2:	4b0d      	ldr	r3, [pc, #52]	@ (80050d8 <HAL_RCCEx_PeriphCLKConfig+0x374>)
 80050a4:	6f1a      	ldr	r2, [r3, #112]	@ 0x70
 80050a6:	687b      	ldr	r3, [r7, #4]
 80050a8:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80050aa:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80050ae:	490a      	ldr	r1, [pc, #40]	@ (80050d8 <HAL_RCCEx_PeriphCLKConfig+0x374>)
 80050b0:	4313      	orrs	r3, r2
 80050b2:	670b      	str	r3, [r1, #112]	@ 0x70
  }
  /*--------------------------------------------------------------------------*/

  /*---------------------------- TIM configuration ---------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM) == (RCC_PERIPHCLK_TIM))
 80050b4:	687b      	ldr	r3, [r7, #4]
 80050b6:	681b      	ldr	r3, [r3, #0]
 80050b8:	f003 0310 	and.w	r3, r3, #16
 80050bc:	2b00      	cmp	r3, #0
 80050be:	d004      	beq.n	80050ca <HAL_RCCEx_PeriphCLKConfig+0x366>
  {
    __HAL_RCC_TIMCLKPRESCALER(PeriphClkInit->TIMPresSelection);
 80050c0:	687b      	ldr	r3, [r7, #4]
 80050c2:	f893 202c 	ldrb.w	r2, [r3, #44]	@ 0x2c
 80050c6:	4b06      	ldr	r3, [pc, #24]	@ (80050e0 <HAL_RCCEx_PeriphCLKConfig+0x37c>)
 80050c8:	601a      	str	r2, [r3, #0]
  }
  return HAL_OK;
 80050ca:	2300      	movs	r3, #0
}
 80050cc:	4618      	mov	r0, r3
 80050ce:	3718      	adds	r7, #24
 80050d0:	46bd      	mov	sp, r7
 80050d2:	bd80      	pop	{r7, pc}
 80050d4:	40007000 	.word	0x40007000
 80050d8:	40023800 	.word	0x40023800
 80050dc:	42470e40 	.word	0x42470e40
 80050e0:	424711e0 	.word	0x424711e0

080050e4 <HAL_RNG_Init>:
  * @param  hrng pointer to a RNG_HandleTypeDef structure that contains
  *                the configuration information for RNG.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RNG_Init(RNG_HandleTypeDef *hrng)
{
 80050e4:	b580      	push	{r7, lr}
 80050e6:	b082      	sub	sp, #8
 80050e8:	af00      	add	r7, sp, #0
 80050ea:	6078      	str	r0, [r7, #4]
  /* Check the RNG handle allocation */
  if (hrng == NULL)
 80050ec:	687b      	ldr	r3, [r7, #4]
 80050ee:	2b00      	cmp	r3, #0
 80050f0:	d101      	bne.n	80050f6 <HAL_RNG_Init+0x12>
  {
    return HAL_ERROR;
 80050f2:	2301      	movs	r3, #1
 80050f4:	e01c      	b.n	8005130 <HAL_RNG_Init+0x4c>

    /* Init the low level hardware */
    hrng->MspInitCallback(hrng);
  }
#else
  if (hrng->State == HAL_RNG_STATE_RESET)
 80050f6:	687b      	ldr	r3, [r7, #4]
 80050f8:	795b      	ldrb	r3, [r3, #5]
 80050fa:	b2db      	uxtb	r3, r3
 80050fc:	2b00      	cmp	r3, #0
 80050fe:	d105      	bne.n	800510c <HAL_RNG_Init+0x28>
  {
    /* Allocate lock resource and initialize it */
    hrng->Lock = HAL_UNLOCKED;
 8005100:	687b      	ldr	r3, [r7, #4]
 8005102:	2200      	movs	r2, #0
 8005104:	711a      	strb	r2, [r3, #4]

    /* Init the low level hardware */
    HAL_RNG_MspInit(hrng);
 8005106:	6878      	ldr	r0, [r7, #4]
 8005108:	f7fc ff14 	bl	8001f34 <HAL_RNG_MspInit>
  }
#endif /* USE_HAL_RNG_REGISTER_CALLBACKS */

  /* Change RNG peripheral state */
  hrng->State = HAL_RNG_STATE_BUSY;
 800510c:	687b      	ldr	r3, [r7, #4]
 800510e:	2202      	movs	r2, #2
 8005110:	715a      	strb	r2, [r3, #5]


  /* Enable the RNG Peripheral */
  __HAL_RNG_ENABLE(hrng);
 8005112:	687b      	ldr	r3, [r7, #4]
 8005114:	681b      	ldr	r3, [r3, #0]
 8005116:	681a      	ldr	r2, [r3, #0]
 8005118:	687b      	ldr	r3, [r7, #4]
 800511a:	681b      	ldr	r3, [r3, #0]
 800511c:	f042 0204 	orr.w	r2, r2, #4
 8005120:	601a      	str	r2, [r3, #0]

  /* Initialize the RNG state */
  hrng->State = HAL_RNG_STATE_READY;
 8005122:	687b      	ldr	r3, [r7, #4]
 8005124:	2201      	movs	r2, #1
 8005126:	715a      	strb	r2, [r3, #5]

  /* Initialise the error code */
  hrng->ErrorCode = HAL_RNG_ERROR_NONE;
 8005128:	687b      	ldr	r3, [r7, #4]
 800512a:	2200      	movs	r2, #0
 800512c:	609a      	str	r2, [r3, #8]

  /* Return function status */
  return HAL_OK;
 800512e:	2300      	movs	r3, #0
}
 8005130:	4618      	mov	r0, r3
 8005132:	3708      	adds	r7, #8
 8005134:	46bd      	mov	sp, r7
 8005136:	bd80      	pop	{r7, pc}

08005138 <HAL_RNG_GenerateRandomNumber>:
  * @param  random32bit pointer to generated random number variable if successful.
  * @retval HAL status
  */

HAL_StatusTypeDef HAL_RNG_GenerateRandomNumber(RNG_HandleTypeDef *hrng, uint32_t *random32bit)
{
 8005138:	b580      	push	{r7, lr}
 800513a:	b084      	sub	sp, #16
 800513c:	af00      	add	r7, sp, #0
 800513e:	6078      	str	r0, [r7, #4]
 8005140:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 8005142:	2300      	movs	r3, #0
 8005144:	73fb      	strb	r3, [r7, #15]

  /* Process Locked */
  __HAL_LOCK(hrng);
 8005146:	687b      	ldr	r3, [r7, #4]
 8005148:	791b      	ldrb	r3, [r3, #4]
 800514a:	2b01      	cmp	r3, #1
 800514c:	d101      	bne.n	8005152 <HAL_RNG_GenerateRandomNumber+0x1a>
 800514e:	2302      	movs	r3, #2
 8005150:	e044      	b.n	80051dc <HAL_RNG_GenerateRandomNumber+0xa4>
 8005152:	687b      	ldr	r3, [r7, #4]
 8005154:	2201      	movs	r2, #1
 8005156:	711a      	strb	r2, [r3, #4]

  /* Check RNG peripheral state */
  if (hrng->State == HAL_RNG_STATE_READY)
 8005158:	687b      	ldr	r3, [r7, #4]
 800515a:	795b      	ldrb	r3, [r3, #5]
 800515c:	b2db      	uxtb	r3, r3
 800515e:	2b01      	cmp	r3, #1
 8005160:	d133      	bne.n	80051ca <HAL_RNG_GenerateRandomNumber+0x92>
  {
    /* Change RNG peripheral state */
    hrng->State = HAL_RNG_STATE_BUSY;
 8005162:	687b      	ldr	r3, [r7, #4]
 8005164:	2202      	movs	r2, #2
 8005166:	715a      	strb	r2, [r3, #5]

    /* Get tick */
    tickstart = HAL_GetTick();
 8005168:	f7fd fa4a 	bl	8002600 <HAL_GetTick>
 800516c:	60b8      	str	r0, [r7, #8]

    /* Check if data register contains valid random data */
    while (__HAL_RNG_GET_FLAG(hrng, RNG_FLAG_DRDY) == RESET)
 800516e:	e018      	b.n	80051a2 <HAL_RNG_GenerateRandomNumber+0x6a>
    {
      if ((HAL_GetTick() - tickstart) > RNG_TIMEOUT_VALUE)
 8005170:	f7fd fa46 	bl	8002600 <HAL_GetTick>
 8005174:	4602      	mov	r2, r0
 8005176:	68bb      	ldr	r3, [r7, #8]
 8005178:	1ad3      	subs	r3, r2, r3
 800517a:	2b02      	cmp	r3, #2
 800517c:	d911      	bls.n	80051a2 <HAL_RNG_GenerateRandomNumber+0x6a>
      {
        /* New check to avoid false timeout detection in case of preemption */
        if (__HAL_RNG_GET_FLAG(hrng, RNG_FLAG_DRDY) == RESET)
 800517e:	687b      	ldr	r3, [r7, #4]
 8005180:	681b      	ldr	r3, [r3, #0]
 8005182:	685b      	ldr	r3, [r3, #4]
 8005184:	f003 0301 	and.w	r3, r3, #1
 8005188:	2b01      	cmp	r3, #1
 800518a:	d00a      	beq.n	80051a2 <HAL_RNG_GenerateRandomNumber+0x6a>
        {
          hrng->State = HAL_RNG_STATE_READY;
 800518c:	687b      	ldr	r3, [r7, #4]
 800518e:	2201      	movs	r2, #1
 8005190:	715a      	strb	r2, [r3, #5]
          hrng->ErrorCode = HAL_RNG_ERROR_TIMEOUT;
 8005192:	687b      	ldr	r3, [r7, #4]
 8005194:	2202      	movs	r2, #2
 8005196:	609a      	str	r2, [r3, #8]
          /* Process Unlocked */
          __HAL_UNLOCK(hrng);
 8005198:	687b      	ldr	r3, [r7, #4]
 800519a:	2200      	movs	r2, #0
 800519c:	711a      	strb	r2, [r3, #4]
          return HAL_ERROR;
 800519e:	2301      	movs	r3, #1
 80051a0:	e01c      	b.n	80051dc <HAL_RNG_GenerateRandomNumber+0xa4>
    while (__HAL_RNG_GET_FLAG(hrng, RNG_FLAG_DRDY) == RESET)
 80051a2:	687b      	ldr	r3, [r7, #4]
 80051a4:	681b      	ldr	r3, [r3, #0]
 80051a6:	685b      	ldr	r3, [r3, #4]
 80051a8:	f003 0301 	and.w	r3, r3, #1
 80051ac:	2b01      	cmp	r3, #1
 80051ae:	d1df      	bne.n	8005170 <HAL_RNG_GenerateRandomNumber+0x38>
        }
      }
    }

    /* Get a 32bit Random number */
    hrng->RandomNumber = hrng->Instance->DR;
 80051b0:	687b      	ldr	r3, [r7, #4]
 80051b2:	681b      	ldr	r3, [r3, #0]
 80051b4:	689a      	ldr	r2, [r3, #8]
 80051b6:	687b      	ldr	r3, [r7, #4]
 80051b8:	60da      	str	r2, [r3, #12]
    *random32bit = hrng->RandomNumber;
 80051ba:	687b      	ldr	r3, [r7, #4]
 80051bc:	68da      	ldr	r2, [r3, #12]
 80051be:	683b      	ldr	r3, [r7, #0]
 80051c0:	601a      	str	r2, [r3, #0]

    hrng->State = HAL_RNG_STATE_READY;
 80051c2:	687b      	ldr	r3, [r7, #4]
 80051c4:	2201      	movs	r2, #1
 80051c6:	715a      	strb	r2, [r3, #5]
 80051c8:	e004      	b.n	80051d4 <HAL_RNG_GenerateRandomNumber+0x9c>
  }
  else
  {
    hrng->ErrorCode = HAL_RNG_ERROR_BUSY;
 80051ca:	687b      	ldr	r3, [r7, #4]
 80051cc:	2204      	movs	r2, #4
 80051ce:	609a      	str	r2, [r3, #8]
    status = HAL_ERROR;
 80051d0:	2301      	movs	r3, #1
 80051d2:	73fb      	strb	r3, [r7, #15]
  }

  /* Process Unlocked */
  __HAL_UNLOCK(hrng);
 80051d4:	687b      	ldr	r3, [r7, #4]
 80051d6:	2200      	movs	r2, #0
 80051d8:	711a      	strb	r2, [r3, #4]

  return status;
 80051da:	7bfb      	ldrb	r3, [r7, #15]
}
 80051dc:	4618      	mov	r0, r3
 80051de:	3710      	adds	r7, #16
 80051e0:	46bd      	mov	sp, r7
 80051e2:	bd80      	pop	{r7, pc}

080051e4 <HAL_RNG_GetRandomNumber>:
  * @param  hrng pointer to a RNG_HandleTypeDef structure that contains
  *                the configuration information for RNG.
  * @retval Random value
  */
uint32_t HAL_RNG_GetRandomNumber(RNG_HandleTypeDef *hrng)
{
 80051e4:	b580      	push	{r7, lr}
 80051e6:	b082      	sub	sp, #8
 80051e8:	af00      	add	r7, sp, #0
 80051ea:	6078      	str	r0, [r7, #4]
  if (HAL_RNG_GenerateRandomNumber(hrng, &(hrng->RandomNumber)) == HAL_OK)
 80051ec:	687b      	ldr	r3, [r7, #4]
 80051ee:	330c      	adds	r3, #12
 80051f0:	4619      	mov	r1, r3
 80051f2:	6878      	ldr	r0, [r7, #4]
 80051f4:	f7ff ffa0 	bl	8005138 <HAL_RNG_GenerateRandomNumber>
 80051f8:	4603      	mov	r3, r0
 80051fa:	2b00      	cmp	r3, #0
 80051fc:	d102      	bne.n	8005204 <HAL_RNG_GetRandomNumber+0x20>
  {
    return hrng->RandomNumber;
 80051fe:	687b      	ldr	r3, [r7, #4]
 8005200:	68db      	ldr	r3, [r3, #12]
 8005202:	e000      	b.n	8005206 <HAL_RNG_GetRandomNumber+0x22>
  }
  else
  {
    return 0U;
 8005204:	2300      	movs	r3, #0
  }
}
 8005206:	4618      	mov	r0, r3
 8005208:	3708      	adds	r7, #8
 800520a:	46bd      	mov	sp, r7
 800520c:	bd80      	pop	{r7, pc}

0800520e <HAL_SPI_Init>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi)
{
 800520e:	b580      	push	{r7, lr}
 8005210:	b082      	sub	sp, #8
 8005212:	af00      	add	r7, sp, #0
 8005214:	6078      	str	r0, [r7, #4]
  /* Check the SPI handle allocation */
  if (hspi == NULL)
 8005216:	687b      	ldr	r3, [r7, #4]
 8005218:	2b00      	cmp	r3, #0
 800521a:	d101      	bne.n	8005220 <HAL_SPI_Init+0x12>
  {
    return HAL_ERROR;
 800521c:	2301      	movs	r3, #1
 800521e:	e07b      	b.n	8005318 <HAL_SPI_Init+0x10a>
  assert_param(IS_SPI_DATASIZE(hspi->Init.DataSize));
  assert_param(IS_SPI_NSS(hspi->Init.NSS));
  assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
  assert_param(IS_SPI_FIRST_BIT(hspi->Init.FirstBit));
  assert_param(IS_SPI_TIMODE(hspi->Init.TIMode));
  if (hspi->Init.TIMode == SPI_TIMODE_DISABLE)
 8005220:	687b      	ldr	r3, [r7, #4]
 8005222:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8005224:	2b00      	cmp	r3, #0
 8005226:	d108      	bne.n	800523a <HAL_SPI_Init+0x2c>
  {
    assert_param(IS_SPI_CPOL(hspi->Init.CLKPolarity));
    assert_param(IS_SPI_CPHA(hspi->Init.CLKPhase));

    if (hspi->Init.Mode == SPI_MODE_MASTER)
 8005228:	687b      	ldr	r3, [r7, #4]
 800522a:	685b      	ldr	r3, [r3, #4]
 800522c:	f5b3 7f82 	cmp.w	r3, #260	@ 0x104
 8005230:	d009      	beq.n	8005246 <HAL_SPI_Init+0x38>
      assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
    }
    else
    {
      /* Baudrate prescaler not use in Motoraola Slave mode. force to default value */
      hspi->Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 8005232:	687b      	ldr	r3, [r7, #4]
 8005234:	2200      	movs	r2, #0
 8005236:	61da      	str	r2, [r3, #28]
 8005238:	e005      	b.n	8005246 <HAL_SPI_Init+0x38>
  else
  {
    assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));

    /* Force polarity and phase to TI protocaol requirements */
    hspi->Init.CLKPolarity = SPI_POLARITY_LOW;
 800523a:	687b      	ldr	r3, [r7, #4]
 800523c:	2200      	movs	r2, #0
 800523e:	611a      	str	r2, [r3, #16]
    hspi->Init.CLKPhase    = SPI_PHASE_1EDGE;
 8005240:	687b      	ldr	r3, [r7, #4]
 8005242:	2200      	movs	r2, #0
 8005244:	615a      	str	r2, [r3, #20]
  if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
  {
    assert_param(IS_SPI_CRC_POLYNOMIAL(hspi->Init.CRCPolynomial));
  }
#else
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8005246:	687b      	ldr	r3, [r7, #4]
 8005248:	2200      	movs	r2, #0
 800524a:	629a      	str	r2, [r3, #40]	@ 0x28
#endif /* USE_SPI_CRC */

  if (hspi->State == HAL_SPI_STATE_RESET)
 800524c:	687b      	ldr	r3, [r7, #4]
 800524e:	f893 3051 	ldrb.w	r3, [r3, #81]	@ 0x51
 8005252:	b2db      	uxtb	r3, r3
 8005254:	2b00      	cmp	r3, #0
 8005256:	d106      	bne.n	8005266 <HAL_SPI_Init+0x58>
  {
    /* Allocate lock resource and initialize it */
    hspi->Lock = HAL_UNLOCKED;
 8005258:	687b      	ldr	r3, [r7, #4]
 800525a:	2200      	movs	r2, #0
 800525c:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hspi->MspInitCallback(hspi);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SPI_MspInit(hspi);
 8005260:	6878      	ldr	r0, [r7, #4]
 8005262:	f7fc fe89 	bl	8001f78 <HAL_SPI_MspInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }

  hspi->State = HAL_SPI_STATE_BUSY;
 8005266:	687b      	ldr	r3, [r7, #4]
 8005268:	2202      	movs	r2, #2
 800526a:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51

  /* Disable the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 800526e:	687b      	ldr	r3, [r7, #4]
 8005270:	681b      	ldr	r3, [r3, #0]
 8005272:	681a      	ldr	r2, [r3, #0]
 8005274:	687b      	ldr	r3, [r7, #4]
 8005276:	681b      	ldr	r3, [r3, #0]
 8005278:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 800527c:	601a      	str	r2, [r3, #0]

  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Data size, Clock polarity and phase, NSS management,
  Communication speed, First bit and CRC calculation state */
  WRITE_REG(hspi->Instance->CR1, ((hspi->Init.Mode & (SPI_CR1_MSTR | SPI_CR1_SSI)) |
 800527e:	687b      	ldr	r3, [r7, #4]
 8005280:	685b      	ldr	r3, [r3, #4]
 8005282:	f403 7282 	and.w	r2, r3, #260	@ 0x104
 8005286:	687b      	ldr	r3, [r7, #4]
 8005288:	689b      	ldr	r3, [r3, #8]
 800528a:	f403 4304 	and.w	r3, r3, #33792	@ 0x8400
 800528e:	431a      	orrs	r2, r3
 8005290:	687b      	ldr	r3, [r7, #4]
 8005292:	68db      	ldr	r3, [r3, #12]
 8005294:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 8005298:	431a      	orrs	r2, r3
 800529a:	687b      	ldr	r3, [r7, #4]
 800529c:	691b      	ldr	r3, [r3, #16]
 800529e:	f003 0302 	and.w	r3, r3, #2
 80052a2:	431a      	orrs	r2, r3
 80052a4:	687b      	ldr	r3, [r7, #4]
 80052a6:	695b      	ldr	r3, [r3, #20]
 80052a8:	f003 0301 	and.w	r3, r3, #1
 80052ac:	431a      	orrs	r2, r3
 80052ae:	687b      	ldr	r3, [r7, #4]
 80052b0:	699b      	ldr	r3, [r3, #24]
 80052b2:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 80052b6:	431a      	orrs	r2, r3
 80052b8:	687b      	ldr	r3, [r7, #4]
 80052ba:	69db      	ldr	r3, [r3, #28]
 80052bc:	f003 0338 	and.w	r3, r3, #56	@ 0x38
 80052c0:	431a      	orrs	r2, r3
 80052c2:	687b      	ldr	r3, [r7, #4]
 80052c4:	6a1b      	ldr	r3, [r3, #32]
 80052c6:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 80052ca:	ea42 0103 	orr.w	r1, r2, r3
 80052ce:	687b      	ldr	r3, [r7, #4]
 80052d0:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80052d2:	f403 5200 	and.w	r2, r3, #8192	@ 0x2000
 80052d6:	687b      	ldr	r3, [r7, #4]
 80052d8:	681b      	ldr	r3, [r3, #0]
 80052da:	430a      	orrs	r2, r1
 80052dc:	601a      	str	r2, [r3, #0]
                                  (hspi->Init.BaudRatePrescaler & SPI_CR1_BR_Msk) |
                                  (hspi->Init.FirstBit  & SPI_CR1_LSBFIRST) |
                                  (hspi->Init.CRCCalculation & SPI_CR1_CRCEN)));

  /* Configure : NSS management, TI Mode */
  WRITE_REG(hspi->Instance->CR2, (((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE) | (hspi->Init.TIMode & SPI_CR2_FRF)));
 80052de:	687b      	ldr	r3, [r7, #4]
 80052e0:	699b      	ldr	r3, [r3, #24]
 80052e2:	0c1b      	lsrs	r3, r3, #16
 80052e4:	f003 0104 	and.w	r1, r3, #4
 80052e8:	687b      	ldr	r3, [r7, #4]
 80052ea:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80052ec:	f003 0210 	and.w	r2, r3, #16
 80052f0:	687b      	ldr	r3, [r7, #4]
 80052f2:	681b      	ldr	r3, [r3, #0]
 80052f4:	430a      	orrs	r2, r1
 80052f6:	605a      	str	r2, [r3, #4]
  }
#endif /* USE_SPI_CRC */

#if defined(SPI_I2SCFGR_I2SMOD)
  /* Activate the SPI mode (Make sure that I2SMOD bit in I2SCFGR register is reset) */
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
 80052f8:	687b      	ldr	r3, [r7, #4]
 80052fa:	681b      	ldr	r3, [r3, #0]
 80052fc:	69da      	ldr	r2, [r3, #28]
 80052fe:	687b      	ldr	r3, [r7, #4]
 8005300:	681b      	ldr	r3, [r3, #0]
 8005302:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 8005306:	61da      	str	r2, [r3, #28]
#endif /* SPI_I2SCFGR_I2SMOD */

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 8005308:	687b      	ldr	r3, [r7, #4]
 800530a:	2200      	movs	r2, #0
 800530c:	655a      	str	r2, [r3, #84]	@ 0x54
  hspi->State     = HAL_SPI_STATE_READY;
 800530e:	687b      	ldr	r3, [r7, #4]
 8005310:	2201      	movs	r2, #1
 8005312:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51

  return HAL_OK;
 8005316:	2300      	movs	r3, #0
}
 8005318:	4618      	mov	r0, r3
 800531a:	3708      	adds	r7, #8
 800531c:	46bd      	mov	sp, r7
 800531e:	bd80      	pop	{r7, pc}

08005320 <HAL_SPI_DeInit>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_DeInit(SPI_HandleTypeDef *hspi)
{
 8005320:	b580      	push	{r7, lr}
 8005322:	b082      	sub	sp, #8
 8005324:	af00      	add	r7, sp, #0
 8005326:	6078      	str	r0, [r7, #4]
  /* Check the SPI handle allocation */
  if (hspi == NULL)
 8005328:	687b      	ldr	r3, [r7, #4]
 800532a:	2b00      	cmp	r3, #0
 800532c:	d101      	bne.n	8005332 <HAL_SPI_DeInit+0x12>
  {
    return HAL_ERROR;
 800532e:	2301      	movs	r3, #1
 8005330:	e01a      	b.n	8005368 <HAL_SPI_DeInit+0x48>
  }

  /* Check SPI Instance parameter */
  assert_param(IS_SPI_ALL_INSTANCE(hspi->Instance));

  hspi->State = HAL_SPI_STATE_BUSY;
 8005332:	687b      	ldr	r3, [r7, #4]
 8005334:	2202      	movs	r2, #2
 8005336:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51

  /* Disable the SPI Peripheral Clock */
  __HAL_SPI_DISABLE(hspi);
 800533a:	687b      	ldr	r3, [r7, #4]
 800533c:	681b      	ldr	r3, [r3, #0]
 800533e:	681a      	ldr	r2, [r3, #0]
 8005340:	687b      	ldr	r3, [r7, #4]
 8005342:	681b      	ldr	r3, [r3, #0]
 8005344:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 8005348:	601a      	str	r2, [r3, #0]

  /* DeInit the low level hardware: GPIO, CLOCK, NVIC... */
  hspi->MspDeInitCallback(hspi);
#else
  /* DeInit the low level hardware: GPIO, CLOCK, NVIC... */
  HAL_SPI_MspDeInit(hspi);
 800534a:	6878      	ldr	r0, [r7, #4]
 800534c:	f7fc fe5c 	bl	8002008 <HAL_SPI_MspDeInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 8005350:	687b      	ldr	r3, [r7, #4]
 8005352:	2200      	movs	r2, #0
 8005354:	655a      	str	r2, [r3, #84]	@ 0x54
  hspi->State = HAL_SPI_STATE_RESET;
 8005356:	687b      	ldr	r3, [r7, #4]
 8005358:	2200      	movs	r2, #0
 800535a:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51

  /* Release Lock */
  __HAL_UNLOCK(hspi);
 800535e:	687b      	ldr	r3, [r7, #4]
 8005360:	2200      	movs	r2, #0
 8005362:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50

  return HAL_OK;
 8005366:	2300      	movs	r3, #0
}
 8005368:	4618      	mov	r0, r3
 800536a:	3708      	adds	r7, #8
 800536c:	46bd      	mov	sp, r7
 800536e:	bd80      	pop	{r7, pc}

08005370 <HAL_SPI_Transmit>:
  * @param  Size amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Transmit(SPI_HandleTypeDef *hspi, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8005370:	b580      	push	{r7, lr}
 8005372:	b088      	sub	sp, #32
 8005374:	af00      	add	r7, sp, #0
 8005376:	60f8      	str	r0, [r7, #12]
 8005378:	60b9      	str	r1, [r7, #8]
 800537a:	603b      	str	r3, [r7, #0]
 800537c:	4613      	mov	r3, r2
 800537e:	80fb      	strh	r3, [r7, #6]

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES_OR_1LINE(hspi->Init.Direction));

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 8005380:	f7fd f93e 	bl	8002600 <HAL_GetTick>
 8005384:	61f8      	str	r0, [r7, #28]
  initial_TxXferCount = Size;
 8005386:	88fb      	ldrh	r3, [r7, #6]
 8005388:	837b      	strh	r3, [r7, #26]

  if (hspi->State != HAL_SPI_STATE_READY)
 800538a:	68fb      	ldr	r3, [r7, #12]
 800538c:	f893 3051 	ldrb.w	r3, [r3, #81]	@ 0x51
 8005390:	b2db      	uxtb	r3, r3
 8005392:	2b01      	cmp	r3, #1
 8005394:	d001      	beq.n	800539a <HAL_SPI_Transmit+0x2a>
  {
    return HAL_BUSY;
 8005396:	2302      	movs	r3, #2
 8005398:	e12a      	b.n	80055f0 <HAL_SPI_Transmit+0x280>
  }

  if ((pData == NULL) || (Size == 0U))
 800539a:	68bb      	ldr	r3, [r7, #8]
 800539c:	2b00      	cmp	r3, #0
 800539e:	d002      	beq.n	80053a6 <HAL_SPI_Transmit+0x36>
 80053a0:	88fb      	ldrh	r3, [r7, #6]
 80053a2:	2b00      	cmp	r3, #0
 80053a4:	d101      	bne.n	80053aa <HAL_SPI_Transmit+0x3a>
  {
    return HAL_ERROR;
 80053a6:	2301      	movs	r3, #1
 80053a8:	e122      	b.n	80055f0 <HAL_SPI_Transmit+0x280>
  }

  /* Process Locked */
  __HAL_LOCK(hspi);
 80053aa:	68fb      	ldr	r3, [r7, #12]
 80053ac:	f893 3050 	ldrb.w	r3, [r3, #80]	@ 0x50
 80053b0:	2b01      	cmp	r3, #1
 80053b2:	d101      	bne.n	80053b8 <HAL_SPI_Transmit+0x48>
 80053b4:	2302      	movs	r3, #2
 80053b6:	e11b      	b.n	80055f0 <HAL_SPI_Transmit+0x280>
 80053b8:	68fb      	ldr	r3, [r7, #12]
 80053ba:	2201      	movs	r2, #1
 80053bc:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50

  /* Set the transaction information */
  hspi->State       = HAL_SPI_STATE_BUSY_TX;
 80053c0:	68fb      	ldr	r3, [r7, #12]
 80053c2:	2203      	movs	r2, #3
 80053c4:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 80053c8:	68fb      	ldr	r3, [r7, #12]
 80053ca:	2200      	movs	r2, #0
 80053cc:	655a      	str	r2, [r3, #84]	@ 0x54
  hspi->pTxBuffPtr  = (const uint8_t *)pData;
 80053ce:	68fb      	ldr	r3, [r7, #12]
 80053d0:	68ba      	ldr	r2, [r7, #8]
 80053d2:	631a      	str	r2, [r3, #48]	@ 0x30
  hspi->TxXferSize  = Size;
 80053d4:	68fb      	ldr	r3, [r7, #12]
 80053d6:	88fa      	ldrh	r2, [r7, #6]
 80053d8:	869a      	strh	r2, [r3, #52]	@ 0x34
  hspi->TxXferCount = Size;
 80053da:	68fb      	ldr	r3, [r7, #12]
 80053dc:	88fa      	ldrh	r2, [r7, #6]
 80053de:	86da      	strh	r2, [r3, #54]	@ 0x36

  /*Init field not used in handle to zero */
  hspi->pRxBuffPtr  = (uint8_t *)NULL;
 80053e0:	68fb      	ldr	r3, [r7, #12]
 80053e2:	2200      	movs	r2, #0
 80053e4:	639a      	str	r2, [r3, #56]	@ 0x38
  hspi->RxXferSize  = 0U;
 80053e6:	68fb      	ldr	r3, [r7, #12]
 80053e8:	2200      	movs	r2, #0
 80053ea:	879a      	strh	r2, [r3, #60]	@ 0x3c
  hspi->RxXferCount = 0U;
 80053ec:	68fb      	ldr	r3, [r7, #12]
 80053ee:	2200      	movs	r2, #0
 80053f0:	87da      	strh	r2, [r3, #62]	@ 0x3e
  hspi->TxISR       = NULL;
 80053f2:	68fb      	ldr	r3, [r7, #12]
 80053f4:	2200      	movs	r2, #0
 80053f6:	645a      	str	r2, [r3, #68]	@ 0x44
  hspi->RxISR       = NULL;
 80053f8:	68fb      	ldr	r3, [r7, #12]
 80053fa:	2200      	movs	r2, #0
 80053fc:	641a      	str	r2, [r3, #64]	@ 0x40

  /* Configure communication direction : 1Line */
  if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
 80053fe:	68fb      	ldr	r3, [r7, #12]
 8005400:	689b      	ldr	r3, [r3, #8]
 8005402:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 8005406:	d10f      	bne.n	8005428 <HAL_SPI_Transmit+0xb8>
  {
    /* Disable SPI Peripheral before set 1Line direction (BIDIOE bit) */
    __HAL_SPI_DISABLE(hspi);
 8005408:	68fb      	ldr	r3, [r7, #12]
 800540a:	681b      	ldr	r3, [r3, #0]
 800540c:	681a      	ldr	r2, [r3, #0]
 800540e:	68fb      	ldr	r3, [r7, #12]
 8005410:	681b      	ldr	r3, [r3, #0]
 8005412:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 8005416:	601a      	str	r2, [r3, #0]
    SPI_1LINE_TX(hspi);
 8005418:	68fb      	ldr	r3, [r7, #12]
 800541a:	681b      	ldr	r3, [r3, #0]
 800541c:	681a      	ldr	r2, [r3, #0]
 800541e:	68fb      	ldr	r3, [r7, #12]
 8005420:	681b      	ldr	r3, [r3, #0]
 8005422:	f442 4280 	orr.w	r2, r2, #16384	@ 0x4000
 8005426:	601a      	str	r2, [r3, #0]
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 8005428:	68fb      	ldr	r3, [r7, #12]
 800542a:	681b      	ldr	r3, [r3, #0]
 800542c:	681b      	ldr	r3, [r3, #0]
 800542e:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8005432:	2b40      	cmp	r3, #64	@ 0x40
 8005434:	d007      	beq.n	8005446 <HAL_SPI_Transmit+0xd6>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 8005436:	68fb      	ldr	r3, [r7, #12]
 8005438:	681b      	ldr	r3, [r3, #0]
 800543a:	681a      	ldr	r2, [r3, #0]
 800543c:	68fb      	ldr	r3, [r7, #12]
 800543e:	681b      	ldr	r3, [r3, #0]
 8005440:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 8005444:	601a      	str	r2, [r3, #0]
  }

  /* Transmit data in 16 Bit mode */
  if (hspi->Init.DataSize == SPI_DATASIZE_16BIT)
 8005446:	68fb      	ldr	r3, [r7, #12]
 8005448:	68db      	ldr	r3, [r3, #12]
 800544a:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 800544e:	d152      	bne.n	80054f6 <HAL_SPI_Transmit+0x186>
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8005450:	68fb      	ldr	r3, [r7, #12]
 8005452:	685b      	ldr	r3, [r3, #4]
 8005454:	2b00      	cmp	r3, #0
 8005456:	d002      	beq.n	800545e <HAL_SPI_Transmit+0xee>
 8005458:	8b7b      	ldrh	r3, [r7, #26]
 800545a:	2b01      	cmp	r3, #1
 800545c:	d145      	bne.n	80054ea <HAL_SPI_Transmit+0x17a>
    {
      hspi->Instance->DR = *((const uint16_t *)hspi->pTxBuffPtr);
 800545e:	68fb      	ldr	r3, [r7, #12]
 8005460:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8005462:	881a      	ldrh	r2, [r3, #0]
 8005464:	68fb      	ldr	r3, [r7, #12]
 8005466:	681b      	ldr	r3, [r3, #0]
 8005468:	60da      	str	r2, [r3, #12]
      hspi->pTxBuffPtr += sizeof(uint16_t);
 800546a:	68fb      	ldr	r3, [r7, #12]
 800546c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800546e:	1c9a      	adds	r2, r3, #2
 8005470:	68fb      	ldr	r3, [r7, #12]
 8005472:	631a      	str	r2, [r3, #48]	@ 0x30
      hspi->TxXferCount--;
 8005474:	68fb      	ldr	r3, [r7, #12]
 8005476:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 8005478:	b29b      	uxth	r3, r3
 800547a:	3b01      	subs	r3, #1
 800547c:	b29a      	uxth	r2, r3
 800547e:	68fb      	ldr	r3, [r7, #12]
 8005480:	86da      	strh	r2, [r3, #54]	@ 0x36
    }
    /* Transmit data in 16 Bit mode */
    while (hspi->TxXferCount > 0U)
 8005482:	e032      	b.n	80054ea <HAL_SPI_Transmit+0x17a>
    {
      /* Wait until TXE flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 8005484:	68fb      	ldr	r3, [r7, #12]
 8005486:	681b      	ldr	r3, [r3, #0]
 8005488:	689b      	ldr	r3, [r3, #8]
 800548a:	f003 0302 	and.w	r3, r3, #2
 800548e:	2b02      	cmp	r3, #2
 8005490:	d112      	bne.n	80054b8 <HAL_SPI_Transmit+0x148>
      {
        hspi->Instance->DR = *((const uint16_t *)hspi->pTxBuffPtr);
 8005492:	68fb      	ldr	r3, [r7, #12]
 8005494:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8005496:	881a      	ldrh	r2, [r3, #0]
 8005498:	68fb      	ldr	r3, [r7, #12]
 800549a:	681b      	ldr	r3, [r3, #0]
 800549c:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 800549e:	68fb      	ldr	r3, [r7, #12]
 80054a0:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80054a2:	1c9a      	adds	r2, r3, #2
 80054a4:	68fb      	ldr	r3, [r7, #12]
 80054a6:	631a      	str	r2, [r3, #48]	@ 0x30
        hspi->TxXferCount--;
 80054a8:	68fb      	ldr	r3, [r7, #12]
 80054aa:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 80054ac:	b29b      	uxth	r3, r3
 80054ae:	3b01      	subs	r3, #1
 80054b0:	b29a      	uxth	r2, r3
 80054b2:	68fb      	ldr	r3, [r7, #12]
 80054b4:	86da      	strh	r2, [r3, #54]	@ 0x36
 80054b6:	e018      	b.n	80054ea <HAL_SPI_Transmit+0x17a>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 80054b8:	f7fd f8a2 	bl	8002600 <HAL_GetTick>
 80054bc:	4602      	mov	r2, r0
 80054be:	69fb      	ldr	r3, [r7, #28]
 80054c0:	1ad3      	subs	r3, r2, r3
 80054c2:	683a      	ldr	r2, [r7, #0]
 80054c4:	429a      	cmp	r2, r3
 80054c6:	d803      	bhi.n	80054d0 <HAL_SPI_Transmit+0x160>
 80054c8:	683b      	ldr	r3, [r7, #0]
 80054ca:	f1b3 3fff 	cmp.w	r3, #4294967295
 80054ce:	d102      	bne.n	80054d6 <HAL_SPI_Transmit+0x166>
 80054d0:	683b      	ldr	r3, [r7, #0]
 80054d2:	2b00      	cmp	r3, #0
 80054d4:	d109      	bne.n	80054ea <HAL_SPI_Transmit+0x17a>
        {
          hspi->State = HAL_SPI_STATE_READY;
 80054d6:	68fb      	ldr	r3, [r7, #12]
 80054d8:	2201      	movs	r2, #1
 80054da:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51
          __HAL_UNLOCK(hspi);
 80054de:	68fb      	ldr	r3, [r7, #12]
 80054e0:	2200      	movs	r2, #0
 80054e2:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50
          return HAL_TIMEOUT;
 80054e6:	2303      	movs	r3, #3
 80054e8:	e082      	b.n	80055f0 <HAL_SPI_Transmit+0x280>
    while (hspi->TxXferCount > 0U)
 80054ea:	68fb      	ldr	r3, [r7, #12]
 80054ec:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 80054ee:	b29b      	uxth	r3, r3
 80054f0:	2b00      	cmp	r3, #0
 80054f2:	d1c7      	bne.n	8005484 <HAL_SPI_Transmit+0x114>
 80054f4:	e053      	b.n	800559e <HAL_SPI_Transmit+0x22e>
    }
  }
  /* Transmit data in 8 Bit mode */
  else
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 80054f6:	68fb      	ldr	r3, [r7, #12]
 80054f8:	685b      	ldr	r3, [r3, #4]
 80054fa:	2b00      	cmp	r3, #0
 80054fc:	d002      	beq.n	8005504 <HAL_SPI_Transmit+0x194>
 80054fe:	8b7b      	ldrh	r3, [r7, #26]
 8005500:	2b01      	cmp	r3, #1
 8005502:	d147      	bne.n	8005594 <HAL_SPI_Transmit+0x224>
    {
      *((__IO uint8_t *)&hspi->Instance->DR) = *((const uint8_t *)hspi->pTxBuffPtr);
 8005504:	68fb      	ldr	r3, [r7, #12]
 8005506:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 8005508:	68fb      	ldr	r3, [r7, #12]
 800550a:	681b      	ldr	r3, [r3, #0]
 800550c:	330c      	adds	r3, #12
 800550e:	7812      	ldrb	r2, [r2, #0]
 8005510:	701a      	strb	r2, [r3, #0]
      hspi->pTxBuffPtr += sizeof(uint8_t);
 8005512:	68fb      	ldr	r3, [r7, #12]
 8005514:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8005516:	1c5a      	adds	r2, r3, #1
 8005518:	68fb      	ldr	r3, [r7, #12]
 800551a:	631a      	str	r2, [r3, #48]	@ 0x30
      hspi->TxXferCount--;
 800551c:	68fb      	ldr	r3, [r7, #12]
 800551e:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 8005520:	b29b      	uxth	r3, r3
 8005522:	3b01      	subs	r3, #1
 8005524:	b29a      	uxth	r2, r3
 8005526:	68fb      	ldr	r3, [r7, #12]
 8005528:	86da      	strh	r2, [r3, #54]	@ 0x36
    }
    while (hspi->TxXferCount > 0U)
 800552a:	e033      	b.n	8005594 <HAL_SPI_Transmit+0x224>
    {
      /* Wait until TXE flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 800552c:	68fb      	ldr	r3, [r7, #12]
 800552e:	681b      	ldr	r3, [r3, #0]
 8005530:	689b      	ldr	r3, [r3, #8]
 8005532:	f003 0302 	and.w	r3, r3, #2
 8005536:	2b02      	cmp	r3, #2
 8005538:	d113      	bne.n	8005562 <HAL_SPI_Transmit+0x1f2>
      {
        *((__IO uint8_t *)&hspi->Instance->DR) = *((const uint8_t *)hspi->pTxBuffPtr);
 800553a:	68fb      	ldr	r3, [r7, #12]
 800553c:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 800553e:	68fb      	ldr	r3, [r7, #12]
 8005540:	681b      	ldr	r3, [r3, #0]
 8005542:	330c      	adds	r3, #12
 8005544:	7812      	ldrb	r2, [r2, #0]
 8005546:	701a      	strb	r2, [r3, #0]
        hspi->pTxBuffPtr += sizeof(uint8_t);
 8005548:	68fb      	ldr	r3, [r7, #12]
 800554a:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800554c:	1c5a      	adds	r2, r3, #1
 800554e:	68fb      	ldr	r3, [r7, #12]
 8005550:	631a      	str	r2, [r3, #48]	@ 0x30
        hspi->TxXferCount--;
 8005552:	68fb      	ldr	r3, [r7, #12]
 8005554:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 8005556:	b29b      	uxth	r3, r3
 8005558:	3b01      	subs	r3, #1
 800555a:	b29a      	uxth	r2, r3
 800555c:	68fb      	ldr	r3, [r7, #12]
 800555e:	86da      	strh	r2, [r3, #54]	@ 0x36
 8005560:	e018      	b.n	8005594 <HAL_SPI_Transmit+0x224>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 8005562:	f7fd f84d 	bl	8002600 <HAL_GetTick>
 8005566:	4602      	mov	r2, r0
 8005568:	69fb      	ldr	r3, [r7, #28]
 800556a:	1ad3      	subs	r3, r2, r3
 800556c:	683a      	ldr	r2, [r7, #0]
 800556e:	429a      	cmp	r2, r3
 8005570:	d803      	bhi.n	800557a <HAL_SPI_Transmit+0x20a>
 8005572:	683b      	ldr	r3, [r7, #0]
 8005574:	f1b3 3fff 	cmp.w	r3, #4294967295
 8005578:	d102      	bne.n	8005580 <HAL_SPI_Transmit+0x210>
 800557a:	683b      	ldr	r3, [r7, #0]
 800557c:	2b00      	cmp	r3, #0
 800557e:	d109      	bne.n	8005594 <HAL_SPI_Transmit+0x224>
        {
          hspi->State = HAL_SPI_STATE_READY;
 8005580:	68fb      	ldr	r3, [r7, #12]
 8005582:	2201      	movs	r2, #1
 8005584:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51
          __HAL_UNLOCK(hspi);
 8005588:	68fb      	ldr	r3, [r7, #12]
 800558a:	2200      	movs	r2, #0
 800558c:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50
          return HAL_TIMEOUT;
 8005590:	2303      	movs	r3, #3
 8005592:	e02d      	b.n	80055f0 <HAL_SPI_Transmit+0x280>
    while (hspi->TxXferCount > 0U)
 8005594:	68fb      	ldr	r3, [r7, #12]
 8005596:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 8005598:	b29b      	uxth	r3, r3
 800559a:	2b00      	cmp	r3, #0
 800559c:	d1c6      	bne.n	800552c <HAL_SPI_Transmit+0x1bc>
    SET_BIT(hspi->Instance->CR1, SPI_CR1_CRCNEXT);
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 800559e:	69fa      	ldr	r2, [r7, #28]
 80055a0:	6839      	ldr	r1, [r7, #0]
 80055a2:	68f8      	ldr	r0, [r7, #12]
 80055a4:	f000 f8be 	bl	8005724 <SPI_EndRxTxTransaction>
 80055a8:	4603      	mov	r3, r0
 80055aa:	2b00      	cmp	r3, #0
 80055ac:	d002      	beq.n	80055b4 <HAL_SPI_Transmit+0x244>
  {
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 80055ae:	68fb      	ldr	r3, [r7, #12]
 80055b0:	2220      	movs	r2, #32
 80055b2:	655a      	str	r2, [r3, #84]	@ 0x54
  }

  /* Clear overrun flag in 2 Lines communication mode because received is not read */
  if (hspi->Init.Direction == SPI_DIRECTION_2LINES)
 80055b4:	68fb      	ldr	r3, [r7, #12]
 80055b6:	689b      	ldr	r3, [r3, #8]
 80055b8:	2b00      	cmp	r3, #0
 80055ba:	d10a      	bne.n	80055d2 <HAL_SPI_Transmit+0x262>
  {
    __HAL_SPI_CLEAR_OVRFLAG(hspi);
 80055bc:	2300      	movs	r3, #0
 80055be:	617b      	str	r3, [r7, #20]
 80055c0:	68fb      	ldr	r3, [r7, #12]
 80055c2:	681b      	ldr	r3, [r3, #0]
 80055c4:	68db      	ldr	r3, [r3, #12]
 80055c6:	617b      	str	r3, [r7, #20]
 80055c8:	68fb      	ldr	r3, [r7, #12]
 80055ca:	681b      	ldr	r3, [r3, #0]
 80055cc:	689b      	ldr	r3, [r3, #8]
 80055ce:	617b      	str	r3, [r7, #20]
 80055d0:	697b      	ldr	r3, [r7, #20]
  }

  hspi->State = HAL_SPI_STATE_READY;
 80055d2:	68fb      	ldr	r3, [r7, #12]
 80055d4:	2201      	movs	r2, #1
 80055d6:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51
  /* Process Unlocked */
  __HAL_UNLOCK(hspi);
 80055da:	68fb      	ldr	r3, [r7, #12]
 80055dc:	2200      	movs	r2, #0
 80055de:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50

  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 80055e2:	68fb      	ldr	r3, [r7, #12]
 80055e4:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80055e6:	2b00      	cmp	r3, #0
 80055e8:	d001      	beq.n	80055ee <HAL_SPI_Transmit+0x27e>
  {
    return HAL_ERROR;
 80055ea:	2301      	movs	r3, #1
 80055ec:	e000      	b.n	80055f0 <HAL_SPI_Transmit+0x280>
  }
  else
  {
    return HAL_OK;
 80055ee:	2300      	movs	r3, #0
  }
}
 80055f0:	4618      	mov	r0, r3
 80055f2:	3720      	adds	r7, #32
 80055f4:	46bd      	mov	sp, r7
 80055f6:	bd80      	pop	{r7, pc}

080055f8 <HAL_SPI_GetState>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval SPI state
  */
HAL_SPI_StateTypeDef HAL_SPI_GetState(const SPI_HandleTypeDef *hspi)
{
 80055f8:	b480      	push	{r7}
 80055fa:	b083      	sub	sp, #12
 80055fc:	af00      	add	r7, sp, #0
 80055fe:	6078      	str	r0, [r7, #4]
  /* Return SPI handle state */
  return hspi->State;
 8005600:	687b      	ldr	r3, [r7, #4]
 8005602:	f893 3051 	ldrb.w	r3, [r3, #81]	@ 0x51
 8005606:	b2db      	uxtb	r3, r3
}
 8005608:	4618      	mov	r0, r3
 800560a:	370c      	adds	r7, #12
 800560c:	46bd      	mov	sp, r7
 800560e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005612:	4770      	bx	lr

08005614 <SPI_WaitFlagStateUntilTimeout>:
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_WaitFlagStateUntilTimeout(SPI_HandleTypeDef *hspi, uint32_t Flag, FlagStatus State,
                                                       uint32_t Timeout, uint32_t Tickstart)
{
 8005614:	b580      	push	{r7, lr}
 8005616:	b088      	sub	sp, #32
 8005618:	af00      	add	r7, sp, #0
 800561a:	60f8      	str	r0, [r7, #12]
 800561c:	60b9      	str	r1, [r7, #8]
 800561e:	603b      	str	r3, [r7, #0]
 8005620:	4613      	mov	r3, r2
 8005622:	71fb      	strb	r3, [r7, #7]
  __IO uint32_t count;
  uint32_t tmp_timeout;
  uint32_t tmp_tickstart;

  /* Adjust Timeout value  in case of end of transfer */
  tmp_timeout   = Timeout - (HAL_GetTick() - Tickstart);
 8005624:	f7fc ffec 	bl	8002600 <HAL_GetTick>
 8005628:	4602      	mov	r2, r0
 800562a:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800562c:	1a9b      	subs	r3, r3, r2
 800562e:	683a      	ldr	r2, [r7, #0]
 8005630:	4413      	add	r3, r2
 8005632:	61fb      	str	r3, [r7, #28]
  tmp_tickstart = HAL_GetTick();
 8005634:	f7fc ffe4 	bl	8002600 <HAL_GetTick>
 8005638:	61b8      	str	r0, [r7, #24]

  /* Calculate Timeout based on a software loop to avoid blocking issue if Systick is disabled */
  count = tmp_timeout * ((SystemCoreClock * 32U) >> 20U);
 800563a:	4b39      	ldr	r3, [pc, #228]	@ (8005720 <SPI_WaitFlagStateUntilTimeout+0x10c>)
 800563c:	681b      	ldr	r3, [r3, #0]
 800563e:	015b      	lsls	r3, r3, #5
 8005640:	0d1b      	lsrs	r3, r3, #20
 8005642:	69fa      	ldr	r2, [r7, #28]
 8005644:	fb02 f303 	mul.w	r3, r2, r3
 8005648:	617b      	str	r3, [r7, #20]

  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 800564a:	e054      	b.n	80056f6 <SPI_WaitFlagStateUntilTimeout+0xe2>
  {
    if (Timeout != HAL_MAX_DELAY)
 800564c:	683b      	ldr	r3, [r7, #0]
 800564e:	f1b3 3fff 	cmp.w	r3, #4294967295
 8005652:	d050      	beq.n	80056f6 <SPI_WaitFlagStateUntilTimeout+0xe2>
    {
      if (((HAL_GetTick() - tmp_tickstart) >= tmp_timeout) || (tmp_timeout == 0U))
 8005654:	f7fc ffd4 	bl	8002600 <HAL_GetTick>
 8005658:	4602      	mov	r2, r0
 800565a:	69bb      	ldr	r3, [r7, #24]
 800565c:	1ad3      	subs	r3, r2, r3
 800565e:	69fa      	ldr	r2, [r7, #28]
 8005660:	429a      	cmp	r2, r3
 8005662:	d902      	bls.n	800566a <SPI_WaitFlagStateUntilTimeout+0x56>
 8005664:	69fb      	ldr	r3, [r7, #28]
 8005666:	2b00      	cmp	r3, #0
 8005668:	d13d      	bne.n	80056e6 <SPI_WaitFlagStateUntilTimeout+0xd2>
        /* Disable the SPI and reset the CRC: the CRC value should be cleared
           on both master and slave sides in order to resynchronize the master
           and slave for their respective CRC calculation */

        /* Disable TXE, RXNE and ERR interrupts for the interrupt process */
        __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_RXNE | SPI_IT_ERR));
 800566a:	68fb      	ldr	r3, [r7, #12]
 800566c:	681b      	ldr	r3, [r3, #0]
 800566e:	685a      	ldr	r2, [r3, #4]
 8005670:	68fb      	ldr	r3, [r7, #12]
 8005672:	681b      	ldr	r3, [r3, #0]
 8005674:	f022 02e0 	bic.w	r2, r2, #224	@ 0xe0
 8005678:	605a      	str	r2, [r3, #4]

        if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 800567a:	68fb      	ldr	r3, [r7, #12]
 800567c:	685b      	ldr	r3, [r3, #4]
 800567e:	f5b3 7f82 	cmp.w	r3, #260	@ 0x104
 8005682:	d111      	bne.n	80056a8 <SPI_WaitFlagStateUntilTimeout+0x94>
 8005684:	68fb      	ldr	r3, [r7, #12]
 8005686:	689b      	ldr	r3, [r3, #8]
 8005688:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 800568c:	d004      	beq.n	8005698 <SPI_WaitFlagStateUntilTimeout+0x84>
                                                     || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 800568e:	68fb      	ldr	r3, [r7, #12]
 8005690:	689b      	ldr	r3, [r3, #8]
 8005692:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8005696:	d107      	bne.n	80056a8 <SPI_WaitFlagStateUntilTimeout+0x94>
        {
          /* Disable SPI peripheral */
          __HAL_SPI_DISABLE(hspi);
 8005698:	68fb      	ldr	r3, [r7, #12]
 800569a:	681b      	ldr	r3, [r3, #0]
 800569c:	681a      	ldr	r2, [r3, #0]
 800569e:	68fb      	ldr	r3, [r7, #12]
 80056a0:	681b      	ldr	r3, [r3, #0]
 80056a2:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 80056a6:	601a      	str	r2, [r3, #0]
        }

        /* Reset CRC Calculation */
        if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 80056a8:	68fb      	ldr	r3, [r7, #12]
 80056aa:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80056ac:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 80056b0:	d10f      	bne.n	80056d2 <SPI_WaitFlagStateUntilTimeout+0xbe>
        {
          SPI_RESET_CRC(hspi);
 80056b2:	68fb      	ldr	r3, [r7, #12]
 80056b4:	681b      	ldr	r3, [r3, #0]
 80056b6:	681a      	ldr	r2, [r3, #0]
 80056b8:	68fb      	ldr	r3, [r7, #12]
 80056ba:	681b      	ldr	r3, [r3, #0]
 80056bc:	f422 5200 	bic.w	r2, r2, #8192	@ 0x2000
 80056c0:	601a      	str	r2, [r3, #0]
 80056c2:	68fb      	ldr	r3, [r7, #12]
 80056c4:	681b      	ldr	r3, [r3, #0]
 80056c6:	681a      	ldr	r2, [r3, #0]
 80056c8:	68fb      	ldr	r3, [r7, #12]
 80056ca:	681b      	ldr	r3, [r3, #0]
 80056cc:	f442 5200 	orr.w	r2, r2, #8192	@ 0x2000
 80056d0:	601a      	str	r2, [r3, #0]
        }

        hspi->State = HAL_SPI_STATE_READY;
 80056d2:	68fb      	ldr	r3, [r7, #12]
 80056d4:	2201      	movs	r2, #1
 80056d6:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51

        /* Process Unlocked */
        __HAL_UNLOCK(hspi);
 80056da:	68fb      	ldr	r3, [r7, #12]
 80056dc:	2200      	movs	r2, #0
 80056de:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50

        return HAL_TIMEOUT;
 80056e2:	2303      	movs	r3, #3
 80056e4:	e017      	b.n	8005716 <SPI_WaitFlagStateUntilTimeout+0x102>
      }
      /* If Systick is disabled or not incremented, deactivate timeout to go in disable loop procedure */
      if (count == 0U)
 80056e6:	697b      	ldr	r3, [r7, #20]
 80056e8:	2b00      	cmp	r3, #0
 80056ea:	d101      	bne.n	80056f0 <SPI_WaitFlagStateUntilTimeout+0xdc>
      {
        tmp_timeout = 0U;
 80056ec:	2300      	movs	r3, #0
 80056ee:	61fb      	str	r3, [r7, #28]
      }
      count--;
 80056f0:	697b      	ldr	r3, [r7, #20]
 80056f2:	3b01      	subs	r3, #1
 80056f4:	617b      	str	r3, [r7, #20]
  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 80056f6:	68fb      	ldr	r3, [r7, #12]
 80056f8:	681b      	ldr	r3, [r3, #0]
 80056fa:	689a      	ldr	r2, [r3, #8]
 80056fc:	68bb      	ldr	r3, [r7, #8]
 80056fe:	4013      	ands	r3, r2
 8005700:	68ba      	ldr	r2, [r7, #8]
 8005702:	429a      	cmp	r2, r3
 8005704:	bf0c      	ite	eq
 8005706:	2301      	moveq	r3, #1
 8005708:	2300      	movne	r3, #0
 800570a:	b2db      	uxtb	r3, r3
 800570c:	461a      	mov	r2, r3
 800570e:	79fb      	ldrb	r3, [r7, #7]
 8005710:	429a      	cmp	r2, r3
 8005712:	d19b      	bne.n	800564c <SPI_WaitFlagStateUntilTimeout+0x38>
    }
  }

  return HAL_OK;
 8005714:	2300      	movs	r3, #0
}
 8005716:	4618      	mov	r0, r3
 8005718:	3720      	adds	r7, #32
 800571a:	46bd      	mov	sp, r7
 800571c:	bd80      	pop	{r7, pc}
 800571e:	bf00      	nop
 8005720:	20000014 	.word	0x20000014

08005724 <SPI_EndRxTxTransaction>:
  * @param  Timeout Timeout duration
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_EndRxTxTransaction(SPI_HandleTypeDef *hspi, uint32_t Timeout, uint32_t Tickstart)
{
 8005724:	b580      	push	{r7, lr}
 8005726:	b088      	sub	sp, #32
 8005728:	af02      	add	r7, sp, #8
 800572a:	60f8      	str	r0, [r7, #12]
 800572c:	60b9      	str	r1, [r7, #8]
 800572e:	607a      	str	r2, [r7, #4]
  /* Wait until TXE flag */
  if(SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_TXE, SET, Timeout, Tickstart) != HAL_OK)
 8005730:	687b      	ldr	r3, [r7, #4]
 8005732:	9300      	str	r3, [sp, #0]
 8005734:	68bb      	ldr	r3, [r7, #8]
 8005736:	2201      	movs	r2, #1
 8005738:	2102      	movs	r1, #2
 800573a:	68f8      	ldr	r0, [r7, #12]
 800573c:	f7ff ff6a 	bl	8005614 <SPI_WaitFlagStateUntilTimeout>
 8005740:	4603      	mov	r3, r0
 8005742:	2b00      	cmp	r3, #0
 8005744:	d007      	beq.n	8005756 <SPI_EndRxTxTransaction+0x32>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8005746:	68fb      	ldr	r3, [r7, #12]
 8005748:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800574a:	f043 0220 	orr.w	r2, r3, #32
 800574e:	68fb      	ldr	r3, [r7, #12]
 8005750:	655a      	str	r2, [r3, #84]	@ 0x54
    return HAL_TIMEOUT;
 8005752:	2303      	movs	r3, #3
 8005754:	e032      	b.n	80057bc <SPI_EndRxTxTransaction+0x98>
  }

  /* Timeout in µs */
  __IO uint32_t count = SPI_BSY_FLAG_WORKAROUND_TIMEOUT * (SystemCoreClock / 24U / 1000000U);
 8005756:	4b1b      	ldr	r3, [pc, #108]	@ (80057c4 <SPI_EndRxTxTransaction+0xa0>)
 8005758:	681b      	ldr	r3, [r3, #0]
 800575a:	4a1b      	ldr	r2, [pc, #108]	@ (80057c8 <SPI_EndRxTxTransaction+0xa4>)
 800575c:	fba2 2303 	umull	r2, r3, r2, r3
 8005760:	0d5b      	lsrs	r3, r3, #21
 8005762:	f44f 727a 	mov.w	r2, #1000	@ 0x3e8
 8005766:	fb02 f303 	mul.w	r3, r2, r3
 800576a:	617b      	str	r3, [r7, #20]
  /* Erratasheet: BSY bit may stay high at the end of a data transfer in Slave mode */
  if (hspi->Init.Mode == SPI_MODE_MASTER)
 800576c:	68fb      	ldr	r3, [r7, #12]
 800576e:	685b      	ldr	r3, [r3, #4]
 8005770:	f5b3 7f82 	cmp.w	r3, #260	@ 0x104
 8005774:	d112      	bne.n	800579c <SPI_EndRxTxTransaction+0x78>
  {
    /* Control the BSY flag */
    if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_BSY, RESET, Timeout, Tickstart) != HAL_OK)
 8005776:	687b      	ldr	r3, [r7, #4]
 8005778:	9300      	str	r3, [sp, #0]
 800577a:	68bb      	ldr	r3, [r7, #8]
 800577c:	2200      	movs	r2, #0
 800577e:	2180      	movs	r1, #128	@ 0x80
 8005780:	68f8      	ldr	r0, [r7, #12]
 8005782:	f7ff ff47 	bl	8005614 <SPI_WaitFlagStateUntilTimeout>
 8005786:	4603      	mov	r3, r0
 8005788:	2b00      	cmp	r3, #0
 800578a:	d016      	beq.n	80057ba <SPI_EndRxTxTransaction+0x96>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 800578c:	68fb      	ldr	r3, [r7, #12]
 800578e:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8005790:	f043 0220 	orr.w	r2, r3, #32
 8005794:	68fb      	ldr	r3, [r7, #12]
 8005796:	655a      	str	r2, [r3, #84]	@ 0x54
      return HAL_TIMEOUT;
 8005798:	2303      	movs	r3, #3
 800579a:	e00f      	b.n	80057bc <SPI_EndRxTxTransaction+0x98>
    * User have to calculate the timeout value to fit with the time of 1 byte transfer.
    * This time is directly link with the SPI clock from Master device.
    */
    do
    {
      if (count == 0U)
 800579c:	697b      	ldr	r3, [r7, #20]
 800579e:	2b00      	cmp	r3, #0
 80057a0:	d00a      	beq.n	80057b8 <SPI_EndRxTxTransaction+0x94>
      {
        break;
      }
      count--;
 80057a2:	697b      	ldr	r3, [r7, #20]
 80057a4:	3b01      	subs	r3, #1
 80057a6:	617b      	str	r3, [r7, #20]
    } while (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_BSY) != RESET);
 80057a8:	68fb      	ldr	r3, [r7, #12]
 80057aa:	681b      	ldr	r3, [r3, #0]
 80057ac:	689b      	ldr	r3, [r3, #8]
 80057ae:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 80057b2:	2b80      	cmp	r3, #128	@ 0x80
 80057b4:	d0f2      	beq.n	800579c <SPI_EndRxTxTransaction+0x78>
 80057b6:	e000      	b.n	80057ba <SPI_EndRxTxTransaction+0x96>
        break;
 80057b8:	bf00      	nop
  }

  return HAL_OK;
 80057ba:	2300      	movs	r3, #0
}
 80057bc:	4618      	mov	r0, r3
 80057be:	3718      	adds	r7, #24
 80057c0:	46bd      	mov	sp, r7
 80057c2:	bd80      	pop	{r7, pc}
 80057c4:	20000014 	.word	0x20000014
 80057c8:	165e9f81 	.word	0x165e9f81

080057cc <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 80057cc:	b580      	push	{r7, lr}
 80057ce:	b082      	sub	sp, #8
 80057d0:	af00      	add	r7, sp, #0
 80057d2:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 80057d4:	687b      	ldr	r3, [r7, #4]
 80057d6:	2b00      	cmp	r3, #0
 80057d8:	d101      	bne.n	80057de <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 80057da:	2301      	movs	r3, #1
 80057dc:	e041      	b.n	8005862 <HAL_TIM_Base_Init+0x96>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 80057de:	687b      	ldr	r3, [r7, #4]
 80057e0:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 80057e4:	b2db      	uxtb	r3, r3
 80057e6:	2b00      	cmp	r3, #0
 80057e8:	d106      	bne.n	80057f8 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 80057ea:	687b      	ldr	r3, [r7, #4]
 80057ec:	2200      	movs	r2, #0
 80057ee:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 80057f2:	6878      	ldr	r0, [r7, #4]
 80057f4:	f7fc fc26 	bl	8002044 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 80057f8:	687b      	ldr	r3, [r7, #4]
 80057fa:	2202      	movs	r2, #2
 80057fc:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8005800:	687b      	ldr	r3, [r7, #4]
 8005802:	681a      	ldr	r2, [r3, #0]
 8005804:	687b      	ldr	r3, [r7, #4]
 8005806:	3304      	adds	r3, #4
 8005808:	4619      	mov	r1, r3
 800580a:	4610      	mov	r0, r2
 800580c:	f000 f82e 	bl	800586c <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8005810:	687b      	ldr	r3, [r7, #4]
 8005812:	2201      	movs	r2, #1
 8005814:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8005818:	687b      	ldr	r3, [r7, #4]
 800581a:	2201      	movs	r2, #1
 800581c:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 8005820:	687b      	ldr	r3, [r7, #4]
 8005822:	2201      	movs	r2, #1
 8005824:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 8005828:	687b      	ldr	r3, [r7, #4]
 800582a:	2201      	movs	r2, #1
 800582c:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 8005830:	687b      	ldr	r3, [r7, #4]
 8005832:	2201      	movs	r2, #1
 8005834:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8005838:	687b      	ldr	r3, [r7, #4]
 800583a:	2201      	movs	r2, #1
 800583c:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 8005840:	687b      	ldr	r3, [r7, #4]
 8005842:	2201      	movs	r2, #1
 8005844:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
 8005848:	687b      	ldr	r3, [r7, #4]
 800584a:	2201      	movs	r2, #1
 800584c:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 8005850:	687b      	ldr	r3, [r7, #4]
 8005852:	2201      	movs	r2, #1
 8005854:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8005858:	687b      	ldr	r3, [r7, #4]
 800585a:	2201      	movs	r2, #1
 800585c:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  return HAL_OK;
 8005860:	2300      	movs	r3, #0
}
 8005862:	4618      	mov	r0, r3
 8005864:	3708      	adds	r7, #8
 8005866:	46bd      	mov	sp, r7
 8005868:	bd80      	pop	{r7, pc}
	...

0800586c <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, const TIM_Base_InitTypeDef *Structure)
{
 800586c:	b480      	push	{r7}
 800586e:	b085      	sub	sp, #20
 8005870:	af00      	add	r7, sp, #0
 8005872:	6078      	str	r0, [r7, #4]
 8005874:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8005876:	687b      	ldr	r3, [r7, #4]
 8005878:	681b      	ldr	r3, [r3, #0]
 800587a:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 800587c:	687b      	ldr	r3, [r7, #4]
 800587e:	4a46      	ldr	r2, [pc, #280]	@ (8005998 <TIM_Base_SetConfig+0x12c>)
 8005880:	4293      	cmp	r3, r2
 8005882:	d013      	beq.n	80058ac <TIM_Base_SetConfig+0x40>
 8005884:	687b      	ldr	r3, [r7, #4]
 8005886:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 800588a:	d00f      	beq.n	80058ac <TIM_Base_SetConfig+0x40>
 800588c:	687b      	ldr	r3, [r7, #4]
 800588e:	4a43      	ldr	r2, [pc, #268]	@ (800599c <TIM_Base_SetConfig+0x130>)
 8005890:	4293      	cmp	r3, r2
 8005892:	d00b      	beq.n	80058ac <TIM_Base_SetConfig+0x40>
 8005894:	687b      	ldr	r3, [r7, #4]
 8005896:	4a42      	ldr	r2, [pc, #264]	@ (80059a0 <TIM_Base_SetConfig+0x134>)
 8005898:	4293      	cmp	r3, r2
 800589a:	d007      	beq.n	80058ac <TIM_Base_SetConfig+0x40>
 800589c:	687b      	ldr	r3, [r7, #4]
 800589e:	4a41      	ldr	r2, [pc, #260]	@ (80059a4 <TIM_Base_SetConfig+0x138>)
 80058a0:	4293      	cmp	r3, r2
 80058a2:	d003      	beq.n	80058ac <TIM_Base_SetConfig+0x40>
 80058a4:	687b      	ldr	r3, [r7, #4]
 80058a6:	4a40      	ldr	r2, [pc, #256]	@ (80059a8 <TIM_Base_SetConfig+0x13c>)
 80058a8:	4293      	cmp	r3, r2
 80058aa:	d108      	bne.n	80058be <TIM_Base_SetConfig+0x52>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 80058ac:	68fb      	ldr	r3, [r7, #12]
 80058ae:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 80058b2:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 80058b4:	683b      	ldr	r3, [r7, #0]
 80058b6:	685b      	ldr	r3, [r3, #4]
 80058b8:	68fa      	ldr	r2, [r7, #12]
 80058ba:	4313      	orrs	r3, r2
 80058bc:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 80058be:	687b      	ldr	r3, [r7, #4]
 80058c0:	4a35      	ldr	r2, [pc, #212]	@ (8005998 <TIM_Base_SetConfig+0x12c>)
 80058c2:	4293      	cmp	r3, r2
 80058c4:	d02b      	beq.n	800591e <TIM_Base_SetConfig+0xb2>
 80058c6:	687b      	ldr	r3, [r7, #4]
 80058c8:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 80058cc:	d027      	beq.n	800591e <TIM_Base_SetConfig+0xb2>
 80058ce:	687b      	ldr	r3, [r7, #4]
 80058d0:	4a32      	ldr	r2, [pc, #200]	@ (800599c <TIM_Base_SetConfig+0x130>)
 80058d2:	4293      	cmp	r3, r2
 80058d4:	d023      	beq.n	800591e <TIM_Base_SetConfig+0xb2>
 80058d6:	687b      	ldr	r3, [r7, #4]
 80058d8:	4a31      	ldr	r2, [pc, #196]	@ (80059a0 <TIM_Base_SetConfig+0x134>)
 80058da:	4293      	cmp	r3, r2
 80058dc:	d01f      	beq.n	800591e <TIM_Base_SetConfig+0xb2>
 80058de:	687b      	ldr	r3, [r7, #4]
 80058e0:	4a30      	ldr	r2, [pc, #192]	@ (80059a4 <TIM_Base_SetConfig+0x138>)
 80058e2:	4293      	cmp	r3, r2
 80058e4:	d01b      	beq.n	800591e <TIM_Base_SetConfig+0xb2>
 80058e6:	687b      	ldr	r3, [r7, #4]
 80058e8:	4a2f      	ldr	r2, [pc, #188]	@ (80059a8 <TIM_Base_SetConfig+0x13c>)
 80058ea:	4293      	cmp	r3, r2
 80058ec:	d017      	beq.n	800591e <TIM_Base_SetConfig+0xb2>
 80058ee:	687b      	ldr	r3, [r7, #4]
 80058f0:	4a2e      	ldr	r2, [pc, #184]	@ (80059ac <TIM_Base_SetConfig+0x140>)
 80058f2:	4293      	cmp	r3, r2
 80058f4:	d013      	beq.n	800591e <TIM_Base_SetConfig+0xb2>
 80058f6:	687b      	ldr	r3, [r7, #4]
 80058f8:	4a2d      	ldr	r2, [pc, #180]	@ (80059b0 <TIM_Base_SetConfig+0x144>)
 80058fa:	4293      	cmp	r3, r2
 80058fc:	d00f      	beq.n	800591e <TIM_Base_SetConfig+0xb2>
 80058fe:	687b      	ldr	r3, [r7, #4]
 8005900:	4a2c      	ldr	r2, [pc, #176]	@ (80059b4 <TIM_Base_SetConfig+0x148>)
 8005902:	4293      	cmp	r3, r2
 8005904:	d00b      	beq.n	800591e <TIM_Base_SetConfig+0xb2>
 8005906:	687b      	ldr	r3, [r7, #4]
 8005908:	4a2b      	ldr	r2, [pc, #172]	@ (80059b8 <TIM_Base_SetConfig+0x14c>)
 800590a:	4293      	cmp	r3, r2
 800590c:	d007      	beq.n	800591e <TIM_Base_SetConfig+0xb2>
 800590e:	687b      	ldr	r3, [r7, #4]
 8005910:	4a2a      	ldr	r2, [pc, #168]	@ (80059bc <TIM_Base_SetConfig+0x150>)
 8005912:	4293      	cmp	r3, r2
 8005914:	d003      	beq.n	800591e <TIM_Base_SetConfig+0xb2>
 8005916:	687b      	ldr	r3, [r7, #4]
 8005918:	4a29      	ldr	r2, [pc, #164]	@ (80059c0 <TIM_Base_SetConfig+0x154>)
 800591a:	4293      	cmp	r3, r2
 800591c:	d108      	bne.n	8005930 <TIM_Base_SetConfig+0xc4>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 800591e:	68fb      	ldr	r3, [r7, #12]
 8005920:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8005924:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8005926:	683b      	ldr	r3, [r7, #0]
 8005928:	68db      	ldr	r3, [r3, #12]
 800592a:	68fa      	ldr	r2, [r7, #12]
 800592c:	4313      	orrs	r3, r2
 800592e:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8005930:	68fb      	ldr	r3, [r7, #12]
 8005932:	f023 0280 	bic.w	r2, r3, #128	@ 0x80
 8005936:	683b      	ldr	r3, [r7, #0]
 8005938:	695b      	ldr	r3, [r3, #20]
 800593a:	4313      	orrs	r3, r2
 800593c:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 800593e:	687b      	ldr	r3, [r7, #4]
 8005940:	68fa      	ldr	r2, [r7, #12]
 8005942:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8005944:	683b      	ldr	r3, [r7, #0]
 8005946:	689a      	ldr	r2, [r3, #8]
 8005948:	687b      	ldr	r3, [r7, #4]
 800594a:	62da      	str	r2, [r3, #44]	@ 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 800594c:	683b      	ldr	r3, [r7, #0]
 800594e:	681a      	ldr	r2, [r3, #0]
 8005950:	687b      	ldr	r3, [r7, #4]
 8005952:	629a      	str	r2, [r3, #40]	@ 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8005954:	687b      	ldr	r3, [r7, #4]
 8005956:	4a10      	ldr	r2, [pc, #64]	@ (8005998 <TIM_Base_SetConfig+0x12c>)
 8005958:	4293      	cmp	r3, r2
 800595a:	d003      	beq.n	8005964 <TIM_Base_SetConfig+0xf8>
 800595c:	687b      	ldr	r3, [r7, #4]
 800595e:	4a12      	ldr	r2, [pc, #72]	@ (80059a8 <TIM_Base_SetConfig+0x13c>)
 8005960:	4293      	cmp	r3, r2
 8005962:	d103      	bne.n	800596c <TIM_Base_SetConfig+0x100>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8005964:	683b      	ldr	r3, [r7, #0]
 8005966:	691a      	ldr	r2, [r3, #16]
 8005968:	687b      	ldr	r3, [r7, #4]
 800596a:	631a      	str	r2, [r3, #48]	@ 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 800596c:	687b      	ldr	r3, [r7, #4]
 800596e:	2201      	movs	r2, #1
 8005970:	615a      	str	r2, [r3, #20]

  /* Check if the update flag is set after the Update Generation, if so clear the UIF flag */
  if (HAL_IS_BIT_SET(TIMx->SR, TIM_FLAG_UPDATE))
 8005972:	687b      	ldr	r3, [r7, #4]
 8005974:	691b      	ldr	r3, [r3, #16]
 8005976:	f003 0301 	and.w	r3, r3, #1
 800597a:	2b01      	cmp	r3, #1
 800597c:	d105      	bne.n	800598a <TIM_Base_SetConfig+0x11e>
  {
    /* Clear the update flag */
    CLEAR_BIT(TIMx->SR, TIM_FLAG_UPDATE);
 800597e:	687b      	ldr	r3, [r7, #4]
 8005980:	691b      	ldr	r3, [r3, #16]
 8005982:	f023 0201 	bic.w	r2, r3, #1
 8005986:	687b      	ldr	r3, [r7, #4]
 8005988:	611a      	str	r2, [r3, #16]
  }
}
 800598a:	bf00      	nop
 800598c:	3714      	adds	r7, #20
 800598e:	46bd      	mov	sp, r7
 8005990:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005994:	4770      	bx	lr
 8005996:	bf00      	nop
 8005998:	40010000 	.word	0x40010000
 800599c:	40000400 	.word	0x40000400
 80059a0:	40000800 	.word	0x40000800
 80059a4:	40000c00 	.word	0x40000c00
 80059a8:	40010400 	.word	0x40010400
 80059ac:	40014000 	.word	0x40014000
 80059b0:	40014400 	.word	0x40014400
 80059b4:	40014800 	.word	0x40014800
 80059b8:	40001800 	.word	0x40001800
 80059bc:	40001c00 	.word	0x40001c00
 80059c0:	40002000 	.word	0x40002000

080059c4 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        const TIM_MasterConfigTypeDef *sMasterConfig)
{
 80059c4:	b480      	push	{r7}
 80059c6:	b085      	sub	sp, #20
 80059c8:	af00      	add	r7, sp, #0
 80059ca:	6078      	str	r0, [r7, #4]
 80059cc:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 80059ce:	687b      	ldr	r3, [r7, #4]
 80059d0:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 80059d4:	2b01      	cmp	r3, #1
 80059d6:	d101      	bne.n	80059dc <HAL_TIMEx_MasterConfigSynchronization+0x18>
 80059d8:	2302      	movs	r3, #2
 80059da:	e05a      	b.n	8005a92 <HAL_TIMEx_MasterConfigSynchronization+0xce>
 80059dc:	687b      	ldr	r3, [r7, #4]
 80059de:	2201      	movs	r2, #1
 80059e0:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 80059e4:	687b      	ldr	r3, [r7, #4]
 80059e6:	2202      	movs	r2, #2
 80059e8:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 80059ec:	687b      	ldr	r3, [r7, #4]
 80059ee:	681b      	ldr	r3, [r3, #0]
 80059f0:	685b      	ldr	r3, [r3, #4]
 80059f2:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 80059f4:	687b      	ldr	r3, [r7, #4]
 80059f6:	681b      	ldr	r3, [r3, #0]
 80059f8:	689b      	ldr	r3, [r3, #8]
 80059fa:	60bb      	str	r3, [r7, #8]

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 80059fc:	68fb      	ldr	r3, [r7, #12]
 80059fe:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8005a02:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 8005a04:	683b      	ldr	r3, [r7, #0]
 8005a06:	681b      	ldr	r3, [r3, #0]
 8005a08:	68fa      	ldr	r2, [r7, #12]
 8005a0a:	4313      	orrs	r3, r2
 8005a0c:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 8005a0e:	687b      	ldr	r3, [r7, #4]
 8005a10:	681b      	ldr	r3, [r3, #0]
 8005a12:	68fa      	ldr	r2, [r7, #12]
 8005a14:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8005a16:	687b      	ldr	r3, [r7, #4]
 8005a18:	681b      	ldr	r3, [r3, #0]
 8005a1a:	4a21      	ldr	r2, [pc, #132]	@ (8005aa0 <HAL_TIMEx_MasterConfigSynchronization+0xdc>)
 8005a1c:	4293      	cmp	r3, r2
 8005a1e:	d022      	beq.n	8005a66 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8005a20:	687b      	ldr	r3, [r7, #4]
 8005a22:	681b      	ldr	r3, [r3, #0]
 8005a24:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8005a28:	d01d      	beq.n	8005a66 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8005a2a:	687b      	ldr	r3, [r7, #4]
 8005a2c:	681b      	ldr	r3, [r3, #0]
 8005a2e:	4a1d      	ldr	r2, [pc, #116]	@ (8005aa4 <HAL_TIMEx_MasterConfigSynchronization+0xe0>)
 8005a30:	4293      	cmp	r3, r2
 8005a32:	d018      	beq.n	8005a66 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8005a34:	687b      	ldr	r3, [r7, #4]
 8005a36:	681b      	ldr	r3, [r3, #0]
 8005a38:	4a1b      	ldr	r2, [pc, #108]	@ (8005aa8 <HAL_TIMEx_MasterConfigSynchronization+0xe4>)
 8005a3a:	4293      	cmp	r3, r2
 8005a3c:	d013      	beq.n	8005a66 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8005a3e:	687b      	ldr	r3, [r7, #4]
 8005a40:	681b      	ldr	r3, [r3, #0]
 8005a42:	4a1a      	ldr	r2, [pc, #104]	@ (8005aac <HAL_TIMEx_MasterConfigSynchronization+0xe8>)
 8005a44:	4293      	cmp	r3, r2
 8005a46:	d00e      	beq.n	8005a66 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8005a48:	687b      	ldr	r3, [r7, #4]
 8005a4a:	681b      	ldr	r3, [r3, #0]
 8005a4c:	4a18      	ldr	r2, [pc, #96]	@ (8005ab0 <HAL_TIMEx_MasterConfigSynchronization+0xec>)
 8005a4e:	4293      	cmp	r3, r2
 8005a50:	d009      	beq.n	8005a66 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8005a52:	687b      	ldr	r3, [r7, #4]
 8005a54:	681b      	ldr	r3, [r3, #0]
 8005a56:	4a17      	ldr	r2, [pc, #92]	@ (8005ab4 <HAL_TIMEx_MasterConfigSynchronization+0xf0>)
 8005a58:	4293      	cmp	r3, r2
 8005a5a:	d004      	beq.n	8005a66 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8005a5c:	687b      	ldr	r3, [r7, #4]
 8005a5e:	681b      	ldr	r3, [r3, #0]
 8005a60:	4a15      	ldr	r2, [pc, #84]	@ (8005ab8 <HAL_TIMEx_MasterConfigSynchronization+0xf4>)
 8005a62:	4293      	cmp	r3, r2
 8005a64:	d10c      	bne.n	8005a80 <HAL_TIMEx_MasterConfigSynchronization+0xbc>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 8005a66:	68bb      	ldr	r3, [r7, #8]
 8005a68:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 8005a6c:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 8005a6e:	683b      	ldr	r3, [r7, #0]
 8005a70:	685b      	ldr	r3, [r3, #4]
 8005a72:	68ba      	ldr	r2, [r7, #8]
 8005a74:	4313      	orrs	r3, r2
 8005a76:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 8005a78:	687b      	ldr	r3, [r7, #4]
 8005a7a:	681b      	ldr	r3, [r3, #0]
 8005a7c:	68ba      	ldr	r2, [r7, #8]
 8005a7e:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 8005a80:	687b      	ldr	r3, [r7, #4]
 8005a82:	2201      	movs	r2, #1
 8005a84:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  __HAL_UNLOCK(htim);
 8005a88:	687b      	ldr	r3, [r7, #4]
 8005a8a:	2200      	movs	r2, #0
 8005a8c:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return HAL_OK;
 8005a90:	2300      	movs	r3, #0
}
 8005a92:	4618      	mov	r0, r3
 8005a94:	3714      	adds	r7, #20
 8005a96:	46bd      	mov	sp, r7
 8005a98:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005a9c:	4770      	bx	lr
 8005a9e:	bf00      	nop
 8005aa0:	40010000 	.word	0x40010000
 8005aa4:	40000400 	.word	0x40000400
 8005aa8:	40000800 	.word	0x40000800
 8005aac:	40000c00 	.word	0x40000c00
 8005ab0:	40010400 	.word	0x40010400
 8005ab4:	40014000 	.word	0x40014000
 8005ab8:	40001800 	.word	0x40001800

08005abc <memset>:
 8005abc:	4402      	add	r2, r0
 8005abe:	4603      	mov	r3, r0
 8005ac0:	4293      	cmp	r3, r2
 8005ac2:	d100      	bne.n	8005ac6 <memset+0xa>
 8005ac4:	4770      	bx	lr
 8005ac6:	f803 1b01 	strb.w	r1, [r3], #1
 8005aca:	e7f9      	b.n	8005ac0 <memset+0x4>

08005acc <__libc_init_array>:
 8005acc:	b570      	push	{r4, r5, r6, lr}
 8005ace:	4d0d      	ldr	r5, [pc, #52]	@ (8005b04 <__libc_init_array+0x38>)
 8005ad0:	4c0d      	ldr	r4, [pc, #52]	@ (8005b08 <__libc_init_array+0x3c>)
 8005ad2:	1b64      	subs	r4, r4, r5
 8005ad4:	10a4      	asrs	r4, r4, #2
 8005ad6:	2600      	movs	r6, #0
 8005ad8:	42a6      	cmp	r6, r4
 8005ada:	d109      	bne.n	8005af0 <__libc_init_array+0x24>
 8005adc:	4d0b      	ldr	r5, [pc, #44]	@ (8005b0c <__libc_init_array+0x40>)
 8005ade:	4c0c      	ldr	r4, [pc, #48]	@ (8005b10 <__libc_init_array+0x44>)
 8005ae0:	f000 f818 	bl	8005b14 <_init>
 8005ae4:	1b64      	subs	r4, r4, r5
 8005ae6:	10a4      	asrs	r4, r4, #2
 8005ae8:	2600      	movs	r6, #0
 8005aea:	42a6      	cmp	r6, r4
 8005aec:	d105      	bne.n	8005afa <__libc_init_array+0x2e>
 8005aee:	bd70      	pop	{r4, r5, r6, pc}
 8005af0:	f855 3b04 	ldr.w	r3, [r5], #4
 8005af4:	4798      	blx	r3
 8005af6:	3601      	adds	r6, #1
 8005af8:	e7ee      	b.n	8005ad8 <__libc_init_array+0xc>
 8005afa:	f855 3b04 	ldr.w	r3, [r5], #4
 8005afe:	4798      	blx	r3
 8005b00:	3601      	adds	r6, #1
 8005b02:	e7f2      	b.n	8005aea <__libc_init_array+0x1e>
 8005b04:	08006d28 	.word	0x08006d28
 8005b08:	08006d28 	.word	0x08006d28
 8005b0c:	08006d28 	.word	0x08006d28
 8005b10:	08006d2c 	.word	0x08006d2c

08005b14 <_init>:
 8005b14:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8005b16:	bf00      	nop
 8005b18:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8005b1a:	bc08      	pop	{r3}
 8005b1c:	469e      	mov	lr, r3
 8005b1e:	4770      	bx	lr

08005b20 <_fini>:
 8005b20:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8005b22:	bf00      	nop
 8005b24:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8005b26:	bc08      	pop	{r3}
 8005b28:	469e      	mov	lr, r3
 8005b2a:	4770      	bx	lr
